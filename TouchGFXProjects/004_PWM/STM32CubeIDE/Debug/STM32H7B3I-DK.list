
STM32H7B3I-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028550  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c2c  08028800  08028800  00038800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802c42c  0802c42c  0003c42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802c444  0802c444  000b6978  2**0
                  CONTENTS
  5 .ARM          00000000  0802c444  0802c444  000b6978  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802c444  0802c444  000b6978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802c444  0802c444  0003c444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000000c  0802c460  0802c460  0003c460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000128  24000000  0802c46c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00005a00  24000128  0802c594  00040128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000209e8  24005b28  08031f94  00045b28  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  24026510  08031f94  00046510  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000b6978  2**0
                  CONTENTS, READONLY
 14 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  ALLOC
 15 FontFlashSection 000001a8  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000010  900001a8  900001a8  000501a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 000667c0  900001b8  900001b8  000501b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 Video_RGB_Buffer 0005fa00  d0000000  d0000000  000c0000  2**2
                  ALLOC
 19 .debug_line   000526d9  00000000  00000000  000b69a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_info   000a385e  00000000  00000000  0010907f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00011a6e  00000000  00000000  001ac8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 000042a8  00000000  00000000  001be350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017c238  00000000  00000000  001c25f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00003da0  00000000  00000000  0033e830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00042e4e  00000000  00000000  003425d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000cf  00000000  00000000  0038541e  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00012370  00000000  00000000  003854f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24005b28 	.word	0x24005b28
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080287e8 	.word	0x080287e8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24005b2c 	.word	0x24005b2c
 80002ec:	080287e8 	.word	0x080287e8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
  ldr  r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ba:	f00b fb57 	bl	800ba6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f027 f999 	bl	80276f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f005 fd41 	bl	8005e48 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003cc:	0802c46c 	.word	0x0802c46c
  ldr  r0, =_sdata
 80003d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003d4:	24000128 	.word	0x24000128
  ldr  r2, =_sbss
 80003d8:	24005b28 	.word	0x24005b28
  ldr  r3, = _ebss
 80003dc:	24026510 	.word	0x24026510

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>

080003e2 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8000402:	f003 f9d3 	bl	80037ac <touchgfx_components_init>
  touchgfx_init();
 8000406:	f003 f9a7 	bl	8003758 <touchgfx_init>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}

0800040e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8000416:	f003 f9d1 	bl	80037bc <touchgfx_taskEntry>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>:

    /** Initialize. */
    virtual void init() = 0;

    /** Finalizes an instance of the MCUInstrumentation class. */
    virtual ~MCUInstrumentation()
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    {
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	601a      	str	r2, [r3, #0]
    }
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4618      	mov	r0, r3
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	0802a970 	.word	0x0802a970

08000444 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
    virtual ~MCUInstrumentation()
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    }
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ffe9 	bl	8000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8000452:	210c      	movs	r1, #12
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f027 f8d4 	bl	8027602 <_ZdlPvj>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
    /**
     * Sets MCU activity high.
     *
     * @param  active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	460b      	mov	r3, r1
 800046e:	70fb      	strb	r3, [r7, #3]
    {
        if (active) // Idle task sched out
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d011      	beq.n	800049a <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3310      	adds	r3, #16
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	4798      	blx	r3
 8000482:	4602      	mov	r2, r0
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	441a      	add	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	605a      	str	r2, [r3, #4]
        }
        else // Idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8000498:	e008      	b.n	80004ac <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3310      	adds	r3, #16
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	4798      	blx	r3
 80004a6:	4602      	mov	r2, r0
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	609a      	str	r2, [r3, #8]
    }
 80004ac:	bf00      	nop
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
    /**
     * Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
    }
 80004c0:	4618      	mov	r0, r3
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
    /**
     * Sets number of consumed clock cycles.
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	605a      	str	r2, [r3, #4]
    }
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void CortexMMCUInstrumentation::init()
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 80004f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fa:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4908      	ldr	r1, [pc, #32]	; (8000524 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x40>)
 8000504:	4313      	orrs	r3, r2
 8000506:	600b      	str	r3, [r1, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000edfc 	.word	0xe000edfc
 8000524:	e0001fb0 	.word	0xe0001fb0
 8000528:	c5acce55 	.word	0xc5acce55
 800052c:	e0001000 	.word	0xe0001000

08000530 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	1ad2      	subs	r2, r2, r3
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	085b      	lsrs	r3, r3, #1
 8000548:	441a      	add	r2, r3
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    return *((volatile unsigned int*)0xE0001004);
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x18>)
 8000566:	681b      	ldr	r3, [r3, #0]
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e0001004 	.word	0xe0001004

08000578 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d011      	beq.n	80005ae <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x36>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3310      	adds	r3, #16
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	4798      	blx	r3
 8000596:	4602      	mov	r2, r0
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	60fb      	str	r3, [r7, #12]
        cc_consumed += cc_temp;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	441a      	add	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80005ac:	e008      	b.n	80005c0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x48>
        cc_in = getCPUCycles();
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3310      	adds	r3, #16
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	4798      	blx	r3
 80005ba:	4602      	mov	r2, r0
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	609a      	str	r2, [r3, #8]
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev+0x20>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff23 	bl	8000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	0802a948 	.word	0x0802a948

080005ec <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ffe7 	bl	80005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 80005fa:	210c      	movs	r1, #12
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f027 f800 	bl	8027602 <_ZdlPvj>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    {
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	601a      	str	r2, [r3, #0]
    }
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	0802a9b0 	.word	0x0802a9b0

0800062c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    }
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ffe9 	bl	800060c <_ZN8touchgfx15TouchControllerD1Ev>
 800063a:	2104      	movs	r1, #4
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f026 ffe0 	bl	8027602 <_ZdlPvj>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 8000654:	2308      	movs	r3, #8
 8000656:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <_ZN20STM32TouchController4initEv+0x30>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <_ZN20STM32TouchController4initEv+0x34>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4619      	mov	r1, r3
 800066e:	2000      	movs	r0, #0
 8000670:	f00a ffde 	bl	800b630 <BSP_TS_Init>
}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	24026286 	.word	0x24026286
 8000680:	24026288 	.word	0x24026288

08000684 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	2000      	movs	r0, #0
 80006a4:	f00b f86a 	bl	800b77c <BSP_TS_GetState>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2301      	movne	r3, #1
 80006b0:	2300      	moveq	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00a      	beq.n	80006ce <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006bc:	f383 8811 	msr	BASEPRI, r3
 80006c0:	f3bf 8f6f 	isb	sy
 80006c4:	f3bf 8f4f 	dsb	sy
 80006c8:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006ca:	bf00      	nop
    {
        configASSERT(0);
 80006cc:	e7fe      	b.n	80006cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d009      	beq.n	80006e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]

        return true;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e000      	b.n	80006ea <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff81 	bl	800060c <_ZN8touchgfx15TouchControllerD1Ev>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	0802a998 	.word	0x0802a998

08000718 <_ZN20STM32TouchControllerD0Ev>:
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ffe7 	bl	80006f4 <_ZN20STM32TouchControllerD1Ev>
 8000726:	2104      	movs	r1, #4
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f026 ff6a 	bl	8027602 <_ZdlPvj>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
    for (int id = 0; id <= 4; id++)
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b04      	cmp	r3, #4
 8000746:	dc16      	bgt.n	8000776 <_ZN8touchgfx4GPIO4initEv+0x3e>
    {
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f909 	bl	8000964 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <_ZN8touchgfx4GPIO4initEv+0x36>
        {
            if (GPIO_InvertedLevels[id] != 1)
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <_ZN8touchgfx4GPIO4initEv+0x48>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d004      	beq.n	800076e <_ZN8touchgfx4GPIO4initEv+0x36>
            {
                GPIO_InvertedLevels[id] = 1;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <_ZN8touchgfx4GPIO4initEv+0x48>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2101      	movs	r1, #1
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int id = 0; id <= 4; id++)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	e7e5      	b.n	8000742 <_ZN8touchgfx4GPIO4initEv+0xa>
            }
        }
    }
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	24005b44 	.word	0x24005b44

08000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b03      	cmp	r3, #3
 8000792:	d84b      	bhi.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	080007cd 	.word	0x080007cd
 80007a4:	080007ed 	.word	0x080007ed
 80007a8:	0800080d 	.word	0x0800080d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf0c      	ite	eq
 80007b8:	2301      	moveq	r3, #1
 80007ba:	2300      	movne	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 80007c6:	f00c f9a7 	bl	800cb18 <HAL_GPIO_WritePin>
#endif
        break;
 80007ca:	e02f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf0c      	ite	eq
 80007d8:	2301      	moveq	r3, #1
 80007da:	2300      	movne	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	4814      	ldr	r0, [pc, #80]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 80007e6:	f00c f997 	bl	800cb18 <HAL_GPIO_WritePin>
#endif
        break;
 80007ea:	e01f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4a11      	ldr	r2, [pc, #68]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb8>)
 8000806:	f00c f987 	bl	800cb18 <HAL_GPIO_WritePin>
#endif
        break;
 800080a:	e00f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8000826:	f00c f977 	bl	800cb18 <HAL_GPIO_WritePin>
#endif
        break;
 800082a:	bf00      	nop
    }
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	24005b44 	.word	0x24005b44
 8000838:	58021c00 	.word	0x58021c00
 800083c:	58022000 	.word	0x58022000

08000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d84b      	bhi.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
 8000850:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8000852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000856:	bf00      	nop
 8000858:	08000869 	.word	0x08000869
 800085c:	08000889 	.word	0x08000889
 8000860:	080008a9 	.word	0x080008a9
 8000864:	080008c9 	.word	0x080008c9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 800086c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 8000874:	2301      	movs	r3, #1
 8000876:	e000      	b.n	800087a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 8000878:	2300      	movs	r3, #0
 800087a:	461a      	mov	r2, r3
 800087c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8000882:	f00c f949 	bl	800cb18 <HAL_GPIO_WritePin>
#endif
        break;
 8000886:	e02f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 800088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 8000894:	2301      	movs	r3, #1
 8000896:	e000      	b.n	800089a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5a>
 8000898:	2300      	movs	r3, #0
 800089a:	461a      	mov	r2, r3
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 80008a2:	f00c f939 	bl	800cb18 <HAL_GPIO_WritePin>
#endif
        break;
 80008a6:	e01f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 80008ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>
 80008b4:	2301      	movs	r3, #1
 80008b6:	e000      	b.n	80008ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7a>
 80008b8:	2300      	movs	r3, #0
 80008ba:	461a      	mov	r2, r3
 80008bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb8>)
 80008c2:	f00c f929 	bl	800cb18 <HAL_GPIO_WritePin>
#endif
        break;
 80008c6:	e00f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 80008cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x98>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x9a>
 80008d8:	2300      	movs	r3, #0
 80008da:	461a      	mov	r2, r3
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 80008e2:	f00c f919 	bl	800cb18 <HAL_GPIO_WritePin>
#endif
        break;
 80008e6:	bf00      	nop
    }
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	24005b44 	.word	0x24005b44
 80008f4:	58021c00 	.word	0x58021c00
 80008f8:	58022000 	.word	0x58022000

080008fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d823      	bhi.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 800090c:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	08000925 	.word	0x08000925
 8000918:	08000931 	.word	0x08000931
 800091c:	0800093d 	.word	0x0800093d
 8000920:	08000949 	.word	0x08000949
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800092a:	f00c f90e 	bl	800cb4a <HAL_GPIO_TogglePin>
#endif
        break;
 800092e:	e011      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8000936:	f00c f908 	bl	800cb4a <HAL_GPIO_TogglePin>
#endif
        break;
 800093a:	e00b      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8000942:	f00c f902 	bl	800cb4a <HAL_GPIO_TogglePin>
#endif
        break;
 8000946:	e005      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800094e:	f00c f8fc 	bl	800cb4a <HAL_GPIO_TogglePin>
#endif
        break;
 8000952:	bf00      	nop
    }
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58021c00 	.word	0x58021c00
 8000960:	58022000 	.word	0x58022000

08000964 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
    switch (id)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b03      	cmp	r3, #3
 8000976:	d82b      	bhi.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	08000991 	.word	0x08000991
 8000984:	080009a1 	.word	0x080009a1
 8000988:	080009b1 	.word	0x080009b1
 800098c:	080009c1 	.word	0x080009c1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 8000996:	f00c f8a7 	bl	800cae8 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 800099e:	e017      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 80009a6:	f00c f89f 	bl	800cae8 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009ae:	e00f      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x84>)
 80009b6:	f00c f897 	bl	800cae8 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009be:	e007      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80009c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c4:	4807      	ldr	r0, [pc, #28]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 80009c6:	f00c f88f 	bl	800cae8 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009ce:	bf00      	nop
    }
    return (bitstatus == GPIO_PIN_SET);
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	bf0c      	ite	eq
 80009d6:	2301      	moveq	r3, #1
 80009d8:	2300      	movne	r3, #0
 80009da:	b2db      	uxtb	r3, r3
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58021c00 	.word	0x58021c00
 80009e8:	58022000 	.word	0x58022000

080009ec <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    {
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
    }
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	0802bd04 	.word	0x0802bd04

08000a0c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    }
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffe9 	bl	80009ec <_ZN8touchgfx3HALD1Ev>
 8000a1a:	217c      	movs	r1, #124	; 0x7c
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f026 fdf0 	bl	8027602 <_ZdlPvj>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
    {
        return instance;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
    }
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	2402628c 	.word	0x2402628c

08000a44 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	78fa      	ldrb	r2, [r7, #3]
 8000a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	887a      	ldrh	r2, [r7, #2]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d304      	bcc.n	8000a90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	883a      	ldrh	r2, [r7, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d205      	bcs.n	8000a9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8000a94:	219e      	movs	r1, #158	; 0x9e
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8000a98:	f026 fde2 	bl	8027660 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8000aa4:	883b      	ldrh	r3, [r7, #0]
 8000aa6:	8013      	strh	r3, [r2, #0]
    }
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	24026280 	.word	0x24026280
 8000ab4:	24026282 	.word	0x24026282
 8000ab8:	08028800 	.word	0x08028800
 8000abc:	08028864 	.word	0x08028864
 8000ac0:	080288a8 	.word	0x080288a8
 8000ac4:	24026286 	.word	0x24026286
 8000ac8:	24026288 	.word	0x24026288

08000acc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d009      	beq.n	8000af2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4610      	mov	r0, r2
 8000aec:	4798      	blx	r3
 8000aee:	4603      	mov	r3, r0
 8000af0:	e000      	b.n	8000af4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8000af2:	2300      	movs	r3, #0
    }
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f01a fb01 	bl	801b10c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	33ac      	adds	r3, #172	; 0xac
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
    }
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8000b28:	2300      	movs	r3, #0
    }
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8000b50:	f240 21d2 	movw	r1, #722	; 0x2d2
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8000b56:	f026 fd83 	bl	8027660 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf14      	ite	ne
 8000b6c:	2301      	movne	r3, #1
 8000b6e:	2300      	moveq	r3, #0
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8000b74:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	338c      	adds	r3, #140	; 0x8c
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6839      	ldr	r1, [r7, #0]
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	4798      	blx	r3
    }
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	080288f0 	.word	0x080288f0
 8000b90:	08028928 	.word	0x08028928
 8000b94:	080288a8 	.word	0x080288a8
 8000b98:	2402628a 	.word	0x2402628a

08000b9c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2301      	movne	r3, #1
 8000bb4:	2300      	moveq	r3, #0
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8000bba:	701a      	strb	r2, [r3, #0]
    }
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	2402628b 	.word	0x2402628b

08000bcc <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
    /**
     * Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	611a      	str	r2, [r3, #16]
    }
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     * This method sets a flag that determines if generic HAL should calculate MCU load
     * based on concrete MCU instrumentation.
     *
     * @param  enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8000c10:	2300      	movs	r3, #0
    }
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4798      	blx	r3
        }
    }
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8000c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3318      	adds	r3, #24
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4610      	mov	r0, r2
 8000c74:	4798      	blx	r3
 8000c76:	4603      	mov	r3, r0
    }
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d011      	beq.n	8000cbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d11e      	bne.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cac:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000cb0:	89bb      	ldrh	r3, [r7, #12]
 8000cb2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8000cba:	e010      	b.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00c      	beq.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cd0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000cd4:	89fb      	ldrh	r3, [r7, #14]
 8000cd6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
    }
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	24026284 	.word	0x24026284
 8000cf0:	24026282 	.word	0x24026282
 8000cf4:	24026280 	.word	0x24026280

08000cf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f019 fc65 	bl	801a5d2 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe63 	bl	80009ec <_ZN8touchgfx3HALD1Ev>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	0802aea0 	.word	0x0802aea0

08000d34 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ffe7 	bl	8000d10 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000d42:	217c      	movs	r1, #124	; 0x7c
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f026 fc5c 	bl	8027602 <_ZdlPvj>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffca 	bl	8000cf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 f9fc 	bl	8004174 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    instrumentation.init();
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	337c      	adds	r3, #124	; 0x7c
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbb1 	bl	80004e8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
    setMCUInstrumentation(&instrumentation);
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	337c      	adds	r3, #124	; 0x7c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f7ff ff1c 	bl	8000bcc <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    enableMCULoadCalculation(true);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2101      	movs	r1, #1
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff25 	bl	8000be8 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3380      	adds	r3, #128	; 0x80
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
    enableInterrupts();
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3378      	adds	r3, #120	; 0x78
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8000dc8:	f001 fadc 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3370      	adds	r3, #112	; 0x70
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8000de0:	f00b fe9a 	bl	800cb18 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2104      	movs	r1, #4
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000dea:	f00b fe95 	bl	800cb18 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2102      	movs	r1, #2
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000df4:	f00b fe90 	bl	800cb18 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000df8:	f001 fac4 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3370      	adds	r3, #112	; 0x70
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4610      	mov	r0, r2
 8000e08:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8000e0a:	e7f5      	b.n	8000df8 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8000e0c:	58022800 	.word	0x58022800
 8000e10:	58020000 	.word	0x58020000

08000e14 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fa68 	bl	80042f4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fa67 	bl	8004310 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 fa6e 	bl	800433c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e68:	f3bf 8f4f 	dsb	sy
}
 8000e6c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e74:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	0b5b      	lsrs	r3, r3, #13
 8000e7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e7e:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e88:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	015a      	lsls	r2, r3, #5
 8000e8e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e92:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e98:	4912      	ldr	r1, [pc, #72]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	60fa      	str	r2, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	bf14      	ite	ne
 8000eaa:	2301      	movne	r3, #1
 8000eac:	2300      	moveq	r3, #0
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d000      	beq.n	8000eb6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8000eb4:	e7e9      	b.n	8000e8a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	613a      	str	r2, [r7, #16]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf14      	ite	ne
 8000ec0:	2301      	movne	r3, #1
 8000ec2:	2300      	moveq	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d000      	beq.n	8000ecc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8000eca:	e7d9      	b.n	8000e80 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ecc:	f3bf 8f4f 	dsb	sy
}
 8000ed0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ed2:	f3bf 8f6f 	isb	sy
}
 8000ed6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000ed8:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 f97a 	bl	80041ec <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 f97e 	bl	800420c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f980 	bl	8004228 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 f982 	bl	8004244 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <IdleTaskHook>:

/* USER CODE BEGIN extern C functions */
extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
        if ((int)p) //idle task sched out
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <IdleTaskHook+0x1e>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8000f56:	f7ff fd69 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f01a f8ee 	bl	801b140 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8000f64:	e006      	b.n	8000f74 <IdleTaskHook+0x2c>
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8000f66:	f7ff fd61 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f01a f8e6 	bl	801b140 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
 8000f74:	2301      	movs	r3, #1
    }
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <_ZN11TouchGFXHALD1Ev+0x2c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	337c      	adds	r3, #124	; 0x7c
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb18 	bl	80005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff feb8 	bl	8000d10 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	0802a9c8 	.word	0x0802a9c8

08000fb0 <_ZN11TouchGFXHALD0Ev>:
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe1 	bl	8000f80 <_ZN11TouchGFXHALD1Ev>
 8000fbe:	2188      	movs	r1, #136	; 0x88
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f026 fb1e 	bl	8027602 <_ZdlPvj>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    {
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <_ZN12MJPEGDecoderD1Ev+0x1c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]
    }
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	0802aae4 	.word	0x0802aae4

08000ff0 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    }
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffe9 	bl	8000fd0 <_ZN12MJPEGDecoderD1Ev>
 8000ffe:	2104      	movs	r1, #4
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f026 fafe 	bl	8027602 <_ZdlPvj>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	0802aae4 	.word	0x0802aae4

08001064 <_ZN20HardwareMJPEGDecoderC1Ev>:
  uint32_t LastLineHeight;
  uint32_t MCU_pr_line;
  uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ffe8 	bl	8001044 <_ZN12MJPEGDecoderC1Ev>
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 80010dc:	f004 fd10 	bl	8005b00 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2001      	movs	r0, #1
 80010e6:	f014 fc00 	bl	80158ea <osSemaphoreNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0802aaa0 	.word	0x0802aaa0
 8001100:	24005b8c 	.word	0x24005b8c

08001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	1acb      	subs	r3, r1, r3
 8001126:	4413      	add	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e004      	b.n	8001136 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f026 ff4a 	bl	8027fd4 <strncmp>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3301      	adds	r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	ea41 0203 	orr.w	r2, r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3302      	adds	r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3303      	adds	r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	061b      	lsls	r3, r3, #24
 80011a2:	4313      	orrs	r3, r2
 80011a4:	e016      	b.n	80011d4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	431a      	orrs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3302      	adds	r3, #2
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	431a      	orrs	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3303      	adds	r3, #3
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	4313      	orrs	r3, r2
    }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d013      	beq.n	800121a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3301      	adds	r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	430b      	orrs	r3, r1
 8001218:	e00c      	b.n	8001234 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	4413      	add	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	4313      	orrs	r3, r2
    }
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	2b00      	cmp	r3, #0
 8001252:	d033      	beq.n	80012bc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d909      	bls.n	8001272 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2209      	movs	r2, #9
 8001262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 800126a:	21a6      	movs	r1, #166	; 0xa6
 800126c:	4819      	ldr	r0, [pc, #100]	; (80012d4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 800126e:	f026 f9f7 	bl	8027660 <__assert_func>
        }

        reader->seek(offset);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	330c      	adds	r3, #12
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	4610      	mov	r0, r2
 8001284:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3310      	adds	r3, #16
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4798      	blx	r3
 800129c:	4603      	mov	r3, r0
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	220d      	movs	r2, #13
 80012ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ba:	e003      	b.n	80012c4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4413      	add	r3, r2
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	08028978 	.word	0x08028978
 80012d0:	0802898c 	.word	0x0802898c
 80012d4:	080289d0 	.word	0x080289d0

080012d8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af04      	add	r7, sp, #16
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	460b      	mov	r3, r1
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	4613      	mov	r3, r2
 80012ec:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 80012f6:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 80012f8:	4a4e      	ldr	r2, [pc, #312]	; (8001434 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 80012fa:	21b8      	movs	r1, #184	; 0xb8
 80012fc:	484e      	ldr	r0, [pc, #312]	; (8001438 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 80012fe:	f026 f9af 	bl	8027660 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2208      	movs	r2, #8
 8001308:	4619      	mov	r1, r3
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff ff98 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4619      	mov	r1, r3
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff ff62 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800131c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	3302      	adds	r3, #2
 8001324:	4619      	mov	r1, r3
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f7ff ff5a 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800132c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	3304      	adds	r3, #4
 8001334:	4619      	mov	r1, r3
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7ff ff07 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800133c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 800133e:	f243 0330 	movw	r3, #12336	; 0x3030
 8001342:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8001344:	f246 3364 	movw	r3, #25444	; 0x6364
 8001348:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4413      	add	r3, r2
 8001352:	f103 0208 	add.w	r2, r3, #8
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	429a      	cmp	r2, r3
 800135c:	d255      	bcs.n	800140a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	f243 0230 	movw	r2, #12336	; 0x3030
 8001364:	4293      	cmp	r3, r2
 8001366:	d126      	bne.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f246 3264 	movw	r2, #25444	; 0x6364
 800136e:	4293      	cmp	r3, r2
 8001370:	d121      	bne.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01e      	beq.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f103 0208 	add.w	r2, r3, #8
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4619      	mov	r1, r3
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff ff57 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001392:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	6939      	ldr	r1, [r7, #16]
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 fa8e 	bl	80018c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	441a      	add	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
          currentMovieOffset += 8;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f103 0208 	add.w	r2, r3, #8
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	3301      	adds	r3, #1
 80013e0:	f023 0201 	bic.w	r2, r3, #1
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	699a      	ldr	r2, [r3, #24]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d114      	bne.n	800141e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001408:	e009      	b.n	800141e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8001418:	2301      	movs	r3, #1
 800141a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 800141e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	08028a34 	.word	0x08028a34
 8001434:	08028a80 	.word	0x08028a80
 8001438:	080289d0 	.word	0x080289d0

0800143c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 800144c:	4b37      	ldr	r3, [pc, #220]	; (800152c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 800144e:	4a38      	ldr	r2, [pc, #224]	; (8001530 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8001450:	21ec      	movs	r1, #236	; 0xec
 8001452:	4838      	ldr	r0, [pc, #224]	; (8001534 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8001454:	f026 f904 	bl	8027660 <__assert_func>

    readData(currentMovieOffset, 8);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2208      	movs	r2, #8
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff feed 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	3304      	adds	r3, #4
 800146c:	4619      	mov	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe6b 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001474:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	4413      	add	r3, r2
 800147e:	f103 0208 	add.w	r2, r3, #8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	429a      	cmp	r2, r3
 8001488:	d243      	bcs.n	8001512 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4413      	add	r3, r2
 8001492:	f103 0208 	add.w	r2, r3, #8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	3301      	adds	r3, #1
 80014a0:	f023 0201 	bic.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
        frameNumber++;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2208      	movs	r2, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fec0 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fe8a 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80014cc:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	3302      	adds	r3, #2
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fe82 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80014dc:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	3304      	adds	r3, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fe2f 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80014ec:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 80014ee:	f243 0330 	movw	r3, #12336	; 0x3030
 80014f2:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 80014f4:	f246 3364 	movw	r3, #25444	; 0x6364
 80014f8:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f243 0230 	movw	r2, #12336	; 0x3030
 8001500:	4293      	cmp	r3, r2
 8001502:	d1b8      	bne.n	8001476 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f246 3264 	movw	r2, #25444	; 0x6364
 800150a:	4293      	cmp	r3, r2
 800150c:	d1b3      	bne.n	8001476 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 800150e:	2301      	movs	r3, #1
 8001510:	e007      	b.n	8001522 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
    return false;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	08028a34 	.word	0x08028a34
 8001530:	08028adc 	.word	0x08028adc
 8001534:	080289d0 	.word	0x080289d0

08001538 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f834 	bl	80015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3308      	adds	r3, #8
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	4798      	blx	r3
 8001586:	4602      	mov	r2, r0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f819 	bl	80015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 80015da:	2248      	movs	r2, #72	; 0x48
 80015dc:	2100      	movs	r1, #0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fe2e 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6999      	ldr	r1, [r3, #24]
 80015e8:	2304      	movs	r3, #4
 80015ea:	4aa5      	ldr	r2, [pc, #660]	; (8001880 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fd89 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf14      	ite	ne
 80015f8:	2301      	movne	r3, #1
 80015fa:	2300      	moveq	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00a      	beq.n	8001618 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 800160a:	4b9e      	ldr	r3, [pc, #632]	; (8001884 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 800160c:	4a9e      	ldr	r2, [pc, #632]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800160e:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001612:	489e      	ldr	r0, [pc, #632]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001614:	f026 f824 	bl	8027660 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f103 0208 	add.w	r2, r3, #8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6999      	ldr	r1, [r3, #24]
 8001628:	2304      	movs	r3, #4
 800162a:	4a99      	ldr	r2, [pc, #612]	; (8001890 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fd69 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2204      	movs	r2, #4
 8001646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 800164a:	4b92      	ldr	r3, [pc, #584]	; (8001894 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 800164c:	4a8e      	ldr	r2, [pc, #568]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800164e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8001652:	488e      	ldr	r0, [pc, #568]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001654:	f026 f804 	bl	8027660 <__assert_func>
    }

    currentMovieOffset += 4;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	1d1a      	adds	r2, r3, #4
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6999      	ldr	r1, [r3, #24]
 8001666:	2304      	movs	r3, #4
 8001668:	4a8b      	ldr	r2, [pc, #556]	; (8001898 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fd4a 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2205      	movs	r2, #5
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 8001688:	4b84      	ldr	r3, [pc, #528]	; (800189c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 800168a:	4a7f      	ldr	r2, [pc, #508]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800168c:	f240 1143 	movw	r1, #323	; 0x143
 8001690:	487e      	ldr	r0, [pc, #504]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001692:	f025 ffe5 	bl	8027660 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	3304      	adds	r3, #4
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd53 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80016a4:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 80016b2:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 80016b4:	4a74      	ldr	r2, [pc, #464]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80016b6:	f240 1149 	movw	r1, #329	; 0x149
 80016ba:	4874      	ldr	r0, [pc, #464]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80016bc:	f025 ffd0 	bl	8027660 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	3308      	adds	r3, #8
 80016cc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 80016ce:	2304      	movs	r3, #4
 80016d0:	4a74      	ldr	r2, [pc, #464]	; (80018a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 80016d2:	6979      	ldr	r1, [r7, #20]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fd15 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2206      	movs	r2, #6
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3304      	adds	r3, #4
 80016fc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 80016fe:	2304      	movs	r3, #4
 8001700:	4a69      	ldr	r2, [pc, #420]	; (80018a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8001702:	6979      	ldr	r1, [r7, #20]
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fcfd 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2207      	movs	r2, #7
 800171e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8001728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800172c:	2b00      	cmp	r3, #0
 800172e:	d028      	beq.n	8001782 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3308      	adds	r3, #8
 8001734:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fd06 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800173e:	4603      	mov	r3, r0
 8001740:	4a5a      	ldr	r2, [pc, #360]	; (80018ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	099a      	lsrs	r2, r3, #6
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3310      	adds	r3, #16
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fcf9 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001758:	4602      	mov	r2, r0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3320      	adds	r3, #32
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fcf0 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800176a:	4602      	mov	r2, r0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3324      	adds	r3, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fce7 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800177c:	4602      	mov	r2, r0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	3308      	adds	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 800178c:	220c      	movs	r2, #12
 800178e:	6a39      	ldr	r1, [r7, #32]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fd55 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f103 0108 	add.w	r1, r3, #8
 800179c:	2304      	movs	r3, #4
 800179e:	4a44      	ldr	r2, [pc, #272]	; (80018b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fcaf 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00b      	beq.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	6a3a      	ldr	r2, [r7, #32]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d201      	bcs.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d012      	beq.n	80017f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	3304      	adds	r3, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fcba 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80017d6:	4603      	mov	r3, r0
 80017d8:	3308      	adds	r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 80017e4:	220c      	movs	r2, #12
 80017e6:	6a39      	ldr	r1, [r7, #32]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fd29 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80017ee:	e7d2      	b.n	8001796 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	220a      	movs	r2, #10
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8001802:	e05e      	b.n	80018c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f103 020c 	add.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	3304      	adds	r3, #4
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fc98 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800181a:	4602      	mov	r2, r0
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	4413      	add	r3, r2
 8001820:	f103 0208 	add.w	r2, r3, #8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset+4)+8;
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	3304      	adds	r3, #4
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fc8b 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001834:	4603      	mov	r3, r0
 8001836:	3308      	adds	r3, #8
 8001838:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 800183a:	6a3a      	ldr	r2, [r7, #32]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4413      	add	r3, r2
 8001840:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8001842:	2204      	movs	r2, #4
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fcfa 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800184c:	2304      	movs	r3, #4
 800184e:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fc56 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d027      	beq.n	80018b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a3a      	ldr	r2, [r7, #32]
 800186c:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699a      	ldr	r2, [r3, #24]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	621a      	str	r2, [r3, #32]
 800187c:	e021      	b.n	80018c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 800187e:	bf00      	nop
 8001880:	08028b10 	.word	0x08028b10
 8001884:	08028b18 	.word	0x08028b18
 8001888:	08028b34 	.word	0x08028b34
 800188c:	080289d0 	.word	0x080289d0
 8001890:	08028b64 	.word	0x08028b64
 8001894:	08028b6c 	.word	0x08028b6c
 8001898:	08028b84 	.word	0x08028b84
 800189c:	08028b8c 	.word	0x08028b8c
 80018a0:	08028ba4 	.word	0x08028ba4
 80018a4:	08028bb0 	.word	0x08028bb0
 80018a8:	08028bb8 	.word	0x08028bb8
 80018ac:	10624dd3 	.word	0x10624dd3
 80018b0:	08028bc0 	.word	0x08028bc0
 80018b4:	08028bc8 	.word	0x08028bc8
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	220b      	movs	r2, #11
 80018bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 80018c0:	bf00      	nop
}
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
    if (length == 0)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d05f      	beq.n	800199c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd4>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d05d      	beq.n	800199e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
    {
      // Update JPEG conversion parameters
      JPEG_ConvertorParams.bytes_pr_pixel = 3;
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018e4:	2203      	movs	r2, #3
 80018e6:	611a      	str	r2, [r3, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a2d      	ldr	r2, [pc, #180]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018ee:	6013      	str	r3, [r2, #0]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
      {
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	3310      	adds	r3, #16
 8001906:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001908:	6013      	str	r3, [r2, #0]
      }
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	015b      	lsls	r3, r3, #5
 8001916:	461a      	mov	r2, r3
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800191a:	605a      	str	r2, [r3, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001924:	60d3      	str	r3, [r2, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	f1c3 0310 	rsb	r3, r3, #16
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001934:	6093      	str	r3, [r2, #8]

      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	481a      	ldr	r0, [pc, #104]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800193e:	f000 f901 	bl	8001b44 <JPEG_Decode_DMA>
      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4619      	mov	r1, r3
 8001948:	4817      	ldr	r0, [pc, #92]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800194a:	f000 fab5 	bl	8001eb8 <JPEG_OutputHandler>
 800194e:	4603      	mov	r3, r0
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001952:	6013      	str	r3, [r2, #0]

        //If nothing to do, allow other tasks
        if (JpegProcessing_End == 2)
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xac>
        {
          SEM_WAIT(semDecodingDone);
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f04f 31ff 	mov.w	r1, #4294967295
 800196e:	4618      	mov	r0, r3
 8001970:	f014 f844 	bl	80159fc <osSemaphoreAcquire>
        }
      }
      while(JpegProcessing_End != 1);
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d000      	beq.n	8001988 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>
      do
 8001986:	e7dc      	b.n	8001942 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7a>

      // reset job queue and flags after frame is decoded
      external_queue.reset();
 8001988:	480a      	ldr	r0, [pc, #40]	; (80019b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xec>)
 800198a:	f000 fc07 	bl	800219c <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>
      Jpeg_HWDecodingEnd = 0;
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf0>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
      DMA2D_CopyBufferEnd = 0;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf4>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e000      	b.n	800199e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
        return;
 800199c:	bf00      	nop
    }
}
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	24005bb0 	.word	0x24005bb0
 80019a8:	2400af64 	.word	0x2400af64
 80019ac:	24005b7c 	.word	0x24005b7c
 80019b0:	24005b8c 	.word	0x24005b8c
 80019b4:	24005b90 	.word	0x24005b90
 80019b8:	24005b64 	.word	0x24005b64
 80019bc:	24005b74 	.word	0x24005b74

080019c0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
     // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2208      	movs	r2, #8
 80019d4:	4619      	mov	r1, r3
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fc32 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	3304      	adds	r3, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fbb0 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80019ea:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	3308      	adds	r3, #8
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fc22 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80019fc:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d018      	beq.n	8001a36 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
    {
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	6939      	ldr	r1, [r7, #16]
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8001a0c:	f000 f89a 	bl	8001b44 <JPEG_Decode_DMA>

      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	4619      	mov	r1, r3
 8001a16:	480a      	ldr	r0, [pc, #40]	; (8001a40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8001a18:	f000 fa4e 	bl	8001eb8 <JPEG_OutputHandler>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8001a20:	6013      	str	r3, [r2, #0]
      }
      while(JpegProcessing_End == 0);
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d000      	beq.n	8001a36 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
      do
 8001a34:	e7ec      	b.n	8001a10 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2400af64 	.word	0x2400af64
 8001a44:	24005b7c 	.word	0x24005b7c

08001a48 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	807b      	strh	r3, [r7, #2]
    assert(0);
 8001a56:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8001a5a:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 8001a60:	f025 fdfe 	bl	8027660 <__assert_func>
 8001a64:	08028bd0 	.word	0x08028bd0
 8001a68:	08028bd4 	.word	0x08028bd4
 8001a6c:	080289d0 	.word	0x080289d0

08001a70 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	332c      	adds	r3, #44	; 0x2c
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
 8001a90:	4602      	mov	r2, r0
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	4293      	cmp	r3, r2
 8001a96:	bf8c      	ite	hi
 8001a98:	2301      	movhi	r3, #1
 8001a9a:	2300      	movls	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	332c      	adds	r3, #44	; 0x2c
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
 8001aae:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	3308      	adds	r3, #8
 8001abe:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fbbb 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3308      	adds	r3, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fb3a 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4413      	add	r3, r2
 8001ade:	1f1a      	subs	r2, r3, #4
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	615a      	str	r2, [r3, #20]
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]

}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 8001b22:	b490      	push	{r4, r7}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4614      	mov	r4, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc90      	pop	{r4, r7}
 8001b42:	4770      	bx	lr

08001b44 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 8001b52:	4a2a      	ldr	r2, [pc, #168]	; (8001bfc <JPEG_Decode_DMA+0xb8>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6013      	str	r3, [r2, #0]
    Output_Is_Paused = 0;
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <JPEG_Decode_DMA+0xbc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <JPEG_Decode_DMA+0xc0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <JPEG_Decode_DMA+0xc4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <JPEG_Decode_DMA+0xc8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <JPEG_Decode_DMA+0xcc>)
 8001b74:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 8001b76:	4a27      	ldr	r2, [pc, #156]	; (8001c14 <JPEG_Decode_DMA+0xd0>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <JPEG_Decode_DMA+0xd4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    DMA2D_output_Is_Paused = 1;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <JPEG_Decode_DMA+0xd8>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d816      	bhi.n	8001bc0 <JPEG_Decode_DMA+0x7c>
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001b92:	4923      	ldr	r1, [pc, #140]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001ba4:	491e      	ldr	r1, [pc, #120]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e7e5      	b.n	8001b8c <JPEG_Decode_DMA+0x48>
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <JPEG_Decode_DMA+0xc4>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4916      	ldr	r1, [pc, #88]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <JPEG_Decode_DMA+0xe0>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	01db      	lsls	r3, r3, #7
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	460b      	mov	r3, r1
 8001be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f00b ff5b 	bl	800daa6 <HAL_JPEG_Decode_DMA>

    return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	24005b54 	.word	0x24005b54
 8001c00:	24005b70 	.word	0x24005b70
 8001c04:	24005b68 	.word	0x24005b68
 8001c08:	24005b6c 	.word	0x24005b6c
 8001c0c:	24005b58 	.word	0x24005b58
 8001c10:	24005b60 	.word	0x24005b60
 8001c14:	24005b5c 	.word	0x24005b5c
 8001c18:	24005b88 	.word	0x24005b88
 8001c1c:	24005b78 	.word	0x24005b78
 8001c20:	24000004 	.word	0x24000004
 8001c24:	24005bb0 	.word	0x24005bb0

08001c28 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d12f      	bne.n	8001c9a <HAL_JPEG_InfoReadyCallback+0x72>
  {
    if((pInfo->ImageWidth % 16) != 0)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_JPEG_InfoReadyCallback+0x2e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f023 030f 	bic.w	r3, r3, #15
 8001c4e:	f103 0210 	add.w	r2, r3, #16
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 16) != 0)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_JPEG_InfoReadyCallback+0x4a>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f023 030f 	bic.w	r3, r3, #15
 8001c6a:	f103 0210 	add.w	r2, r3, #16
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	609a      	str	r2, [r3, #8]

    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_JPEG_InfoReadyCallback+0x124>)
 8001c74:	4936      	ldr	r1, [pc, #216]	; (8001d50 <HAL_JPEG_InfoReadyCallback+0x128>)
 8001c76:	6838      	ldr	r0, [r7, #0]
 8001c78:	f003 fde8 	bl	800584c <TGFX_JPEG_GetDecodeColorConvertFunc>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73bb      	strb	r3, [r7, #14]
    if(status != HAL_OK)
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d05d      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d05a      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8001c8e:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <HAL_JPEG_InfoReadyCallback+0x130>)
 8001c90:	f240 212e 	movw	r1, #558	; 0x22e
 8001c94:	4831      	ldr	r0, [pc, #196]	; (8001d5c <HAL_JPEG_InfoReadyCallback+0x134>)
 8001c96:	f025 fce3 	bl	8027660 <__assert_func>
    }
  }
  else
  {
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d11b      	bne.n	8001cda <HAL_JPEG_InfoReadyCallback+0xb2>
    {
      if((pInfo->ImageWidth % 16) != 0)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_JPEG_InfoReadyCallback+0x96>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f023 030f 	bic.w	r3, r3, #15
 8001cb6:	f103 0210 	add.w	r2, r3, #16
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_JPEG_InfoReadyCallback+0xb2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	f103 0208 	add.w	r2, r3, #8
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	609a      	str	r2, [r3, #8]
    }

    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d11b      	bne.n	8001d1a <HAL_JPEG_InfoReadyCallback+0xf2>
    {
      if((pInfo->ImageWidth % 8) != 0)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_JPEG_InfoReadyCallback+0xd6>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f023 0307 	bic.w	r3, r3, #7
 8001cf6:	f103 0208 	add.w	r2, r3, #8
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_JPEG_InfoReadyCallback+0xf2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	f103 0208 	add.w	r2, r3, #8
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	609a      	str	r2, [r3, #8]
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_JPEG_InfoReadyCallback+0x124>)
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <HAL_JPEG_InfoReadyCallback+0x128>)
 8001d1e:	6838      	ldr	r0, [r7, #0]
 8001d20:	f017 fde8 	bl	80198f4 <JPEG_GetDecodeColorConvertFunc>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_JPEG_InfoReadyCallback+0x130>)
 8001d38:	f44f 7112 	mov.w	r1, #584	; 0x248
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <HAL_JPEG_InfoReadyCallback+0x134>)
 8001d3e:	f025 fc8f 	bl	8027660 <__assert_func>
    }
  }
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	24005b80 	.word	0x24005b80
 8001d50:	24005b84 	.word	0x24005b84
 8001d54:	08028c30 	.word	0x08028c30
 8001d58:	08028c44 	.word	0x08028c44
 8001d5c:	080289d0 	.word	0x080289d0

08001d60 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d74:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_JPEG_GetDataCallback+0x60>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d218      	bcs.n	8001db4 <HAL_JPEG_GetDataCallback+0x54>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d8c:	6013      	str	r3, [r2, #0]
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_JPEG_GetDataCallback+0x60>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	60fb      	str	r3, [r7, #12]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da6:	bf28      	it	cs
 8001da8:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8001dac:	461a      	mov	r2, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f00c f81f 	bl	800ddf2 <HAL_JPEG_ConfigInputBuffer>
  }
}
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	24005b58 	.word	0x24005b58
 8001dc0:	24005b5c 	.word	0x24005b5c
 8001dc4:	24005b60 	.word	0x24005b60

08001dc8 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4927      	ldr	r1, [pc, #156]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4922      	ldr	r1, [pc, #136]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	3308      	adds	r3, #8
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Write_BufferIndex++;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e06:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d902      	bls.n	8001e16 <HAL_JPEG_DataReadyCallback+0x4e>
    {
      JPEG_OUT_Write_BufferIndex = 0;
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4917      	ldr	r1, [pc, #92]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_JPEG_DataReadyCallback+0x72>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f00b fe9c 	bl	800db6c <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_JPEG_DataReadyCallback+0xb4>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_JPEG_DataReadyCallback+0xb8>)
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	01db      	lsls	r3, r3, #7
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f00b ffda 	bl	800de16 <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_JPEG_DataReadyCallback+0xbc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f013 fe1a 	bl	8015aa0 <osSemaphoreRelease>
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	24005b6c 	.word	0x24005b6c
 8001e78:	24000004 	.word	0x24000004
 8001e7c:	24005b70 	.word	0x24005b70
 8001e80:	24005bb0 	.word	0x24005bb0
 8001e84:	24005b8c 	.word	0x24005b8c

08001e88 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
  __disable_irq();
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <HAL_JPEG_ErrorCallback+0xc>
	...

08001e98 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1;
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	24005b64 	.word	0x24005b64

08001eb8 <JPEG_OutputHandler>:
  * @param hjpeg: JPEG handle pointer
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <JPEG_OutputHandler+0x120>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <JPEG_OutputHandler+0x1e>
 8001eca:	4b44      	ldr	r3, [pc, #272]	; (8001fdc <JPEG_OutputHandler+0x124>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <JPEG_OutputHandler+0x1e>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <JPEG_OutputHandler+0x20>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <JPEG_OutputHandler+0x28>
  {
      return 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e077      	b.n	8001fd0 <JPEG_OutputHandler+0x118>
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	493f      	ldr	r1, [pc, #252]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <JPEG_OutputHandler+0x4a>
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <JPEG_OutputHandler+0x4a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <JPEG_OutputHandler+0x4c>
 8001f02:	2300      	movs	r3, #0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02d      	beq.n	8001f64 <JPEG_OutputHandler+0xac>
  {
      External_DMA2D_JobTypeDef new_job = {
          MCU_BlockIndex,
          &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
      };
 8001f08:	4b38      	ldr	r3, [pc, #224]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60bb      	str	r3, [r7, #8]
          &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
 8001f0e:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f1c:	4413      	add	r3, r2
      };
 8001f1e:	60fb      	str	r3, [r7, #12]

      external_queue.push(new_job);
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4619      	mov	r1, r3
 8001f26:	4832      	ldr	r0, [pc, #200]	; (8001ff0 <JPEG_OutputHandler+0x138>)
 8001f28:	f000 f94d 	bl	80021c6 <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>

      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <JPEG_OutputHandler+0x13c>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a2d      	ldr	r2, [pc, #180]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f38:	6013      	str	r3, [r2, #0]

      JPEG_OUT_Read_BufferIndex++;
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f42:	6013      	str	r3, [r2, #0]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001f44:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d902      	bls.n	8001f52 <JPEG_OutputHandler+0x9a>
      {
        JPEG_OUT_Read_BufferIndex = 0;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
      }

      DMA2D_output_Is_Paused = 0;
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

      // Try to start DMA2D
      dma.start();
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3310      	adds	r3, #16
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	4798      	blx	r3
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001f66:	681b      	ldr	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d117      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <JPEG_OutputHandler+0x144>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	491c      	ldr	r1, [pc, #112]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	781b      	ldrb	r3, [r3, #0]
  if((Output_Is_Paused == 1) && \
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	781b      	ldrb	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <JPEG_OutputHandler+0xe6>
 8001f9c:	2300      	movs	r3, #0
  if((Output_Is_Paused == 1) && \
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <JPEG_OutputHandler+0xf8>
  {
      Output_Is_Paused = 0;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001fa8:	2102      	movs	r1, #2
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f00b fe36 	bl	800dc1c <HAL_JPEG_Resume>
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <JPEG_OutputHandler+0x10c>
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <JPEG_OutputHandler+0x10c>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <JPEG_OutputHandler+0x10e>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <JPEG_OutputHandler+0x116>
  {
      return 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e000      	b.n	8001fd0 <JPEG_OutputHandler+0x118>
  }

  return 0;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24005b64 	.word	0x24005b64
 8001fdc:	24005b74 	.word	0x24005b74
 8001fe0:	24005b68 	.word	0x24005b68
 8001fe4:	24000004 	.word	0x24000004
 8001fe8:	24005b78 	.word	0x24005b78
 8001fec:	24005b88 	.word	0x24005b88
 8001ff0:	24005b90 	.word	0x24005b90
 8001ff4:	24005bb0 	.word	0x24005bb0
 8001ff8:	24005b70 	.word	0x24005b70
 8001ffc:	24005b6c 	.word	0x24005b6c

08002000 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t xRef, yRef, refline;

  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	011a      	lsls	r2, r3, #4
 800200e:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	617b      	str	r3, [r7, #20]
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	fbb3 f1f2 	udiv	r1, r3, r2
 8002028:	fb01 f202 	mul.w	r2, r1, r2
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	613b      	str	r3, [r7, #16]

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	fb03 f202 	mul.w	r2, r3, r2
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	6939      	ldr	r1, [r7, #16]
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800204a:	2201      	movs	r2, #1
 800204c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <DMA2D_CopyBuffer+0xd0>)
 8002054:	6819      	ldr	r1, [r3, #0]
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	1acb      	subs	r3, r1, r3
 800205c:	429a      	cmp	r2, r3
 800205e:	d309      	bcc.n	8002074 <DMA2D_CopyBuffer+0x74>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	4917      	ldr	r1, [pc, #92]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	644b      	str	r3, [r1, #68]	; 0x44
 8002072:	e007      	b.n	8002084 <DMA2D_CopyBuffer+0x84>
  }
  else
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <DMA2D_CopyBuffer+0xd4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	440b      	add	r3, r1
 8002090:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f1c3 031e 	rsb	r3, r3, #30
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	6413      	str	r3, [r2, #64]	; 0x40

  /* DMA2D FGOR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGOR, 0);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <DMA2D_CopyBuffer+0xd8>)
 80020aa:	61da      	str	r2, [r3, #28]

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020b4:	60da      	str	r2, [r3, #12]

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <DMA2D_CopyBuffer+0xdc>)
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	24005bb0 	.word	0x24005bb0
 80020cc:	52001000 	.word	0x52001000
 80020d0:	24005b80 	.word	0x24005b80
 80020d4:	24005b54 	.word	0x24005b54
 80020d8:	ff09000b 	.word	0xff09000b
 80020dc:	00010201 	.word	0x00010201

080020e0 <DMA2D_ExternalJobCompleted>:
  * @brief  External DMA2D job complete callback
  * @param job: External job reference
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
 80020f8:	480e      	ldr	r0, [pc, #56]	; (8002134 <DMA2D_ExternalJobCompleted+0x54>)
 80020fa:	f000 f827 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_output_Is_Paused = 1;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <DMA2D_ExternalJobCompleted+0x58>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <DMA2D_ExternalJobCompleted+0x5c>)
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <DMA2D_ExternalJobCompleted+0x60>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	1acb      	subs	r3, r1, r3
 8002118:	429a      	cmp	r2, r3
 800211a:	d302      	bcc.n	8002122 <DMA2D_ExternalJobCompleted+0x42>
  {
      DMA2D_CopyBufferEnd = 1;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <DMA2D_ExternalJobCompleted+0x64>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <DMA2D_ExternalJobCompleted+0x68>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f013 fcba 	bl	8015aa0 <osSemaphoreRelease>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	24005b90 	.word	0x24005b90
 8002138:	24005b78 	.word	0x24005b78
 800213c:	24005b80 	.word	0x24005b80
 8002140:	24005bb0 	.word	0x24005bb0
 8002144:	24005b74 	.word	0x24005b74
 8002148:	24005b8c 	.word	0x24005b8c

0800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>:
  }
  External_DMA2D_JobTypeDef& front()
  {
      return buffer_[head_];
  }
  bool is_empty()
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  {
      return count_ == 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
  }
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>:
  ExternalDMAJob_Queue()
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
      : max_size_(Size), head_(0), tail_(0), count_(0)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
  {}
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>:
  bool is_full()
  {
      return count_ == max_size_;
  }
  void reset()
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  {
      head_ = tail_ = count_ = 0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	605a      	str	r2, [r3, #4]
  }
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>:
  void push(const External_DMA2D_JobTypeDef& job)
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
      buffer_[tail_] = job;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	3302      	adds	r3, #2
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	460a      	mov	r2, r1
 80021e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e4:	e883 0003 	stmia.w	r3, {r0, r1}
      tail_ = (tail_ + 1) % max_size_;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	3301      	adds	r3, #1
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80021f6:	fb01 f202 	mul.w	r2, r1, r2
 80021fa:	1a9a      	subs	r2, r3, r2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
      count_++;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60da      	str	r2, [r3, #12]
  }
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fed1 	bl	8000fd0 <_ZN12MJPEGDecoderD1Ev>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	0802aaa0 	.word	0x0802aaa0

0800223c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffe7 	bl	8002218 <_ZN20HardwareMJPEGDecoderD1Ev>
 800224a:	2148      	movs	r1, #72	; 0x48
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f025 f9d8 	bl	8027602 <_ZdlPvj>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_Z41__static_initialization_and_destruction_0ii>:
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002272:	4293      	cmp	r3, r2
 8002274:	d102      	bne.n	800227c <_Z41__static_initialization_and_destruction_0ii+0x20>
ExternalDMAJob_Queue<EXT_DMA2D_QUEUE_SIZE> external_queue;
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002278:	f7ff ff79 	bl	800216e <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	24005b90 	.word	0x24005b90

08002288 <_GLOBAL__sub_I_FrameBufferAddress>:
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
 800228c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff ffe3 	bl	800225c <_Z41__static_initialization_and_destruction_0ii>
 8002296:	bd80      	pop	{r7, pc}

08002298 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800229c:	2200      	movs	r2, #0
 800229e:	2101      	movs	r1, #1
 80022a0:	2001      	movs	r0, #1
 80022a2:	f013 fb22 	bl	80158ea <osSemaphoreNew>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80022aa:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80022b8:	2128      	movs	r1, #40	; 0x28
 80022ba:	480e      	ldr	r0, [pc, #56]	; (80022f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80022bc:	f025 f9d0 	bl	8027660 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2104      	movs	r1, #4
 80022c4:	2001      	movs	r0, #1
 80022c6:	f013 fc2f 	bl	8015b28 <osMessageQueueNew>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80022ce:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80022e0:	f025 f9be 	bl	8027660 <__assert_func>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	24005bc4 	.word	0x24005bc4
 80022ec:	08028c8c 	.word	0x08028c8c
 80022f0:	08028cd8 	.word	0x08028cd8
 80022f4:	08028d08 	.word	0x08028d08
 80022f8:	24005bc8 	.word	0x24005bc8
 80022fc:	08028d64 	.word	0x08028d64

08002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	4618      	mov	r0, r3
 800230e:	f013 fb75 	bl	80159fc <osSemaphoreAcquire>
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	24005bc4 	.word	0x24005bc4

0800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f013 fbbb 	bl	8015aa0 <osSemaphoreRelease>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	24005bc4 	.word	0x24005bc4

08002334 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f013 fb5c 	bl	80159fc <osSemaphoreAcquire>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	24005bc4 	.word	0x24005bc4

0800234c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f013 fba3 	bl	8015aa0 <osSemaphoreRelease>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	24005bc4 	.word	0x24005bc4

08002364 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	2300      	movs	r3, #0
 800236e:	2200      	movs	r2, #0
 8002370:	4903      	ldr	r1, [pc, #12]	; (8002380 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8002372:	f013 fc4d 	bl	8015c10 <osMessageQueuePut>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	24005bc8 	.word	0x24005bc8
 8002380:	2400001c 	.word	0x2400001c

08002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	1d39      	adds	r1, r7, #4
 8002390:	2300      	movs	r3, #0
 8002392:	2200      	movs	r2, #0
 8002394:	f013 fc9c 	bl	8015cd0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	1d39      	adds	r1, r7, #4
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	2200      	movs	r2, #0
 80023a4:	f013 fc94 	bl	8015cd0 <osMessageQueueGet>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	24005bc8 	.word	0x24005bc8

080023b4 <__NVIC_EnableIRQ>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_DisableIRQ>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db12      	blt.n	8002428 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	490a      	ldr	r1, [pc, #40]	; (8002434 <__NVIC_DisableIRQ+0x44>)
 800240a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	3320      	adds	r3, #32
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800241c:	f3bf 8f4f 	dsb	sy
}
 8002420:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002422:	f3bf 8f6f 	isb	sy
}
 8002426:	bf00      	nop
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100

08002438 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
        : color(0)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    {
    }
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    {
        return color;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
    }
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    {
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	601a      	str	r2, [r3, #0]
    }
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	0802ab74 	.word	0x0802ab74

0800248c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    }
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe9 	bl	800246c <_ZN8touchgfx9DMA_QueueD1Ev>
 800249a:	2104      	movs	r1, #4
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f025 f8b0 	bl	8027602 <_ZdlPvj>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3344      	adds	r3, #68	; 0x44
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
    }
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
    {
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
    }
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	0802bddc 	.word	0x0802bddc

080024e8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    }
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffe9 	bl	80024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80024f6:	210c      	movs	r1, #12
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f025 f882 	bl	8027602 <_ZdlPvj>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	721a      	strb	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	725a      	strb	r2, [r3, #9]
    {
    }
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	0802bddc 	.word	0x0802bddc

0800253c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002544:	2301      	movs	r3, #1
    }
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    {
        if(started_by_external_job)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3da0 	ldrb.w	r3, [r3, #3488]	; 0xda0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
        {
            externalJobCompleted();
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f88a 	bl	8002680 <_ZN8STM32DMA20externalJobCompletedEv>
            {
                started_by_external_job = true;
                externalJobExecute();
            }
        }
    }
 800256c:	e022      	b.n	80025b4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
            executeCompleted();
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3328      	adds	r3, #40	; 0x28
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4610      	mov	r0, r2
 800257a:	4798      	blx	r3
            if(!external_queue.is_empty() && !isRunning)
 800257c:	480f      	ldr	r0, [pc, #60]	; (80025bc <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
 800257e:	f7ff fde5 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8002582:	4603      	mov	r3, r0
 8002584:	f083 0301 	eor.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7a1b      	ldrb	r3, [r3, #8]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <_ZN8STM32DMA18signalDMAInterruptEv+0x4e>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
                started_by_external_job = true;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
                externalJobExecute();
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f890 	bl	80026d4 <_ZN8STM32DMA18externalJobExecuteEv>
    }
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	24005b90 	.word	0x24005b90

080025c0 <_ZN8STM32DMA5startEv>:

    virtual void start()
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    {
        MUTEX_LOCK(mutexIsRunning);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 80025ce:	f04f 31ff 	mov.w	r1, #4294967295
 80025d2:	4618      	mov	r0, r3
 80025d4:	f013 f901 	bl	80157da <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4610      	mov	r0, r2
 80025e6:	4798      	blx	r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7a5b      	ldrb	r3, [r3, #9]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7a1b      	ldrb	r3, [r3, #8]
 8002602:	f083 0301 	eor.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <_ZN8STM32DMA5startEv+0x52>
 8002610:	2300      	movs	r3, #0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <_ZN8STM32DMA5startEv+0x6e>
        {
            started_by_external_job = false;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            execute();
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3324      	adds	r3, #36	; 0x24
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4610      	mov	r0, r2
 800262a:	4798      	blx	r3
 800262c:	e01b      	b.n	8002666 <_ZN8STM32DMA5startEv+0xa6>
        }
        else if(!external_queue.is_empty() && !isRunning)
 800262e:	4813      	ldr	r0, [pc, #76]	; (800267c <_ZN8STM32DMA5startEv+0xbc>)
 8002630:	f7ff fd8c 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8002634:	4603      	mov	r3, r0
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <_ZN8STM32DMA5startEv+0x92>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7a1b      	ldrb	r3, [r3, #8]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <_ZN8STM32DMA5startEv+0x92>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <_ZN8STM32DMA5startEv+0x94>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <_ZN8STM32DMA5startEv+0xa6>
        {
            started_by_external_job = true;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            externalJobExecute();
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f837 	bl	80026d4 <_ZN8STM32DMA18externalJobExecuteEv>
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 800266c:	4618      	mov	r0, r3
 800266e:	f013 f8ff 	bl	8015870 <osMutexRelease>
    }
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24005b90 	.word	0x24005b90

08002680 <_ZN8STM32DMA20externalJobCompletedEv>:
     *
     * @brief Handle DMA2D when an external job has been executed
     *
     * @param None
     */
    void externalJobCompleted()
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    {
        if(!external_queue.is_empty() && isRunning)
 8002688:	4811      	ldr	r0, [pc, #68]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 800268a:	f7ff fd5f 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 800268e:	4603      	mov	r3, r0
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7a1b      	ldrb	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <_ZN8STM32DMA20externalJobCompletedEv+0x28>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00c      	beq.n	80026c6 <_ZN8STM32DMA20externalJobCompletedEv+0x46>
        {
            isRunning = false;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	721a      	strb	r2, [r3, #8]
            External_DMA2D_JobTypeDef& completed_job = external_queue.front();
 80026b2:	4807      	ldr	r0, [pc, #28]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 80026b4:	f000 fb4c 	bl	8002d50 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 80026b8:	60f8      	str	r0, [r7, #12]
            external_queue.pop();
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 80026bc:	f000 fb58 	bl	8002d70 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>
            DMA2D_ExternalJobCompleted(completed_job);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff fd0d 	bl	80020e0 <DMA2D_ExternalJobCompleted>
        }
    }
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	24005b90 	.word	0x24005b90

080026d4 <_ZN8STM32DMA18externalJobExecuteEv>:
     *
     * @brief Executes an external DMA2D job
     *
     * @param None
     */
    void externalJobExecute()
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    {
        isRunning = true;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	721a      	strb	r2, [r3, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <_ZN8STM32DMA18externalJobExecuteEv+0x24>)
 80026e4:	f000 fb34 	bl	8002d50 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 80026e8:	60f8      	str	r0, [r7, #12]
        DMA2D_CopyBuffer(job);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff fc88 	bl	8002000 <DMA2D_CopyBuffer>
    }
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	24005b90 	.word	0x24005b90

080026fc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3314      	adds	r3, #20
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4610      	mov	r0, r2
 8002714:	4798      	blx	r3
    }
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002726:	f7fe f981 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800272a:	4603      	mov	r3, r0
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ffe5 	bl	80026fc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	330c      	adds	r3, #12
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fe76 	bl	8002438 <_ZN8touchgfx9colortypeC1Ev>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	330c      	adds	r3, #12
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f7ff fecd 	bl	8002508 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800276e:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <_ZN8STM32DMAC1Ev+0x70>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 000c 	add.w	r0, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3320      	adds	r3, #32
 800277e:	2260      	movs	r2, #96	; 0x60
 8002780:	4619      	mov	r1, r3
 8002782:	f018 fe15 	bl	801b3b0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3320      	adds	r3, #32
 800278a:	245f      	movs	r4, #95	; 0x5f
 800278c:	461d      	mov	r5, r3
 800278e:	2c00      	cmp	r4, #0
 8002790:	db05      	blt.n	800279e <_ZN8STM32DMAC1Ev+0x46>
 8002792:	4628      	mov	r0, r5
 8002794:	f7ff ffd1 	bl	800273a <_ZN8touchgfx6BlitOpC1Ev>
 8002798:	3524      	adds	r5, #36	; 0x24
 800279a:	3c01      	subs	r4, #1
 800279c:	e7f7      	b.n	800278e <_ZN8STM32DMAC1Ev+0x36>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
{
    mutexIsRunning = MUTEX_CREATE();
 80027ae:	2000      	movs	r0, #0
 80027b0:	f012 ff8d 	bl	80156ce <osMutexNew>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
}
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bdb0      	pop	{r4, r5, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	0802ab24 	.word	0x0802ab24

080027cc <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	4a09      	ldr	r2, [pc, #36]	; (80027fc <_ZN8STM32DMAD1Ev+0x30>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80027da:	205a      	movs	r0, #90	; 0x5a
 80027dc:	f7ff fe08 	bl	80023f0 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	330c      	adds	r3, #12
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fadf 	bl	8002da8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe6b 	bl	80024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	0802ab24 	.word	0x0802ab24

08002800 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
}
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ffdf 	bl	80027cc <_ZN8STM32DMAD1Ev>
 800280e:	f640 51a8 	movw	r1, #3496	; 0xda8
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f024 fef5 	bl	8027602 <_ZdlPvj>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800282e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800283e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002850:	f043 0310 	orr.w	r3, r3, #16
 8002854:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800285c:	f023 0310 	bic.w	r3, r3, #16
 8002860:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <_ZN8STM32DMA10initializeEv+0x58>)
 8002864:	4a06      	ldr	r2, [pc, #24]	; (8002880 <_ZN8STM32DMA10initializeEv+0x5c>)
 8002866:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002868:	205a      	movs	r0, #90	; 0x5a
 800286a:	f7ff fda3 	bl	80023b4 <__NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	58024400 	.word	0x58024400
 800287c:	2400aea8 	.word	0x2400aea8
 8002880:	0800271f 	.word	0x0800271f

08002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	2b0b      	cmp	r3, #11
 8002898:	d826      	bhi.n	80028e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800289a:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	080028dd 	.word	0x080028dd
 80028a4:	080028d7 	.word	0x080028d7
 80028a8:	080028d1 	.word	0x080028d1
 80028ac:	080028e9 	.word	0x080028e9
 80028b0:	080028e9 	.word	0x080028e9
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	080028e9 	.word	0x080028e9
 80028bc:	080028e3 	.word	0x080028e3
 80028c0:	080028e3 	.word	0x080028e3
 80028c4:	080028e3 	.word	0x080028e3
 80028c8:	080028e3 	.word	0x080028e3
 80028cc:	080028e3 	.word	0x080028e3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
        break;
 80028d4:	e00e      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80028d6:	2301      	movs	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
        break;
 80028da:	e00b      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80028dc:	2302      	movs	r3, #2
 80028de:	60fb      	str	r3, [r7, #12]
        break;
 80028e0:	e008      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80028e2:	2305      	movs	r3, #5
 80028e4:	60fb      	str	r3, [r7, #12]
        break;
 80028e6:	e005      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80028ea:	4a06      	ldr	r2, [pc, #24]	; (8002904 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80028ec:	2167      	movs	r1, #103	; 0x67
 80028ee:	4806      	ldr	r0, [pc, #24]	; (8002908 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80028f0:	f024 feb6 	bl	8027660 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	08028da8 	.word	0x08028da8
 8002904:	08028dc4 	.word	0x08028dc4
 8002908:	08028e10 	.word	0x08028e10

0800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	2b0a      	cmp	r3, #10
 8002920:	d821      	bhi.n	8002966 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	08002961 	.word	0x08002961
 800292c:	0800295b 	.word	0x0800295b
 8002930:	08002955 	.word	0x08002955
 8002934:	08002967 	.word	0x08002967
 8002938:	08002967 	.word	0x08002967
 800293c:	08002967 	.word	0x08002967
 8002940:	08002967 	.word	0x08002967
 8002944:	0800295b 	.word	0x0800295b
 8002948:	0800295b 	.word	0x0800295b
 800294c:	0800295b 	.word	0x0800295b
 8002950:	0800295b 	.word	0x0800295b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
        break;
 8002958:	e00b      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800295a:	2301      	movs	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
        break;
 800295e:	e008      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002960:	2302      	movs	r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
        break;
 8002964:	e005      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800296a:	2188      	movs	r1, #136	; 0x88
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800296e:	f024 fe77 	bl	8027660 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	08028da8 	.word	0x08028da8
 8002980:	08028e68 	.word	0x08028e68
 8002984:	08028e10 	.word	0x08028e10

08002988 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002990:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	7f5b      	ldrb	r3, [r3, #29]
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff67 	bl	8002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029b6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	7f9b      	ldrb	r3, [r3, #30]
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ff60 	bl	8002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029c4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7f9b      	ldrb	r3, [r3, #30]
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff9d 	bl	800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029d2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	8b5b      	ldrh	r3, [r3, #26]
 80029d8:	461a      	mov	r2, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	8a9b      	ldrh	r3, [r3, #20]
 80029de:	1ad2      	subs	r2, r2, r3
 80029e0:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	8b5b      	ldrh	r3, [r3, #26]
 80029e8:	461a      	mov	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	8a9b      	ldrh	r3, [r3, #20]
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	4b8e      	ldr	r3, [pc, #568]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80029f2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	8b1b      	ldrh	r3, [r3, #24]
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	8a9b      	ldrh	r3, [r3, #20]
 80029fe:	1ad2      	subs	r2, r2, r3
 8002a00:	4b8a      	ldr	r3, [pc, #552]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a02:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002a04:	4a89      	ldr	r2, [pc, #548]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	8adb      	ldrh	r3, [r3, #22]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	8a9b      	ldrh	r3, [r3, #20]
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	4b84      	ldr	r3, [pc, #528]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	4b82      	ldr	r3, [pc, #520]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4b80      	ldr	r3, [pc, #512]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a2a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a34:	d037      	beq.n	8002aa6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3a:	f200 80e3 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a42:	d015      	beq.n	8002a70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a48:	f200 80dc 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a4c:	2b80      	cmp	r3, #128	; 0x80
 8002a4e:	d045      	beq.n	8002adc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	f200 80d7 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	f000 80bf 	beq.w	8002bda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	f200 80d1 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	f000 80a4 	beq.w	8002bb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f000 80b6 	beq.w	8002bda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002a6e:	e0c9      	b.n	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	7f1b      	ldrb	r3, [r3, #28]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	4619      	mov	r1, r3
 8002a78:	4a6c      	ldr	r2, [pc, #432]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a7a:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	4c69      	ldr	r4, [pc, #420]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fce4 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002a90:	4a66      	ldr	r2, [pc, #408]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a9c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002a9e:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002aa0:	4a64      	ldr	r2, [pc, #400]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002aa2:	601a      	str	r2, [r3, #0]
        break;
 8002aa4:	e0d9      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	7f1b      	ldrb	r3, [r3, #28]
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	4619      	mov	r1, r3
 8002aae:	4a5f      	ldr	r2, [pc, #380]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ab0:	4b61      	ldr	r3, [pc, #388]	; (8002c38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	4c5c      	ldr	r4, [pc, #368]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fcc9 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ac6:	4a59      	ldr	r2, [pc, #356]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	4b56      	ldr	r3, [pc, #344]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ad2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002ad4:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ad6:	4a57      	ldr	r2, [pc, #348]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002ad8:	601a      	str	r2, [r3, #0]
        break;
 8002ada:	e0be      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	461a      	mov	r2, r3
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	4a4e      	ldr	r2, [pc, #312]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002afa:	4a4c      	ldr	r2, [pc, #304]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b06:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1d1a      	adds	r2, r3, #4
 8002b0c:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d00d      	beq.n	8002b3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8002b1e:	e020      	b.n	8002b62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002b20:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	4b45      	ldr	r3, [pc, #276]	; (8002c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	8852      	ldrh	r2, [r2, #2]
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	0212      	lsls	r2, r2, #8
 8002b30:	4611      	mov	r1, r2
 8002b32:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b34:	430b      	orrs	r3, r1
 8002b36:	61d3      	str	r3, [r2, #28]
                break;
 8002b38:	e01a      	b.n	8002b70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7f1b      	ldrb	r3, [r3, #28]
 8002b3e:	2bff      	cmp	r3, #255	; 0xff
 8002b40:	d101      	bne.n	8002b46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 8002b42:	2300      	movs	r3, #0
 8002b44:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002b46:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	8852      	ldrh	r2, [r2, #2]
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0212      	lsls	r2, r2, #8
 8002b56:	4313      	orrs	r3, r2
 8002b58:	4a34      	ldr	r2, [pc, #208]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	61d3      	str	r3, [r2, #28]
                break;
 8002b60:	e006      	b.n	8002b70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b64:	4a37      	ldr	r2, [pc, #220]	; (8002c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002b66:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002b6a:	4837      	ldr	r0, [pc, #220]	; (8002c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002b6c:	f024 fd78 	bl	8027660 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002b70:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d000      	beq.n	8002b94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 8002b92:	e7f3      	b.n	8002b7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b96:	2210      	movs	r2, #16
 8002b98:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ba2:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002ba4:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8002ba6:	e058      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002ba8:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002baa:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002bac:	601a      	str	r2, [r3, #0]
        break;
 8002bae:	e054      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	7f1b      	ldrb	r3, [r3, #28]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bd0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002bd6:	601a      	str	r2, [r3, #0]
        break;
 8002bd8:	e03f      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	7f1b      	ldrb	r3, [r3, #28]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	461a      	mov	r2, r3
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bfa:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002c00:	601a      	str	r2, [r3, #0]
        break;
 8002c02:	e02a      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	7f1b      	ldrb	r3, [r3, #28]
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	4a06      	ldr	r2, [pc, #24]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c16:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	7f5a      	ldrb	r2, [r3, #29]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7f9b      	ldrb	r3, [r3, #30]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d015      	beq.n	8002c50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002c24:	4b01      	ldr	r3, [pc, #4]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002c28:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8002c2a:	e015      	b.n	8002c58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8002c2c:	52001000 	.word	0x52001000
 8002c30:	0002000a 	.word	0x0002000a
 8002c34:	00020201 	.word	0x00020201
 8002c38:	00020009 	.word	0x00020009
 8002c3c:	ffff00ef 	.word	0xffff00ef
 8002c40:	08028eb4 	.word	0x08028eb4
 8002c44:	08028ed0 	.word	0x08028ed0
 8002c48:	08028e10 	.word	0x08028e10
 8002c4c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8002c52:	f240 2201 	movw	r2, #513	; 0x201
 8002c56:	601a      	str	r2, [r3, #0]
        break;
 8002c58:	bf00      	nop
    }
}
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	52001000 	.word	0x52001000

08002c68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	7f9b      	ldrb	r3, [r3, #30]
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fe47 	bl	800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002c7e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c80:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	8adb      	ldrh	r3, [r3, #22]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	8a9b      	ldrh	r3, [r3, #20]
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	8b5b      	ldrh	r3, [r3, #26]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	8a9b      	ldrh	r3, [r3, #20]
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d12e      	bne.n	8002d16 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	8b5b      	ldrh	r3, [r3, #26]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	8a9b      	ldrh	r3, [r3, #20]
 8002cc2:	1ad2      	subs	r2, r2, r3
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cc6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	8b5b      	ldrh	r3, [r3, #26]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	8a9b      	ldrh	r3, [r3, #20]
 8002cd2:	1ad2      	subs	r2, r2, r3
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cd6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cd8:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	7f1b      	ldrb	r3, [r3, #28]
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8002cea:	430b      	orrs	r3, r1
 8002cec:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	4c13      	ldr	r4, [pc, #76]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fbad 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d04:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d0c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d10:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8002d12:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8002d14:	e010      	b.n	8002d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	4c06      	ldr	r4, [pc, #24]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fb93 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002d32:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d34:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8002d36:	601a      	str	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	52001000 	.word	0x52001000
 8002d44:	00010009 	.word	0x00010009
 8002d48:	00020201 	.word	0x00020201
 8002d4c:	00030201 	.word	0x00030201

08002d50 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>:
  External_DMA2D_JobTypeDef& front()
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
      return buffer_[head_];
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
  }
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>:
  void pop()
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
      head_ = (head_ + 1) % max_size_;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d86:	fb01 f202 	mul.w	r2, r1, r2
 8002d8a:	1a9a      	subs	r2, r3, r2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	605a      	str	r2, [r3, #4]
      count_--;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	1e5a      	subs	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60da      	str	r2, [r3, #12]
  }
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fb57 	bl	800246c <_ZN8touchgfx9DMA_QueueD1Ev>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	0802be2c 	.word	0x0802be2c

08002dcc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ffe7 	bl	8002da8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002dda:	2114      	movs	r1, #20
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f024 fc10 	bl	8027602 <_ZdlPvj>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	801a      	strh	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	805a      	strh	r2, [r3, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	809a      	strh	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	80da      	strh	r2, [r3, #6]
    {
    }
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6013      	str	r3, [r2, #0]
    }
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	240262e8 	.word	0x240262e8

08002e3c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    {
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	601a      	str	r2, [r3, #0]
    }
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	0802ada8 	.word	0x0802ada8

08002e5c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    }
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ffe9 	bl	8002e3c <_ZN8touchgfx12FontProviderD1Ev>
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f024 fbc8 	bl	8027602 <_ZdlPvj>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	611a      	str	r2, [r3, #16]
    {
    }
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	0802ad98 	.word	0x0802ad98

08002ebc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
    {
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	601a      	str	r2, [r3, #0]
    }
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	0802ad98 	.word	0x0802ad98

08002edc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    }
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ffe9 	bl	8002ebc <_ZN8touchgfx7MVPHeapD1Ev>
 8002eea:	2114      	movs	r1, #20
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f024 fb88 	bl	8027602 <_ZdlPvj>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
    {
    }
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
    {
    }
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
    {
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	601a      	str	r2, [r3, #0]
    }
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	0802ad70 	.word	0x0802ad70

08002fa0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    }
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ffe9 	bl	8002f80 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002fae:	2104      	movs	r1, #4
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f024 fb26 	bl	8027602 <_ZdlPvj>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    {
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
    }
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	0802bf98 	.word	0x0802bf98

08002fe0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    }
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ffe9 	bl	8002fc0 <_ZN8touchgfx3LCDD1Ev>
 8002fee:	2108      	movs	r1, #8
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f024 fb06 	bl	8027602 <_ZdlPvj>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    {
    }
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800303e:	6810      	ldr	r0, [r2, #0]
 8003040:	6851      	ldr	r1, [r2, #4]
 8003042:	c303      	stmia	r3!, {r0, r1}
    }
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    {
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
    }
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	0802ad58 	.word	0x0802ad58

08003070 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
    }
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ffe9 	bl	8003050 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800307e:	2104      	movs	r1, #4
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f024 fabe 	bl	8027602 <_ZdlPvj>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
    MCUInstrumentation()
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
          cc_in(0)
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
    }
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	0802a970 	.word	0x0802a970

080030bc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	805a      	strh	r2, [r3, #2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	809a      	strh	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	80da      	strh	r2, [r3, #6]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	811a      	strh	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	815a      	strh	r2, [r3, #10]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	819a      	strh	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	739a      	strb	r2, [r3, #14]
        {
        }
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ffd5 	bl	80030bc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	829a      	strh	r2, [r3, #20]
    {
    }
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8003136:	4a55      	ldr	r2, [pc, #340]	; (800328c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	615a      	str	r2, [r3, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	331c      	adds	r3, #28
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ffcc 	bl	8003102 <_ZN8touchgfx8GesturesC1Ev>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3350      	adds	r3, #80	; 0x50
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fe19 	bl	8002dec <_ZN8touchgfx4RectC1Ev>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	659a      	str	r2, [r3, #88]	; 0x58
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	671a      	str	r2, [r3, #112]	; 0x70
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8003242:	4a13      	ldr	r2, [pc, #76]	; (8003290 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8003248:	4a12      	ldr	r2, [pc, #72]	; (8003294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800324a:	8b3b      	ldrh	r3, [r7, #24]
 800324c:	8013      	strh	r3, [r2, #0]
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003254:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8003256:	4a11      	ldr	r2, [pc, #68]	; (800329c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8003258:	8bbb      	ldrh	r3, [r7, #28]
 800325a:	8013      	strh	r3, [r2, #0]
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8003262:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800326a:	8b3a      	ldrh	r2, [r7, #24]
 800326c:	8bbb      	ldrh	r3, [r7, #28]
 800326e:	429a      	cmp	r2, r3
 8003270:	bf34      	ite	cc
 8003272:	2301      	movcc	r3, #1
 8003274:	2300      	movcs	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	0802bd04 	.word	0x0802bd04
 8003290:	2402628c 	.word	0x2402628c
 8003294:	24026280 	.word	0x24026280
 8003298:	24026286 	.word	0x24026286
 800329c:	24026282 	.word	0x24026282
 80032a0:	24026288 	.word	0x24026288
 80032a4:	24026284 	.word	0x24026284

080032a8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fe61 	bl	8002f80 <_ZN8touchgfx15UIEventListenerD1Ev>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	0802bff0 	.word	0x0802bff0

080032cc <_ZN8touchgfx11ApplicationD0Ev>:
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ffe7 	bl	80032a8 <_ZN8touchgfx11ApplicationD1Ev>
 80032da:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f024 f98f 	bl	8027602 <_ZdlPvj>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f804 	bl	8003304 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00f      	beq.n	8003336 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	330c      	adds	r3, #12
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4610      	mov	r0, r2
 800332a:	4798      	blx	r3
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3308      	adds	r3, #8
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4610      	mov	r0, r2
 8003350:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	4a05      	ldr	r2, [pc, #20]	; (8003384 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff97 	bl	80032a8 <_ZN8touchgfx11ApplicationD1Ev>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	0802ad0c 	.word	0x0802ad0c

08003388 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ffe7 	bl	8003364 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003396:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f024 f931 	bl	8027602 <_ZdlPvj>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fb33 	bl	8003a2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ffcb 	bl	8003364 <_ZN8touchgfx14MVPApplicationD1Ev>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	0802aca8 	.word	0x0802aca8

080033dc <_ZN23FrontendApplicationBaseD0Ev>:
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ffe1 	bl	80033ac <_ZN23FrontendApplicationBaseD1Ev>
 80033ea:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f024 f907 	bl	8027602 <_ZdlPvj>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f004 faac 	bl	8007964 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4a05      	ldr	r2, [pc, #20]	; (8003434 <_ZN19FrontendApplicationD1Ev+0x20>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ffc1 	bl	80033ac <_ZN23FrontendApplicationBaseD1Ev>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	0802ac5c 	.word	0x0802ac5c

08003438 <_ZN19FrontendApplicationD0Ev>:
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ffe7 	bl	8003414 <_ZN19FrontendApplicationD1Ev>
 8003446:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f024 f8d9 	bl	8027602 <_ZdlPvj>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003468:	4618      	mov	r0, r3
 800346a:	f005 fc9f 	bl	8008dac <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	f019 fb29 	bl	801cac8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f004 fa6a 	bl	8007964 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	f7ff fce3 	bl	8002e7c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]
    {

    }
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	0802ac48 	.word	0x0802ac48

080034cc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4801      	ldr	r0, [pc, #4]	; (80034d8 <__tcf_0+0xc>)
 80034d2:	f000 f97d 	bl	80037d0 <_ZN12FrontendHeapD1Ev>
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	24005bcc 	.word	0x24005bcc

080034dc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	f3bf 8f5b 	dmb	ish
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80034fc:	480b      	ldr	r0, [pc, #44]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80034fe:	f024 f882 	bl	8027606 <__cxa_guard_acquire>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003512:	4807      	ldr	r0, [pc, #28]	; (8003530 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003514:	f000 f868 	bl	80035e8 <_ZN12FrontendHeapC1Ev>
 8003518:	4806      	ldr	r0, [pc, #24]	; (8003534 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800351a:	f024 f8bf 	bl	802769c <atexit>
 800351e:	4803      	ldr	r0, [pc, #12]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003520:	f024 f87d 	bl	802761e <__cxa_guard_release>
        return instance;
 8003524:	4b02      	ldr	r3, [pc, #8]	; (8003530 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8003526:	4618      	mov	r0, r3
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	24005f18 	.word	0x24005f18
 8003530:	24005bcc 	.word	0x24005bcc
 8003534:	080034cd 	.word	0x080034cd

08003538 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	4a05      	ldr	r2, [pc, #20]	; (8003558 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fcb7 	bl	8002ebc <_ZN8touchgfx7MVPHeapD1Ev>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	0802ac48 	.word	0x0802ac48

0800355c <_ZN16FrontendHeapBaseD0Ev>:
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffe7 	bl	8003538 <_ZN16FrontendHeapBaseD1Ev>
 800356a:	2114      	movs	r1, #20
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f024 f848 	bl	8027602 <_ZdlPvj>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	f016 fae6 	bl	8019b58 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800358c:	4a03      	ldr	r2, [pc, #12]	; (800359c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	0802ac14 	.word	0x0802ac14

080035a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f016 fad4 	bl	8019b58 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80035b0:	4a03      	ldr	r2, [pc, #12]	; (80035c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	0802abe0 	.word	0x0802abe0

080035c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f016 fac2 	bl	8019b58 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80035d4:	4a03      	ldr	r2, [pc, #12]	; (80035e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	0802abac 	.word	0x0802abac

080035e8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f103 0114 	add.w	r1, r3, #20
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
                     app(model, *this)
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4623      	mov	r3, r4
 800360e:	f7ff ff43 	bl	8003498 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003612:	4a18      	ldr	r2, [pc, #96]	; (8003674 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3314      	adds	r3, #20
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ffad 	bl	800357c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	332c      	adds	r3, #44	; 0x2c
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ffba 	bl	80035a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ffc6 	bl	80035c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800363e:	4618      	mov	r0, r3
 8003640:	f005 fba6 	bl	8008d90 <_ZN5ModelC1Ev>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4619      	mov	r1, r3
 8003654:	f005 fb86 	bl	8008d64 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f7ff ff0b 	bl	800347e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	0802ab98 	.word	0x0802ab98

08003678 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	8bbb      	ldrh	r3, [r7, #28]
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	8b3b      	ldrh	r3, [r7, #24]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	f7ff fd47 	bl	8003128 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800369a:	4a04      	ldr	r2, [pc, #16]	; (80036ac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]
    }
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	0802aea0 	.word	0x0802aea0

080036b0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>:
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fce8 	bl	8003090 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 80036c0:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev+0x20>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	0802a948 	.word	0x0802a948

080036d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	8bbb      	ldrh	r3, [r7, #28]
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	8b3b      	ldrh	r3, [r7, #24]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	f7ff ffc1 	bl	8003678 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80036f6:	4a06      	ldr	r2, [pc, #24]	; (8003710 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x3c>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	337c      	adds	r3, #124	; 0x7c
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ffd5 	bl	80036b0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>
    }
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	0802a9c8 	.word	0x0802a9c8

08003714 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	0802a9b0 	.word	0x0802a9b0

08003734 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ffe8 	bl	8003714 <_ZN8touchgfx15TouchControllerC1Ev>
 8003744:	4a03      	ldr	r2, [pc, #12]	; (8003754 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	0802a998 	.word	0x0802a998

08003758 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b085      	sub	sp, #20
 800375c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800375e:	f003 feef 	bl	8007540 <_ZN14BitmapDatabase11getInstanceEv>
 8003762:	4604      	mov	r4, r0
 8003764:	f003 fef6 	bl	8007554 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003768:	4603      	mov	r3, r0
 800376a:	4619      	mov	r1, r3
 800376c:	2300      	movs	r3, #0
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2300      	movs	r3, #0
 8003772:	2200      	movs	r2, #0
 8003774:	4620      	mov	r0, r4
 8003776:	f01b fe27 	bl	801f3c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800377a:	4809      	ldr	r0, [pc, #36]	; (80037a0 <touchgfx_init+0x48>)
 800377c:	f7ff fb4e 	bl	8002e1c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003780:	2000      	movs	r0, #0
 8003782:	f005 fa5d 	bl	8008c40 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003786:	4807      	ldr	r0, [pc, #28]	; (80037a4 <touchgfx_init+0x4c>)
 8003788:	f01b fcd6 	bl	801f138 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800378c:	f7ff fea6 	bl	80034dc <_ZN12FrontendHeap11getInstanceEv>
 8003790:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003792:	4805      	ldr	r0, [pc, #20]	; (80037a8 <touchgfx_init+0x50>)
 8003794:	f7fd faea 	bl	8000d6c <_ZN11TouchGFXHAL10initializeEv>
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}
 80037a0:	24006d20 	.word	0x24006d20
 80037a4:	24000020 	.word	0x24000020
 80037a8:	24006d24 	.word	0x24006d24

080037ac <touchgfx_components_init>:

void touchgfx_components_init()
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <touchgfx_taskEntry+0x10>)
 80037c2:	f7fd faf1 	bl	8000da8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	24006d24 	.word	0x24006d24

080037d0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	4a10      	ldr	r2, [pc, #64]	; (800381c <_ZN12FrontendHeapD1Ev+0x4c>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fe15 	bl	8003414 <_ZN19FrontendApplicationD1Ev>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 f827 	bl	8003844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	332c      	adds	r3, #44	; 0x2c
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f844 	bl	8003888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3314      	adds	r3, #20
 8003804:	4618      	mov	r0, r3
 8003806:	f000 f863 	bl	80038d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe93 	bl	8003538 <_ZN16FrontendHeapBaseD1Ev>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	0802ab98 	.word	0x0802ab98

08003820 <_ZN12FrontendHeapD0Ev>:
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ffd1 	bl	80037d0 <_ZN12FrontendHeapD1Ev>
 800382e:	f44f 7153 	mov.w	r1, #844	; 0x34c
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f023 fee5 	bl	8027602 <_ZdlPvj>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	4a05      	ldr	r2, [pc, #20]	; (8003864 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	f016 f97e 	bl	8019b56 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	0802abac 	.word	0x0802abac

08003868 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ffe7 	bl	8003844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003876:	2114      	movs	r1, #20
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f023 fec2 	bl	8027602 <_ZdlPvj>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	f016 f95c 	bl	8019b56 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	0802abe0 	.word	0x0802abe0

080038ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ffe7 	bl	8003888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80038ba:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f023 fe9f 	bl	8027602 <_ZdlPvj>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f016 f938 	bl	8019b56 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	0802ac14 	.word	0x0802ac14

080038f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ffe7 	bl	80038d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003902:	2118      	movs	r1, #24
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f023 fe7c 	bl	8027602 <_ZdlPvj>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	4a05      	ldr	r2, [pc, #20]	; (8003934 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fa89 	bl	8002e3c <_ZN8touchgfx12FontProviderD1Ev>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	0802b2e4 	.word	0x0802b2e4

08003938 <_ZN23ApplicationFontProviderD0Ev>:
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ffe7 	bl	8003914 <_ZN23ApplicationFontProviderD1Ev>
 8003946:	2104      	movs	r1, #4
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f023 fe5a 	bl	8027602 <_ZdlPvj>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	4a05      	ldr	r2, [pc, #20]	; (8003978 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fb29 	bl	8002fc0 <_ZN8touchgfx3LCDD1Ev>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	0802c304 	.word	0x0802c304

0800397c <_ZN8touchgfx8LCD24bppD0Ev>:
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ffe7 	bl	8003958 <_ZN8touchgfx8LCD24bppD1Ev>
 800398a:	2158      	movs	r1, #88	; 0x58
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f023 fe38 	bl	8027602 <_ZdlPvj>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <_Z41__static_initialization_and_destruction_0ii>:
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d119      	bne.n	80039e0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d114      	bne.n	80039e0 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80039b6:	4818      	ldr	r0, [pc, #96]	; (8003a18 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80039b8:	f7ff febc 	bl	8003734 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80039bc:	4817      	ldr	r0, [pc, #92]	; (8003a1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80039be:	f7fe fecb 	bl	8002758 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80039c2:	4817      	ldr	r0, [pc, #92]	; (8003a20 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80039c4:	f01d ff48 	bl	8021858 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80039c8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80039d8:	4910      	ldr	r1, [pc, #64]	; (8003a1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80039da:	4812      	ldr	r0, [pc, #72]	; (8003a24 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80039dc:	f7ff fe7a 	bl	80036d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d113      	bne.n	8003a0e <_Z41__static_initialization_and_destruction_0ii+0x72>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d10e      	bne.n	8003a0e <_Z41__static_initialization_and_destruction_0ii+0x72>
 80039f0:	480c      	ldr	r0, [pc, #48]	; (8003a24 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80039f2:	f7fd fac5 	bl	8000f80 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80039f6:	480c      	ldr	r0, [pc, #48]	; (8003a28 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80039f8:	f7ff ff8c 	bl	8003914 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80039fc:	4808      	ldr	r0, [pc, #32]	; (8003a20 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80039fe:	f7ff ffab 	bl	8003958 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 8003a02:	4806      	ldr	r0, [pc, #24]	; (8003a1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003a04:	f7fe fee2 	bl	80027cc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003a08:	4803      	ldr	r0, [pc, #12]	; (8003a18 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003a0a:	f7fc fe73 	bl	80006f4 <_ZN20STM32TouchControllerD1Ev>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	24005f1c 	.word	0x24005f1c
 8003a1c:	24005f20 	.word	0x24005f20
 8003a20:	24006cc8 	.word	0x24006cc8
 8003a24:	24006d24 	.word	0x24006d24
 8003a28:	24000020 	.word	0x24000020

08003a2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fb07 	bl	8003050 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	0802acf4 	.word	0x0802acf4

08003a50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ffe7 	bl	8003a2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003a5e:	2110      	movs	r1, #16
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f023 fdce 	bl	8027602 <_ZdlPvj>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003a78:	2301      	movs	r3, #1
    }
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003a8e:	230c      	movs	r3, #12
    }
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003aa8:	887a      	ldrh	r2, [r7, #2]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4413      	add	r3, r2
    }
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	3308      	adds	r3, #8
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
    }
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003af4:	2301      	movs	r3, #1
    }
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003b0a:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    }
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	3308      	adds	r3, #8
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4413      	add	r3, r2
    }
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003b4e:	887b      	ldrh	r3, [r7, #2]
 8003b50:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	3308      	adds	r3, #8
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4413      	add	r3, r2
    }
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003b72:	2301      	movs	r3, #1
    }
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003b88:	2310      	movs	r3, #16
    }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	4413      	add	r3, r2
    }
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	3308      	adds	r3, #8
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
    }
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68d2      	ldr	r2, [r2, #12]
 8003bea:	1052      	asrs	r2, r2, #1
 8003bec:	1899      	adds	r1, r3, r2
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d102      	bne.n	8003c00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	e00a      	b.n	8003c16 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68d2      	ldr	r2, [r2, #12]
 8003c08:	1052      	asrs	r2, r2, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6892      	ldr	r2, [r2, #8]
 8003c12:	4413      	add	r3, r2
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4608      	mov	r0, r1
 8003c18:	4798      	blx	r3
    }
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d001      	beq.n	8003c54 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003c54:	2300      	movs	r3, #0
    }
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_GLOBAL__sub_I_touchgfx_init>:
 8003c62:	b580      	push	{r7, lr}
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f7ff fe96 	bl	800399c <_Z41__static_initialization_and_destruction_0ii>
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_GLOBAL__sub_D_touchgfx_init>:
 8003c72:	b580      	push	{r7, lr}
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7ff fe8e 	bl	800399c <_Z41__static_initialization_and_destruction_0ii>
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
        : color(col)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	601a      	str	r2, [r3, #0]
    }
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
    {
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	601a      	str	r2, [r3, #0]
    }
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	0802c03c 	.word	0x0802c03c

08003cc0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
    }
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ffe9 	bl	8003ca0 <_ZN8touchgfx8DrawableD1Ev>
 8003cce:	2128      	movs	r1, #40	; 0x28
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f023 fc96 	bl	8027602 <_ZdlPvj>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3314      	adds	r3, #20
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
        }
    }
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003d0e:	2300      	movs	r3, #0
    }
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	809a      	strh	r2, [r3, #4]
    }
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	887a      	ldrh	r2, [r7, #2]
 8003d4a:	80da      	strh	r2, [r3, #6]
    }
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	811a      	strh	r2, [r3, #8]
    }
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	887a      	ldrh	r2, [r7, #2]
 8003d86:	815a      	strh	r2, [r3, #10]
    }
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    {
    }
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
    {
    }
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	807b      	strh	r3, [r7, #2]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3354      	adds	r3, #84	; 0x54
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	8879      	ldrh	r1, [r7, #2]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003e52:	b292      	uxth	r2, r2
 8003e54:	1a8a      	subs	r2, r1, r2
 8003e56:	b292      	uxth	r2, r2
 8003e58:	b210      	sxth	r0, r2
 8003e5a:	8839      	ldrh	r1, [r7, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003e62:	b292      	uxth	r2, r2
 8003e64:	1a8a      	subs	r2, r1, r2
 8003e66:	b292      	uxth	r2, r2
 8003e68:	b212      	sxth	r2, r2
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
    }
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e86:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8e:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e96:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff ffe1 	bl	8003e78 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]
    }
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3320      	adds	r3, #32
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
    }
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	e002      	b.n	8003f10 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
    }
 8003f10:	4618      	mov	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	2402628c 	.word	0x2402628c

08003f20 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003f48:	3301      	adds	r3, #1
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	817b      	strh	r3, [r7, #10]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff43 	bl	8003dfe <_ZNK8touchgfx8Drawable9isVisibleEv>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff49 	bl	8003e18 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]
        }
    }
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fe73 	bl	8003ca0 <_ZN8touchgfx8DrawableD1Ev>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	0802ae38 	.word	0x0802ae38

08003fc8 <_ZN8touchgfx6WidgetD0Ev>:
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffe7 	bl	8003fa4 <_ZN8touchgfx6WidgetD1Ev>
 8003fd6:	2128      	movs	r1, #40	; 0x28
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f023 fb12 	bl	8027602 <_ZdlPvj>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
    {
 8003ff0:	4a04      	ldr	r2, [pc, #16]	; (8004004 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
    }
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	0802adfc 	.word	0x0802adfc

08004008 <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
    }
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ffe9 	bl	8003fe8 <_ZN8touchgfx15VideoControllerD1Ev>
 8004016:	2104      	movs	r1, #4
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f023 faf2 	bl	8027602 <_ZdlPvj>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>:
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	645a      	str	r2, [r3, #68]	; 0x44
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	72fb      	strb	r3, [r7, #11]
 8004072:	460b      	mov	r3, r1
 8004074:	813b      	strh	r3, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	7afa      	ldrb	r2, [r7, #11]
 800407e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	893a      	ldrh	r2, [r7, #8]
 8004086:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <__NVIC_EnableIRQ>:
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	db0b      	blt.n	80040c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	f003 021f 	and.w	r2, r3, #31
 80040b4:	4907      	ldr	r1, [pc, #28]	; (80040d4 <__NVIC_EnableIRQ+0x38>)
 80040b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2001      	movs	r0, #1
 80040be:	fa00 f202 	lsl.w	r2, r0, r2
 80040c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000e100 	.word	0xe000e100

080040d8 <__NVIC_DisableIRQ>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	db12      	blt.n	8004110 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	f003 021f 	and.w	r2, r3, #31
 80040f0:	490a      	ldr	r1, [pc, #40]	; (800411c <__NVIC_DisableIRQ+0x44>)
 80040f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2001      	movs	r0, #1
 80040fa:	fa00 f202 	lsl.w	r2, r0, r2
 80040fe:	3320      	adds	r3, #32
 8004100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004104:	f3bf 8f4f 	dsb	sy
}
 8004108:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800410a:	f3bf 8f6f 	isb	sy
}
 800410e:	bf00      	nop
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	e000e100 	.word	0xe000e100

08004120 <__NVIC_SetPriority>:
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	6039      	str	r1, [r7, #0]
 800412a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800412c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004130:	2b00      	cmp	r3, #0
 8004132:	db0a      	blt.n	800414a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	b2da      	uxtb	r2, r3
 8004138:	490c      	ldr	r1, [pc, #48]	; (800416c <__NVIC_SetPriority+0x4c>)
 800413a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800413e:	0112      	lsls	r2, r2, #4
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	440b      	add	r3, r1
 8004144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004148:	e00a      	b.n	8004160 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4908      	ldr	r1, [pc, #32]	; (8004170 <__NVIC_SetPriority+0x50>)
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	3b04      	subs	r3, #4
 8004158:	0112      	lsls	r2, r2, #4
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	440b      	add	r3, r1
 800415e:	761a      	strb	r2, [r3, #24]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	e000e100 	.word	0xe000e100
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8004174:	b5b0      	push	{r4, r5, r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4618      	mov	r0, r3
 8004180:	f016 fa7d 	bl	801a67e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8004184:	687d      	ldr	r5, [r7, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3364      	adds	r3, #100	; 0x64
 800418c:	681c      	ldr	r4, [r3, #0]
 800418e:	f018 fc19 	bl	801c9c4 <_ZN8touchgfx11Application11getInstanceEv>
 8004192:	4603      	mov	r3, r0
 8004194:	4619      	mov	r1, r3
 8004196:	4628      	mov	r0, r5
 8004198:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3388      	adds	r3, #136	; 0x88
 80041a2:	681c      	ldr	r4, [r3, #0]
 80041a4:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80041a6:	2300      	movs	r3, #0
 80041a8:	490b      	ldr	r1, [pc, #44]	; (80041d8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 80041aa:	47a0      	blx	r4

    /*
     * Add DMA2D to hardware decoder
     */
    mjpegdecoder1.addDMA(dma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4619      	mov	r1, r3
 80041b2:	480a      	ldr	r0, [pc, #40]	; (80041dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80041b4:	f7ff ff38 	bl	8004028 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>

    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 80041b8:	2200      	movs	r2, #0
 80041ba:	4908      	ldr	r1, [pc, #32]	; (80041dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80041bc:	4808      	ldr	r0, [pc, #32]	; (80041e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 80041be:	f000 fa45 	bl	800464c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 80041c2:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 80041c4:	4908      	ldr	r1, [pc, #32]	; (80041e8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 80041c6:	4806      	ldr	r0, [pc, #24]	; (80041e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 80041c8:	f000 fa60 	bl	800468c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bdb0      	pop	{r4, r5, r7, pc}
 80041d4:	2409fa00 	.word	0x2409fa00
 80041d8:	24040000 	.word	0x24040000
 80041dc:	24006dac 	.word	0x24006dac
 80041e0:	24006df4 	.word	0x24006df4
 80041e4:	0005fa00 	.word	0x0005fa00
 80041e8:	d0000000 	.word	0xd0000000

080041ec <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80041f4:	2109      	movs	r1, #9
 80041f6:	205a      	movs	r0, #90	; 0x5a
 80041f8:	f7ff ff92 	bl	8004120 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80041fc:	2109      	movs	r1, #9
 80041fe:	2058      	movs	r0, #88	; 0x58
 8004200:	f7ff ff8e 	bl	8004120 <__NVIC_SetPriority>
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8004214:	205a      	movs	r0, #90	; 0x5a
 8004216:	f7ff ff41 	bl	800409c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800421a:	2058      	movs	r0, #88	; 0x58
 800421c:	f7ff ff3e 	bl	800409c <__NVIC_EnableIRQ>
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8004230:	205a      	movs	r0, #90	; 0x5a
 8004232:	f7ff ff51 	bl	80040d8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8004236:	2058      	movs	r0, #88	; 0x58
 8004238:	f7ff ff4e 	bl	80040d8 <__NVIC_DisableIRQ>
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	b29b      	uxth	r3, r3
 8004252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800425e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8004272:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004276:	881a      	ldrh	r2, [r3, #0]
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800427a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800427e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004280:	4a04      	ldr	r2, [pc, #16]	; (8004294 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	50001000 	.word	0x50001000
 8004298:	24006e3e 	.word	0x24006e3e
 800429c:	24006e40 	.word	0x24006e40

080042a0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f016 f9ce 	bl	801a64c <_ZN8touchgfx3HAL10beginFrameEv>
 80042b0:	4603      	mov	r3, r0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f016 f9c4 	bl	801a664 <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 80042dc:	4804      	ldr	r0, [pc, #16]	; (80042f0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 80042de:	f000 f9eb 	bl	80046b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	24006e3c 	.word	0x24006e3c
 80042f0:	24006df4 	.word	0x24006df4

080042f4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	50001084 	.word	0x50001084

08004310 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800431a:	4a06      	ldr	r2, [pc, #24]	; (8004334 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8004322:	2201      	movs	r2, #1
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	50001084 	.word	0x50001084
 8004338:	50001000 	.word	0x50001000

0800433c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6839      	ldr	r1, [r7, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f016 f947 	bl	801a5de <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	68b9      	ldr	r1, [r7, #8]
 800436e:	f016 faa2 	bl	801a8b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8004372:	4603      	mov	r3, r0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004384:	4b26      	ldr	r3, [pc, #152]	; (8004420 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d03c      	beq.n	8004414 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800439a:	4b21      	ldr	r3, [pc, #132]	; (8004420 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 800439c:	2200      	movs	r2, #0
 800439e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80043a2:	f3bf 8f4f 	dsb	sy
}
 80043a6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ae:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	0b5b      	lsrs	r3, r3, #13
 80043b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80043b8:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	08db      	lsrs	r3, r3, #3
 80043be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c2:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80043cc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80043d2:	4913      	ldr	r1, [pc, #76]	; (8004420 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1e5a      	subs	r2, r3, #1
 80043de:	60fa      	str	r2, [r7, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d000      	beq.n	80043f0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 80043ee:	e7e9      	b.n	80043c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1e5a      	subs	r2, r3, #1
 80043f4:	613a      	str	r2, [r7, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bf14      	ite	ne
 80043fa:	2301      	movne	r3, #1
 80043fc:	2300      	moveq	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d000      	beq.n	8004406 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8004404:	e7d9      	b.n	80043ba <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004406:	f3bf 8f4f 	dsb	sy
}
 800440a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800440c:	f3bf 8f6f 	isb	sy
}
 8004410:	bf00      	nop
}
 8004412:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000ed00 	.word	0xe000ed00

08004424 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800442c:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	bf14      	ite	ne
 8004438:	2301      	movne	r3, #1
 800443a:	2300      	moveq	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d03c      	beq.n	80044bc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004442:	4b21      	ldr	r3, [pc, #132]	; (80044c8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004444:	2200      	movs	r2, #0
 8004446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800444a:	f3bf 8f4f 	dsb	sy
}
 800444e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004450:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004456:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	0b5b      	lsrs	r3, r3, #13
 800445c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004460:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004474:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800447a:	4913      	ldr	r1, [pc, #76]	; (80044c8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1e5a      	subs	r2, r3, #1
 8004486:	60fa      	str	r2, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d000      	beq.n	8004498 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8004496:	e7e9      	b.n	800446c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1e5a      	subs	r2, r3, #1
 800449c:	613a      	str	r2, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf14      	ite	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	2300      	moveq	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d000      	beq.n	80044ae <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 80044ac:	e7d9      	b.n	8004462 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80044ae:	f3bf 8f4f 	dsb	sy
}
 80044b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044b4:	f3bf 8f6f 	isb	sy
}
 80044b8:	bf00      	nop
}
 80044ba:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <videoTaskFunc>:

extern "C" void videoTaskFunc(void *argument)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
    videoController.decoderTaskEntry();
 80044d4:	4803      	ldr	r0, [pc, #12]	; (80044e4 <videoTaskFunc+0x18>)
 80044d6:	f000 f934 	bl	8004742 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	24006df4 	.word	0x24006df4

080044e8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 80044f0:	f7fc fa9c 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d132      	bne.n	800456a <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_LTDC_LineEventCallback+0x8c>)
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <HAL_LTDC_LineEventCallback+0x90>)
 800450a:	8812      	ldrh	r2, [r2, #0]
 800450c:	4293      	cmp	r3, r2
 800450e:	bf0c      	ite	eq
 8004510:	2301      	moveq	r3, #1
 8004512:	2300      	movne	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d017      	beq.n	800454a <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_LTDC_LineEventCallback+0x94>)
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f00b fadf 	bl	800fae4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8004526:	f7fc fa81 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800452a:	4603      	mov	r3, r0
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fd04 	bl	8003f3a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8004532:	f7fd ff17 	bl	8002364 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8004536:	f7fc fa79 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800453a:	4603      	mov	r3, r0
 800453c:	4618      	mov	r0, r3
 800453e:	f016 fde5 	bl	801b10c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8004542:	2000      	movs	r0, #0
 8004544:	f7fc f91e 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8004548:	e010      	b.n	800456c <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_LTDC_LineEventCallback+0x90>)
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	4619      	mov	r1, r3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f00b fac7 	bl	800fae4 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8004556:	f7fc fa69 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800455a:	4603      	mov	r3, r0
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fcb5 	bl	8003ecc <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8004562:	2000      	movs	r0, #0
 8004564:	f7fc f96c 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8004568:	e000      	b.n	800456c <HAL_LTDC_LineEventCallback+0x84>
            return;
 800456a:	bf00      	nop
        }
    }
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	50001000 	.word	0x50001000
 8004578:	24006e3e 	.word	0x24006e3e
 800457c:	24006e40 	.word	0x24006e40

08004580 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	0802adfc 	.word	0x0802adfc

080045a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 80045a0:	b5b0      	push	{r4, r5, r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ffe8 	bl	8004580 <_ZN8touchgfx15VideoControllerC1Ev>
 80045b0:	4a25      	ldr	r2, [pc, #148]	; (8004648 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0xa8>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	330c      	adds	r3, #12
 80045ba:	2400      	movs	r4, #0
 80045bc:	461d      	mov	r5, r3
 80045be:	2c00      	cmp	r4, #0
 80045c0:	db05      	blt.n	80045ce <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x2e>
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 f971 	bl	80048aa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 80045c8:	3524      	adds	r5, #36	; 0x24
 80045ca:	3c01      	subs	r4, #1
 80045cc:	e7f7      	b.n	80045be <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x1e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	635a      	str	r2, [r3, #52]	; 0x34
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	639a      	str	r2, [r3, #56]	; 0x38
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3308      	adds	r3, #8
 8004608:	2204      	movs	r2, #4
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f023 f8b7 	bl	8027780 <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2204      	movs	r2, #4
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f023 f8b0 	bl	8027780 <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8004620:	2200      	movs	r2, #0
 8004622:	2100      	movs	r1, #0
 8004624:	2001      	movs	r0, #1
 8004626:	f011 f960 	bl	80158ea <osSemaphoreNew>
 800462a:	4602      	mov	r2, r0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8004630:	2000      	movs	r0, #0
 8004632:	f011 f84c 	bl	80156ce <osMutexNew>
 8004636:	4602      	mov	r2, r0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bdb0      	pop	{r4, r5, r7, pc}
 8004646:	bf00      	nop
 8004648:	0802adbc 	.word	0x0802adbc

0800464c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d006      	beq.n	800466c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x20>
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x34>)
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x38>)
 8004662:	f240 1103 	movw	r1, #259	; 0x103
 8004666:	4808      	ldr	r0, [pc, #32]	; (8004688 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x3c>)
 8004668:	f022 fffa 	bl	8027660 <__assert_func>
        mjpegDecoders[index] = &decoder;
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	605a      	str	r2, [r3, #4]
    }
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	08029188 	.word	0x08029188
 8004684:	0802919c 	.word	0x0802919c
 8004688:	08029304 	.word	0x08029304

0800468c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>:

    void endFrame()
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d120      	bne.n	800470c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	3308      	adds	r3, #8
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	3304      	adds	r3, #4
 80046dc:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	7f5b      	ldrb	r3, [r3, #29]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x36>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	7f9b      	ldrb	r3, [r3, #30]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f912 	bl	800491a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3301      	adds	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e7db      	b.n	80046c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	4618      	mov	r0, r3
 800471a:	f011 f9c1 	bl	8015aa0 <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	4618      	mov	r0, r3
 800472e:	f011 f89f 	bl	8015870 <osMutexRelease>
            uiHasMutex = false;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:

    void decoderTaskEntry()
 8004742:	b590      	push	{r4, r7, lr}
 8004744:	b08b      	sub	sp, #44	; 0x2c
 8004746:	af02      	add	r7, sp, #8
 8004748:	6078      	str	r0, [r7, #4]
        // Running in Decoder thread!!

        while (1)
        {
            // Wait for synchronisation signal from UI thread
            SEM_WAIT(semDecode);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f04f 31ff 	mov.w	r1, #4294967295
 8004752:	4618      	mov	r0, r3
 8004754:	f011 f952 	bl	80159fc <osSemaphoreAcquire>

            // Lock out the UI by taking the mutex
            MUTEX_LOCK(mutexBuffers);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	f04f 31ff 	mov.w	r1, #4294967295
 8004760:	4618      	mov	r0, r3
 8004762:	f011 f83a 	bl	80157da <osMutexAcquire>

            // Update stream flags
            for (uint32_t i = 0; i < no_streams; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d115      	bne.n	800479c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5a>
            {
                Stream& stream = streams[i];
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	3308      	adds	r3, #8
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	617b      	str	r3, [r7, #20]
                if (stream.doDecode)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x52>
                {
                    stream.doInvalidateOnNextTick = true;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2201      	movs	r2, #1
 8004792:	77da      	strb	r2, [r3, #31]
            for (uint32_t i = 0; i < no_streams; i++)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3301      	adds	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e7e6      	b.n	800476a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x28>
                }
            }

            // Now decode all streams marked for invalidation in next tick
            for (uint32_t i = 0; i < no_streams; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d17b      	bne.n	800489e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x15c>
            {
                Stream& stream = streams[i];
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	3308      	adds	r3, #8
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	3304      	adds	r3, #4
 80047b8:	613b      	str	r3, [r7, #16]
                if (stream.doDecode)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d068      	beq.n	8004896 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x154>
                {
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	60fb      	str	r3, [r7, #12]
                    // Seek or increment video frame
                    if (stream.seek_to_frame > 0)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00c      	beq.n	80047f2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xb0>
                    {
                        decoder->gotoFrame(stream.seek_to_frame);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3324      	adds	r3, #36	; 0x24
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	6952      	ldr	r2, [r2, #20]
 80047e4:	4611      	mov	r1, r2
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2200      	movs	r2, #0
 80047ee:	615a      	str	r2, [r3, #20]
 80047f0:	e01e      	b.n	8004830 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                    }
                    else
                    {
                        if (stream.skip_frames > 0)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01a      	beq.n	8004830 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                        {
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3324      	adds	r3, #36	; 0x24
 8004800:	681c      	ldr	r4, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3328      	adds	r3, #40	; 0x28
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	4798      	blx	r3
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	4413      	add	r3, r2
 8004816:	4619      	mov	r1, r3
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	47a0      	blx	r4
                            stream.frameCount += stream.skip_frames;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	441a      	add	r2, r3
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	605a      	str	r2, [r3, #4]
                            stream.skip_frames = 0;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2200      	movs	r2, #0
 800482e:	619a      	str	r2, [r3, #24]
                        }
                    }

                    // Decode frame
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3314      	adds	r3, #20
 8004836:	681c      	ldr	r4, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	3202      	adds	r2, #2
 800483e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004842:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	f44f 7388 	mov.w	r3, #272	; 0x110
 800484c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	47a0      	blx	r4
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f883 2020 	strb.w	r2, [r3, #32]
                    stream.frameCount++;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

                    // Update frame number
                    if (stream.hasMoreFrames)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x146>
                    {
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3328      	adds	r3, #40	; 0x28
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	4798      	blx	r3
 800487e:	4603      	mov	r3, r0
 8004880:	1e5a      	subs	r2, r3, #1
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	e002      	b.n	800488e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x14c>
                    }
                    else
                    {
                        stream.frameNumber = 1;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]
                    }
                    stream.doDecode = false;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            for (uint32_t i = 0; i < no_streams; i++)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	3301      	adds	r3, #1
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	e780      	b.n	80047a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5e>
                }
            }

            // Release the stream and decode buffer and let UI continue
            MUTEX_UNLOCK(mutexBuffers);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	4618      	mov	r0, r3
 80048a4:	f010 ffe4 	bl	8015870 <osMutexRelease>
        while (1)
 80048a8:	e74f      	b.n	800474a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x8>

080048aa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
                   seek_to_frame(0), skip_frames(0),
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	611a      	str	r2, [r3, #16]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	615a      	str	r2, [r3, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	619a      	str	r2, [r3, #24]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	771a      	strb	r2, [r3, #28]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	775a      	strb	r2, [r3, #29]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	779a      	strb	r2, [r3, #30]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	77da      	strb	r2, [r3, #31]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2020 	strb.w	r2, [r3, #32]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	68d2      	ldr	r2, [r2, #12]
 800492c:	fb03 f202 	mul.w	r2, r3, r2
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	6849      	ldr	r1, [r1, #4]
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	429a      	cmp	r2, r3
 800493e:	d322      	bcc.n	8004986 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01b      	beq.n	8004982 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	68d2      	ldr	r2, [r2, #12]
 8004952:	fb03 f202 	mul.w	r2, r3, r2
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	6849      	ldr	r1, [r1, #4]
 800495e:	fb01 f303 	mul.w	r3, r1, r3
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	fbb2 f2f3 	udiv	r2, r2, r3
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d004      	beq.n	8004982 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	1e5a      	subs	r2, r3, #1
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 8004986:	2300      	movs	r3, #0
    }
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	4a05      	ldr	r2, [pc, #20]	; (80049b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev+0x20>)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fb1f 	bl	8003fe8 <_ZN8touchgfx15VideoControllerD1Ev>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	0802adbc 	.word	0x0802adbc

080049b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff ffe7 	bl	8004994 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
 80049c6:	2148      	movs	r1, #72	; 0x48
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f022 fe1a 	bl	8027602 <_ZdlPvj>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10a      	bne.n	80049fe <_Z41__static_initialization_and_destruction_0ii+0x26>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d105      	bne.n	80049fe <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 80049f2:	480c      	ldr	r0, [pc, #48]	; (8004a24 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80049f4:	f7fc fb36 	bl	8001064 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 480, 272, 480*3U, Bitmap::RGB888> videoController;
 80049f8:	480b      	ldr	r0, [pc, #44]	; (8004a28 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80049fa:	f7ff fdd1 	bl	80045a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d105      	bne.n	8004a1a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004a0e:	4806      	ldr	r0, [pc, #24]	; (8004a28 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004a10:	f7ff ffc0 	bl	8004994 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8004a14:	4803      	ldr	r0, [pc, #12]	; (8004a24 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004a16:	f7fd fbff 	bl	8002218 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	24006dac 	.word	0x24006dac
 8004a28:	24006df4 	.word	0x24006df4

08004a2c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 8004a36:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004a38:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa82 	bl	8004f44 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>
 8004a40:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	4613      	mov	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	3328      	adds	r3, #40	; 0x28
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5a:	4b16      	ldr	r3, [pc, #88]	; (8004ab4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004a5c:	4413      	add	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a66:	440a      	add	r2, r1
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d905      	bls.n	8004a78 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4c>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 8004a6e:	4a13      	ldr	r2, [pc, #76]	; (8004abc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 8004a70:	2152      	movs	r1, #82	; 0x52
 8004a72:	4813      	ldr	r0, [pc, #76]	; (8004ac0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x94>)
 8004a74:	f022 fdf4 	bl	8027660 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	3202      	adds	r2, #2
 8004a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004a8c:	4413      	add	r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6393      	str	r3, [r2, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8004a92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004a96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	6838      	ldr	r0, [r7, #0]
 8004a9e:	f7ff fadf 	bl	8004060 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	6838      	ldr	r0, [r7, #0]
 8004aa6:	f7ff facd 	bl	8004044 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
    }
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	0005fa00 	.word	0x0005fa00
 8004ab8:	08029348 	.word	0x08029348
 8004abc:	08029384 	.word	0x08029384
 8004ac0:	08029304 	.word	0x08029304

08004ac4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f010 fe7f 	bl	80157da <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f010 fec5 	bl	8015870 <osMutexRelease>
        streams[handle].isActive = false;
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	3328      	adds	r3, #40	; 0x28
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d114      	bne.n	8004b32 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	3328      	adds	r3, #40	; 0x28
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	e7e7      	b.n	8004b02 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x54>)
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x58>)
 8004b60:	2182      	movs	r1, #130	; 0x82
 8004b62:	4810      	ldr	r0, [pc, #64]	; (8004ba4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x5c>)
 8004b64:	f022 fd7c 	bl	8027660 <__assert_func>
        Stream& stream = streams[handle];
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	3308      	adds	r3, #8
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	3304      	adds	r3, #4
 8004b7a:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2200      	movs	r2, #0
 8004b86:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	60da      	str	r2, [r3, #12]
    }
 8004b94:	bf00      	nop
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	08029528 	.word	0x08029528
 8004ba0:	0802953c 	.word	0x0802953c
 8004ba4:	08029304 	.word	0x08029304

08004ba8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8004bba:	4b29      	ldr	r3, [pc, #164]	; (8004c60 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8004bbc:	4a29      	ldr	r2, [pc, #164]	; (8004c64 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 8004bbe:	21d0      	movs	r1, #208	; 0xd0
 8004bc0:	4829      	ldr	r0, [pc, #164]	; (8004c68 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8004bc2:	f022 fd4d 	bl	8027660 <__assert_func>
        Stream& stream = streams[handle];
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	7f5b      	ldrb	r3, [r3, #29]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00b      	beq.n	8004bfa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 8004be2:	f7fb ff23 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff f999 	bl	8003f20 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	441a      	add	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	7fdb      	ldrb	r3, [r3, #31]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d029      	beq.n	8004c56 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	3202      	adds	r2, #2
 8004c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff fa18 	bl	8004044 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2200      	movs	r2, #0
 8004c26:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c2e:	f083 0301 	eor.w	r3, r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c3e:	f083 0301 	eor.w	r3, r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c54:	e000      	b.n	8004c58 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 8004c56:	2301      	movs	r3, #1
    }
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	08029528 	.word	0x08029528
 8004c64:	080296f8 	.word	0x080296f8
 8004c68:	08029304 	.word	0x08029304

08004c6c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00e      	beq.n	8004ca2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c88:	f04f 31ff 	mov.w	r1, #4294967295
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f010 fda4 	bl	80157da <osMutexAcquire>
            firstDrawThisFrame = false;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x20>
 8004cc0:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x64>)
 8004cc2:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x68>)
 8004cc4:	2190      	movs	r1, #144	; 0x90
 8004cc6:	4814      	ldr	r0, [pc, #80]	; (8004d18 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x6c>)
 8004cc8:	f022 fcca 	bl	8027660 <__assert_func>
        Stream& stream = streams[handle];
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	3304      	adds	r3, #4
 8004cde:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	6858      	ldr	r0, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4798      	blx	r3
    }
 8004d06:	bf00      	nop
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	08029528 	.word	0x08029528
 8004d14:	0802989c 	.word	0x0802989c
 8004d18:	08029304 	.word	0x08029304

08004d1c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	6858      	ldr	r0, [r3, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4798      	blx	r3
    }
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 8004d66:	4b3a      	ldr	r3, [pc, #232]	; (8004e50 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8004d68:	4a3a      	ldr	r2, [pc, #232]	; (8004e54 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8004d6a:	21a2      	movs	r1, #162	; 0xa2
 8004d6c:	483a      	ldr	r0, [pc, #232]	; (8004e58 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8004d6e:	f022 fc77 	bl	8027660 <__assert_func>
        Stream& stream = streams[handle];
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	3304      	adds	r3, #4
 8004d84:	617b      	str	r3, [r7, #20]
        switch (cmd)
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	2b05      	cmp	r3, #5
 8004d8a:	d85c      	bhi.n	8004e46 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004dad 	.word	0x08004dad
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004df5 	.word	0x08004df5
 8004da0:	08004e09 	.word	0x08004e09
 8004da4:	08004e23 	.word	0x08004e23
 8004da8:	08004e31 	.word	0x08004e31
            if (mjpegDecoders[handle]->hasVideo())
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	6859      	ldr	r1, [r3, #4]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3310      	adds	r3, #16
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4608      	mov	r0, r1
 8004dc8:	4798      	blx	r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d039      	beq.n	8004e44 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
            break;
 8004dea:	e02b      	b.n	8004e44 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2200      	movs	r2, #0
 8004df0:	775a      	strb	r2, [r3, #29]
            break;
 8004df2:	e028      	b.n	8004e46 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]
            break;
 8004e06:	e01e      	b.n	8004e46 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2201      	movs	r2, #1
 8004e12:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2200      	movs	r2, #0
 8004e18:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	609a      	str	r2, [r3, #8]
            break;
 8004e20:	e011      	b.n	8004e46 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]
            break;
 8004e2e:	e00a      	b.n	8004e46 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf14      	ite	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	2300      	moveq	r3, #0
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8004e42:	e000      	b.n	8004e46 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 8004e44:	bf00      	nop
    }
 8004e46:	bf00      	nop
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	08029528 	.word	0x08029528
 8004e54:	08029a78 	.word	0x08029a78
 8004e58:	08029304 	.word	0x08029304

08004e5c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x3c>)
 8004e6e:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x40>)
 8004e70:	2179      	movs	r1, #121	; 0x79
 8004e72:	480b      	ldr	r0, [pc, #44]	; (8004ea0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x44>)
 8004e74:	f022 fbf4 	bl	8027660 <__assert_func>
        const Stream& stream = streams[handle];
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	3308      	adds	r3, #8
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	4413      	add	r3, r2
 8004e88:	3304      	adds	r3, #4
 8004e8a:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
    }
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	08029528 	.word	0x08029528
 8004e9c:	08029c4c 	.word	0x08029c4c
 8004ea0:	08029304 	.word	0x08029304

08004ea4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d006      	beq.n	8004ec4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8004eb8:	4a0d      	ldr	r2, [pc, #52]	; (8004ef0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8004eba:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8004ebe:	480d      	ldr	r0, [pc, #52]	; (8004ef4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 8004ec0:	f022 fbce 	bl	8027660 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	6858      	ldr	r0, [r3, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3330      	adds	r3, #48	; 0x30
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4798      	blx	r3
    }
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	08029528 	.word	0x08029528
 8004ef0:	08029e04 	.word	0x08029e04
 8004ef4:	08029304 	.word	0x08029304

08004ef8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d006      	beq.n	8004f16 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1e>
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x40>)
 8004f0a:	4a0c      	ldr	r2, [pc, #48]	; (8004f3c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x44>)
 8004f0c:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8004f10:	480b      	ldr	r0, [pc, #44]	; (8004f40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x48>)
 8004f12:	f022 fba5 	bl	8027660 <__assert_func>
        Stream& stream = streams[handle];
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	3308      	adds	r3, #8
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	3304      	adds	r3, #4
 8004f28:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	7f5b      	ldrb	r3, [r3, #29]
    }
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	08029528 	.word	0x08029528
 8004f3c:	08029fb4 	.word	0x08029fb4
 8004f40:	08029304 	.word	0x08029304

08004f44 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>:

    Handle getFreeHandle()
 8004f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f46:	b08d      	sub	sp, #52	; 0x34
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d135      	bne.n	8004fc2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	3328      	adds	r3, #40	; 0x28
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d126      	bne.n	8004fba <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8004f6c:	f107 0308 	add.w	r3, r7, #8
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fc9a 	bl	80048aa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 8004f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f78:	4613      	mov	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	3308      	adds	r3, #8
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	4413      	add	r3, r2
 8004f86:	3304      	adds	r3, #4
 8004f88:	f107 0408 	add.w	r4, r7, #8
 8004f8c:	469c      	mov	ip, r3
 8004f8e:	f104 0e20 	add.w	lr, r4, #32
 8004f92:	4665      	mov	r5, ip
 8004f94:	4626      	mov	r6, r4
 8004f96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004f98:	6028      	str	r0, [r5, #0]
 8004f9a:	6069      	str	r1, [r5, #4]
 8004f9c:	60aa      	str	r2, [r5, #8]
 8004f9e:	60eb      	str	r3, [r5, #12]
 8004fa0:	3410      	adds	r4, #16
 8004fa2:	f10c 0c10 	add.w	ip, ip, #16
 8004fa6:	4574      	cmp	r4, lr
 8004fa8:	d1f3      	bne.n	8004f92 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x4e>
 8004faa:	4663      	mov	r3, ip
 8004fac:	4622      	mov	r2, r4
 8004fae:	8811      	ldrh	r1, [r2, #0]
 8004fb0:	7892      	ldrb	r2, [r2, #2]
 8004fb2:	8019      	strh	r1, [r3, #0]
 8004fb4:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	e00a      	b.n	8004fd0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc0:	e7c6      	b.n	8004f50 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x94>)
 8004fc4:	4a05      	ldr	r2, [pc, #20]	; (8004fdc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x98>)
 8004fc6:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004fca:	4805      	ldr	r0, [pc, #20]	; (8004fe0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x9c>)
 8004fcc:	f022 fb48 	bl	8027660 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3734      	adds	r7, #52	; 0x34
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd8:	0802a140 	.word	0x0802a140
 8004fdc:	0802a170 	.word	0x0802a170
 8004fe0:	08029304 	.word	0x08029304

08004fe4 <_GLOBAL__sub_I_mjpegdecoder1>:
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fec:	2001      	movs	r0, #1
 8004fee:	f7ff fcf3 	bl	80049d8 <_Z41__static_initialization_and_destruction_0ii>
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <_GLOBAL__sub_D_mjpegdecoder1>:
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7ff fceb 	bl	80049d8 <_Z41__static_initialization_and_destruction_0ii>
 8005002:	bd80      	pop	{r7, pc}

08005004 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005004:	b480      	push	{r7}
 8005006:	b097      	sub	sp, #92	; 0x5c
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	4a9e      	ldr	r2, [pc, #632]	; (8005290 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	0a1b      	lsrs	r3, r3, #8
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 8005022:	e127      	b.n	8005274 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x270>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8005024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005026:	011a      	lsls	r2, r3, #4
 8005028:	4b9a      	ldr	r3, [pc, #616]	; (8005294 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8005034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	4a96      	ldr	r2, [pc, #600]	; (8005294 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800503a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800503c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005040:	fb01 f202 	mul.w	r2, r1, r2
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28

    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 3;
 8005048:	4b92      	ldr	r3, [pc, #584]	; (8005294 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800504a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800504e:	629a      	str	r2, [r3, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005050:	4b90      	ldr	r3, [pc, #576]	; (8005294 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005056:	fb02 f103 	mul.w	r1, r2, r3
 800505a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800505c:	4613      	mov	r3, r2
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4413      	add	r3, r2
 8005062:	440b      	add	r3, r1
 8005064:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8005066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005068:	3301      	adds	r3, #1
 800506a:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005072:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  16; i+=2)
 8005078:	2300      	movs	r3, #0
 800507a:	657b      	str	r3, [r7, #84]	; 0x54
 800507c:	e0f2      	b.n	8005264 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x260>
    {
      if(i == 8)
 800507e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005080:	2b08      	cmp	r3, #8
 8005082:	d102      	bne.n	800508a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
      {
        pLum = pInBuffer + 128;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3380      	adds	r3, #128	; 0x80
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 272)
 800508a:	4b82      	ldr	r3, [pc, #520]	; (8005294 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800508c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800508e:	4613      	mov	r3, r2
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	4413      	add	r3, r2
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	461a      	mov	r2, r3
 8005098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509a:	4293      	cmp	r3, r2
 800509c:	f080 80df 	bcs.w	800525e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25a>
      {
        pOutAddr = pOutBuffer + refline;
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a4:	4413      	add	r3, r2
 80050a6:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80050a8:	4b7a      	ldr	r3, [pc, #488]	; (8005294 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ae:	4413      	add	r3, r2
 80050b0:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(k= 0; k<2; k++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b6:	e0c5      	b.n	8005244 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x240>
        {
          for(j=0; j < 8; j+=2)
 80050b8:	2300      	movs	r3, #0
 80050ba:	653b      	str	r3, [r7, #80]	; 0x50
 80050bc:	e0b8      	b.n	8005230 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22c>
          {
            cbcomp = (int32_t)(*(pChrom));
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4a73      	ldr	r2, [pc, #460]	; (8005298 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80050ca:	4413      	add	r3, r2
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	3340      	adds	r3, #64	; 0x40
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4a6f      	ldr	r2, [pc, #444]	; (800529c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x298>)
 80050de:	4413      	add	r3, r2
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4a6d      	ldr	r2, [pc, #436]	; (80052a0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>)
 80050ea:	4413      	add	r3, r2
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	496c      	ldr	r1, [pc, #432]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a0>)
 80050f4:	440b      	add	r3, r1
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4413      	add	r3, r2
 80050fa:	141b      	asrs	r3, r3, #16
 80050fc:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 80050fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005102:	4413      	add	r3, r2
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	4413      	add	r3, r2
 800510e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005114:	3302      	adds	r3, #2
 8005116:	4964      	ldr	r1, [pc, #400]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005118:	5c8a      	ldrb	r2, [r1, r2]
 800511a:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4413      	add	r3, r2
 8005122:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005128:	3301      	adds	r3, #1
 800512a:	495f      	ldr	r1, [pc, #380]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800512c:	5c8a      	ldrb	r2, [r1, r2]
 800512e:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	4413      	add	r3, r2
 8005136:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800513a:	4a5b      	ldr	r2, [pc, #364]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800513c:	5cd2      	ldrb	r2, [r2, r3]
 800513e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005140:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8005142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005144:	3301      	adds	r3, #1
 8005146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005148:	4413      	add	r3, r2
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	4413      	add	r3, r2
 8005154:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515a:	3305      	adds	r3, #5
 800515c:	4952      	ldr	r1, [pc, #328]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800515e:	5c8a      	ldrb	r2, [r1, r2]
 8005160:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	4413      	add	r3, r2
 8005168:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800516c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516e:	3304      	adds	r3, #4
 8005170:	494d      	ldr	r1, [pc, #308]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005172:	5c8a      	ldrb	r2, [r1, r2]
 8005174:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	4413      	add	r3, r2
 800517c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005182:	3303      	adds	r3, #3
 8005184:	4948      	ldr	r1, [pc, #288]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005186:	5c8a      	ldrb	r2, [r1, r2]
 8005188:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 800518a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800518c:	3308      	adds	r3, #8
 800518e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005190:	4413      	add	r3, r2
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	4413      	add	r3, r2
 800519c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a2:	3302      	adds	r3, #2
 80051a4:	4940      	ldr	r1, [pc, #256]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051a6:	5c8a      	ldrb	r2, [r1, r2]
 80051a8:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b6:	3301      	adds	r3, #1
 80051b8:	493b      	ldr	r1, [pc, #236]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051ba:	5c8a      	ldrb	r2, [r1, r2]
 80051bc:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80051c8:	4a37      	ldr	r2, [pc, #220]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051ca:	5cd2      	ldrb	r2, [r2, r3]
 80051cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ce:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 80051d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d2:	3309      	adds	r3, #9
 80051d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d6:	4413      	add	r3, r2
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	613b      	str	r3, [r7, #16]

            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e8:	3305      	adds	r3, #5
 80051ea:	492f      	ldr	r1, [pc, #188]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051ec:	5c8a      	ldrb	r2, [r1, r2]
 80051ee:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fc:	3304      	adds	r3, #4
 80051fe:	492a      	ldr	r1, [pc, #168]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005200:	5c8a      	ldrb	r2, [r1, r2]
 8005202:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	4413      	add	r3, r2
 800520a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800520e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005210:	3303      	adds	r3, #3
 8005212:	4925      	ldr	r1, [pc, #148]	; (80052a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005214:	5c8a      	ldrb	r2, [r1, r2]
 8005216:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8005218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521a:	3306      	adds	r3, #6
 800521c:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800521e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005220:	3306      	adds	r3, #6
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	3301      	adds	r3, #1
 8005228:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 800522a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522c:	3302      	adds	r3, #2
 800522e:	653b      	str	r3, [r7, #80]	; 0x50
 8005230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005232:	2b07      	cmp	r3, #7
 8005234:	f67f af43 	bls.w	80050be <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xba>
          }
          pLum += 64;
 8005238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523a:	3340      	adds	r3, #64	; 0x40
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 800523e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005240:	3301      	adds	r3, #1
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005246:	2b01      	cmp	r3, #1
 8005248:	f67f af36 	bls.w	80050b8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb4>
        }

        pLum = pLum - 128 + 16;
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	3b70      	subs	r3, #112	; 0x70
 8005250:	637b      	str	r3, [r7, #52]	; 0x34

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8005252:	4b10      	ldr	r3, [pc, #64]	; (8005294 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800525a:	4413      	add	r3, r2
 800525c:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 800525e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005260:	3302      	adds	r3, #2
 8005262:	657b      	str	r3, [r7, #84]	; 0x54
 8005264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005266:	2b0f      	cmp	r3, #15
 8005268:	f67f af09 	bls.w	800507e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005272:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4413      	add	r3, r2
 800527a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800527c:	429a      	cmp	r2, r3
 800527e:	f4ff aed1 	bcc.w	8005024 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005284:	4618      	mov	r0, r3
 8005286:	375c      	adds	r7, #92	; 0x5c
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	aaaaaaab 	.word	0xaaaaaaab
 8005294:	24006e44 	.word	0x24006e44
 8005298:	24007284 	.word	0x24007284
 800529c:	24006e84 	.word	0x24006e84
 80052a0:	24007684 	.word	0x24007684
 80052a4:	24007a84 	.word	0x24007a84
 80052a8:	0802af70 	.word	0x0802af70

080052ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b097      	sub	sp, #92	; 0x5c
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	0a1b      	lsrs	r3, r3, #8
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 80052c4:	e0c5      	b.n	8005452 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80052c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c8:	011a      	lsls	r2, r3, #4
 80052ca:	4b69      	ldr	r3, [pc, #420]	; (8005470 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	633b      	str	r3, [r7, #48]	; 0x30

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80052d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4a65      	ldr	r2, [pc, #404]	; (8005470 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80052dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052de:	fbb3 f1f2 	udiv	r1, r3, r2
 80052e2:	fb01 f202 	mul.w	r2, r1, r2
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80052ea:	4b61      	ldr	r3, [pc, #388]	; (8005470 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f0:	fb02 f103 	mul.w	r1, r2, r3
 80052f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f6:	4613      	mov	r3, r2
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4413      	add	r3, r2
 80052fc:	440b      	add	r3, r1
 80052fe:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8005300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005302:	3301      	adds	r3, #1
 8005304:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3380      	adds	r3, #128	; 0x80
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c

    pLum = pInBuffer;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	63bb      	str	r3, [r7, #56]	; 0x38

    for(i= 0; i <  8; i++)
 8005310:	2300      	movs	r3, #0
 8005312:	657b      	str	r3, [r7, #84]	; 0x54
 8005314:	e095      	b.n	8005442 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005316:	4b56      	ldr	r3, [pc, #344]	; (8005470 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800531c:	429a      	cmp	r2, r3
 800531e:	f080 808d 	bcs.w	800543c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	4413      	add	r3, r2
 8005328:	643b      	str	r3, [r7, #64]	; 0x40

        for(k= 0; k<2; k++)
 800532a:	2300      	movs	r3, #0
 800532c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800532e:	e07a      	b.n	8005426 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 8005330:	2300      	movs	r3, #0
 8005332:	653b      	str	r3, [r7, #80]	; 0x50
 8005334:	e06e      	b.n	8005414 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {
            cbcomp = (int32_t)(*(pChrom));
 8005336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4a4c      	ldr	r2, [pc, #304]	; (8005474 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 8005342:	4413      	add	r3, r2
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	627b      	str	r3, [r7, #36]	; 0x24

            crcomp = (int32_t)(*(pChrom + 64));
 8005348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534a:	3340      	adds	r3, #64	; 0x40
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a48      	ldr	r2, [pc, #288]	; (8005478 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 8005356:	4413      	add	r3, r2
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	61fb      	str	r3, [r7, #28]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4a46      	ldr	r2, [pc, #280]	; (800547c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 8005362:	4413      	add	r3, r2
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4945      	ldr	r1, [pc, #276]	; (8005480 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 800536c:	440b      	add	r3, r1
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4413      	add	r3, r2
 8005372:	141b      	asrs	r3, r3, #16
 8005374:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 8005376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537a:	4413      	add	r3, r2
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	617b      	str	r3, [r7, #20]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800538a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538c:	3302      	adds	r3, #2
 800538e:	493d      	ldr	r1, [pc, #244]	; (8005484 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8005390:	5c8a      	ldrb	r2, [r1, r2]
 8005392:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	4413      	add	r3, r2
 800539a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a0:	3301      	adds	r3, #1
 80053a2:	4938      	ldr	r1, [pc, #224]	; (8005484 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053a4:	5c8a      	ldrb	r2, [r1, r2]
 80053a6:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053b2:	4a34      	ldr	r2, [pc, #208]	; (8005484 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053b4:	5cd2      	ldrb	r2, [r2, r3]
 80053b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b8:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80053ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053bc:	3301      	adds	r3, #1
 80053be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c0:	4413      	add	r3, r2
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d2:	3305      	adds	r3, #5
 80053d4:	492b      	ldr	r1, [pc, #172]	; (8005484 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053d6:	5c8a      	ldrb	r2, [r1, r2]
 80053d8:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e6:	3304      	adds	r3, #4
 80053e8:	4926      	ldr	r1, [pc, #152]	; (8005484 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053ea:	5c8a      	ldrb	r2, [r1, r2]
 80053ec:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fa:	3303      	adds	r3, #3
 80053fc:	4921      	ldr	r1, [pc, #132]	; (8005484 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053fe:	5c8a      	ldrb	r2, [r1, r2]
 8005400:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT*/

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8005402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005404:	3306      	adds	r3, #6
 8005406:	643b      	str	r3, [r7, #64]	; 0x40

            pChrom++;
 8005408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540a:	3301      	adds	r3, #1
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 800540e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005410:	3302      	adds	r3, #2
 8005412:	653b      	str	r3, [r7, #80]	; 0x50
 8005414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005416:	2b07      	cmp	r3, #7
 8005418:	d98d      	bls.n	8005336 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	3340      	adds	r3, #64	; 0x40
 800541e:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8005420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005422:	3301      	adds	r3, #1
 8005424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d981      	bls.n	8005330 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }

        pLum = pLum - 128 + 8;
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	3b78      	subs	r3, #120	; 0x78
 8005430:	63bb      	str	r3, [r7, #56]	; 0x38

        refline += JPEG_ConvertorParams.ScaledWidth;
 8005432:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005438:	4413      	add	r3, r2
 800543a:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 800543c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800543e:	3301      	adds	r3, #1
 8005440:	657b      	str	r3, [r7, #84]	; 0x54
 8005442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005444:	2b07      	cmp	r3, #7
 8005446:	f67f af66 	bls.w	8005316 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005450:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800545a:	429a      	cmp	r2, r3
 800545c:	f4ff af33 	bcc.w	80052c6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005462:	4618      	mov	r0, r3
 8005464:	375c      	adds	r7, #92	; 0x5c
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	24006e44 	.word	0x24006e44
 8005474:	24007284 	.word	0x24007284
 8005478:	24006e84 	.word	0x24006e84
 800547c:	24007684 	.word	0x24007684
 8005480:	24007a84 	.word	0x24007a84
 8005484:	0802af70 	.word	0x0802af70

08005488 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005488:	b480      	push	{r7}
 800548a:	b095      	sub	sp, #84	; 0x54
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	4a54      	ldr	r2, [pc, #336]	; (80055ec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	09db      	lsrs	r3, r3, #7
 80054a0:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	647b      	str	r3, [r7, #68]	; 0x44

  while(currentMCU < (numberMCU + BlockIndex))
 80054a6:	e092      	b.n	80055ce <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80054a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054aa:	00da      	lsls	r2, r3, #3
 80054ac:	4b50      	ldr	r3, [pc, #320]	; (80055f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80054b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4a4c      	ldr	r2, [pc, #304]	; (80055f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80054c4:	fb01 f202 	mul.w	r2, r1, r2
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80054cc:	4b48      	ldr	r3, [pc, #288]	; (80055f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d2:	fb02 f103 	mul.w	r1, r2, r3
 80054d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d8:	4613      	mov	r3, r2
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	4413      	add	r3, r2
 80054de:	440b      	add	r3, r1
 80054e0:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;
 80054e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e4:	3301      	adds	r3, #1
 80054e6:	647b      	str	r3, [r7, #68]	; 0x44

    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3340      	adds	r3, #64	; 0x40
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  8; i++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f6:	e064      	b.n	80055c2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80054f8:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054fe:	429a      	cmp	r2, r3
 8005500:	d25c      	bcs.n	80055bc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005506:	4413      	add	r3, r2
 8005508:	63fb      	str	r3, [r7, #60]	; 0x3c

          for(j=0; j < 8; j++)
 800550a:	2300      	movs	r3, #0
 800550c:	64bb      	str	r3, [r7, #72]	; 0x48
 800550e:	e04a      	b.n	80055a6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {
            cbcomp = (int32_t)(*pChrom);
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4a36      	ldr	r2, [pc, #216]	; (80055f4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 800551c:	4413      	add	r3, r2
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	3340      	adds	r3, #64	; 0x40
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4a32      	ldr	r2, [pc, #200]	; (80055f8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 8005530:	4413      	add	r3, r2
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4a30      	ldr	r2, [pc, #192]	; (80055fc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 800553c:	4413      	add	r3, r2
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	492e      	ldr	r1, [pc, #184]	; (8005600 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8005546:	440b      	add	r3, r1
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4413      	add	r3, r2
 800554c:	141b      	asrs	r3, r3, #16
 800554e:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

            ycomp = (int32_t)(*(pLum +j));
 8005550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005554:	4413      	add	r3, r2
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	4413      	add	r3, r2
 8005560:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005566:	3302      	adds	r3, #2
 8005568:	4926      	ldr	r1, [pc, #152]	; (8005604 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 800556a:	5c8a      	ldrb	r2, [r1, r2]
 800556c:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	4413      	add	r3, r2
 8005574:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557a:	3301      	adds	r3, #1
 800557c:	4921      	ldr	r1, [pc, #132]	; (8005604 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 800557e:	5c8a      	ldrb	r2, [r1, r2]
 8005580:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	4413      	add	r3, r2
 8005588:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800558c:	4a1d      	ldr	r2, [pc, #116]	; (8005604 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 800558e:	5cd2      	ldrb	r2, [r2, r3]
 8005590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005592:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8005594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005596:	3303      	adds	r3, #3
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	3301      	adds	r3, #1
 800559e:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 80055a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a2:	3301      	adds	r3, #1
 80055a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80055a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a8:	2b07      	cmp	r3, #7
 80055aa:	d9b1      	bls.n	8005510 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ae:	3308      	adds	r3, #8
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;
 80055b2:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b8:	4413      	add	r3, r2
 80055ba:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 80055bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055be:	3301      	adds	r3, #1
 80055c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	2b07      	cmp	r3, #7
 80055c6:	d997      	bls.n	80054f8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	33c0      	adds	r3, #192	; 0xc0
 80055cc:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80055ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4413      	add	r3, r2
 80055d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055d6:	429a      	cmp	r2, r3
 80055d8:	f4ff af66 	bcc.w	80054a8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3754      	adds	r7, #84	; 0x54
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	aaaaaaab 	.word	0xaaaaaaab
 80055f0:	24006e44 	.word	0x24006e44
 80055f4:	24007284 	.word	0x24007284
 80055f8:	24006e84 	.word	0x24006e84
 80055fc:	24007684 	.word	0x24007684
 8005600:	24007a84 	.word	0x24007a84
 8005604:	0802af70 	.word	0x0802af70

08005608 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005608:	b480      	push	{r7}
 800560a:	b08f      	sub	sp, #60	; 0x3c
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	099b      	lsrs	r3, r3, #6
 800561a:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	637b      	str	r3, [r7, #52]	; 0x34

  while(currentMCU < (numberMCU + BlockIndex))
 8005620:	e05b      	b.n	80056da <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8005622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005624:	00da      	lsls	r2, r3, #3
 8005626:	4b33      	ldr	r3, [pc, #204]	; (80056f4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	61bb      	str	r3, [r7, #24]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8005632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4a2f      	ldr	r2, [pc, #188]	; (80056f4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800563a:	fbb3 f1f2 	udiv	r1, r3, r2
 800563e:	fb01 f202 	mul.w	r2, r1, r2
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	617b      	str	r3, [r7, #20]

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	fb02 f103 	mul.w	r1, r2, r3
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4613      	mov	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	440b      	add	r3, r1
 800565a:	633b      	str	r3, [r7, #48]	; 0x30

    currentMCU++;
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	3301      	adds	r3, #1
 8005660:	637b      	str	r3, [r7, #52]	; 0x34

    pLum = pInBuffer;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	623b      	str	r3, [r7, #32]

    for(i= 0; i <  8; i++)
 8005666:	2300      	movs	r3, #0
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800566a:	e030      	b.n	80056ce <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    {
      pOutAddr = pOutBuffer + refline;
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	4413      	add	r3, r2
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005674:	4b1f      	ldr	r3, [pc, #124]	; (80056f4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567a:	429a      	cmp	r2, r3
 800567c:	d224      	bcs.n	80056c8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {
        for(j=0; j < 8; j++)
 800567e:	2300      	movs	r3, #0
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
 8005682:	e019      	b.n	80056b8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        {
          ySample =   (uint32_t)(*pLum);
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	613b      	str	r3, [r7, #16]

          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[0] =  ySample;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	3301      	adds	r3, #1
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	3302      	adds	r3, #2
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]

          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);

#endif /* JPEG_RGB_FORMAT */

          pOutAddr += JPEG_BYTES_PER_PIXEL;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	3303      	adds	r3, #3
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	3301      	adds	r3, #1
 80056b0:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	3301      	adds	r3, #1
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	2b07      	cmp	r3, #7
 80056bc:	d9e2      	bls.n	8005684 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c4:	4413      	add	r3, r2
 80056c6:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	3301      	adds	r3, #1
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	2b07      	cmp	r3, #7
 80056d2:	d9cb      	bls.n	800566c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3340      	adds	r3, #64	; 0x40
 80056d8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4413      	add	r3, r2
 80056e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d39d      	bcc.n	8005622 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80056e6:	69fb      	ldr	r3, [r7, #28]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	373c      	adds	r7, #60	; 0x3c
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	24006e44 	.word	0x24006e44

080056f8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b093      	sub	sp, #76	; 0x4c
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	0a1b      	lsrs	r3, r3, #8
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	63fb      	str	r3, [r7, #60]	; 0x3c

  while(currentMCU < (numberMCU + BlockIndex))
 8005710:	e089      	b.n	8005826 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8005712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005714:	00da      	lsls	r2, r3, #3
 8005716:	4b4b      	ldr	r3, [pc, #300]	; (8005844 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8005722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4a47      	ldr	r2, [pc, #284]	; (8005844 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800572a:	fbb3 f1f2 	udiv	r1, r3, r2
 800572e:	fb01 f202 	mul.w	r2, r1, r2
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	627b      	str	r3, [r7, #36]	; 0x24

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005736:	4b43      	ldr	r3, [pc, #268]	; (8005844 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573c:	fb02 f103 	mul.w	r1, r2, r3
 8005740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005742:	4613      	mov	r3, r2
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	4413      	add	r3, r2
 8005748:	440b      	add	r3, r1
 800574a:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 800574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574e:	3301      	adds	r3, #1
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c

    pChrom = pInBuffer;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	633b      	str	r3, [r7, #48]	; 0x30

    for(i= 0; i <  8; i++)
 8005756:	2300      	movs	r3, #0
 8005758:	647b      	str	r3, [r7, #68]	; 0x44
 800575a:	e05d      	b.n	8005818 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800575c:	4b39      	ldr	r3, [pc, #228]	; (8005844 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005762:	429a      	cmp	r2, r3
 8005764:	d255      	bcs.n	8005812 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	4413      	add	r3, r2
 800576c:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 800576e:	2300      	movs	r3, #0
 8005770:	643b      	str	r3, [r7, #64]	; 0x40
 8005772:	e046      	b.n	8005802 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {
            color_k = (int32_t)(*(pChrom + 192));
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	33c0      	adds	r3, #192	; 0xc0
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	fb02 f303 	mul.w	r3, r2, r3
 8005788:	4a2f      	ldr	r2, [pc, #188]	; (8005848 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800578a:	fb82 1203 	smull	r1, r2, r2, r3
 800578e:	441a      	add	r2, r3
 8005790:	11d2      	asrs	r2, r2, #7
 8005792:	17db      	asrs	r3, r3, #31
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	61fb      	str	r3, [r7, #28]

            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	3340      	adds	r3, #64	; 0x40
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	4a28      	ldr	r2, [pc, #160]	; (8005848 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80057a8:	fb82 1203 	smull	r1, r2, r2, r3
 80057ac:	441a      	add	r2, r3
 80057ae:	11d2      	asrs	r2, r2, #7
 80057b0:	17db      	asrs	r3, r3, #31
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	61bb      	str	r3, [r7, #24]

            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	3380      	adds	r3, #128	; 0x80
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	fb02 f303 	mul.w	r3, r2, r3
 80057c4:	4a20      	ldr	r2, [pc, #128]	; (8005848 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80057c6:	fb82 1203 	smull	r1, r2, r2, r3
 80057ca:	441a      	add	r2, r3
 80057cc:	11d2      	asrs	r2, r2, #7
 80057ce:	17db      	asrs	r3, r3, #31
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 80057d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d6:	3302      	adds	r3, #2
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	3301      	adds	r3, #1
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ee:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	3303      	adds	r3, #3
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34

            pChrom++;
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	3301      	adds	r3, #1
 80057fa:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 80057fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fe:	3301      	adds	r3, #1
 8005800:	643b      	str	r3, [r7, #64]	; 0x40
 8005802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005804:	2b07      	cmp	r3, #7
 8005806:	d9b5      	bls.n	8005774 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8005808:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800580e:	4413      	add	r3, r2
 8005810:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 8005812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005814:	3301      	adds	r3, #1
 8005816:	647b      	str	r3, [r7, #68]	; 0x44
 8005818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581a:	2b07      	cmp	r3, #7
 800581c:	d99e      	bls.n	800575c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005824:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4413      	add	r3, r2
 800582c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800582e:	429a      	cmp	r2, r3
 8005830:	f4ff af6f 	bcc.w	8005712 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005836:	4618      	mov	r0, r3
 8005838:	374c      	adds	r7, #76	; 0x4c
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	24006e44 	.word	0x24006e44
 8005848:	80808081 	.word	0x80808081

0800584c <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a7c      	ldr	r2, [pc, #496]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800585e:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4a7a      	ldr	r2, [pc, #488]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005866:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a78      	ldr	r2, [pc, #480]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800586e:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	6892      	ldr	r2, [r2, #8]
 8005878:	fb03 f202 	mul.w	r2, r3, r2
 800587c:	4613      	mov	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4413      	add	r3, r2
 8005882:	4a73      	ldr	r2, [pc, #460]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005884:	6113      	str	r3, [r2, #16]

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4a71      	ldr	r2, [pc, #452]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800588c:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800588e:	4b70      	ldr	r3, [pc, #448]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b10      	cmp	r3, #16
 8005894:	d155      	bne.n	8005942 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8005896:	4b6e      	ldr	r3, [pc, #440]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d119      	bne.n	80058d2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4a6c      	ldr	r2, [pc, #432]	; (8005a54 <TGFX_JPEG_GetDecodeColorConvertFunc+0x208>)
 80058a2:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80058a4:	4b6a      	ldr	r3, [pc, #424]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	4a68      	ldr	r2, [pc, #416]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ae:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 80058b0:	4b67      	ldr	r3, [pc, #412]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 80058b8:	4b65      	ldr	r3, [pc, #404]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f1c3 0310 	rsb	r3, r3, #16
 80058c0:	4a63      	ldr	r2, [pc, #396]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058c2:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 80058c4:	4b62      	ldr	r3, [pc, #392]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058c6:	2210      	movs	r2, #16
 80058c8:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 80058ca:	4b61      	ldr	r3, [pc, #388]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058cc:	2210      	movs	r2, #16
 80058ce:	621a      	str	r2, [r3, #32]
 80058d0:	e075      	b.n	80059be <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80058d2:	4b5f      	ldr	r3, [pc, #380]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d119      	bne.n	800590e <TGFX_JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4a5e      	ldr	r2, [pc, #376]	; (8005a58 <TGFX_JPEG_GetDecodeColorConvertFunc+0x20c>)
 80058de:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80058e0:	4b5b      	ldr	r3, [pc, #364]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	4a59      	ldr	r2, [pc, #356]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ea:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 80058ec:	4b58      	ldr	r3, [pc, #352]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 80058f4:	4b56      	ldr	r3, [pc, #344]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f1c3 0310 	rsb	r3, r3, #16
 80058fc:	4a54      	ldr	r2, [pc, #336]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058fe:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8005900:	4b53      	ldr	r3, [pc, #332]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005902:	2210      	movs	r2, #16
 8005904:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8005906:	4b52      	ldr	r3, [pc, #328]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005908:	2208      	movs	r2, #8
 800590a:	621a      	str	r2, [r3, #32]
 800590c:	e057      	b.n	80059be <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4a52      	ldr	r2, [pc, #328]	; (8005a5c <TGFX_JPEG_GetDecodeColorConvertFunc+0x210>)
 8005912:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8005914:	4b4e      	ldr	r3, [pc, #312]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	4a4c      	ldr	r2, [pc, #304]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800591e:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8005920:	4b4b      	ldr	r3, [pc, #300]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8005928:	4b49      	ldr	r3, [pc, #292]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	f1c3 0308 	rsb	r3, r3, #8
 8005930:	4a47      	ldr	r2, [pc, #284]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005932:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8005934:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005936:	2208      	movs	r2, #8
 8005938:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800593a:	4b45      	ldr	r3, [pc, #276]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800593c:	2208      	movs	r2, #8
 800593e:	621a      	str	r2, [r3, #32]
 8005940:	e03d      	b.n	80059be <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8005942:	4b43      	ldr	r3, [pc, #268]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d119      	bne.n	800597e <TGFX_JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4a44      	ldr	r2, [pc, #272]	; (8005a60 <TGFX_JPEG_GetDecodeColorConvertFunc+0x214>)
 800594e:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8005950:	4b3f      	ldr	r3, [pc, #252]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	4a3d      	ldr	r2, [pc, #244]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800595a:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 800595c:	4b3c      	ldr	r3, [pc, #240]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <TGFX_JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8005964:	4b3a      	ldr	r3, [pc, #232]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f1c3 0308 	rsb	r3, r3, #8
 800596c:	4a38      	ldr	r2, [pc, #224]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800596e:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8005970:	4b37      	ldr	r3, [pc, #220]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005972:	2208      	movs	r2, #8
 8005974:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8005976:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005978:	2208      	movs	r2, #8
 800597a:	621a      	str	r2, [r3, #32]
 800597c:	e01f      	b.n	80059be <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800597e:	4b34      	ldr	r3, [pc, #208]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b30      	cmp	r3, #48	; 0x30
 8005984:	d119      	bne.n	80059ba <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4a36      	ldr	r2, [pc, #216]	; (8005a64 <TGFX_JPEG_GetDecodeColorConvertFunc+0x218>)
 800598a:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800598c:	4b30      	ldr	r3, [pc, #192]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	4a2e      	ldr	r2, [pc, #184]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005996:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8005998:	4b2d      	ldr	r3, [pc, #180]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <TGFX_JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 80059a0:	4b2b      	ldr	r3, [pc, #172]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f1c3 0308 	rsb	r3, r3, #8
 80059a8:	4a29      	ldr	r2, [pc, #164]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059aa:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 80059ac:	4b28      	ldr	r3, [pc, #160]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ae:	2208      	movs	r2, #8
 80059b0:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 80059b2:	4b27      	ldr	r3, [pc, #156]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059b4:	2208      	movs	r2, #8
 80059b6:	621a      	str	r2, [r3, #32]
 80059b8:	e001      	b.n	80059be <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
 80059ba:	2301      	movs	r3, #1
 80059bc:	e042      	b.n	8005a44 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1f8>
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 80059be:	4b24      	ldr	r3, [pc, #144]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	4b23      	ldr	r3, [pc, #140]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ca:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 80059cc:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	4613      	mov	r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	4413      	add	r3, r2
 80059d6:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059d8:	6293      	str	r3, [r2, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 80059da:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	4b1c      	ldr	r3, [pc, #112]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 80059e8:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4a18      	ldr	r2, [pc, #96]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ee:	69d2      	ldr	r2, [r2, #28]
 80059f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80059f4:	fb01 f202 	mul.w	r2, r1, r2
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	3301      	adds	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8005a04:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4a0e      	ldr	r2, [pc, #56]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a18:	6a12      	ldr	r2, [r2, #32]
 8005a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a1e:	fb01 f202 	mul.w	r2, r1, r2
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <TGFX_JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	fb02 f303 	mul.w	r3, r2, r3
 8005a36:	4a06      	ldr	r2, [pc, #24]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a38:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	371c      	adds	r7, #28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	24006e44 	.word	0x24006e44
 8005a54:	08005005 	.word	0x08005005
 8005a58:	080052ad 	.word	0x080052ad
 8005a5c:	08005489 	.word	0x08005489
 8005a60:	08005609 	.word	0x08005609
 8005a64:	080056f9 	.word	0x080056f9

08005a68 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8005a6e:	2300      	movs	r3, #0
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	e02e      	b.n	8005ad2 <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3b80      	subs	r3, #128	; 0x80
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	f24b 3274 	movw	r2, #45940	; 0xb374
 8005a82:	fb02 f303 	mul.w	r3, r2, r3
 8005a86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005a8a:	141a      	asrs	r2, r3, #16
 8005a8c:	4916      	ldr	r1, [pc, #88]	; (8005ae8 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 8005a9a:	fb02 f303 	mul.w	r3, r2, r3
 8005a9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005aa2:	141a      	asrs	r2, r3, #16
 8005aa4:	4911      	ldr	r1, [pc, #68]	; (8005aec <TGFX_JPEG_InitPostProcColorTables+0x84>)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	4a10      	ldr	r2, [pc, #64]	; (8005af0 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8005ab0:	fb03 f202 	mul.w	r2, r3, r2
 8005ab4:	490f      	ldr	r1, [pc, #60]	; (8005af4 <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	4a0e      	ldr	r2, [pc, #56]	; (8005af8 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8005ac0:	fb03 f202 	mul.w	r2, r3, r2
 8005ac4:	490d      	ldr	r1, [pc, #52]	; (8005afc <TGFX_JPEG_InitPostProcColorTables+0x94>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	607b      	str	r3, [r7, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2bff      	cmp	r3, #255	; 0xff
 8005ad6:	ddcd      	ble.n	8005a74 <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	24006e84 	.word	0x24006e84
 8005aec:	24007284 	.word	0x24007284
 8005af0:	ffffa498 	.word	0xffffa498
 8005af4:	24007684 	.word	0x24007684
 8005af8:	ffffd3f4 	.word	0xffffd3f4
 8005afc:	24007a84 	.word	0x24007a84

08005b00 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8005b04:	f000 f806 	bl	8005b14 <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8005b08:	f000 f888 	bl	8005c1c <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8005b0c:	f7ff ffac 	bl	8005a68 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8005b10:	bf00      	nop
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	e05a      	b.n	8005bd6 <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b2e:	141a      	asrs	r2, r3, #16
 8005b30:	492e      	ldr	r1, [pc, #184]	; (8005bec <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f249 6245 	movw	r2, #38469	; 0x9645
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b46:	141a      	asrs	r2, r3, #16
 8005b48:	4929      	ldr	r1, [pc, #164]	; (8005bf0 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8005b56:	fb02 f303 	mul.w	r3, r2, r3
 8005b5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b5e:	141a      	asrs	r2, r3, #16
 8005b60:	4924      	ldr	r1, [pc, #144]	; (8005bf4 <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a23      	ldr	r2, [pc, #140]	; (8005bf8 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8005b6c:	fb02 f303 	mul.w	r3, r2, r3
 8005b70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b74:	141a      	asrs	r2, r3, #16
 8005b76:	4921      	ldr	r1, [pc, #132]	; (8005bfc <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b8a:	141a      	asrs	r2, r3, #16
 8005b8c:	491d      	ldr	r1, [pc, #116]	; (8005c04 <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3301      	adds	r3, #1
 8005b98:	03db      	lsls	r3, r3, #15
 8005b9a:	141a      	asrs	r2, r3, #16
 8005b9c:	491a      	ldr	r1, [pc, #104]	; (8005c08 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8005ba8:	fb02 f303 	mul.w	r3, r2, r3
 8005bac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bb0:	141a      	asrs	r2, r3, #16
 8005bb2:	4917      	ldr	r1, [pc, #92]	; (8005c10 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bc6:	141a      	asrs	r2, r3, #16
 8005bc8:	4913      	ldr	r1, [pc, #76]	; (8005c18 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2bff      	cmp	r3, #255	; 0xff
 8005bda:	dda1      	ble.n	8005b20 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	24007e84 	.word	0x24007e84
 8005bf0:	24008a84 	.word	0x24008a84
 8005bf4:	24009684 	.word	0x24009684
 8005bf8:	ffffd4d1 	.word	0xffffd4d1
 8005bfc:	24008284 	.word	0x24008284
 8005c00:	ffffab30 	.word	0xffffab30
 8005c04:	24009284 	.word	0x24009284
 8005c08:	24008684 	.word	0x24008684
 8005c0c:	ffff94d1 	.word	0xffff94d1
 8005c10:	24008e84 	.word	0x24008e84
 8005c14:	ffffeb30 	.word	0xffffeb30
 8005c18:	24009a84 	.word	0x24009a84

08005c1c <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	e036      	b.n	8005c96 <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	e02d      	b.n	8005c8a <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	4413      	add	r3, r2
 8005c36:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b07      	cmp	r3, #7
 8005c3c:	d906      	bls.n	8005c4c <TGFX_JPEG_Init_MCU_LUT+0x30>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b07      	cmp	r3, #7
 8005c42:	d903      	bls.n	8005c4c <TGFX_JPEG_Init_MCU_LUT+0x30>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3378      	adds	r3, #120	; 0x78
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	e012      	b.n	8005c72 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b07      	cmp	r3, #7
 8005c50:	d906      	bls.n	8005c60 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b07      	cmp	r3, #7
 8005c56:	d803      	bhi.n	8005c60 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3338      	adds	r3, #56	; 0x38
 8005c5c:	607b      	str	r3, [r7, #4]
 8005c5e:	e008      	b.n	8005c72 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b07      	cmp	r3, #7
 8005c64:	d805      	bhi.n	8005c72 <TGFX_JPEG_Init_MCU_LUT+0x56>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	d902      	bls.n	8005c72 <TGFX_JPEG_Init_MCU_LUT+0x56>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3340      	adds	r3, #64	; 0x40
 8005c70:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4413      	add	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	b291      	uxth	r1, r2
 8005c7e:	4a62      	ldr	r2, [pc, #392]	; (8005e08 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8005c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60bb      	str	r3, [r7, #8]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	d9ce      	bls.n	8005c2e <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b0f      	cmp	r3, #15
 8005c9a:	d9c5      	bls.n	8005c28 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e072      	b.n	8005d88 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60bb      	str	r3, [r7, #8]
 8005ca6:	e069      	b.n	8005d7c <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	4413      	add	r3, r2
 8005cb0:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005cca:	b299      	uxth	r1, r3
 8005ccc:	4a4f      	ldr	r2, [pc, #316]	; (8005e0c <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3380      	adds	r3, #128	; 0x80
 8005ce8:	b299      	uxth	r1, r3
 8005cea:	4a49      	ldr	r2, [pc, #292]	; (8005e10 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	4413      	add	r3, r2
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d0a:	b299      	uxth	r1, r3
 8005d0c:	4a41      	ldr	r2, [pc, #260]	; (8005e14 <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4413      	add	r3, r2
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	33c0      	adds	r3, #192	; 0xc0
 8005d28:	b299      	uxth	r1, r3
 8005d2a:	4a3b      	ldr	r2, [pc, #236]	; (8005e18 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005d4a:	b299      	uxth	r1, r3
 8005d4c:	4a33      	ldr	r2, [pc, #204]	; (8005e1c <TGFX_JPEG_Init_MCU_LUT+0x200>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4413      	add	r3, r2
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d6c:	b299      	uxth	r1, r3
 8005d6e:	4a2c      	ldr	r2, [pc, #176]	; (8005e20 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60bb      	str	r3, [r7, #8]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d992      	bls.n	8005ca8 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3301      	adds	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b0f      	cmp	r3, #15
 8005d8c:	d989      	bls.n	8005ca2 <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e02e      	b.n	8005df2 <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 8005d94:	2300      	movs	r3, #0
 8005d96:	60bb      	str	r3, [r7, #8]
 8005d98:	e025      	b.n	8005de6 <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4413      	add	r3, r2
 8005da2:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	b299      	uxth	r1, r3
 8005da8:	4a1e      	ldr	r2, [pc, #120]	; (8005e24 <TGFX_JPEG_Init_MCU_LUT+0x208>)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3340      	adds	r3, #64	; 0x40
 8005db6:	b299      	uxth	r1, r3
 8005db8:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3380      	adds	r3, #128	; 0x80
 8005dc6:	b299      	uxth	r1, r3
 8005dc8:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <TGFX_JPEG_Init_MCU_LUT+0x210>)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	33c0      	adds	r3, #192	; 0xc0
 8005dd6:	b299      	uxth	r1, r3
 8005dd8:	4a15      	ldr	r2, [pc, #84]	; (8005e30 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	3301      	adds	r3, #1
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b07      	cmp	r3, #7
 8005dea:	d9d6      	bls.n	8005d9a <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b07      	cmp	r3, #7
 8005df6:	d9cd      	bls.n	8005d94 <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	24009e84 	.word	0x24009e84
 8005e0c:	2400a104 	.word	0x2400a104
 8005e10:	2400a304 	.word	0x2400a304
 8005e14:	2400a584 	.word	0x2400a584
 8005e18:	2400a784 	.word	0x2400a784
 8005e1c:	2400aa04 	.word	0x2400aa04
 8005e20:	2400ac04 	.word	0x2400ac04
 8005e24:	2400a084 	.word	0x2400a084
 8005e28:	2400a504 	.word	0x2400a504
 8005e2c:	2400a984 	.word	0x2400a984
 8005e30:	2400ae04 	.word	0x2400ae04

08005e34 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
    vTaskDelete() API function (as this demo application does) then it is also
    important that vApplicationIdleHook() is permitted to return to its calling
    function, because it is the responsibility of the idle task to clean up
    memory allocated by the kernel to any task that has since been deleted. */

    vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8005e38:	4902      	ldr	r1, [pc, #8]	; (8005e44 <vApplicationIdleHook+0x10>)
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	f012 f94c 	bl	80180d8 <vTaskSetApplicationTaskTag>
}
 8005e40:	bf00      	nop
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	08000f49 	.word	0x08000f49

08005e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8005e4e:	f000 fd2f 	bl	80068b0 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005e52:	4b53      	ldr	r3, [pc, #332]	; (8005fa0 <main+0x158>)
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d11b      	bne.n	8005e96 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e5e:	f3bf 8f4f 	dsb	sy
}
 8005e62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e64:	f3bf 8f6f 	isb	sy
}
 8005e68:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005e6a:	4b4d      	ldr	r3, [pc, #308]	; (8005fa0 <main+0x158>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005e72:	f3bf 8f4f 	dsb	sy
}
 8005e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e78:	f3bf 8f6f 	isb	sy
}
 8005e7c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005e7e:	4b48      	ldr	r3, [pc, #288]	; (8005fa0 <main+0x158>)
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	4a47      	ldr	r2, [pc, #284]	; (8005fa0 <main+0x158>)
 8005e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e8a:	f3bf 8f4f 	dsb	sy
}
 8005e8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e90:	f3bf 8f6f 	isb	sy
}
 8005e94:	e000      	b.n	8005e98 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005e96:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005e98:	4b41      	ldr	r3, [pc, #260]	; (8005fa0 <main+0x158>)
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d138      	bne.n	8005f16 <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005ea4:	4b3e      	ldr	r3, [pc, #248]	; (8005fa0 <main+0x158>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005eac:	f3bf 8f4f 	dsb	sy
}
 8005eb0:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <main+0x158>)
 8005eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb8:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	0b5b      	lsrs	r3, r3, #13
 8005ebe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005ec2:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	08db      	lsrs	r3, r3, #3
 8005ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ecc:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005ed6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005edc:	4930      	ldr	r1, [pc, #192]	; (8005fa0 <main+0x158>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	1e5a      	subs	r2, r3, #1
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1ef      	bne.n	8005ece <main+0x86>
    } while(sets-- != 0U);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	1e5a      	subs	r2, r3, #1
 8005ef2:	60ba      	str	r2, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e5      	bne.n	8005ec4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ef8:	f3bf 8f4f 	dsb	sy
}
 8005efc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005efe:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <main+0x158>)
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	4a27      	ldr	r2, [pc, #156]	; (8005fa0 <main+0x158>)
 8005f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f0a:	f3bf 8f4f 	dsb	sy
}
 8005f0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f10:	f3bf 8f6f 	isb	sy
}
 8005f14:	e000      	b.n	8005f18 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005f16:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f18:	f005 fe0a 	bl	800bb30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f1c:	f000 f85a 	bl	8005fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f20:	f000 fb4a 	bl	80065b8 <MX_GPIO_Init>
  MX_MDMA_Init();
 8005f24:	f000 fad6 	bl	80064d4 <MX_MDMA_Init>
  MX_DMA2D_Init();
 8005f28:	f000 f8ea 	bl	8006100 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8005f2c:	f000 f976 	bl	800621c <MX_LTDC_Init>
  MX_I2C4_Init();
 8005f30:	f000 f920 	bl	8006174 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8005f34:	f000 f9f4 	bl	8006320 <MX_OCTOSPI1_Init>
  MX_FMC_Init();
 8005f38:	f000 faec 	bl	8006514 <MX_FMC_Init>
  MX_CRC_Init();
 8005f3c:	f000 f8be 	bl	80060bc <MX_CRC_Init>
  MX_JPEG_Init();
 8005f40:	f000 f958 	bl	80061f4 <MX_JPEG_Init>
  MX_LIBJPEG_Init();
 8005f44:	f7fa fa4d 	bl	80003e2 <MX_LIBJPEG_Init>
  MX_TIM5_Init();
 8005f48:	f000 fa48 	bl	80063dc <MX_TIM5_Init>
  MX_TouchGFX_Init();
 8005f4c:	f7fa fa57 	bl	80003fe <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8005f50:	f7fa fa4e 	bl	80003f0 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 8005f54:	4913      	ldr	r1, [pc, #76]	; (8005fa4 <main+0x15c>)
 8005f56:	4814      	ldr	r0, [pc, #80]	; (8005fa8 <main+0x160>)
 8005f58:	f000 fc44 	bl	80067e4 <SDRAM_Initialization_Sequence>
  
  *(__IO uint32_t*)(0xD0000000) = 0x11111122;
 8005f5c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8005f60:	4a12      	ldr	r2, [pc, #72]	; (8005fac <main+0x164>)
 8005f62:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005f64:	f00f fabc 	bl	80154e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005f68:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <main+0x168>)
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	4811      	ldr	r0, [pc, #68]	; (8005fb4 <main+0x16c>)
 8005f6e:	f00f fb01 	bl	8015574 <osThreadNew>
 8005f72:	4603      	mov	r3, r0
 8005f74:	4a10      	ldr	r2, [pc, #64]	; (8005fb8 <main+0x170>)
 8005f76:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8005f78:	4a10      	ldr	r2, [pc, #64]	; (8005fbc <main+0x174>)
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4810      	ldr	r0, [pc, #64]	; (8005fc0 <main+0x178>)
 8005f7e:	f00f faf9 	bl	8015574 <osThreadNew>
 8005f82:	4603      	mov	r3, r0
 8005f84:	4a0f      	ldr	r2, [pc, #60]	; (8005fc4 <main+0x17c>)
 8005f86:	6013      	str	r3, [r2, #0]

  /* creation of videoTask */
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8005f88:	4a0f      	ldr	r2, [pc, #60]	; (8005fc8 <main+0x180>)
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	480f      	ldr	r0, [pc, #60]	; (8005fcc <main+0x184>)
 8005f8e:	f00f faf1 	bl	8015574 <osThreadNew>
 8005f92:	4603      	mov	r3, r0
 8005f94:	4a0e      	ldr	r2, [pc, #56]	; (8005fd0 <main+0x188>)
 8005f96:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8005f98:	f00f fac6 	bl	8015528 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005f9c:	e7fe      	b.n	8005f9c <main+0x154>
 8005f9e:	bf00      	nop
 8005fa0:	e000ed00 	.word	0xe000ed00
 8005fa4:	2400b224 	.word	0x2400b224
 8005fa8:	2400b1e4 	.word	0x2400b1e4
 8005fac:	11111122 	.word	0x11111122
 8005fb0:	0802b270 	.word	0x0802b270
 8005fb4:	080068a1 	.word	0x080068a1
 8005fb8:	2400b218 	.word	0x2400b218
 8005fbc:	0802b294 	.word	0x0802b294
 8005fc0:	0800040f 	.word	0x0800040f
 8005fc4:	2400b21c 	.word	0x2400b21c
 8005fc8:	0802b2b8 	.word	0x0802b2b8
 8005fcc:	080044cd 	.word	0x080044cd
 8005fd0:	2400b220 	.word	0x2400b220

08005fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b09c      	sub	sp, #112	; 0x70
 8005fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fde:	224c      	movs	r2, #76	; 0x4c
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f021 fbcc 	bl	8027780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fe8:	1d3b      	adds	r3, r7, #4
 8005fea:	2220      	movs	r2, #32
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f021 fbc6 	bl	8027780 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8005ff4:	4b2f      	ldr	r3, [pc, #188]	; (80060b4 <SystemClock_Config+0xe0>)
 8005ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8005ffe:	2004      	movs	r0, #4
 8006000:	f00b faa0 	bl	8011544 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006004:	2300      	movs	r3, #0
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	4b2b      	ldr	r3, [pc, #172]	; (80060b8 <SystemClock_Config+0xe4>)
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	4a2a      	ldr	r2, [pc, #168]	; (80060b8 <SystemClock_Config+0xe4>)
 800600e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006012:	6193      	str	r3, [r2, #24]
 8006014:	4b28      	ldr	r3, [pc, #160]	; (80060b8 <SystemClock_Config+0xe4>)
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800601c:	603b      	str	r3, [r7, #0]
 800601e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006020:	bf00      	nop
 8006022:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <SystemClock_Config+0xe4>)
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800602a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602e:	d1f8      	bne.n	8006022 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006030:	2301      	movs	r3, #1
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006038:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800603a:	2302      	movs	r3, #2
 800603c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800603e:	2302      	movs	r3, #2
 8006040:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006042:	230c      	movs	r3, #12
 8006044:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8006046:	f44f 738c 	mov.w	r3, #280	; 0x118
 800604a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800604c:	2302      	movs	r3, #2
 800604e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006050:	2302      	movs	r3, #2
 8006052:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006054:	2302      	movs	r3, #2
 8006056:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8006058:	2304      	movs	r3, #4
 800605a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800605c:	2300      	movs	r3, #0
 800605e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006060:	2300      	movs	r3, #0
 8006062:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006068:	4618      	mov	r0, r3
 800606a:	f00b fac5 	bl	80115f8 <HAL_RCC_OscConfig>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8006074:	f000 fc7c 	bl	8006970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006078:	233f      	movs	r3, #63	; 0x3f
 800607a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800607c:	2303      	movs	r3, #3
 800607e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006084:	2308      	movs	r3, #8
 8006086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800608c:	2300      	movs	r3, #0
 800608e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8006090:	2300      	movs	r3, #0
 8006092:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8006094:	2300      	movs	r3, #0
 8006096:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006098:	1d3b      	adds	r3, r7, #4
 800609a:	2103      	movs	r1, #3
 800609c:	4618      	mov	r0, r3
 800609e:	f00b fedd 	bl	8011e5c <HAL_RCC_ClockConfig>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80060a8:	f000 fc62 	bl	8006970 <Error_Handler>
  }
}
 80060ac:	bf00      	nop
 80060ae:	3770      	adds	r7, #112	; 0x70
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	58024400 	.word	0x58024400
 80060b8:	58024800 	.word	0x58024800

080060bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80060c0:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <MX_CRC_Init+0x3c>)
 80060c2:	4a0e      	ldr	r2, [pc, #56]	; (80060fc <MX_CRC_Init+0x40>)
 80060c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80060c6:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <MX_CRC_Init+0x3c>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80060cc:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <MX_CRC_Init+0x3c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <MX_CRC_Init+0x3c>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80060d8:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <MX_CRC_Init+0x3c>)
 80060da:	2200      	movs	r2, #0
 80060dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80060de:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <MX_CRC_Init+0x3c>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80060e4:	4804      	ldr	r0, [pc, #16]	; (80060f8 <MX_CRC_Init+0x3c>)
 80060e6:	f005 ff31 	bl	800bf4c <HAL_CRC_Init>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80060f0:	f000 fc3e 	bl	8006970 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80060f4:	bf00      	nop
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	2400ae84 	.word	0x2400ae84
 80060fc:	40023000 	.word	0x40023000

08006100 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8006104:	4b19      	ldr	r3, [pc, #100]	; (800616c <MX_DMA2D_Init+0x6c>)
 8006106:	4a1a      	ldr	r2, [pc, #104]	; (8006170 <MX_DMA2D_Init+0x70>)
 8006108:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800610a:	4b18      	ldr	r3, [pc, #96]	; (800616c <MX_DMA2D_Init+0x6c>)
 800610c:	2200      	movs	r2, #0
 800610e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8006110:	4b16      	ldr	r3, [pc, #88]	; (800616c <MX_DMA2D_Init+0x6c>)
 8006112:	2202      	movs	r2, #2
 8006114:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8006116:	4b15      	ldr	r3, [pc, #84]	; (800616c <MX_DMA2D_Init+0x6c>)
 8006118:	2200      	movs	r2, #0
 800611a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800611c:	4b13      	ldr	r3, [pc, #76]	; (800616c <MX_DMA2D_Init+0x6c>)
 800611e:	2200      	movs	r2, #0
 8006120:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8006122:	4b12      	ldr	r3, [pc, #72]	; (800616c <MX_DMA2D_Init+0x6c>)
 8006124:	2202      	movs	r2, #2
 8006126:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006128:	4b10      	ldr	r3, [pc, #64]	; (800616c <MX_DMA2D_Init+0x6c>)
 800612a:	2200      	movs	r2, #0
 800612c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <MX_DMA2D_Init+0x6c>)
 8006130:	2200      	movs	r2, #0
 8006132:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8006134:	4b0d      	ldr	r3, [pc, #52]	; (800616c <MX_DMA2D_Init+0x6c>)
 8006136:	2200      	movs	r2, #0
 8006138:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <MX_DMA2D_Init+0x6c>)
 800613c:	2200      	movs	r2, #0
 800613e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <MX_DMA2D_Init+0x6c>)
 8006142:	2200      	movs	r2, #0
 8006144:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006146:	4809      	ldr	r0, [pc, #36]	; (800616c <MX_DMA2D_Init+0x6c>)
 8006148:	f005 fff2 	bl	800c130 <HAL_DMA2D_Init>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8006152:	f000 fc0d 	bl	8006970 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006156:	2101      	movs	r1, #1
 8006158:	4804      	ldr	r0, [pc, #16]	; (800616c <MX_DMA2D_Init+0x6c>)
 800615a:	f006 f95d 	bl	800c418 <HAL_DMA2D_ConfigLayer>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8006164:	f000 fc04 	bl	8006970 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8006168:	bf00      	nop
 800616a:	bd80      	pop	{r7, pc}
 800616c:	2400aea8 	.word	0x2400aea8
 8006170:	52001000 	.word	0x52001000

08006174 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8006178:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <MX_I2C4_Init+0x74>)
 800617a:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <MX_I2C4_Init+0x78>)
 800617c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 800617e:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <MX_I2C4_Init+0x74>)
 8006180:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <MX_I2C4_Init+0x7c>)
 8006182:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8006184:	4b18      	ldr	r3, [pc, #96]	; (80061e8 <MX_I2C4_Init+0x74>)
 8006186:	2200      	movs	r2, #0
 8006188:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800618a:	4b17      	ldr	r3, [pc, #92]	; (80061e8 <MX_I2C4_Init+0x74>)
 800618c:	2201      	movs	r2, #1
 800618e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006190:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <MX_I2C4_Init+0x74>)
 8006192:	2200      	movs	r2, #0
 8006194:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8006196:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <MX_I2C4_Init+0x74>)
 8006198:	2200      	movs	r2, #0
 800619a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800619c:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <MX_I2C4_Init+0x74>)
 800619e:	2200      	movs	r2, #0
 80061a0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061a2:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <MX_I2C4_Init+0x74>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <MX_I2C4_Init+0x74>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80061ae:	480e      	ldr	r0, [pc, #56]	; (80061e8 <MX_I2C4_Init+0x74>)
 80061b0:	f006 fd0a 	bl	800cbc8 <HAL_I2C_Init>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80061ba:	f000 fbd9 	bl	8006970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80061be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061c2:	4809      	ldr	r0, [pc, #36]	; (80061e8 <MX_I2C4_Init+0x74>)
 80061c4:	f007 fac0 	bl	800d748 <HAL_I2CEx_ConfigAnalogFilter>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80061ce:	f000 fbcf 	bl	8006970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80061d2:	2100      	movs	r1, #0
 80061d4:	4804      	ldr	r0, [pc, #16]	; (80061e8 <MX_I2C4_Init+0x74>)
 80061d6:	f007 fb02 	bl	800d7de <HAL_I2CEx_ConfigDigitalFilter>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 80061e0:	f000 fbc6 	bl	8006970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80061e4:	bf00      	nop
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	2400af10 	.word	0x2400af10
 80061ec:	58001c00 	.word	0x58001c00
 80061f0:	30808bd0 	.word	0x30808bd0

080061f4 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 80061f8:	4b06      	ldr	r3, [pc, #24]	; (8006214 <MX_JPEG_Init+0x20>)
 80061fa:	4a07      	ldr	r2, [pc, #28]	; (8006218 <MX_JPEG_Init+0x24>)
 80061fc:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 80061fe:	4805      	ldr	r0, [pc, #20]	; (8006214 <MX_JPEG_Init+0x20>)
 8006200:	f007 fb3a 	bl	800d878 <HAL_JPEG_Init>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 800620a:	f000 fbb1 	bl	8006970 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	2400af64 	.word	0x2400af64
 8006218:	52003000 	.word	0x52003000

0800621c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08e      	sub	sp, #56	; 0x38
 8006220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8006222:	1d3b      	adds	r3, r7, #4
 8006224:	2234      	movs	r2, #52	; 0x34
 8006226:	2100      	movs	r1, #0
 8006228:	4618      	mov	r0, r3
 800622a:	f021 faa9 	bl	8027780 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800622e:	4b3a      	ldr	r3, [pc, #232]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006230:	4a3a      	ldr	r2, [pc, #232]	; (800631c <MX_LTDC_Init+0x100>)
 8006232:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006234:	4b38      	ldr	r3, [pc, #224]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006236:	2200      	movs	r2, #0
 8006238:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800623a:	4b37      	ldr	r3, [pc, #220]	; (8006318 <MX_LTDC_Init+0xfc>)
 800623c:	2200      	movs	r2, #0
 800623e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006240:	4b35      	ldr	r3, [pc, #212]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006242:	2200      	movs	r2, #0
 8006244:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006246:	4b34      	ldr	r3, [pc, #208]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006248:	2200      	movs	r2, #0
 800624a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800624c:	4b32      	ldr	r3, [pc, #200]	; (8006318 <MX_LTDC_Init+0xfc>)
 800624e:	2228      	movs	r2, #40	; 0x28
 8006250:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8006252:	4b31      	ldr	r3, [pc, #196]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006254:	2209      	movs	r2, #9
 8006256:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8006258:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <MX_LTDC_Init+0xfc>)
 800625a:	222a      	movs	r2, #42	; 0x2a
 800625c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800625e:	4b2e      	ldr	r3, [pc, #184]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006260:	220b      	movs	r2, #11
 8006262:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8006264:	4b2c      	ldr	r3, [pc, #176]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006266:	f240 220a 	movw	r2, #522	; 0x20a
 800626a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800626c:	4b2a      	ldr	r3, [pc, #168]	; (8006318 <MX_LTDC_Init+0xfc>)
 800626e:	f240 121b 	movw	r2, #283	; 0x11b
 8006272:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8006274:	4b28      	ldr	r3, [pc, #160]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006276:	f240 222a 	movw	r2, #554	; 0x22a
 800627a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800627c:	4b26      	ldr	r3, [pc, #152]	; (8006318 <MX_LTDC_Init+0xfc>)
 800627e:	f240 121d 	movw	r2, #285	; 0x11d
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006284:	4b24      	ldr	r3, [pc, #144]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800628c:	4b22      	ldr	r3, [pc, #136]	; (8006318 <MX_LTDC_Init+0xfc>)
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006294:	4b20      	ldr	r3, [pc, #128]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800629c:	481e      	ldr	r0, [pc, #120]	; (8006318 <MX_LTDC_Init+0xfc>)
 800629e:	f009 fa5b 	bl	800f758 <HAL_LTDC_Init>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80062a8:	f000 fb62 	bl	8006970 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80062b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80062b4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80062ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062be:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80062c4:	23ff      	movs	r3, #255	; 0xff
 80062c6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80062c8:	2300      	movs	r3, #0
 80062ca:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80062cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062d0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80062d2:	2305      	movs	r3, #5
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80062d6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80062da:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80062dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80062e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062e6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 80062e8:	23ff      	movs	r3, #255	; 0xff
 80062ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	2200      	movs	r2, #0
 80062fe:	4619      	mov	r1, r3
 8006300:	4805      	ldr	r0, [pc, #20]	; (8006318 <MX_LTDC_Init+0xfc>)
 8006302:	f009 fbb1 	bl	800fa68 <HAL_LTDC_ConfigLayer>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800630c:	f000 fb30 	bl	8006970 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006310:	bf00      	nop
 8006312:	3738      	adds	r7, #56	; 0x38
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	2400b094 	.word	0x2400b094
 800631c:	50001000 	.word	0x50001000

08006320 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8006326:	4b2b      	ldr	r3, [pc, #172]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006328:	4a2b      	ldr	r2, [pc, #172]	; (80063d8 <MX_OCTOSPI1_Init+0xb8>)
 800632a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800632c:	4b29      	ldr	r3, [pc, #164]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 800632e:	2201      	movs	r2, #1
 8006330:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8006332:	4b28      	ldr	r3, [pc, #160]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006334:	2200      	movs	r2, #0
 8006336:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8006338:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 800633a:	2200      	movs	r2, #0
 800633c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 800633e:	4b25      	ldr	r3, [pc, #148]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006340:	221a      	movs	r2, #26
 8006342:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8006344:	4b23      	ldr	r3, [pc, #140]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006346:	2202      	movs	r2, #2
 8006348:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800634a:	4b22      	ldr	r3, [pc, #136]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 800634c:	2200      	movs	r2, #0
 800634e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8006350:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006352:	2200      	movs	r2, #0
 8006354:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8006356:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006358:	2200      	movs	r2, #0
 800635a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 800635c:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 800635e:	2203      	movs	r2, #3
 8006360:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8006362:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006364:	2200      	movs	r2, #0
 8006366:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8006368:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 800636a:	2200      	movs	r2, #0
 800636c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800636e:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8006374:	4b17      	ldr	r3, [pc, #92]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006376:	2208      	movs	r2, #8
 8006378:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 800637a:	4b16      	ldr	r3, [pc, #88]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 800637c:	2200      	movs	r2, #0
 800637e:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8006380:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006382:	2200      	movs	r2, #0
 8006384:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8006386:	4813      	ldr	r0, [pc, #76]	; (80063d4 <MX_OCTOSPI1_Init+0xb4>)
 8006388:	f00a f97c 	bl	8010684 <HAL_OSPI_Init>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 8006392:	f000 faed 	bl	8006970 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8006396:	2301      	movs	r3, #1
 8006398:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 800639a:	2301      	movs	r3, #1
 800639c:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 800639e:	2000      	movs	r0, #0
 80063a0:	f004 fb52 	bl	800aa48 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 80063a4:	463b      	mov	r3, r7
 80063a6:	4619      	mov	r1, r3
 80063a8:	2000      	movs	r0, #0
 80063aa:	f004 fac3 	bl	800a934 <BSP_OSPI_NOR_Init>
 80063ae:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80063b6:	f000 fadb 	bl	8006970 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 80063ba:	2000      	movs	r0, #0
 80063bc:	f004 fbe0 	bl	800ab80 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 80063c0:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 80063c8:	f000 fad2 	bl	8006970 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	2400b13c 	.word	0x2400b13c
 80063d8:	52005000 	.word	0x52005000

080063dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08e      	sub	sp, #56	; 0x38
 80063e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	605a      	str	r2, [r3, #4]
 80063ec:	609a      	str	r2, [r3, #8]
 80063ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063f0:	f107 031c 	add.w	r3, r7, #28
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	605a      	str	r2, [r3, #4]
 80063fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063fc:	463b      	mov	r3, r7
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	609a      	str	r2, [r3, #8]
 8006406:	60da      	str	r2, [r3, #12]
 8006408:	611a      	str	r2, [r3, #16]
 800640a:	615a      	str	r2, [r3, #20]
 800640c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800640e:	4b2f      	ldr	r3, [pc, #188]	; (80064cc <MX_TIM5_Init+0xf0>)
 8006410:	4a2f      	ldr	r2, [pc, #188]	; (80064d0 <MX_TIM5_Init+0xf4>)
 8006412:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 139;
 8006414:	4b2d      	ldr	r3, [pc, #180]	; (80064cc <MX_TIM5_Init+0xf0>)
 8006416:	228b      	movs	r2, #139	; 0x8b
 8006418:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800641a:	4b2c      	ldr	r3, [pc, #176]	; (80064cc <MX_TIM5_Init+0xf0>)
 800641c:	2200      	movs	r2, #0
 800641e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8006420:	4b2a      	ldr	r3, [pc, #168]	; (80064cc <MX_TIM5_Init+0xf0>)
 8006422:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006426:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006428:	4b28      	ldr	r3, [pc, #160]	; (80064cc <MX_TIM5_Init+0xf0>)
 800642a:	2200      	movs	r2, #0
 800642c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800642e:	4b27      	ldr	r3, [pc, #156]	; (80064cc <MX_TIM5_Init+0xf0>)
 8006430:	2200      	movs	r2, #0
 8006432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8006434:	4825      	ldr	r0, [pc, #148]	; (80064cc <MX_TIM5_Init+0xf0>)
 8006436:	f00d fc9a 	bl	8013d6e <HAL_TIM_Base_Init>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8006440:	f000 fa96 	bl	8006970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800644a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800644e:	4619      	mov	r1, r3
 8006450:	481e      	ldr	r0, [pc, #120]	; (80064cc <MX_TIM5_Init+0xf0>)
 8006452:	f00e f8ff 	bl	8014654 <HAL_TIM_ConfigClockSource>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800645c:	f000 fa88 	bl	8006970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8006460:	481a      	ldr	r0, [pc, #104]	; (80064cc <MX_TIM5_Init+0xf0>)
 8006462:	f00d fd53 	bl	8013f0c <HAL_TIM_PWM_Init>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800646c:	f000 fa80 	bl	8006970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006470:	2300      	movs	r3, #0
 8006472:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006474:	2300      	movs	r3, #0
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006478:	f107 031c 	add.w	r3, r7, #28
 800647c:	4619      	mov	r1, r3
 800647e:	4813      	ldr	r0, [pc, #76]	; (80064cc <MX_TIM5_Init+0xf0>)
 8006480:	f00e fe3c 	bl	80150fc <HAL_TIMEx_MasterConfigSynchronization>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800648a:	f000 fa71 	bl	8006970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800648e:	2360      	movs	r3, #96	; 0x60
 8006490:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8006492:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006496:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006498:	2300      	movs	r3, #0
 800649a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064a0:	463b      	mov	r3, r7
 80064a2:	2200      	movs	r2, #0
 80064a4:	4619      	mov	r1, r3
 80064a6:	4809      	ldr	r0, [pc, #36]	; (80064cc <MX_TIM5_Init+0xf0>)
 80064a8:	f00d ffc0 	bl	801442c <HAL_TIM_PWM_ConfigChannel>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 80064b2:	f000 fa5d 	bl	8006970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 80064b6:	2100      	movs	r1, #0
 80064b8:	4804      	ldr	r0, [pc, #16]	; (80064cc <MX_TIM5_Init+0xf0>)
 80064ba:	f00d fd89 	bl	8013fd0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80064be:	4803      	ldr	r0, [pc, #12]	; (80064cc <MX_TIM5_Init+0xf0>)
 80064c0:	f000 fd8e 	bl	8006fe0 <HAL_TIM_MspPostInit>

}
 80064c4:	bf00      	nop
 80064c6:	3738      	adds	r7, #56	; 0x38
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	2400b198 	.word	0x2400b198
 80064d0:	40000c00 	.word	0x40000c00

080064d4 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 80064da:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <MX_MDMA_Init+0x3c>)
 80064dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80064e0:	4a0b      	ldr	r2, [pc, #44]	; (8006510 <MX_MDMA_Init+0x3c>)
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80064ea:	4b09      	ldr	r3, [pc, #36]	; (8006510 <MX_MDMA_Init+0x3c>)
 80064ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	607b      	str	r3, [r7, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80064f8:	2200      	movs	r2, #0
 80064fa:	2105      	movs	r1, #5
 80064fc:	207a      	movs	r0, #122	; 0x7a
 80064fe:	f005 fc73 	bl	800bde8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8006502:	207a      	movs	r0, #122	; 0x7a
 8006504:	f005 fc8a 	bl	800be1c <HAL_NVIC_EnableIRQ>

}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	58024400 	.word	0x58024400

08006514 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800651a:	1d3b      	adds	r3, r7, #4
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	609a      	str	r2, [r3, #8]
 8006524:	60da      	str	r2, [r3, #12]
 8006526:	611a      	str	r2, [r3, #16]
 8006528:	615a      	str	r2, [r3, #20]
 800652a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800652c:	4b20      	ldr	r3, [pc, #128]	; (80065b0 <MX_FMC_Init+0x9c>)
 800652e:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <MX_FMC_Init+0xa0>)
 8006530:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006532:	4b1f      	ldr	r3, [pc, #124]	; (80065b0 <MX_FMC_Init+0x9c>)
 8006534:	2201      	movs	r2, #1
 8006536:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8006538:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <MX_FMC_Init+0x9c>)
 800653a:	2201      	movs	r2, #1
 800653c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800653e:	4b1c      	ldr	r3, [pc, #112]	; (80065b0 <MX_FMC_Init+0x9c>)
 8006540:	2204      	movs	r2, #4
 8006542:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006544:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <MX_FMC_Init+0x9c>)
 8006546:	2210      	movs	r2, #16
 8006548:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <MX_FMC_Init+0x9c>)
 800654c:	2240      	movs	r2, #64	; 0x40
 800654e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8006550:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <MX_FMC_Init+0x9c>)
 8006552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006556:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <MX_FMC_Init+0x9c>)
 800655a:	2200      	movs	r2, #0
 800655c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800655e:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <MX_FMC_Init+0x9c>)
 8006560:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006564:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8006566:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <MX_FMC_Init+0x9c>)
 8006568:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800656c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800656e:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <MX_FMC_Init+0x9c>)
 8006570:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006574:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006576:	2302      	movs	r3, #2
 8006578:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800657a:	2307      	movs	r3, #7
 800657c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800657e:	2304      	movs	r3, #4
 8006580:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8006582:	2307      	movs	r3, #7
 8006584:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8006586:	2303      	movs	r3, #3
 8006588:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800658a:	2302      	movs	r3, #2
 800658c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800658e:	2302      	movs	r3, #2
 8006590:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006592:	1d3b      	adds	r3, r7, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4806      	ldr	r0, [pc, #24]	; (80065b0 <MX_FMC_Init+0x9c>)
 8006598:	f00d fb50 	bl	8013c3c <HAL_SDRAM_Init>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80065a2:	f000 f9e5 	bl	8006970 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80065a6:	bf00      	nop
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	2400b1e4 	.word	0x2400b1e4
 80065b4:	52004140 	.word	0x52004140

080065b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08e      	sub	sp, #56	; 0x38
 80065bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	605a      	str	r2, [r3, #4]
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	60da      	str	r2, [r3, #12]
 80065cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80065ce:	4b80      	ldr	r3, [pc, #512]	; (80067d0 <MX_GPIO_Init+0x218>)
 80065d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065d4:	4a7e      	ldr	r2, [pc, #504]	; (80067d0 <MX_GPIO_Init+0x218>)
 80065d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065de:	4b7c      	ldr	r3, [pc, #496]	; (80067d0 <MX_GPIO_Init+0x218>)
 80065e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e8:	623b      	str	r3, [r7, #32]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80065ec:	4b78      	ldr	r3, [pc, #480]	; (80067d0 <MX_GPIO_Init+0x218>)
 80065ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065f2:	4a77      	ldr	r2, [pc, #476]	; (80067d0 <MX_GPIO_Init+0x218>)
 80065f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065fc:	4b74      	ldr	r3, [pc, #464]	; (80067d0 <MX_GPIO_Init+0x218>)
 80065fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800660a:	4b71      	ldr	r3, [pc, #452]	; (80067d0 <MX_GPIO_Init+0x218>)
 800660c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006610:	4a6f      	ldr	r2, [pc, #444]	; (80067d0 <MX_GPIO_Init+0x218>)
 8006612:	f043 0308 	orr.w	r3, r3, #8
 8006616:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800661a:	4b6d      	ldr	r3, [pc, #436]	; (80067d0 <MX_GPIO_Init+0x218>)
 800661c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006628:	4b69      	ldr	r3, [pc, #420]	; (80067d0 <MX_GPIO_Init+0x218>)
 800662a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800662e:	4a68      	ldr	r2, [pc, #416]	; (80067d0 <MX_GPIO_Init+0x218>)
 8006630:	f043 0310 	orr.w	r3, r3, #16
 8006634:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006638:	4b65      	ldr	r3, [pc, #404]	; (80067d0 <MX_GPIO_Init+0x218>)
 800663a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006646:	4b62      	ldr	r3, [pc, #392]	; (80067d0 <MX_GPIO_Init+0x218>)
 8006648:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800664c:	4a60      	ldr	r2, [pc, #384]	; (80067d0 <MX_GPIO_Init+0x218>)
 800664e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006652:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006656:	4b5e      	ldr	r3, [pc, #376]	; (80067d0 <MX_GPIO_Init+0x218>)
 8006658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800665c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006664:	4b5a      	ldr	r3, [pc, #360]	; (80067d0 <MX_GPIO_Init+0x218>)
 8006666:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800666a:	4a59      	ldr	r2, [pc, #356]	; (80067d0 <MX_GPIO_Init+0x218>)
 800666c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006670:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006674:	4b56      	ldr	r3, [pc, #344]	; (80067d0 <MX_GPIO_Init+0x218>)
 8006676:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800667a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006682:	4b53      	ldr	r3, [pc, #332]	; (80067d0 <MX_GPIO_Init+0x218>)
 8006684:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006688:	4a51      	ldr	r2, [pc, #324]	; (80067d0 <MX_GPIO_Init+0x218>)
 800668a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800668e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006692:	4b4f      	ldr	r3, [pc, #316]	; (80067d0 <MX_GPIO_Init+0x218>)
 8006694:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80066a0:	4b4b      	ldr	r3, [pc, #300]	; (80067d0 <MX_GPIO_Init+0x218>)
 80066a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80066a6:	4a4a      	ldr	r2, [pc, #296]	; (80067d0 <MX_GPIO_Init+0x218>)
 80066a8:	f043 0320 	orr.w	r3, r3, #32
 80066ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80066b0:	4b47      	ldr	r3, [pc, #284]	; (80067d0 <MX_GPIO_Init+0x218>)
 80066b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066be:	4b44      	ldr	r3, [pc, #272]	; (80067d0 <MX_GPIO_Init+0x218>)
 80066c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80066c4:	4a42      	ldr	r2, [pc, #264]	; (80067d0 <MX_GPIO_Init+0x218>)
 80066c6:	f043 0301 	orr.w	r3, r3, #1
 80066ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80066ce:	4b40      	ldr	r3, [pc, #256]	; (80067d0 <MX_GPIO_Init+0x218>)
 80066d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 80066dc:	2201      	movs	r2, #1
 80066de:	f640 0104 	movw	r1, #2052	; 0x804
 80066e2:	483c      	ldr	r0, [pc, #240]	; (80067d4 <MX_GPIO_Init+0x21c>)
 80066e4:	f006 fa18 	bl	800cb18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80066e8:	2200      	movs	r2, #0
 80066ea:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 80066ee:	483a      	ldr	r0, [pc, #232]	; (80067d8 <MX_GPIO_Init+0x220>)
 80066f0:	f006 fa12 	bl	800cb18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80066f4:	2200      	movs	r2, #0
 80066f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066fa:	4838      	ldr	r0, [pc, #224]	; (80067dc <MX_GPIO_Init+0x224>)
 80066fc:	f006 fa0c 	bl	800cb18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8006700:	2200      	movs	r2, #0
 8006702:	2106      	movs	r1, #6
 8006704:	4836      	ldr	r0, [pc, #216]	; (80067e0 <MX_GPIO_Init+0x228>)
 8006706:	f006 fa07 	bl	800cb18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800670a:	f640 0304 	movw	r3, #2052	; 0x804
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006710:	2301      	movs	r3, #1
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006714:	2300      	movs	r3, #0
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006718:	2300      	movs	r3, #0
 800671a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800671c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006720:	4619      	mov	r1, r3
 8006722:	482c      	ldr	r0, [pc, #176]	; (80067d4 <MX_GPIO_Init+0x21c>)
 8006724:	f005 ff26 	bl	800c574 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8006728:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800672e:	2301      	movs	r3, #1
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006732:	2300      	movs	r3, #0
 8006734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006736:	2303      	movs	r3, #3
 8006738:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800673a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673e:	4619      	mov	r1, r3
 8006740:	4825      	ldr	r0, [pc, #148]	; (80067d8 <MX_GPIO_Init+0x220>)
 8006742:	f005 ff17 	bl	800c574 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8006746:	f44f 7300 	mov.w	r3, #512	; 0x200
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800674c:	2301      	movs	r3, #1
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006750:	2300      	movs	r3, #0
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006754:	2303      	movs	r3, #3
 8006756:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8006758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800675c:	4619      	mov	r1, r3
 800675e:	481f      	ldr	r0, [pc, #124]	; (80067dc <MX_GPIO_Init+0x224>)
 8006760:	f005 ff08 	bl	800c574 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8006764:	2304      	movs	r3, #4
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006768:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800676e:	2301      	movs	r3, #1
 8006770:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8006772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006776:	4619      	mov	r1, r3
 8006778:	4817      	ldr	r0, [pc, #92]	; (80067d8 <MX_GPIO_Init+0x220>)
 800677a:	f005 fefb 	bl	800c574 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800677e:	2302      	movs	r3, #2
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006782:	2301      	movs	r3, #1
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006786:	2300      	movs	r3, #0
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800678a:	2300      	movs	r3, #0
 800678c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800678e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006792:	4619      	mov	r1, r3
 8006794:	4812      	ldr	r0, [pc, #72]	; (80067e0 <MX_GPIO_Init+0x228>)
 8006796:	f005 feed 	bl	800c574 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 800679a:	2304      	movs	r3, #4
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800679e:	2301      	movs	r3, #1
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067a2:	2301      	movs	r3, #1
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067a6:	2300      	movs	r3, #0
 80067a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 80067aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ae:	4619      	mov	r1, r3
 80067b0:	480b      	ldr	r0, [pc, #44]	; (80067e0 <MX_GPIO_Init+0x228>)
 80067b2:	f005 fedf 	bl	800c574 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80067b6:	2200      	movs	r2, #0
 80067b8:	2105      	movs	r1, #5
 80067ba:	2008      	movs	r0, #8
 80067bc:	f005 fb14 	bl	800bde8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80067c0:	2008      	movs	r0, #8
 80067c2:	f005 fb2b 	bl	800be1c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80067c6:	bf00      	nop
 80067c8:	3738      	adds	r7, #56	; 0x38
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	58024400 	.word	0x58024400
 80067d4:	58021800 	.word	0x58021800
 80067d8:	58021c00 	.word	0x58021c00
 80067dc:	58022000 	.word	0x58022000
 80067e0:	58020000 	.word	0x58020000

080067e4 <SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2208      	movs	r2, #8
 80067fc:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2201      	movs	r2, #1
 8006802:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2200      	movs	r2, #0
 8006808:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800680a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f00d fa4f 	bl	8013cb4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006816:	2001      	movs	r0, #1
 8006818:	f005 f9e6 	bl	800bbe8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2202      	movs	r2, #2
 8006820:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2208      	movs	r2, #8
 8006826:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2201      	movs	r2, #1
 800682c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2200      	movs	r2, #0
 8006832:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f00d fa3a 	bl	8013cb4 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2203      	movs	r2, #3
 8006844:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2208      	movs	r2, #8
 800684a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2208      	movs	r2, #8
 8006850:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2200      	movs	r2, #0
 8006856:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f00d fa28 	bl	8013cb4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8006864:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006868:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2204      	movs	r2, #4
 800686e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2208      	movs	r2, #8
 8006874:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2201      	movs	r2, #1
 800687a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f00d fa13 	bl	8013cb4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT); 
 800688e:	f240 6103 	movw	r1, #1539	; 0x603
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f00d fa43 	bl	8013d1e <HAL_SDRAM_ProgramRefreshRate>

}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80068a8:	2064      	movs	r0, #100	; 0x64
 80068aa:	f00e fef5 	bl	8015698 <osDelay>
 80068ae:	e7fb      	b.n	80068a8 <StartDefaultTask+0x8>

080068b0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80068b6:	463b      	mov	r3, r7
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	605a      	str	r2, [r3, #4]
 80068be:	609a      	str	r2, [r3, #8]
 80068c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80068c2:	f005 fac7 	bl	800be54 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80068c6:	2301      	movs	r3, #1
 80068c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80068ce:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80068d2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80068d4:	231b      	movs	r3, #27
 80068d6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80068d8:	2300      	movs	r3, #0
 80068da:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80068dc:	2300      	movs	r3, #0
 80068de:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80068e0:	2300      	movs	r3, #0
 80068e2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80068ec:	2300      	movs	r3, #0
 80068ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80068f4:	463b      	mov	r3, r7
 80068f6:	4618      	mov	r0, r3
 80068f8:	f005 fae4 	bl	800bec4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80068fc:	2301      	movs	r3, #1
 80068fe:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8006900:	2319      	movs	r3, #25
 8006902:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8006904:	2303      	movs	r3, #3
 8006906:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8006908:	2301      	movs	r3, #1
 800690a:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800690c:	463b      	mov	r3, r7
 800690e:	4618      	mov	r0, r3
 8006910:	f005 fad8 	bl	800bec4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8006914:	2302      	movs	r3, #2
 8006916:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8006918:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800691c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800691e:	2313      	movs	r3, #19
 8006920:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006922:	463b      	mov	r3, r7
 8006924:	4618      	mov	r0, r3
 8006926:	f005 facd 	bl	800bec4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800692a:	2303      	movs	r3, #3
 800692c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800692e:	2311      	movs	r3, #17
 8006930:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006936:	463b      	mov	r3, r7
 8006938:	4618      	mov	r0, r3
 800693a:	f005 fac3 	bl	800bec4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800693e:	2004      	movs	r0, #4
 8006940:	f005 faa0 	bl	800be84 <HAL_MPU_Enable>

}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a04      	ldr	r2, [pc, #16]	; (800696c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d101      	bne.n	8006962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800695e:	f005 f923 	bl	800bba8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40001000 	.word	0x40001000

08006970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <HAL_MspInit+0x38>)
 8006988:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800698c:	4a0a      	ldr	r2, [pc, #40]	; (80069b8 <HAL_MspInit+0x38>)
 800698e:	f043 0302 	orr.w	r3, r3, #2
 8006992:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006996:	4b08      	ldr	r3, [pc, #32]	; (80069b8 <HAL_MspInit+0x38>)
 8006998:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80069a4:	2200      	movs	r2, #0
 80069a6:	210f      	movs	r1, #15
 80069a8:	f06f 0001 	mvn.w	r0, #1
 80069ac:	f005 fa1c 	bl	800bde8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	58024400 	.word	0x58024400

080069bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a0b      	ldr	r2, [pc, #44]	; (80069f8 <HAL_CRC_MspInit+0x3c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d10e      	bne.n	80069ec <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80069ce:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <HAL_CRC_MspInit+0x40>)
 80069d0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80069d4:	4a09      	ldr	r2, [pc, #36]	; (80069fc <HAL_CRC_MspInit+0x40>)
 80069d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069da:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <HAL_CRC_MspInit+0x40>)
 80069e0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80069e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40023000 	.word	0x40023000
 80069fc:	58024400 	.word	0x58024400

08006a00 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a0e      	ldr	r2, [pc, #56]	; (8006a48 <HAL_DMA2D_MspInit+0x48>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d116      	bne.n	8006a40 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006a12:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <HAL_DMA2D_MspInit+0x4c>)
 8006a14:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006a18:	4a0c      	ldr	r2, [pc, #48]	; (8006a4c <HAL_DMA2D_MspInit+0x4c>)
 8006a1a:	f043 0310 	orr.w	r3, r3, #16
 8006a1e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006a22:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <HAL_DMA2D_MspInit+0x4c>)
 8006a24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8006a30:	2200      	movs	r2, #0
 8006a32:	2105      	movs	r1, #5
 8006a34:	205a      	movs	r0, #90	; 0x5a
 8006a36:	f005 f9d7 	bl	800bde8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006a3a:	205a      	movs	r0, #90	; 0x5a
 8006a3c:	f005 f9ee 	bl	800be1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006a40:	bf00      	nop
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	52001000 	.word	0x52001000
 8006a4c:	58024400 	.word	0x58024400

08006a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b0ba      	sub	sp, #232	; 0xe8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	609a      	str	r2, [r3, #8]
 8006a64:	60da      	str	r2, [r3, #12]
 8006a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006a68:	f107 0310 	add.w	r3, r7, #16
 8006a6c:	22c0      	movs	r2, #192	; 0xc0
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f020 fe85 	bl	8027780 <memset>
  if(hi2c->Instance==I2C4)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a27      	ldr	r2, [pc, #156]	; (8006b18 <HAL_I2C_MspInit+0xc8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d146      	bne.n	8006b0e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8006a80:	f04f 0210 	mov.w	r2, #16
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a92:	f107 0310 	add.w	r3, r7, #16
 8006a96:	4618      	mov	r0, r3
 8006a98:	f00b fdae 	bl	80125f8 <HAL_RCCEx_PeriphCLKConfig>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8006aa2:	f7ff ff65 	bl	8006970 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006aa6:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <HAL_I2C_MspInit+0xcc>)
 8006aa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006aac:	4a1b      	ldr	r2, [pc, #108]	; (8006b1c <HAL_I2C_MspInit+0xcc>)
 8006aae:	f043 0308 	orr.w	r3, r3, #8
 8006ab2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006ab6:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <HAL_I2C_MspInit+0xcc>)
 8006ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8006ac4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006acc:	2312      	movs	r3, #18
 8006ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006ade:	2304      	movs	r3, #4
 8006ae0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ae4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006ae8:	4619      	mov	r1, r3
 8006aea:	480d      	ldr	r0, [pc, #52]	; (8006b20 <HAL_I2C_MspInit+0xd0>)
 8006aec:	f005 fd42 	bl	800c574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006af0:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <HAL_I2C_MspInit+0xcc>)
 8006af2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006af6:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <HAL_I2C_MspInit+0xcc>)
 8006af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <HAL_I2C_MspInit+0xcc>)
 8006b02:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	60bb      	str	r3, [r7, #8]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006b0e:	bf00      	nop
 8006b10:	37e8      	adds	r7, #232	; 0xe8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	58001c00 	.word	0x58001c00
 8006b1c:	58024400 	.word	0x58024400
 8006b20:	58020c00 	.word	0x58020c00

08006b24 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a0c      	ldr	r2, [pc, #48]	; (8006b64 <HAL_I2C_MspDeInit+0x40>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d111      	bne.n	8006b5a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <HAL_I2C_MspDeInit+0x44>)
 8006b38:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006b3c:	4a0a      	ldr	r2, [pc, #40]	; (8006b68 <HAL_I2C_MspDeInit+0x44>)
 8006b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b42:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8006b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b4a:	4808      	ldr	r0, [pc, #32]	; (8006b6c <HAL_I2C_MspDeInit+0x48>)
 8006b4c:	f005 fec2 	bl	800c8d4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8006b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b54:	4805      	ldr	r0, [pc, #20]	; (8006b6c <HAL_I2C_MspDeInit+0x48>)
 8006b56:	f005 febd 	bl	800c8d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	58001c00 	.word	0x58001c00
 8006b68:	58024400 	.word	0x58024400
 8006b6c:	58020c00 	.word	0x58020c00

08006b70 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a57      	ldr	r2, [pc, #348]	; (8006cdc <HAL_JPEG_MspInit+0x16c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	f040 80a7 	bne.w	8006cd2 <HAL_JPEG_MspInit+0x162>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8006b84:	4b56      	ldr	r3, [pc, #344]	; (8006ce0 <HAL_JPEG_MspInit+0x170>)
 8006b86:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006b8a:	4a55      	ldr	r2, [pc, #340]	; (8006ce0 <HAL_JPEG_MspInit+0x170>)
 8006b8c:	f043 0320 	orr.w	r3, r3, #32
 8006b90:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006b94:	4b52      	ldr	r3, [pc, #328]	; (8006ce0 <HAL_JPEG_MspInit+0x170>)
 8006b96:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8006ba2:	4b50      	ldr	r3, [pc, #320]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006ba4:	4a50      	ldr	r2, [pc, #320]	; (8006ce8 <HAL_JPEG_MspInit+0x178>)
 8006ba6:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8006ba8:	4b4e      	ldr	r3, [pc, #312]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006baa:	2211      	movs	r2, #17
 8006bac:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8006bae:	4b4d      	ldr	r3, [pc, #308]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8006bb4:	4b4b      	ldr	r3, [pc, #300]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bb6:	2280      	movs	r2, #128	; 0x80
 8006bb8:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006bba:	4b4a      	ldr	r3, [pc, #296]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8006bc0:	4b48      	ldr	r3, [pc, #288]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8006bc6:	4b47      	ldr	r3, [pc, #284]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8006bcc:	4b45      	ldr	r3, [pc, #276]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8006bd2:	4b44      	ldr	r3, [pc, #272]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bd4:	2280      	movs	r2, #128	; 0x80
 8006bd6:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8006bd8:	4b42      	ldr	r3, [pc, #264]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8006be0:	4b40      	ldr	r3, [pc, #256]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006be2:	2220      	movs	r2, #32
 8006be4:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 8006be6:	4b3f      	ldr	r3, [pc, #252]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006be8:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8006bec:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8006bee:	4b3d      	ldr	r3, [pc, #244]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bf4:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8006bf6:	4b3b      	ldr	r3, [pc, #236]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8006bfc:	4b39      	ldr	r3, [pc, #228]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8006c02:	4838      	ldr	r0, [pc, #224]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006c04:	f009 f940 	bl	800fe88 <HAL_MDMA_Init>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <HAL_JPEG_MspInit+0xa2>
    {
      Error_Handler();
 8006c0e:	f7ff feaf 	bl	8006970 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8006c12:	2200      	movs	r2, #0
 8006c14:	2100      	movs	r1, #0
 8006c16:	4833      	ldr	r0, [pc, #204]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006c18:	f009 f982 	bl	800ff20 <HAL_MDMA_ConfigPostRequestMask>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_JPEG_MspInit+0xb6>
    {
      Error_Handler();
 8006c22:	f7ff fea5 	bl	8006970 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2e      	ldr	r2, [pc, #184]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <HAL_JPEG_MspInit+0x174>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 8006c32:	4b2e      	ldr	r3, [pc, #184]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c34:	4a2e      	ldr	r2, [pc, #184]	; (8006cf0 <HAL_JPEG_MspInit+0x180>)
 8006c36:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8006c38:	4b2c      	ldr	r3, [pc, #176]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c3a:	2213      	movs	r2, #19
 8006c3c:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8006c3e:	4b2b      	ldr	r3, [pc, #172]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8006c44:	4b29      	ldr	r3, [pc, #164]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c46:	22c0      	movs	r2, #192	; 0xc0
 8006c48:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006c4a:	4b28      	ldr	r3, [pc, #160]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8006c50:	4b26      	ldr	r3, [pc, #152]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8006c56:	4b25      	ldr	r3, [pc, #148]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c58:	2208      	movs	r2, #8
 8006c5a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8006c5c:	4b23      	ldr	r3, [pc, #140]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c5e:	2220      	movs	r2, #32
 8006c60:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8006c62:	4b22      	ldr	r3, [pc, #136]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8006c68:	4b20      	ldr	r3, [pc, #128]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8006c70:	4b1e      	ldr	r3, [pc, #120]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c72:	2220      	movs	r2, #32
 8006c74:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 8006c76:	4b1d      	ldr	r3, [pc, #116]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c78:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8006c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8006c7e:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c80:	f44f 3220 	mov.w	r2, #163840	; 0x28000
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
 8006c86:	4b19      	ldr	r3, [pc, #100]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8006c8c:	4b17      	ldr	r3, [pc, #92]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8006c92:	4816      	ldr	r0, [pc, #88]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006c94:	f009 f8f8 	bl	800fe88 <HAL_MDMA_Init>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_JPEG_MspInit+0x132>
    {
      Error_Handler();
 8006c9e:	f7ff fe67 	bl	8006970 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4811      	ldr	r0, [pc, #68]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006ca8:	f009 f93a 	bl	800ff20 <HAL_MDMA_ConfigPostRequestMask>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_JPEG_MspInit+0x146>
    {
      Error_Handler();
 8006cb2:	f7ff fe5d 	bl	8006970 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a0c      	ldr	r2, [pc, #48]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006cba:	635a      	str	r2, [r3, #52]	; 0x34
 8006cbc:	4a0b      	ldr	r2, [pc, #44]	; (8006cec <HAL_JPEG_MspInit+0x17c>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2105      	movs	r1, #5
 8006cc6:	2079      	movs	r0, #121	; 0x79
 8006cc8:	f005 f88e 	bl	800bde8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8006ccc:	2079      	movs	r0, #121	; 0x79
 8006cce:	f005 f8a5 	bl	800be1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	52003000 	.word	0x52003000
 8006ce0:	58024400 	.word	0x58024400
 8006ce4:	2400afbc 	.word	0x2400afbc
 8006ce8:	52000200 	.word	0x52000200
 8006cec:	2400b028 	.word	0x2400b028
 8006cf0:	520001c0 	.word	0x520001c0

08006cf4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b0bc      	sub	sp, #240	; 0xf0
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	605a      	str	r2, [r3, #4]
 8006d06:	609a      	str	r2, [r3, #8]
 8006d08:	60da      	str	r2, [r3, #12]
 8006d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006d0c:	f107 0318 	add.w	r3, r7, #24
 8006d10:	22c0      	movs	r2, #192	; 0xc0
 8006d12:	2100      	movs	r1, #0
 8006d14:	4618      	mov	r0, r3
 8006d16:	f020 fd33 	bl	8027780 <memset>
  if(hltdc->Instance==LTDC)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a57      	ldr	r2, [pc, #348]	; (8006e7c <HAL_LTDC_MspInit+0x188>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	f040 80a6 	bne.w	8006e72 <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006d26:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8006d32:	2318      	movs	r3, #24
 8006d34:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8006d36:	23c9      	movs	r3, #201	; 0xc9
 8006d38:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8006d42:	2315      	movs	r3, #21
 8006d44:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8006d4e:	f241 5356 	movw	r3, #5462	; 0x1556
 8006d52:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d54:	f107 0318 	add.w	r3, r7, #24
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f00b fc4d 	bl	80125f8 <HAL_RCCEx_PeriphCLKConfig>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8006d64:	f7ff fe04 	bl	8006970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006d68:	4b45      	ldr	r3, [pc, #276]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006d6a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006d6e:	4a44      	ldr	r2, [pc, #272]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006d70:	f043 0308 	orr.w	r3, r3, #8
 8006d74:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8006d78:	4b41      	ldr	r3, [pc, #260]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006d7a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8006d86:	4b3e      	ldr	r3, [pc, #248]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006d88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d8c:	4a3c      	ldr	r2, [pc, #240]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006d96:	4b3a      	ldr	r3, [pc, #232]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006d98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006da4:	4b36      	ldr	r3, [pc, #216]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006daa:	4a35      	ldr	r2, [pc, #212]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006db0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006db4:	4b32      	ldr	r3, [pc, #200]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006db6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006dc2:	4b2f      	ldr	r3, [pc, #188]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006dc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006dc8:	4a2d      	ldr	r2, [pc, #180]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006dd2:	4b2b      	ldr	r3, [pc, #172]	; (8006e80 <HAL_LTDC_MspInit+0x18c>)
 8006dd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ddc:	60bb      	str	r3, [r7, #8]
 8006dde:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8006de0:	23ff      	movs	r3, #255	; 0xff
 8006de2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de6:	2302      	movs	r3, #2
 8006de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df2:	2300      	movs	r3, #0
 8006df4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006df8:	230e      	movs	r3, #14
 8006dfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8006dfe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006e02:	4619      	mov	r1, r3
 8006e04:	481f      	ldr	r0, [pc, #124]	; (8006e84 <HAL_LTDC_MspInit+0x190>)
 8006e06:	f005 fbb5 	bl	800c574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8006e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e12:	2302      	movs	r3, #2
 8006e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006e24:	230e      	movs	r3, #14
 8006e26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8006e2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4815      	ldr	r0, [pc, #84]	; (8006e88 <HAL_LTDC_MspInit+0x194>)
 8006e32:	f005 fb9f 	bl	800c574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8006e36:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006e50:	230e      	movs	r3, #14
 8006e52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006e56:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	480b      	ldr	r0, [pc, #44]	; (8006e8c <HAL_LTDC_MspInit+0x198>)
 8006e5e:	f005 fb89 	bl	800c574 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8006e62:	2200      	movs	r2, #0
 8006e64:	2105      	movs	r1, #5
 8006e66:	2058      	movs	r0, #88	; 0x58
 8006e68:	f004 ffbe 	bl	800bde8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006e6c:	2058      	movs	r0, #88	; 0x58
 8006e6e:	f004 ffd5 	bl	800be1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006e72:	bf00      	nop
 8006e74:	37f0      	adds	r7, #240	; 0xf0
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	50001000 	.word	0x50001000
 8006e80:	58024400 	.word	0x58024400
 8006e84:	58022800 	.word	0x58022800
 8006e88:	58022400 	.word	0x58022400
 8006e8c:	58022000 	.word	0x58022000

08006e90 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b0b4      	sub	sp, #208	; 0xd0
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006e98:	f107 0310 	add.w	r3, r7, #16
 8006e9c:	22c0      	movs	r2, #192	; 0xc0
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f020 fc6d 	bl	8027780 <memset>
  if(hospi->Instance==OCTOSPI1)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a28      	ldr	r2, [pc, #160]	; (8006f4c <HAL_OSPI_MspInit+0xbc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d148      	bne.n	8006f42 <HAL_OSPI_MspInit+0xb2>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8006eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8006ebc:	2318      	movs	r3, #24
 8006ebe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 8006ec0:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8006ec4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006ece:	2302      	movs	r3, #2
 8006ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8006ede:	2320      	movs	r3, #32
 8006ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ee2:	f107 0310 	add.w	r3, r7, #16
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f00b fb86 	bl	80125f8 <HAL_RCCEx_PeriphCLKConfig>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <HAL_OSPI_MspInit+0x66>
    {
      Error_Handler();
 8006ef2:	f7ff fd3d 	bl	8006970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8006ef6:	4b16      	ldr	r3, [pc, #88]	; (8006f50 <HAL_OSPI_MspInit+0xc0>)
 8006ef8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006efc:	4a14      	ldr	r2, [pc, #80]	; (8006f50 <HAL_OSPI_MspInit+0xc0>)
 8006efe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f02:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006f06:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <HAL_OSPI_MspInit+0xc0>)
 8006f08:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8006f14:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <HAL_OSPI_MspInit+0xc0>)
 8006f16:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006f1a:	4a0d      	ldr	r2, [pc, #52]	; (8006f50 <HAL_OSPI_MspInit+0xc0>)
 8006f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f20:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006f24:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <HAL_OSPI_MspInit+0xc0>)
 8006f26:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f2e:	60bb      	str	r3, [r7, #8]
 8006f30:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8006f32:	2200      	movs	r2, #0
 8006f34:	2105      	movs	r1, #5
 8006f36:	205c      	movs	r0, #92	; 0x5c
 8006f38:	f004 ff56 	bl	800bde8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8006f3c:	205c      	movs	r0, #92	; 0x5c
 8006f3e:	f004 ff6d 	bl	800be1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8006f42:	bf00      	nop
 8006f44:	37d0      	adds	r7, #208	; 0xd0
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	52005000 	.word	0x52005000
 8006f50:	58024400 	.word	0x58024400

08006f54 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a0c      	ldr	r2, [pc, #48]	; (8006f94 <HAL_OSPI_MspDeInit+0x40>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d112      	bne.n	8006f8c <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8006f66:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <HAL_OSPI_MspDeInit+0x44>)
 8006f68:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006f6c:	4a0a      	ldr	r2, [pc, #40]	; (8006f98 <HAL_OSPI_MspDeInit+0x44>)
 8006f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f72:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8006f76:	4b08      	ldr	r3, [pc, #32]	; (8006f98 <HAL_OSPI_MspDeInit+0x44>)
 8006f78:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006f7c:	4a06      	ldr	r2, [pc, #24]	; (8006f98 <HAL_OSPI_MspDeInit+0x44>)
 8006f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f82:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8006f86:	205c      	movs	r0, #92	; 0x5c
 8006f88:	f004 ff56 	bl	800be38 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	52005000 	.word	0x52005000
 8006f98:	58024400 	.word	0x58024400

08006f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a0b      	ldr	r2, [pc, #44]	; (8006fd8 <HAL_TIM_Base_MspInit+0x3c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d10e      	bne.n	8006fcc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <HAL_TIM_Base_MspInit+0x40>)
 8006fb0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8006fb4:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <HAL_TIM_Base_MspInit+0x40>)
 8006fb6:	f043 0308 	orr.w	r3, r3, #8
 8006fba:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8006fbe:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <HAL_TIM_Base_MspInit+0x40>)
 8006fc0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006fcc:	bf00      	nop
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	58024400 	.word	0x58024400

08006fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fe8:	f107 030c 	add.w	r3, r7, #12
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	609a      	str	r2, [r3, #8]
 8006ff4:	60da      	str	r2, [r3, #12]
 8006ff6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a13      	ldr	r2, [pc, #76]	; (800704c <HAL_TIM_MspPostInit+0x6c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d11f      	bne.n	8007042 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8007002:	4b13      	ldr	r3, [pc, #76]	; (8007050 <HAL_TIM_MspPostInit+0x70>)
 8007004:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007008:	4a11      	ldr	r2, [pc, #68]	; (8007050 <HAL_TIM_MspPostInit+0x70>)
 800700a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <HAL_TIM_MspPostInit+0x70>)
 8007014:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PH10     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007024:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007026:	2302      	movs	r3, #2
 8007028:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007032:	2302      	movs	r3, #2
 8007034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007036:	f107 030c 	add.w	r3, r7, #12
 800703a:	4619      	mov	r1, r3
 800703c:	4805      	ldr	r0, [pc, #20]	; (8007054 <HAL_TIM_MspPostInit+0x74>)
 800703e:	f005 fa99 	bl	800c574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8007042:	bf00      	nop
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40000c00 	.word	0x40000c00
 8007050:	58024400 	.word	0x58024400
 8007054:	58021c00 	.word	0x58021c00

08007058 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007058:	b580      	push	{r7, lr}
 800705a:	b0b8      	sub	sp, #224	; 0xe0
 800705c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800705e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	605a      	str	r2, [r3, #4]
 8007068:	609a      	str	r2, [r3, #8]
 800706a:	60da      	str	r2, [r3, #12]
 800706c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800706e:	4b51      	ldr	r3, [pc, #324]	; (80071b4 <HAL_FMC_MspInit+0x15c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 8099 	bne.w	80071aa <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8007078:	4b4e      	ldr	r3, [pc, #312]	; (80071b4 <HAL_FMC_MspInit+0x15c>)
 800707a:	2201      	movs	r2, #1
 800707c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800707e:	f107 0308 	add.w	r3, r7, #8
 8007082:	22c0      	movs	r2, #192	; 0xc0
 8007084:	2100      	movs	r1, #0
 8007086:	4618      	mov	r0, r3
 8007088:	f020 fb7a 	bl	8027780 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800708c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8007098:	2300      	movs	r3, #0
 800709a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800709c:	f107 0308 	add.w	r3, r7, #8
 80070a0:	4618      	mov	r0, r3
 80070a2:	f00b faa9 	bl	80125f8 <HAL_RCCEx_PeriphCLKConfig>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80070ac:	f7ff fc60 	bl	8006970 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80070b0:	4b41      	ldr	r3, [pc, #260]	; (80071b8 <HAL_FMC_MspInit+0x160>)
 80070b2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80070b6:	4a40      	ldr	r2, [pc, #256]	; (80071b8 <HAL_FMC_MspInit+0x160>)
 80070b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070bc:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80070c0:	4b3d      	ldr	r3, [pc, #244]	; (80071b8 <HAL_FMC_MspInit+0x160>)
 80070c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80070c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070ca:	607b      	str	r3, [r7, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80070ce:	f248 1333 	movw	r3, #33075	; 0x8133
 80070d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d6:	2302      	movs	r3, #2
 80070d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070dc:	2300      	movs	r3, #0
 80070de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070e2:	2303      	movs	r3, #3
 80070e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80070e8:	230c      	movs	r3, #12
 80070ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80070ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80070f2:	4619      	mov	r1, r3
 80070f4:	4831      	ldr	r0, [pc, #196]	; (80071bc <HAL_FMC_MspInit+0x164>)
 80070f6:	f005 fa3d 	bl	800c574 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 80070fa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80070fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007102:	2302      	movs	r3, #2
 8007104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007108:	2300      	movs	r3, #0
 800710a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800710e:	2303      	movs	r3, #3
 8007110:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007114:	230c      	movs	r3, #12
 8007116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800711a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800711e:	4619      	mov	r1, r3
 8007120:	4827      	ldr	r0, [pc, #156]	; (80071c0 <HAL_FMC_MspInit+0x168>)
 8007122:	f005 fa27 	bl	800c574 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_7
 8007126:	f64f 7383 	movw	r3, #65411	; 0xff83
 800712a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800712e:	2302      	movs	r3, #2
 8007130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007134:	2300      	movs	r3, #0
 8007136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800713a:	2303      	movs	r3, #3
 800713c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007140:	230c      	movs	r3, #12
 8007142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007146:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800714a:	4619      	mov	r1, r3
 800714c:	481d      	ldr	r0, [pc, #116]	; (80071c4 <HAL_FMC_MspInit+0x16c>)
 800714e:	f005 fa11 	bl	800c574 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8007152:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007156:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800715a:	2302      	movs	r3, #2
 800715c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007160:	2300      	movs	r3, #0
 8007162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007166:	2303      	movs	r3, #3
 8007168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800716c:	230c      	movs	r3, #12
 800716e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007172:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007176:	4619      	mov	r1, r3
 8007178:	4813      	ldr	r0, [pc, #76]	; (80071c8 <HAL_FMC_MspInit+0x170>)
 800717a:	f005 f9fb 	bl	800c574 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 800717e:	23e0      	movs	r3, #224	; 0xe0
 8007180:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007184:	2302      	movs	r3, #2
 8007186:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800718a:	2300      	movs	r3, #0
 800718c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007190:	2303      	movs	r3, #3
 8007192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007196:	230c      	movs	r3, #12
 8007198:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800719c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80071a0:	4619      	mov	r1, r3
 80071a2:	480a      	ldr	r0, [pc, #40]	; (80071cc <HAL_FMC_MspInit+0x174>)
 80071a4:	f005 f9e6 	bl	800c574 <HAL_GPIO_Init>
 80071a8:	e000      	b.n	80071ac <HAL_FMC_MspInit+0x154>
    return;
 80071aa:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80071ac:	37e0      	adds	r7, #224	; 0xe0
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	2400b234 	.word	0x2400b234
 80071b8:	58024400 	.word	0x58024400
 80071bc:	58021800 	.word	0x58021800
 80071c0:	58020c00 	.word	0x58020c00
 80071c4:	58021000 	.word	0x58021000
 80071c8:	58021400 	.word	0x58021400
 80071cc:	58021c00 	.word	0x58021c00

080071d0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80071d8:	f7ff ff3e 	bl	8007058 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b090      	sub	sp, #64	; 0x40
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b0f      	cmp	r3, #15
 80071f0:	d827      	bhi.n	8007242 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80071f2:	2200      	movs	r2, #0
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	2036      	movs	r0, #54	; 0x36
 80071f8:	f004 fdf6 	bl	800bde8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80071fc:	2036      	movs	r0, #54	; 0x36
 80071fe:	f004 fe0d 	bl	800be1c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8007202:	4a29      	ldr	r2, [pc, #164]	; (80072a8 <HAL_InitTick+0xc4>)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007208:	4b28      	ldr	r3, [pc, #160]	; (80072ac <HAL_InitTick+0xc8>)
 800720a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800720e:	4a27      	ldr	r2, [pc, #156]	; (80072ac <HAL_InitTick+0xc8>)
 8007210:	f043 0310 	orr.w	r3, r3, #16
 8007214:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8007218:	4b24      	ldr	r3, [pc, #144]	; (80072ac <HAL_InitTick+0xc8>)
 800721a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007226:	f107 0210 	add.w	r2, r7, #16
 800722a:	f107 0314 	add.w	r3, r7, #20
 800722e:	4611      	mov	r1, r2
 8007230:	4618      	mov	r0, r3
 8007232:	f00b f99f 	bl	8012574 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <HAL_InitTick+0x6a>
 8007240:	e001      	b.n	8007246 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e02b      	b.n	800729e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007246:	f00b f969 	bl	801251c <HAL_RCC_GetPCLK1Freq>
 800724a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800724c:	e004      	b.n	8007258 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800724e:	f00b f965 	bl	801251c <HAL_RCC_GetPCLK1Freq>
 8007252:	4603      	mov	r3, r0
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725a:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <HAL_InitTick+0xcc>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	0c9b      	lsrs	r3, r3, #18
 8007262:	3b01      	subs	r3, #1
 8007264:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007266:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <HAL_InitTick+0xd0>)
 8007268:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <HAL_InitTick+0xd4>)
 800726a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800726c:	4b11      	ldr	r3, [pc, #68]	; (80072b4 <HAL_InitTick+0xd0>)
 800726e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007272:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007274:	4a0f      	ldr	r2, [pc, #60]	; (80072b4 <HAL_InitTick+0xd0>)
 8007276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007278:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800727a:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <HAL_InitTick+0xd0>)
 800727c:	2200      	movs	r2, #0
 800727e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007280:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <HAL_InitTick+0xd0>)
 8007282:	2200      	movs	r2, #0
 8007284:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007286:	480b      	ldr	r0, [pc, #44]	; (80072b4 <HAL_InitTick+0xd0>)
 8007288:	f00c fd71 	bl	8013d6e <HAL_TIM_Base_Init>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d104      	bne.n	800729c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007292:	4808      	ldr	r0, [pc, #32]	; (80072b4 <HAL_InitTick+0xd0>)
 8007294:	f00c fdc2 	bl	8013e1c <HAL_TIM_Base_Start_IT>
 8007298:	4603      	mov	r3, r0
 800729a:	e000      	b.n	800729e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3740      	adds	r7, #64	; 0x40
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	2400005c 	.word	0x2400005c
 80072ac:	58024400 	.word	0x58024400
 80072b0:	431bde83 	.word	0x431bde83
 80072b4:	2400b238 	.word	0x2400b238
 80072b8:	40001000 	.word	0x40001000

080072bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80072c0:	bf00      	nop
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072ca:	b480      	push	{r7}
 80072cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072ce:	e7fe      	b.n	80072ce <HardFault_Handler+0x4>

080072d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072d4:	e7fe      	b.n	80072d4 <MemManage_Handler+0x4>

080072d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072d6:	b480      	push	{r7}
 80072d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072da:	e7fe      	b.n	80072da <BusFault_Handler+0x4>

080072dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072e0:	e7fe      	b.n	80072e0 <UsageFault_Handler+0x4>

080072e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072e2:	b480      	push	{r7}
 80072e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072e6:	bf00      	nop
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80072f4:	2004      	movs	r0, #4
 80072f6:	f005 fc42 	bl	800cb7e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80072fa:	bf00      	nop
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007304:	4802      	ldr	r0, [pc, #8]	; (8007310 <TIM6_DAC_IRQHandler+0x10>)
 8007306:	f00c ff71 	bl	80141ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800730a:	bf00      	nop
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	2400b238 	.word	0x2400b238

08007314 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8007318:	4802      	ldr	r0, [pc, #8]	; (8007324 <LTDC_IRQHandler+0x10>)
 800731a:	f008 faed 	bl	800f8f8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800731e:	bf00      	nop
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	2400b094 	.word	0x2400b094

08007328 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800732c:	4802      	ldr	r0, [pc, #8]	; (8007338 <DMA2D_IRQHandler+0x10>)
 800732e:	f004 ff63 	bl	800c1f8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8007332:	bf00      	nop
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	2400aea8 	.word	0x2400aea8

0800733c <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8007340:	4802      	ldr	r0, [pc, #8]	; (800734c <OCTOSPI1_IRQHandler+0x10>)
 8007342:	f009 fa83 	bl	801084c <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8007346:	bf00      	nop
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	2400b13c 	.word	0x2400b13c

08007350 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8007354:	4802      	ldr	r0, [pc, #8]	; (8007360 <JPEG_IRQHandler+0x10>)
 8007356:	f006 fd7a 	bl	800de4e <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 800735a:	bf00      	nop
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	2400af64 	.word	0x2400af64

08007364 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8007368:	4803      	ldr	r0, [pc, #12]	; (8007378 <MDMA_IRQHandler+0x14>)
 800736a:	f008 ff2f 	bl	80101cc <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800736e:	4803      	ldr	r0, [pc, #12]	; (800737c <MDMA_IRQHandler+0x18>)
 8007370:	f008 ff2c 	bl	80101cc <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8007374:	bf00      	nop
 8007376:	bd80      	pop	{r7, pc}
 8007378:	2400b028 	.word	0x2400b028
 800737c:	2400afbc 	.word	0x2400afbc

08007380 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
	return 1;
 8007384:	2301      	movs	r3, #1
}
 8007386:	4618      	mov	r0, r3
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <_kill>:

int _kill(int pid, int sig)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800739a:	f020 f993 	bl	80276c4 <__errno>
 800739e:	4603      	mov	r3, r0
 80073a0:	2216      	movs	r2, #22
 80073a2:	601a      	str	r2, [r3, #0]
	return -1;
 80073a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <_exit>:

void _exit (int status)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80073b8:	f04f 31ff 	mov.w	r1, #4294967295
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff ffe7 	bl	8007390 <_kill>
	while (1) {}		/* Make sure we hang here */
 80073c2:	e7fe      	b.n	80073c2 <_exit+0x12>

080073c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e00a      	b.n	80073ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80073d6:	f3af 8000 	nop.w
 80073da:	4601      	mov	r1, r0
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	60ba      	str	r2, [r7, #8]
 80073e2:	b2ca      	uxtb	r2, r1
 80073e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	3301      	adds	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	dbf0      	blt.n	80073d6 <_read+0x12>
	}

return len;
 80073f4:	687b      	ldr	r3, [r7, #4]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b086      	sub	sp, #24
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	e009      	b.n	8007424 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	60ba      	str	r2, [r7, #8]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	3301      	adds	r3, #1
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	dbf1      	blt.n	8007410 <_write+0x12>
	}
	return len;
 800742c:	687b      	ldr	r3, [r7, #4]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <_close>:

int _close(int file)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
	return -1;
 800743e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007442:	4618      	mov	r0, r3
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800745e:	605a      	str	r2, [r3, #4]
	return 0;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <_isatty>:

int _isatty(int file)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
	return 1;
 8007476:	2301      	movs	r3, #1
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
	return 0;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
	...

080074a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80074a8:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <_sbrk+0x50>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <_sbrk+0x16>
		heap_end = &end;
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <_sbrk+0x50>)
 80074b2:	4a10      	ldr	r2, [pc, #64]	; (80074f4 <_sbrk+0x54>)
 80074b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80074b6:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <_sbrk+0x50>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80074bc:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <_sbrk+0x50>)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	466a      	mov	r2, sp
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d907      	bls.n	80074da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80074ca:	f020 f8fb 	bl	80276c4 <__errno>
 80074ce:	4603      	mov	r3, r0
 80074d0:	220c      	movs	r2, #12
 80074d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295
 80074d8:	e006      	b.n	80074e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80074da:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <_sbrk+0x50>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	4a03      	ldr	r2, [pc, #12]	; (80074f0 <_sbrk+0x50>)
 80074e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80074e6:	68fb      	ldr	r3, [r7, #12]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	2400b284 	.word	0x2400b284
 80074f4:	24026510 	.word	0x24026510

080074f8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8007504:	887b      	ldrh	r3, [r7, #2]
 8007506:	2b02      	cmp	r3, #2
 8007508:	d010      	beq.n	800752c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800750a:	2b02      	cmp	r3, #2
 800750c:	dc13      	bgt.n	8007536 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8007512:	2b01      	cmp	r3, #1
 8007514:	d005      	beq.n	8007522 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8007516:	e00e      	b.n	8007536 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8007518:	f001 fbf0 	bl	8008cfc <_ZN17TypedTextDatabase8getFontsEv>
 800751c:	4603      	mov	r3, r0
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	e00a      	b.n	8007538 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8007522:	f001 fbeb 	bl	8008cfc <_ZN17TypedTextDatabase8getFontsEv>
 8007526:	4603      	mov	r3, r0
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	e005      	b.n	8007538 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800752c:	f001 fbe6 	bl	8008cfc <_ZN17TypedTextDatabase8getFontsEv>
 8007530:	4603      	mov	r3, r0
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	e000      	b.n	8007538 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8007536:	2300      	movs	r3, #0
    }
}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
    return bitmap_database;
 8007544:	4b02      	ldr	r3, [pc, #8]	; (8007550 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8007546:	4618      	mov	r0, r3
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	0802b2f0 	.word	0x0802b2f0

08007554 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8007558:	2304      	movs	r3, #4
}
 800755a:	4618      	mov	r0, r3
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
    {
 800756c:	4a04      	ldr	r2, [pc, #16]	; (8007580 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	601a      	str	r2, [r3, #0]
    }
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	0802b48c 	.word	0x0802b48c

08007584 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
    }
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff ffe9 	bl	8007564 <_ZN8touchgfx4FontD1Ev>
 8007592:	2114      	movs	r1, #20
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f020 f834 	bl	8027602 <_ZdlPvj>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80075a4:	b590      	push	{r4, r7, lr}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80075b0:	887b      	ldrh	r3, [r7, #2]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	e010      	b.n	80075dc <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	681c      	ldr	r4, [r3, #0]
 80075ca:	f107 030f 	add.w	r3, r7, #15
 80075ce:	f107 0210 	add.w	r2, r7, #16
 80075d2:	8879      	ldrh	r1, [r7, #2]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	47a0      	blx	r4
 80075d8:	6178      	str	r0, [r7, #20]
        return glyph;
 80075da:	697b      	ldr	r3, [r7, #20]
    }
 80075dc:	4618      	mov	r0, r3
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd90      	pop	{r4, r7, pc}

080075e4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	89db      	ldrh	r3, [r3, #14]
    }
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8a1b      	ldrh	r3, [r3, #16]
    }
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	88db      	ldrh	r3, [r3, #6]
    }
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	889b      	ldrh	r3, [r3, #4]
    }
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	7a9b      	ldrb	r3, [r3, #10]
 8007650:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007654:	b2db      	uxtb	r3, r3
    }
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	7a9b      	ldrb	r3, [r3, #10]
 800766e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007672:	b2db      	uxtb	r3, r3
    }
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	4a05      	ldr	r2, [pc, #20]	; (80076a0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff ff67 	bl	8007564 <_ZN8touchgfx4FontD1Ev>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	0802c0a4 	.word	0x0802c0a4

080076a4 <_ZN8touchgfx9ConstFontD0Ev>:
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff ffe7 	bl	8007680 <_ZN8touchgfx9ConstFontD1Ev>
 80076b2:	211c      	movs	r1, #28
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f01f ffa4 	bl	8027602 <_ZdlPvj>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff ffd3 	bl	8007680 <_ZN8touchgfx9ConstFontD1Ev>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	0802b390 	.word	0x0802b390

080076e8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff ffe7 	bl	80076c4 <_ZN8touchgfx13GeneratedFontD1Ev>
 80076f6:	212c      	movs	r1, #44	; 0x2c
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f01f ff82 	bl	8027602 <_ZdlPvj>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3304      	adds	r3, #4
 800772c:	4618      	mov	r0, r3
 800772e:	f015 f96e 	bl	801ca0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8007744:	4a07      	ldr	r2, [pc, #28]	; (8007764 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	605a      	str	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	721a      	strb	r2, [r3, #8]
    {
    }
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	0802b36c 	.word	0x0802b36c

08007768 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
    {
 8007770:	4a04      	ldr	r2, [pc, #16]	; (8007784 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
    }
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	0802b36c 	.word	0x0802b36c

08007788 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
    }
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff ffe9 	bl	8007768 <_ZN8touchgfx10TransitionD1Ev>
 8007796:	210c      	movs	r1, #12
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f01f ff32 	bl	8027602 <_ZdlPvj>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
    {
    }
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
    {
    }
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
    {
    }
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 80077ec:	f015 f8ea 	bl	801c9c4 <_ZN8touchgfx11Application11getInstanceEv>
 80077f0:	4603      	mov	r3, r0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f015 fd30 	bl	801d258 <_ZN8touchgfx11Application10invalidateEv>
    }
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	605a      	str	r2, [r3, #4]
    }
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4618      	mov	r0, r3
 8007828:	f015 f992 	bl	801cb50 <_ZN8touchgfx11ApplicationC1Ev>
 800782c:	4a09      	ldr	r2, [pc, #36]	; (8007854 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a04      	ldr	r2, [pc, #16]	; (8007858 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8007846:	6013      	str	r3, [r2, #0]
    }
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	0802ad0c 	.word	0x0802ad0c
 8007858:	240262d8 	.word	0x240262d8

0800785c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	601a      	str	r2, [r3, #0]
    }
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	721a      	strb	r2, [r3, #8]
    }
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	605a      	str	r2, [r3, #4]
    }
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
	...

080078b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff ffac 	bl	800781c <_ZN8touchgfx14MVPApplicationC1Ev>
 80078c4:	4a12      	ldr	r2, [pc, #72]	; (8007910 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 f89d 	bl	8007a10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80078e6:	f7f9 f8a1 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 80078ea:	4603      	mov	r3, r0
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	3208      	adds	r2, #8
 80078f0:	6812      	ldr	r2, [r2, #0]
 80078f2:	2100      	movs	r1, #0
 80078f4:	4618      	mov	r0, r3
 80078f6:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80078f8:	f7fc faf6 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 80078fc:	4603      	mov	r3, r0
 80078fe:	4618      	mov	r0, r3
 8007900:	f01b f85b 	bl	80229ba <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	0802aca8 	.word	0x0802aca8

08007914 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	4611      	mov	r1, r2
 800793c:	4618      	mov	r0, r3
 800793e:	f7ff ffe9 	bl	8007914 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	3208      	adds	r2, #8
 8007952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007956:	e883 0003 	stmia.w	r3, {r0, r1}
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8007964:	b590      	push	{r4, r7, lr}
 8007966:	b089      	sub	sp, #36	; 0x24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8007972:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	f107 0008 	add.w	r0, r7, #8
 800797e:	f107 0318 	add.w	r3, r7, #24
 8007982:	cb0c      	ldmia	r3, {r2, r3}
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	f000 f85f 	bl	8007a48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800798a:	f107 0308 	add.w	r3, r7, #8
 800798e:	4619      	mov	r1, r3
 8007990:	4620      	mov	r0, r4
 8007992:	f7ff ffcb 	bl	800792c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8007996:	f107 0308 	add.w	r3, r7, #8
 800799a:	4618      	mov	r0, r3
 800799c:	f7fc f846 	bl	8003a2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80079ac:	bf00      	nop
 80079ae:	3724      	adds	r7, #36	; 0x24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd90      	pop	{r4, r7, pc}
 80079b4:	080079b9 	.word	0x080079b9

080079b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af02      	add	r7, sp, #8
 80079be:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80079cc:	461a      	mov	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80079d8:	4804      	ldr	r0, [pc, #16]	; (80079ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80079da:	f000 f867 	bl	8007aac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	240262cc 	.word	0x240262cc
 80079ec:	240262c8 	.word	0x240262c8

080079f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	4a04      	ldr	r2, [pc, #16]	; (8007a0c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	0802ad58 	.word	0x0802ad58

08007a10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff ffe8 	bl	80079f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8007a20:	4a08      	ldr	r2, [pc, #32]	; (8007a44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	605a      	str	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	609a      	str	r2, [r3, #8]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	60da      	str	r2, [r3, #12]
    }
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	0802acf4 	.word	0x0802acf4

08007a48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4639      	mov	r1, r7
 8007a54:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff ffc8 	bl	80079f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8007a60:	4a08      	ldr	r2, [pc, #32]	; (8007a84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	605a      	str	r2, [r3, #4]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	463a      	mov	r2, r7
 8007a72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a76:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	0802acf4 	.word	0x0802acf4

08007a88 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fe52 	bl	800773c <_ZN8touchgfx10TransitionC1Ev>
 8007a98:	4a03      	ldr	r2, [pc, #12]	; (8007aa8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	0802b348 	.word	0x0802b348

08007aac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8007aac:	b590      	push	{r4, r7, lr}
 8007aae:	b08f      	sub	sp, #60	; 0x3c
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3320      	adds	r3, #32
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	4603      	mov	r3, r0
 8007ace:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8007ad2:	d205      	bcs.n	8007ae0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8007ad4:	4b7e      	ldr	r3, [pc, #504]	; (8007cd0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8007ad6:	4a7f      	ldr	r2, [pc, #508]	; (8007cd4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007ad8:	21a3      	movs	r1, #163	; 0xa3
 8007ada:	487f      	ldr	r0, [pc, #508]	; (8007cd8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8007adc:	f01f fdc0 	bl	8027660 <__assert_func>
 8007ae0:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3320      	adds	r3, #32
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b0f      	cmp	r3, #15
 8007af8:	d805      	bhi.n	8007b06 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8007afa:	4b78      	ldr	r3, [pc, #480]	; (8007cdc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8007afc:	4a75      	ldr	r2, [pc, #468]	; (8007cd4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007afe:	21a4      	movs	r1, #164	; 0xa4
 8007b00:	4875      	ldr	r0, [pc, #468]	; (8007cd8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8007b02:	f01f fdad 	bl	8027660 <__assert_func>
 8007b06:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3320      	adds	r3, #32
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4610      	mov	r0, r2
 8007b18:	4798      	blx	r3
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b0b      	cmp	r3, #11
 8007b1e:	d805      	bhi.n	8007b2c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8007b20:	4b6f      	ldr	r3, [pc, #444]	; (8007ce0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8007b22:	4a6c      	ldr	r2, [pc, #432]	; (8007cd4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007b24:	21a5      	movs	r1, #165	; 0xa5
 8007b26:	486c      	ldr	r0, [pc, #432]	; (8007cd8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8007b28:	f01f fd9a 	bl	8027660 <__assert_func>
 8007b2c:	bf00      	nop
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8007b3a:	f014 ff43 	bl	801c9c4 <_ZN8touchgfx11Application11getInstanceEv>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fded 	bl	8007720 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d008      	beq.n	8007b60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
    if (*currentTrans)
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4610      	mov	r0, r2
 8007b76:	4798      	blx	r3
    if (*currentScreen)
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d008      	beq.n	8007b92 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4610      	mov	r0, r2
 8007b90:	4798      	blx	r3
    if (*currentPresenter)
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4610      	mov	r0, r2
 8007baa:	4798      	blx	r3
    if (*currentScreen)
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d007      	beq.n	8007bc4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
    if (*currentPresenter)
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d008      	beq.n	8007bde <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4798      	blx	r3
}
 8007bde:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 f87c 	bl	8007ce4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8007bec:	4603      	mov	r3, r0
 8007bee:	4619      	mov	r1, r3
 8007bf0:	200c      	movs	r0, #12
 8007bf2:	f7ff fd89 	bl	8007708 <_ZnwjPv>
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f7ff ff45 	bl	8007a88 <_ZN8touchgfx12NoTransitionC1Ev>
 8007bfe:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 f87f 	bl	8007d0a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	4619      	mov	r1, r3
 8007c10:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8007c14:	f7ff fd78 	bl	8007708 <_ZnwjPv>
 8007c18:	4604      	mov	r4, r0
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f001 f9f6 	bl	800900c <_ZN11Screen1ViewC1Ev>
 8007c20:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2100      	movs	r1, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 f881 	bl	8007d30 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4619      	mov	r1, r3
 8007c32:	2010      	movs	r0, #16
 8007c34:	f7ff fd68 	bl	8007708 <_ZnwjPv>
 8007c38:	4604      	mov	r4, r0
 8007c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f001 f97d 	bl	8008f3c <_ZN16Screen1PresenterC1ER11Screen1View>
 8007c42:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c48:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c4e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c54:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	3304      	adds	r3, #4
 8007c60:	e000      	b.n	8007c64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8007c62:	2300      	movs	r3, #0
 8007c64:	4619      	mov	r1, r3
 8007c66:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007c68:	f7ff fdf8 	bl	800785c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	3304      	adds	r3, #4
 8007c70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff fe0d 	bl	8007892 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f86a 	bl	8007d56 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	61fb      	str	r3, [r7, #28]
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	61bb      	str	r3, [r7, #24]
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	330c      	adds	r3, #12
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69f8      	ldr	r0, [r7, #28]
 8007c98:	4798      	blx	r3
    newPresenter->activate();
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	69b8      	ldr	r0, [r7, #24]
 8007ca2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007ca4:	6979      	ldr	r1, [r7, #20]
 8007ca6:	69f8      	ldr	r0, [r7, #28]
 8007ca8:	f016 fb3e 	bl	801e328 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3310      	adds	r3, #16
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6978      	ldr	r0, [r7, #20]
 8007cb6:	4798      	blx	r3
    newTransition->invalidate();
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3314      	adds	r3, #20
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6978      	ldr	r0, [r7, #20]
 8007cc2:	4798      	blx	r3
}
 8007cc4:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	373c      	adds	r7, #60	; 0x3c
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd90      	pop	{r4, r7, pc}
 8007cd0:	0802a31c 	.word	0x0802a31c
 8007cd4:	0802a3ac 	.word	0x0802a3ac
 8007cd8:	0802a4b0 	.word	0x0802a4b0
 8007cdc:	0802a4f8 	.word	0x0802a4f8
 8007ce0:	0802a59c 	.word	0x0802a59c

08007ce4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3324      	adds	r3, #36	; 0x24
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	887a      	ldrh	r2, [r7, #2]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3
 8007d00:	4603      	mov	r3, r0
    }
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3324      	adds	r3, #36	; 0x24
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	887a      	ldrh	r2, [r7, #2]
 8007d20:	4611      	mov	r1, r2
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	4798      	blx	r3
 8007d26:	4603      	mov	r3, r0
    }
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3324      	adds	r3, #36	; 0x24
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	887a      	ldrh	r2, [r7, #2]
 8007d46:	4611      	mov	r1, r2
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	4798      	blx	r3
 8007d4c:	4603      	mov	r3, r0
    }
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
	...

08007d74 <_ZN8touchgfx12NoTransitionD1Ev>:
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	4a05      	ldr	r2, [pc, #20]	; (8007d94 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff fcef 	bl	8007768 <_ZN8touchgfx10TransitionD1Ev>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	0802b348 	.word	0x0802b348

08007d98 <_ZN8touchgfx12NoTransitionD0Ev>:
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff ffe7 	bl	8007d74 <_ZN8touchgfx12NoTransitionD1Ev>
 8007da6:	210c      	movs	r1, #12
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f01f fc2a 	bl	8027602 <_ZdlPvj>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08e      	sub	sp, #56	; 0x38
 8007dec:	af0a      	add	r7, sp, #40	; 0x28
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4611      	mov	r1, r2
 8007df4:	461a      	mov	r2, r3
 8007df6:	460b      	mov	r3, r1
 8007df8:	80fb      	strh	r3, [r7, #6]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	88b9      	ldrh	r1, [r7, #4]
 8007e02:	88fa      	ldrh	r2, [r7, #6]
 8007e04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007e08:	9308      	str	r3, [sp, #32]
 8007e0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007e0c:	9307      	str	r3, [sp, #28]
 8007e0e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007e12:	9306      	str	r3, [sp, #24]
 8007e14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e18:	9305      	str	r3, [sp, #20]
 8007e1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e1e:	9304      	str	r3, [sp, #16]
 8007e20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e24:	9303      	str	r3, [sp, #12]
 8007e26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e2a:	9302      	str	r3, [sp, #8]
 8007e2c:	7f3b      	ldrb	r3, [r7, #28]
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	8b3b      	ldrh	r3, [r7, #24]
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	460b      	mov	r3, r1
 8007e36:	68b9      	ldr	r1, [r7, #8]
 8007e38:	f015 feb6 	bl	801dba8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8007e3c:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e46:	61da      	str	r2, [r3, #28]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e4c:	621a      	str	r2, [r3, #32]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e52:	625a      	str	r2, [r3, #36]	; 0x24
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e58:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	0802b390 	.word	0x0802b390

08007e68 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	889b      	ldrh	r3, [r3, #4]
 8007e7c:	0adb      	lsrs	r3, r3, #11
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4413      	add	r3, r2
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b089      	sub	sp, #36	; 0x24
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	607a      	str	r2, [r7, #4]
 8007ea6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	7b1b      	ldrb	r3, [r3, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e030      	b.n	8007f1c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1a      	ldr	r2, [r3, #32]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	7b5b      	ldrb	r3, [r3, #13]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	b21b      	sxth	r3, r3
 8007eca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ece:	b219      	sxth	r1, r3
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	7adb      	ldrb	r3, [r3, #11]
 8007ed4:	b21b      	sxth	r3, r3
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	b21b      	sxth	r3, r3
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	7b1b      	ldrb	r3, [r3, #12]
 8007ee6:	837b      	strh	r3, [r7, #26]
 8007ee8:	8b7b      	ldrh	r3, [r7, #26]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d015      	beq.n	8007f1a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	897a      	ldrh	r2, [r7, #10]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d103      	bne.n	8007f00 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8007efe:	e00d      	b.n	8007f1c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	897a      	ldrh	r2, [r7, #10]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d306      	bcc.n	8007f18 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007f0a:	8b7b      	ldrh	r3, [r7, #26]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	837b      	strh	r3, [r7, #26]
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	3304      	adds	r3, #4
 8007f14:	61fb      	str	r3, [r7, #28]
 8007f16:	e7e7      	b.n	8007ee8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8007f18:	bf00      	nop
        }
    }
    return 0;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3724      	adds	r7, #36	; 0x24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	887a      	ldrh	r2, [r7, #2]
 8007f38:	801a      	strh	r2, [r3, #0]
    {
    }
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
          visible(true)
 8007f50:	4a14      	ldr	r2, [pc, #80]	; (8007fa4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fa ff46 	bl	8002dec <_ZN8touchgfx4RectC1Ev>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	330c      	adds	r3, #12
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fa ff41 	bl	8002dec <_ZN8touchgfx4RectC1Ev>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	615a      	str	r2, [r3, #20]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	619a      	str	r2, [r3, #24]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	61da      	str	r2, [r3, #28]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	841a      	strh	r2, [r3, #32]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	845a      	strh	r2, [r3, #34]	; 0x22
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	0802c03c 	.word	0x0802c03c

08007fa8 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	817b      	strh	r3, [r7, #10]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	813b      	strh	r3, [r7, #8]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 8007fc2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007fc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f80c 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8007fd2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f822 	bl	8008026 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	807b      	strh	r3, [r7, #2]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	803b      	strh	r3, [r7, #0]
        setX(x);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3330      	adds	r3, #48	; 0x30
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008006:	4611      	mov	r1, r2
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	4798      	blx	r3
        setY(y);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3334      	adds	r3, #52	; 0x34
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008018:	4611      	mov	r1, r2
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
    }
 800801e:	bf00      	nop
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	807b      	strh	r3, [r7, #2]
 8008032:	4613      	mov	r3, r2
 8008034:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3338      	adds	r3, #56	; 0x38
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008042:	4611      	mov	r1, r2
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	4798      	blx	r3
        setHeight(height);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	333c      	adds	r3, #60	; 0x3c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008054:	4611      	mov	r1, r2
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
    }
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
	...

08008064 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
    {
 800806c:	4a06      	ldr	r2, [pc, #24]	; (8008088 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3304      	adds	r3, #4
 8008076:	4618      	mov	r0, r3
 8008078:	f000 faaa 	bl	80085d0 <_ZN8touchgfx9ContainerD1Ev>
    }
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	0802c140 	.word	0x0802c140

0800808c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
    }
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ffe5 	bl	8008064 <_ZN8touchgfx6ScreenD1Ev>
 800809a:	213c      	movs	r1, #60	; 0x3c
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f01f fab0 	bl	8027602 <_ZdlPvj>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
    {
    }
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
    {
    }
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
    {
    }
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
    {
    }
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3304      	adds	r3, #4
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f011 fd2b 	bl	8019b80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <_ZN8touchgfx6WidgetC1Ev>:
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff ff02 	bl	8007f48 <_ZN8touchgfx8DrawableC1Ev>
 8008144:	4a03      	ldr	r2, [pc, #12]	; (8008154 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	0802ae38 	.word	0x0802ae38

08008158 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4618      	mov	r0, r3
 8008164:	2326      	movs	r3, #38	; 0x26
 8008166:	461a      	mov	r2, r3
 8008168:	2100      	movs	r1, #0
 800816a:	f01f fb09 	bl	8027780 <memset>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4618      	mov	r0, r3
 8008172:	f7ff ffdf 	bl	8008134 <_ZN8touchgfx6WidgetC1Ev>
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <_ZN8touchgfx3BoxC1Ev+0x44>)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	22ff      	movs	r2, #255	; 0xff
 8008180:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3328      	adds	r3, #40	; 0x28
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f7fb fd79 	bl	8003c82 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	0802bec4 	.word	0x0802bec4

080081a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 80081ce:	bf00      	nop
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <_ZN15Screen1ViewBase11SliderValueEi>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void SliderValue(int value)
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Screen1
    }
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	4a05      	ldr	r2, [pc, #20]	; (8008210 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff ff2f 	bl	8008064 <_ZN8touchgfx6ScreenD1Ev>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	0802b440 	.word	0x0802b440

08008214 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff ffe7 	bl	80081f0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8008222:	2140      	movs	r1, #64	; 0x40
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f01f f9ec 	bl	8027602 <_ZdlPvj>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8008234:	b590      	push	{r4, r7, lr}
 8008236:	b08f      	sub	sp, #60	; 0x3c
 8008238:	af02      	add	r7, sp, #8
 800823a:	6078      	str	r0, [r7, #4]
    sliderValueChangedCallback(this, &Screen1ViewBase::sliderValueChangedCallbackHandler)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f93e 	bl	80084c0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8008244:	4a6f      	ldr	r2, [pc, #444]	; (8008404 <_ZN15Screen1ViewBaseC1Ev+0x1d0>)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	601a      	str	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3340      	adds	r3, #64	; 0x40
 800824e:	4618      	mov	r0, r3
 8008250:	f7ff ff82 	bl	8008158 <_ZN8touchgfx3BoxC1Ev>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800825a:	f107 030c 	add.w	r3, r7, #12
 800825e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff fe60 	bl	8007f28 <_ZN8touchgfx6BitmapC1Et>
 8008268:	f107 030c 	add.w	r3, r7, #12
 800826c:	4619      	mov	r1, r3
 800826e:	4620      	mov	r0, r4
 8008270:	f013 f8e6 	bl	801b440 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3398      	adds	r3, #152	; 0x98
 8008278:	4618      	mov	r0, r3
 800827a:	f012 f927 	bl	801a4cc <_ZN8touchgfx6SliderC1Ev>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8008284:	4b60      	ldr	r3, [pc, #384]	; (8008408 <_ZN15Screen1ViewBaseC1Ev+0x1d4>)
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	f107 0310 	add.w	r3, r7, #16
 8008290:	cb0c      	ldmia	r3, {r2, r3}
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	f000 f93a 	bl	800850c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{
    __background.setPosition(0, 0, 480, 272);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800829e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80082a8:	2200      	movs	r2, #0
 80082aa:	2100      	movs	r1, #0
 80082ac:	f7ff fe7c 	bl	8007fa8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80082b6:	2300      	movs	r3, #0
 80082b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80082bc:	2300      	movs	r3, #0
 80082be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80082c2:	2300      	movs	r3, #0
 80082c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80082c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082cc:	041b      	lsls	r3, r3, #16
 80082ce:	461a      	mov	r2, r3
 80082d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	431a      	orrs	r2, r3
 80082d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80082dc:	4313      	orrs	r3, r2
 80082de:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80082e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082e6:	4611      	mov	r1, r2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fb fcca 	bl	8003c82 <_ZN8touchgfx9colortypeC1Em>
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	4619      	mov	r1, r3
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7ff ff54 	bl	80081a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3340      	adds	r3, #64	; 0x40
 80082fe:	4619      	mov	r1, r3
 8008300:	4610      	mov	r0, r2
 8008302:	f7ff ff07 	bl	8008114 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_PUZZLE_ID));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800830c:	f107 0318 	add.w	r3, r7, #24
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f7ff fe08 	bl	8007f28 <_ZN8touchgfx6BitmapC1Et>
 8008318:	f107 0318 	add.w	r3, r7, #24
 800831c:	4619      	mov	r1, r3
 800831e:	4620      	mov	r0, r4
 8008320:	f013 fab6 	bl	801b890 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 480, 272);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800832a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008334:	2200      	movs	r2, #0
 8008336:	2100      	movs	r1, #0
 8008338:	f7ff fe36 	bl	8007fa8 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	336c      	adds	r3, #108	; 0x6c
 8008340:	2100      	movs	r1, #0
 8008342:	4618      	mov	r0, r3
 8008344:	f013 f84b 	bl	801b3de <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    add(scalableImage1);
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	336c      	adds	r3, #108	; 0x6c
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7ff fedf 	bl	8008114 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    slider1.setXY(82, 120);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3398      	adds	r3, #152	; 0x98
 800835a:	2278      	movs	r2, #120	; 0x78
 800835c:	2152      	movs	r1, #82	; 0x52
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff fe43 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUND_DARK_ID));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800836a:	f107 031c 	add.w	r3, r7, #28
 800836e:	2103      	movs	r1, #3
 8008370:	4618      	mov	r0, r3
 8008372:	f7ff fdd9 	bl	8007f28 <_ZN8touchgfx6BitmapC1Et>
 8008376:	f107 0320 	add.w	r3, r7, #32
 800837a:	2101      	movs	r1, #1
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fdd3 	bl	8007f28 <_ZN8touchgfx6BitmapC1Et>
 8008382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008386:	2102      	movs	r1, #2
 8008388:	4618      	mov	r0, r3
 800838a:	f7ff fdcd 	bl	8007f28 <_ZN8touchgfx6BitmapC1Et>
 800838e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008392:	f107 0220 	add.w	r2, r7, #32
 8008396:	f107 011c 	add.w	r1, r7, #28
 800839a:	4620      	mov	r0, r4
 800839c:	f012 f8f2 	bl	801a584 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(16, 11, 0, 0, 300);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80083a6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	2300      	movs	r3, #0
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	2300      	movs	r3, #0
 80083b2:	220b      	movs	r2, #11
 80083b4:	2110      	movs	r1, #16
 80083b6:	f011 ff5b 	bl	801a270 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    slider1.setValueRange(0, 1000);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3398      	adds	r3, #152	; 0x98
 80083be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083c2:	2100      	movs	r1, #0
 80083c4:	4618      	mov	r0, r3
 80083c6:	f011 fee4 	bl	801a192 <_ZN8touchgfx6Slider13setValueRangeEii>
    slider1.setValue(500);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3398      	adds	r3, #152	; 0x98
 80083ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80083d2:	4618      	mov	r0, r3
 80083d4:	f011 fe5f 	bl	801a096 <_ZN8touchgfx6Slider8setValueEi>
    slider1.setNewValueCallback(sliderValueChangedCallback);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80083e4:	4619      	mov	r1, r3
 80083e6:	4610      	mov	r0, r2
 80083e8:	f7ff fee8 	bl	80081bc <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    add(slider1);
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3398      	adds	r3, #152	; 0x98
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f7ff fe8d 	bl	8008114 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	3734      	adds	r7, #52	; 0x34
 8008400:	46bd      	mov	sp, r7
 8008402:	bd90      	pop	{r4, r7, pc}
 8008404:	0802b3f0 	.word	0x0802b3f0
 8008408:	08008493 	.word	0x08008493

0800840c <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	4a10      	ldr	r2, [pc, #64]	; (8008458 <_ZN15Screen1ViewBaseD1Ev+0x4c>)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8008420:	4618      	mov	r0, r3
 8008422:	f000 f8b3 	bl	800858c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3398      	adds	r3, #152	; 0x98
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f958 	bl	80086e0 <_ZN8touchgfx6SliderD1Ev>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	336c      	adds	r3, #108	; 0x6c
 8008434:	4618      	mov	r0, r3
 8008436:	f000 f931 	bl	800869c <_ZN8touchgfx13ScalableImageD1Ev>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3340      	adds	r3, #64	; 0x40
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f8e8 	bl	8008614 <_ZN8touchgfx3BoxD1Ev>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff fed2 	bl	80081f0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	0802b3f0 	.word	0x0802b3f0

0800845c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
}
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff ffd1 	bl	800840c <_ZN15Screen1ViewBaseD1Ev>
 800846a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f01f f8c7 	bl	8027602 <_ZdlPvj>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]

}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void Screen1ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	607a      	str	r2, [r7, #4]
    if (&src == &slider1)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3398      	adds	r3, #152	; 0x98
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d106      	bne.n	80084b6 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x24>
    {
        //Interaction1
        //When slider1 value changed call virtual function
        //Call SliderValue
        SliderValue(value);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	332c      	adds	r3, #44	; 0x2c
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	4798      	blx	r3
    }
}
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f015 fd80 	bl	801dfd0 <_ZN8touchgfx6ScreenC1Ev>
 80084d0:	4a05      	ldr	r2, [pc, #20]	; (80084e8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	0802b440 	.word	0x0802b440

080084ec <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	4a04      	ldr	r2, [pc, #16]	; (8008508 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	0802b474 	.word	0x0802b474

0800850c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_2)(T1, T2))
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4639      	mov	r1, r7
 8008518:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_2)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4618      	mov	r0, r3
 8008520:	f7ff ffe4 	bl	80084ec <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 8008524:	4a08      	ldr	r2, [pc, #32]	; (8008548 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	605a      	str	r2, [r3, #4]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3308      	adds	r3, #8
 8008534:	463a      	mov	r2, r7
 8008536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800853a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	0802b428 	.word	0x0802b428

0800854c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
    }
 8008554:	4a04      	ldr	r2, [pc, #16]	; (8008568 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	0802b474 	.word	0x0802b474

0800856c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
    }
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7ff ffe9 	bl	800854c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800857a:	2104      	movs	r1, #4
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f01f f840 	bl	8027602 <_ZdlPvj>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	4a05      	ldr	r2, [pc, #20]	; (80085ac <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev+0x20>)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff ffd5 	bl	800854c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	0802b428 	.word	0x0802b428

080085b0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED0Ev>:
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff ffe7 	bl	800858c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev>
 80085be:	2110      	movs	r1, #16
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f01f f81e 	bl	8027602 <_ZdlPvj>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	4a05      	ldr	r2, [pc, #20]	; (80085f0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fb fb5d 	bl	8003ca0 <_ZN8touchgfx8DrawableD1Ev>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	0802bb9c 	.word	0x0802bb9c

080085f4 <_ZN8touchgfx9ContainerD0Ev>:
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff ffe7 	bl	80085d0 <_ZN8touchgfx9ContainerD1Ev>
 8008602:	212c      	movs	r1, #44	; 0x2c
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f01e fffc 	bl	8027602 <_ZdlPvj>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	4a05      	ldr	r2, [pc, #20]	; (8008634 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4618      	mov	r0, r3
 8008626:	f7fb fcbd 	bl	8003fa4 <_ZN8touchgfx6WidgetD1Ev>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	0802bec4 	.word	0x0802bec4

08008638 <_ZN8touchgfx3BoxD0Ev>:
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff ffe7 	bl	8008614 <_ZN8touchgfx3BoxD1Ev>
 8008646:	212c      	movs	r1, #44	; 0x2c
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f01e ffda 	bl	8027602 <_ZdlPvj>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	4a05      	ldr	r2, [pc, #20]	; (8008678 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4618      	mov	r0, r3
 800866a:	f7fb fc9b 	bl	8003fa4 <_ZN8touchgfx6WidgetD1Ev>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4618      	mov	r0, r3
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	0802bf2c 	.word	0x0802bf2c

0800867c <_ZN8touchgfx5ImageD0Ev>:
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff ffe7 	bl	8008658 <_ZN8touchgfx5ImageD1Ev>
 800868a:	212c      	movs	r1, #44	; 0x2c
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f01e ffb8 	bl	8027602 <_ZdlPvj>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <_ZN8touchgfx13ScalableImageD1Ev>:
 * algorithm used. The rendering algorithm can be changed dynamically. Please note that
 * scaling images is done at runtime and may require a lot of calculations.
 *
 * @note Note that this widget does not support 1 bit per pixel color depth.
 */
class ScalableImage : public Image
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	4a05      	ldr	r2, [pc, #20]	; (80086bc <_ZN8touchgfx13ScalableImageD1Ev+0x20>)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff ffd3 	bl	8008658 <_ZN8touchgfx5ImageD1Ev>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	0802be50 	.word	0x0802be50

080086c0 <_ZN8touchgfx13ScalableImageD0Ev>:
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff ffe7 	bl	800869c <_ZN8touchgfx13ScalableImageD1Ev>
 80086ce:	212c      	movs	r1, #44	; 0x2c
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f01e ff96 	bl	8027602 <_ZdlPvj>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <_ZN8touchgfx6SliderD1Ev+0x48>)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	33c0      	adds	r3, #192	; 0xc0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff ff6c 	bl	80085d0 <_ZN8touchgfx9ContainerD1Ev>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3394      	adds	r3, #148	; 0x94
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff ffab 	bl	8008658 <_ZN8touchgfx5ImageD1Ev>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3368      	adds	r3, #104	; 0x68
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff ffa6 	bl	8008658 <_ZN8touchgfx5ImageD1Ev>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	333c      	adds	r3, #60	; 0x3c
 8008710:	4618      	mov	r0, r3
 8008712:	f7ff ffa1 	bl	8008658 <_ZN8touchgfx5ImageD1Ev>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff ff59 	bl	80085d0 <_ZN8touchgfx9ContainerD1Ev>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	0802bc2c 	.word	0x0802bc2c

0800872c <_ZN8touchgfx6SliderD0Ev>:
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff ffd3 	bl	80086e0 <_ZN8touchgfx6SliderD1Ev>
 800873a:	21fc      	movs	r1, #252	; 0xfc
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f01e ff60 	bl	8027602 <_ZdlPvj>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun)(t1, t2);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	68d2      	ldr	r2, [r2, #12]
 8008760:	1052      	asrs	r2, r2, #1
 8008762:	1898      	adds	r0, r3, r2
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	e00a      	b.n	800878c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	68d2      	ldr	r2, [r2, #12]
 800877e:	1052      	asrs	r2, r2, #1
 8008780:	4413      	add	r3, r2
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	6892      	ldr	r2, [r2, #8]
 8008788:	4413      	add	r3, r2
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	4798      	blx	r3
    }
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d010      	beq.n	80087cc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d107      	bne.n	80087c2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80087be:	2301      	movs	r3, #1
 80087c0:	e000      	b.n	80087c4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 80087c2:	2300      	movs	r3, #0
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d001      	beq.n	80087cc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e000      	b.n	80087ce <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 80087cc:	2300      	movs	r3, #0
    }
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
 80087e0:	4801      	ldr	r0, [pc, #4]	; (80087e8 <__tcf_0+0xc>)
 80087e2:	f7fe ff6f 	bl	80076c4 <_ZN8touchgfx13GeneratedFontD1Ev>
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	2400b288 	.word	0x2400b288

080087ec <_Z23getFont_verdana_10_4bppv>:
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08e      	sub	sp, #56	; 0x38
 80087f0:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80087f2:	4b21      	ldr	r3, [pc, #132]	; (8008878 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f3bf 8f5b 	dmb	ish
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	bf0c      	ite	eq
 8008804:	2301      	moveq	r3, #1
 8008806:	2300      	movne	r3, #0
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d030      	beq.n	8008870 <_Z23getFont_verdana_10_4bppv+0x84>
 800880e:	481a      	ldr	r0, [pc, #104]	; (8008878 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008810:	f01e fef9 	bl	8027606 <__cxa_guard_acquire>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	bf14      	ite	ne
 800881a:	2301      	movne	r3, #1
 800881c:	2300      	moveq	r3, #0
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d025      	beq.n	8008870 <_Z23getFont_verdana_10_4bppv+0x84>
 8008824:	2300      	movs	r3, #0
 8008826:	930c      	str	r3, [sp, #48]	; 0x30
 8008828:	2300      	movs	r3, #0
 800882a:	930b      	str	r3, [sp, #44]	; 0x2c
 800882c:	2300      	movs	r3, #0
 800882e:	930a      	str	r3, [sp, #40]	; 0x28
 8008830:	233f      	movs	r3, #63	; 0x3f
 8008832:	9309      	str	r3, [sp, #36]	; 0x24
 8008834:	4b11      	ldr	r3, [pc, #68]	; (800887c <_Z23getFont_verdana_10_4bppv+0x90>)
 8008836:	9308      	str	r3, [sp, #32]
 8008838:	4b11      	ldr	r3, [pc, #68]	; (8008880 <_Z23getFont_verdana_10_4bppv+0x94>)
 800883a:	9307      	str	r3, [sp, #28]
 800883c:	2300      	movs	r3, #0
 800883e:	9306      	str	r3, [sp, #24]
 8008840:	2300      	movs	r3, #0
 8008842:	9305      	str	r3, [sp, #20]
 8008844:	2301      	movs	r3, #1
 8008846:	9304      	str	r3, [sp, #16]
 8008848:	2304      	movs	r3, #4
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	2300      	movs	r3, #0
 800884e:	9302      	str	r3, [sp, #8]
 8008850:	2300      	movs	r3, #0
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	230a      	movs	r3, #10
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	230a      	movs	r3, #10
 800885a:	2201      	movs	r2, #1
 800885c:	4909      	ldr	r1, [pc, #36]	; (8008884 <_Z23getFont_verdana_10_4bppv+0x98>)
 800885e:	480a      	ldr	r0, [pc, #40]	; (8008888 <_Z23getFont_verdana_10_4bppv+0x9c>)
 8008860:	f7ff fac2 	bl	8007de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008864:	4809      	ldr	r0, [pc, #36]	; (800888c <_Z23getFont_verdana_10_4bppv+0xa0>)
 8008866:	f01e ff19 	bl	802769c <atexit>
 800886a:	4803      	ldr	r0, [pc, #12]	; (8008878 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800886c:	f01e fed7 	bl	802761e <__cxa_guard_release>
    return verdana_10_4bpp;
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 8008872:	4618      	mov	r0, r3
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	2400b2b4 	.word	0x2400b2b4
 800887c:	0802c42c 	.word	0x0802c42c
 8008880:	0802c438 	.word	0x0802c438
 8008884:	90000178 	.word	0x90000178
 8008888:	2400b288 	.word	0x2400b288
 800888c:	080087dd 	.word	0x080087dd

08008890 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__tcf_0+0xc>)
 8008896:	f7fe ff15 	bl	80076c4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800889a:	bd80      	pop	{r7, pc}
 800889c:	2400b2b8 	.word	0x2400b2b8

080088a0 <_Z23getFont_verdana_20_4bppv>:
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08e      	sub	sp, #56	; 0x38
 80088a4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80088a6:	4b21      	ldr	r3, [pc, #132]	; (800892c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	f3bf 8f5b 	dmb	ish
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	bf0c      	ite	eq
 80088b8:	2301      	moveq	r3, #1
 80088ba:	2300      	movne	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d030      	beq.n	8008924 <_Z23getFont_verdana_20_4bppv+0x84>
 80088c2:	481a      	ldr	r0, [pc, #104]	; (800892c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80088c4:	f01e fe9f 	bl	8027606 <__cxa_guard_acquire>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bf14      	ite	ne
 80088ce:	2301      	movne	r3, #1
 80088d0:	2300      	moveq	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d025      	beq.n	8008924 <_Z23getFont_verdana_20_4bppv+0x84>
 80088d8:	2300      	movs	r3, #0
 80088da:	930c      	str	r3, [sp, #48]	; 0x30
 80088dc:	2300      	movs	r3, #0
 80088de:	930b      	str	r3, [sp, #44]	; 0x2c
 80088e0:	2300      	movs	r3, #0
 80088e2:	930a      	str	r3, [sp, #40]	; 0x28
 80088e4:	233f      	movs	r3, #63	; 0x3f
 80088e6:	9309      	str	r3, [sp, #36]	; 0x24
 80088e8:	4b11      	ldr	r3, [pc, #68]	; (8008930 <_Z23getFont_verdana_20_4bppv+0x90>)
 80088ea:	9308      	str	r3, [sp, #32]
 80088ec:	4b11      	ldr	r3, [pc, #68]	; (8008934 <_Z23getFont_verdana_20_4bppv+0x94>)
 80088ee:	9307      	str	r3, [sp, #28]
 80088f0:	2300      	movs	r3, #0
 80088f2:	9306      	str	r3, [sp, #24]
 80088f4:	2300      	movs	r3, #0
 80088f6:	9305      	str	r3, [sp, #20]
 80088f8:	2301      	movs	r3, #1
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	2304      	movs	r3, #4
 80088fe:	9303      	str	r3, [sp, #12]
 8008900:	2300      	movs	r3, #0
 8008902:	9302      	str	r3, [sp, #8]
 8008904:	2300      	movs	r3, #0
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	2314      	movs	r3, #20
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	2314      	movs	r3, #20
 800890e:	2201      	movs	r2, #1
 8008910:	4909      	ldr	r1, [pc, #36]	; (8008938 <_Z23getFont_verdana_20_4bppv+0x98>)
 8008912:	480a      	ldr	r0, [pc, #40]	; (800893c <_Z23getFont_verdana_20_4bppv+0x9c>)
 8008914:	f7ff fa68 	bl	8007de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008918:	4809      	ldr	r0, [pc, #36]	; (8008940 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800891a:	f01e febf 	bl	802769c <atexit>
 800891e:	4803      	ldr	r0, [pc, #12]	; (800892c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008920:	f01e fe7d 	bl	802761e <__cxa_guard_release>
    return verdana_20_4bpp;
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8008926:	4618      	mov	r0, r3
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	2400b2e4 	.word	0x2400b2e4
 8008930:	0802c430 	.word	0x0802c430
 8008934:	0802c43c 	.word	0x0802c43c
 8008938:	90000188 	.word	0x90000188
 800893c:	2400b2b8 	.word	0x2400b2b8
 8008940:	08008891 	.word	0x08008891

08008944 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
 8008948:	4801      	ldr	r0, [pc, #4]	; (8008950 <__tcf_0+0xc>)
 800894a:	f7fe febb 	bl	80076c4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800894e:	bd80      	pop	{r7, pc}
 8008950:	2400b2e8 	.word	0x2400b2e8

08008954 <_Z23getFont_verdana_40_4bppv>:
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08e      	sub	sp, #56	; 0x38
 8008958:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800895a:	4b21      	ldr	r3, [pc, #132]	; (80089e0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	f3bf 8f5b 	dmb	ish
 8008962:	b2db      	uxtb	r3, r3
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	bf0c      	ite	eq
 800896c:	2301      	moveq	r3, #1
 800896e:	2300      	movne	r3, #0
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d030      	beq.n	80089d8 <_Z23getFont_verdana_40_4bppv+0x84>
 8008976:	481a      	ldr	r0, [pc, #104]	; (80089e0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008978:	f01e fe45 	bl	8027606 <__cxa_guard_acquire>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	bf14      	ite	ne
 8008982:	2301      	movne	r3, #1
 8008984:	2300      	moveq	r3, #0
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d025      	beq.n	80089d8 <_Z23getFont_verdana_40_4bppv+0x84>
 800898c:	2300      	movs	r3, #0
 800898e:	930c      	str	r3, [sp, #48]	; 0x30
 8008990:	2300      	movs	r3, #0
 8008992:	930b      	str	r3, [sp, #44]	; 0x2c
 8008994:	2300      	movs	r3, #0
 8008996:	930a      	str	r3, [sp, #40]	; 0x28
 8008998:	233f      	movs	r3, #63	; 0x3f
 800899a:	9309      	str	r3, [sp, #36]	; 0x24
 800899c:	4b11      	ldr	r3, [pc, #68]	; (80089e4 <_Z23getFont_verdana_40_4bppv+0x90>)
 800899e:	9308      	str	r3, [sp, #32]
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <_Z23getFont_verdana_40_4bppv+0x94>)
 80089a2:	9307      	str	r3, [sp, #28]
 80089a4:	2300      	movs	r3, #0
 80089a6:	9306      	str	r3, [sp, #24]
 80089a8:	2300      	movs	r3, #0
 80089aa:	9305      	str	r3, [sp, #20]
 80089ac:	2301      	movs	r3, #1
 80089ae:	9304      	str	r3, [sp, #16]
 80089b0:	2304      	movs	r3, #4
 80089b2:	9303      	str	r3, [sp, #12]
 80089b4:	2300      	movs	r3, #0
 80089b6:	9302      	str	r3, [sp, #8]
 80089b8:	2300      	movs	r3, #0
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	2328      	movs	r3, #40	; 0x28
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	2328      	movs	r3, #40	; 0x28
 80089c2:	2201      	movs	r2, #1
 80089c4:	4909      	ldr	r1, [pc, #36]	; (80089ec <_Z23getFont_verdana_40_4bppv+0x98>)
 80089c6:	480a      	ldr	r0, [pc, #40]	; (80089f0 <_Z23getFont_verdana_40_4bppv+0x9c>)
 80089c8:	f7ff fa0e 	bl	8007de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80089cc:	4809      	ldr	r0, [pc, #36]	; (80089f4 <_Z23getFont_verdana_40_4bppv+0xa0>)
 80089ce:	f01e fe65 	bl	802769c <atexit>
 80089d2:	4803      	ldr	r0, [pc, #12]	; (80089e0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80089d4:	f01e fe23 	bl	802761e <__cxa_guard_release>
    return verdana_40_4bpp;
 80089d8:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 80089da:	4618      	mov	r0, r3
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	2400b314 	.word	0x2400b314
 80089e4:	0802c434 	.word	0x0802c434
 80089e8:	0802c440 	.word	0x0802c440
 80089ec:	90000198 	.word	0x90000198
 80089f0:	2400b2e8 	.word	0x2400b2e8
 80089f4:	08008945 	.word	0x08008945

080089f8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	460b      	mov	r3, r1
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8008a06:	2300      	movs	r3, #0
    }
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008a1c:	2300      	movs	r3, #0
    }
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008a32:	2300      	movs	r3, #0
    }
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8008a4e:	4a07      	ldr	r2, [pc, #28]	; (8008a6c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6013      	str	r3, [r2, #0]
        fonts = f;
 8008a54:	4a06      	ldr	r2, [pc, #24]	; (8008a70 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8008a5a:	4a06      	ldr	r2, [pc, #24]	; (8008a74 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8008a5c:	88fb      	ldrh	r3, [r7, #6]
 8008a5e:	8013      	strh	r3, [r2, #0]
    }
 8008a60:	bf00      	nop
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	240262dc 	.word	0x240262dc
 8008a70:	240262e4 	.word	0x240262e4
 8008a74:	240262e0 	.word	0x240262e0

08008a78 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008a78:	b40e      	push	{r1, r2, r3}
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8008a82:	f107 0320 	add.w	r3, r7, #32
 8008a86:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	69fa      	ldr	r2, [r7, #28]
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f014 feb2 	bl	801d7f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008a94:	4603      	mov	r3, r0
 8008a96:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008a98:	89fb      	ldrh	r3, [r7, #14]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008aa4:	b003      	add	sp, #12
 8008aa6:	4770      	bx	lr

08008aa8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008aa8:	b40c      	push	{r2, r3}
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8008ab6:	f107 031c 	add.w	r3, r7, #28
 8008aba:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008abc:	78f9      	ldrb	r1, [r7, #3]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f014 fe98 	bl	801d7f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008acc:	89fb      	ldrh	r3, [r7, #14]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ad8:	b002      	add	sp, #8
 8008ada:	4770      	bx	lr

08008adc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08a      	sub	sp, #40	; 0x28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d016      	beq.n	8008b1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3322      	adds	r3, #34	; 0x22
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	8adb      	ldrh	r3, [r3, #22]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8008afe:	4b43      	ldr	r3, [pc, #268]	; (8008c0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008b00:	4a43      	ldr	r2, [pc, #268]	; (8008c10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008b02:	21c5      	movs	r1, #197	; 0xc5
 8008b04:	4843      	ldr	r0, [pc, #268]	; (8008c14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008b06:	f01e fdab 	bl	8027660 <__assert_func>
            return buffer[pos];
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	8a9b      	ldrh	r3, [r3, #20]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d06a      	beq.n	8008bfa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f016 f8cb 	bl	801ecc0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3322      	adds	r3, #34	; 0x22
 8008b2e:	623b      	str	r3, [r7, #32]
 8008b30:	2301      	movs	r3, #1
 8008b32:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	8adb      	ldrh	r3, [r3, #22]
 8008b38:	8bfa      	ldrh	r2, [r7, #30]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d305      	bcc.n	8008b4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8008b3e:	4b36      	ldr	r3, [pc, #216]	; (8008c18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8008b40:	4a36      	ldr	r2, [pc, #216]	; (8008c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8008b42:	21cb      	movs	r1, #203	; 0xcb
 8008b44:	4833      	ldr	r0, [pc, #204]	; (8008c14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008b46:	f01e fd8b 	bl	8027660 <__assert_func>
            const uint16_t index = pos + offset;
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	8a9a      	ldrh	r2, [r3, #20]
 8008b4e:	8bfb      	ldrh	r3, [r7, #30]
 8008b50:	4413      	add	r3, r2
 8008b52:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8008b54:	8bbb      	ldrh	r3, [r7, #28]
 8008b56:	2b09      	cmp	r3, #9
 8008b58:	d801      	bhi.n	8008b5e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8008b5a:	8bbb      	ldrh	r3, [r7, #28]
 8008b5c:	e001      	b.n	8008b62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008b5e:	8bbb      	ldrh	r3, [r7, #28]
 8008b60:	3b0a      	subs	r3, #10
 8008b62:	6a3a      	ldr	r2, [r7, #32]
 8008b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b68:	f640 123f 	movw	r2, #2367	; 0x93f
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	bf0c      	ite	eq
 8008b70:	2301      	moveq	r3, #1
 8008b72:	2300      	movne	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d03f      	beq.n	8008bfa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3322      	adds	r3, #34	; 0x22
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	3222      	adds	r2, #34	; 0x22
 8008b82:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	8ad2      	ldrh	r2, [r2, #22]
 8008b88:	2a00      	cmp	r2, #0
 8008b8a:	d105      	bne.n	8008b98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008b8c:	4b1f      	ldr	r3, [pc, #124]	; (8008c0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008b8e:	4a20      	ldr	r2, [pc, #128]	; (8008c10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008b90:	21c5      	movs	r1, #197	; 0xc5
 8008b92:	4820      	ldr	r0, [pc, #128]	; (8008c14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008b94:	f01e fd64 	bl	8027660 <__assert_func>
            return buffer[pos];
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	8a92      	ldrh	r2, [r2, #20]
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008ba4:	613b      	str	r3, [r7, #16]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	8adb      	ldrh	r3, [r3, #22]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d806      	bhi.n	8008bc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8008bb2:	4b1b      	ldr	r3, [pc, #108]	; (8008c20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008bb4:	4a1b      	ldr	r2, [pc, #108]	; (8008c24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008bb6:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8008bba:	4816      	ldr	r0, [pc, #88]	; (8008c14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008bbc:	f01e fd50 	bl	8027660 <__assert_func>
            const uint16_t index = pos + 1;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	8a9b      	ldrh	r3, [r3, #20]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008bc8:	89bb      	ldrh	r3, [r7, #12]
 8008bca:	2b09      	cmp	r3, #9
 8008bcc:	d801      	bhi.n	8008bd2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008bce:	89bb      	ldrh	r3, [r7, #12]
 8008bd0:	e000      	b.n	8008bd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	89f9      	ldrh	r1, [r7, #14]
 8008bd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008bdc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3322      	adds	r3, #34	; 0x22
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	f640 133f 	movw	r3, #2367	; 0x93f
 8008be8:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	8a9b      	ldrh	r3, [r3, #20]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	8afa      	ldrh	r2, [r7, #22]
 8008bf4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8008bf8:	bf00      	nop
        }
    }
    return getNextChar();
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f015 ff62 	bl	801eac4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008c00:	4603      	mov	r3, r0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3728      	adds	r7, #40	; 0x28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	0802a640 	.word	0x0802a640
 8008c10:	0802a64c 	.word	0x0802a64c
 8008c14:	0802a6f8 	.word	0x0802a6f8
 8008c18:	0802a744 	.word	0x0802a744
 8008c1c:	0802a754 	.word	0x0802a754
 8008c20:	0802a828 	.word	0x0802a828
 8008c24:	0802a834 	.word	0x0802a834

08008c28 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f015 ff10 	bl	801ea56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8008c36:	bf00      	nop
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008c40:	b590      	push	{r4, r7, lr}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d127      	bne.n	8008ca4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8008c54:	88fb      	ldrh	r3, [r7, #6]
 8008c56:	4a1e      	ldr	r2, [pc, #120]	; (8008cd0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d016      	beq.n	8008c8e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8008c60:	88fb      	ldrh	r3, [r7, #6]
 8008c62:	4a1b      	ldr	r2, [pc, #108]	; (8008cd0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c68:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4413      	add	r3, r2
 8008c72:	4a18      	ldr	r2, [pc, #96]	; (8008cd4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008c74:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	4a16      	ldr	r2, [pc, #88]	; (8008cd8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008c80:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	4413      	add	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	e00a      	b.n	8008ca4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8008c8e:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008c90:	4a12      	ldr	r2, [pc, #72]	; (8008cdc <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8008c92:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008c94:	4a12      	ldr	r2, [pc, #72]	; (8008ce0 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8008c96:	4b10      	ldr	r3, [pc, #64]	; (8008cd8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008c98:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008c9a:	88fb      	ldrh	r3, [r7, #6]
 8008c9c:	4a11      	ldr	r2, [pc, #68]	; (8008ce4 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8008c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ca2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00d      	beq.n	8008cc6 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8008caa:	4a0f      	ldr	r2, [pc, #60]	; (8008ce8 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8008cac:	88fb      	ldrh	r3, [r7, #6]
 8008cae:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8008cb0:	f000 f824 	bl	8008cfc <_ZN17TypedTextDatabase8getFontsEv>
 8008cb4:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8008cb6:	f000 f819 	bl	8008cec <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f7ff febd 	bl	8008a40 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd90      	pop	{r4, r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	2400b318 	.word	0x2400b318
 8008cd4:	2400b320 	.word	0x2400b320
 8008cd8:	2400b324 	.word	0x2400b324
 8008cdc:	900001ac 	.word	0x900001ac
 8008ce0:	900001a8 	.word	0x900001a8
 8008ce4:	900001b4 	.word	0x900001b4
 8008ce8:	2400b31c 	.word	0x2400b31c

08008cec <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
    return 0;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8008d00:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	2400b328 	.word	0x2400b328

08008d10 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d113      	bne.n	8008d48 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d10e      	bne.n	8008d48 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8008d2a:	f7ff fdb9 	bl	80088a0 <_Z23getFont_verdana_20_4bppv>
 8008d2e:	4603      	mov	r3, r0
};
 8008d30:	4a07      	ldr	r2, [pc, #28]	; (8008d50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008d32:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8008d34:	f7ff fe0e 	bl	8008954 <_Z23getFont_verdana_40_4bppv>
 8008d38:	4603      	mov	r3, r0
};
 8008d3a:	4a05      	ldr	r2, [pc, #20]	; (8008d50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008d3c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8008d3e:	f7ff fd55 	bl	80087ec <_Z23getFont_verdana_10_4bppv>
 8008d42:	4603      	mov	r3, r0
};
 8008d44:	4a02      	ldr	r2, [pc, #8]	; (8008d50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008d46:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	2400b328 	.word	0x2400b328

08008d54 <_GLOBAL__sub_I_touchgfx_fonts>:
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008d5c:	2001      	movs	r0, #1
 8008d5e:	f7ff ffd7 	bl	8008d10 <_Z41__static_initialization_and_destruction_0ii>
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	68b9      	ldr	r1, [r7, #8]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe fd9a 	bl	80078b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008d7c:	4a03      	ldr	r2, [pc, #12]	; (8008d8c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	601a      	str	r2, [r3, #0]
{

}
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	0802ac5c 	.word	0x0802ac5c

08008d90 <_ZN5ModelC1Ev>:
#include <gui/model/ModelListener.hpp>
#include "stm32h7xx_hal.h"

extern TIM_HandleTypeDef htim5;

Model::Model() : modelListener(0)
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]
{

}
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <_ZN5Model4tickEv>:

void Model::tick()
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]

}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <_ZN5Model11SliderValueEi>:

// balaji: Call the HAL function
void Model::SliderValue(int value)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, value);
 8008dca:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <_ZN5Model11SliderValueEi+0x20>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	2400b198 	.word	0x2400b198

08008de4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
    {
    }
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
    {
    }
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
    {
 8008e14:	4a04      	ldr	r2, [pc, #16]	; (8008e28 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	601a      	str	r2, [r3, #0]
    }
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	0802b524 	.word	0x0802b524

08008e2c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
    }
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ffe9 	bl	8008e0c <_ZN8touchgfx9PresenterD1Ev>
 8008e3a:	2104      	movs	r1, #4
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f01e fbe0 	bl	8027602 <_ZdlPvj>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4618      	mov	r0, r3
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
    {
 8008e54:	4a04      	ldr	r2, [pc, #16]	; (8008e68 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	601a      	str	r2, [r3, #0]
    }
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	0802b524 	.word	0x0802b524

08008e6c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	4a06      	ldr	r2, [pc, #24]	; (8008e90 <_ZN13ModelListenerC1Ev+0x24>)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	605a      	str	r2, [r3, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4618      	mov	r0, r3
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	0802b514 	.word	0x0802b514

08008e94 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	4a04      	ldr	r2, [pc, #16]	; (8008eb0 <_ZN13ModelListenerD1Ev+0x1c>)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	0802b514 	.word	0x0802b514

08008eb4 <_ZN13ModelListenerD0Ev>:
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff ffe9 	bl	8008e94 <_ZN13ModelListenerD1Ev>
 8008ec2:	2108      	movs	r1, #8
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f01e fb9c 	bl	8027602 <_ZdlPvj>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	4a09      	ldr	r2, [pc, #36]	; (8008f04 <_ZN16Screen1PresenterD1Ev+0x30>)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	4a09      	ldr	r2, [pc, #36]	; (8008f08 <_ZN16Screen1PresenterD1Ev+0x34>)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	605a      	str	r2, [r3, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff ffd1 	bl	8008e94 <_ZN13ModelListenerD1Ev>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff ff89 	bl	8008e0c <_ZN8touchgfx9PresenterD1Ev>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	0802b4e8 	.word	0x0802b4e8
 8008f08:	0802b504 	.word	0x0802b504

08008f0c <_ZThn4_N16Screen1PresenterD1Ev>:
 8008f0c:	f1a0 0004 	sub.w	r0, r0, #4
 8008f10:	e7e0      	b.n	8008ed4 <_ZN16Screen1PresenterD1Ev>
 8008f12:	bf00      	nop

08008f14 <_ZN16Screen1PresenterD0Ev>:
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff ffd9 	bl	8008ed4 <_ZN16Screen1PresenterD1Ev>
 8008f22:	2110      	movs	r1, #16
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f01e fb6c 	bl	8027602 <_ZdlPvj>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <_ZThn4_N16Screen1PresenterD0Ev>:
 8008f34:	f1a0 0004 	sub.w	r0, r0, #4
 8008f38:	e7ec      	b.n	8008f14 <_ZN16Screen1PresenterD0Ev>
	...

08008f3c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
    : view(v)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7ff ff7f 	bl	8008e4c <_ZN8touchgfx9PresenterC1Ev>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3304      	adds	r3, #4
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff ff8a 	bl	8008e6c <_ZN13ModelListenerC1Ev>
 8008f58:	4a06      	ldr	r2, [pc, #24]	; (8008f74 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	4a06      	ldr	r2, [pc, #24]	; (8008f78 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	605a      	str	r2, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	60da      	str	r2, [r3, #12]
{

}
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	0802b4e8 	.word	0x0802b4e8
 8008f78:	0802b504 	.word	0x0802b504

08008f7c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]

}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]

}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <_ZN16Screen1Presenter11SliderValueEi>:

// balaji: Call the model method
void Screen1Presenter::SliderValue(int value)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
	model->SliderValue(value);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7ff ff03 	bl	8008dc0 <_ZN5Model11SliderValueEi>
}
 8008fba:	bf00      	nop
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	4a05      	ldr	r2, [pc, #20]	; (8008fe4 <_ZN11Screen1ViewD1Ev+0x20>)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff fa19 	bl	800840c <_ZN15Screen1ViewBaseD1Ev>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	0802b53c 	.word	0x0802b53c

08008fe8 <_ZN11Screen1ViewD0Ev>:
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff ffe7 	bl	8008fc4 <_ZN11Screen1ViewD1Ev>
 8008ff6:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f01e fb01 	bl	8027602 <_ZdlPvj>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
	...

0800900c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff f90c 	bl	8008234 <_ZN15Screen1ViewBaseC1Ev>
 800901c:	4a03      	ldr	r2, [pc, #12]	; (800902c <_ZN11Screen1ViewC1Ev+0x20>)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	601a      	str	r2, [r3, #0]
{

}
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4618      	mov	r0, r3
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	0802b53c 	.word	0x0802b53c

08009030 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff fa1f 	bl	800847e <_ZN15Screen1ViewBase11setupScreenEv>
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4618      	mov	r0, r3
 8009054:	f7ff f83e 	bl	80080d4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <_ZN11Screen1View11SliderValueEi>:

// balaji: Call the presenter method
void Screen1View::SliderValue(int value)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
	presenter->SliderValue(value);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3310      	adds	r3, #16
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	4610      	mov	r0, r2
 800907c:	4798      	blx	r3
}
 800907e:	bf00      	nop
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d103      	bne.n	80090a0 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8009098:	f04f 33ff 	mov.w	r3, #4294967295
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	e02c      	b.n	80090fa <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	891a      	ldrh	r2, [r3, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	691a      	ldr	r2, [r3, #16]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	695a      	ldr	r2, [r3, #20]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a0c      	ldr	r2, [pc, #48]	; (8009104 <FT5336_RegisterBusIO+0x7c>)
 80090d4:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a0b      	ldr	r2, [pc, #44]	; (8009108 <FT5336_RegisterBusIO+0x80>)
 80090da:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d004      	beq.n	80090f4 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4798      	blx	r3
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	e002      	b.n	80090fa <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295
 80090f8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80090fa:	68fb      	ldr	r3, [r7, #12]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	08009501 	.word	0x08009501
 8009108:	08009535 	.word	0x08009535

0800910c <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2201      	movs	r2, #1
 800911a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2201      	movs	r2, #1
 8009120:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2205      	movs	r2, #5
 8009126:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800912e:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	f44f 7288 	mov.w	r2, #272	; 0x110
 8009136:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10d      	bne.n	8009178 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f987 	bl	8009476 <FT5336_DisableIT>
 8009168:	4602      	mov	r2, r0
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4413      	add	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800917e:	f04f 33ff 	mov.w	r3, #4294967295
 8009182:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009184:	68fb      	ldr	r3, [r7, #12]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d103      	bne.n	80091ac <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 80091ac:	68fb      	ldr	r3, [r7, #12]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f103 0218 	add.w	r2, r3, #24
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f000 fa25 	bl	8009622 <ft5336_radian_value>
 80091d8:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f103 0218 	add.w	r2, r3, #24
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f000 fa2b 	bl	8009644 <ft5336_offset_left_right>
 80091ee:	4602      	mov	r2, r0
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4413      	add	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f103 0218 	add.w	r2, r3, #24
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	b2db      	uxtb	r3, r3
 8009202:	4619      	mov	r1, r3
 8009204:	4610      	mov	r0, r2
 8009206:	f000 fa2e 	bl	8009666 <ft5336_offset_up_down>
 800920a:	4602      	mov	r2, r0
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4413      	add	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f103 0218 	add.w	r2, r3, #24
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	4619      	mov	r1, r3
 8009220:	4610      	mov	r0, r2
 8009222:	f000 fa31 	bl	8009688 <ft5336_disatnce_left_right>
 8009226:	4602      	mov	r2, r0
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f103 0218 	add.w	r2, r3, #24
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	b2db      	uxtb	r3, r3
 800923a:	4619      	mov	r1, r3
 800923c:	4610      	mov	r0, r2
 800923e:	f000 fa34 	bl	80096aa <ft5336_distance_up_down>
 8009242:	4602      	mov	r2, r0
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f103 0218 	add.w	r2, r3, #24
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	4619      	mov	r1, r3
 8009258:	4610      	mov	r0, r2
 800925a:	f000 fa37 	bl	80096cc <ft5336_distance_zoom>
 800925e:	4602      	mov	r2, r0
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4413      	add	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800926c:	f04f 33ff 	mov.w	r3, #4294967295
 8009270:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009272:	68fb      	ldr	r3, [r7, #12]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	3318      	adds	r3, #24
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	4618      	mov	r0, r3
 800928e:	f000 fa3f 	bl	8009710 <ft5336_chip_id>
 8009292:	4603      	mov	r3, r0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f908 	bl	80094c0 <FT5336_DetectTouch>
 80092b0:	4603      	mov	r3, r0
 80092b2:	461a      	mov	r2, r3
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f103 0018 	add.w	r0, r3, #24
 80092be:	f107 0208 	add.w	r2, r7, #8
 80092c2:	2304      	movs	r3, #4
 80092c4:	2103      	movs	r1, #3
 80092c6:	f000 f94f 	bl	8009568 <ft5336_read_reg>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80092d0:	f04f 33ff 	mov.w	r3, #4294967295
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	e00f      	b.n	80092f8 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80092d8:	7a3b      	ldrb	r3, [r7, #8]
 80092da:	021b      	lsls	r3, r3, #8
 80092dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80092e0:	7a7a      	ldrb	r2, [r7, #9]
 80092e2:	431a      	orrs	r2, r3
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80092e8:	7abb      	ldrb	r3, [r7, #10]
 80092ea:	021b      	lsls	r3, r3, #8
 80092ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80092f0:	7afa      	ldrb	r2, [r7, #11]
 80092f2:	431a      	orrs	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80092f8:	68fb      	ldr	r3, [r7, #12]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b08c      	sub	sp, #48	; 0x30
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f8d5 	bl	80094c0 <FT5336_DetectTouch>
 8009316:	4603      	mov	r3, r0
 8009318:	461a      	mov	r2, r3
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f103 0018 	add.w	r0, r3, #24
 8009324:	f107 0208 	add.w	r2, r7, #8
 8009328:	231e      	movs	r3, #30
 800932a:	2103      	movs	r1, #3
 800932c:	f000 f91c 	bl	8009568 <ft5336_read_reg>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 8009336:	f04f 33ff 	mov.w	r3, #4294967295
 800933a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800933c:	e077      	b.n	800942e <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800933e:	2300      	movs	r3, #0
 8009340:	62bb      	str	r3, [r7, #40]	; 0x28
 8009342:	e071      	b.n	8009428 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8009344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009346:	4613      	mov	r3, r2
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	4413      	add	r3, r2
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	3330      	adds	r3, #48	; 0x30
 8009350:	443b      	add	r3, r7
 8009352:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009356:	021b      	lsls	r3, r3, #8
 8009358:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800935c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800935e:	4613      	mov	r3, r2
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	4413      	add	r3, r2
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	3301      	adds	r3, #1
 8009368:	3330      	adds	r3, #48	; 0x30
 800936a:	443b      	add	r3, r7
 800936c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009370:	ea41 0203 	orr.w	r2, r1, r3
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	440b      	add	r3, r1
 800937c:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800937e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009380:	4613      	mov	r3, r2
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	4413      	add	r3, r2
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	3302      	adds	r3, #2
 800938a:	3330      	adds	r3, #48	; 0x30
 800938c:	443b      	add	r3, r7
 800938e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8009398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800939a:	4613      	mov	r3, r2
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	4413      	add	r3, r2
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	3303      	adds	r3, #3
 80093a4:	3330      	adds	r3, #48	; 0x30
 80093a6:	443b      	add	r3, r7
 80093a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80093ac:	4319      	orrs	r1, r3
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093b2:	3206      	adds	r2, #6
 80093b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80093b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ba:	4613      	mov	r3, r2
 80093bc:	005b      	lsls	r3, r3, #1
 80093be:	4413      	add	r3, r2
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	3330      	adds	r3, #48	; 0x30
 80093c4:	443b      	add	r3, r7
 80093c6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80093ca:	099b      	lsrs	r3, r3, #6
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	4619      	mov	r1, r3
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093d4:	3210      	adds	r2, #16
 80093d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80093da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093dc:	4613      	mov	r3, r2
 80093de:	005b      	lsls	r3, r3, #1
 80093e0:	4413      	add	r3, r2
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	3304      	adds	r3, #4
 80093e6:	3330      	adds	r3, #48	; 0x30
 80093e8:	443b      	add	r3, r7
 80093ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80093ee:	4619      	mov	r1, r3
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	330a      	adds	r3, #10
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80093fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093fe:	4613      	mov	r3, r2
 8009400:	005b      	lsls	r3, r3, #1
 8009402:	4413      	add	r3, r2
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	3305      	adds	r3, #5
 8009408:	3330      	adds	r3, #48	; 0x30
 800940a:	443b      	add	r3, r7
 800940c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009410:	091b      	lsrs	r3, r3, #4
 8009412:	b2db      	uxtb	r3, r3
 8009414:	4619      	mov	r1, r3
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	3314      	adds	r3, #20
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	3301      	adds	r3, #1
 8009426:	62bb      	str	r3, [r7, #40]	; 0x28
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	2b04      	cmp	r3, #4
 800942c:	d98a      	bls.n	8009344 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009430:	4618      	mov	r0, r3
 8009432:	3730      	adds	r7, #48	; 0x30
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3318      	adds	r3, #24
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	4618      	mov	r0, r3
 800944a:	f000 f8bb 	bl	80095c4 <ft5336_gest_id>
 800944e:	4603      	mov	r3, r0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3318      	adds	r3, #24
 8009464:	2101      	movs	r1, #1
 8009466:	4618      	mov	r0, r3
 8009468:	f000 f941 	bl	80096ee <ft5336_g_mode>
 800946c:	4603      	mov	r3, r0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3318      	adds	r3, #24
 8009482:	2100      	movs	r1, #0
 8009484:	4618      	mov	r0, r3
 8009486:	f000 f932 	bl	80096ee <ft5336_g_mode>
 800948a:	4603      	mov	r3, r0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3318      	adds	r3, #24
 80094cc:	f107 020b 	add.w	r2, r7, #11
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 f886 	bl	80095e4 <ft5336_td_status>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 80094de:	f04f 33ff 	mov.w	r3, #4294967295
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	e007      	b.n	80094f6 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	2b05      	cmp	r3, #5
 80094ea:	d902      	bls.n	80094f2 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	e001      	b.n	80094f6 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80094f2:	7afb      	ldrb	r3, [r7, #11]
 80094f4:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80094f6:	68fb      	ldr	r3, [r7, #12]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8009500:	b590      	push	{r4, r7, lr}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	607a      	str	r2, [r7, #4]
 800950a:	461a      	mov	r2, r3
 800950c:	460b      	mov	r3, r1
 800950e:	72fb      	strb	r3, [r7, #11]
 8009510:	4613      	mov	r3, r2
 8009512:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	691c      	ldr	r4, [r3, #16]
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	8918      	ldrh	r0, [r3, #8]
 8009520:	7afb      	ldrb	r3, [r7, #11]
 8009522:	b299      	uxth	r1, r3
 8009524:	893b      	ldrh	r3, [r7, #8]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	47a0      	blx	r4
 800952a:	4603      	mov	r3, r0
}
 800952c:	4618      	mov	r0, r3
 800952e:	371c      	adds	r7, #28
 8009530:	46bd      	mov	sp, r7
 8009532:	bd90      	pop	{r4, r7, pc}

08009534 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8009534:	b590      	push	{r4, r7, lr}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	607a      	str	r2, [r7, #4]
 800953e:	461a      	mov	r2, r3
 8009540:	460b      	mov	r3, r1
 8009542:	72fb      	strb	r3, [r7, #11]
 8009544:	4613      	mov	r3, r2
 8009546:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	68dc      	ldr	r4, [r3, #12]
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	8918      	ldrh	r0, [r3, #8]
 8009554:	7afb      	ldrb	r3, [r7, #11]
 8009556:	b299      	uxth	r1, r3
 8009558:	893b      	ldrh	r3, [r7, #8]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	47a0      	blx	r4
 800955e:	4603      	mov	r3, r0
}
 8009560:	4618      	mov	r0, r3
 8009562:	371c      	adds	r7, #28
 8009564:	46bd      	mov	sp, r7
 8009566:	bd90      	pop	{r4, r7, pc}

08009568 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8009568:	b590      	push	{r4, r7, lr}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	607a      	str	r2, [r7, #4]
 8009572:	461a      	mov	r2, r3
 8009574:	460b      	mov	r3, r1
 8009576:	72fb      	strb	r3, [r7, #11]
 8009578:	4613      	mov	r3, r2
 800957a:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	685c      	ldr	r4, [r3, #4]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6898      	ldr	r0, [r3, #8]
 8009584:	893b      	ldrh	r3, [r7, #8]
 8009586:	7af9      	ldrb	r1, [r7, #11]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	47a0      	blx	r4
 800958c:	4603      	mov	r3, r0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	bd90      	pop	{r4, r7, pc}

08009596 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8009596:	b590      	push	{r4, r7, lr}
 8009598:	b085      	sub	sp, #20
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	607a      	str	r2, [r7, #4]
 80095a0:	461a      	mov	r2, r3
 80095a2:	460b      	mov	r3, r1
 80095a4:	72fb      	strb	r3, [r7, #11]
 80095a6:	4613      	mov	r3, r2
 80095a8:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681c      	ldr	r4, [r3, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6898      	ldr	r0, [r3, #8]
 80095b2:	893b      	ldrh	r3, [r7, #8]
 80095b4:	7af9      	ldrb	r1, [r7, #11]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	47a0      	blx	r4
 80095ba:	4603      	mov	r3, r0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd90      	pop	{r4, r7, pc}

080095c4 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80095ce:	2301      	movs	r3, #1
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	2101      	movs	r1, #1
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff ffc7 	bl	8009568 <ft5336_read_reg>
 80095da:	4603      	mov	r3, r0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80095ee:	2301      	movs	r3, #1
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	2102      	movs	r1, #2
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7ff ffb7 	bl	8009568 <ft5336_read_reg>
 80095fa:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10a      	bne.n	8009618 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	b2da      	uxtb	r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781a      	ldrb	r2, [r3, #0]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8009618:	68fb      	ldr	r3, [r7, #12]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800962e:	1cfa      	adds	r2, r7, #3
 8009630:	2301      	movs	r3, #1
 8009632:	2191      	movs	r1, #145	; 0x91
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ffae 	bl	8009596 <ft5336_write_reg>
 800963a:	4603      	mov	r3, r0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8009650:	1cfa      	adds	r2, r7, #3
 8009652:	2301      	movs	r3, #1
 8009654:	2192      	movs	r1, #146	; 0x92
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff ff9d 	bl	8009596 <ft5336_write_reg>
 800965c:	4603      	mov	r3, r0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8009672:	1cfa      	adds	r2, r7, #3
 8009674:	2301      	movs	r3, #1
 8009676:	2193      	movs	r1, #147	; 0x93
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff ff8c 	bl	8009596 <ft5336_write_reg>
 800967e:	4603      	mov	r3, r0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8009694:	1cfa      	adds	r2, r7, #3
 8009696:	2301      	movs	r3, #1
 8009698:	2194      	movs	r1, #148	; 0x94
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff ff7b 	bl	8009596 <ft5336_write_reg>
 80096a0:	4603      	mov	r3, r0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80096b6:	1cfa      	adds	r2, r7, #3
 80096b8:	2301      	movs	r3, #1
 80096ba:	2195      	movs	r1, #149	; 0x95
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff ff6a 	bl	8009596 <ft5336_write_reg>
 80096c2:	4603      	mov	r3, r0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80096d8:	1cfa      	adds	r2, r7, #3
 80096da:	2301      	movs	r3, #1
 80096dc:	2196      	movs	r1, #150	; 0x96
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7ff ff59 	bl	8009596 <ft5336_write_reg>
 80096e4:	4603      	mov	r3, r0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	460b      	mov	r3, r1
 80096f8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80096fa:	1cfa      	adds	r2, r7, #3
 80096fc:	2301      	movs	r3, #1
 80096fe:	21a4      	movs	r1, #164	; 0xa4
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff ff48 	bl	8009596 <ft5336_write_reg>
 8009706:	4603      	mov	r3, r0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800971a:	2301      	movs	r3, #1
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	21a8      	movs	r1, #168	; 0xa8
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff ff21 	bl	8009568 <ft5336_read_reg>
 8009726:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d107      	bne.n	800973e <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781a      	ldrb	r2, [r3, #0]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781a      	ldrb	r2, [r3, #0]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800973e:	68fb      	ldr	r3, [r7, #12]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009756:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800975e:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009766:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800976e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009776:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800977e:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009786:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800978e:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009796:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8009798:	2300      	movs	r3, #0
};
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b09c      	sub	sp, #112	; 0x70
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70fb      	strb	r3, [r7, #3]
 80097b2:	4613      	mov	r3, r2
 80097b4:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 80097b6:	f107 0320 	add.w	r3, r7, #32
 80097ba:	2250      	movs	r2, #80	; 0x50
 80097bc:	2100      	movs	r1, #0
 80097be:	4618      	mov	r0, r3
 80097c0:	f01d ffde 	bl	8027780 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80097c4:	f107 030c 	add.w	r3, r7, #12
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	605a      	str	r2, [r3, #4]
 80097ce:	609a      	str	r2, [r3, #8]
 80097d0:	60da      	str	r2, [r3, #12]
 80097d2:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d105      	bne.n	80097e6 <MX25LM51245G_AutoPollingMemReady+0x40>
 80097da:	78bb      	ldrb	r3, [r7, #2]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d102      	bne.n	80097e6 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 80097e0:	f04f 33ff 	mov.w	r3, #4294967295
 80097e4:	e088      	b.n	80098f8 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80097e6:	2300      	movs	r3, #0
 80097e8:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80097ea:	2300      	movs	r3, #0
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80097ee:	78fb      	ldrb	r3, [r7, #3]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <MX25LM51245G_AutoPollingMemReady+0x52>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e000      	b.n	80097fa <MX25LM51245G_AutoPollingMemReady+0x54>
 80097f8:	2304      	movs	r3, #4
 80097fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80097fc:	78bb      	ldrb	r3, [r7, #2]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <MX25LM51245G_AutoPollingMemReady+0x60>
 8009802:	2308      	movs	r3, #8
 8009804:	e000      	b.n	8009808 <MX25LM51245G_AutoPollingMemReady+0x62>
 8009806:	2300      	movs	r3, #0
 8009808:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800980a:	78fb      	ldrb	r3, [r7, #3]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <MX25LM51245G_AutoPollingMemReady+0x6e>
 8009810:	2300      	movs	r3, #0
 8009812:	e000      	b.n	8009816 <MX25LM51245G_AutoPollingMemReady+0x70>
 8009814:	2310      	movs	r3, #16
 8009816:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <MX25LM51245G_AutoPollingMemReady+0x7c>
 800981e:	2305      	movs	r3, #5
 8009820:	e001      	b.n	8009826 <MX25LM51245G_AutoPollingMemReady+0x80>
 8009822:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8009826:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <MX25LM51245G_AutoPollingMemReady+0x8c>
 800982e:	2300      	movs	r3, #0
 8009830:	e001      	b.n	8009836 <MX25LM51245G_AutoPollingMemReady+0x90>
 8009832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009836:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009838:	78bb      	ldrb	r3, [r7, #2]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d102      	bne.n	8009844 <MX25LM51245G_AutoPollingMemReady+0x9e>
 800983e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009842:	e000      	b.n	8009846 <MX25LM51245G_AutoPollingMemReady+0xa0>
 8009844:	2300      	movs	r3, #0
 8009846:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009848:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800984c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009852:	2300      	movs	r3, #0
 8009854:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d102      	bne.n	8009862 <MX25LM51245G_AutoPollingMemReady+0xbc>
 800985c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009860:	e001      	b.n	8009866 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8009862:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009866:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009868:	78bb      	ldrb	r3, [r7, #2]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d102      	bne.n	8009874 <MX25LM51245G_AutoPollingMemReady+0xce>
 800986e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009872:	e000      	b.n	8009876 <MX25LM51245G_AutoPollingMemReady+0xd0>
 8009874:	2300      	movs	r3, #0
 8009876:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <MX25LM51245G_AutoPollingMemReady+0xdc>
 800987e:	2300      	movs	r3, #0
 8009880:	e000      	b.n	8009884 <MX25LM51245G_AutoPollingMemReady+0xde>
 8009882:	2305      	movs	r3, #5
 8009884:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009886:	78bb      	ldrb	r3, [r7, #2]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d101      	bne.n	8009890 <MX25LM51245G_AutoPollingMemReady+0xea>
 800988c:	2302      	movs	r3, #2
 800988e:	e000      	b.n	8009892 <MX25LM51245G_AutoPollingMemReady+0xec>
 8009890:	2301      	movs	r3, #1
 8009892:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009894:	78bb      	ldrb	r3, [r7, #2]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d102      	bne.n	80098a0 <MX25LM51245G_AutoPollingMemReady+0xfa>
 800989a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800989e:	e000      	b.n	80098a2 <MX25LM51245G_AutoPollingMemReady+0xfc>
 80098a0:	2300      	movs	r3, #0
 80098a2:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80098a4:	2300      	movs	r3, #0
 80098a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 80098a8:	2300      	movs	r3, #0
 80098aa:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 80098ac:	2301      	movs	r3, #1
 80098ae:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80098b0:	2300      	movs	r3, #0
 80098b2:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80098b4:	2310      	movs	r3, #16
 80098b6:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80098b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098bc:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80098be:	f107 0320 	add.w	r3, r7, #32
 80098c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f007 f901 	bl	8010ad0 <HAL_OSPI_Command>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 80098d4:	f04f 33ff 	mov.w	r3, #4294967295
 80098d8:	e00e      	b.n	80098f8 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80098da:	f107 030c 	add.w	r3, r7, #12
 80098de:	f241 3288 	movw	r2, #5000	; 0x1388
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f007 fa96 	bl	8010e16 <HAL_OSPI_AutoPolling>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 80098f0:	f04f 33ff 	mov.w	r3, #4294967295
 80098f4:	e000      	b.n	80098f8 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3770      	adds	r7, #112	; 0x70
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b098      	sub	sp, #96	; 0x60
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
 800990c:	4613      	mov	r3, r2
 800990e:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8009910:	f107 0310 	add.w	r3, r7, #16
 8009914:	2250      	movs	r2, #80	; 0x50
 8009916:	2100      	movs	r1, #0
 8009918:	4618      	mov	r0, r3
 800991a:	f01d ff31 	bl	8027780 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800991e:	f107 0308 	add.w	r3, r7, #8
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8009928:	78fb      	ldrb	r3, [r7, #3]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d105      	bne.n	800993a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 800992e:	78bb      	ldrb	r3, [r7, #2]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d102      	bne.n	800993a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 8009934:	f04f 33ff 	mov.w	r3, #4294967295
 8009938:	e088      	b.n	8009a4c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800993a:	2301      	movs	r3, #1
 800993c:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009942:	78fb      	ldrb	r3, [r7, #3]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d101      	bne.n	800994c <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 8009948:	2301      	movs	r3, #1
 800994a:	e000      	b.n	800994e <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 800994c:	2304      	movs	r3, #4
 800994e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009950:	2300      	movs	r3, #0
 8009952:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 800995a:	2300      	movs	r3, #0
 800995c:	e000      	b.n	8009960 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 800995e:	2310      	movs	r3, #16
 8009960:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8009962:	78fb      	ldrb	r3, [r7, #3]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d106      	bne.n	8009976 <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 8009968:	78bb      	ldrb	r3, [r7, #2]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 800996e:	230b      	movs	r3, #11
 8009970:	e003      	b.n	800997a <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8009972:	230c      	movs	r3, #12
 8009974:	e001      	b.n	800997a <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8009976:	f64e 4313 	movw	r3, #60435	; 0xec13
 800997a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d102      	bne.n	8009988 <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 8009982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009986:	e001      	b.n	800998c <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8009988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800998c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800998e:	2300      	movs	r3, #0
 8009990:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8009992:	78bb      	ldrb	r3, [r7, #2]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d102      	bne.n	800999e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 8009998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800999c:	e001      	b.n	80099a2 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 800999e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80099a2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80099a4:	2300      	movs	r3, #0
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d102      	bne.n	80099b4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 80099ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099b2:	e001      	b.n	80099b8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 80099b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80099b8:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80099ba:	2300      	movs	r3, #0
 80099bc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80099be:	78fb      	ldrb	r3, [r7, #3]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 80099c4:	2308      	movs	r3, #8
 80099c6:	e000      	b.n	80099ca <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 80099c8:	2306      	movs	r3, #6
 80099ca:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80099cc:	2300      	movs	r3, #0
 80099ce:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80099d0:	2300      	movs	r3, #0
 80099d2:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80099d4:	f107 0310 	add.w	r3, r7, #16
 80099d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f007 f876 	bl	8010ad0 <HAL_OSPI_Command>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d002      	beq.n	80099f0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 80099ea:	f04f 33ff 	mov.w	r3, #4294967295
 80099ee:	e02d      	b.n	8009a4c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80099f0:	2302      	movs	r3, #2
 80099f2:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 80099fa:	78bb      	ldrb	r3, [r7, #2]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 8009a00:	2302      	movs	r3, #2
 8009a02:	e003      	b.n	8009a0c <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8009a04:	2312      	movs	r3, #18
 8009a06:	e001      	b.n	8009a0c <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8009a08:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8009a0c:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a12:	f107 0310 	add.w	r3, r7, #16
 8009a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f007 f857 	bl	8010ad0 <HAL_OSPI_Command>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 8009a28:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2c:	e00e      	b.n	8009a4c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8009a32:	f107 0308 	add.w	r3, r7, #8
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f007 fa73 	bl	8010f24 <HAL_OSPI_MemoryMapped>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 8009a44:	f04f 33ff 	mov.w	r3, #4294967295
 8009a48:	e000      	b.n	8009a4c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3760      	adds	r7, #96	; 0x60
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b098      	sub	sp, #96	; 0x60
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8009a60:	f107 0310 	add.w	r3, r7, #16
 8009a64:	2250      	movs	r2, #80	; 0x50
 8009a66:	2100      	movs	r1, #0
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f01d fe89 	bl	8027780 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8009a6e:	f107 0308 	add.w	r3, r7, #8
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8009a80:	2304      	movs	r3, #4
 8009a82:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8009a84:	2308      	movs	r3, #8
 8009a86:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8009a88:	2310      	movs	r3, #16
 8009a8a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8009a8c:	f64e 6311 	movw	r3, #60945	; 0xee11
 8009a90:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8009a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8009a98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a9c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009a9e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009aa2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8009aa8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009aac:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8009aae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ab2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8009ab4:	2306      	movs	r3, #6
 8009ab6:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8009ab8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009abc:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ac2:	f107 0310 	add.w	r3, r7, #16
 8009ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f006 ffff 	bl	8010ad0 <HAL_OSPI_Command>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8009ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8009adc:	e025      	b.n	8009b2a <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8009ade:	2302      	movs	r3, #2
 8009ae0:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8009ae2:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8009ae6:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8009aec:	2300      	movs	r3, #0
 8009aee:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009af0:	f107 0310 	add.w	r3, r7, #16
 8009af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f006 ffe8 	bl	8010ad0 <HAL_OSPI_Command>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0a:	e00e      	b.n	8009b2a <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8009b10:	f107 0308 	add.w	r3, r7, #8
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f007 fa04 	bl	8010f24 <HAL_OSPI_MemoryMapped>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d002      	beq.n	8009b28 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 8009b22:	f04f 33ff 	mov.w	r3, #4294967295
 8009b26:	e000      	b.n	8009b2a <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3760      	adds	r7, #96	; 0x60
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b09c      	sub	sp, #112	; 0x70
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	70fb      	strb	r3, [r7, #3]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8009b42:	f107 0320 	add.w	r3, r7, #32
 8009b46:	2250      	movs	r2, #80	; 0x50
 8009b48:	2100      	movs	r1, #0
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f01d fe18 	bl	8027780 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8009b50:	f107 030c 	add.w	r3, r7, #12
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	605a      	str	r2, [r3, #4]
 8009b5a:	609a      	str	r2, [r3, #8]
 8009b5c:	60da      	str	r2, [r3, #12]
 8009b5e:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d105      	bne.n	8009b72 <MX25LM51245G_WriteEnable+0x40>
 8009b66:	78bb      	ldrb	r3, [r7, #2]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d102      	bne.n	8009b72 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8009b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b70:	e0a6      	b.n	8009cc0 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009b72:	2300      	movs	r3, #0
 8009b74:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009b76:	2300      	movs	r3, #0
 8009b78:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009b7a:	78fb      	ldrb	r3, [r7, #3]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d101      	bne.n	8009b84 <MX25LM51245G_WriteEnable+0x52>
 8009b80:	2301      	movs	r3, #1
 8009b82:	e000      	b.n	8009b86 <MX25LM51245G_WriteEnable+0x54>
 8009b84:	2304      	movs	r3, #4
 8009b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009b88:	78bb      	ldrb	r3, [r7, #2]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d101      	bne.n	8009b92 <MX25LM51245G_WriteEnable+0x60>
 8009b8e:	2308      	movs	r3, #8
 8009b90:	e000      	b.n	8009b94 <MX25LM51245G_WriteEnable+0x62>
 8009b92:	2300      	movs	r3, #0
 8009b94:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009b96:	78fb      	ldrb	r3, [r7, #3]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <MX25LM51245G_WriteEnable+0x6e>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	e000      	b.n	8009ba2 <MX25LM51245G_WriteEnable+0x70>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8009ba4:	78fb      	ldrb	r3, [r7, #3]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <MX25LM51245G_WriteEnable+0x7c>
 8009baa:	2306      	movs	r3, #6
 8009bac:	e001      	b.n	8009bb2 <MX25LM51245G_WriteEnable+0x80>
 8009bae:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8009bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009bcc:	f107 0320 	add.w	r3, r7, #32
 8009bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f006 ff7a 	bl	8010ad0 <HAL_OSPI_Command>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 8009be2:	f04f 33ff 	mov.w	r3, #4294967295
 8009be6:	e06b      	b.n	8009cc0 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8009be8:	78fb      	ldrb	r3, [r7, #3]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <MX25LM51245G_WriteEnable+0xc0>
 8009bee:	2305      	movs	r3, #5
 8009bf0:	e001      	b.n	8009bf6 <MX25LM51245G_WriteEnable+0xc4>
 8009bf2:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8009bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <MX25LM51245G_WriteEnable+0xd0>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e001      	b.n	8009c06 <MX25LM51245G_WriteEnable+0xd4>
 8009c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009c08:	78bb      	ldrb	r3, [r7, #2]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d102      	bne.n	8009c14 <MX25LM51245G_WriteEnable+0xe2>
 8009c0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c12:	e000      	b.n	8009c16 <MX25LM51245G_WriteEnable+0xe4>
 8009c14:	2300      	movs	r3, #0
 8009c16:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8009c18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009c1c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d102      	bne.n	8009c2e <MX25LM51245G_WriteEnable+0xfc>
 8009c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c2c:	e001      	b.n	8009c32 <MX25LM51245G_WriteEnable+0x100>
 8009c2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009c32:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009c34:	78bb      	ldrb	r3, [r7, #2]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d102      	bne.n	8009c40 <MX25LM51245G_WriteEnable+0x10e>
 8009c3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c3e:	e000      	b.n	8009c42 <MX25LM51245G_WriteEnable+0x110>
 8009c40:	2300      	movs	r3, #0
 8009c42:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <MX25LM51245G_WriteEnable+0x11c>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	e000      	b.n	8009c50 <MX25LM51245G_WriteEnable+0x11e>
 8009c4e:	2305      	movs	r3, #5
 8009c50:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009c52:	78bb      	ldrb	r3, [r7, #2]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <MX25LM51245G_WriteEnable+0x12a>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e000      	b.n	8009c5e <MX25LM51245G_WriteEnable+0x12c>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009c60:	78bb      	ldrb	r3, [r7, #2]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d102      	bne.n	8009c6c <MX25LM51245G_WriteEnable+0x13a>
 8009c66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009c6a:	e000      	b.n	8009c6e <MX25LM51245G_WriteEnable+0x13c>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c70:	f107 0320 	add.w	r3, r7, #32
 8009c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f006 ff28 	bl	8010ad0 <HAL_OSPI_Command>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d002      	beq.n	8009c8c <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 8009c86:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8a:	e019      	b.n	8009cc0 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 8009c90:	2302      	movs	r3, #2
 8009c92:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8009c94:	2300      	movs	r3, #0
 8009c96:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8009c98:	2310      	movs	r3, #16
 8009c9a:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009c9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ca0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ca2:	f107 030c 	add.w	r3, r7, #12
 8009ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f007 f8b2 	bl	8010e16 <HAL_OSPI_AutoPolling>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbc:	e000      	b.n	8009cc0 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3770      	adds	r7, #112	; 0x70
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b098      	sub	sp, #96	; 0x60
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	607b      	str	r3, [r7, #4]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	72fb      	strb	r3, [r7, #11]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8009cda:	f107 0310 	add.w	r3, r7, #16
 8009cde:	2250      	movs	r2, #80	; 0x50
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f01d fd4c 	bl	8027780 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009ce8:	7afb      	ldrb	r3, [r7, #11]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d105      	bne.n	8009cfa <MX25LM51245G_WriteCfg2Register+0x32>
 8009cee:	7abb      	ldrb	r3, [r7, #10]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d102      	bne.n	8009cfa <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8009cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf8:	e077      	b.n	8009dea <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009d02:	7afb      	ldrb	r3, [r7, #11]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <MX25LM51245G_WriteCfg2Register+0x44>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e000      	b.n	8009d0e <MX25LM51245G_WriteCfg2Register+0x46>
 8009d0c:	2304      	movs	r3, #4
 8009d0e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009d10:	7abb      	ldrb	r3, [r7, #10]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d101      	bne.n	8009d1a <MX25LM51245G_WriteCfg2Register+0x52>
 8009d16:	2308      	movs	r3, #8
 8009d18:	e000      	b.n	8009d1c <MX25LM51245G_WriteCfg2Register+0x54>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009d1e:	7afb      	ldrb	r3, [r7, #11]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <MX25LM51245G_WriteCfg2Register+0x60>
 8009d24:	2300      	movs	r3, #0
 8009d26:	e000      	b.n	8009d2a <MX25LM51245G_WriteCfg2Register+0x62>
 8009d28:	2310      	movs	r3, #16
 8009d2a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <MX25LM51245G_WriteCfg2Register+0x6e>
 8009d32:	2372      	movs	r3, #114	; 0x72
 8009d34:	e001      	b.n	8009d3a <MX25LM51245G_WriteCfg2Register+0x72>
 8009d36:	f247 238d 	movw	r3, #29325	; 0x728d
 8009d3a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009d3c:	7afb      	ldrb	r3, [r7, #11]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d102      	bne.n	8009d48 <MX25LM51245G_WriteCfg2Register+0x80>
 8009d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d46:	e001      	b.n	8009d4c <MX25LM51245G_WriteCfg2Register+0x84>
 8009d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009d4e:	7abb      	ldrb	r3, [r7, #10]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d102      	bne.n	8009d5a <MX25LM51245G_WriteCfg2Register+0x92>
 8009d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d58:	e000      	b.n	8009d5c <MX25LM51245G_WriteCfg2Register+0x94>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009d5e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009d62:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009d6c:	7afb      	ldrb	r3, [r7, #11]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <MX25LM51245G_WriteCfg2Register+0xb0>
 8009d72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d76:	e001      	b.n	8009d7c <MX25LM51245G_WriteCfg2Register+0xb4>
 8009d78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009d7c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009d7e:	7abb      	ldrb	r3, [r7, #10]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d102      	bne.n	8009d8a <MX25LM51245G_WriteCfg2Register+0xc2>
 8009d84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d88:	e000      	b.n	8009d8c <MX25LM51245G_WriteCfg2Register+0xc4>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8009d92:	7afb      	ldrb	r3, [r7, #11]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d006      	beq.n	8009da6 <MX25LM51245G_WriteCfg2Register+0xde>
 8009d98:	7abb      	ldrb	r3, [r7, #10]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d101      	bne.n	8009da2 <MX25LM51245G_WriteCfg2Register+0xda>
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e002      	b.n	8009da8 <MX25LM51245G_WriteCfg2Register+0xe0>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <MX25LM51245G_WriteCfg2Register+0xe0>
 8009da6:	2301      	movs	r3, #1
 8009da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009daa:	2300      	movs	r3, #0
 8009dac:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009dae:	2300      	movs	r3, #0
 8009db0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009db2:	f107 0310 	add.w	r3, r7, #16
 8009db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dba:	4619      	mov	r1, r3
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f006 fe87 	bl	8010ad0 <HAL_OSPI_Command>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8009dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dcc:	e00d      	b.n	8009dea <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dd2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f006 ff07 	bl	8010bea <HAL_OSPI_Transmit>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 8009de2:	f04f 33ff 	mov.w	r3, #4294967295
 8009de6:	e000      	b.n	8009dea <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3760      	adds	r7, #96	; 0x60
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b098      	sub	sp, #96	; 0x60
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	607b      	str	r3, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	72fb      	strb	r3, [r7, #11]
 8009e00:	4613      	mov	r3, r2
 8009e02:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8009e04:	f107 0310 	add.w	r3, r7, #16
 8009e08:	2250      	movs	r2, #80	; 0x50
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f01d fcb7 	bl	8027780 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009e12:	7afb      	ldrb	r3, [r7, #11]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d105      	bne.n	8009e24 <MX25LM51245G_ReadCfg2Register+0x32>
 8009e18:	7abb      	ldrb	r3, [r7, #10]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d102      	bne.n	8009e24 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8009e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e22:	e07c      	b.n	8009f1e <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009e24:	2300      	movs	r3, #0
 8009e26:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009e2c:	7afb      	ldrb	r3, [r7, #11]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <MX25LM51245G_ReadCfg2Register+0x44>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <MX25LM51245G_ReadCfg2Register+0x46>
 8009e36:	2304      	movs	r3, #4
 8009e38:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009e3a:	7abb      	ldrb	r3, [r7, #10]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d101      	bne.n	8009e44 <MX25LM51245G_ReadCfg2Register+0x52>
 8009e40:	2308      	movs	r3, #8
 8009e42:	e000      	b.n	8009e46 <MX25LM51245G_ReadCfg2Register+0x54>
 8009e44:	2300      	movs	r3, #0
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <MX25LM51245G_ReadCfg2Register+0x60>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e000      	b.n	8009e54 <MX25LM51245G_ReadCfg2Register+0x62>
 8009e52:	2310      	movs	r3, #16
 8009e54:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8009e56:	7afb      	ldrb	r3, [r7, #11]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <MX25LM51245G_ReadCfg2Register+0x6e>
 8009e5c:	2371      	movs	r3, #113	; 0x71
 8009e5e:	e001      	b.n	8009e64 <MX25LM51245G_ReadCfg2Register+0x72>
 8009e60:	f247 138e 	movw	r3, #29070	; 0x718e
 8009e64:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009e66:	7afb      	ldrb	r3, [r7, #11]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d102      	bne.n	8009e72 <MX25LM51245G_ReadCfg2Register+0x80>
 8009e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e70:	e001      	b.n	8009e76 <MX25LM51245G_ReadCfg2Register+0x84>
 8009e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009e78:	7abb      	ldrb	r3, [r7, #10]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d102      	bne.n	8009e84 <MX25LM51245G_ReadCfg2Register+0x92>
 8009e7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e82:	e000      	b.n	8009e86 <MX25LM51245G_ReadCfg2Register+0x94>
 8009e84:	2300      	movs	r3, #0
 8009e86:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009e88:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009e8c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009e96:	7afb      	ldrb	r3, [r7, #11]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <MX25LM51245G_ReadCfg2Register+0xb0>
 8009e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ea0:	e001      	b.n	8009ea6 <MX25LM51245G_ReadCfg2Register+0xb4>
 8009ea2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009ea8:	7abb      	ldrb	r3, [r7, #10]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d102      	bne.n	8009eb4 <MX25LM51245G_ReadCfg2Register+0xc2>
 8009eae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009eb2:	e000      	b.n	8009eb6 <MX25LM51245G_ReadCfg2Register+0xc4>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009eb8:	7afb      	ldrb	r3, [r7, #11]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <MX25LM51245G_ReadCfg2Register+0xd0>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	e000      	b.n	8009ec4 <MX25LM51245G_ReadCfg2Register+0xd2>
 8009ec2:	2305      	movs	r3, #5
 8009ec4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009ec6:	7abb      	ldrb	r3, [r7, #10]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d101      	bne.n	8009ed0 <MX25LM51245G_ReadCfg2Register+0xde>
 8009ecc:	2302      	movs	r3, #2
 8009ece:	e000      	b.n	8009ed2 <MX25LM51245G_ReadCfg2Register+0xe0>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009ed4:	7abb      	ldrb	r3, [r7, #10]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d102      	bne.n	8009ee0 <MX25LM51245G_ReadCfg2Register+0xee>
 8009eda:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009ede:	e000      	b.n	8009ee2 <MX25LM51245G_ReadCfg2Register+0xf0>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ee8:	f107 0310 	add.w	r3, r7, #16
 8009eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f006 fdec 	bl	8010ad0 <HAL_OSPI_Command>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8009efe:	f04f 33ff 	mov.w	r3, #4294967295
 8009f02:	e00c      	b.n	8009f1e <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f006 fee0 	bl	8010cd0 <HAL_OSPI_Receive>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 8009f16:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1a:	e000      	b.n	8009f1e <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3760      	adds	r7, #96	; 0x60
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b096      	sub	sp, #88	; 0x58
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	70fb      	strb	r3, [r7, #3]
 8009f32:	4613      	mov	r3, r2
 8009f34:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8009f36:	f107 0308 	add.w	r3, r7, #8
 8009f3a:	2250      	movs	r2, #80	; 0x50
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f01d fc1e 	bl	8027780 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d105      	bne.n	8009f56 <MX25LM51245G_ResetEnable+0x30>
 8009f4a:	78bb      	ldrb	r3, [r7, #2]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d102      	bne.n	8009f56 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8009f50:	f04f 33ff 	mov.w	r3, #4294967295
 8009f54:	e03b      	b.n	8009fce <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009f5e:	78fb      	ldrb	r3, [r7, #3]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <MX25LM51245G_ResetEnable+0x42>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e000      	b.n	8009f6a <MX25LM51245G_ResetEnable+0x44>
 8009f68:	2304      	movs	r3, #4
 8009f6a:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009f6c:	78bb      	ldrb	r3, [r7, #2]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d101      	bne.n	8009f76 <MX25LM51245G_ResetEnable+0x50>
 8009f72:	2308      	movs	r3, #8
 8009f74:	e000      	b.n	8009f78 <MX25LM51245G_ResetEnable+0x52>
 8009f76:	2300      	movs	r3, #0
 8009f78:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <MX25LM51245G_ResetEnable+0x5e>
 8009f80:	2300      	movs	r3, #0
 8009f82:	e000      	b.n	8009f86 <MX25LM51245G_ResetEnable+0x60>
 8009f84:	2310      	movs	r3, #16
 8009f86:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <MX25LM51245G_ResetEnable+0x6c>
 8009f8e:	2366      	movs	r3, #102	; 0x66
 8009f90:	e001      	b.n	8009f96 <MX25LM51245G_ResetEnable+0x70>
 8009f92:	f246 6399 	movw	r3, #26265	; 0x6699
 8009f96:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009fac:	2300      	movs	r3, #0
 8009fae:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009fb0:	f107 0308 	add.w	r3, r7, #8
 8009fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f006 fd88 	bl	8010ad0 <HAL_OSPI_Command>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d002      	beq.n	8009fcc <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 8009fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fca:	e000      	b.n	8009fce <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3758      	adds	r7, #88	; 0x58
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b096      	sub	sp, #88	; 0x58
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	70fb      	strb	r3, [r7, #3]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8009fe6:	f107 0308 	add.w	r3, r7, #8
 8009fea:	2250      	movs	r2, #80	; 0x50
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f01d fbc6 	bl	8027780 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d105      	bne.n	800a006 <MX25LM51245G_ResetMemory+0x30>
 8009ffa:	78bb      	ldrb	r3, [r7, #2]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d102      	bne.n	800a006 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 800a000:	f04f 33ff 	mov.w	r3, #4294967295
 800a004:	e03b      	b.n	800a07e <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a006:	2300      	movs	r3, #0
 800a008:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <MX25LM51245G_ResetMemory+0x42>
 800a014:	2301      	movs	r3, #1
 800a016:	e000      	b.n	800a01a <MX25LM51245G_ResetMemory+0x44>
 800a018:	2304      	movs	r3, #4
 800a01a:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a01c:	78bb      	ldrb	r3, [r7, #2]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d101      	bne.n	800a026 <MX25LM51245G_ResetMemory+0x50>
 800a022:	2308      	movs	r3, #8
 800a024:	e000      	b.n	800a028 <MX25LM51245G_ResetMemory+0x52>
 800a026:	2300      	movs	r3, #0
 800a028:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <MX25LM51245G_ResetMemory+0x5e>
 800a030:	2300      	movs	r3, #0
 800a032:	e000      	b.n	800a036 <MX25LM51245G_ResetMemory+0x60>
 800a034:	2310      	movs	r3, #16
 800a036:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <MX25LM51245G_ResetMemory+0x6c>
 800a03e:	2399      	movs	r3, #153	; 0x99
 800a040:	e001      	b.n	800a046 <MX25LM51245G_ResetMemory+0x70>
 800a042:	f649 1366 	movw	r3, #39270	; 0x9966
 800a046:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800a048:	2300      	movs	r3, #0
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800a050:	2300      	movs	r3, #0
 800a052:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800a054:	2300      	movs	r3, #0
 800a056:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a058:	2300      	movs	r3, #0
 800a05a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a05c:	2300      	movs	r3, #0
 800a05e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a060:	f107 0308 	add.w	r3, r7, #8
 800a064:	f241 3288 	movw	r2, #5000	; 0x1388
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f006 fd30 	bl	8010ad0 <HAL_OSPI_Command>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 800a076:	f04f 33ff 	mov.w	r3, #4294967295
 800a07a:	e000      	b.n	800a07e <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3758      	adds	r7, #88	; 0x58
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
	...

0800a088 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800a08e:	2300      	movs	r3, #0
 800a090:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800a092:	4b16      	ldr	r3, [pc, #88]	; (800a0ec <BSP_I2C4_Init+0x64>)
 800a094:	4a16      	ldr	r2, [pc, #88]	; (800a0f0 <BSP_I2C4_Init+0x68>)
 800a096:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800a098:	4b16      	ldr	r3, [pc, #88]	; (800a0f4 <BSP_I2C4_Init+0x6c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d11f      	bne.n	800a0e0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800a0a0:	4b14      	ldr	r3, [pc, #80]	; (800a0f4 <BSP_I2C4_Init+0x6c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	4a13      	ldr	r2, [pc, #76]	; (800a0f4 <BSP_I2C4_Init+0x6c>)
 800a0a8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800a0aa:	4810      	ldr	r0, [pc, #64]	; (800a0ec <BSP_I2C4_Init+0x64>)
 800a0ac:	f003 f87a 	bl	800d1a4 <HAL_I2C_GetState>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d114      	bne.n	800a0e0 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800a0b6:	480d      	ldr	r0, [pc, #52]	; (800a0ec <BSP_I2C4_Init+0x64>)
 800a0b8:	f000 fb60 	bl	800a77c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a0bc:	f008 fa44 	bl	8012548 <HAL_RCC_GetPCLK2Freq>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	490d      	ldr	r1, [pc, #52]	; (800a0f8 <BSP_I2C4_Init+0x70>)
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 f8e3 	bl	800a290 <I2C_GetTiming>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4807      	ldr	r0, [pc, #28]	; (800a0ec <BSP_I2C4_Init+0x64>)
 800a0d0:	f000 f838 	bl	800a144 <MX_I2C4_Init>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800a0da:	f06f 0307 	mvn.w	r3, #7
 800a0de:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800a0e0:	687b      	ldr	r3, [r7, #4]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	2400bd3c 	.word	0x2400bd3c
 800a0f0:	58001c00 	.word	0x58001c00
 800a0f4:	2400b334 	.word	0x2400b334
 800a0f8:	00061a80 	.word	0x00061a80

0800a0fc <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800a102:	2300      	movs	r3, #0
 800a104:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800a106:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <BSP_I2C4_DeInit+0x40>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	4a0b      	ldr	r2, [pc, #44]	; (800a13c <BSP_I2C4_DeInit+0x40>)
 800a10e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800a110:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <BSP_I2C4_DeInit+0x40>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10b      	bne.n	800a130 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800a118:	4809      	ldr	r0, [pc, #36]	; (800a140 <BSP_I2C4_DeInit+0x44>)
 800a11a:	f000 fb9b 	bl	800a854 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a11e:	4808      	ldr	r0, [pc, #32]	; (800a140 <BSP_I2C4_DeInit+0x44>)
 800a120:	f002 fde2 	bl	800cce8 <HAL_I2C_DeInit>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800a12a:	f06f 0307 	mvn.w	r3, #7
 800a12e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800a130:	687b      	ldr	r3, [r7, #4]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	2400b334 	.word	0x2400b334
 800a140:	2400bd3c 	.word	0x2400bd3c

0800a144 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f002 fd20 	bl	800cbc8 <HAL_I2C_Init>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	73fb      	strb	r3, [r7, #15]
 800a192:	e014      	b.n	800a1be <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800a194:	2300      	movs	r3, #0
 800a196:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800a198:	68b9      	ldr	r1, [r7, #8]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f003 fad4 	bl	800d748 <HAL_I2CEx_ConfigAnalogFilter>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	73fb      	strb	r3, [r7, #15]
 800a1aa:	e008      	b.n	800a1be <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f003 fb15 	bl	800d7de <HAL_I2CEx_ConfigDigitalFilter>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800a1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	60ba      	str	r2, [r7, #8]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	81fb      	strh	r3, [r7, #14]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	81bb      	strh	r3, [r7, #12]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800a1de:	89b9      	ldrh	r1, [r7, #12]
 800a1e0:	89f8      	ldrh	r0, [r7, #14]
 800a1e2:	88fb      	ldrh	r3, [r7, #6]
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f000 fb57 	bl	800a89c <I2C4_WriteReg>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d102      	bne.n	800a1fa <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	e00c      	b.n	800a214 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a1fa:	4809      	ldr	r0, [pc, #36]	; (800a220 <BSP_I2C4_WriteReg+0x58>)
 800a1fc:	f002 ffe0 	bl	800d1c0 <HAL_I2C_GetError>
 800a200:	4603      	mov	r3, r0
 800a202:	2b04      	cmp	r3, #4
 800a204:	d103      	bne.n	800a20e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a206:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	e002      	b.n	800a214 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a20e:	f06f 0303 	mvn.w	r3, #3
 800a212:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a214:	697b      	ldr	r3, [r7, #20]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	2400bd3c 	.word	0x2400bd3c

0800a224 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af02      	add	r7, sp, #8
 800a22a:	60ba      	str	r2, [r7, #8]
 800a22c:	461a      	mov	r2, r3
 800a22e:	4603      	mov	r3, r0
 800a230:	81fb      	strh	r3, [r7, #14]
 800a232:	460b      	mov	r3, r1
 800a234:	81bb      	strh	r3, [r7, #12]
 800a236:	4613      	mov	r3, r2
 800a238:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800a23a:	89b9      	ldrh	r1, [r7, #12]
 800a23c:	89f8      	ldrh	r0, [r7, #14]
 800a23e:	88fb      	ldrh	r3, [r7, #6]
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2201      	movs	r2, #1
 800a246:	f000 fb4f 	bl	800a8e8 <I2C4_ReadReg>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800a250:	2300      	movs	r3, #0
 800a252:	617b      	str	r3, [r7, #20]
 800a254:	e00c      	b.n	800a270 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a256:	4809      	ldr	r0, [pc, #36]	; (800a27c <BSP_I2C4_ReadReg+0x58>)
 800a258:	f002 ffb2 	bl	800d1c0 <HAL_I2C_GetError>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d103      	bne.n	800a26a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a262:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	e002      	b.n	800a270 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a26a:	f06f 0303 	mvn.w	r3, #3
 800a26e:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a270:	697b      	ldr	r3, [r7, #20]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	2400bd3c 	.word	0x2400bd3c

0800a280 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800a284:	f001 fca4 	bl	800bbd0 <HAL_GetTick>
 800a288:	4603      	mov	r3, r0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	bd80      	pop	{r7, pc}
	...

0800a290 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d06b      	beq.n	800a37c <I2C_GetTiming+0xec>
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d068      	beq.n	800a37c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	613b      	str	r3, [r7, #16]
 800a2ae:	e060      	b.n	800a372 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800a2b0:	4a35      	ldr	r2, [pc, #212]	; (800a388 <I2C_GetTiming+0xf8>)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	212c      	movs	r1, #44	; 0x2c
 800a2b6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ba:	4413      	add	r3, r2
 800a2bc:	3304      	adds	r3, #4
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d352      	bcc.n	800a36c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800a2c6:	4a30      	ldr	r2, [pc, #192]	; (800a388 <I2C_GetTiming+0xf8>)
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	212c      	movs	r1, #44	; 0x2c
 800a2cc:	fb01 f303 	mul.w	r3, r1, r3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d847      	bhi.n	800a36c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800a2dc:	6939      	ldr	r1, [r7, #16]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f856 	bl	800a390 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800a2e4:	6939      	ldr	r1, [r7, #16]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f940 	bl	800a56c <I2C_Compute_SCLL_SCLH>
 800a2ec:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b7f      	cmp	r3, #127	; 0x7f
 800a2f2:	d842      	bhi.n	800a37a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a2f4:	4925      	ldr	r1, [pc, #148]	; (800a38c <I2C_GetTiming+0xfc>)
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	440b      	add	r3, r1
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a306:	4821      	ldr	r0, [pc, #132]	; (800a38c <I2C_GetTiming+0xfc>)
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	4613      	mov	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4413      	add	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4403      	add	r3, r0
 800a314:	3304      	adds	r3, #4
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	051b      	lsls	r3, r3, #20
 800a31a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a31e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a320:	481a      	ldr	r0, [pc, #104]	; (800a38c <I2C_GetTiming+0xfc>)
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	4613      	mov	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4403      	add	r3, r0
 800a32e:	3308      	adds	r3, #8
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	041b      	lsls	r3, r3, #16
 800a334:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a338:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800a33a:	4814      	ldr	r0, [pc, #80]	; (800a38c <I2C_GetTiming+0xfc>)
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	4613      	mov	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4413      	add	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4403      	add	r3, r0
 800a348:	330c      	adds	r3, #12
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	021b      	lsls	r3, r3, #8
 800a34e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a350:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800a352:	480e      	ldr	r0, [pc, #56]	; (800a38c <I2C_GetTiming+0xfc>)
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4403      	add	r3, r0
 800a360:	3310      	adds	r3, #16
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a366:	430b      	orrs	r3, r1
 800a368:	617b      	str	r3, [r7, #20]
        }
        break;
 800a36a:	e006      	b.n	800a37a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	3301      	adds	r3, #1
 800a370:	613b      	str	r3, [r7, #16]
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	2b02      	cmp	r3, #2
 800a376:	d99b      	bls.n	800a2b0 <I2C_GetTiming+0x20>
 800a378:	e000      	b.n	800a37c <I2C_GetTiming+0xec>
        break;
 800a37a:	bf00      	nop
      }
    }
  }

  return ret;
 800a37c:	697b      	ldr	r3, [r7, #20]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	0802b56c 	.word	0x0802b56c
 800a38c:	2400b338 	.word	0x2400b338

0800a390 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800a390:	b480      	push	{r7}
 800a392:	b08f      	sub	sp, #60	; 0x3c
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800a39a:	2310      	movs	r3, #16
 800a39c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	085a      	lsrs	r2, r3, #1
 800a3a2:	4b6e      	ldr	r3, [pc, #440]	; (800a55c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800a3a4:	4413      	add	r3, r2
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3ac:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800a3ae:	2332      	movs	r3, #50	; 0x32
 800a3b0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800a3b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a3b6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a3b8:	4a69      	ldr	r2, [pc, #420]	; (800a560 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	212c      	movs	r1, #44	; 0x2c
 800a3be:	fb01 f303 	mul.w	r3, r1, r3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	3324      	adds	r3, #36	; 0x24
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	4a65      	ldr	r2, [pc, #404]	; (800a560 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	212c      	movs	r1, #44	; 0x2c
 800a3d0:	fb01 f303 	mul.w	r3, r1, r3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	330c      	adds	r3, #12
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a3dc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a3de:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a3e0:	495f      	ldr	r1, [pc, #380]	; (800a560 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	202c      	movs	r0, #44	; 0x2c
 800a3e6:	fb00 f303 	mul.w	r3, r0, r3
 800a3ea:	440b      	add	r3, r1
 800a3ec:	3328      	adds	r3, #40	; 0x28
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3303      	adds	r3, #3
 800a3f2:	69f9      	ldr	r1, [r7, #28]
 800a3f4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a3fc:	4a58      	ldr	r2, [pc, #352]	; (800a560 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	212c      	movs	r1, #44	; 0x2c
 800a402:	fb01 f303 	mul.w	r3, r1, r3
 800a406:	4413      	add	r3, r2
 800a408:	3310      	adds	r3, #16
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4618      	mov	r0, r3
 800a40e:	4a54      	ldr	r2, [pc, #336]	; (800a560 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	212c      	movs	r1, #44	; 0x2c
 800a414:	fb01 f303 	mul.w	r3, r1, r3
 800a418:	4413      	add	r3, r2
 800a41a:	3320      	adds	r3, #32
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a420:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a422:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a424:	494e      	ldr	r1, [pc, #312]	; (800a560 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	202c      	movs	r0, #44	; 0x2c
 800a42a:	fb00 f303 	mul.w	r3, r0, r3
 800a42e:	440b      	add	r3, r1
 800a430:	3328      	adds	r3, #40	; 0x28
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3304      	adds	r3, #4
 800a436:	69f9      	ldr	r1, [r7, #28]
 800a438:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800a440:	4a47      	ldr	r2, [pc, #284]	; (800a560 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	212c      	movs	r1, #44	; 0x2c
 800a446:	fb01 f303 	mul.w	r3, r1, r3
 800a44a:	4413      	add	r3, r2
 800a44c:	3320      	adds	r3, #32
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4618      	mov	r0, r3
 800a452:	4a43      	ldr	r2, [pc, #268]	; (800a560 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	212c      	movs	r1, #44	; 0x2c
 800a458:	fb01 f303 	mul.w	r3, r1, r3
 800a45c:	4413      	add	r3, r2
 800a45e:	3314      	adds	r3, #20
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4403      	add	r3, r0
 800a464:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dc01      	bgt.n	800a470 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a472:	2b00      	cmp	r3, #0
 800a474:	dc01      	bgt.n	800a47a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a47a:	2300      	movs	r3, #0
 800a47c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a47e:	e062      	b.n	800a546 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a480:	2300      	movs	r3, #0
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
 800a484:	e059      	b.n	800a53a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	3301      	adds	r3, #1
 800a48a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a48c:	3201      	adds	r2, #1
 800a48e:	fb03 f202 	mul.w	r2, r3, r2
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	fb02 f303 	mul.w	r3, r2, r3
 800a498:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d348      	bcc.n	800a534 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	623b      	str	r3, [r7, #32]
 800a4a6:	e042      	b.n	800a52e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800a4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	6a3a      	ldr	r2, [r7, #32]
 800a4ae:	fb03 f202 	mul.w	r2, r3, r2
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	fb02 f303 	mul.w	r3, r2, r3
 800a4b8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d332      	bcc.n	800a528 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d82e      	bhi.n	800a528 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800a4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d02a      	beq.n	800a528 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a4d2:	4b24      	ldr	r3, [pc, #144]	; (800a564 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	4924      	ldr	r1, [pc, #144]	; (800a568 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	440b      	add	r3, r1
 800a4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4e4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a4e6:	4b1f      	ldr	r3, [pc, #124]	; (800a564 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	491f      	ldr	r1, [pc, #124]	; (800a568 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	440b      	add	r3, r1
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4fa:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a4fc:	4b19      	ldr	r3, [pc, #100]	; (800a564 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	4919      	ldr	r1, [pc, #100]	; (800a568 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a502:	4613      	mov	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	440b      	add	r3, r1
 800a50c:	3308      	adds	r3, #8
 800a50e:	6a3a      	ldr	r2, [r7, #32]
 800a510:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800a516:	4b13      	ldr	r3, [pc, #76]	; (800a564 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	4a11      	ldr	r2, [pc, #68]	; (800a564 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a51e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a520:	4b10      	ldr	r3, [pc, #64]	; (800a564 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b7f      	cmp	r3, #127	; 0x7f
 800a526:	d812      	bhi.n	800a54e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	3301      	adds	r3, #1
 800a52c:	623b      	str	r3, [r7, #32]
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	2b0f      	cmp	r3, #15
 800a532:	d9b9      	bls.n	800a4a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	3301      	adds	r3, #1
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	2b0f      	cmp	r3, #15
 800a53e:	d9a2      	bls.n	800a486 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	3301      	adds	r3, #1
 800a544:	62bb      	str	r3, [r7, #40]	; 0x28
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	2b0f      	cmp	r3, #15
 800a54a:	d999      	bls.n	800a480 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800a54c:	e000      	b.n	800a550 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800a54e:	bf00      	nop
          }
        }
      }
    }
  }
}
 800a550:	373c      	adds	r7, #60	; 0x3c
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	3b9aca00 	.word	0x3b9aca00
 800a560:	0802b56c 	.word	0x0802b56c
 800a564:	2400bd38 	.word	0x2400bd38
 800a568:	2400b338 	.word	0x2400b338

0800a56c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b093      	sub	sp, #76	; 0x4c
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800a576:	f04f 33ff 	mov.w	r3, #4294967295
 800a57a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	085a      	lsrs	r2, r3, #1
 800a580:	4b7a      	ldr	r3, [pc, #488]	; (800a76c <I2C_Compute_SCLL_SCLH+0x200>)
 800a582:	4413      	add	r3, r2
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	fbb3 f3f2 	udiv	r3, r3, r2
 800a58a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800a58c:	4a78      	ldr	r2, [pc, #480]	; (800a770 <I2C_Compute_SCLL_SCLH+0x204>)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	212c      	movs	r1, #44	; 0x2c
 800a592:	fb01 f303 	mul.w	r3, r1, r3
 800a596:	4413      	add	r3, r2
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	085a      	lsrs	r2, r3, #1
 800a59c:	4b73      	ldr	r3, [pc, #460]	; (800a76c <I2C_Compute_SCLL_SCLH+0x200>)
 800a59e:	4413      	add	r3, r2
 800a5a0:	4973      	ldr	r1, [pc, #460]	; (800a770 <I2C_Compute_SCLL_SCLH+0x204>)
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	202c      	movs	r0, #44	; 0x2c
 800a5a6:	fb00 f202 	mul.w	r2, r0, r2
 800a5aa:	440a      	add	r2, r1
 800a5ac:	6812      	ldr	r2, [r2, #0]
 800a5ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5b2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800a5b4:	2332      	movs	r3, #50	; 0x32
 800a5b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800a5b8:	4a6d      	ldr	r2, [pc, #436]	; (800a770 <I2C_Compute_SCLL_SCLH+0x204>)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	212c      	movs	r1, #44	; 0x2c
 800a5be:	fb01 f303 	mul.w	r3, r1, r3
 800a5c2:	4413      	add	r3, r2
 800a5c4:	3328      	adds	r3, #40	; 0x28
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ca:	fb02 f303 	mul.w	r3, r2, r3
 800a5ce:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800a5d0:	4a67      	ldr	r2, [pc, #412]	; (800a770 <I2C_Compute_SCLL_SCLH+0x204>)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	212c      	movs	r1, #44	; 0x2c
 800a5d6:	fb01 f303 	mul.w	r3, r1, r3
 800a5da:	4413      	add	r3, r2
 800a5dc:	3304      	adds	r3, #4
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a62      	ldr	r2, [pc, #392]	; (800a76c <I2C_Compute_SCLL_SCLH+0x200>)
 800a5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800a5e8:	4a61      	ldr	r2, [pc, #388]	; (800a770 <I2C_Compute_SCLL_SCLH+0x204>)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	212c      	movs	r1, #44	; 0x2c
 800a5ee:	fb01 f303 	mul.w	r3, r1, r3
 800a5f2:	4413      	add	r3, r2
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a5c      	ldr	r2, [pc, #368]	; (800a76c <I2C_Compute_SCLL_SCLH+0x200>)
 800a5fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5fe:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a604:	2300      	movs	r3, #0
 800a606:	637b      	str	r3, [r7, #52]	; 0x34
 800a608:	e0a3      	b.n	800a752 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a60a:	495a      	ldr	r1, [pc, #360]	; (800a774 <I2C_Compute_SCLL_SCLH+0x208>)
 800a60c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a60e:	4613      	mov	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	440b      	add	r3, r1
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	fb02 f303 	mul.w	r3, r2, r3
 800a622:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a624:	2300      	movs	r3, #0
 800a626:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a628:	e08c      	b.n	800a744 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	441a      	add	r2, r3
 800a630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a632:	3301      	adds	r3, #1
 800a634:	6979      	ldr	r1, [r7, #20]
 800a636:	fb03 f101 	mul.w	r1, r3, r1
 800a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	440b      	add	r3, r1
 800a640:	4413      	add	r3, r2
 800a642:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a644:	4a4a      	ldr	r2, [pc, #296]	; (800a770 <I2C_Compute_SCLL_SCLH+0x204>)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	212c      	movs	r1, #44	; 0x2c
 800a64a:	fb01 f303 	mul.w	r3, r1, r3
 800a64e:	4413      	add	r3, r2
 800a650:	3318      	adds	r3, #24
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	429a      	cmp	r2, r3
 800a658:	d971      	bls.n	800a73e <I2C_Compute_SCLL_SCLH+0x1d2>
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	1ad2      	subs	r2, r2, r3
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	089b      	lsrs	r3, r3, #2
 800a666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a668:	429a      	cmp	r2, r3
 800a66a:	d268      	bcs.n	800a73e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a66c:	2300      	movs	r3, #0
 800a66e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a670:	e062      	b.n	800a738 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800a672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	441a      	add	r2, r3
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	3301      	adds	r3, #1
 800a67c:	6979      	ldr	r1, [r7, #20]
 800a67e:	fb03 f101 	mul.w	r1, r3, r1
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	440b      	add	r3, r1
 800a688:	4413      	add	r3, r2
 800a68a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	441a      	add	r2, r3
 800a692:	4937      	ldr	r1, [pc, #220]	; (800a770 <I2C_Compute_SCLL_SCLH+0x204>)
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	202c      	movs	r0, #44	; 0x2c
 800a698:	fb00 f303 	mul.w	r3, r0, r3
 800a69c:	440b      	add	r3, r1
 800a69e:	3320      	adds	r3, #32
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	441a      	add	r2, r3
 800a6a4:	4932      	ldr	r1, [pc, #200]	; (800a770 <I2C_Compute_SCLL_SCLH+0x204>)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	202c      	movs	r0, #44	; 0x2c
 800a6aa:	fb00 f303 	mul.w	r3, r0, r3
 800a6ae:	440b      	add	r3, r1
 800a6b0:	3324      	adds	r3, #36	; 0x24
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d338      	bcc.n	800a732 <I2C_Compute_SCLL_SCLH+0x1c6>
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d834      	bhi.n	800a732 <I2C_Compute_SCLL_SCLH+0x1c6>
 800a6c8:	4a29      	ldr	r2, [pc, #164]	; (800a770 <I2C_Compute_SCLL_SCLH+0x204>)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	212c      	movs	r1, #44	; 0x2c
 800a6ce:	fb01 f303 	mul.w	r3, r1, r3
 800a6d2:	4413      	add	r3, r2
 800a6d4:	331c      	adds	r3, #28
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d329      	bcc.n	800a732 <I2C_Compute_SCLL_SCLH+0x1c6>
 800a6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d225      	bcs.n	800a732 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	da02      	bge.n	800a6fa <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	425b      	negs	r3, r3
 800a6f8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d917      	bls.n	800a732 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800a706:	491b      	ldr	r1, [pc, #108]	; (800a774 <I2C_Compute_SCLL_SCLH+0x208>)
 800a708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a70a:	4613      	mov	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	440b      	add	r3, r1
 800a714:	3310      	adds	r3, #16
 800a716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a718:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800a71a:	4916      	ldr	r1, [pc, #88]	; (800a774 <I2C_Compute_SCLL_SCLH+0x208>)
 800a71c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	440b      	add	r3, r1
 800a728:	330c      	adds	r3, #12
 800a72a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a72c:	601a      	str	r2, [r3, #0]
              ret = count;
 800a72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a730:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a734:	3301      	adds	r3, #1
 800a736:	63bb      	str	r3, [r7, #56]	; 0x38
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	2bff      	cmp	r3, #255	; 0xff
 800a73c:	d999      	bls.n	800a672 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a740:	3301      	adds	r3, #1
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a746:	2bff      	cmp	r3, #255	; 0xff
 800a748:	f67f af6f 	bls.w	800a62a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a74e:	3301      	adds	r3, #1
 800a750:	637b      	str	r3, [r7, #52]	; 0x34
 800a752:	4b09      	ldr	r3, [pc, #36]	; (800a778 <I2C_Compute_SCLL_SCLH+0x20c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a758:	429a      	cmp	r2, r3
 800a75a:	f4ff af56 	bcc.w	800a60a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800a75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a760:	4618      	mov	r0, r3
 800a762:	374c      	adds	r7, #76	; 0x4c
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	3b9aca00 	.word	0x3b9aca00
 800a770:	0802b56c 	.word	0x0802b56c
 800a774:	2400b338 	.word	0x2400b338
 800a778:	2400bd38 	.word	0x2400bd38

0800a77c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08a      	sub	sp, #40	; 0x28
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a784:	4b31      	ldr	r3, [pc, #196]	; (800a84c <I2C4_MspInit+0xd0>)
 800a786:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a78a:	4a30      	ldr	r2, [pc, #192]	; (800a84c <I2C4_MspInit+0xd0>)
 800a78c:	f043 0308 	orr.w	r3, r3, #8
 800a790:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a794:	4b2d      	ldr	r3, [pc, #180]	; (800a84c <I2C4_MspInit+0xd0>)
 800a796:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a79a:	f003 0308 	and.w	r3, r3, #8
 800a79e:	613b      	str	r3, [r7, #16]
 800a7a0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800a7a2:	4b2a      	ldr	r3, [pc, #168]	; (800a84c <I2C4_MspInit+0xd0>)
 800a7a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7a8:	4a28      	ldr	r2, [pc, #160]	; (800a84c <I2C4_MspInit+0xd0>)
 800a7aa:	f043 0308 	orr.w	r3, r3, #8
 800a7ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a7b2:	4b26      	ldr	r3, [pc, #152]	; (800a84c <I2C4_MspInit+0xd0>)
 800a7b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7b8:	f003 0308 	and.w	r3, r3, #8
 800a7bc:	60fb      	str	r3, [r7, #12]
 800a7be:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800a7c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a7c6:	2312      	movs	r3, #18
 800a7c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a7d2:	2304      	movs	r3, #4
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a7d6:	f107 0314 	add.w	r3, r7, #20
 800a7da:	4619      	mov	r1, r3
 800a7dc:	481c      	ldr	r0, [pc, #112]	; (800a850 <I2C4_MspInit+0xd4>)
 800a7de:	f001 fec9 	bl	800c574 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800a7e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a7e8:	2312      	movs	r3, #18
 800a7ea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800a7f4:	2304      	movs	r3, #4
 800a7f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800a7f8:	f107 0314 	add.w	r3, r7, #20
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4814      	ldr	r0, [pc, #80]	; (800a850 <I2C4_MspInit+0xd4>)
 800a800:	f001 feb8 	bl	800c574 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800a804:	4b11      	ldr	r3, [pc, #68]	; (800a84c <I2C4_MspInit+0xd0>)
 800a806:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a80a:	4a10      	ldr	r2, [pc, #64]	; (800a84c <I2C4_MspInit+0xd0>)
 800a80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a810:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800a814:	4b0d      	ldr	r3, [pc, #52]	; (800a84c <I2C4_MspInit+0xd0>)
 800a816:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81e:	60bb      	str	r3, [r7, #8]
 800a820:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800a822:	4b0a      	ldr	r3, [pc, #40]	; (800a84c <I2C4_MspInit+0xd0>)
 800a824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a828:	4a08      	ldr	r2, [pc, #32]	; (800a84c <I2C4_MspInit+0xd0>)
 800a82a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800a832:	4b06      	ldr	r3, [pc, #24]	; (800a84c <I2C4_MspInit+0xd0>)
 800a834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a838:	4a04      	ldr	r2, [pc, #16]	; (800a84c <I2C4_MspInit+0xd0>)
 800a83a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a83e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800a842:	bf00      	nop
 800a844:	3728      	adds	r7, #40	; 0x28
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	58024400 	.word	0x58024400
 800a850:	58020c00 	.word	0x58020c00

0800a854 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800a85c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a860:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	4619      	mov	r1, r3
 800a866:	480b      	ldr	r0, [pc, #44]	; (800a894 <I2C4_MspDeInit+0x40>)
 800a868:	f002 f834 	bl	800c8d4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800a86c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a870:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	4619      	mov	r1, r3
 800a876:	4807      	ldr	r0, [pc, #28]	; (800a894 <I2C4_MspDeInit+0x40>)
 800a878:	f002 f82c 	bl	800c8d4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800a87c:	4b06      	ldr	r3, [pc, #24]	; (800a898 <I2C4_MspDeInit+0x44>)
 800a87e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a882:	4a05      	ldr	r2, [pc, #20]	; (800a898 <I2C4_MspDeInit+0x44>)
 800a884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a888:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800a88c:	bf00      	nop
 800a88e:	3720      	adds	r7, #32
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	58020c00 	.word	0x58020c00
 800a898:	58024400 	.word	0x58024400

0800a89c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b088      	sub	sp, #32
 800a8a0:	af04      	add	r7, sp, #16
 800a8a2:	607b      	str	r3, [r7, #4]
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	81fb      	strh	r3, [r7, #14]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	81bb      	strh	r3, [r7, #12]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a8b0:	8978      	ldrh	r0, [r7, #10]
 800a8b2:	89ba      	ldrh	r2, [r7, #12]
 800a8b4:	89f9      	ldrh	r1, [r7, #14]
 800a8b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a8ba:	9302      	str	r3, [sp, #8]
 800a8bc:	8b3b      	ldrh	r3, [r7, #24]
 800a8be:	9301      	str	r3, [sp, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	4807      	ldr	r0, [pc, #28]	; (800a8e4 <I2C4_WriteReg+0x48>)
 800a8c8:	f002 fa3e 	bl	800cd48 <HAL_I2C_Mem_Write>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	e001      	b.n	800a8da <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800a8d6:	f06f 0307 	mvn.w	r3, #7
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	2400bd3c 	.word	0x2400bd3c

0800a8e8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af04      	add	r7, sp, #16
 800a8ee:	607b      	str	r3, [r7, #4]
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	81fb      	strh	r3, [r7, #14]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	81bb      	strh	r3, [r7, #12]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a8fc:	8978      	ldrh	r0, [r7, #10]
 800a8fe:	89ba      	ldrh	r2, [r7, #12]
 800a900:	89f9      	ldrh	r1, [r7, #14]
 800a902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a906:	9302      	str	r3, [sp, #8]
 800a908:	8b3b      	ldrh	r3, [r7, #24]
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	4603      	mov	r3, r0
 800a912:	4807      	ldr	r0, [pc, #28]	; (800a930 <I2C4_ReadReg+0x48>)
 800a914:	f002 fb2c 	bl	800cf70 <HAL_I2C_Mem_Read>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800a91e:	2300      	movs	r3, #0
 800a920:	e001      	b.n	800a926 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800a922:	f06f 0307 	mvn.w	r3, #7
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	2400bd3c 	.word	0x2400bd3c

0800a934 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b094      	sub	sp, #80	; 0x50
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a93e:	2300      	movs	r3, #0
 800a940:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d003      	beq.n	800a950 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a948:	f06f 0301 	mvn.w	r3, #1
 800a94c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a94e:	e071      	b.n	800aa34 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800a950:	4a3b      	ldr	r2, [pc, #236]	; (800aa40 <BSP_OSPI_NOR_Init+0x10c>)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d16b      	bne.n	800aa34 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	225c      	movs	r2, #92	; 0x5c
 800a960:	fb02 f303 	mul.w	r3, r2, r3
 800a964:	4a37      	ldr	r2, [pc, #220]	; (800aa44 <BSP_OSPI_NOR_Init+0x110>)
 800a966:	4413      	add	r3, r2
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 fa09 	bl	800ad80 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800a96e:	f107 031c 	add.w	r3, r7, #28
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe fee8 	bl	8009748 <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 800a978:	2303      	movs	r3, #3
 800a97a:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a982:	fa93 f3a3 	rbit	r3, r3
 800a986:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a98a:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 800a992:	2320      	movs	r3, #32
 800a994:	e003      	b.n	800a99e <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 800a996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a998:	fab3 f383 	clz	r3, r3
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	785b      	ldrb	r3, [r3, #1]
 800a9a8:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	225c      	movs	r2, #92	; 0x5c
 800a9ae:	fb02 f303 	mul.w	r3, r2, r3
 800a9b2:	4a24      	ldr	r2, [pc, #144]	; (800aa44 <BSP_OSPI_NOR_Init+0x110>)
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f107 020c 	add.w	r2, r7, #12
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f895 	bl	800aaec <MX_OSPI_NOR_Init>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a9c8:	f06f 0303 	mvn.w	r3, #3
 800a9cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9ce:	e031      	b.n	800aa34 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fb7f 	bl	800b0d4 <OSPI_NOR_ResetMemory>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9dc:	f06f 0304 	mvn.w	r3, #4
 800a9e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9e2:	e027      	b.n	800aa34 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	225c      	movs	r2, #92	; 0x5c
 800a9e8:	fb02 f303 	mul.w	r3, r2, r3
 800a9ec:	4a15      	ldr	r2, [pc, #84]	; (800aa44 <BSP_OSPI_NOR_Init+0x110>)
 800a9ee:	1898      	adds	r0, r3, r2
 800a9f0:	4a13      	ldr	r2, [pc, #76]	; (800aa40 <BSP_OSPI_NOR_Init+0x10c>)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	4413      	add	r3, r2
 800a9f8:	7859      	ldrb	r1, [r3, #1]
 800a9fa:	4a11      	ldr	r2, [pc, #68]	; (800aa40 <BSP_OSPI_NOR_Init+0x10c>)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	00db      	lsls	r3, r3, #3
 800aa00:	4413      	add	r3, r2
 800aa02:	789b      	ldrb	r3, [r3, #2]
 800aa04:	461a      	mov	r2, r3
 800aa06:	f7fe fece 	bl	80097a6 <MX25LM51245G_AutoPollingMemReady>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d003      	beq.n	800aa18 <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa10:	f06f 0304 	mvn.w	r3, #4
 800aa14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa16:	e00d      	b.n	800aa34 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	7819      	ldrb	r1, [r3, #0]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	785b      	ldrb	r3, [r3, #1]
 800aa20:	461a      	mov	r2, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f936 	bl	800ac94 <BSP_OSPI_NOR_ConfigFlash>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa2e:	f06f 0304 	mvn.w	r3, #4
 800aa32:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 800aa34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3750      	adds	r7, #80	; 0x50
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	2400bdec 	.word	0x2400bdec
 800aa44:	2400bd90 	.word	0x2400bd90

0800aa48 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aa5a:	f06f 0301 	mvn.w	r3, #1
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	e03a      	b.n	800aad8 <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800aa62:	4a20      	ldr	r2, [pc, #128]	; (800aae4 <BSP_OSPI_NOR_DeInit+0x9c>)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d108      	bne.n	800aa80 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f8da 	bl	800ac28 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d002      	beq.n	800aa80 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa7a:	f06f 0304 	mvn.w	r3, #4
 800aa7e:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d128      	bne.n	800aad8 <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800aa86:	4a17      	ldr	r2, [pc, #92]	; (800aae4 <BSP_OSPI_NOR_DeInit+0x9c>)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800aa90:	4a14      	ldr	r2, [pc, #80]	; (800aae4 <BSP_OSPI_NOR_DeInit+0x9c>)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	4413      	add	r3, r2
 800aa98:	2200      	movs	r2, #0
 800aa9a:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800aa9c:	4a11      	ldr	r2, [pc, #68]	; (800aae4 <BSP_OSPI_NOR_DeInit+0x9c>)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	00db      	lsls	r3, r3, #3
 800aaa2:	4413      	add	r3, r2
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	225c      	movs	r2, #92	; 0x5c
 800aaac:	fb02 f303 	mul.w	r3, r2, r3
 800aab0:	4a0d      	ldr	r2, [pc, #52]	; (800aae8 <BSP_OSPI_NOR_DeInit+0xa0>)
 800aab2:	4413      	add	r3, r2
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 fab3 	bl	800b020 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	225c      	movs	r2, #92	; 0x5c
 800aabe:	fb02 f303 	mul.w	r3, r2, r3
 800aac2:	4a09      	ldr	r2, [pc, #36]	; (800aae8 <BSP_OSPI_NOR_DeInit+0xa0>)
 800aac4:	4413      	add	r3, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f005 fe98 	bl	80107fc <HAL_OSPI_DeInit>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d002      	beq.n	800aad8 <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800aad2:	f06f 0303 	mvn.w	r3, #3
 800aad6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800aad8:	68fb      	ldr	r3, [r7, #12]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	2400bdec 	.word	0x2400bdec
 800aae8:	2400bd90 	.word	0x2400bd90

0800aaec <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a20      	ldr	r2, [pc, #128]	; (800ab7c <MX_OSPI_NOR_Init+0x90>)
 800aafa:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2204      	movs	r2, #4
 800ab00:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	689a      	ldr	r2, [r3, #8]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2208      	movs	r2, #8
 800ab42:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d108      	bne.n	800ab5e <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab52:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab5a:	62da      	str	r2, [r3, #44]	; 0x2c
 800ab5c:	e005      	b.n	800ab6a <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f005 fd8a 	bl	8010684 <HAL_OSPI_Init>
 800ab70:	4603      	mov	r3, r0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	52005000 	.word	0x52005000

0800ab80 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d003      	beq.n	800ab9a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ab92:	f06f 0301 	mvn.w	r3, #1
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	e03d      	b.n	800ac16 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800ab9a:	4a21      	ldr	r2, [pc, #132]	; (800ac20 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	4413      	add	r3, r2
 800aba2:	789b      	ldrb	r3, [r3, #2]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d11b      	bne.n	800abe0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	225c      	movs	r2, #92	; 0x5c
 800abac:	fb02 f303 	mul.w	r3, r2, r3
 800abb0:	4a1c      	ldr	r2, [pc, #112]	; (800ac24 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800abb2:	1898      	adds	r0, r3, r2
 800abb4:	4a1a      	ldr	r2, [pc, #104]	; (800ac20 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	00db      	lsls	r3, r3, #3
 800abba:	4413      	add	r3, r2
 800abbc:	785b      	ldrb	r3, [r3, #1]
 800abbe:	2201      	movs	r2, #1
 800abc0:	4619      	mov	r1, r3
 800abc2:	f7fe fe9d 	bl	8009900 <MX25LM51245G_EnableMemoryMappedModeSTR>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800abcc:	f06f 0304 	mvn.w	r3, #4
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	e020      	b.n	800ac16 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800abd4:	4a12      	ldr	r2, [pc, #72]	; (800ac20 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2102      	movs	r1, #2
 800abda:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800abde:	e01a      	b.n	800ac16 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	225c      	movs	r2, #92	; 0x5c
 800abe4:	fb02 f303 	mul.w	r3, r2, r3
 800abe8:	4a0e      	ldr	r2, [pc, #56]	; (800ac24 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800abea:	441a      	add	r2, r3
 800abec:	490c      	ldr	r1, [pc, #48]	; (800ac20 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	440b      	add	r3, r1
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	4619      	mov	r1, r3
 800abf8:	4610      	mov	r0, r2
 800abfa:	f7fe ff2b 	bl	8009a54 <MX25LM51245G_EnableMemoryMappedModeDTR>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d003      	beq.n	800ac0c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac04:	f06f 0304 	mvn.w	r3, #4
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	e004      	b.n	800ac16 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800ac0c:	4a04      	ldr	r2, [pc, #16]	; (800ac20 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2102      	movs	r1, #2
 800ac12:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800ac16:	68fb      	ldr	r3, [r7, #12]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	2400bdec 	.word	0x2400bdec
 800ac24:	2400bd90 	.word	0x2400bd90

0800ac28 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ac30:	2300      	movs	r3, #0
 800ac32:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ac3a:	f06f 0301 	mvn.w	r3, #1
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	e01e      	b.n	800ac80 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800ac42:	4a12      	ldr	r2, [pc, #72]	; (800ac8c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d003      	beq.n	800ac56 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800ac4e:	f06f 031a 	mvn.w	r3, #26
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	e014      	b.n	800ac80 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	225c      	movs	r2, #92	; 0x5c
 800ac5a:	fb02 f303 	mul.w	r3, r2, r3
 800ac5e:	4a0c      	ldr	r2, [pc, #48]	; (800ac90 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 800ac60:	4413      	add	r3, r2
 800ac62:	4618      	mov	r0, r3
 800ac64:	f006 f9fc 	bl	8011060 <HAL_OSPI_Abort>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800ac6e:	f06f 0303 	mvn.w	r3, #3
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	e004      	b.n	800ac80 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800ac76:	4a05      	ldr	r2, [pc, #20]	; (800ac8c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2101      	movs	r1, #1
 800ac7c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 800ac80:	68fb      	ldr	r3, [r7, #12]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	2400bdec 	.word	0x2400bdec
 800ac90:	2400bd90 	.word	0x2400bd90

0800ac94 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	70fb      	strb	r3, [r7, #3]
 800aca0:	4613      	mov	r3, r2
 800aca2:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800aca4:	2300      	movs	r3, #0
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800acae:	f06f 0301 	mvn.w	r3, #1
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	e05d      	b.n	800ad72 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800acb6:	4a31      	ldr	r2, [pc, #196]	; (800ad7c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d103      	bne.n	800acca <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800acc2:	f06f 0319 	mvn.w	r3, #25
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	e053      	b.n	800ad72 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800acca:	4a2c      	ldr	r2, [pc, #176]	; (800ad7c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	4413      	add	r3, r2
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d125      	bne.n	800ad24 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800acd8:	78fb      	ldrb	r3, [r7, #3]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d107      	bne.n	800acee <BSP_OSPI_NOR_ConfigFlash+0x5a>
 800acde:	4a27      	ldr	r2, [pc, #156]	; (800ad7c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	4413      	add	r3, r2
 800ace6:	789b      	ldrb	r3, [r3, #2]
 800ace8:	78ba      	ldrb	r2, [r7, #2]
 800acea:	429a      	cmp	r2, r3
 800acec:	d02a      	beq.n	800ad44 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fbfc 	bl	800b4ec <OSPI_NOR_ExitOPIMode>
 800acf4:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d123      	bne.n	800ad44 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 800acfc:	78fb      	ldrb	r3, [r7, #3]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d120      	bne.n	800ad44 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800ad02:	4a1e      	ldr	r2, [pc, #120]	; (800ad7c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	4413      	add	r3, r2
 800ad0a:	789b      	ldrb	r3, [r3, #2]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d104      	bne.n	800ad1a <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fa6f 	bl	800b1f4 <OSPI_NOR_EnterDOPIMode>
 800ad16:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800ad18:	e014      	b.n	800ad44 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fb3a 	bl	800b394 <OSPI_NOR_EnterSOPIMode>
 800ad20:	60f8      	str	r0, [r7, #12]
      break;
 800ad22:	e00f      	b.n	800ad44 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800ad24:	78fb      	ldrb	r3, [r7, #3]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d10e      	bne.n	800ad48 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800ad2a:	78bb      	ldrb	r3, [r7, #2]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d104      	bne.n	800ad3a <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fb2f 	bl	800b394 <OSPI_NOR_EnterSOPIMode>
 800ad36:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 800ad38:	e006      	b.n	800ad48 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa5a 	bl	800b1f4 <OSPI_NOR_EnterDOPIMode>
 800ad40:	60f8      	str	r0, [r7, #12]
      break;
 800ad42:	e001      	b.n	800ad48 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 800ad44:	bf00      	nop
 800ad46:	e000      	b.n	800ad4a <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 800ad48:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d110      	bne.n	800ad72 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800ad50:	4a0a      	ldr	r2, [pc, #40]	; (800ad7c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2101      	movs	r1, #1
 800ad56:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800ad5a:	4a08      	ldr	r2, [pc, #32]	; (800ad7c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	4413      	add	r3, r2
 800ad62:	78fa      	ldrb	r2, [r7, #3]
 800ad64:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800ad66:	4a05      	ldr	r2, [pc, #20]	; (800ad7c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	4413      	add	r3, r2
 800ad6e:	78ba      	ldrb	r2, [r7, #2]
 800ad70:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 800ad72:	68fb      	ldr	r3, [r7, #12]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	2400bdec 	.word	0x2400bdec

0800ad80 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b094      	sub	sp, #80	; 0x50
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800ad88:	4b9e      	ldr	r3, [pc, #632]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ad8a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ad8e:	4a9d      	ldr	r2, [pc, #628]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ad90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad94:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800ad98:	4b9a      	ldr	r3, [pc, #616]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ad9a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ad9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ada2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ada4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800ada6:	4b97      	ldr	r3, [pc, #604]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ada8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adaa:	4a96      	ldr	r2, [pc, #600]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800adac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800adb0:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800adb2:	4b94      	ldr	r3, [pc, #592]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800adb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adb6:	4a93      	ldr	r2, [pc, #588]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800adb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adbc:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 800adbe:	4b91      	ldr	r3, [pc, #580]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800adc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800adc4:	4a8f      	ldr	r2, [pc, #572]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800adc6:	f043 0302 	orr.w	r3, r3, #2
 800adca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800adce:	4b8d      	ldr	r3, [pc, #564]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800add0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800add4:	f003 0302 	and.w	r3, r3, #2
 800add8:	637b      	str	r3, [r7, #52]	; 0x34
 800adda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 800addc:	4b89      	ldr	r3, [pc, #548]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800adde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ade2:	4a88      	ldr	r2, [pc, #544]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ade4:	f043 0304 	orr.w	r3, r3, #4
 800ade8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800adec:	4b85      	ldr	r3, [pc, #532]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800adee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800adf2:	f003 0304 	and.w	r3, r3, #4
 800adf6:	633b      	str	r3, [r7, #48]	; 0x30
 800adf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800adfa:	4b82      	ldr	r3, [pc, #520]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800adfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae00:	4a80      	ldr	r2, [pc, #512]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ae0a:	4b7e      	ldr	r3, [pc, #504]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800ae18:	4b7a      	ldr	r3, [pc, #488]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae1e:	4a79      	ldr	r2, [pc, #484]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae20:	f043 0308 	orr.w	r3, r3, #8
 800ae24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ae28:	4b76      	ldr	r3, [pc, #472]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae2e:	f003 0308 	and.w	r3, r3, #8
 800ae32:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae34:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 800ae36:	4b73      	ldr	r3, [pc, #460]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae3c:	4a71      	ldr	r2, [pc, #452]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae3e:	f043 0320 	orr.w	r3, r3, #32
 800ae42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ae46:	4b6f      	ldr	r3, [pc, #444]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae4c:	f003 0320 	and.w	r3, r3, #32
 800ae50:	627b      	str	r3, [r7, #36]	; 0x24
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 800ae54:	4b6b      	ldr	r3, [pc, #428]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae5a:	4a6a      	ldr	r2, [pc, #424]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae5c:	f043 0320 	orr.w	r3, r3, #32
 800ae60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ae64:	4b67      	ldr	r3, [pc, #412]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae6a:	f003 0320 	and.w	r3, r3, #32
 800ae6e:	623b      	str	r3, [r7, #32]
 800ae70:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 800ae72:	4b64      	ldr	r3, [pc, #400]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae78:	4a62      	ldr	r2, [pc, #392]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae7a:	f043 0320 	orr.w	r3, r3, #32
 800ae7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ae82:	4b60      	ldr	r3, [pc, #384]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae88:	f003 0320 	and.w	r3, r3, #32
 800ae8c:	61fb      	str	r3, [r7, #28]
 800ae8e:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 800ae90:	4b5c      	ldr	r3, [pc, #368]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae96:	4a5b      	ldr	r2, [pc, #364]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800ae98:	f043 0304 	orr.w	r3, r3, #4
 800ae9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800aea0:	4b58      	ldr	r3, [pc, #352]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800aea2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800aea6:	f003 0304 	and.w	r3, r3, #4
 800aeaa:	61bb      	str	r3, [r7, #24]
 800aeac:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 800aeae:	4b55      	ldr	r3, [pc, #340]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800aeb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800aeb4:	4a53      	ldr	r2, [pc, #332]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800aeb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800aebe:	4b51      	ldr	r3, [pc, #324]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800aec0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800aec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 800aecc:	4b4d      	ldr	r3, [pc, #308]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800aece:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800aed2:	4a4c      	ldr	r2, [pc, #304]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800aed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aed8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800aedc:	4b49      	ldr	r3, [pc, #292]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800aede:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800aee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee6:	613b      	str	r3, [r7, #16]
 800aee8:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 800aeea:	4b46      	ldr	r3, [pc, #280]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800aeec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800aef0:	4a44      	ldr	r2, [pc, #272]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800aef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aef6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800aefa:	4b42      	ldr	r3, [pc, #264]	; (800b004 <OSPI_NOR_MspInit+0x284>)
 800aefc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800af00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af04:	60fb      	str	r3, [r7, #12]
 800af06:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800af08:	2340      	movs	r3, #64	; 0x40
 800af0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800af0c:	2302      	movs	r3, #2
 800af0e:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800af10:	2301      	movs	r3, #1
 800af12:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800af14:	2303      	movs	r3, #3
 800af16:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800af18:	230a      	movs	r3, #10
 800af1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800af1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af20:	4619      	mov	r1, r3
 800af22:	4839      	ldr	r0, [pc, #228]	; (800b008 <OSPI_NOR_MspInit+0x288>)
 800af24:	f001 fb26 	bl	800c574 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 800af28:	2320      	movs	r3, #32
 800af2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 800af2c:	230a      	movs	r3, #10
 800af2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 800af30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af34:	4619      	mov	r1, r3
 800af36:	4835      	ldr	r0, [pc, #212]	; (800b00c <OSPI_NOR_MspInit+0x28c>)
 800af38:	f001 fb1c 	bl	800c574 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 800af3c:	2304      	movs	r3, #4
 800af3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800af40:	2300      	movs	r3, #0
 800af42:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800af44:	2309      	movs	r3, #9
 800af46:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800af48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af4c:	4619      	mov	r1, r3
 800af4e:	4830      	ldr	r0, [pc, #192]	; (800b010 <OSPI_NOR_MspInit+0x290>)
 800af50:	f001 fb10 	bl	800c574 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 800af54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af58:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800af5a:	2309      	movs	r3, #9
 800af5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800af5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af62:	4619      	mov	r1, r3
 800af64:	482b      	ldr	r0, [pc, #172]	; (800b014 <OSPI_NOR_MspInit+0x294>)
 800af66:	f001 fb05 	bl	800c574 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800af6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800af70:	230a      	movs	r3, #10
 800af72:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800af74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af78:	4619      	mov	r1, r3
 800af7a:	4827      	ldr	r0, [pc, #156]	; (800b018 <OSPI_NOR_MspInit+0x298>)
 800af7c:	f001 fafa 	bl	800c574 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800af80:	2380      	movs	r3, #128	; 0x80
 800af82:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800af84:	230a      	movs	r3, #10
 800af86:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800af88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af8c:	4619      	mov	r1, r3
 800af8e:	4822      	ldr	r0, [pc, #136]	; (800b018 <OSPI_NOR_MspInit+0x298>)
 800af90:	f001 faf0 	bl	800c574 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800af94:	2340      	movs	r3, #64	; 0x40
 800af96:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800af98:	230a      	movs	r3, #10
 800af9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800af9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800afa0:	4619      	mov	r1, r3
 800afa2:	481d      	ldr	r0, [pc, #116]	; (800b018 <OSPI_NOR_MspInit+0x298>)
 800afa4:	f001 fae6 	bl	800c574 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800afa8:	2302      	movs	r3, #2
 800afaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800afac:	230a      	movs	r3, #10
 800afae:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800afb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800afb4:	4619      	mov	r1, r3
 800afb6:	4815      	ldr	r0, [pc, #84]	; (800b00c <OSPI_NOR_MspInit+0x28c>)
 800afb8:	f001 fadc 	bl	800c574 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800afbc:	2308      	movs	r3, #8
 800afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800afc0:	2309      	movs	r3, #9
 800afc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800afc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800afc8:	4619      	mov	r1, r3
 800afca:	4814      	ldr	r0, [pc, #80]	; (800b01c <OSPI_NOR_MspInit+0x29c>)
 800afcc:	f001 fad2 	bl	800c574 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800afd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800afd6:	2309      	movs	r3, #9
 800afd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800afda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800afde:	4619      	mov	r1, r3
 800afe0:	4809      	ldr	r0, [pc, #36]	; (800b008 <OSPI_NOR_MspInit+0x288>)
 800afe2:	f001 fac7 	bl	800c574 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800afe6:	2380      	movs	r3, #128	; 0x80
 800afe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800afea:	230a      	movs	r3, #10
 800afec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800afee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aff2:	4619      	mov	r1, r3
 800aff4:	4807      	ldr	r0, [pc, #28]	; (800b014 <OSPI_NOR_MspInit+0x294>)
 800aff6:	f001 fabd 	bl	800c574 <HAL_GPIO_Init>
}
 800affa:	bf00      	nop
 800affc:	3750      	adds	r7, #80	; 0x50
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	58024400 	.word	0x58024400
 800b008:	58021800 	.word	0x58021800
 800b00c:	58020800 	.word	0x58020800
 800b010:	58020400 	.word	0x58020400
 800b014:	58020c00 	.word	0x58020c00
 800b018:	58021400 	.word	0x58021400
 800b01c:	58021c00 	.word	0x58021c00

0800b020 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800b028:	2104      	movs	r1, #4
 800b02a:	4823      	ldr	r0, [pc, #140]	; (800b0b8 <OSPI_NOR_MspDeInit+0x98>)
 800b02c:	f001 fc52 	bl	800c8d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800b030:	2120      	movs	r1, #32
 800b032:	4822      	ldr	r0, [pc, #136]	; (800b0bc <OSPI_NOR_MspDeInit+0x9c>)
 800b034:	f001 fc4e 	bl	800c8d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 800b038:	2140      	movs	r1, #64	; 0x40
 800b03a:	4821      	ldr	r0, [pc, #132]	; (800b0c0 <OSPI_NOR_MspDeInit+0xa0>)
 800b03c:	f001 fc4a 	bl	800c8d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800b040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b044:	481f      	ldr	r0, [pc, #124]	; (800b0c4 <OSPI_NOR_MspDeInit+0xa4>)
 800b046:	f001 fc45 	bl	800c8d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800b04a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b04e:	481e      	ldr	r0, [pc, #120]	; (800b0c8 <OSPI_NOR_MspDeInit+0xa8>)
 800b050:	f001 fc40 	bl	800c8d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800b054:	2180      	movs	r1, #128	; 0x80
 800b056:	481c      	ldr	r0, [pc, #112]	; (800b0c8 <OSPI_NOR_MspDeInit+0xa8>)
 800b058:	f001 fc3c 	bl	800c8d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800b05c:	2140      	movs	r1, #64	; 0x40
 800b05e:	481a      	ldr	r0, [pc, #104]	; (800b0c8 <OSPI_NOR_MspDeInit+0xa8>)
 800b060:	f001 fc38 	bl	800c8d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800b064:	2102      	movs	r1, #2
 800b066:	4815      	ldr	r0, [pc, #84]	; (800b0bc <OSPI_NOR_MspDeInit+0x9c>)
 800b068:	f001 fc34 	bl	800c8d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800b06c:	2108      	movs	r1, #8
 800b06e:	4817      	ldr	r0, [pc, #92]	; (800b0cc <OSPI_NOR_MspDeInit+0xac>)
 800b070:	f001 fc30 	bl	800c8d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800b074:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b078:	4811      	ldr	r0, [pc, #68]	; (800b0c0 <OSPI_NOR_MspDeInit+0xa0>)
 800b07a:	f001 fc2b 	bl	800c8d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800b07e:	2180      	movs	r1, #128	; 0x80
 800b080:	4810      	ldr	r0, [pc, #64]	; (800b0c4 <OSPI_NOR_MspDeInit+0xa4>)
 800b082:	f001 fc27 	bl	800c8d4 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800b086:	4b12      	ldr	r3, [pc, #72]	; (800b0d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b08a:	4a11      	ldr	r2, [pc, #68]	; (800b0d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b08c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b090:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800b092:	4b0f      	ldr	r3, [pc, #60]	; (800b0d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b096:	4a0e      	ldr	r2, [pc, #56]	; (800b0d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b09c:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 800b09e:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b0a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800b0a4:	4a0a      	ldr	r2, [pc, #40]	; (800b0d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b0a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0aa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 800b0ae:	bf00      	nop
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	58020400 	.word	0x58020400
 800b0bc:	58020800 	.word	0x58020800
 800b0c0:	58021800 	.word	0x58021800
 800b0c4:	58020c00 	.word	0x58020c00
 800b0c8:	58021400 	.word	0x58021400
 800b0cc:	58021c00 	.word	0x58021c00
 800b0d0:	58024400 	.word	0x58024400

0800b0d4 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	225c      	movs	r2, #92	; 0x5c
 800b0e4:	fb02 f303 	mul.w	r3, r2, r3
 800b0e8:	4a40      	ldr	r2, [pc, #256]	; (800b1ec <OSPI_NOR_ResetMemory+0x118>)
 800b0ea:	4413      	add	r3, r2
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fe ff18 	bl	8009f26 <MX25LM51245G_ResetEnable>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0fc:	f06f 0304 	mvn.w	r3, #4
 800b100:	60fb      	str	r3, [r7, #12]
 800b102:	e06d      	b.n	800b1e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	225c      	movs	r2, #92	; 0x5c
 800b108:	fb02 f303 	mul.w	r3, r2, r3
 800b10c:	4a37      	ldr	r2, [pc, #220]	; (800b1ec <OSPI_NOR_ResetMemory+0x118>)
 800b10e:	4413      	add	r3, r2
 800b110:	2200      	movs	r2, #0
 800b112:	2100      	movs	r1, #0
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe ff5e 	bl	8009fd6 <MX25LM51245G_ResetMemory>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d003      	beq.n	800b128 <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b120:	f06f 0304 	mvn.w	r3, #4
 800b124:	60fb      	str	r3, [r7, #12]
 800b126:	e05b      	b.n	800b1e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	225c      	movs	r2, #92	; 0x5c
 800b12c:	fb02 f303 	mul.w	r3, r2, r3
 800b130:	4a2e      	ldr	r2, [pc, #184]	; (800b1ec <OSPI_NOR_ResetMemory+0x118>)
 800b132:	4413      	add	r3, r2
 800b134:	2200      	movs	r2, #0
 800b136:	2101      	movs	r1, #1
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe fef4 	bl	8009f26 <MX25LM51245G_ResetEnable>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b144:	f06f 0304 	mvn.w	r3, #4
 800b148:	60fb      	str	r3, [r7, #12]
 800b14a:	e049      	b.n	800b1e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	225c      	movs	r2, #92	; 0x5c
 800b150:	fb02 f303 	mul.w	r3, r2, r3
 800b154:	4a25      	ldr	r2, [pc, #148]	; (800b1ec <OSPI_NOR_ResetMemory+0x118>)
 800b156:	4413      	add	r3, r2
 800b158:	2200      	movs	r2, #0
 800b15a:	2101      	movs	r1, #1
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fe ff3a 	bl	8009fd6 <MX25LM51245G_ResetMemory>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d003      	beq.n	800b170 <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b168:	f06f 0304 	mvn.w	r3, #4
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	e037      	b.n	800b1e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	225c      	movs	r2, #92	; 0x5c
 800b174:	fb02 f303 	mul.w	r3, r2, r3
 800b178:	4a1c      	ldr	r2, [pc, #112]	; (800b1ec <OSPI_NOR_ResetMemory+0x118>)
 800b17a:	4413      	add	r3, r2
 800b17c:	2201      	movs	r2, #1
 800b17e:	2101      	movs	r1, #1
 800b180:	4618      	mov	r0, r3
 800b182:	f7fe fed0 	bl	8009f26 <MX25LM51245G_ResetEnable>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d003      	beq.n	800b194 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b18c:	f06f 0304 	mvn.w	r3, #4
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	e025      	b.n	800b1e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	225c      	movs	r2, #92	; 0x5c
 800b198:	fb02 f303 	mul.w	r3, r2, r3
 800b19c:	4a13      	ldr	r2, [pc, #76]	; (800b1ec <OSPI_NOR_ResetMemory+0x118>)
 800b19e:	4413      	add	r3, r2
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fe ff16 	bl	8009fd6 <MX25LM51245G_ResetMemory>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1b0:	f06f 0304 	mvn.w	r3, #4
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	e013      	b.n	800b1e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800b1b8:	4a0d      	ldr	r2, [pc, #52]	; (800b1f0 <OSPI_NOR_ResetMemory+0x11c>)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2101      	movs	r1, #1
 800b1be:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800b1c2:	4a0b      	ldr	r2, [pc, #44]	; (800b1f0 <OSPI_NOR_ResetMemory+0x11c>)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800b1ce:	4a08      	ldr	r2, [pc, #32]	; (800b1f0 <OSPI_NOR_ResetMemory+0x11c>)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	00db      	lsls	r3, r3, #3
 800b1d4:	4413      	add	r3, r2
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800b1da:	2064      	movs	r0, #100	; 0x64
 800b1dc:	f000 fd04 	bl	800bbe8 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	2400bd90 	.word	0x2400bd90
 800b1f0:	2400bdec 	.word	0x2400bdec

0800b1f4 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af02      	add	r7, sp, #8
 800b1fa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	225c      	movs	r2, #92	; 0x5c
 800b204:	fb02 f303 	mul.w	r3, r2, r3
 800b208:	4a60      	ldr	r2, [pc, #384]	; (800b38c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b20a:	1898      	adds	r0, r3, r2
 800b20c:	4a60      	ldr	r2, [pc, #384]	; (800b390 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	00db      	lsls	r3, r3, #3
 800b212:	4413      	add	r3, r2
 800b214:	7859      	ldrb	r1, [r3, #1]
 800b216:	4a5e      	ldr	r2, [pc, #376]	; (800b390 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	4413      	add	r3, r2
 800b21e:	789b      	ldrb	r3, [r3, #2]
 800b220:	461a      	mov	r2, r3
 800b222:	f7fe fc86 	bl	8009b32 <MX25LM51245G_WriteEnable>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b22c:	f06f 0304 	mvn.w	r3, #4
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	e0a6      	b.n	800b382 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	225c      	movs	r2, #92	; 0x5c
 800b238:	fb02 f303 	mul.w	r3, r2, r3
 800b23c:	4a53      	ldr	r2, [pc, #332]	; (800b38c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b23e:	1898      	adds	r0, r3, r2
 800b240:	4a53      	ldr	r2, [pc, #332]	; (800b390 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	00db      	lsls	r3, r3, #3
 800b246:	4413      	add	r3, r2
 800b248:	7859      	ldrb	r1, [r3, #1]
 800b24a:	4a51      	ldr	r2, [pc, #324]	; (800b390 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	00db      	lsls	r3, r3, #3
 800b250:	4413      	add	r3, r2
 800b252:	789a      	ldrb	r2, [r3, #2]
 800b254:	2307      	movs	r3, #7
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b25c:	f7fe fd34 	bl	8009cc8 <MX25LM51245G_WriteCfg2Register>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b266:	f06f 0304 	mvn.w	r3, #4
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	e089      	b.n	800b382 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	225c      	movs	r2, #92	; 0x5c
 800b272:	fb02 f303 	mul.w	r3, r2, r3
 800b276:	4a45      	ldr	r2, [pc, #276]	; (800b38c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b278:	1898      	adds	r0, r3, r2
 800b27a:	4a45      	ldr	r2, [pc, #276]	; (800b390 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	4413      	add	r3, r2
 800b282:	7859      	ldrb	r1, [r3, #1]
 800b284:	4a42      	ldr	r2, [pc, #264]	; (800b390 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	00db      	lsls	r3, r3, #3
 800b28a:	4413      	add	r3, r2
 800b28c:	789b      	ldrb	r3, [r3, #2]
 800b28e:	461a      	mov	r2, r3
 800b290:	f7fe fc4f 	bl	8009b32 <MX25LM51245G_WriteEnable>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b29a:	f06f 0304 	mvn.w	r3, #4
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	e06f      	b.n	800b382 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	225c      	movs	r2, #92	; 0x5c
 800b2a6:	fb02 f303 	mul.w	r3, r2, r3
 800b2aa:	4a38      	ldr	r2, [pc, #224]	; (800b38c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b2ac:	1898      	adds	r0, r3, r2
 800b2ae:	4a38      	ldr	r2, [pc, #224]	; (800b390 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	00db      	lsls	r3, r3, #3
 800b2b4:	4413      	add	r3, r2
 800b2b6:	7859      	ldrb	r1, [r3, #1]
 800b2b8:	4a35      	ldr	r2, [pc, #212]	; (800b390 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	00db      	lsls	r3, r3, #3
 800b2be:	4413      	add	r3, r2
 800b2c0:	789a      	ldrb	r2, [r3, #2]
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	f7fe fcfe 	bl	8009cc8 <MX25LM51245G_WriteCfg2Register>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2d2:	f06f 0304 	mvn.w	r3, #4
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	e053      	b.n	800b382 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800b2da:	2028      	movs	r0, #40	; 0x28
 800b2dc:	f000 fc84 	bl	800bbe8 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800b2e0:	4a2a      	ldr	r2, [pc, #168]	; (800b38c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	215c      	movs	r1, #92	; 0x5c
 800b2e6:	fb01 f303 	mul.w	r3, r1, r3
 800b2ea:	4413      	add	r3, r2
 800b2ec:	330c      	adds	r3, #12
 800b2ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2f2:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800b2f4:	4a25      	ldr	r2, [pc, #148]	; (800b38c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	215c      	movs	r1, #92	; 0x5c
 800b2fa:	fb01 f303 	mul.w	r3, r1, r3
 800b2fe:	4413      	add	r3, r2
 800b300:	332c      	adds	r3, #44	; 0x2c
 800b302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b306:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	225c      	movs	r2, #92	; 0x5c
 800b30c:	fb02 f303 	mul.w	r3, r2, r3
 800b310:	4a1e      	ldr	r2, [pc, #120]	; (800b38c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b312:	4413      	add	r3, r2
 800b314:	4618      	mov	r0, r3
 800b316:	f005 f9b5 	bl	8010684 <HAL_OSPI_Init>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b320:	f06f 0303 	mvn.w	r3, #3
 800b324:	60fb      	str	r3, [r7, #12]
 800b326:	e02c      	b.n	800b382 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	225c      	movs	r2, #92	; 0x5c
 800b32c:	fb02 f303 	mul.w	r3, r2, r3
 800b330:	4a16      	ldr	r2, [pc, #88]	; (800b38c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b332:	4413      	add	r3, r2
 800b334:	2201      	movs	r2, #1
 800b336:	2101      	movs	r1, #1
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe fa34 	bl	80097a6 <MX25LM51245G_AutoPollingMemReady>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d003      	beq.n	800b34c <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b344:	f06f 0304 	mvn.w	r3, #4
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	e01a      	b.n	800b382 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	225c      	movs	r2, #92	; 0x5c
 800b350:	fb02 f303 	mul.w	r3, r2, r3
 800b354:	4a0d      	ldr	r2, [pc, #52]	; (800b38c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b356:	1898      	adds	r0, r3, r2
 800b358:	f107 0308 	add.w	r3, r7, #8
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	2300      	movs	r3, #0
 800b360:	2201      	movs	r2, #1
 800b362:	2101      	movs	r1, #1
 800b364:	f7fe fd45 	bl	8009df2 <MX25LM51245G_ReadCfg2Register>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b36e:	f06f 0304 	mvn.w	r3, #4
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	e005      	b.n	800b382 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800b376:	7a3b      	ldrb	r3, [r7, #8]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d002      	beq.n	800b382 <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b37c:	f06f 0304 	mvn.w	r3, #4
 800b380:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800b382:	68fb      	ldr	r3, [r7, #12]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	2400bd90 	.word	0x2400bd90
 800b390:	2400bdec 	.word	0x2400bdec

0800b394 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af02      	add	r7, sp, #8
 800b39a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b39c:	2300      	movs	r3, #0
 800b39e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	225c      	movs	r2, #92	; 0x5c
 800b3a4:	fb02 f303 	mul.w	r3, r2, r3
 800b3a8:	4a4e      	ldr	r2, [pc, #312]	; (800b4e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b3aa:	1898      	adds	r0, r3, r2
 800b3ac:	4a4e      	ldr	r2, [pc, #312]	; (800b4e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	00db      	lsls	r3, r3, #3
 800b3b2:	4413      	add	r3, r2
 800b3b4:	7859      	ldrb	r1, [r3, #1]
 800b3b6:	4a4c      	ldr	r2, [pc, #304]	; (800b4e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	4413      	add	r3, r2
 800b3be:	789b      	ldrb	r3, [r3, #2]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	f7fe fbb6 	bl	8009b32 <MX25LM51245G_WriteEnable>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3cc:	f06f 0304 	mvn.w	r3, #4
 800b3d0:	60fb      	str	r3, [r7, #12]
 800b3d2:	e082      	b.n	800b4da <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	225c      	movs	r2, #92	; 0x5c
 800b3d8:	fb02 f303 	mul.w	r3, r2, r3
 800b3dc:	4a41      	ldr	r2, [pc, #260]	; (800b4e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b3de:	1898      	adds	r0, r3, r2
 800b3e0:	4a41      	ldr	r2, [pc, #260]	; (800b4e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	00db      	lsls	r3, r3, #3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	7859      	ldrb	r1, [r3, #1]
 800b3ea:	4a3f      	ldr	r2, [pc, #252]	; (800b4e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	00db      	lsls	r3, r3, #3
 800b3f0:	4413      	add	r3, r2
 800b3f2:	789a      	ldrb	r2, [r3, #2]
 800b3f4:	2307      	movs	r3, #7
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b3fc:	f7fe fc64 	bl	8009cc8 <MX25LM51245G_WriteCfg2Register>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d003      	beq.n	800b40e <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b406:	f06f 0304 	mvn.w	r3, #4
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	e065      	b.n	800b4da <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	225c      	movs	r2, #92	; 0x5c
 800b412:	fb02 f303 	mul.w	r3, r2, r3
 800b416:	4a33      	ldr	r2, [pc, #204]	; (800b4e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b418:	1898      	adds	r0, r3, r2
 800b41a:	4a33      	ldr	r2, [pc, #204]	; (800b4e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	00db      	lsls	r3, r3, #3
 800b420:	4413      	add	r3, r2
 800b422:	7859      	ldrb	r1, [r3, #1]
 800b424:	4a30      	ldr	r2, [pc, #192]	; (800b4e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	4413      	add	r3, r2
 800b42c:	789b      	ldrb	r3, [r3, #2]
 800b42e:	461a      	mov	r2, r3
 800b430:	f7fe fb7f 	bl	8009b32 <MX25LM51245G_WriteEnable>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b43a:	f06f 0304 	mvn.w	r3, #4
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	e04b      	b.n	800b4da <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	225c      	movs	r2, #92	; 0x5c
 800b446:	fb02 f303 	mul.w	r3, r2, r3
 800b44a:	4a26      	ldr	r2, [pc, #152]	; (800b4e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b44c:	1898      	adds	r0, r3, r2
 800b44e:	4a26      	ldr	r2, [pc, #152]	; (800b4e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	4413      	add	r3, r2
 800b456:	7859      	ldrb	r1, [r3, #1]
 800b458:	4a23      	ldr	r2, [pc, #140]	; (800b4e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	4413      	add	r3, r2
 800b460:	789a      	ldrb	r2, [r3, #2]
 800b462:	2301      	movs	r3, #1
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	2300      	movs	r3, #0
 800b468:	f7fe fc2e 	bl	8009cc8 <MX25LM51245G_WriteCfg2Register>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d003      	beq.n	800b47a <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b472:	f06f 0304 	mvn.w	r3, #4
 800b476:	60fb      	str	r3, [r7, #12]
 800b478:	e02f      	b.n	800b4da <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800b47a:	2028      	movs	r0, #40	; 0x28
 800b47c:	f000 fbb4 	bl	800bbe8 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	225c      	movs	r2, #92	; 0x5c
 800b484:	fb02 f303 	mul.w	r3, r2, r3
 800b488:	4a16      	ldr	r2, [pc, #88]	; (800b4e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b48a:	4413      	add	r3, r2
 800b48c:	2200      	movs	r2, #0
 800b48e:	2101      	movs	r1, #1
 800b490:	4618      	mov	r0, r3
 800b492:	f7fe f988 	bl	80097a6 <MX25LM51245G_AutoPollingMemReady>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d003      	beq.n	800b4a4 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b49c:	f06f 0304 	mvn.w	r3, #4
 800b4a0:	60fb      	str	r3, [r7, #12]
 800b4a2:	e01a      	b.n	800b4da <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	225c      	movs	r2, #92	; 0x5c
 800b4a8:	fb02 f303 	mul.w	r3, r2, r3
 800b4ac:	4a0d      	ldr	r2, [pc, #52]	; (800b4e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b4ae:	1898      	adds	r0, r3, r2
 800b4b0:	f107 0308 	add.w	r3, r7, #8
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	f7fe fc99 	bl	8009df2 <MX25LM51245G_ReadCfg2Register>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4c6:	f06f 0304 	mvn.w	r3, #4
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	e005      	b.n	800b4da <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800b4ce:	7a3b      	ldrb	r3, [r7, #8]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d002      	beq.n	800b4da <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4d4:	f06f 0304 	mvn.w	r3, #4
 800b4d8:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800b4da:	68fb      	ldr	r3, [r7, #12]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	2400bd90 	.word	0x2400bd90
 800b4e8:	2400bdec 	.word	0x2400bdec

0800b4ec <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af02      	add	r7, sp, #8
 800b4f2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	225c      	movs	r2, #92	; 0x5c
 800b4fc:	fb02 f303 	mul.w	r3, r2, r3
 800b500:	4a49      	ldr	r2, [pc, #292]	; (800b628 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b502:	1898      	adds	r0, r3, r2
 800b504:	4a49      	ldr	r2, [pc, #292]	; (800b62c <OSPI_NOR_ExitOPIMode+0x140>)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	00db      	lsls	r3, r3, #3
 800b50a:	4413      	add	r3, r2
 800b50c:	7859      	ldrb	r1, [r3, #1]
 800b50e:	4a47      	ldr	r2, [pc, #284]	; (800b62c <OSPI_NOR_ExitOPIMode+0x140>)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	00db      	lsls	r3, r3, #3
 800b514:	4413      	add	r3, r2
 800b516:	789b      	ldrb	r3, [r3, #2]
 800b518:	461a      	mov	r2, r3
 800b51a:	f7fe fb0a 	bl	8009b32 <MX25LM51245G_WriteEnable>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d003      	beq.n	800b52c <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b524:	f06f 0304 	mvn.w	r3, #4
 800b528:	60fb      	str	r3, [r7, #12]
 800b52a:	e077      	b.n	800b61c <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	225c      	movs	r2, #92	; 0x5c
 800b538:	fb02 f303 	mul.w	r3, r2, r3
 800b53c:	4a3a      	ldr	r2, [pc, #232]	; (800b628 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b53e:	1898      	adds	r0, r3, r2
 800b540:	4a3a      	ldr	r2, [pc, #232]	; (800b62c <OSPI_NOR_ExitOPIMode+0x140>)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	00db      	lsls	r3, r3, #3
 800b546:	4413      	add	r3, r2
 800b548:	7859      	ldrb	r1, [r3, #1]
 800b54a:	4a38      	ldr	r2, [pc, #224]	; (800b62c <OSPI_NOR_ExitOPIMode+0x140>)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	00db      	lsls	r3, r3, #3
 800b550:	4413      	add	r3, r2
 800b552:	789a      	ldrb	r2, [r3, #2]
 800b554:	7a3b      	ldrb	r3, [r7, #8]
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	2300      	movs	r3, #0
 800b55a:	f7fe fbb5 	bl	8009cc8 <MX25LM51245G_WriteCfg2Register>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b564:	f06f 0304 	mvn.w	r3, #4
 800b568:	60fb      	str	r3, [r7, #12]
 800b56a:	e057      	b.n	800b61c <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800b56c:	2028      	movs	r0, #40	; 0x28
 800b56e:	f000 fb3b 	bl	800bbe8 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800b572:	4a2e      	ldr	r2, [pc, #184]	; (800b62c <OSPI_NOR_ExitOPIMode+0x140>)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	00db      	lsls	r3, r3, #3
 800b578:	4413      	add	r3, r2
 800b57a:	789b      	ldrb	r3, [r3, #2]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d120      	bne.n	800b5c2 <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800b580:	4a29      	ldr	r2, [pc, #164]	; (800b628 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	215c      	movs	r1, #92	; 0x5c
 800b586:	fb01 f303 	mul.w	r3, r1, r3
 800b58a:	4413      	add	r3, r2
 800b58c:	330c      	adds	r3, #12
 800b58e:	2200      	movs	r2, #0
 800b590:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800b592:	4a25      	ldr	r2, [pc, #148]	; (800b628 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	215c      	movs	r1, #92	; 0x5c
 800b598:	fb01 f303 	mul.w	r3, r1, r3
 800b59c:	4413      	add	r3, r2
 800b59e:	332c      	adds	r3, #44	; 0x2c
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	225c      	movs	r2, #92	; 0x5c
 800b5a8:	fb02 f303 	mul.w	r3, r2, r3
 800b5ac:	4a1e      	ldr	r2, [pc, #120]	; (800b628 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b5ae:	4413      	add	r3, r2
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f005 f867 	bl	8010684 <HAL_OSPI_Init>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d002      	beq.n	800b5c2 <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800b5bc:	f06f 0303 	mvn.w	r3, #3
 800b5c0:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	225c      	movs	r2, #92	; 0x5c
 800b5c6:	fb02 f303 	mul.w	r3, r2, r3
 800b5ca:	4a17      	ldr	r2, [pc, #92]	; (800b628 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b5cc:	4413      	add	r3, r2
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fe f8e7 	bl	80097a6 <MX25LM51245G_AutoPollingMemReady>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d003      	beq.n	800b5e6 <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5de:	f06f 0304 	mvn.w	r3, #4
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	e01a      	b.n	800b61c <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	225c      	movs	r2, #92	; 0x5c
 800b5ea:	fb02 f303 	mul.w	r3, r2, r3
 800b5ee:	4a0e      	ldr	r2, [pc, #56]	; (800b628 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b5f0:	1898      	adds	r0, r3, r2
 800b5f2:	f107 0308 	add.w	r3, r7, #8
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	f7fe fbf8 	bl	8009df2 <MX25LM51245G_ReadCfg2Register>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b608:	f06f 0304 	mvn.w	r3, #4
 800b60c:	60fb      	str	r3, [r7, #12]
 800b60e:	e005      	b.n	800b61c <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 800b610:	7a3b      	ldrb	r3, [r7, #8]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b616:	f06f 0304 	mvn.w	r3, #4
 800b61a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800b61c:	68fb      	ldr	r3, [r7, #12]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	2400bd90 	.word	0x2400bd90
 800b62c:	2400bdec 	.word	0x2400bdec

0800b630 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b088      	sub	sp, #32
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b63a:	2300      	movs	r3, #0
 800b63c:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d11c      	bne.n	800b67e <BSP_TS_Init+0x4e>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d018      	beq.n	800b67e <BSP_TS_Init+0x4e>
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800b654:	d813      	bhi.n	800b67e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00f      	beq.n	800b67e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800b666:	d80a      	bhi.n	800b67e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	68da      	ldr	r2, [r3, #12]
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	6819      	ldr	r1, [r3, #0]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	428b      	cmp	r3, r1
 800b676:	bf28      	it	cs
 800b678:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d903      	bls.n	800b686 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b67e:	f06f 0301 	mvn.w	r3, #1
 800b682:	61fb      	str	r3, [r7, #28]
 800b684:	e06e      	b.n	800b764 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f98c 	bl	800b9a4 <FT5336_Probe>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d003      	beq.n	800b69a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800b692:	f04f 33ff 	mov.w	r3, #4294967295
 800b696:	61fb      	str	r3, [r7, #28]
 800b698:	e064      	b.n	800b764 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	4934      	ldr	r1, [pc, #208]	; (800b770 <BSP_TS_Init+0x140>)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	015b      	lsls	r3, r3, #5
 800b6a4:	440b      	add	r3, r1
 800b6a6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	685a      	ldr	r2, [r3, #4]
 800b6ac:	4930      	ldr	r1, [pc, #192]	; (800b770 <BSP_TS_Init+0x140>)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	015b      	lsls	r3, r3, #5
 800b6b2:	440b      	add	r3, r1
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	689a      	ldr	r2, [r3, #8]
 800b6bc:	492c      	ldr	r1, [pc, #176]	; (800b770 <BSP_TS_Init+0x140>)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	015b      	lsls	r3, r3, #5
 800b6c2:	440b      	add	r3, r1
 800b6c4:	3308      	adds	r3, #8
 800b6c6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	68da      	ldr	r2, [r3, #12]
 800b6cc:	4928      	ldr	r1, [pc, #160]	; (800b770 <BSP_TS_Init+0x140>)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	015b      	lsls	r3, r3, #5
 800b6d2:	440b      	add	r3, r1
 800b6d4:	330c      	adds	r3, #12
 800b6d6:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800b6d8:	4b26      	ldr	r3, [pc, #152]	; (800b774 <BSP_TS_Init+0x144>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	69db      	ldr	r3, [r3, #28]
 800b6de:	4926      	ldr	r1, [pc, #152]	; (800b778 <BSP_TS_Init+0x148>)
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b6e6:	f107 010c 	add.w	r1, r7, #12
 800b6ea:	4610      	mov	r0, r2
 800b6ec:	4798      	blx	r3
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	da03      	bge.n	800b6fc <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6f4:	f06f 0304 	mvn.w	r3, #4
 800b6f8:	61fb      	str	r3, [r7, #28]
 800b6fa:	e033      	b.n	800b764 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800b6fc:	693a      	ldr	r2, [r7, #16]
 800b6fe:	491c      	ldr	r1, [pc, #112]	; (800b770 <BSP_TS_Init+0x140>)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	015b      	lsls	r3, r3, #5
 800b704:	440b      	add	r3, r1
 800b706:	3310      	adds	r3, #16
 800b708:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	4918      	ldr	r1, [pc, #96]	; (800b770 <BSP_TS_Init+0x140>)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	015b      	lsls	r3, r3, #5
 800b712:	440b      	add	r3, r1
 800b714:	3314      	adds	r3, #20
 800b716:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b718:	2300      	movs	r3, #0
 800b71a:	61bb      	str	r3, [r7, #24]
 800b71c:	e01f      	b.n	800b75e <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	4413      	add	r3, r2
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	4811      	ldr	r0, [pc, #68]	; (800b770 <BSP_TS_Init+0x140>)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	00d9      	lsls	r1, r3, #3
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	440b      	add	r3, r1
 800b734:	3306      	adds	r3, #6
 800b736:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	4413      	add	r3, r2
 800b744:	1c5a      	adds	r2, r3, #1
 800b746:	480a      	ldr	r0, [pc, #40]	; (800b770 <BSP_TS_Init+0x140>)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	00d9      	lsls	r1, r3, #3
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	440b      	add	r3, r1
 800b750:	3306      	adds	r3, #6
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4403      	add	r3, r0
 800b756:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	3301      	adds	r3, #1
 800b75c:	61bb      	str	r3, [r7, #24]
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d0dc      	beq.n	800b71e <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800b764:	69fb      	ldr	r3, [r7, #28]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3720      	adds	r7, #32
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	2400bdfc 	.word	0x2400bdfc
 800b774:	2400bdf4 	.word	0x2400bdf4
 800b778:	2400bdf8 	.word	0x2400bdf8

0800b77c <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08a      	sub	sp, #40	; 0x28
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b786:	2300      	movs	r3, #0
 800b788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d003      	beq.n	800b798 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b790:	f06f 0301 	mvn.w	r3, #1
 800b794:	627b      	str	r3, [r7, #36]	; 0x24
 800b796:	e0f9      	b.n	800b98c <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800b798:	4b7f      	ldr	r3, [pc, #508]	; (800b998 <BSP_TS_GetState+0x21c>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	497f      	ldr	r1, [pc, #508]	; (800b99c <BSP_TS_GetState+0x220>)
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7a6:	f107 0108 	add.w	r1, r7, #8
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	4798      	blx	r3
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	da03      	bge.n	800b7bc <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7b4:	f06f 0304 	mvn.w	r3, #4
 800b7b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ba:	e0e7      	b.n	800b98c <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 80d1 	beq.w	800b966 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800b7cc:	4a74      	ldr	r2, [pc, #464]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	015b      	lsls	r3, r3, #5
 800b7d2:	4413      	add	r3, r2
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 0308 	and.w	r3, r3, #8
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d003      	beq.n	800b7e8 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800b7e8:	4a6d      	ldr	r2, [pc, #436]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	015b      	lsls	r3, r3, #5
 800b7ee:	4413      	add	r3, r2
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 0302 	and.w	r3, r3, #2
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d009      	beq.n	800b810 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800b7fc:	4a68      	ldr	r2, [pc, #416]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	015b      	lsls	r3, r3, #5
 800b802:	4413      	add	r3, r2
 800b804:	3310      	adds	r3, #16
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	3b01      	subs	r3, #1
 800b80e:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800b810:	4a63      	ldr	r2, [pc, #396]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	015b      	lsls	r3, r3, #5
 800b816:	4413      	add	r3, r2
 800b818:	3308      	adds	r3, #8
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0304 	and.w	r3, r3, #4
 800b820:	2b00      	cmp	r3, #0
 800b822:	d008      	beq.n	800b836 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800b824:	4a5e      	ldr	r2, [pc, #376]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	015b      	lsls	r3, r3, #5
 800b82a:	4413      	add	r3, r2
 800b82c:	3314      	adds	r3, #20
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800b836:	4a5a      	ldr	r2, [pc, #360]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	015b      	lsls	r3, r3, #5
 800b83c:	4413      	add	r3, r2
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6a3a      	ldr	r2, [r7, #32]
 800b842:	fb03 f202 	mul.w	r2, r3, r2
 800b846:	4956      	ldr	r1, [pc, #344]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	015b      	lsls	r3, r3, #5
 800b84c:	440b      	add	r3, r1
 800b84e:	3310      	adds	r3, #16
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	fbb2 f2f3 	udiv	r2, r2, r3
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b85a:	4a51      	ldr	r2, [pc, #324]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	015b      	lsls	r3, r3, #5
 800b860:	4413      	add	r3, r2
 800b862:	3304      	adds	r3, #4
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	69fa      	ldr	r2, [r7, #28]
 800b868:	fb03 f202 	mul.w	r2, r3, r2
 800b86c:	494c      	ldr	r1, [pc, #304]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	015b      	lsls	r3, r3, #5
 800b872:	440b      	add	r3, r1
 800b874:	3314      	adds	r3, #20
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	fbb2 f2f3 	udiv	r2, r2, r3
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	4945      	ldr	r1, [pc, #276]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	015b      	lsls	r3, r3, #5
 800b890:	440b      	add	r3, r1
 800b892:	3318      	adds	r3, #24
 800b894:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b896:	429a      	cmp	r2, r3
 800b898:	d909      	bls.n	800b8ae <BSP_TS_GetState+0x132>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	4940      	ldr	r1, [pc, #256]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	015b      	lsls	r3, r3, #5
 800b8a4:	440b      	add	r3, r1
 800b8a6:	3318      	adds	r3, #24
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	e008      	b.n	800b8c0 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800b8ae:	4a3c      	ldr	r2, [pc, #240]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	015b      	lsls	r3, r3, #5
 800b8b4:	4413      	add	r3, r2
 800b8b6:	3318      	adds	r3, #24
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b8be:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b8c0:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	689a      	ldr	r2, [r3, #8]
 800b8c6:	4936      	ldr	r1, [pc, #216]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	015b      	lsls	r3, r3, #5
 800b8cc:	440b      	add	r3, r1
 800b8ce:	331c      	adds	r3, #28
 800b8d0:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d909      	bls.n	800b8ea <BSP_TS_GetState+0x16e>
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	689a      	ldr	r2, [r3, #8]
 800b8da:	4931      	ldr	r1, [pc, #196]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	015b      	lsls	r3, r3, #5
 800b8e0:	440b      	add	r3, r1
 800b8e2:	331c      	adds	r3, #28
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	e008      	b.n	800b8fc <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800b8ea:	4a2d      	ldr	r2, [pc, #180]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	015b      	lsls	r3, r3, #5
 800b8f0:	4413      	add	r3, r2
 800b8f2:	331c      	adds	r3, #28
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b8fa:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b8fc:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800b8fe:	4a28      	ldr	r2, [pc, #160]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	015b      	lsls	r3, r3, #5
 800b904:	4413      	add	r3, r2
 800b906:	330c      	adds	r3, #12
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	69ba      	ldr	r2, [r7, #24]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d808      	bhi.n	800b922 <BSP_TS_GetState+0x1a6>
 800b910:	4a23      	ldr	r2, [pc, #140]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	015b      	lsls	r3, r3, #5
 800b916:	4413      	add	r3, r2
 800b918:	330c      	adds	r3, #12
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d910      	bls.n	800b944 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	491e      	ldr	r1, [pc, #120]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	015b      	lsls	r3, r3, #5
 800b92c:	440b      	add	r3, r1
 800b92e:	3318      	adds	r3, #24
 800b930:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	689a      	ldr	r2, [r3, #8]
 800b936:	491a      	ldr	r1, [pc, #104]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	015b      	lsls	r3, r3, #5
 800b93c:	440b      	add	r3, r1
 800b93e:	331c      	adds	r3, #28
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	e023      	b.n	800b98c <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800b944:	4a16      	ldr	r2, [pc, #88]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	015b      	lsls	r3, r3, #5
 800b94a:	4413      	add	r3, r2
 800b94c:	3318      	adds	r3, #24
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b954:	4a12      	ldr	r2, [pc, #72]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	015b      	lsls	r3, r3, #5
 800b95a:	4413      	add	r3, r2
 800b95c:	331c      	adds	r3, #28
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	609a      	str	r2, [r3, #8]
 800b964:	e012      	b.n	800b98c <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2200      	movs	r2, #0
 800b96a:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800b96c:	4a0c      	ldr	r2, [pc, #48]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	015b      	lsls	r3, r3, #5
 800b972:	4413      	add	r3, r2
 800b974:	3318      	adds	r3, #24
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b97c:	4a08      	ldr	r2, [pc, #32]	; (800b9a0 <BSP_TS_GetState+0x224>)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	015b      	lsls	r3, r3, #5
 800b982:	4413      	add	r3, r2
 800b984:	331c      	adds	r3, #28
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3728      	adds	r7, #40	; 0x28
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	2400bdf4 	.word	0x2400bdf4
 800b99c:	2400bdf8 	.word	0x2400bdf8
 800b9a0:	2400bdfc 	.word	0x2400bdfc

0800b9a4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08a      	sub	sp, #40	; 0x28
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800b9b4:	2370      	movs	r3, #112	; 0x70
 800b9b6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800b9b8:	4b23      	ldr	r3, [pc, #140]	; (800ba48 <FT5336_Probe+0xa4>)
 800b9ba:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800b9bc:	4b23      	ldr	r3, [pc, #140]	; (800ba4c <FT5336_Probe+0xa8>)
 800b9be:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800b9c0:	4b23      	ldr	r3, [pc, #140]	; (800ba50 <FT5336_Probe+0xac>)
 800b9c2:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800b9c4:	4b23      	ldr	r3, [pc, #140]	; (800ba54 <FT5336_Probe+0xb0>)
 800b9c6:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800b9c8:	4b23      	ldr	r3, [pc, #140]	; (800ba58 <FT5336_Probe+0xb4>)
 800b9ca:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800b9cc:	f107 030c 	add.w	r3, r7, #12
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4822      	ldr	r0, [pc, #136]	; (800ba5c <FT5336_Probe+0xb8>)
 800b9d4:	f7fd fb58 	bl	8009088 <FT5336_RegisterBusIO>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d003      	beq.n	800b9e6 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800b9de:	f06f 0307 	mvn.w	r3, #7
 800b9e2:	627b      	str	r3, [r7, #36]	; 0x24
 800b9e4:	e02a      	b.n	800ba3c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800b9e6:	f107 0308 	add.w	r3, r7, #8
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	481b      	ldr	r0, [pc, #108]	; (800ba5c <FT5336_Probe+0xb8>)
 800b9ee:	f7fd fc45 	bl	800927c <FT5336_ReadID>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9f8:	f06f 0304 	mvn.w	r3, #4
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b9fe:	e01d      	b.n	800ba3c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	2b51      	cmp	r3, #81	; 0x51
 800ba04:	d003      	beq.n	800ba0e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba06:	f06f 0306 	mvn.w	r3, #6
 800ba0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba0c:	e016      	b.n	800ba3c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800ba0e:	4a14      	ldr	r2, [pc, #80]	; (800ba60 <FT5336_Probe+0xbc>)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4912      	ldr	r1, [pc, #72]	; (800ba5c <FT5336_Probe+0xb8>)
 800ba14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800ba18:	4b12      	ldr	r3, [pc, #72]	; (800ba64 <FT5336_Probe+0xc0>)
 800ba1a:	4a13      	ldr	r2, [pc, #76]	; (800ba68 <FT5336_Probe+0xc4>)
 800ba1c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800ba1e:	4b11      	ldr	r3, [pc, #68]	; (800ba64 <FT5336_Probe+0xc0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	490e      	ldr	r1, [pc, #56]	; (800ba60 <FT5336_Probe+0xbc>)
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	4798      	blx	r3
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba36:	f06f 0304 	mvn.w	r3, #4
 800ba3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3728      	adds	r7, #40	; 0x28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	0800a089 	.word	0x0800a089
 800ba4c:	0800a0fd 	.word	0x0800a0fd
 800ba50:	0800a225 	.word	0x0800a225
 800ba54:	0800a1c9 	.word	0x0800a1c9
 800ba58:	0800a281 	.word	0x0800a281
 800ba5c:	2400be1c 	.word	0x2400be1c
 800ba60:	2400bdf8 	.word	0x2400bdf8
 800ba64:	2400bdf4 	.word	0x2400bdf4
 800ba68:	24000024 	.word	0x24000024

0800ba6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ba70:	4b29      	ldr	r3, [pc, #164]	; (800bb18 <SystemInit+0xac>)
 800ba72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba76:	4a28      	ldr	r2, [pc, #160]	; (800bb18 <SystemInit+0xac>)
 800ba78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800ba80:	4b26      	ldr	r3, [pc, #152]	; (800bb1c <SystemInit+0xb0>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a25      	ldr	r2, [pc, #148]	; (800bb1c <SystemInit+0xb0>)
 800ba86:	f043 0301 	orr.w	r3, r3, #1
 800ba8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ba8c:	4b23      	ldr	r3, [pc, #140]	; (800bb1c <SystemInit+0xb0>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800ba92:	4b22      	ldr	r3, [pc, #136]	; (800bb1c <SystemInit+0xb0>)
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	4921      	ldr	r1, [pc, #132]	; (800bb1c <SystemInit+0xb0>)
 800ba98:	4b21      	ldr	r3, [pc, #132]	; (800bb20 <SystemInit+0xb4>)
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	600b      	str	r3, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800ba9e:	4b1f      	ldr	r3, [pc, #124]	; (800bb1c <SystemInit+0xb0>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800baa4:	4b1d      	ldr	r3, [pc, #116]	; (800bb1c <SystemInit+0xb0>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800baaa:	4b1c      	ldr	r3, [pc, #112]	; (800bb1c <SystemInit+0xb0>)
 800baac:	2200      	movs	r2, #0
 800baae:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800bab0:	4b1a      	ldr	r3, [pc, #104]	; (800bb1c <SystemInit+0xb0>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800bab6:	4b19      	ldr	r3, [pc, #100]	; (800bb1c <SystemInit+0xb0>)
 800bab8:	2200      	movs	r2, #0
 800baba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800babc:	4b17      	ldr	r3, [pc, #92]	; (800bb1c <SystemInit+0xb0>)
 800babe:	2200      	movs	r2, #0
 800bac0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800bac2:	4b16      	ldr	r3, [pc, #88]	; (800bb1c <SystemInit+0xb0>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800bac8:	4b14      	ldr	r3, [pc, #80]	; (800bb1c <SystemInit+0xb0>)
 800baca:	2200      	movs	r2, #0
 800bacc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800bace:	4b13      	ldr	r3, [pc, #76]	; (800bb1c <SystemInit+0xb0>)
 800bad0:	2200      	movs	r2, #0
 800bad2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800bad4:	4b11      	ldr	r3, [pc, #68]	; (800bb1c <SystemInit+0xb0>)
 800bad6:	2200      	movs	r2, #0
 800bad8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800bada:	4b10      	ldr	r3, [pc, #64]	; (800bb1c <SystemInit+0xb0>)
 800badc:	2200      	movs	r2, #0
 800bade:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bae0:	4b0e      	ldr	r3, [pc, #56]	; (800bb1c <SystemInit+0xb0>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a0d      	ldr	r2, [pc, #52]	; (800bb1c <SystemInit+0xb0>)
 800bae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800baea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800baec:	4b0b      	ldr	r3, [pc, #44]	; (800bb1c <SystemInit+0xb0>)
 800baee:	2200      	movs	r2, #0
 800baf0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800baf2:	4b0c      	ldr	r3, [pc, #48]	; (800bb24 <SystemInit+0xb8>)
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <SystemInit+0xbc>)
 800baf8:	4013      	ands	r3, r2
 800bafa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bafe:	d202      	bcs.n	800bb06 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800bb00:	4b0a      	ldr	r3, [pc, #40]	; (800bb2c <SystemInit+0xc0>)
 800bb02:	2201      	movs	r2, #1
 800bb04:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bb06:	4b04      	ldr	r3, [pc, #16]	; (800bb18 <SystemInit+0xac>)
 800bb08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bb0c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800bb0e:	bf00      	nop
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr
 800bb18:	e000ed00 	.word	0xe000ed00
 800bb1c:	58024400 	.word	0x58024400
 800bb20:	eaf6ed7f 	.word	0xeaf6ed7f
 800bb24:	5c001000 	.word	0x5c001000
 800bb28:	ffff0000 	.word	0xffff0000
 800bb2c:	51008108 	.word	0x51008108

0800bb30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bb36:	2003      	movs	r0, #3
 800bb38:	f000 f94b 	bl	800bdd2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800bb3c:	f006 fb44 	bl	80121c8 <HAL_RCC_GetSysClockFreq>
 800bb40:	4602      	mov	r2, r0
 800bb42:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <HAL_Init+0x68>)
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	0a1b      	lsrs	r3, r3, #8
 800bb48:	f003 030f 	and.w	r3, r3, #15
 800bb4c:	4913      	ldr	r1, [pc, #76]	; (800bb9c <HAL_Init+0x6c>)
 800bb4e:	5ccb      	ldrb	r3, [r1, r3]
 800bb50:	f003 031f 	and.w	r3, r3, #31
 800bb54:	fa22 f303 	lsr.w	r3, r2, r3
 800bb58:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800bb5a:	4b0f      	ldr	r3, [pc, #60]	; (800bb98 <HAL_Init+0x68>)
 800bb5c:	699b      	ldr	r3, [r3, #24]
 800bb5e:	f003 030f 	and.w	r3, r3, #15
 800bb62:	4a0e      	ldr	r2, [pc, #56]	; (800bb9c <HAL_Init+0x6c>)
 800bb64:	5cd3      	ldrb	r3, [r2, r3]
 800bb66:	f003 031f 	and.w	r3, r3, #31
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb70:	4a0b      	ldr	r2, [pc, #44]	; (800bba0 <HAL_Init+0x70>)
 800bb72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bb74:	4a0b      	ldr	r2, [pc, #44]	; (800bba4 <HAL_Init+0x74>)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	f7fb fb32 	bl	80071e4 <HAL_InitTick>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e002      	b.n	800bb90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800bb8a:	f7fa fef9 	bl	8006980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	58024400 	.word	0x58024400
 800bb9c:	0802b5f0 	.word	0x0802b5f0
 800bba0:	24000058 	.word	0x24000058
 800bba4:	24000054 	.word	0x24000054

0800bba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bbac:	4b06      	ldr	r3, [pc, #24]	; (800bbc8 <HAL_IncTick+0x20>)
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <HAL_IncTick+0x24>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	4a04      	ldr	r2, [pc, #16]	; (800bbcc <HAL_IncTick+0x24>)
 800bbba:	6013      	str	r3, [r2, #0]
}
 800bbbc:	bf00      	nop
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	24000060 	.word	0x24000060
 800bbcc:	2400be44 	.word	0x2400be44

0800bbd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	af00      	add	r7, sp, #0
  return uwTick;
 800bbd4:	4b03      	ldr	r3, [pc, #12]	; (800bbe4 <HAL_GetTick+0x14>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	2400be44 	.word	0x2400be44

0800bbe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bbf0:	f7ff ffee 	bl	800bbd0 <HAL_GetTick>
 800bbf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc00:	d005      	beq.n	800bc0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bc02:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <HAL_Delay+0x44>)
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	461a      	mov	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bc0e:	bf00      	nop
 800bc10:	f7ff ffde 	bl	800bbd0 <HAL_GetTick>
 800bc14:	4602      	mov	r2, r0
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d8f7      	bhi.n	800bc10 <HAL_Delay+0x28>
  {
  }
}
 800bc20:	bf00      	nop
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	24000060 	.word	0x24000060

0800bc30 <__NVIC_SetPriorityGrouping>:
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f003 0307 	and.w	r3, r3, #7
 800bc3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bc40:	4b0b      	ldr	r3, [pc, #44]	; (800bc70 <__NVIC_SetPriorityGrouping+0x40>)
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bc58:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <__NVIC_SetPriorityGrouping+0x44>)
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bc5e:	4a04      	ldr	r2, [pc, #16]	; (800bc70 <__NVIC_SetPriorityGrouping+0x40>)
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	60d3      	str	r3, [r2, #12]
}
 800bc64:	bf00      	nop
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr
 800bc70:	e000ed00 	.word	0xe000ed00
 800bc74:	05fa0000 	.word	0x05fa0000

0800bc78 <__NVIC_GetPriorityGrouping>:
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc7c:	4b04      	ldr	r3, [pc, #16]	; (800bc90 <__NVIC_GetPriorityGrouping+0x18>)
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	0a1b      	lsrs	r3, r3, #8
 800bc82:	f003 0307 	and.w	r3, r3, #7
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	e000ed00 	.word	0xe000ed00

0800bc94 <__NVIC_EnableIRQ>:
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bc9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	db0b      	blt.n	800bcbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bca6:	88fb      	ldrh	r3, [r7, #6]
 800bca8:	f003 021f 	and.w	r2, r3, #31
 800bcac:	4907      	ldr	r1, [pc, #28]	; (800bccc <__NVIC_EnableIRQ+0x38>)
 800bcae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcb2:	095b      	lsrs	r3, r3, #5
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	fa00 f202 	lsl.w	r2, r0, r2
 800bcba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	e000e100 	.word	0xe000e100

0800bcd0 <__NVIC_DisableIRQ>:
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bcda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	db12      	blt.n	800bd08 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bce2:	88fb      	ldrh	r3, [r7, #6]
 800bce4:	f003 021f 	and.w	r2, r3, #31
 800bce8:	490a      	ldr	r1, [pc, #40]	; (800bd14 <__NVIC_DisableIRQ+0x44>)
 800bcea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcee:	095b      	lsrs	r3, r3, #5
 800bcf0:	2001      	movs	r0, #1
 800bcf2:	fa00 f202 	lsl.w	r2, r0, r2
 800bcf6:	3320      	adds	r3, #32
 800bcf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bcfc:	f3bf 8f4f 	dsb	sy
}
 800bd00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bd02:	f3bf 8f6f 	isb	sy
}
 800bd06:	bf00      	nop
}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	e000e100 	.word	0xe000e100

0800bd18 <__NVIC_SetPriority>:
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	6039      	str	r1, [r7, #0]
 800bd22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bd24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	db0a      	blt.n	800bd42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	490c      	ldr	r1, [pc, #48]	; (800bd64 <__NVIC_SetPriority+0x4c>)
 800bd32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd36:	0112      	lsls	r2, r2, #4
 800bd38:	b2d2      	uxtb	r2, r2
 800bd3a:	440b      	add	r3, r1
 800bd3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bd40:	e00a      	b.n	800bd58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	4908      	ldr	r1, [pc, #32]	; (800bd68 <__NVIC_SetPriority+0x50>)
 800bd48:	88fb      	ldrh	r3, [r7, #6]
 800bd4a:	f003 030f 	and.w	r3, r3, #15
 800bd4e:	3b04      	subs	r3, #4
 800bd50:	0112      	lsls	r2, r2, #4
 800bd52:	b2d2      	uxtb	r2, r2
 800bd54:	440b      	add	r3, r1
 800bd56:	761a      	strb	r2, [r3, #24]
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	e000e100 	.word	0xe000e100
 800bd68:	e000ed00 	.word	0xe000ed00

0800bd6c <NVIC_EncodePriority>:
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b089      	sub	sp, #36	; 0x24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f003 0307 	and.w	r3, r3, #7
 800bd7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	f1c3 0307 	rsb	r3, r3, #7
 800bd86:	2b04      	cmp	r3, #4
 800bd88:	bf28      	it	cs
 800bd8a:	2304      	movcs	r3, #4
 800bd8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	3304      	adds	r3, #4
 800bd92:	2b06      	cmp	r3, #6
 800bd94:	d902      	bls.n	800bd9c <NVIC_EncodePriority+0x30>
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	3b03      	subs	r3, #3
 800bd9a:	e000      	b.n	800bd9e <NVIC_EncodePriority+0x32>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bda0:	f04f 32ff 	mov.w	r2, #4294967295
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdaa:	43da      	mvns	r2, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	401a      	ands	r2, r3
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bdb4:	f04f 31ff 	mov.w	r1, #4294967295
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	fa01 f303 	lsl.w	r3, r1, r3
 800bdbe:	43d9      	mvns	r1, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bdc4:	4313      	orrs	r3, r2
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3724      	adds	r7, #36	; 0x24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b082      	sub	sp, #8
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7ff ff28 	bl	800bc30 <__NVIC_SetPriorityGrouping>
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
 800bdf4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bdf6:	f7ff ff3f 	bl	800bc78 <__NVIC_GetPriorityGrouping>
 800bdfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	68b9      	ldr	r1, [r7, #8]
 800be00:	6978      	ldr	r0, [r7, #20]
 800be02:	f7ff ffb3 	bl	800bd6c <NVIC_EncodePriority>
 800be06:	4602      	mov	r2, r0
 800be08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be0c:	4611      	mov	r1, r2
 800be0e:	4618      	mov	r0, r3
 800be10:	f7ff ff82 	bl	800bd18 <__NVIC_SetPriority>
}
 800be14:	bf00      	nop
 800be16:	3718      	adds	r7, #24
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	4603      	mov	r3, r0
 800be24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800be26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff ff32 	bl	800bc94 <__NVIC_EnableIRQ>
}
 800be30:	bf00      	nop
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	4603      	mov	r3, r0
 800be40:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800be42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be46:	4618      	mov	r0, r3
 800be48:	f7ff ff42 	bl	800bcd0 <__NVIC_DisableIRQ>
}
 800be4c:	bf00      	nop
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800be54:	b480      	push	{r7}
 800be56:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800be58:	f3bf 8f5f 	dmb	sy
}
 800be5c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800be5e:	4b07      	ldr	r3, [pc, #28]	; (800be7c <HAL_MPU_Disable+0x28>)
 800be60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be62:	4a06      	ldr	r2, [pc, #24]	; (800be7c <HAL_MPU_Disable+0x28>)
 800be64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be68:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800be6a:	4b05      	ldr	r3, [pc, #20]	; (800be80 <HAL_MPU_Disable+0x2c>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	605a      	str	r2, [r3, #4]
}
 800be70:	bf00      	nop
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	e000ed00 	.word	0xe000ed00
 800be80:	e000ed90 	.word	0xe000ed90

0800be84 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800be8c:	4a0b      	ldr	r2, [pc, #44]	; (800bebc <HAL_MPU_Enable+0x38>)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f043 0301 	orr.w	r3, r3, #1
 800be94:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800be96:	4b0a      	ldr	r3, [pc, #40]	; (800bec0 <HAL_MPU_Enable+0x3c>)
 800be98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9a:	4a09      	ldr	r2, [pc, #36]	; (800bec0 <HAL_MPU_Enable+0x3c>)
 800be9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bea0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800bea2:	f3bf 8f4f 	dsb	sy
}
 800bea6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bea8:	f3bf 8f6f 	isb	sy
}
 800beac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800beae:	bf00      	nop
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	e000ed90 	.word	0xe000ed90
 800bec0:	e000ed00 	.word	0xe000ed00

0800bec4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	785a      	ldrb	r2, [r3, #1]
 800bed0:	4b1d      	ldr	r3, [pc, #116]	; (800bf48 <HAL_MPU_ConfigRegion+0x84>)
 800bed2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d029      	beq.n	800bf30 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800bedc:	4a1a      	ldr	r2, [pc, #104]	; (800bf48 <HAL_MPU_ConfigRegion+0x84>)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	7b1b      	ldrb	r3, [r3, #12]
 800bee8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	7adb      	ldrb	r3, [r3, #11]
 800beee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bef0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	7a9b      	ldrb	r3, [r3, #10]
 800bef6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800bef8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	7b5b      	ldrb	r3, [r3, #13]
 800befe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800bf00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	7b9b      	ldrb	r3, [r3, #14]
 800bf06:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800bf08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	7bdb      	ldrb	r3, [r3, #15]
 800bf0e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800bf10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	7a5b      	ldrb	r3, [r3, #9]
 800bf16:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800bf18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	7a1b      	ldrb	r3, [r3, #8]
 800bf1e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800bf20:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	7812      	ldrb	r2, [r2, #0]
 800bf26:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bf28:	4a07      	ldr	r2, [pc, #28]	; (800bf48 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800bf2a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bf2c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800bf2e:	e005      	b.n	800bf3c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800bf30:	4b05      	ldr	r3, [pc, #20]	; (800bf48 <HAL_MPU_ConfigRegion+0x84>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800bf36:	4b04      	ldr	r3, [pc, #16]	; (800bf48 <HAL_MPU_ConfigRegion+0x84>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	611a      	str	r2, [r3, #16]
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	e000ed90 	.word	0xe000ed90

0800bf4c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d101      	bne.n	800bf5e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e054      	b.n	800c008 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	7f5b      	ldrb	r3, [r3, #29]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d105      	bne.n	800bf74 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7fa fd24 	bl	80069bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2202      	movs	r2, #2
 800bf78:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	791b      	ldrb	r3, [r3, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10c      	bne.n	800bf9c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a22      	ldr	r2, [pc, #136]	; (800c010 <HAL_CRC_Init+0xc4>)
 800bf88:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f022 0218 	bic.w	r2, r2, #24
 800bf98:	609a      	str	r2, [r3, #8]
 800bf9a:	e00c      	b.n	800bfb6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6899      	ldr	r1, [r3, #8]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f834 	bl	800c014 <HAL_CRCEx_Polynomial_Set>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e028      	b.n	800c008 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	795b      	ldrb	r3, [r3, #5]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d105      	bne.n	800bfca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfc6:	611a      	str	r2, [r3, #16]
 800bfc8:	e004      	b.n	800bfd4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	6912      	ldr	r2, [r2, #16]
 800bfd2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	695a      	ldr	r2, [r3, #20]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	699a      	ldr	r2, [r3, #24]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	430a      	orrs	r2, r1
 800bffe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	04c11db7 	.word	0x04c11db7

0800c014 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c014:	b480      	push	{r7}
 800c016:	b087      	sub	sp, #28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c024:	231f      	movs	r3, #31
 800c026:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	f003 0301 	and.w	r3, r3, #1
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d102      	bne.n	800c038 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	75fb      	strb	r3, [r7, #23]
 800c036:	e063      	b.n	800c100 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c038:	bf00      	nop
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	1e5a      	subs	r2, r3, #1
 800c03e:	613a      	str	r2, [r7, #16]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d009      	beq.n	800c058 <HAL_CRCEx_Polynomial_Set+0x44>
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f003 031f 	and.w	r3, r3, #31
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	fa22 f303 	lsr.w	r3, r2, r3
 800c050:	f003 0301 	and.w	r3, r3, #1
 800c054:	2b00      	cmp	r3, #0
 800c056:	d0f0      	beq.n	800c03a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2b18      	cmp	r3, #24
 800c05c:	d846      	bhi.n	800c0ec <HAL_CRCEx_Polynomial_Set+0xd8>
 800c05e:	a201      	add	r2, pc, #4	; (adr r2, 800c064 <HAL_CRCEx_Polynomial_Set+0x50>)
 800c060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c064:	0800c0f3 	.word	0x0800c0f3
 800c068:	0800c0ed 	.word	0x0800c0ed
 800c06c:	0800c0ed 	.word	0x0800c0ed
 800c070:	0800c0ed 	.word	0x0800c0ed
 800c074:	0800c0ed 	.word	0x0800c0ed
 800c078:	0800c0ed 	.word	0x0800c0ed
 800c07c:	0800c0ed 	.word	0x0800c0ed
 800c080:	0800c0ed 	.word	0x0800c0ed
 800c084:	0800c0e1 	.word	0x0800c0e1
 800c088:	0800c0ed 	.word	0x0800c0ed
 800c08c:	0800c0ed 	.word	0x0800c0ed
 800c090:	0800c0ed 	.word	0x0800c0ed
 800c094:	0800c0ed 	.word	0x0800c0ed
 800c098:	0800c0ed 	.word	0x0800c0ed
 800c09c:	0800c0ed 	.word	0x0800c0ed
 800c0a0:	0800c0ed 	.word	0x0800c0ed
 800c0a4:	0800c0d5 	.word	0x0800c0d5
 800c0a8:	0800c0ed 	.word	0x0800c0ed
 800c0ac:	0800c0ed 	.word	0x0800c0ed
 800c0b0:	0800c0ed 	.word	0x0800c0ed
 800c0b4:	0800c0ed 	.word	0x0800c0ed
 800c0b8:	0800c0ed 	.word	0x0800c0ed
 800c0bc:	0800c0ed 	.word	0x0800c0ed
 800c0c0:	0800c0ed 	.word	0x0800c0ed
 800c0c4:	0800c0c9 	.word	0x0800c0c9
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2b06      	cmp	r3, #6
 800c0cc:	d913      	bls.n	800c0f6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c0d2:	e010      	b.n	800c0f6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	2b07      	cmp	r3, #7
 800c0d8:	d90f      	bls.n	800c0fa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c0de:	e00c      	b.n	800c0fa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	2b0f      	cmp	r3, #15
 800c0e4:	d90b      	bls.n	800c0fe <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c0ea:	e008      	b.n	800c0fe <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	75fb      	strb	r3, [r7, #23]
        break;
 800c0f0:	e006      	b.n	800c100 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0f2:	bf00      	nop
 800c0f4:	e004      	b.n	800c100 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0f6:	bf00      	nop
 800c0f8:	e002      	b.n	800c100 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0fa:	bf00      	nop
 800c0fc:	e000      	b.n	800c100 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0fe:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800c100:	7dfb      	ldrb	r3, [r7, #23]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d10d      	bne.n	800c122 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	f023 0118 	bic.w	r1, r3, #24
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	430a      	orrs	r2, r1
 800c120:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c122:	7dfb      	ldrb	r3, [r7, #23]
}
 800c124:	4618      	mov	r0, r3
 800c126:	371c      	adds	r7, #28
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e04f      	b.n	800c1e2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d106      	bne.n	800c15c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7fa fc52 	bl	8006a00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	4b20      	ldr	r3, [pc, #128]	; (800c1ec <HAL_DMA2D_Init+0xbc>)
 800c16c:	4013      	ands	r3, r2
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	6851      	ldr	r1, [r2, #4]
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	69d2      	ldr	r2, [r2, #28]
 800c176:	4311      	orrs	r1, r2
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	6812      	ldr	r2, [r2, #0]
 800c17c:	430b      	orrs	r3, r1
 800c17e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c186:	4b1a      	ldr	r3, [pc, #104]	; (800c1f0 <HAL_DMA2D_Init+0xc0>)
 800c188:	4013      	ands	r3, r2
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	6891      	ldr	r1, [r2, #8]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	6992      	ldr	r2, [r2, #24]
 800c192:	4311      	orrs	r1, r2
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	6812      	ldr	r2, [r2, #0]
 800c198:	430b      	orrs	r3, r1
 800c19a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1a2:	4b14      	ldr	r3, [pc, #80]	; (800c1f4 <HAL_DMA2D_Init+0xc4>)
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	68d1      	ldr	r1, [r2, #12]
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	6812      	ldr	r2, [r2, #0]
 800c1ae:	430b      	orrs	r3, r1
 800c1b0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1b8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	051a      	lsls	r2, r3, #20
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	055b      	lsls	r3, r3, #21
 800c1c8:	431a      	orrs	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	fff8ffbf 	.word	0xfff8ffbf
 800c1f0:	fffffef8 	.word	0xfffffef8
 800c1f4:	ffff0000 	.word	0xffff0000

0800c1f8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d026      	beq.n	800c268 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c220:	2b00      	cmp	r3, #0
 800c222:	d021      	beq.n	800c268 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c232:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c238:	f043 0201 	orr.w	r2, r3, #1
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2201      	movs	r2, #1
 800c246:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2204      	movs	r2, #4
 800c24c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d003      	beq.n	800c268 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f003 0320 	and.w	r3, r3, #32
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d026      	beq.n	800c2c0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d021      	beq.n	800c2c0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c28a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2220      	movs	r2, #32
 800c292:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c298:	f043 0202 	orr.w	r2, r3, #2
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2204      	movs	r2, #4
 800c2a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f003 0308 	and.w	r3, r3, #8
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d026      	beq.n	800c318 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d021      	beq.n	800c318 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2e2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2208      	movs	r2, #8
 800c2ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2f0:	f043 0204 	orr.w	r2, r3, #4
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2204      	movs	r2, #4
 800c2fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d003      	beq.n	800c318 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f003 0304 	and.w	r3, r3, #4
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d013      	beq.n	800c34a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00e      	beq.n	800c34a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c33a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2204      	movs	r2, #4
 800c342:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f853 	bl	800c3f0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f003 0302 	and.w	r3, r3, #2
 800c350:	2b00      	cmp	r3, #0
 800c352:	d024      	beq.n	800c39e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d01f      	beq.n	800c39e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c36c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2202      	movs	r2, #2
 800c374:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a1b      	ldr	r3, [r3, #32]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d003      	beq.n	800c39e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a1b      	ldr	r3, [r3, #32]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f003 0310 	and.w	r3, r3, #16
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d01f      	beq.n	800c3e8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d01a      	beq.n	800c3e8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c3c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2210      	movs	r2, #16
 800c3c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f80e 	bl	800c404 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800c3e8:	bf00      	nop
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800c3f8:	bf00      	nop
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800c40c:	bf00      	nop
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800c418:	b480      	push	{r7}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c434:	2b01      	cmp	r3, #1
 800c436:	d101      	bne.n	800c43c <HAL_DMA2D_ConfigLayer+0x24>
 800c438:	2302      	movs	r3, #2
 800c43a:	e092      	b.n	800c562 <HAL_DMA2D_ConfigLayer+0x14a>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2202      	movs	r2, #2
 800c448:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800c44c:	683a      	ldr	r2, [r7, #0]
 800c44e:	4613      	mov	r3, r2
 800c450:	00db      	lsls	r3, r3, #3
 800c452:	1a9b      	subs	r3, r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	3328      	adds	r3, #40	; 0x28
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	4413      	add	r3, r2
 800c45c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	685a      	ldr	r2, [r3, #4]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	041b      	lsls	r3, r3, #16
 800c468:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c470:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c478:	4313      	orrs	r3, r2
 800c47a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800c47c:	4b3c      	ldr	r3, [pc, #240]	; (800c570 <HAL_DMA2D_ConfigLayer+0x158>)
 800c47e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	2b0a      	cmp	r3, #10
 800c486:	d003      	beq.n	800c490 <HAL_DMA2D_ConfigLayer+0x78>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	2b09      	cmp	r3, #9
 800c48e:	d107      	bne.n	800c4a0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c498:	693a      	ldr	r2, [r7, #16]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	613b      	str	r3, [r7, #16]
 800c49e:	e005      	b.n	800c4ac <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	061b      	lsls	r3, r3, #24
 800c4a6:	693a      	ldr	r2, [r7, #16]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d120      	bne.n	800c4f4 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	43db      	mvns	r3, r3
 800c4bc:	ea02 0103 	and.w	r1, r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	693a      	ldr	r2, [r7, #16]
 800c4c6:	430a      	orrs	r2, r1
 800c4c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	6812      	ldr	r2, [r2, #0]
 800c4d2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	2b0a      	cmp	r3, #10
 800c4da:	d003      	beq.n	800c4e4 <HAL_DMA2D_ConfigLayer+0xcc>
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	2b09      	cmp	r3, #9
 800c4e2:	d135      	bne.n	800c550 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	68da      	ldr	r2, [r3, #12]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c4f0:	629a      	str	r2, [r3, #40]	; 0x28
 800c4f2:	e02d      	b.n	800c550 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	2b0b      	cmp	r3, #11
 800c4fa:	d109      	bne.n	800c510 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	049b      	lsls	r3, r3, #18
 800c502:	693a      	ldr	r2, [r7, #16]
 800c504:	4313      	orrs	r3, r2
 800c506:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800c50e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	69da      	ldr	r2, [r3, #28]
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	43db      	mvns	r3, r3
 800c51a:	ea02 0103 	and.w	r1, r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	693a      	ldr	r2, [r7, #16]
 800c524:	430a      	orrs	r2, r1
 800c526:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	6812      	ldr	r2, [r2, #0]
 800c530:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	2b0a      	cmp	r3, #10
 800c538:	d003      	beq.n	800c542 <HAL_DMA2D_ConfigLayer+0x12a>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	2b09      	cmp	r3, #9
 800c540:	d106      	bne.n	800c550 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	68da      	ldr	r2, [r3, #12]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c54e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	371c      	adds	r7, #28
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	ff33000f 	.word	0xff33000f

0800c574 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c574:	b480      	push	{r7}
 800c576:	b089      	sub	sp, #36	; 0x24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c57e:	2300      	movs	r3, #0
 800c580:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c582:	4b89      	ldr	r3, [pc, #548]	; (800c7a8 <HAL_GPIO_Init+0x234>)
 800c584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c586:	e194      	b.n	800c8b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	2101      	movs	r1, #1
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	fa01 f303 	lsl.w	r3, r1, r3
 800c594:	4013      	ands	r3, r2
 800c596:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f000 8186 	beq.w	800c8ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	f003 0303 	and.w	r3, r3, #3
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d005      	beq.n	800c5b8 <HAL_GPIO_Init+0x44>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	f003 0303 	and.w	r3, r3, #3
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d130      	bne.n	800c61a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	2203      	movs	r2, #3
 800c5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c8:	43db      	mvns	r3, r3
 800c5ca:	69ba      	ldr	r2, [r7, #24]
 800c5cc:	4013      	ands	r3, r2
 800c5ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	68da      	ldr	r2, [r3, #12]
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5dc:	69ba      	ldr	r2, [r7, #24]
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	69ba      	ldr	r2, [r7, #24]
 800c5e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f6:	43db      	mvns	r3, r3
 800c5f8:	69ba      	ldr	r2, [r7, #24]
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	091b      	lsrs	r3, r3, #4
 800c604:	f003 0201 	and.w	r2, r3, #1
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	fa02 f303 	lsl.w	r3, r2, r3
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	4313      	orrs	r3, r2
 800c612:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	69ba      	ldr	r2, [r7, #24]
 800c618:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	f003 0303 	and.w	r3, r3, #3
 800c622:	2b03      	cmp	r3, #3
 800c624:	d017      	beq.n	800c656 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	005b      	lsls	r3, r3, #1
 800c630:	2203      	movs	r2, #3
 800c632:	fa02 f303 	lsl.w	r3, r2, r3
 800c636:	43db      	mvns	r3, r3
 800c638:	69ba      	ldr	r2, [r7, #24]
 800c63a:	4013      	ands	r3, r2
 800c63c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	689a      	ldr	r2, [r3, #8]
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	fa02 f303 	lsl.w	r3, r2, r3
 800c64a:	69ba      	ldr	r2, [r7, #24]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	69ba      	ldr	r2, [r7, #24]
 800c654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	f003 0303 	and.w	r3, r3, #3
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d123      	bne.n	800c6aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	08da      	lsrs	r2, r3, #3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	3208      	adds	r2, #8
 800c66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	f003 0307 	and.w	r3, r3, #7
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	220f      	movs	r2, #15
 800c67a:	fa02 f303 	lsl.w	r3, r2, r3
 800c67e:	43db      	mvns	r3, r3
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	4013      	ands	r3, r2
 800c684:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	691a      	ldr	r2, [r3, #16]
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	f003 0307 	and.w	r3, r3, #7
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	fa02 f303 	lsl.w	r3, r2, r3
 800c696:	69ba      	ldr	r2, [r7, #24]
 800c698:	4313      	orrs	r3, r2
 800c69a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	08da      	lsrs	r2, r3, #3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3208      	adds	r2, #8
 800c6a4:	69b9      	ldr	r1, [r7, #24]
 800c6a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	2203      	movs	r2, #3
 800c6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ba:	43db      	mvns	r3, r3
 800c6bc:	69ba      	ldr	r2, [r7, #24]
 800c6be:	4013      	ands	r3, r2
 800c6c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	f003 0203 	and.w	r2, r3, #3
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d2:	69ba      	ldr	r2, [r7, #24]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	69ba      	ldr	r2, [r7, #24]
 800c6dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 80e0 	beq.w	800c8ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c6ec:	4b2f      	ldr	r3, [pc, #188]	; (800c7ac <HAL_GPIO_Init+0x238>)
 800c6ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c6f2:	4a2e      	ldr	r2, [pc, #184]	; (800c7ac <HAL_GPIO_Init+0x238>)
 800c6f4:	f043 0302 	orr.w	r3, r3, #2
 800c6f8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800c6fc:	4b2b      	ldr	r3, [pc, #172]	; (800c7ac <HAL_GPIO_Init+0x238>)
 800c6fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c702:	f003 0302 	and.w	r3, r3, #2
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c70a:	4a29      	ldr	r2, [pc, #164]	; (800c7b0 <HAL_GPIO_Init+0x23c>)
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	089b      	lsrs	r3, r3, #2
 800c710:	3302      	adds	r3, #2
 800c712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	f003 0303 	and.w	r3, r3, #3
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	220f      	movs	r2, #15
 800c722:	fa02 f303 	lsl.w	r3, r2, r3
 800c726:	43db      	mvns	r3, r3
 800c728:	69ba      	ldr	r2, [r7, #24]
 800c72a:	4013      	ands	r3, r2
 800c72c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a20      	ldr	r2, [pc, #128]	; (800c7b4 <HAL_GPIO_Init+0x240>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d052      	beq.n	800c7dc <HAL_GPIO_Init+0x268>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4a1f      	ldr	r2, [pc, #124]	; (800c7b8 <HAL_GPIO_Init+0x244>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d031      	beq.n	800c7a2 <HAL_GPIO_Init+0x22e>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a1e      	ldr	r2, [pc, #120]	; (800c7bc <HAL_GPIO_Init+0x248>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d02b      	beq.n	800c79e <HAL_GPIO_Init+0x22a>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a1d      	ldr	r2, [pc, #116]	; (800c7c0 <HAL_GPIO_Init+0x24c>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d025      	beq.n	800c79a <HAL_GPIO_Init+0x226>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a1c      	ldr	r2, [pc, #112]	; (800c7c4 <HAL_GPIO_Init+0x250>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d01f      	beq.n	800c796 <HAL_GPIO_Init+0x222>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4a1b      	ldr	r2, [pc, #108]	; (800c7c8 <HAL_GPIO_Init+0x254>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d019      	beq.n	800c792 <HAL_GPIO_Init+0x21e>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4a1a      	ldr	r2, [pc, #104]	; (800c7cc <HAL_GPIO_Init+0x258>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d013      	beq.n	800c78e <HAL_GPIO_Init+0x21a>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4a19      	ldr	r2, [pc, #100]	; (800c7d0 <HAL_GPIO_Init+0x25c>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d00d      	beq.n	800c78a <HAL_GPIO_Init+0x216>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a18      	ldr	r2, [pc, #96]	; (800c7d4 <HAL_GPIO_Init+0x260>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d007      	beq.n	800c786 <HAL_GPIO_Init+0x212>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4a17      	ldr	r2, [pc, #92]	; (800c7d8 <HAL_GPIO_Init+0x264>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d101      	bne.n	800c782 <HAL_GPIO_Init+0x20e>
 800c77e:	2309      	movs	r3, #9
 800c780:	e02d      	b.n	800c7de <HAL_GPIO_Init+0x26a>
 800c782:	230a      	movs	r3, #10
 800c784:	e02b      	b.n	800c7de <HAL_GPIO_Init+0x26a>
 800c786:	2308      	movs	r3, #8
 800c788:	e029      	b.n	800c7de <HAL_GPIO_Init+0x26a>
 800c78a:	2307      	movs	r3, #7
 800c78c:	e027      	b.n	800c7de <HAL_GPIO_Init+0x26a>
 800c78e:	2306      	movs	r3, #6
 800c790:	e025      	b.n	800c7de <HAL_GPIO_Init+0x26a>
 800c792:	2305      	movs	r3, #5
 800c794:	e023      	b.n	800c7de <HAL_GPIO_Init+0x26a>
 800c796:	2304      	movs	r3, #4
 800c798:	e021      	b.n	800c7de <HAL_GPIO_Init+0x26a>
 800c79a:	2303      	movs	r3, #3
 800c79c:	e01f      	b.n	800c7de <HAL_GPIO_Init+0x26a>
 800c79e:	2302      	movs	r3, #2
 800c7a0:	e01d      	b.n	800c7de <HAL_GPIO_Init+0x26a>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e01b      	b.n	800c7de <HAL_GPIO_Init+0x26a>
 800c7a6:	bf00      	nop
 800c7a8:	58000080 	.word	0x58000080
 800c7ac:	58024400 	.word	0x58024400
 800c7b0:	58000400 	.word	0x58000400
 800c7b4:	58020000 	.word	0x58020000
 800c7b8:	58020400 	.word	0x58020400
 800c7bc:	58020800 	.word	0x58020800
 800c7c0:	58020c00 	.word	0x58020c00
 800c7c4:	58021000 	.word	0x58021000
 800c7c8:	58021400 	.word	0x58021400
 800c7cc:	58021800 	.word	0x58021800
 800c7d0:	58021c00 	.word	0x58021c00
 800c7d4:	58022000 	.word	0x58022000
 800c7d8:	58022400 	.word	0x58022400
 800c7dc:	2300      	movs	r3, #0
 800c7de:	69fa      	ldr	r2, [r7, #28]
 800c7e0:	f002 0203 	and.w	r2, r2, #3
 800c7e4:	0092      	lsls	r2, r2, #2
 800c7e6:	4093      	lsls	r3, r2
 800c7e8:	69ba      	ldr	r2, [r7, #24]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c7ee:	4938      	ldr	r1, [pc, #224]	; (800c8d0 <HAL_GPIO_Init+0x35c>)
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	089b      	lsrs	r3, r3, #2
 800c7f4:	3302      	adds	r3, #2
 800c7f6:	69ba      	ldr	r2, [r7, #24]
 800c7f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c7fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	43db      	mvns	r3, r3
 800c808:	69ba      	ldr	r2, [r7, #24]
 800c80a:	4013      	ands	r3, r2
 800c80c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c816:	2b00      	cmp	r3, #0
 800c818:	d003      	beq.n	800c822 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c81a:	69ba      	ldr	r2, [r7, #24]
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	4313      	orrs	r3, r2
 800c820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c82a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	43db      	mvns	r3, r3
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	4013      	ands	r3, r2
 800c83a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d003      	beq.n	800c850 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c848:	69ba      	ldr	r2, [r7, #24]
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	4313      	orrs	r3, r2
 800c84e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	43db      	mvns	r3, r3
 800c862:	69ba      	ldr	r2, [r7, #24]
 800c864:	4013      	ands	r3, r2
 800c866:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c870:	2b00      	cmp	r3, #0
 800c872:	d003      	beq.n	800c87c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c874:	69ba      	ldr	r2, [r7, #24]
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	4313      	orrs	r3, r2
 800c87a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	69ba      	ldr	r2, [r7, #24]
 800c880:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	43db      	mvns	r3, r3
 800c88c:	69ba      	ldr	r2, [r7, #24]
 800c88e:	4013      	ands	r3, r2
 800c890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d003      	beq.n	800c8a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c89e:	69ba      	ldr	r2, [r7, #24]
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	69ba      	ldr	r2, [r7, #24]
 800c8aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f47f ae63 	bne.w	800c588 <HAL_GPIO_Init+0x14>
  }
}
 800c8c2:	bf00      	nop
 800c8c4:	bf00      	nop
 800c8c6:	3724      	adds	r7, #36	; 0x24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr
 800c8d0:	58000400 	.word	0x58000400

0800c8d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c8e2:	4b75      	ldr	r3, [pc, #468]	; (800cab8 <HAL_GPIO_DeInit+0x1e4>)
 800c8e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800c8e6:	e0d9      	b.n	800ca9c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 80cc 	beq.w	800ca96 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c8fe:	4a6f      	ldr	r2, [pc, #444]	; (800cabc <HAL_GPIO_DeInit+0x1e8>)
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	089b      	lsrs	r3, r3, #2
 800c904:	3302      	adds	r3, #2
 800c906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c90a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	f003 0303 	and.w	r3, r3, #3
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	220f      	movs	r2, #15
 800c916:	fa02 f303 	lsl.w	r3, r2, r3
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	4013      	ands	r3, r2
 800c91e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4a67      	ldr	r2, [pc, #412]	; (800cac0 <HAL_GPIO_DeInit+0x1ec>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d037      	beq.n	800c998 <HAL_GPIO_DeInit+0xc4>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4a66      	ldr	r2, [pc, #408]	; (800cac4 <HAL_GPIO_DeInit+0x1f0>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d031      	beq.n	800c994 <HAL_GPIO_DeInit+0xc0>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a65      	ldr	r2, [pc, #404]	; (800cac8 <HAL_GPIO_DeInit+0x1f4>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d02b      	beq.n	800c990 <HAL_GPIO_DeInit+0xbc>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a64      	ldr	r2, [pc, #400]	; (800cacc <HAL_GPIO_DeInit+0x1f8>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d025      	beq.n	800c98c <HAL_GPIO_DeInit+0xb8>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a63      	ldr	r2, [pc, #396]	; (800cad0 <HAL_GPIO_DeInit+0x1fc>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d01f      	beq.n	800c988 <HAL_GPIO_DeInit+0xb4>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a62      	ldr	r2, [pc, #392]	; (800cad4 <HAL_GPIO_DeInit+0x200>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d019      	beq.n	800c984 <HAL_GPIO_DeInit+0xb0>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a61      	ldr	r2, [pc, #388]	; (800cad8 <HAL_GPIO_DeInit+0x204>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d013      	beq.n	800c980 <HAL_GPIO_DeInit+0xac>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a60      	ldr	r2, [pc, #384]	; (800cadc <HAL_GPIO_DeInit+0x208>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d00d      	beq.n	800c97c <HAL_GPIO_DeInit+0xa8>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a5f      	ldr	r2, [pc, #380]	; (800cae0 <HAL_GPIO_DeInit+0x20c>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d007      	beq.n	800c978 <HAL_GPIO_DeInit+0xa4>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a5e      	ldr	r2, [pc, #376]	; (800cae4 <HAL_GPIO_DeInit+0x210>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d101      	bne.n	800c974 <HAL_GPIO_DeInit+0xa0>
 800c970:	2309      	movs	r3, #9
 800c972:	e012      	b.n	800c99a <HAL_GPIO_DeInit+0xc6>
 800c974:	230a      	movs	r3, #10
 800c976:	e010      	b.n	800c99a <HAL_GPIO_DeInit+0xc6>
 800c978:	2308      	movs	r3, #8
 800c97a:	e00e      	b.n	800c99a <HAL_GPIO_DeInit+0xc6>
 800c97c:	2307      	movs	r3, #7
 800c97e:	e00c      	b.n	800c99a <HAL_GPIO_DeInit+0xc6>
 800c980:	2306      	movs	r3, #6
 800c982:	e00a      	b.n	800c99a <HAL_GPIO_DeInit+0xc6>
 800c984:	2305      	movs	r3, #5
 800c986:	e008      	b.n	800c99a <HAL_GPIO_DeInit+0xc6>
 800c988:	2304      	movs	r3, #4
 800c98a:	e006      	b.n	800c99a <HAL_GPIO_DeInit+0xc6>
 800c98c:	2303      	movs	r3, #3
 800c98e:	e004      	b.n	800c99a <HAL_GPIO_DeInit+0xc6>
 800c990:	2302      	movs	r3, #2
 800c992:	e002      	b.n	800c99a <HAL_GPIO_DeInit+0xc6>
 800c994:	2301      	movs	r3, #1
 800c996:	e000      	b.n	800c99a <HAL_GPIO_DeInit+0xc6>
 800c998:	2300      	movs	r3, #0
 800c99a:	697a      	ldr	r2, [r7, #20]
 800c99c:	f002 0203 	and.w	r2, r2, #3
 800c9a0:	0092      	lsls	r2, r2, #2
 800c9a2:	4093      	lsls	r3, r2
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d136      	bne.n	800ca18 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	43db      	mvns	r3, r3
 800c9b2:	401a      	ands	r2, r3
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	43db      	mvns	r3, r3
 800c9c0:	401a      	ands	r2, r3
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800c9c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	43db      	mvns	r3, r3
 800c9d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800c9d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	43db      	mvns	r3, r3
 800c9e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f003 0303 	and.w	r3, r3, #3
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	220f      	movs	r2, #15
 800c9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c9fa:	4a30      	ldr	r2, [pc, #192]	; (800cabc <HAL_GPIO_DeInit+0x1e8>)
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	089b      	lsrs	r3, r3, #2
 800ca00:	3302      	adds	r3, #2
 800ca02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	43da      	mvns	r2, r3
 800ca0a:	482c      	ldr	r0, [pc, #176]	; (800cabc <HAL_GPIO_DeInit+0x1e8>)
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	089b      	lsrs	r3, r3, #2
 800ca10:	400a      	ands	r2, r1
 800ca12:	3302      	adds	r3, #2
 800ca14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	2103      	movs	r1, #3
 800ca22:	fa01 f303 	lsl.w	r3, r1, r3
 800ca26:	431a      	orrs	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	08da      	lsrs	r2, r3, #3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	3208      	adds	r2, #8
 800ca34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	f003 0307 	and.w	r3, r3, #7
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	220f      	movs	r2, #15
 800ca42:	fa02 f303 	lsl.w	r3, r2, r3
 800ca46:	43db      	mvns	r3, r3
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	08d2      	lsrs	r2, r2, #3
 800ca4c:	4019      	ands	r1, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	3208      	adds	r2, #8
 800ca52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	68da      	ldr	r2, [r3, #12]
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	2103      	movs	r1, #3
 800ca60:	fa01 f303 	lsl.w	r3, r1, r3
 800ca64:	43db      	mvns	r3, r3
 800ca66:	401a      	ands	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	2101      	movs	r1, #1
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	fa01 f303 	lsl.w	r3, r1, r3
 800ca78:	43db      	mvns	r3, r3
 800ca7a:	401a      	ands	r2, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	689a      	ldr	r2, [r3, #8]
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	2103      	movs	r1, #3
 800ca8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca8e:	43db      	mvns	r3, r3
 800ca90:	401a      	ands	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	609a      	str	r2, [r3, #8]
    }

    position++;
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	fa22 f303 	lsr.w	r3, r2, r3
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f47f af1f 	bne.w	800c8e8 <HAL_GPIO_DeInit+0x14>
  }
}
 800caaa:	bf00      	nop
 800caac:	bf00      	nop
 800caae:	371c      	adds	r7, #28
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr
 800cab8:	58000080 	.word	0x58000080
 800cabc:	58000400 	.word	0x58000400
 800cac0:	58020000 	.word	0x58020000
 800cac4:	58020400 	.word	0x58020400
 800cac8:	58020800 	.word	0x58020800
 800cacc:	58020c00 	.word	0x58020c00
 800cad0:	58021000 	.word	0x58021000
 800cad4:	58021400 	.word	0x58021400
 800cad8:	58021800 	.word	0x58021800
 800cadc:	58021c00 	.word	0x58021c00
 800cae0:	58022000 	.word	0x58022000
 800cae4:	58022400 	.word	0x58022400

0800cae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	460b      	mov	r3, r1
 800caf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	691a      	ldr	r2, [r3, #16]
 800caf8:	887b      	ldrh	r3, [r7, #2]
 800cafa:	4013      	ands	r3, r2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cb00:	2301      	movs	r3, #1
 800cb02:	73fb      	strb	r3, [r7, #15]
 800cb04:	e001      	b.n	800cb0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cb06:	2300      	movs	r3, #0
 800cb08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3714      	adds	r7, #20
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr

0800cb18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	460b      	mov	r3, r1
 800cb22:	807b      	strh	r3, [r7, #2]
 800cb24:	4613      	mov	r3, r2
 800cb26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cb28:	787b      	ldrb	r3, [r7, #1]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d003      	beq.n	800cb36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cb2e:	887a      	ldrh	r2, [r7, #2]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800cb34:	e003      	b.n	800cb3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cb36:	887b      	ldrh	r3, [r7, #2]
 800cb38:	041a      	lsls	r2, r3, #16
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	619a      	str	r2, [r3, #24]
}
 800cb3e:	bf00      	nop
 800cb40:	370c      	adds	r7, #12
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr

0800cb4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cb4a:	b480      	push	{r7}
 800cb4c:	b085      	sub	sp, #20
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	460b      	mov	r3, r1
 800cb54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	695b      	ldr	r3, [r3, #20]
 800cb5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cb5c:	887a      	ldrh	r2, [r7, #2]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	4013      	ands	r3, r2
 800cb62:	041a      	lsls	r2, r3, #16
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	43d9      	mvns	r1, r3
 800cb68:	887b      	ldrh	r3, [r7, #2]
 800cb6a:	400b      	ands	r3, r1
 800cb6c:	431a      	orrs	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	619a      	str	r2, [r3, #24]
}
 800cb72:	bf00      	nop
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr

0800cb7e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	4603      	mov	r3, r0
 800cb86:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800cb88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800cb90:	88fb      	ldrh	r3, [r7, #6]
 800cb92:	4013      	ands	r3, r2
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d008      	beq.n	800cbaa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cb98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cb9c:	88fb      	ldrh	r3, [r7, #6]
 800cb9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cba2:	88fb      	ldrh	r3, [r7, #6]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 f804 	bl	800cbb2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800cbaa:	bf00      	nop
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b083      	sub	sp, #12
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	4603      	mov	r3, r0
 800cbba:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800cbbc:	bf00      	nop
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e07f      	b.n	800ccda <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7f9 ff2e 	bl	8006a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2224      	movs	r2, #36	; 0x24
 800cbf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f022 0201 	bic.w	r2, r2, #1
 800cc0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cc18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	689a      	ldr	r2, [r3, #8]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d107      	bne.n	800cc42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	689a      	ldr	r2, [r3, #8]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc3e:	609a      	str	r2, [r3, #8]
 800cc40:	e006      	b.n	800cc50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	689a      	ldr	r2, [r3, #8]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cc4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d104      	bne.n	800cc62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6859      	ldr	r1, [r3, #4]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	4b1d      	ldr	r3, [pc, #116]	; (800cce4 <HAL_I2C_Init+0x11c>)
 800cc6e:	430b      	orrs	r3, r1
 800cc70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68da      	ldr	r2, [r3, #12]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	691a      	ldr	r2, [r3, #16]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	699b      	ldr	r3, [r3, #24]
 800cc92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	69d9      	ldr	r1, [r3, #28]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a1a      	ldr	r2, [r3, #32]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f042 0201 	orr.w	r2, r2, #1
 800ccba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2220      	movs	r2, #32
 800ccc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	02008000 	.word	0x02008000

0800cce8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e021      	b.n	800cd3e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2224      	movs	r2, #36	; 0x24
 800ccfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f022 0201 	bic.w	r2, r2, #1
 800cd10:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7f9 ff06 	bl	8006b24 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
	...

0800cd48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b088      	sub	sp, #32
 800cd4c:	af02      	add	r7, sp, #8
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	4608      	mov	r0, r1
 800cd52:	4611      	mov	r1, r2
 800cd54:	461a      	mov	r2, r3
 800cd56:	4603      	mov	r3, r0
 800cd58:	817b      	strh	r3, [r7, #10]
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	813b      	strh	r3, [r7, #8]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	2b20      	cmp	r3, #32
 800cd6c:	f040 80f9 	bne.w	800cf62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd70:	6a3b      	ldr	r3, [r7, #32]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <HAL_I2C_Mem_Write+0x34>
 800cd76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d105      	bne.n	800cd88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cd84:	2301      	movs	r3, #1
 800cd86:	e0ed      	b.n	800cf64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d101      	bne.n	800cd96 <HAL_I2C_Mem_Write+0x4e>
 800cd92:	2302      	movs	r3, #2
 800cd94:	e0e6      	b.n	800cf64 <HAL_I2C_Mem_Write+0x21c>
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cd9e:	f7fe ff17 	bl	800bbd0 <HAL_GetTick>
 800cda2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	2319      	movs	r3, #25
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f000 fadd 	bl	800d370 <I2C_WaitOnFlagUntilTimeout>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d001      	beq.n	800cdc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e0d1      	b.n	800cf64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2221      	movs	r2, #33	; 0x21
 800cdc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2240      	movs	r2, #64	; 0x40
 800cdcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6a3a      	ldr	r2, [r7, #32]
 800cdda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cde0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2200      	movs	r2, #0
 800cde6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cde8:	88f8      	ldrh	r0, [r7, #6]
 800cdea:	893a      	ldrh	r2, [r7, #8]
 800cdec:	8979      	ldrh	r1, [r7, #10]
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	9301      	str	r3, [sp, #4]
 800cdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf4:	9300      	str	r3, [sp, #0]
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f000 f9ed 	bl	800d1d8 <I2C_RequestMemoryWrite>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d005      	beq.n	800ce10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e0a9      	b.n	800cf64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	2bff      	cmp	r3, #255	; 0xff
 800ce18:	d90e      	bls.n	800ce38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	22ff      	movs	r2, #255	; 0xff
 800ce1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce24:	b2da      	uxtb	r2, r3
 800ce26:	8979      	ldrh	r1, [r7, #10]
 800ce28:	2300      	movs	r3, #0
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f000 fc57 	bl	800d6e4 <I2C_TransferConfig>
 800ce36:	e00f      	b.n	800ce58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce46:	b2da      	uxtb	r2, r3
 800ce48:	8979      	ldrh	r1, [r7, #10]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ce52:	68f8      	ldr	r0, [r7, #12]
 800ce54:	f000 fc46 	bl	800d6e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce58:	697a      	ldr	r2, [r7, #20]
 800ce5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f000 fad6 	bl	800d40e <I2C_WaitOnTXISFlagUntilTimeout>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e07b      	b.n	800cf64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce70:	781a      	ldrb	r2, [r3, #0]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7c:	1c5a      	adds	r2, r3, #1
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce94:	3b01      	subs	r3, #1
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d034      	beq.n	800cf10 <HAL_I2C_Mem_Write+0x1c8>
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d130      	bne.n	800cf10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	2180      	movs	r1, #128	; 0x80
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f000 fa59 	bl	800d370 <I2C_WaitOnFlagUntilTimeout>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e04d      	b.n	800cf64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cecc:	b29b      	uxth	r3, r3
 800cece:	2bff      	cmp	r3, #255	; 0xff
 800ced0:	d90e      	bls.n	800cef0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	22ff      	movs	r2, #255	; 0xff
 800ced6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cedc:	b2da      	uxtb	r2, r3
 800cede:	8979      	ldrh	r1, [r7, #10]
 800cee0:	2300      	movs	r3, #0
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f000 fbfb 	bl	800d6e4 <I2C_TransferConfig>
 800ceee:	e00f      	b.n	800cf10 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	8979      	ldrh	r1, [r7, #10]
 800cf02:	2300      	movs	r3, #0
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f000 fbea 	bl	800d6e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d19e      	bne.n	800ce58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf1a:	697a      	ldr	r2, [r7, #20]
 800cf1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f000 fabc 	bl	800d49c <I2C_WaitOnSTOPFlagUntilTimeout>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e01a      	b.n	800cf64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2220      	movs	r2, #32
 800cf34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6859      	ldr	r1, [r3, #4]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	4b0a      	ldr	r3, [pc, #40]	; (800cf6c <HAL_I2C_Mem_Write+0x224>)
 800cf42:	400b      	ands	r3, r1
 800cf44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2220      	movs	r2, #32
 800cf4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	e000      	b.n	800cf64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800cf62:	2302      	movs	r3, #2
  }
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	fe00e800 	.word	0xfe00e800

0800cf70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b088      	sub	sp, #32
 800cf74:	af02      	add	r7, sp, #8
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	4608      	mov	r0, r1
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	4603      	mov	r3, r0
 800cf80:	817b      	strh	r3, [r7, #10]
 800cf82:	460b      	mov	r3, r1
 800cf84:	813b      	strh	r3, [r7, #8]
 800cf86:	4613      	mov	r3, r2
 800cf88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b20      	cmp	r3, #32
 800cf94:	f040 80fd 	bne.w	800d192 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf98:	6a3b      	ldr	r3, [r7, #32]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d002      	beq.n	800cfa4 <HAL_I2C_Mem_Read+0x34>
 800cf9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d105      	bne.n	800cfb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfaa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cfac:	2301      	movs	r3, #1
 800cfae:	e0f1      	b.n	800d194 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d101      	bne.n	800cfbe <HAL_I2C_Mem_Read+0x4e>
 800cfba:	2302      	movs	r3, #2
 800cfbc:	e0ea      	b.n	800d194 <HAL_I2C_Mem_Read+0x224>
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cfc6:	f7fe fe03 	bl	800bbd0 <HAL_GetTick>
 800cfca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	9300      	str	r3, [sp, #0]
 800cfd0:	2319      	movs	r3, #25
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f000 f9c9 	bl	800d370 <I2C_WaitOnFlagUntilTimeout>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e0d5      	b.n	800d194 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2222      	movs	r2, #34	; 0x22
 800cfec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2240      	movs	r2, #64	; 0x40
 800cff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6a3a      	ldr	r2, [r7, #32]
 800d002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d010:	88f8      	ldrh	r0, [r7, #6]
 800d012:	893a      	ldrh	r2, [r7, #8]
 800d014:	8979      	ldrh	r1, [r7, #10]
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	9301      	str	r3, [sp, #4]
 800d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	4603      	mov	r3, r0
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f000 f92d 	bl	800d280 <I2C_RequestMemoryRead>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d005      	beq.n	800d038 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d034:	2301      	movs	r3, #1
 800d036:	e0ad      	b.n	800d194 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	2bff      	cmp	r3, #255	; 0xff
 800d040:	d90e      	bls.n	800d060 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	22ff      	movs	r2, #255	; 0xff
 800d046:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	8979      	ldrh	r1, [r7, #10]
 800d050:	4b52      	ldr	r3, [pc, #328]	; (800d19c <HAL_I2C_Mem_Read+0x22c>)
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f000 fb43 	bl	800d6e4 <I2C_TransferConfig>
 800d05e:	e00f      	b.n	800d080 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d064:	b29a      	uxth	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d06e:	b2da      	uxtb	r2, r3
 800d070:	8979      	ldrh	r1, [r7, #10]
 800d072:	4b4a      	ldr	r3, [pc, #296]	; (800d19c <HAL_I2C_Mem_Read+0x22c>)
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f000 fb32 	bl	800d6e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	9300      	str	r3, [sp, #0]
 800d084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d086:	2200      	movs	r2, #0
 800d088:	2104      	movs	r1, #4
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f000 f970 	bl	800d370 <I2C_WaitOnFlagUntilTimeout>
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d096:	2301      	movs	r3, #1
 800d098:	e07c      	b.n	800d194 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a4:	b2d2      	uxtb	r2, r2
 800d0a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d034      	beq.n	800d140 <HAL_I2C_Mem_Read+0x1d0>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d130      	bne.n	800d140 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	2180      	movs	r1, #128	; 0x80
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f000 f941 	bl	800d370 <I2C_WaitOnFlagUntilTimeout>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d001      	beq.n	800d0f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e04d      	b.n	800d194 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	2bff      	cmp	r3, #255	; 0xff
 800d100:	d90e      	bls.n	800d120 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	22ff      	movs	r2, #255	; 0xff
 800d106:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	8979      	ldrh	r1, [r7, #10]
 800d110:	2300      	movs	r3, #0
 800d112:	9300      	str	r3, [sp, #0]
 800d114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f000 fae3 	bl	800d6e4 <I2C_TransferConfig>
 800d11e:	e00f      	b.n	800d140 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d124:	b29a      	uxth	r2, r3
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	8979      	ldrh	r1, [r7, #10]
 800d132:	2300      	movs	r3, #0
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f000 fad2 	bl	800d6e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d144:	b29b      	uxth	r3, r3
 800d146:	2b00      	cmp	r3, #0
 800d148:	d19a      	bne.n	800d080 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f000 f9a4 	bl	800d49c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d001      	beq.n	800d15e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e01a      	b.n	800d194 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2220      	movs	r2, #32
 800d164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	6859      	ldr	r1, [r3, #4]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	4b0b      	ldr	r3, [pc, #44]	; (800d1a0 <HAL_I2C_Mem_Read+0x230>)
 800d172:	400b      	ands	r3, r1
 800d174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2220      	movs	r2, #32
 800d17a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2200      	movs	r2, #0
 800d182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2200      	movs	r2, #0
 800d18a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	e000      	b.n	800d194 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d192:	2302      	movs	r3, #2
  }
}
 800d194:	4618      	mov	r0, r3
 800d196:	3718      	adds	r7, #24
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}
 800d19c:	80002400 	.word	0x80002400
 800d1a0:	fe00e800 	.word	0xfe00e800

0800d1a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1b2:	b2db      	uxtb	r3, r3
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af02      	add	r7, sp, #8
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	817b      	strh	r3, [r7, #10]
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	813b      	strh	r3, [r7, #8]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d1f2:	88fb      	ldrh	r3, [r7, #6]
 800d1f4:	b2da      	uxtb	r2, r3
 800d1f6:	8979      	ldrh	r1, [r7, #10]
 800d1f8:	4b20      	ldr	r3, [pc, #128]	; (800d27c <I2C_RequestMemoryWrite+0xa4>)
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f000 fa6f 	bl	800d6e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d206:	69fa      	ldr	r2, [r7, #28]
 800d208:	69b9      	ldr	r1, [r7, #24]
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f000 f8ff 	bl	800d40e <I2C_WaitOnTXISFlagUntilTimeout>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d001      	beq.n	800d21a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	e02c      	b.n	800d274 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d21a:	88fb      	ldrh	r3, [r7, #6]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d105      	bne.n	800d22c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d220:	893b      	ldrh	r3, [r7, #8]
 800d222:	b2da      	uxtb	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	629a      	str	r2, [r3, #40]	; 0x28
 800d22a:	e015      	b.n	800d258 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d22c:	893b      	ldrh	r3, [r7, #8]
 800d22e:	0a1b      	lsrs	r3, r3, #8
 800d230:	b29b      	uxth	r3, r3
 800d232:	b2da      	uxtb	r2, r3
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d23a:	69fa      	ldr	r2, [r7, #28]
 800d23c:	69b9      	ldr	r1, [r7, #24]
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f000 f8e5 	bl	800d40e <I2C_WaitOnTXISFlagUntilTimeout>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e012      	b.n	800d274 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d24e:	893b      	ldrh	r3, [r7, #8]
 800d250:	b2da      	uxtb	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	2200      	movs	r2, #0
 800d260:	2180      	movs	r1, #128	; 0x80
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f000 f884 	bl	800d370 <I2C_WaitOnFlagUntilTimeout>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d001      	beq.n	800d272 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	e000      	b.n	800d274 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	80002000 	.word	0x80002000

0800d280 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af02      	add	r7, sp, #8
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	4608      	mov	r0, r1
 800d28a:	4611      	mov	r1, r2
 800d28c:	461a      	mov	r2, r3
 800d28e:	4603      	mov	r3, r0
 800d290:	817b      	strh	r3, [r7, #10]
 800d292:	460b      	mov	r3, r1
 800d294:	813b      	strh	r3, [r7, #8]
 800d296:	4613      	mov	r3, r2
 800d298:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d29a:	88fb      	ldrh	r3, [r7, #6]
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	8979      	ldrh	r1, [r7, #10]
 800d2a0:	4b20      	ldr	r3, [pc, #128]	; (800d324 <I2C_RequestMemoryRead+0xa4>)
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f000 fa1c 	bl	800d6e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d2ac:	69fa      	ldr	r2, [r7, #28]
 800d2ae:	69b9      	ldr	r1, [r7, #24]
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f000 f8ac 	bl	800d40e <I2C_WaitOnTXISFlagUntilTimeout>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e02c      	b.n	800d31a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d2c0:	88fb      	ldrh	r3, [r7, #6]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d105      	bne.n	800d2d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d2c6:	893b      	ldrh	r3, [r7, #8]
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	629a      	str	r2, [r3, #40]	; 0x28
 800d2d0:	e015      	b.n	800d2fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d2d2:	893b      	ldrh	r3, [r7, #8]
 800d2d4:	0a1b      	lsrs	r3, r3, #8
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d2e0:	69fa      	ldr	r2, [r7, #28]
 800d2e2:	69b9      	ldr	r1, [r7, #24]
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f000 f892 	bl	800d40e <I2C_WaitOnTXISFlagUntilTimeout>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d001      	beq.n	800d2f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e012      	b.n	800d31a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d2f4:	893b      	ldrh	r3, [r7, #8]
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	2200      	movs	r2, #0
 800d306:	2140      	movs	r1, #64	; 0x40
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f000 f831 	bl	800d370 <I2C_WaitOnFlagUntilTimeout>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d314:	2301      	movs	r3, #1
 800d316:	e000      	b.n	800d31a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	80002000 	.word	0x80002000

0800d328 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	f003 0302 	and.w	r3, r3, #2
 800d33a:	2b02      	cmp	r3, #2
 800d33c:	d103      	bne.n	800d346 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2200      	movs	r2, #0
 800d344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	f003 0301 	and.w	r3, r3, #1
 800d350:	2b01      	cmp	r3, #1
 800d352:	d007      	beq.n	800d364 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	699a      	ldr	r2, [r3, #24]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f042 0201 	orr.w	r2, r2, #1
 800d362:	619a      	str	r2, [r3, #24]
  }
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	603b      	str	r3, [r7, #0]
 800d37c:	4613      	mov	r3, r2
 800d37e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d380:	e031      	b.n	800d3e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d388:	d02d      	beq.n	800d3e6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d38a:	f7fe fc21 	bl	800bbd0 <HAL_GetTick>
 800d38e:	4602      	mov	r2, r0
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	1ad3      	subs	r3, r2, r3
 800d394:	683a      	ldr	r2, [r7, #0]
 800d396:	429a      	cmp	r2, r3
 800d398:	d302      	bcc.n	800d3a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d122      	bne.n	800d3e6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	699a      	ldr	r2, [r3, #24]
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	bf0c      	ite	eq
 800d3b0:	2301      	moveq	r3, #1
 800d3b2:	2300      	movne	r3, #0
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	79fb      	ldrb	r3, [r7, #7]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d113      	bne.n	800d3e6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c2:	f043 0220 	orr.w	r2, r3, #32
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e00f      	b.n	800d406 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	699a      	ldr	r2, [r3, #24]
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	bf0c      	ite	eq
 800d3f6:	2301      	moveq	r3, #1
 800d3f8:	2300      	movne	r3, #0
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	79fb      	ldrb	r3, [r7, #7]
 800d400:	429a      	cmp	r2, r3
 800d402:	d0be      	beq.n	800d382 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d40e:	b580      	push	{r7, lr}
 800d410:	b084      	sub	sp, #16
 800d412:	af00      	add	r7, sp, #0
 800d414:	60f8      	str	r0, [r7, #12]
 800d416:	60b9      	str	r1, [r7, #8]
 800d418:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d41a:	e033      	b.n	800d484 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	68b9      	ldr	r1, [r7, #8]
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f000 f87f 	bl	800d524 <I2C_IsErrorOccurred>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d001      	beq.n	800d430 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d42c:	2301      	movs	r3, #1
 800d42e:	e031      	b.n	800d494 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d436:	d025      	beq.n	800d484 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d438:	f7fe fbca 	bl	800bbd0 <HAL_GetTick>
 800d43c:	4602      	mov	r2, r0
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	429a      	cmp	r2, r3
 800d446:	d302      	bcc.n	800d44e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d11a      	bne.n	800d484 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	699b      	ldr	r3, [r3, #24]
 800d454:	f003 0302 	and.w	r3, r3, #2
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d013      	beq.n	800d484 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d460:	f043 0220 	orr.w	r2, r3, #32
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2220      	movs	r2, #32
 800d46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2200      	movs	r2, #0
 800d474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800d480:	2301      	movs	r3, #1
 800d482:	e007      	b.n	800d494 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	699b      	ldr	r3, [r3, #24]
 800d48a:	f003 0302 	and.w	r3, r3, #2
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d1c4      	bne.n	800d41c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d4a8:	e02f      	b.n	800d50a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	68b9      	ldr	r1, [r7, #8]
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f000 f838 	bl	800d524 <I2C_IsErrorOccurred>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d001      	beq.n	800d4be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e02d      	b.n	800d51a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4be:	f7fe fb87 	bl	800bbd0 <HAL_GetTick>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d302      	bcc.n	800d4d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d11a      	bne.n	800d50a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	699b      	ldr	r3, [r3, #24]
 800d4da:	f003 0320 	and.w	r3, r3, #32
 800d4de:	2b20      	cmp	r3, #32
 800d4e0:	d013      	beq.n	800d50a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4e6:	f043 0220 	orr.w	r2, r3, #32
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2220      	movs	r2, #32
 800d4f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	e007      	b.n	800d51a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	f003 0320 	and.w	r3, r3, #32
 800d514:	2b20      	cmp	r3, #32
 800d516:	d1c8      	bne.n	800d4aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d518:	2300      	movs	r3, #0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
	...

0800d524 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b08a      	sub	sp, #40	; 0x28
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d530:	2300      	movs	r3, #0
 800d532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	699b      	ldr	r3, [r3, #24]
 800d53c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	f003 0310 	and.w	r3, r3, #16
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d068      	beq.n	800d622 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2210      	movs	r2, #16
 800d556:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d558:	e049      	b.n	800d5ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d560:	d045      	beq.n	800d5ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d562:	f7fe fb35 	bl	800bbd0 <HAL_GetTick>
 800d566:	4602      	mov	r2, r0
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d302      	bcc.n	800d578 <I2C_IsErrorOccurred+0x54>
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d13a      	bne.n	800d5ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d582:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d58a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	699b      	ldr	r3, [r3, #24]
 800d592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d59a:	d121      	bne.n	800d5e0 <I2C_IsErrorOccurred+0xbc>
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5a2:	d01d      	beq.n	800d5e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d5a4:	7cfb      	ldrb	r3, [r7, #19]
 800d5a6:	2b20      	cmp	r3, #32
 800d5a8:	d01a      	beq.n	800d5e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d5ba:	f7fe fb09 	bl	800bbd0 <HAL_GetTick>
 800d5be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d5c0:	e00e      	b.n	800d5e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d5c2:	f7fe fb05 	bl	800bbd0 <HAL_GetTick>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	1ad3      	subs	r3, r2, r3
 800d5cc:	2b19      	cmp	r3, #25
 800d5ce:	d907      	bls.n	800d5e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d5d0:	6a3b      	ldr	r3, [r7, #32]
 800d5d2:	f043 0320 	orr.w	r3, r3, #32
 800d5d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800d5de:	e006      	b.n	800d5ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	699b      	ldr	r3, [r3, #24]
 800d5e6:	f003 0320 	and.w	r3, r3, #32
 800d5ea:	2b20      	cmp	r3, #32
 800d5ec:	d1e9      	bne.n	800d5c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	699b      	ldr	r3, [r3, #24]
 800d5f4:	f003 0320 	and.w	r3, r3, #32
 800d5f8:	2b20      	cmp	r3, #32
 800d5fa:	d003      	beq.n	800d604 <I2C_IsErrorOccurred+0xe0>
 800d5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d600:	2b00      	cmp	r3, #0
 800d602:	d0aa      	beq.n	800d55a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d103      	bne.n	800d614 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2220      	movs	r2, #32
 800d612:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d614:	6a3b      	ldr	r3, [r7, #32]
 800d616:	f043 0304 	orr.w	r3, r3, #4
 800d61a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	699b      	ldr	r3, [r3, #24]
 800d628:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00b      	beq.n	800d64c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d634:	6a3b      	ldr	r3, [r7, #32]
 800d636:	f043 0301 	orr.w	r3, r3, #1
 800d63a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d644:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00b      	beq.n	800d66e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	f043 0308 	orr.w	r3, r3, #8
 800d65c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d666:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d668:	2301      	movs	r3, #1
 800d66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00b      	beq.n	800d690 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d678:	6a3b      	ldr	r3, [r7, #32]
 800d67a:	f043 0302 	orr.w	r3, r3, #2
 800d67e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d694:	2b00      	cmp	r3, #0
 800d696:	d01c      	beq.n	800d6d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f7ff fe45 	bl	800d328 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6859      	ldr	r1, [r3, #4]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	4b0d      	ldr	r3, [pc, #52]	; (800d6e0 <I2C_IsErrorOccurred+0x1bc>)
 800d6aa:	400b      	ands	r3, r1
 800d6ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6b2:	6a3b      	ldr	r3, [r7, #32]
 800d6b4:	431a      	orrs	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2220      	movs	r2, #32
 800d6be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d6d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3728      	adds	r7, #40	; 0x28
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	fe00e800 	.word	0xfe00e800

0800d6e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b087      	sub	sp, #28
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	607b      	str	r3, [r7, #4]
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	817b      	strh	r3, [r7, #10]
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6f6:	897b      	ldrh	r3, [r7, #10]
 800d6f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d6fc:	7a7b      	ldrb	r3, [r7, #9]
 800d6fe:	041b      	lsls	r3, r3, #16
 800d700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d704:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d712:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	685a      	ldr	r2, [r3, #4]
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	0d5b      	lsrs	r3, r3, #21
 800d71e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d722:	4b08      	ldr	r3, [pc, #32]	; (800d744 <I2C_TransferConfig+0x60>)
 800d724:	430b      	orrs	r3, r1
 800d726:	43db      	mvns	r3, r3
 800d728:	ea02 0103 	and.w	r1, r2, r3
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	697a      	ldr	r2, [r7, #20]
 800d732:	430a      	orrs	r2, r1
 800d734:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d736:	bf00      	nop
 800d738:	371c      	adds	r7, #28
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	03ff63ff 	.word	0x03ff63ff

0800d748 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b20      	cmp	r3, #32
 800d75c:	d138      	bne.n	800d7d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d764:	2b01      	cmp	r3, #1
 800d766:	d101      	bne.n	800d76c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d768:	2302      	movs	r3, #2
 800d76a:	e032      	b.n	800d7d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2224      	movs	r2, #36	; 0x24
 800d778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f022 0201 	bic.w	r2, r2, #1
 800d78a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d79a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6819      	ldr	r1, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	683a      	ldr	r2, [r7, #0]
 800d7a8:	430a      	orrs	r2, r1
 800d7aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f042 0201 	orr.w	r2, r2, #1
 800d7ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2220      	movs	r2, #32
 800d7c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	e000      	b.n	800d7d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d7d0:	2302      	movs	r3, #2
  }
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	370c      	adds	r7, #12
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr

0800d7de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d7de:	b480      	push	{r7}
 800d7e0:	b085      	sub	sp, #20
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
 800d7e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b20      	cmp	r3, #32
 800d7f2:	d139      	bne.n	800d868 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d101      	bne.n	800d802 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d7fe:	2302      	movs	r3, #2
 800d800:	e033      	b.n	800d86a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2224      	movs	r2, #36	; 0x24
 800d80e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f022 0201 	bic.w	r2, r2, #1
 800d820:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d830:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	021b      	lsls	r3, r3, #8
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	4313      	orrs	r3, r2
 800d83a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f042 0201 	orr.w	r2, r2, #1
 800d852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2220      	movs	r2, #32
 800d858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	e000      	b.n	800d86a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d868:	2302      	movs	r3, #2
  }
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3714      	adds	r7, #20
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
	...

0800d878 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d101      	bne.n	800d88a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800d886:	2301      	movs	r3, #1
 800d888:	e070      	b.n	800d96c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d890:	b2db      	uxtb	r3, r3
 800d892:	2b00      	cmp	r3, #0
 800d894:	d106      	bne.n	800d8a4 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7f9 f966 	bl	8006b70 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f042 0201 	orr.w	r2, r2, #1
 800d8ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f022 0201 	bic.w	r2, r2, #1
 800d8ca:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800d8da:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d8ea:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d8fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d90a:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4a19      	ldr	r2, [pc, #100]	; (800d974 <HAL_JPEG_Init+0xfc>)
 800d910:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4a18      	ldr	r2, [pc, #96]	; (800d978 <HAL_JPEG_Init+0x100>)
 800d916:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2200      	movs	r2, #0
 800d91c:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 fdc7 	bl	800e4b8 <JPEG_Set_HuffEnc_Mem>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d004      	beq.n	800d93a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800d936:	2301      	movs	r3, #1
 800d938:	e018      	b.n	800d96c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	685a      	ldr	r2, [r3, #4]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d948:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800d96a:	2300      	movs	r3, #0
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	0802b7e0 	.word	0x0802b7e0
 800d978:	0802b820 	.word	0x0802b820

0800d97c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b086      	sub	sp, #24
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d002      	beq.n	800d992 <HAL_JPEG_GetInfo+0x16>
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d101      	bne.n	800d996 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800d992:	2301      	movs	r3, #1
 800d994:	e083      	b.n	800da9e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	f003 0303 	and.w	r3, r3, #3
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	d103      	bne.n	800d9ac <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	2210      	movs	r2, #16
 800d9a8:	601a      	str	r2, [r3, #0]
 800d9aa:	e017      	b.n	800d9dc <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	f003 0303 	and.w	r3, r3, #3
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d103      	bne.n	800d9c2 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	601a      	str	r2, [r3, #0]
 800d9c0:	e00c      	b.n	800d9dc <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	f003 0303 	and.w	r3, r3, #3
 800d9cc:	2b03      	cmp	r3, #3
 800d9ce:	d103      	bne.n	800d9d8 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	2230      	movs	r2, #48	; 0x30
 800d9d4:	601a      	str	r2, [r3, #0]
 800d9d6:	e001      	b.n	800d9dc <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e060      	b.n	800da9e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	0c1b      	lsrs	r3, r3, #16
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	0c1b      	lsrs	r3, r3, #16
 800d9f2:	b29a      	uxth	r2, r3
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b10      	cmp	r3, #16
 800d9fe:	d003      	beq.n	800da08 <HAL_JPEG_GetInfo+0x8c>
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2b30      	cmp	r3, #48	; 0x30
 800da06:	d140      	bne.n	800da8a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	691b      	ldr	r3, [r3, #16]
 800da0e:	091b      	lsrs	r3, r3, #4
 800da10:	f003 030f 	and.w	r3, r3, #15
 800da14:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	695b      	ldr	r3, [r3, #20]
 800da1c:	091b      	lsrs	r3, r3, #4
 800da1e:	f003 030f 	and.w	r3, r3, #15
 800da22:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	091b      	lsrs	r3, r3, #4
 800da2c:	f003 030f 	and.w	r3, r3, #15
 800da30:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d109      	bne.n	800da4c <HAL_JPEG_GetInfo+0xd0>
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d106      	bne.n	800da4c <HAL_JPEG_GetInfo+0xd0>
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d103      	bne.n	800da4c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	2202      	movs	r2, #2
 800da48:	605a      	str	r2, [r3, #4]
 800da4a:	e01d      	b.n	800da88 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d109      	bne.n	800da66 <HAL_JPEG_GetInfo+0xea>
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d106      	bne.n	800da66 <HAL_JPEG_GetInfo+0xea>
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d103      	bne.n	800da66 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	2200      	movs	r2, #0
 800da62:	605a      	str	r2, [r3, #4]
 800da64:	e010      	b.n	800da88 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	2b03      	cmp	r3, #3
 800da6a:	d109      	bne.n	800da80 <HAL_JPEG_GetInfo+0x104>
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d106      	bne.n	800da80 <HAL_JPEG_GetInfo+0x104>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d103      	bne.n	800da80 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	2201      	movs	r2, #1
 800da7c:	605a      	str	r2, [r3, #4]
 800da7e:	e003      	b.n	800da88 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	2200      	movs	r2, #0
 800da84:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800da86:	e003      	b.n	800da90 <HAL_JPEG_GetInfo+0x114>
 800da88:	e002      	b.n	800da90 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	2200      	movs	r2, #0
 800da8e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f001 fe03 	bl	800f69c <JPEG_GetQuality>
 800da96:	4602      	mov	r2, r0
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3718      	adds	r7, #24
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	607a      	str	r2, [r7, #4]
 800dab2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d005      	beq.n	800dac6 <HAL_JPEG_Decode_DMA+0x20>
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d002      	beq.n	800dac6 <HAL_JPEG_Decode_DMA+0x20>
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d101      	bne.n	800daca <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800dac6:	2301      	movs	r3, #1
 800dac8:	e04c      	b.n	800db64 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d101      	bne.n	800dad8 <HAL_JPEG_Decode_DMA+0x32>
 800dad4:	2302      	movs	r3, #2
 800dad6:	e045      	b.n	800db64 <HAL_JPEG_Decode_DMA+0xbe>
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2201      	movs	r2, #1
 800dadc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d134      	bne.n	800db56 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2204      	movs	r2, #4
 800daf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daf8:	f023 020f 	bic.w	r2, r3, #15
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db04:	f043 020e 	orr.w	r2, r3, #14
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	68ba      	ldr	r2, [r7, #8]
 800db10:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	683a      	ldr	r2, [r7, #0]
 800db16:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	69ba      	ldr	r2, [r7, #24]
 800db22:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2200      	movs	r2, #0
 800db28:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f000 ff43 	bl	800e9bc <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f001 fa64 	bl	800f004 <JPEG_DMA_StartProcess>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00f      	beq.n	800db62 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2206      	movs	r2, #6
 800db46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 800db52:	2301      	movs	r3, #1
 800db54:	e006      	b.n	800db64 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 800db5e:	2302      	movs	r3, #2
 800db60:	e000      	b.n	800db64 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800db62:	2300      	movs	r3, #0
}
 800db64:	4618      	mov	r0, r3
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db7e:	f003 030c 	and.w	r3, r3, #12
 800db82:	2b0c      	cmp	r3, #12
 800db84:	d116      	bne.n	800dbb4 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	f003 0301 	and.w	r3, r3, #1
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d005      	beq.n	800db9c <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f003 0302 	and.w	r3, r3, #2
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d033      	beq.n	800dc0e <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbaa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	655a      	str	r2, [r3, #84]	; 0x54
 800dbb2:	e02c      	b.n	800dc0e <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbb8:	f003 030c 	and.w	r3, r3, #12
 800dbbc:	2b08      	cmp	r3, #8
 800dbbe:	d126      	bne.n	800dc0e <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d009      	beq.n	800dbde <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f043 0306 	orr.w	r3, r3, #6
 800dbdc:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	f003 0302 	and.w	r3, r3, #2
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d009      	beq.n	800dbfc <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800dbfa:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	43da      	mvns	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	400a      	ands	r2, r1
 800dc0c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800dc0e:	2300      	movs	r3, #0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3714      	adds	r7, #20
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr

0800dc1c <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800dc1c:	b590      	push	{r4, r7, lr}
 800dc1e:	b087      	sub	sp, #28
 800dc20:	af02      	add	r7, sp, #8
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800dc26:	2300      	movs	r3, #0
 800dc28:	60fb      	str	r3, [r7, #12]
  uint32_t xfrSize;

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d101      	bne.n	800dc3a <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e0d7      	b.n	800ddea <HAL_JPEG_Resume+0x1ce>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc3e:	f003 030c 	and.w	r3, r3, #12
 800dc42:	2b0c      	cmp	r3, #12
 800dc44:	f040 80a4 	bne.w	800dd90 <HAL_JPEG_Resume+0x174>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d049      	beq.n	800dce6 <HAL_JPEG_Resume+0xca>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	655a      	str	r2, [r3, #84]	; 0x54
        then MDMA In buffer size is 32 bytes

        else (MDMA In is triggred with JPEG In FIFO not full flag)
        then MDMA In buffer size is 4 bytes
        */
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc64:	60bb      	str	r3, [r7, #8]

      if (xfrSize == 0UL)
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10b      	bne.n	800dc84 <HAL_JPEG_Resume+0x68>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc70:	f043 0204 	orr.w	r2, r3, #4
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2206      	movs	r2, #6
 800dc7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        return HAL_ERROR;
 800dc80:	2301      	movs	r3, #1
 800dc82:	e0b2      	b.n	800ddea <HAL_JPEG_Resume+0x1ce>
      }
      /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc8c:	68b9      	ldr	r1, [r7, #8]
 800dc8e:	fbb3 f1f1 	udiv	r1, r3, r1
 800dc92:	68b8      	ldr	r0, [r7, #8]
 800dc94:	fb00 f101 	mul.w	r1, r0, r1
 800dc98:	1a5b      	subs	r3, r3, r1
 800dc9a:	1ad2      	subs	r2, r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	629a      	str	r2, [r3, #40]	; 0x28


      if (hjpeg->InDataLength > 0UL)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d01e      	beq.n	800dce6 <HAL_JPEG_Resume+0xca>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	699b      	ldr	r3, [r3, #24]
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	3340      	adds	r3, #64	; 0x40
 800dcb8:	461c      	mov	r4, r3
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	9200      	str	r2, [sp, #0]
 800dcc2:	4622      	mov	r2, r4
 800dcc4:	f002 f97e 	bl	800ffc4 <HAL_MDMA_Start_IT>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00b      	beq.n	800dce6 <HAL_JPEG_Resume+0xca>
                              hjpeg->InDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcd2:	f043 0204 	orr.w	r2, r3, #4
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2206      	movs	r2, #6
 800dcde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800dce2:	2301      	movs	r3, #1
 800dce4:	e081      	b.n	800ddea <HAL_JPEG_Resume+0x1ce>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	f003 0302 	and.w	r3, r3, #2
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d07b      	beq.n	800dde8 <HAL_JPEG_Resume+0x1cc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcf4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d003      	beq.n	800dd10 <HAL_JPEG_Resume+0xf4>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f001 faf3 	bl	800f2f4 <JPEG_DMA_PollResidualData>
 800dd0e:	e06b      	b.n	800dde8 <HAL_JPEG_Resume+0x1cc>
        /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
          then MDMA out buffer size is 32 bytes
          else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
          then MDMA buffer size is 4 bytes
          */
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd16:	60bb      	str	r3, [r7, #8]

        if (xfrSize == 0UL)
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10b      	bne.n	800dd36 <HAL_JPEG_Resume+0x11a>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd22:	f043 0204 	orr.w	r2, r3, #4
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2206      	movs	r2, #6
 800dd2e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	e059      	b.n	800ddea <HAL_JPEG_Resume+0x1ce>
        }
        /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3e:	68b9      	ldr	r1, [r7, #8]
 800dd40:	fbb3 f1f1 	udiv	r1, r3, r1
 800dd44:	68b8      	ldr	r0, [r7, #8]
 800dd46:	fb00 f101 	mul.w	r1, r0, r1
 800dd4a:	1a5b      	subs	r3, r3, r1
 800dd4c:	1ad2      	subs	r2, r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Start DMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	3344      	adds	r3, #68	; 0x44
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	69db      	ldr	r3, [r3, #28]
 800dd62:	461c      	mov	r4, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd68:	2201      	movs	r2, #1
 800dd6a:	9200      	str	r2, [sp, #0]
 800dd6c:	4622      	mov	r2, r4
 800dd6e:	f002 f929 	bl	800ffc4 <HAL_MDMA_Start_IT>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d037      	beq.n	800dde8 <HAL_JPEG_Resume+0x1cc>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd7c:	f043 0204 	orr.w	r2, r3, #4
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2206      	movs	r2, #6
 800dd88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e02c      	b.n	800ddea <HAL_JPEG_Resume+0x1ce>
      }

    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd94:	f003 030c 	and.w	r3, r3, #12
 800dd98:	2b08      	cmp	r3, #8
 800dd9a:	d125      	bne.n	800dde8 <HAL_JPEG_Resume+0x1cc>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	f003 0301 	and.w	r3, r3, #1
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d009      	beq.n	800ddba <HAL_JPEG_Resume+0x19e>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f043 0306 	orr.w	r3, r3, #6
 800ddb8:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	f003 0302 	and.w	r3, r3, #2
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d009      	beq.n	800ddd8 <HAL_JPEG_Resume+0x1bc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800ddd6:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	430a      	orrs	r2, r1
 800dde6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800dde8:	2300      	movs	r3, #0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd90      	pop	{r4, r7, pc}

0800ddf2 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b085      	sub	sp, #20
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	60f8      	str	r0, [r7, #12]
 800ddfa:	60b9      	str	r1, [r7, #8]
 800ddfc:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	629a      	str	r2, [r3, #40]	; 0x28
}
 800de0a:	bf00      	nop
 800de0c:	3714      	adds	r7, #20
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr

0800de16 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800de16:	b480      	push	{r7}
 800de18:	b085      	sub	sp, #20
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	60f8      	str	r0, [r7, #12]
 800de1e:	60b9      	str	r1, [r7, #8]
 800de20:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800de2e:	bf00      	nop
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b083      	sub	sp, #12
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800de42:	bf00      	nop
 800de44:	370c      	adds	r7, #12
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr

0800de4e <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b082      	sub	sp, #8
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	3b03      	subs	r3, #3
 800de60:	2b01      	cmp	r3, #1
 800de62:	d813      	bhi.n	800de8c <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de68:	f003 030c 	and.w	r3, r3, #12
 800de6c:	2b08      	cmp	r3, #8
 800de6e:	d103      	bne.n	800de78 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 fe17 	bl	800eaa4 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800de76:	e00b      	b.n	800de90 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de7c:	f003 030c 	and.w	r3, r3, #12
 800de80:	2b0c      	cmp	r3, #12
 800de82:	d105      	bne.n	800de90 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f001 f957 	bl	800f138 <JPEG_DMA_ContinueProcess>
      break;
 800de8a:	e001      	b.n	800de90 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800de8c:	bf00      	nop
 800de8e:	e000      	b.n	800de92 <HAL_JPEG_IRQHandler+0x44>
      break;
 800de90:	bf00      	nop
  }
}
 800de92:	bf00      	nop
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800de9a:	b480      	push	{r7}
 800de9c:	b08b      	sub	sp, #44	; 0x2c
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	60f8      	str	r0, [r7, #12]
 800dea2:	60b9      	str	r1, [r7, #8]
 800dea4:	607a      	str	r2, [r7, #4]
 800dea6:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800deac:	2300      	movs	r3, #0
 800deae:	61fb      	str	r3, [r7, #28]
 800deb0:	e020      	b.n	800def4 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	4413      	add	r3, r2
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800debc:	6a3a      	ldr	r2, [r7, #32]
 800debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec0:	4413      	add	r3, r2
 800dec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dec6:	d90f      	bls.n	800dee8 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800dec8:	2301      	movs	r3, #1
 800deca:	e055      	b.n	800df78 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	b2da      	uxtb	r2, r3
 800ded0:	68b9      	ldr	r1, [r7, #8]
 800ded2:	6a3b      	ldr	r3, [r7, #32]
 800ded4:	440b      	add	r3, r1
 800ded6:	3201      	adds	r2, #1
 800ded8:	b2d2      	uxtb	r2, r2
 800deda:	701a      	strb	r2, [r3, #0]
      p++;
 800dedc:	6a3b      	ldr	r3, [r7, #32]
 800dede:	3301      	adds	r3, #1
 800dee0:	623b      	str	r3, [r7, #32]
      i--;
 800dee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee4:	3b01      	subs	r3, #1
 800dee6:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1ee      	bne.n	800decc <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	3301      	adds	r3, #1
 800def2:	61fb      	str	r3, [r7, #28]
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	2b0f      	cmp	r3, #15
 800def8:	d9db      	bls.n	800deb2 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	4413      	add	r3, r2
 800df00:	2200      	movs	r2, #0
 800df02:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	6a3a      	ldr	r2, [r7, #32]
 800df08:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800df0a:	2300      	movs	r3, #0
 800df0c:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	617b      	str	r3, [r7, #20]
  p = 0;
 800df14:	2300      	movs	r3, #0
 800df16:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800df18:	e027      	b.n	800df6a <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800df1a:	6a3b      	ldr	r3, [r7, #32]
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	4413      	add	r3, r2
 800df22:	69ba      	ldr	r2, [r7, #24]
 800df24:	601a      	str	r2, [r3, #0]
      p++;
 800df26:	6a3b      	ldr	r3, [r7, #32]
 800df28:	3301      	adds	r3, #1
 800df2a:	623b      	str	r3, [r7, #32]
      code++;
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	3301      	adds	r3, #1
 800df30:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	6a3b      	ldr	r3, [r7, #32]
 800df36:	4413      	add	r3, r2
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	461a      	mov	r2, r3
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	4293      	cmp	r3, r2
 800df40:	d0eb      	beq.n	800df1a <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	2b1f      	cmp	r3, #31
 800df46:	d901      	bls.n	800df4c <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	e015      	b.n	800df78 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800df4c:	2201      	movs	r2, #1
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	fa02 f303 	lsl.w	r3, r2, r3
 800df54:	69ba      	ldr	r2, [r7, #24]
 800df56:	429a      	cmp	r2, r3
 800df58:	d301      	bcc.n	800df5e <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800df5a:	2301      	movs	r3, #1
 800df5c:	e00c      	b.n	800df78 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	005b      	lsls	r3, r3, #1
 800df62:	61bb      	str	r3, [r7, #24]
    si++;
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	3301      	adds	r3, #1
 800df68:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800df6a:	68ba      	ldr	r2, [r7, #8]
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	4413      	add	r3, r2
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d1dd      	bne.n	800df32 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	372c      	adds	r7, #44	; 0x2c
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800df90:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800df94:	6018      	str	r0, [r3, #0]
 800df96:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800df9a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800df9e:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800dfa0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800dfa4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800dfa8:	6818      	ldr	r0, [r3, #0]
 800dfaa:	f107 0308 	add.w	r3, r7, #8
 800dfae:	f107 020c 	add.w	r2, r7, #12
 800dfb2:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800dfb6:	f7ff ff70 	bl	800de9a <JPEG_Bits_To_SizeCodes>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 800dfc0:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d002      	beq.n	800dfce <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800dfc8:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800dfcc:	e075      	b.n	800e0ba <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 800dfd4:	e067      	b.n	800e0a6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800dfd6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800dfda:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800dfe4:	4413      	add	r3, r2
 800dfe6:	3310      	adds	r3, #16
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 800dfee:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d103      	bne.n	800dffe <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800dff6:	23a0      	movs	r3, #160	; 0xa0
 800dff8:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800dffc:	e021      	b.n	800e042 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800dffe:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e002:	2bf0      	cmp	r3, #240	; 0xf0
 800e004:	d103      	bne.n	800e00e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800e006:	23a1      	movs	r3, #161	; 0xa1
 800e008:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800e00c:	e019      	b.n	800e042 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800e00e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e012:	091b      	lsrs	r3, r3, #4
 800e014:	f003 030f 	and.w	r3, r3, #15
 800e018:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 800e01c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e020:	f003 030f 	and.w	r3, r3, #15
 800e024:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800e028:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800e02c:	4613      	mov	r3, r2
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	4413      	add	r3, r2
 800e032:	005b      	lsls	r3, r3, #1
 800e034:	461a      	mov	r2, r3
 800e036:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e03a:	4413      	add	r3, r2
 800e03c:	3b01      	subs	r3, #1
 800e03e:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800e042:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e046:	2ba1      	cmp	r3, #161	; 0xa1
 800e048:	d901      	bls.n	800e04e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800e04a:	2301      	movs	r3, #1
 800e04c:	e035      	b.n	800e0ba <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800e04e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e052:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e056:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800e05a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e05e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e062:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800e066:	6819      	ldr	r1, [r3, #0]
 800e068:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e06c:	3328      	adds	r3, #40	; 0x28
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	440b      	add	r3, r1
 800e072:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800e074:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e078:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800e07c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800e080:	4413      	add	r3, r2
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	3b01      	subs	r3, #1
 800e086:	b2d9      	uxtb	r1, r3
 800e088:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e08c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e096:	4413      	add	r3, r2
 800e098:	460a      	mov	r2, r1
 800e09a:	701a      	strb	r2, [r3, #0]
      k++;
 800e09c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 800e0a6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e0aa:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d38e      	bcc.n	800dfd6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e0d0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e0d4:	6018      	str	r0, [r3, #0]
 800e0d6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e0da:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e0de:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800e0e0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e0e4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e0e8:	6818      	ldr	r0, [r3, #0]
 800e0ea:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800e0ee:	f107 0208 	add.w	r2, r7, #8
 800e0f2:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 800e0f6:	f7ff fed0 	bl	800de9a <JPEG_Bits_To_SizeCodes>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 800e100:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800e108:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800e10c:	e048      	b.n	800e1a0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800e10e:	2300      	movs	r3, #0
 800e110:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 800e114:	e03d      	b.n	800e192 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800e116:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e11a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800e124:	4413      	add	r3, r2
 800e126:	3310      	adds	r3, #16
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800e12e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e132:	2b0b      	cmp	r3, #11
 800e134:	d901      	bls.n	800e13a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800e136:	2301      	movs	r3, #1
 800e138:	e032      	b.n	800e1a0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800e13a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e13e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800e142:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800e146:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e14a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e14e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e152:	6819      	ldr	r1, [r3, #0]
 800e154:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e158:	3302      	adds	r3, #2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	440b      	add	r3, r1
 800e15e:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800e160:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e164:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800e168:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800e16c:	4413      	add	r3, r2
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	3b01      	subs	r3, #1
 800e172:	b2d9      	uxtb	r1, r3
 800e174:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e178:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e182:	4413      	add	r3, r2
 800e184:	460a      	mov	r2, r1
 800e186:	701a      	strb	r2, [r3, #0]
      k++;
 800e188:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800e18c:	3301      	adds	r3, #1
 800e18e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 800e192:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800e196:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d3bb      	bcc.n	800e116 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b09a      	sub	sp, #104	; 0x68
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	60f8      	str	r0, [r7, #12]
 800e1b2:	60b9      	str	r1, [r7, #8]
 800e1b4:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d106      	bne.n	800e1d2 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800e1cc:	3318      	adds	r3, #24
 800e1ce:	663b      	str	r3, [r7, #96]	; 0x60
 800e1d0:	e00f      	b.n	800e1f2 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d106      	bne.n	800e1ee <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800e1e8:	3318      	adds	r3, #24
 800e1ea:	663b      	str	r3, [r7, #96]	; 0x60
 800e1ec:	e001      	b.n	800e1f2 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e059      	b.n	800e2a6 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d055      	beq.n	800e2a4 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800e1f8:	f107 0314 	add.w	r3, r7, #20
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	68b8      	ldr	r0, [r7, #8]
 800e200:	f7ff ff60 	bl	800e0c4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800e204:	4603      	mov	r3, r0
 800e206:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 800e20a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d002      	beq.n	800e218 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800e212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e216:	e046      	b.n	800e2a6 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800e218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e21a:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800e21c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e21e:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800e222:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e226:	3304      	adds	r3, #4
 800e228:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800e22a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e22c:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800e230:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800e232:	230c      	movs	r3, #12
 800e234:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 800e236:	e032      	b.n	800e29e <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800e238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e23a:	3b01      	subs	r3, #1
 800e23c:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 800e23e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e240:	3b04      	subs	r3, #4
 800e242:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800e244:	f107 0214 	add.w	r2, r7, #20
 800e248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e24a:	4413      	add	r3, r2
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	021b      	lsls	r3, r3, #8
 800e250:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e256:	3302      	adds	r3, #2
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	3368      	adds	r3, #104	; 0x68
 800e25c:	443b      	add	r3, r7
 800e25e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e262:	b2db      	uxtb	r3, r3
 800e264:	4313      	orrs	r3, r2
 800e266:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 800e268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e26a:	3b01      	subs	r3, #1
 800e26c:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800e26e:	f107 0214 	add.w	r2, r7, #20
 800e272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e274:	4413      	add	r3, r2
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	021b      	lsls	r3, r3, #8
 800e27a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e27e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e280:	3302      	adds	r3, #2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	3368      	adds	r3, #104	; 0x68
 800e286:	443b      	add	r3, r7
 800e288:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	4313      	orrs	r3, r2
 800e290:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800e292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e294:	041a      	lsls	r2, r3, #16
 800e296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e298:	431a      	orrs	r2, r3
 800e29a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e29c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800e29e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d8c9      	bhi.n	800e238 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3768      	adds	r7, #104	; 0x68
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e2bc:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e2c0:	6018      	str	r0, [r3, #0]
 800e2c2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e2c6:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e2ca:	6019      	str	r1, [r3, #0]
 800e2cc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e2d0:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800e2d4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800e2d6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e2da:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2e6:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800e2ea:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800e2ee:	6812      	ldr	r2, [r2, #0]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d10c      	bne.n	800e30e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800e2f4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e2f8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e304:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e308:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800e30c:	e01d      	b.n	800e34a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800e30e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e312:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800e31e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800e322:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800e326:	6812      	ldr	r2, [r2, #0]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d10c      	bne.n	800e346 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800e32c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e330:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800e33c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e340:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800e344:	e001      	b.n	800e34a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800e346:	2301      	movs	r3, #1
 800e348:	e0a8      	b.n	800e49c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800e34a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e34e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	f000 80a0 	beq.w	800e49a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800e35a:	f107 0214 	add.w	r2, r7, #20
 800e35e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e362:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e366:	4611      	mov	r1, r2
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	f7ff fe0b 	bl	800df84 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800e36e:	4603      	mov	r3, r0
 800e370:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 800e374:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d002      	beq.n	800e382 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800e37c:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800e380:	e08c      	b.n	800e49c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800e382:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800e386:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800e38a:	2300      	movs	r3, #0
 800e38c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800e390:	e00e      	b.n	800e3b0 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800e392:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e396:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800e39a:	601a      	str	r2, [r3, #0]
      addressDef++;
 800e39c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e3a0:	3304      	adds	r3, #4
 800e3a2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800e3a6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800e3b0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	d9ec      	bls.n	800e392 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800e3b8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e3bc:	4a3a      	ldr	r2, [pc, #232]	; (800e4a8 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800e3be:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e3c0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 800e3ca:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e3ce:	4a37      	ldr	r2, [pc, #220]	; (800e4ac <JPEG_Set_HuffAC_Mem+0x1fc>)
 800e3d0:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e3d2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 800e3dc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e3e0:	4a33      	ldr	r2, [pc, #204]	; (800e4b0 <JPEG_Set_HuffAC_Mem+0x200>)
 800e3e2:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e3e4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e3e8:	3304      	adds	r3, #4
 800e3ea:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 800e3ee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e3f2:	4a30      	ldr	r2, [pc, #192]	; (800e4b4 <JPEG_Set_HuffAC_Mem+0x204>)
 800e3f4:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800e3f6:	23a2      	movs	r3, #162	; 0xa2
 800e3f8:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 800e3fc:	e049      	b.n	800e492 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800e3fe:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e402:	3b01      	subs	r3, #1
 800e404:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 800e408:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800e40c:	3b04      	subs	r3, #4
 800e40e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800e412:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e416:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800e41a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e41e:	4413      	add	r3, r2
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	021b      	lsls	r3, r3, #8
 800e424:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e428:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e42c:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800e430:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e434:	3328      	adds	r3, #40	; 0x28
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	440b      	add	r3, r1
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	4313      	orrs	r3, r2
 800e440:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 800e444:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e448:	3b01      	subs	r3, #1
 800e44a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800e44e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e452:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800e456:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e45a:	4413      	add	r3, r2
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	021b      	lsls	r3, r3, #8
 800e460:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e464:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e468:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800e46c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e470:	3328      	adds	r3, #40	; 0x28
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	440b      	add	r3, r1
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	4313      	orrs	r3, r2
 800e47c:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800e480:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800e484:	041a      	lsls	r2, r3, #16
 800e486:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800e48a:	431a      	orrs	r2, r3
 800e48c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800e490:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800e492:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e496:	2b01      	cmp	r3, #1
 800e498:	d8b1      	bhi.n	800e3fe <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	0fd10fd0 	.word	0x0fd10fd0
 800e4ac:	0fd30fd2 	.word	0x0fd30fd2
 800e4b0:	0fd50fd4 	.word	0x0fd50fd4
 800e4b4:	0fd70fd6 	.word	0x0fd70fd6

0800e4b8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 f84d 	bl	800e560 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	491f      	ldr	r1, [pc, #124]	; (800e550 <JPEG_Set_HuffEnc_Mem+0x98>)
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7ff feec 	bl	800e2b0 <JPEG_Set_HuffAC_Mem>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800e4dc:	7bfb      	ldrb	r3, [r7, #15]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800e4e2:	7bfb      	ldrb	r3, [r7, #15]
 800e4e4:	e030      	b.n	800e548 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	4918      	ldr	r1, [pc, #96]	; (800e554 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7ff fedc 	bl	800e2b0 <JPEG_Set_HuffAC_Mem>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800e4fc:	7bfb      	ldrb	r3, [r7, #15]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800e502:	7bfb      	ldrb	r3, [r7, #15]
 800e504:	e020      	b.n	800e548 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800e50e:	461a      	mov	r2, r3
 800e510:	4911      	ldr	r1, [pc, #68]	; (800e558 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f7ff fe49 	bl	800e1aa <JPEG_Set_HuffDC_Mem>
 800e518:	4603      	mov	r3, r0
 800e51a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800e51c:	7bfb      	ldrb	r3, [r7, #15]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d001      	beq.n	800e526 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800e522:	7bfb      	ldrb	r3, [r7, #15]
 800e524:	e010      	b.n	800e548 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800e52e:	461a      	mov	r2, r3
 800e530:	490a      	ldr	r1, [pc, #40]	; (800e55c <JPEG_Set_HuffEnc_Mem+0xa4>)
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f7ff fe39 	bl	800e1aa <JPEG_Set_HuffDC_Mem>
 800e538:	4603      	mov	r3, r0
 800e53a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800e53c:	7bfb      	ldrb	r3, [r7, #15]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d001      	beq.n	800e546 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800e542:	7bfb      	ldrb	r3, [r7, #15]
 800e544:	e000      	b.n	800e548 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800e546:	2300      	movs	r3, #0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	0802b638 	.word	0x0802b638
 800e554:	0802b6ec 	.word	0x0802b6ec
 800e558:	0802b600 	.word	0x0802b600
 800e55c:	0802b61c 	.word	0x0802b61c

0800e560 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800e560:	b480      	push	{r7}
 800e562:	b08b      	sub	sp, #44	; 0x2c
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800e568:	4b80      	ldr	r3, [pc, #512]	; (800e76c <JPEG_Set_Huff_DHTMem+0x20c>)
 800e56a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800e56c:	4b80      	ldr	r3, [pc, #512]	; (800e770 <JPEG_Set_Huff_DHTMem+0x210>)
 800e56e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800e570:	4b80      	ldr	r3, [pc, #512]	; (800e774 <JPEG_Set_Huff_DHTMem+0x214>)
 800e572:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800e574:	4b80      	ldr	r3, [pc, #512]	; (800e778 <JPEG_Set_Huff_DHTMem+0x218>)
 800e576:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e580:	330c      	adds	r3, #12
 800e582:	623b      	str	r3, [r7, #32]
  index = 16;
 800e584:	2310      	movs	r3, #16
 800e586:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e588:	e01d      	b.n	800e5c6 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58c:	3b01      	subs	r3, #1
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	5cd3      	ldrb	r3, [r2, r3]
 800e592:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	3b02      	subs	r3, #2
 800e598:	6979      	ldr	r1, [r7, #20]
 800e59a:	5ccb      	ldrb	r3, [r1, r3]
 800e59c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e59e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	3b03      	subs	r3, #3
 800e5a4:	6979      	ldr	r1, [r7, #20]
 800e5a6:	5ccb      	ldrb	r3, [r1, r3]
 800e5a8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800e5aa:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800e5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ae:	3a04      	subs	r2, #4
 800e5b0:	6979      	ldr	r1, [r7, #20]
 800e5b2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800e5b4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e5b6:	6a3b      	ldr	r3, [r7, #32]
 800e5b8:	601a      	str	r2, [r3, #0]
    address--;
 800e5ba:	6a3b      	ldr	r3, [r7, #32]
 800e5bc:	3b04      	subs	r3, #4
 800e5be:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	3b04      	subs	r3, #4
 800e5c4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c8:	2b03      	cmp	r3, #3
 800e5ca:	d8de      	bhi.n	800e58a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e5d4:	3318      	adds	r3, #24
 800e5d6:	623b      	str	r3, [r7, #32]
  index = 12;
 800e5d8:	230c      	movs	r3, #12
 800e5da:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e5dc:	e021      	b.n	800e622 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	697a      	ldr	r2, [r7, #20]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	7c1b      	ldrb	r3, [r3, #16]
 800e5e8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ec:	3b02      	subs	r3, #2
 800e5ee:	6979      	ldr	r1, [r7, #20]
 800e5f0:	440b      	add	r3, r1
 800e5f2:	7c1b      	ldrb	r3, [r3, #16]
 800e5f4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e5f6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800e5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fa:	3b03      	subs	r3, #3
 800e5fc:	6979      	ldr	r1, [r7, #20]
 800e5fe:	440b      	add	r3, r1
 800e600:	7c1b      	ldrb	r3, [r3, #16]
 800e602:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800e604:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800e606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e608:	3a04      	subs	r2, #4
 800e60a:	6979      	ldr	r1, [r7, #20]
 800e60c:	440a      	add	r2, r1
 800e60e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800e610:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e612:	6a3b      	ldr	r3, [r7, #32]
 800e614:	601a      	str	r2, [r3, #0]
    address--;
 800e616:	6a3b      	ldr	r3, [r7, #32]
 800e618:	3b04      	subs	r3, #4
 800e61a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61e:	3b04      	subs	r3, #4
 800e620:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e624:	2b03      	cmp	r3, #3
 800e626:	d8da      	bhi.n	800e5de <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e630:	3328      	adds	r3, #40	; 0x28
 800e632:	623b      	str	r3, [r7, #32]
  index = 16;
 800e634:	2310      	movs	r3, #16
 800e636:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e638:	e01d      	b.n	800e676 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63c:	3b01      	subs	r3, #1
 800e63e:	69fa      	ldr	r2, [r7, #28]
 800e640:	5cd3      	ldrb	r3, [r2, r3]
 800e642:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	3b02      	subs	r3, #2
 800e648:	69f9      	ldr	r1, [r7, #28]
 800e64a:	5ccb      	ldrb	r3, [r1, r3]
 800e64c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e64e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800e650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e652:	3b03      	subs	r3, #3
 800e654:	69f9      	ldr	r1, [r7, #28]
 800e656:	5ccb      	ldrb	r3, [r1, r3]
 800e658:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800e65a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800e65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e65e:	3a04      	subs	r2, #4
 800e660:	69f9      	ldr	r1, [r7, #28]
 800e662:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800e664:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e666:	6a3b      	ldr	r3, [r7, #32]
 800e668:	601a      	str	r2, [r3, #0]
    address--;
 800e66a:	6a3b      	ldr	r3, [r7, #32]
 800e66c:	3b04      	subs	r3, #4
 800e66e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	3b04      	subs	r3, #4
 800e674:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e678:	2b03      	cmp	r3, #3
 800e67a:	d8de      	bhi.n	800e63a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e684:	33cc      	adds	r3, #204	; 0xcc
 800e686:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800e688:	6a3b      	ldr	r3, [r7, #32]
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	4b3b      	ldr	r3, [pc, #236]	; (800e77c <JPEG_Set_Huff_DHTMem+0x21c>)
 800e68e:	4013      	ands	r3, r2
 800e690:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e698:	021a      	lsls	r2, r3, #8
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	4313      	orrs	r3, r2
 800e69e:	69fa      	ldr	r2, [r7, #28]
 800e6a0:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800e6ae:	6a3b      	ldr	r3, [r7, #32]
 800e6b0:	3b04      	subs	r3, #4
 800e6b2:	623b      	str	r3, [r7, #32]
  index = 160;
 800e6b4:	23a0      	movs	r3, #160	; 0xa0
 800e6b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e6b8:	e021      	b.n	800e6fe <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	69fa      	ldr	r2, [r7, #28]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	7c1b      	ldrb	r3, [r3, #16]
 800e6c4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c8:	3b02      	subs	r3, #2
 800e6ca:	69f9      	ldr	r1, [r7, #28]
 800e6cc:	440b      	add	r3, r1
 800e6ce:	7c1b      	ldrb	r3, [r3, #16]
 800e6d0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e6d2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d6:	3b03      	subs	r3, #3
 800e6d8:	69f9      	ldr	r1, [r7, #28]
 800e6da:	440b      	add	r3, r1
 800e6dc:	7c1b      	ldrb	r3, [r3, #16]
 800e6de:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800e6e0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800e6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6e4:	3a04      	subs	r2, #4
 800e6e6:	69f9      	ldr	r1, [r7, #28]
 800e6e8:	440a      	add	r2, r1
 800e6ea:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800e6ec:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e6ee:	6a3b      	ldr	r3, [r7, #32]
 800e6f0:	601a      	str	r2, [r3, #0]
    address--;
 800e6f2:	6a3b      	ldr	r3, [r7, #32]
 800e6f4:	3b04      	subs	r3, #4
 800e6f6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	3b04      	subs	r3, #4
 800e6fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	2b03      	cmp	r3, #3
 800e702:	d8da      	bhi.n	800e6ba <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e70c:	33cc      	adds	r3, #204	; 0xcc
 800e70e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800e710:	6a3b      	ldr	r3, [r7, #32]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	b29b      	uxth	r3, r3
 800e716:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	785b      	ldrb	r3, [r3, #1]
 800e71c:	061a      	lsls	r2, r3, #24
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	431a      	orrs	r2, r3
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	041b      	lsls	r3, r3, #16
 800e728:	4313      	orrs	r3, r2
 800e72a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e72c:	6a3b      	ldr	r3, [r7, #32]
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e73a:	33dc      	adds	r3, #220	; 0xdc
 800e73c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800e73e:	6a3b      	ldr	r3, [r7, #32]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	4b0e      	ldr	r3, [pc, #56]	; (800e77c <JPEG_Set_Huff_DHTMem+0x21c>)
 800e744:	4013      	ands	r3, r2
 800e746:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	7bdb      	ldrb	r3, [r3, #15]
 800e74c:	021a      	lsls	r2, r3, #8
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	4313      	orrs	r3, r2
 800e752:	693a      	ldr	r2, [r7, #16]
 800e754:	7b92      	ldrb	r2, [r2, #14]
 800e756:	4313      	orrs	r3, r2
 800e758:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e75a:	6a3b      	ldr	r3, [r7, #32]
 800e75c:	68fa      	ldr	r2, [r7, #12]
 800e75e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800e760:	6a3b      	ldr	r3, [r7, #32]
 800e762:	3b04      	subs	r3, #4
 800e764:	623b      	str	r3, [r7, #32]
  index = 12;
 800e766:	230c      	movs	r3, #12
 800e768:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e76a:	e027      	b.n	800e7bc <JPEG_Set_Huff_DHTMem+0x25c>
 800e76c:	0802b638 	.word	0x0802b638
 800e770:	0802b6ec 	.word	0x0802b6ec
 800e774:	0802b600 	.word	0x0802b600
 800e778:	0802b61c 	.word	0x0802b61c
 800e77c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e782:	3301      	adds	r3, #1
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	5cd3      	ldrb	r3, [r2, r3]
 800e788:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800e78a:	6939      	ldr	r1, [r7, #16]
 800e78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78e:	440b      	add	r3, r1
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e794:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e798:	3b01      	subs	r3, #1
 800e79a:	6939      	ldr	r1, [r7, #16]
 800e79c:	5ccb      	ldrb	r3, [r1, r3]
 800e79e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800e7a0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800e7a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7a4:	3a02      	subs	r2, #2
 800e7a6:	6939      	ldr	r1, [r7, #16]
 800e7a8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800e7aa:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e7ac:	6a3b      	ldr	r3, [r7, #32]
 800e7ae:	601a      	str	r2, [r3, #0]
    address--;
 800e7b0:	6a3b      	ldr	r3, [r7, #32]
 800e7b2:	3b04      	subs	r3, #4
 800e7b4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b8:	3b04      	subs	r3, #4
 800e7ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	d8de      	bhi.n	800e780 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e7ca:	33dc      	adds	r3, #220	; 0xdc
 800e7cc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800e7ce:	6a3b      	ldr	r3, [r7, #32]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	7c5b      	ldrb	r3, [r3, #17]
 800e7da:	061a      	lsls	r2, r3, #24
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	431a      	orrs	r2, r3
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	7c1b      	ldrb	r3, [r3, #16]
 800e7e4:	041b      	lsls	r3, r3, #16
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800e7ea:	6a3b      	ldr	r3, [r7, #32]
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e7f8:	33e8      	adds	r3, #232	; 0xe8
 800e7fa:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800e7fc:	6a3b      	ldr	r3, [r7, #32]
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	4b6d      	ldr	r3, [pc, #436]	; (800e9b8 <JPEG_Set_Huff_DHTMem+0x458>)
 800e802:	4013      	ands	r3, r2
 800e804:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	7edb      	ldrb	r3, [r3, #27]
 800e80a:	021a      	lsls	r2, r3, #8
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	4313      	orrs	r3, r2
 800e810:	693a      	ldr	r2, [r7, #16]
 800e812:	7e92      	ldrb	r2, [r2, #26]
 800e814:	4313      	orrs	r3, r2
 800e816:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e818:	6a3b      	ldr	r3, [r7, #32]
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	3b04      	subs	r3, #4
 800e822:	623b      	str	r3, [r7, #32]
  index = 8;
 800e824:	2308      	movs	r3, #8
 800e826:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e828:	e021      	b.n	800e86e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82c:	3301      	adds	r3, #1
 800e82e:	693a      	ldr	r2, [r7, #16]
 800e830:	4413      	add	r3, r2
 800e832:	7c1b      	ldrb	r3, [r3, #16]
 800e834:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800e836:	6939      	ldr	r1, [r7, #16]
 800e838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83a:	440b      	add	r3, r1
 800e83c:	3310      	adds	r3, #16
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e842:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800e844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e846:	3b01      	subs	r3, #1
 800e848:	6939      	ldr	r1, [r7, #16]
 800e84a:	440b      	add	r3, r1
 800e84c:	7c1b      	ldrb	r3, [r3, #16]
 800e84e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800e850:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800e852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e854:	3a02      	subs	r2, #2
 800e856:	6939      	ldr	r1, [r7, #16]
 800e858:	440a      	add	r2, r1
 800e85a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800e85c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	601a      	str	r2, [r3, #0]
    address--;
 800e862:	6a3b      	ldr	r3, [r7, #32]
 800e864:	3b04      	subs	r3, #4
 800e866:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	3b04      	subs	r3, #4
 800e86c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	2b03      	cmp	r3, #3
 800e872:	d8da      	bhi.n	800e82a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e87c:	33e8      	adds	r3, #232	; 0xe8
 800e87e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800e880:	6a3b      	ldr	r3, [r7, #32]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	b29b      	uxth	r3, r3
 800e886:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	785b      	ldrb	r3, [r3, #1]
 800e88c:	061a      	lsls	r2, r3, #24
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	431a      	orrs	r2, r3
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	041b      	lsls	r3, r3, #16
 800e898:	4313      	orrs	r3, r2
 800e89a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e8aa:	33f8      	adds	r3, #248	; 0xf8
 800e8ac:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800e8ae:	6a3b      	ldr	r3, [r7, #32]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	4b41      	ldr	r3, [pc, #260]	; (800e9b8 <JPEG_Set_Huff_DHTMem+0x458>)
 800e8b4:	4013      	ands	r3, r2
 800e8b6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	7bdb      	ldrb	r3, [r3, #15]
 800e8bc:	021a      	lsls	r2, r3, #8
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	69ba      	ldr	r2, [r7, #24]
 800e8c4:	7b92      	ldrb	r2, [r2, #14]
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e8ca:	6a3b      	ldr	r3, [r7, #32]
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	3b04      	subs	r3, #4
 800e8d4:	623b      	str	r3, [r7, #32]
  index = 12;
 800e8d6:	230c      	movs	r3, #12
 800e8d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e8da:	e01d      	b.n	800e918 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8de:	3301      	adds	r3, #1
 800e8e0:	69ba      	ldr	r2, [r7, #24]
 800e8e2:	5cd3      	ldrb	r3, [r2, r3]
 800e8e4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800e8e6:	69b9      	ldr	r1, [r7, #24]
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ea:	440b      	add	r3, r1
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e8f0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800e8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	69b9      	ldr	r1, [r7, #24]
 800e8f8:	5ccb      	ldrb	r3, [r1, r3]
 800e8fa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800e8fc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800e8fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e900:	3a02      	subs	r2, #2
 800e902:	69b9      	ldr	r1, [r7, #24]
 800e904:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800e906:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	601a      	str	r2, [r3, #0]
    address--;
 800e90c:	6a3b      	ldr	r3, [r7, #32]
 800e90e:	3b04      	subs	r3, #4
 800e910:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e914:	3b04      	subs	r3, #4
 800e916:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91a:	2b03      	cmp	r3, #3
 800e91c:	d8de      	bhi.n	800e8dc <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e926:	33f8      	adds	r3, #248	; 0xf8
 800e928:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800e92a:	6a3b      	ldr	r3, [r7, #32]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	b29b      	uxth	r3, r3
 800e930:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	7c5b      	ldrb	r3, [r3, #17]
 800e936:	061a      	lsls	r2, r3, #24
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	431a      	orrs	r2, r3
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	7c1b      	ldrb	r3, [r3, #16]
 800e940:	041b      	lsls	r3, r3, #16
 800e942:	4313      	orrs	r3, r2
 800e944:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800e946:	6a3b      	ldr	r3, [r7, #32]
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e954:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800e958:	623b      	str	r3, [r7, #32]
  index = 160;
 800e95a:	23a0      	movs	r3, #160	; 0xa0
 800e95c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e95e:	e021      	b.n	800e9a4 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e962:	3301      	adds	r3, #1
 800e964:	69ba      	ldr	r2, [r7, #24]
 800e966:	4413      	add	r3, r2
 800e968:	7c1b      	ldrb	r3, [r3, #16]
 800e96a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800e96c:	69b9      	ldr	r1, [r7, #24]
 800e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e970:	440b      	add	r3, r1
 800e972:	3310      	adds	r3, #16
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e978:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800e97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97c:	3b01      	subs	r3, #1
 800e97e:	69b9      	ldr	r1, [r7, #24]
 800e980:	440b      	add	r3, r1
 800e982:	7c1b      	ldrb	r3, [r3, #16]
 800e984:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800e986:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800e988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e98a:	3a02      	subs	r2, #2
 800e98c:	69b9      	ldr	r1, [r7, #24]
 800e98e:	440a      	add	r2, r1
 800e990:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800e992:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	601a      	str	r2, [r3, #0]
    address--;
 800e998:	6a3b      	ldr	r3, [r7, #32]
 800e99a:	3b04      	subs	r3, #4
 800e99c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a0:	3b04      	subs	r3, #4
 800e9a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	2b03      	cmp	r3, #3
 800e9a8:	d8da      	bhi.n	800e960 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800e9aa:	bf00      	nop
 800e9ac:	bf00      	nop
 800e9ae:	372c      	adds	r7, #44	; 0x2c
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr
 800e9b8:	ffff0000 	.word	0xffff0000

0800e9bc <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9d4:	f003 0303 	and.w	r3, r3, #3
 800e9d8:	2b02      	cmp	r3, #2
 800e9da:	d108      	bne.n	800e9ee <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	685a      	ldr	r2, [r3, #4]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f042 0208 	orr.w	r2, r2, #8
 800e9ea:	605a      	str	r2, [r3, #4]
 800e9ec:	e007      	b.n	800e9fe <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	685a      	ldr	r2, [r3, #4]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f022 0208 	bic.w	r2, r2, #8
 800e9fc:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f022 0201 	bic.w	r2, r2, #1
 800ea0c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800ea1c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea2c:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ea3c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ea4c:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f042 0201 	orr.w	r2, r2, #1
 800ea5c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea62:	f003 030c 	and.w	r3, r3, #12
 800ea66:	2b08      	cmp	r3, #8
 800ea68:	d108      	bne.n	800ea7c <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 800ea78:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800ea7a:	e00d      	b.n	800ea98 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea80:	f003 030c 	and.w	r3, r3, #12
 800ea84:	2b0c      	cmp	r3, #12
 800ea86:	d107      	bne.n	800ea98 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ea96:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ea98:	bf00      	nop
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eab0:	f003 0303 	and.w	r3, r3, #3
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	d125      	bne.n	800eb04 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d01e      	beq.n	800eb04 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	3304      	adds	r3, #4
 800eaca:	4619      	mov	r1, r3
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7fe ff55 	bl	800d97c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	3304      	adds	r3, #4
 800eadc:	4619      	mov	r1, r3
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f7f3 f8a2 	bl	8001c28 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaf2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d116      	bne.n	800eb3e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb16:	f003 0302 	and.w	r3, r3, #2
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d004      	beq.n	800eb28 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800eb1e:	2108      	movs	r1, #8
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 f988 	bl	800ee36 <JPEG_ReadInputData>
 800eb26:	e00a      	b.n	800eb3e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb2e:	f003 0304 	and.w	r3, r3, #4
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d003      	beq.n	800eb3e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800eb36:	2101      	movs	r1, #1
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f000 f97c 	bl	800ee36 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d116      	bne.n	800eb78 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb50:	f003 0308 	and.w	r3, r3, #8
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d004      	beq.n	800eb62 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800eb58:	2108      	movs	r1, #8
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f864 	bl	800ec28 <JPEG_StoreOutputData>
 800eb60:	e00a      	b.n	800eb78 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb68:	f003 0310 	and.w	r3, r3, #16
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d003      	beq.n	800eb78 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800eb70:	2101      	movs	r1, #1
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 f858 	bl	800ec28 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb82:	2b20      	cmp	r3, #32
 800eb84:	d14b      	bne.n	800ec1e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f022 0201 	bic.w	r2, r2, #1
 800eb94:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb9a:	f003 030c 	and.w	r3, r3, #12
 800eb9e:	2b08      	cmp	r3, #8
 800eba0:	d107      	bne.n	800ebb2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800ebb0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ebc0:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d00a      	beq.n	800ebe0 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	69d9      	ldr	r1, [r3, #28]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7f3 f8f7 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebe4:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebea:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f003 0303 	and.w	r3, r3, #3
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d103      	bne.n	800ec14 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7f3 f943 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
 800ec12:	e002      	b.n	800ec1a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7ff f910 	bl	800de3a <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e000      	b.n	800ec20 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	009b      	lsls	r3, r3, #2
 800ec3e:	440b      	add	r3, r1
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d34b      	bcc.n	800ecdc <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800ec44:	2300      	movs	r3, #0
 800ec46:	617b      	str	r3, [r7, #20]
 800ec48:	e031      	b.n	800ecae <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec50:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	69da      	ldr	r2, [r3, #28]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5a:	4413      	add	r3, r2
 800ec5c:	68ba      	ldr	r2, [r7, #8]
 800ec5e:	b2d2      	uxtb	r2, r2
 800ec60:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	0a19      	lsrs	r1, r3, #8
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	69da      	ldr	r2, [r3, #28]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6e:	3301      	adds	r3, #1
 800ec70:	4413      	add	r3, r2
 800ec72:	b2ca      	uxtb	r2, r1
 800ec74:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	0c19      	lsrs	r1, r3, #16
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	69da      	ldr	r2, [r3, #28]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec82:	3302      	adds	r3, #2
 800ec84:	4413      	add	r3, r2
 800ec86:	b2ca      	uxtb	r2, r1
 800ec88:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	0e19      	lsrs	r1, r3, #24
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	69da      	ldr	r2, [r3, #28]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec96:	3303      	adds	r3, #3
 800ec98:	4413      	add	r3, r2
 800ec9a:	b2ca      	uxtb	r2, r1
 800ec9c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca2:	1d1a      	adds	r2, r3, #4
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	617b      	str	r3, [r7, #20]
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d3c9      	bcc.n	800ec4a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	f040 80b5 	bne.w	800ee2e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	69d9      	ldr	r1, [r3, #28]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eccc:	461a      	mov	r2, r3
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7f3 f87a 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800ecda:	e0a8      	b.n	800ee2e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece4:	429a      	cmp	r2, r3
 800ece6:	f240 80a2 	bls.w	800ee2e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	089b      	lsrs	r3, r3, #2
 800ecf6:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	617b      	str	r3, [r7, #20]
 800ecfc:	e031      	b.n	800ed62 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed04:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	69da      	ldr	r2, [r3, #28]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed0e:	4413      	add	r3, r2
 800ed10:	68ba      	ldr	r2, [r7, #8]
 800ed12:	b2d2      	uxtb	r2, r2
 800ed14:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	0a19      	lsrs	r1, r3, #8
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	69da      	ldr	r2, [r3, #28]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed22:	3301      	adds	r3, #1
 800ed24:	4413      	add	r3, r2
 800ed26:	b2ca      	uxtb	r2, r1
 800ed28:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	0c19      	lsrs	r1, r3, #16
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	69da      	ldr	r2, [r3, #28]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed36:	3302      	adds	r3, #2
 800ed38:	4413      	add	r3, r2
 800ed3a:	b2ca      	uxtb	r2, r1
 800ed3c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	0e19      	lsrs	r1, r3, #24
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	69da      	ldr	r2, [r3, #28]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed4a:	3303      	adds	r3, #3
 800ed4c:	4413      	add	r3, r2
 800ed4e:	b2ca      	uxtb	r2, r1
 800ed50:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed56:	1d1a      	adds	r2, r3, #4
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	617b      	str	r3, [r7, #20]
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d3c9      	bcc.n	800ecfe <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d10b      	bne.n	800ed8e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	69d9      	ldr	r1, [r3, #28]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed7e:	461a      	mov	r2, r3
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7f3 f821 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ed8c:	e04f      	b.n	800ee2e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed96:	1ad3      	subs	r3, r2, r3
 800ed98:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eda0:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800eda2:	2300      	movs	r3, #0
 800eda4:	617b      	str	r3, [r7, #20]
 800eda6:	e015      	b.n	800edd4 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	f003 0303 	and.w	r3, r3, #3
 800edae:	00db      	lsls	r3, r3, #3
 800edb0:	68ba      	ldr	r2, [r7, #8]
 800edb2:	fa22 f103 	lsr.w	r1, r2, r3
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	69da      	ldr	r2, [r3, #28]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edbe:	4413      	add	r3, r2
 800edc0:	b2ca      	uxtb	r2, r1
 800edc2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc8:	1c5a      	adds	r2, r3, #1
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	3301      	adds	r3, #1
 800edd2:	617b      	str	r3, [r7, #20]
 800edd4:	697a      	ldr	r2, [r7, #20]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d3e5      	bcc.n	800eda8 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	69d9      	ldr	r1, [r3, #28]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ede4:	461a      	mov	r2, r3
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f7f2 ffee 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	625a      	str	r2, [r3, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f1c3 0304 	rsb	r3, r3, #4
 800edf8:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	617b      	str	r3, [r7, #20]
 800edfe:	e013      	b.n	800ee28 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	00db      	lsls	r3, r3, #3
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	fa22 f103 	lsr.w	r1, r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	69da      	ldr	r2, [r3, #28]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee12:	4413      	add	r3, r2
 800ee14:	b2ca      	uxtb	r2, r1
 800ee16:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee1c:	1c5a      	adds	r2, r3, #1
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	3301      	adds	r3, #1
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	2b03      	cmp	r3, #3
 800ee2c:	d9e8      	bls.n	800ee00 <JPEG_StoreOutputData+0x1d8>
}
 800ee2e:	bf00      	nop
 800ee30:	3718      	adds	r7, #24
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b088      	sub	sp, #32
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
 800ee3e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800ee40:	2300      	movs	r3, #0
 800ee42:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <JPEG_ReadInputData+0x1c>
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d104      	bne.n	800ee5c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800ee52:	2101      	movs	r1, #1
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f7fe fe89 	bl	800db6c <HAL_JPEG_Pause>
 800ee5a:	e028      	b.n	800eeae <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6a1b      	ldr	r3, [r3, #32]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d906      	bls.n	800ee76 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6a1b      	ldr	r3, [r3, #32]
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	61fb      	str	r3, [r7, #28]
 800ee74:	e01b      	b.n	800eeae <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a1b      	ldr	r3, [r3, #32]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d115      	bne.n	800eeae <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6a1b      	ldr	r3, [r3, #32]
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7f2 ff69 	bl	8001d60 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee92:	2b04      	cmp	r3, #4
 800ee94:	d905      	bls.n	800eea2 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee9a:	f023 0203 	bic.w	r2, r3, #3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeac:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	f040 809f 	bne.w	800effa <JPEG_ReadInputData+0x1c4>
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	f000 809b 	beq.w	800effa <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	089b      	lsrs	r3, r3, #2
 800eec8:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800eeca:	693a      	ldr	r2, [r7, #16]
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d335      	bcc.n	800ef3e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800eed2:	2300      	movs	r3, #0
 800eed4:	61bb      	str	r3, [r7, #24]
 800eed6:	e02d      	b.n	800ef34 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6a1b      	ldr	r3, [r3, #32]
 800eedc:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	699a      	ldr	r2, [r3, #24]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	4413      	add	r3, r2
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	699a      	ldr	r2, [r3, #24]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	3301      	adds	r3, #1
 800eef2:	4413      	add	r3, r2
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800eef8:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6999      	ldr	r1, [r3, #24]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	3302      	adds	r3, #2
 800ef04:	440b      	add	r3, r1
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ef0a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	699a      	ldr	r2, [r3, #24]
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	3303      	adds	r3, #3
 800ef16:	4413      	add	r3, r2
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ef20:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ef22:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6a1b      	ldr	r3, [r3, #32]
 800ef28:	1d1a      	adds	r2, r3, #4
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	3301      	adds	r3, #1
 800ef32:	61bb      	str	r3, [r7, #24]
 800ef34:	69ba      	ldr	r2, [r7, #24]
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d3cd      	bcc.n	800eed8 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800ef3c:	e05d      	b.n	800effa <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d035      	beq.n	800efb0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800ef44:	2300      	movs	r3, #0
 800ef46:	61bb      	str	r3, [r7, #24]
 800ef48:	e02d      	b.n	800efa6 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6a1b      	ldr	r3, [r3, #32]
 800ef4e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	699a      	ldr	r2, [r3, #24]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	4413      	add	r3, r2
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	699a      	ldr	r2, [r3, #24]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	3301      	adds	r3, #1
 800ef64:	4413      	add	r3, r2
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ef6a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6999      	ldr	r1, [r3, #24]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	3302      	adds	r3, #2
 800ef76:	440b      	add	r3, r1
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ef7c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	699a      	ldr	r2, [r3, #24]
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	3303      	adds	r3, #3
 800ef88:	4413      	add	r3, r2
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ef92:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ef94:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a1b      	ldr	r3, [r3, #32]
 800ef9a:	1d1a      	adds	r2, r3, #4
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	3301      	adds	r3, #1
 800efa4:	61bb      	str	r3, [r7, #24]
 800efa6:	69ba      	ldr	r2, [r7, #24]
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d3cd      	bcc.n	800ef4a <JPEG_ReadInputData+0x114>
}
 800efae:	e024      	b.n	800effa <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800efb0:	2300      	movs	r3, #0
 800efb2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800efb4:	2300      	movs	r3, #0
 800efb6:	61bb      	str	r3, [r7, #24]
 800efb8:	e017      	b.n	800efea <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	699a      	ldr	r2, [r3, #24]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a1b      	ldr	r3, [r3, #32]
 800efc2:	4413      	add	r3, r2
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	461a      	mov	r2, r3
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	f003 0303 	and.w	r3, r3, #3
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	fa02 f303 	lsl.w	r3, r2, r3
 800efd4:	697a      	ldr	r2, [r7, #20]
 800efd6:	4313      	orrs	r3, r2
 800efd8:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a1b      	ldr	r3, [r3, #32]
 800efde:	1c5a      	adds	r2, r3, #1
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	3301      	adds	r3, #1
 800efe8:	61bb      	str	r3, [r7, #24]
 800efea:	69ba      	ldr	r2, [r7, #24]
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d3e3      	bcc.n	800efba <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	697a      	ldr	r2, [r7, #20]
 800eff8:	641a      	str	r2, [r3, #64]	; 0x40
}
 800effa:	bf00      	nop
 800effc:	3720      	adds	r7, #32
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
	...

0800f004 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800f004:	b590      	push	{r4, r7, lr}
 800f006:	b087      	sub	sp, #28
 800f008:	af02      	add	r7, sp, #8
 800f00a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f012:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f01a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	429a      	cmp	r2, r3
 800f024:	d804      	bhi.n	800f030 <JPEG_DMA_StartProcess+0x2c>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d901      	bls.n	800f034 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800f030:	2301      	movs	r3, #1
 800f032:	e074      	b.n	800f11e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f038:	4a3b      	ldr	r2, [pc, #236]	; (800f128 <JPEG_DMA_StartProcess+0x124>)
 800f03a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f040:	4a3a      	ldr	r2, [pc, #232]	; (800f12c <JPEG_DMA_StartProcess+0x128>)
 800f042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f048:	4a39      	ldr	r2, [pc, #228]	; (800f130 <JPEG_DMA_StartProcess+0x12c>)
 800f04a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f050:	4a36      	ldr	r2, [pc, #216]	; (800f12c <JPEG_DMA_StartProcess+0x128>)
 800f052:	655a      	str	r2, [r3, #84]	; 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f058:	4a36      	ldr	r2, [pc, #216]	; (800f134 <JPEG_DMA_StartProcess+0x130>)
 800f05a:	659a      	str	r2, [r3, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d002      	beq.n	800f068 <JPEG_DMA_StartProcess+0x64>
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d107      	bne.n	800f078 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f06c:	f043 0204 	orr.w	r2, r3, #4
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800f074:	2301      	movs	r3, #1
 800f076:	e052      	b.n	800f11e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f080:	68f9      	ldr	r1, [r7, #12]
 800f082:	fbb3 f1f1 	udiv	r1, r3, r1
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	fb00 f101 	mul.w	r1, r0, r1
 800f08c:	1a5b      	subs	r3, r3, r1
 800f08e:	1ad2      	subs	r2, r2, r3
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	629a      	str	r2, [r3, #40]	; 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f09c:	68b9      	ldr	r1, [r7, #8]
 800f09e:	fbb3 f1f1 	udiv	r1, r3, r1
 800f0a2:	68b8      	ldr	r0, [r7, #8]
 800f0a4:	fb00 f101 	mul.w	r1, r0, r1
 800f0a8:	1a5b      	subs	r3, r3, r1
 800f0aa:	1ad2      	subs	r2, r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	62da      	str	r2, [r3, #44]	; 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	3344      	adds	r3, #68	; 0x44
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	69db      	ldr	r3, [r3, #28]
 800f0c0:	461c      	mov	r4, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	9200      	str	r2, [sp, #0]
 800f0ca:	4622      	mov	r2, r4
 800f0cc:	f000 ff7a 	bl	800ffc4 <HAL_MDMA_Start_IT>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d007      	beq.n	800f0e6 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0da:	f043 0204 	orr.w	r2, r3, #4
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e01b      	b.n	800f11e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	699b      	ldr	r3, [r3, #24]
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	3340      	adds	r3, #64	; 0x40
 800f0f6:	461c      	mov	r4, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	9200      	str	r2, [sp, #0]
 800f100:	4622      	mov	r2, r4
 800f102:	f000 ff5f 	bl	800ffc4 <HAL_MDMA_Start_IT>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d007      	beq.n	800f11c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f110:	f043 0204 	orr.w	r2, r3, #4
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800f118:	2301      	movs	r3, #1
 800f11a:	e000      	b.n	800f11e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	bd90      	pop	{r4, r7, pc}
 800f126:	bf00      	nop
 800f128:	0800f437 	.word	0x0800f437
 800f12c:	0800f625 	.word	0x0800f625
 800f130:	0800f563 	.word	0x0800f563
 800f134:	0800f675 	.word	0x0800f675

0800f138 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f144:	f003 0303 	and.w	r3, r3, #3
 800f148:	2b02      	cmp	r3, #2
 800f14a:	d125      	bne.n	800f198 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f156:	2b00      	cmp	r3, #0
 800f158:	d01e      	beq.n	800f198 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	3304      	adds	r3, #4
 800f15e:	4619      	mov	r1, r3
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7fe fc0b 	bl	800d97c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2200      	movs	r2, #0
 800f16a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	3304      	adds	r3, #4
 800f170:	4619      	mov	r1, r3
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7f2 fd58 	bl	8001c28 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f186:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f196:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f19e:	f003 0320 	and.w	r3, r3, #32
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d039      	beq.n	800f21a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1aa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	655a      	str	r2, [r3, #84]	; 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f022 0201 	bic.w	r2, r2, #1
 800f1c0:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f1d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800f1e0:	639a      	str	r2, [r3, #56]	; 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	2b02      	cmp	r3, #2
 800f1ee:	d104      	bne.n	800f1fa <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f000 ffc1 	bl	801017c <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f202:	b2db      	uxtb	r3, r3
 800f204:	2b02      	cmp	r3, #2
 800f206:	d105      	bne.n	800f214 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 ffb5 	bl	801017c <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800f212:	e002      	b.n	800f21a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 f804 	bl	800f222 <JPEG_DMA_EndProcess>
}
 800f21a:	bf00      	nop
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	695b      	ldr	r3, [r3, #20]
 800f236:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800f23a:	1ad2      	subs	r2, r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f248:	429a      	cmp	r2, r3
 800f24a:	d10a      	bne.n	800f262 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	69d9      	ldr	r1, [r3, #28]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f254:	461a      	mov	r2, r3
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7f2 fdb6 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2200      	movs	r2, #0
 800f260:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f268:	f003 0310 	and.w	r3, r3, #16
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d134      	bne.n	800f2da <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00a      	beq.n	800f28e <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	69d9      	ldr	r1, [r3, #28]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f280:	461a      	mov	r2, r3
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7f2 fda0 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f022 0201 	bic.w	r2, r2, #1
 800f29c:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2a2:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2a8:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f003 0303 	and.w	r3, r3, #3
 800f2c6:	2b02      	cmp	r3, #2
 800f2c8:	d103      	bne.n	800f2d2 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7f2 fde4 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800f2d0:	e00c      	b.n	800f2ec <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f7fe fdb1 	bl	800de3a <HAL_JPEG_EncodeCpltCallback>
}
 800f2d8:	e008      	b.n	800f2ec <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d102      	bne.n	800f2ec <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 f804 	bl	800f2f4 <JPEG_DMA_PollResidualData>
}
 800f2ec:	bf00      	nop
 800f2ee:	3710      	adds	r7, #16
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b086      	sub	sp, #24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800f2fc:	2310      	movs	r3, #16
 800f2fe:	617b      	str	r3, [r7, #20]
 800f300:	e04f      	b.n	800f3a2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d146      	bne.n	800f39c <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f314:	f003 0310 	and.w	r3, r3, #16
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d03f      	beq.n	800f39c <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f322:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	69da      	ldr	r2, [r3, #28]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f32c:	4413      	add	r3, r2
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	b2d2      	uxtb	r2, r2
 800f332:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	0a19      	lsrs	r1, r3, #8
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	69da      	ldr	r2, [r3, #28]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f340:	3301      	adds	r3, #1
 800f342:	4413      	add	r3, r2
 800f344:	b2ca      	uxtb	r2, r1
 800f346:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	0c19      	lsrs	r1, r3, #16
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	69da      	ldr	r2, [r3, #28]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f354:	3302      	adds	r3, #2
 800f356:	4413      	add	r3, r2
 800f358:	b2ca      	uxtb	r2, r1
 800f35a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	0e19      	lsrs	r1, r3, #24
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	69da      	ldr	r2, [r3, #28]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f368:	3303      	adds	r3, #3
 800f36a:	4413      	add	r3, r2
 800f36c:	b2ca      	uxtb	r2, r1
 800f36e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f374:	1d1a      	adds	r2, r3, #4
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f382:	429a      	cmp	r2, r3
 800f384:	d10a      	bne.n	800f39c <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	69d9      	ldr	r1, [r3, #28]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f38e:	461a      	mov	r2, r3
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f7f2 fd19 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	3b01      	subs	r3, #1
 800f3a0:	617b      	str	r3, [r7, #20]
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d1ac      	bne.n	800f302 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3ac:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3b4:	f003 0310 	and.w	r3, r3, #16
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d004      	beq.n	800f3c6 <JPEG_DMA_PollResidualData+0xd2>
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d133      	bne.n	800f42e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f022 0201 	bic.w	r2, r2, #1
 800f3d4:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00a      	beq.n	800f3f4 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	69d9      	ldr	r1, [r3, #28]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7f2 fced 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3f8:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3fe:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2201      	movs	r2, #1
 800f412:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	f003 0303 	and.w	r3, r3, #3
 800f41c:	2b02      	cmp	r3, #2
 800f41e:	d103      	bne.n	800f428 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7f2 fd39 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800f426:	e002      	b.n	800f42e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f7fe fd06 	bl	800de3a <HAL_JPEG_EncodeCpltCallback>
}
 800f42e:	bf00      	nop
 800f430:	3718      	adds	r7, #24
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800f436:	b590      	push	{r4, r7, lr}
 800f438:	b087      	sub	sp, #28
 800f43a:	af02      	add	r7, sp, #8
 800f43c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f442:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f452:	631a      	str	r2, [r3, #48]	; 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f458:	f248 030c 	movw	r3, #32780	; 0x800c
 800f45c:	4013      	ands	r3, r2
 800f45e:	2b0c      	cmp	r3, #12
 800f460:	d17c      	bne.n	800f55c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f468:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	695b      	ldr	r3, [r3, #20]
 800f474:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800f478:	1ad2      	subs	r2, r2, r3
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	6a1b      	ldr	r3, [r3, #32]
 800f482:	4619      	mov	r1, r3
 800f484:	68f8      	ldr	r0, [r7, #12]
 800f486:	f7f2 fc6b 	bl	8001d60 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	429a      	cmp	r2, r3
 800f492:	d81f      	bhi.n	800f4d4 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d10d      	bne.n	800f4b6 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f49e:	f043 0204 	orr.w	r2, r3, #4
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2206      	movs	r2, #6
 800f4aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800f4ae:	68f8      	ldr	r0, [r7, #12]
 800f4b0:	f7f2 fcea 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800f4b4:	e052      	b.n	800f55c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4be:	68b9      	ldr	r1, [r7, #8]
 800f4c0:	fbb3 f1f1 	udiv	r1, r3, r1
 800f4c4:	68b8      	ldr	r0, [r7, #8]
 800f4c6:	fb00 f101 	mul.w	r1, r0, r1
 800f4ca:	1a5b      	subs	r3, r3, r1
 800f4cc:	1ad2      	subs	r2, r2, r3
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	629a      	str	r2, [r3, #40]	; 0x28
 800f4d2:	e010      	b.n	800f4f6 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00c      	beq.n	800f4f6 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4e0:	f003 0303 	and.w	r3, r3, #3
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d006      	beq.n	800f4f6 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4ec:	089b      	lsrs	r3, r3, #2
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	009a      	lsls	r2, r3, #2
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	629a      	str	r2, [r3, #40]	; 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d124      	bne.n	800f54c <JPEG_MDMAInCpltCallback+0x116>
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f506:	2b00      	cmp	r3, #0
 800f508:	d020      	beq.n	800f54c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	699b      	ldr	r3, [r3, #24]
 800f512:	4619      	mov	r1, r3
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	3340      	adds	r3, #64	; 0x40
 800f51a:	461c      	mov	r4, r3
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f520:	2201      	movs	r2, #1
 800f522:	9200      	str	r2, [sp, #0]
 800f524:	4622      	mov	r2, r4
 800f526:	f000 fd4d 	bl	800ffc4 <HAL_MDMA_Start_IT>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00d      	beq.n	800f54c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f534:	f043 0204 	orr.w	r2, r3, #4
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2206      	movs	r2, #6
 800f540:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800f544:	68f8      	ldr	r0, [r7, #12]
 800f546:	f7f2 fc9f 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800f54a:	e007      	b.n	800f55c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800f55a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800f55c:	3714      	adds	r7, #20
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd90      	pop	{r4, r7, pc}

0800f562 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800f562:	b590      	push	{r4, r7, lr}
 800f564:	b087      	sub	sp, #28
 800f566:	af02      	add	r7, sp, #8
 800f568:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f56e:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f57e:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f584:	f248 030c 	movw	r3, #32780	; 0x800c
 800f588:	4013      	ands	r3, r2
 800f58a:	2b0c      	cmp	r3, #12
 800f58c:	d147      	bne.n	800f61e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f594:	f003 0320 	and.w	r3, r3, #32
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d138      	bne.n	800f60e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	695b      	ldr	r3, [r3, #20]
 800f5a6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800f5aa:	1ad2      	subs	r2, r2, r3
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	69d9      	ldr	r1, [r3, #28]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f7f2 fc04 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d120      	bne.n	800f60e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	3344      	adds	r3, #68	; 0x44
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	69db      	ldr	r3, [r3, #28]
 800f5dc:	461c      	mov	r4, r3
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	9200      	str	r2, [sp, #0]
 800f5e6:	4622      	mov	r2, r4
 800f5e8:	f000 fcec 	bl	800ffc4 <HAL_MDMA_Start_IT>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d00d      	beq.n	800f60e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5f6:	f043 0204 	orr.w	r2, r3, #4
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2206      	movs	r2, #6
 800f602:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	f7f2 fc3e 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800f60c:	e007      	b.n	800f61e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800f61c:	631a      	str	r2, [r3, #48]	; 0x30
  }

}
 800f61e:	3714      	adds	r7, #20
 800f620:	46bd      	mov	sp, r7
 800f622:	bd90      	pop	{r4, r7, pc}

0800f624 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f630:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f022 0201 	bic.w	r2, r2, #1
 800f640:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f650:	631a      	str	r2, [r3, #48]	; 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2201      	movs	r2, #1
 800f656:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f65e:	f043 0204 	orr.w	r2, r3, #4
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800f666:	68f8      	ldr	r0, [r7, #12]
 800f668:	f7f2 fc0e 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800f66c:	bf00      	nop
 800f66e:	3710      	adds	r7, #16
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f680:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d002      	beq.n	800f694 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f7ff fdc7 	bl	800f222 <JPEG_DMA_EndProcess>
  }
}
 800f694:	bf00      	nop
 800f696:	3710      	adds	r7, #16
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b08b      	sub	sp, #44	; 0x2c
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	3350      	adds	r3, #80	; 0x50
 800f6ae:	61bb      	str	r3, [r7, #24]

  i = 0;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800f6b4:	e042      	b.n	800f73c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800f6bc:	2300      	movs	r3, #0
 800f6be:	61fb      	str	r3, [r7, #28]
 800f6c0:	e033      	b.n	800f72a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	00db      	lsls	r3, r3, #3
 800f6c6:	697a      	ldr	r2, [r7, #20]
 800f6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d103      	bne.n	800f6de <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800f6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d8:	3364      	adds	r3, #100	; 0x64
 800f6da:	627b      	str	r3, [r7, #36]	; 0x24
 800f6dc:	e022      	b.n	800f724 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	2264      	movs	r2, #100	; 0x64
 800f6e2:	fb02 f303 	mul.w	r3, r2, r3
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f6ea:	6a38      	ldr	r0, [r7, #32]
 800f6ec:	69f9      	ldr	r1, [r7, #28]
 800f6ee:	4401      	add	r1, r0
 800f6f0:	4818      	ldr	r0, [pc, #96]	; (800f754 <JPEG_GetQuality+0xb8>)
 800f6f2:	5c41      	ldrb	r1, [r0, r1]
 800f6f4:	440a      	add	r2, r1
 800f6f6:	7812      	ldrb	r2, [r2, #0]
 800f6f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6fc:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2b64      	cmp	r3, #100	; 0x64
 800f702:	d807      	bhi.n	800f714 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800f70a:	085b      	lsrs	r3, r3, #1
 800f70c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f70e:	4413      	add	r3, r2
 800f710:	627b      	str	r3, [r7, #36]	; 0x24
 800f712:	e007      	b.n	800f724 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800f714:	f241 3288 	movw	r2, #5000	; 0x1388
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f71e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f720:	4413      	add	r3, r2
 800f722:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	3301      	adds	r3, #1
 800f728:	61fb      	str	r3, [r7, #28]
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	2b03      	cmp	r3, #3
 800f72e:	d9c8      	bls.n	800f6c2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800f730:	6a3b      	ldr	r3, [r7, #32]
 800f732:	3304      	adds	r3, #4
 800f734:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	3304      	adds	r3, #4
 800f73a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800f73c:	6a3b      	ldr	r3, [r7, #32]
 800f73e:	2b3c      	cmp	r3, #60	; 0x3c
 800f740:	d9b9      	bls.n	800f6b6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800f742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f744:	099b      	lsrs	r3, r3, #6
}
 800f746:	4618      	mov	r0, r3
 800f748:	372c      	adds	r7, #44	; 0x2c
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop
 800f754:	0802b7a0 	.word	0x0802b7a0

0800f758 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d101      	bne.n	800f76a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800f766:	2301      	movs	r3, #1
 800f768:	e0bf      	b.n	800f8ea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800f770:	b2db      	uxtb	r3, r3
 800f772:	2b00      	cmp	r3, #0
 800f774:	d106      	bne.n	800f784 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2200      	movs	r2, #0
 800f77a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f7f7 fab8 	bl	8006cf4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2202      	movs	r2, #2
 800f788:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	699a      	ldr	r2, [r3, #24]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800f79a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	6999      	ldr	r1, [r3, #24]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	685a      	ldr	r2, [r3, #4]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f7b0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	691b      	ldr	r3, [r3, #16]
 800f7b6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	430a      	orrs	r2, r1
 800f7be:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	6899      	ldr	r1, [r3, #8]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	4b4a      	ldr	r3, [pc, #296]	; (800f8f4 <HAL_LTDC_Init+0x19c>)
 800f7cc:	400b      	ands	r3, r1
 800f7ce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	695b      	ldr	r3, [r3, #20]
 800f7d4:	041b      	lsls	r3, r3, #16
 800f7d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	6899      	ldr	r1, [r3, #8]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	699a      	ldr	r2, [r3, #24]
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	431a      	orrs	r2, r3
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	430a      	orrs	r2, r1
 800f7ec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	68d9      	ldr	r1, [r3, #12]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	4b3e      	ldr	r3, [pc, #248]	; (800f8f4 <HAL_LTDC_Init+0x19c>)
 800f7fa:	400b      	ands	r3, r1
 800f7fc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	69db      	ldr	r3, [r3, #28]
 800f802:	041b      	lsls	r3, r3, #16
 800f804:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	68d9      	ldr	r1, [r3, #12]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a1a      	ldr	r2, [r3, #32]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	431a      	orrs	r2, r3
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	430a      	orrs	r2, r1
 800f81a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	6919      	ldr	r1, [r3, #16]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	4b33      	ldr	r3, [pc, #204]	; (800f8f4 <HAL_LTDC_Init+0x19c>)
 800f828:	400b      	ands	r3, r1
 800f82a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f830:	041b      	lsls	r3, r3, #16
 800f832:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	6919      	ldr	r1, [r3, #16]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	431a      	orrs	r2, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	430a      	orrs	r2, r1
 800f848:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6959      	ldr	r1, [r3, #20]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	4b27      	ldr	r3, [pc, #156]	; (800f8f4 <HAL_LTDC_Init+0x19c>)
 800f856:	400b      	ands	r3, r1
 800f858:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f85e:	041b      	lsls	r3, r3, #16
 800f860:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	6959      	ldr	r1, [r3, #20]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	431a      	orrs	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	430a      	orrs	r2, r1
 800f876:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f87e:	021b      	lsls	r3, r3, #8
 800f880:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f888:	041b      	lsls	r3, r3, #16
 800f88a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800f89a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f8a2:	68ba      	ldr	r2, [r7, #8]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800f8ae:	431a      	orrs	r2, r3
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	430a      	orrs	r2, r1
 800f8b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f042 0206 	orr.w	r2, r2, #6
 800f8c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	699a      	ldr	r2, [r3, #24]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f042 0201 	orr.w	r2, r2, #1
 800f8d6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3710      	adds	r7, #16
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	f000f800 	.word	0xf000f800

0800f8f8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f906:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f90e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f003 0304 	and.w	r3, r3, #4
 800f916:	2b00      	cmp	r3, #0
 800f918:	d023      	beq.n	800f962 <HAL_LTDC_IRQHandler+0x6a>
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	f003 0304 	and.w	r3, r3, #4
 800f920:	2b00      	cmp	r3, #0
 800f922:	d01e      	beq.n	800f962 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f022 0204 	bic.w	r2, r2, #4
 800f932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2204      	movs	r2, #4
 800f93a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f942:	f043 0201 	orr.w	r2, r3, #1
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2204      	movs	r2, #4
 800f950:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f000 f86f 	bl	800fa40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f003 0302 	and.w	r3, r3, #2
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d023      	beq.n	800f9b4 <HAL_LTDC_IRQHandler+0xbc>
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	f003 0302 	and.w	r3, r3, #2
 800f972:	2b00      	cmp	r3, #0
 800f974:	d01e      	beq.n	800f9b4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f022 0202 	bic.w	r2, r2, #2
 800f984:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2202      	movs	r2, #2
 800f98c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f994:	f043 0202 	orr.w	r2, r3, #2
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2204      	movs	r2, #4
 800f9a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 f846 	bl	800fa40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f003 0301 	and.w	r3, r3, #1
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d01b      	beq.n	800f9f6 <HAL_LTDC_IRQHandler+0xfe>
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	f003 0301 	and.w	r3, r3, #1
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d016      	beq.n	800f9f6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f022 0201 	bic.w	r2, r2, #1
 800f9d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7f4 fd79 	bl	80044e8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f003 0308 	and.w	r3, r3, #8
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d01b      	beq.n	800fa38 <HAL_LTDC_IRQHandler+0x140>
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	f003 0308 	and.w	r3, r3, #8
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d016      	beq.n	800fa38 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f022 0208 	bic.w	r2, r2, #8
 800fa18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2208      	movs	r2, #8
 800fa20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2201      	movs	r2, #1
 800fa26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 f80e 	bl	800fa54 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800fa38:	bf00      	nop
 800fa3a:	3710      	adds	r7, #16
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800fa48:	bf00      	nop
 800fa4a:	370c      	adds	r7, #12
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800fa5c:	bf00      	nop
 800fa5e:	370c      	adds	r7, #12
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr

0800fa68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800fa68:	b5b0      	push	{r4, r5, r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	d101      	bne.n	800fa82 <HAL_LTDC_ConfigLayer+0x1a>
 800fa7e:	2302      	movs	r3, #2
 800fa80:	e02c      	b.n	800fadc <HAL_LTDC_ConfigLayer+0x74>
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2201      	movs	r2, #1
 800fa86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2202      	movs	r2, #2
 800fa8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2134      	movs	r1, #52	; 0x34
 800fa98:	fb01 f303 	mul.w	r3, r1, r3
 800fa9c:	4413      	add	r3, r2
 800fa9e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	4614      	mov	r4, r2
 800faa6:	461d      	mov	r5, r3
 800faa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800faac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fab4:	682b      	ldr	r3, [r5, #0]
 800fab6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800fab8:	687a      	ldr	r2, [r7, #4]
 800faba:	68b9      	ldr	r1, [r7, #8]
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	f000 f849 	bl	800fb54 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	2201      	movs	r2, #1
 800fac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2201      	movs	r2, #1
 800face:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2200      	movs	r2, #0
 800fad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3710      	adds	r7, #16
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bdb0      	pop	{r4, r5, r7, pc}

0800fae4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d101      	bne.n	800fafc <HAL_LTDC_ProgramLineEvent+0x18>
 800faf8:	2302      	movs	r3, #2
 800fafa:	e023      	b.n	800fb44 <HAL_LTDC_ProgramLineEvent+0x60>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2202      	movs	r2, #2
 800fb08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f022 0201 	bic.w	r2, r2, #1
 800fb1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800fb1c:	4a0c      	ldr	r2, [pc, #48]	; (800fb50 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f042 0201 	orr.w	r2, r2, #1
 800fb30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2201      	movs	r2, #1
 800fb36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800fb42:	2300      	movs	r3, #0
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr
 800fb50:	50001000 	.word	0x50001000

0800fb54 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b089      	sub	sp, #36	; 0x24
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	68db      	ldr	r3, [r3, #12]
 800fb6a:	0c1b      	lsrs	r3, r3, #16
 800fb6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb70:	4413      	add	r3, r2
 800fb72:	041b      	lsls	r3, r3, #16
 800fb74:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	01db      	lsls	r3, r3, #7
 800fb80:	4413      	add	r3, r2
 800fb82:	3384      	adds	r3, #132	; 0x84
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	68fa      	ldr	r2, [r7, #12]
 800fb88:	6812      	ldr	r2, [r2, #0]
 800fb8a:	4611      	mov	r1, r2
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	01d2      	lsls	r2, r2, #7
 800fb90:	440a      	add	r2, r1
 800fb92:	3284      	adds	r2, #132	; 0x84
 800fb94:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800fb98:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	0c1b      	lsrs	r3, r3, #16
 800fba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800fbaa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800fbac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	01db      	lsls	r3, r3, #7
 800fbb8:	440b      	add	r3, r1
 800fbba:	3384      	adds	r3, #132	; 0x84
 800fbbc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800fbc2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	68da      	ldr	r2, [r3, #12]
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fbd2:	4413      	add	r3, r2
 800fbd4:	041b      	lsls	r3, r3, #16
 800fbd6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	01db      	lsls	r3, r3, #7
 800fbe2:	4413      	add	r3, r2
 800fbe4:	3384      	adds	r3, #132	; 0x84
 800fbe6:	689b      	ldr	r3, [r3, #8]
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	6812      	ldr	r2, [r2, #0]
 800fbec:	4611      	mov	r1, r2
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	01d2      	lsls	r2, r2, #7
 800fbf2:	440a      	add	r2, r1
 800fbf4:	3284      	adds	r2, #132	; 0x84
 800fbf6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800fbfa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	689a      	ldr	r2, [r3, #8]
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	68db      	ldr	r3, [r3, #12]
 800fc06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fc0a:	4413      	add	r3, r2
 800fc0c:	1c5a      	adds	r2, r3, #1
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4619      	mov	r1, r3
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	01db      	lsls	r3, r3, #7
 800fc18:	440b      	add	r3, r1
 800fc1a:	3384      	adds	r3, #132	; 0x84
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	4313      	orrs	r3, r2
 800fc22:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	01db      	lsls	r3, r3, #7
 800fc2e:	4413      	add	r3, r2
 800fc30:	3384      	adds	r3, #132	; 0x84
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	68fa      	ldr	r2, [r7, #12]
 800fc36:	6812      	ldr	r2, [r2, #0]
 800fc38:	4611      	mov	r1, r2
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	01d2      	lsls	r2, r2, #7
 800fc3e:	440a      	add	r2, r1
 800fc40:	3284      	adds	r2, #132	; 0x84
 800fc42:	f023 0307 	bic.w	r3, r3, #7
 800fc46:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	01db      	lsls	r3, r3, #7
 800fc52:	4413      	add	r3, r2
 800fc54:	3384      	adds	r3, #132	; 0x84
 800fc56:	461a      	mov	r2, r3
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fc64:	021b      	lsls	r3, r3, #8
 800fc66:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fc6e:	041b      	lsls	r3, r3, #16
 800fc70:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	699b      	ldr	r3, [r3, #24]
 800fc76:	061b      	lsls	r3, r3, #24
 800fc78:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	01db      	lsls	r3, r3, #7
 800fc84:	4413      	add	r3, r2
 800fc86:	3384      	adds	r3, #132	; 0x84
 800fc88:	699b      	ldr	r3, [r3, #24]
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	461a      	mov	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	01db      	lsls	r3, r3, #7
 800fc94:	4413      	add	r3, r2
 800fc96:	3384      	adds	r3, #132	; 0x84
 800fc98:	461a      	mov	r2, r3
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fca4:	461a      	mov	r2, r3
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	431a      	orrs	r2, r3
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	431a      	orrs	r2, r3
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	01db      	lsls	r3, r3, #7
 800fcb8:	440b      	add	r3, r1
 800fcba:	3384      	adds	r3, #132	; 0x84
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	461a      	mov	r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	01db      	lsls	r3, r3, #7
 800fcce:	4413      	add	r3, r2
 800fcd0:	3384      	adds	r3, #132	; 0x84
 800fcd2:	695b      	ldr	r3, [r3, #20]
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	6812      	ldr	r2, [r2, #0]
 800fcd8:	4611      	mov	r1, r2
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	01d2      	lsls	r2, r2, #7
 800fcde:	440a      	add	r2, r1
 800fce0:	3284      	adds	r2, #132	; 0x84
 800fce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fce6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	461a      	mov	r2, r3
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	01db      	lsls	r3, r3, #7
 800fcf2:	4413      	add	r3, r2
 800fcf4:	3384      	adds	r3, #132	; 0x84
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	695b      	ldr	r3, [r3, #20]
 800fcfc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	461a      	mov	r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	01db      	lsls	r3, r3, #7
 800fd08:	4413      	add	r3, r2
 800fd0a:	3384      	adds	r3, #132	; 0x84
 800fd0c:	69da      	ldr	r2, [r3, #28]
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	4619      	mov	r1, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	01db      	lsls	r3, r3, #7
 800fd18:	440b      	add	r3, r1
 800fd1a:	3384      	adds	r3, #132	; 0x84
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	4b58      	ldr	r3, [pc, #352]	; (800fe80 <LTDC_SetConfig+0x32c>)
 800fd20:	4013      	ands	r3, r2
 800fd22:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	69da      	ldr	r2, [r3, #28]
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	6a1b      	ldr	r3, [r3, #32]
 800fd2c:	68f9      	ldr	r1, [r7, #12]
 800fd2e:	6809      	ldr	r1, [r1, #0]
 800fd30:	4608      	mov	r0, r1
 800fd32:	6879      	ldr	r1, [r7, #4]
 800fd34:	01c9      	lsls	r1, r1, #7
 800fd36:	4401      	add	r1, r0
 800fd38:	3184      	adds	r1, #132	; 0x84
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	461a      	mov	r2, r3
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	01db      	lsls	r3, r3, #7
 800fd48:	4413      	add	r3, r2
 800fd4a:	3384      	adds	r3, #132	; 0x84
 800fd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	461a      	mov	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	01db      	lsls	r3, r3, #7
 800fd58:	4413      	add	r3, r2
 800fd5a:	3384      	adds	r3, #132	; 0x84
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	2300      	movs	r3, #0
 800fd60:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	461a      	mov	r2, r3
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	01db      	lsls	r3, r3, #7
 800fd6c:	4413      	add	r3, r2
 800fd6e:	3384      	adds	r3, #132	; 0x84
 800fd70:	461a      	mov	r2, r3
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd76:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	691b      	ldr	r3, [r3, #16]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d102      	bne.n	800fd86 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800fd80:	2304      	movs	r3, #4
 800fd82:	61fb      	str	r3, [r7, #28]
 800fd84:	e01b      	b.n	800fdbe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	691b      	ldr	r3, [r3, #16]
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d102      	bne.n	800fd94 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800fd8e:	2303      	movs	r3, #3
 800fd90:	61fb      	str	r3, [r7, #28]
 800fd92:	e014      	b.n	800fdbe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	691b      	ldr	r3, [r3, #16]
 800fd98:	2b04      	cmp	r3, #4
 800fd9a:	d00b      	beq.n	800fdb4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800fda0:	2b02      	cmp	r3, #2
 800fda2:	d007      	beq.n	800fdb4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800fda8:	2b03      	cmp	r3, #3
 800fdaa:	d003      	beq.n	800fdb4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800fdb0:	2b07      	cmp	r3, #7
 800fdb2:	d102      	bne.n	800fdba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800fdb4:	2302      	movs	r3, #2
 800fdb6:	61fb      	str	r3, [r7, #28]
 800fdb8:	e001      	b.n	800fdbe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	01db      	lsls	r3, r3, #7
 800fdc8:	4413      	add	r3, r2
 800fdca:	3384      	adds	r3, #132	; 0x84
 800fdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdce:	68fa      	ldr	r2, [r7, #12]
 800fdd0:	6812      	ldr	r2, [r2, #0]
 800fdd2:	4611      	mov	r1, r2
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	01d2      	lsls	r2, r2, #7
 800fdd8:	440a      	add	r2, r1
 800fdda:	3284      	adds	r2, #132	; 0x84
 800fddc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800fde0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fde6:	69fa      	ldr	r2, [r7, #28]
 800fde8:	fb02 f303 	mul.w	r3, r2, r3
 800fdec:	041a      	lsls	r2, r3, #16
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	6859      	ldr	r1, [r3, #4]
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	1acb      	subs	r3, r1, r3
 800fdf8:	69f9      	ldr	r1, [r7, #28]
 800fdfa:	fb01 f303 	mul.w	r3, r1, r3
 800fdfe:	3307      	adds	r3, #7
 800fe00:	68f9      	ldr	r1, [r7, #12]
 800fe02:	6809      	ldr	r1, [r1, #0]
 800fe04:	4608      	mov	r0, r1
 800fe06:	6879      	ldr	r1, [r7, #4]
 800fe08:	01c9      	lsls	r1, r1, #7
 800fe0a:	4401      	add	r1, r0
 800fe0c:	3184      	adds	r1, #132	; 0x84
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	461a      	mov	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	01db      	lsls	r3, r3, #7
 800fe1c:	4413      	add	r3, r2
 800fe1e:	3384      	adds	r3, #132	; 0x84
 800fe20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	4619      	mov	r1, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	01db      	lsls	r3, r3, #7
 800fe2c:	440b      	add	r3, r1
 800fe2e:	3384      	adds	r3, #132	; 0x84
 800fe30:	4619      	mov	r1, r3
 800fe32:	4b14      	ldr	r3, [pc, #80]	; (800fe84 <LTDC_SetConfig+0x330>)
 800fe34:	4013      	ands	r3, r2
 800fe36:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	01db      	lsls	r3, r3, #7
 800fe42:	4413      	add	r3, r2
 800fe44:	3384      	adds	r3, #132	; 0x84
 800fe46:	461a      	mov	r2, r3
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe4c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	461a      	mov	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	01db      	lsls	r3, r3, #7
 800fe58:	4413      	add	r3, r2
 800fe5a:	3384      	adds	r3, #132	; 0x84
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	6812      	ldr	r2, [r2, #0]
 800fe62:	4611      	mov	r1, r2
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	01d2      	lsls	r2, r2, #7
 800fe68:	440a      	add	r2, r1
 800fe6a:	3284      	adds	r2, #132	; 0x84
 800fe6c:	f043 0301 	orr.w	r3, r3, #1
 800fe70:	6013      	str	r3, [r2, #0]
}
 800fe72:	bf00      	nop
 800fe74:	3724      	adds	r7, #36	; 0x24
 800fe76:	46bd      	mov	sp, r7
 800fe78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	fffff8f8 	.word	0xfffff8f8
 800fe84:	fffff800 	.word	0xfffff800

0800fe88 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800fe90:	f7fb fe9e 	bl	800bbd0 <HAL_GetTick>
 800fe94:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d101      	bne.n	800fea0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e03b      	b.n	800ff18 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2202      	movs	r2, #2
 800feac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	68da      	ldr	r2, [r3, #12]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f022 0201 	bic.w	r2, r2, #1
 800febe:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800fec0:	e00f      	b.n	800fee2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800fec2:	f7fb fe85 	bl	800bbd0 <HAL_GetTick>
 800fec6:	4602      	mov	r2, r0
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	1ad3      	subs	r3, r2, r3
 800fecc:	2b05      	cmp	r3, #5
 800fece:	d908      	bls.n	800fee2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2240      	movs	r2, #64	; 0x40
 800fed4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2203      	movs	r2, #3
 800feda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800fede:	2301      	movs	r3, #1
 800fee0:	e01a      	b.n	800ff18 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	f003 0301 	and.w	r3, r3, #1
 800feec:	2b00      	cmp	r3, #0
 800feee:	d1e8      	bne.n	800fec2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 fb2f 	bl	8010554 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2201      	movs	r2, #1
 800ff12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ff16:	2300      	movs	r3, #0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3710      	adds	r7, #16
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}

0800ff20 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b087      	sub	sp, #28
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d101      	bne.n	800ff3a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800ff36:	2301      	movs	r3, #1
 800ff38:	e03e      	b.n	800ffb8 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d101      	bne.n	800ff48 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800ff44:	2302      	movs	r3, #2
 800ff46:	e037      	b.n	800ffb8 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff56:	b2db      	uxtb	r3, r3
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d126      	bne.n	800ffaa <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	691b      	ldr	r3, [r3, #16]
 800ff62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d11c      	bne.n	800ffa4 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	68ba      	ldr	r2, [r7, #8]
 800ff70:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d108      	bne.n	800ff92 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	691a      	ldr	r2, [r3, #16]
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ff8e:	611a      	str	r2, [r3, #16]
 800ff90:	e00d      	b.n	800ffae <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	691a      	ldr	r2, [r3, #16]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ffa0:	611a      	str	r2, [r3, #16]
 800ffa2:	e004      	b.n	800ffae <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	75fb      	strb	r3, [r7, #23]
 800ffa8:	e001      	b.n	800ffae <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	371c      	adds	r7, #28
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af02      	add	r7, sp, #8
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
 800ffd0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d101      	bne.n	800ffdc <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e070      	b.n	80100be <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	d101      	bne.n	800ffea <HAL_MDMA_Start_IT+0x26>
 800ffe6:	2302      	movs	r3, #2
 800ffe8:	e069      	b.n	80100be <HAL_MDMA_Start_IT+0xfa>
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2201      	movs	r2, #1
 800ffee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fff8:	b2db      	uxtb	r3, r3
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d158      	bne.n	80100b0 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2202      	movs	r2, #2
 8010002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2200      	movs	r2, #0
 801000a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	68da      	ldr	r2, [r3, #12]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f022 0201 	bic.w	r2, r2, #1
 801001a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	68b9      	ldr	r1, [r7, #8]
 8010026:	68f8      	ldr	r0, [r7, #12]
 8010028:	f000 fa24 	bl	8010474 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	68da      	ldr	r2, [r3, #12]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f042 0206 	orr.w	r2, r2, #6
 801003a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010040:	2b00      	cmp	r3, #0
 8010042:	d007      	beq.n	8010054 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	68da      	ldr	r2, [r3, #12]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f042 0210 	orr.w	r2, r2, #16
 8010052:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010058:	2b00      	cmp	r3, #0
 801005a:	d007      	beq.n	801006c <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	68da      	ldr	r2, [r3, #12]
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f042 0208 	orr.w	r2, r2, #8
 801006a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010070:	2b00      	cmp	r3, #0
 8010072:	d007      	beq.n	8010084 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	68da      	ldr	r2, [r3, #12]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f042 0220 	orr.w	r2, r2, #32
 8010082:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	68da      	ldr	r2, [r3, #12]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f042 0201 	orr.w	r2, r2, #1
 8010092:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801009c:	d10e      	bne.n	80100bc <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	68da      	ldr	r2, [r3, #12]
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80100ac:	60da      	str	r2, [r3, #12]
 80100ae:	e005      	b.n	80100bc <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2200      	movs	r2, #0
 80100b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 80100b8:	2302      	movs	r3, #2
 80100ba:	e000      	b.n	80100be <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 80100bc:	2300      	movs	r3, #0
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}

080100c6 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80100c6:	b580      	push	{r7, lr}
 80100c8:	b084      	sub	sp, #16
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 80100ce:	f7fb fd7f 	bl	800bbd0 <HAL_GetTick>
 80100d2:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d101      	bne.n	80100de <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 80100da:	2301      	movs	r3, #1
 80100dc:	e04a      	b.n	8010174 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	2b02      	cmp	r3, #2
 80100e8:	d008      	beq.n	80100fc <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2280      	movs	r2, #128	; 0x80
 80100ee:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80100f8:	2301      	movs	r3, #1
 80100fa:	e03b      	b.n	8010174 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	68da      	ldr	r2, [r3, #12]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 801010a:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	68da      	ldr	r2, [r3, #12]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f022 0201 	bic.w	r2, r2, #1
 801011a:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801011c:	e016      	b.n	801014c <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 801011e:	f7fb fd57 	bl	800bbd0 <HAL_GetTick>
 8010122:	4602      	mov	r2, r0
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	1ad3      	subs	r3, r2, r3
 8010128:	2b05      	cmp	r3, #5
 801012a:	d90f      	bls.n	801014c <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010130:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2200      	movs	r2, #0
 801013c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2203      	movs	r2, #3
 8010144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 8010148:	2301      	movs	r3, #1
 801014a:	e013      	b.n	8010174 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	2b00      	cmp	r3, #0
 8010158:	d1e1      	bne.n	801011e <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	221f      	movs	r2, #31
 8010160:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2200      	movs	r2, #0
 8010166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2201      	movs	r2, #1
 801016e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 8010172:	2300      	movs	r3, #0
}
 8010174:	4618      	mov	r0, r3
 8010176:	3710      	adds	r7, #16
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d101      	bne.n	801018e <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801018a:	2301      	movs	r3, #1
 801018c:	e017      	b.n	80101be <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b02      	cmp	r3, #2
 8010198:	d004      	beq.n	80101a4 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2280      	movs	r2, #128	; 0x80
 801019e:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80101a0:	2301      	movs	r3, #1
 80101a2:	e00c      	b.n	80101be <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2204      	movs	r2, #4
 80101a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68da      	ldr	r2, [r3, #12]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f022 0201 	bic.w	r2, r2, #1
 80101ba:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80101bc:	2300      	movs	r3, #0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr
	...

080101cc <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80101d4:	2300      	movs	r3, #0
 80101d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80101d8:	4b91      	ldr	r3, [pc, #580]	; (8010420 <HAL_MDMA_IRQHandler+0x254>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	4a91      	ldr	r2, [pc, #580]	; (8010424 <HAL_MDMA_IRQHandler+0x258>)
 80101de:	fba2 2303 	umull	r2, r3, r2, r3
 80101e2:	0a9b      	lsrs	r3, r3, #10
 80101e4:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	461a      	mov	r2, r3
 80101ec:	4b8e      	ldr	r3, [pc, #568]	; (8010428 <HAL_MDMA_IRQHandler+0x25c>)
 80101ee:	4413      	add	r3, r2
 80101f0:	099b      	lsrs	r3, r3, #6
 80101f2:	f003 031f 	and.w	r3, r3, #31
 80101f6:	2201      	movs	r2, #1
 80101f8:	fa02 f303 	lsl.w	r3, r2, r3
 80101fc:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80101fe:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	4013      	ands	r3, r2
 8010208:	2b00      	cmp	r3, #0
 801020a:	f000 812d 	beq.w	8010468 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f003 0301 	and.w	r3, r3, #1
 8010218:	2b00      	cmp	r3, #0
 801021a:	d054      	beq.n	80102c6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	f003 0302 	and.w	r3, r3, #2
 8010226:	2b00      	cmp	r3, #0
 8010228:	d04d      	beq.n	80102c6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	68da      	ldr	r2, [r3, #12]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f022 0202 	bic.w	r2, r2, #2
 8010238:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010248:	2b00      	cmp	r3, #0
 801024a:	d106      	bne.n	801025a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010250:	f043 0201 	orr.w	r2, r3, #1
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	669a      	str	r2, [r3, #104]	; 0x68
 8010258:	e005      	b.n	8010266 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801025e:	f043 0202 	orr.w	r2, r3, #2
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801026c:	2b00      	cmp	r3, #0
 801026e:	d005      	beq.n	801027c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010274:	f043 0204 	orr.w	r2, r3, #4
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010282:	2b00      	cmp	r3, #0
 8010284:	d005      	beq.n	8010292 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801028a:	f043 0208 	orr.w	r2, r3, #8
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010298:	2b00      	cmp	r3, #0
 801029a:	d005      	beq.n	80102a8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102a0:	f043 0210 	orr.w	r2, r3, #16
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d005      	beq.n	80102be <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102b6:	f043 0220 	orr.w	r2, r3, #32
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2201      	movs	r2, #1
 80102c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	f003 0310 	and.w	r3, r3, #16
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d012      	beq.n	80102fa <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	f003 0320 	and.w	r3, r3, #32
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00b      	beq.n	80102fa <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2210      	movs	r2, #16
 80102e8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d003      	beq.n	80102fa <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f003 0308 	and.w	r3, r3, #8
 8010304:	2b00      	cmp	r3, #0
 8010306:	d012      	beq.n	801032e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	68db      	ldr	r3, [r3, #12]
 801030e:	f003 0310 	and.w	r3, r3, #16
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00b      	beq.n	801032e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2208      	movs	r2, #8
 801031c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010322:	2b00      	cmp	r3, #0
 8010324:	d003      	beq.n	801032e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f003 0304 	and.w	r3, r3, #4
 8010338:	2b00      	cmp	r3, #0
 801033a:	d012      	beq.n	8010362 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	f003 0308 	and.w	r3, r3, #8
 8010346:	2b00      	cmp	r3, #0
 8010348:	d00b      	beq.n	8010362 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2204      	movs	r2, #4
 8010350:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010356:	2b00      	cmp	r3, #0
 8010358:	d003      	beq.n	8010362 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f003 0302 	and.w	r3, r3, #2
 801036c:	2b00      	cmp	r3, #0
 801036e:	d039      	beq.n	80103e4 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68db      	ldr	r3, [r3, #12]
 8010376:	f003 0304 	and.w	r3, r3, #4
 801037a:	2b00      	cmp	r3, #0
 801037c:	d032      	beq.n	80103e4 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	68da      	ldr	r2, [r3, #12]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 801038c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010394:	b2db      	uxtb	r3, r3
 8010396:	2b04      	cmp	r3, #4
 8010398:	d110      	bne.n	80103bc <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2200      	movs	r2, #0
 801039e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2201      	movs	r2, #1
 80103a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d05c      	beq.n	801046c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	4798      	blx	r3
        }
        return;
 80103ba:	e057      	b.n	801046c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	2202      	movs	r2, #2
 80103c2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2201      	movs	r2, #1
 80103d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d003      	beq.n	80103e4 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d040      	beq.n	801046e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2204      	movs	r2, #4
 80103f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	68da      	ldr	r2, [r3, #12]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	f022 0201 	bic.w	r2, r2, #1
 8010402:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	3301      	adds	r3, #1
 8010408:	60bb      	str	r3, [r7, #8]
 801040a:	697a      	ldr	r2, [r7, #20]
 801040c:	429a      	cmp	r2, r3
 801040e:	d30d      	bcc.n	801042c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	f003 0301 	and.w	r3, r3, #1
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1f2      	bne.n	8010404 <HAL_MDMA_IRQHandler+0x238>
 801041e:	e006      	b.n	801042e <HAL_MDMA_IRQHandler+0x262>
 8010420:	24000054 	.word	0x24000054
 8010424:	1b4e81b5 	.word	0x1b4e81b5
 8010428:	adffffc0 	.word	0xadffffc0
        break;
 801042c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	f003 0301 	and.w	r3, r3, #1
 8010440:	2b00      	cmp	r3, #0
 8010442:	d004      	beq.n	801044e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2203      	movs	r2, #3
 8010448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801044c:	e003      	b.n	8010456 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2201      	movs	r2, #1
 8010452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801045a:	2b00      	cmp	r3, #0
 801045c:	d007      	beq.n	801046e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	4798      	blx	r3
 8010466:	e002      	b.n	801046e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8010468:	bf00      	nop
 801046a:	e000      	b.n	801046e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 801046c:	bf00      	nop
    }
  }
}
 801046e:	3718      	adds	r7, #24
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}

08010474 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8010474:	b480      	push	{r7}
 8010476:	b087      	sub	sp, #28
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	607a      	str	r2, [r7, #4]
 8010480:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	695a      	ldr	r2, [r3, #20]
 8010488:	4b31      	ldr	r3, [pc, #196]	; (8010550 <MDMA_SetConfig+0xdc>)
 801048a:	4013      	ands	r3, r2
 801048c:	683a      	ldr	r2, [r7, #0]
 801048e:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	6812      	ldr	r2, [r2, #0]
 8010496:	430b      	orrs	r3, r1
 8010498:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	695b      	ldr	r3, [r3, #20]
 80104a0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80104a4:	6a3b      	ldr	r3, [r7, #32]
 80104a6:	3b01      	subs	r3, #1
 80104a8:	051a      	lsls	r2, r3, #20
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	430a      	orrs	r2, r1
 80104b0:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	221f      	movs	r2, #31
 80104b8:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	687a      	ldr	r2, [r7, #4]
 80104c0:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	68ba      	ldr	r2, [r7, #8]
 80104c8:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80104d0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104d8:	d002      	beq.n	80104e0 <MDMA_SetConfig+0x6c>
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d108      	bne.n	80104f2 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80104ee:	629a      	str	r2, [r3, #40]	; 0x28
 80104f0:	e007      	b.n	8010502 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010500:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010508:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010510:	d002      	beq.n	8010518 <MDMA_SetConfig+0xa4>
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d108      	bne.n	801052a <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010526:	629a      	str	r2, [r3, #40]	; 0x28
 8010528:	e007      	b.n	801053a <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010544:	bf00      	nop
 8010546:	371c      	adds	r7, #28
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr
 8010550:	fffe0000 	.word	0xfffe0000

08010554 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8010554:	b480      	push	{r7}
 8010556:	b085      	sub	sp, #20
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	68d9      	ldr	r1, [r3, #12]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	691a      	ldr	r2, [r3, #16]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	430a      	orrs	r2, r1
 801056a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	695a      	ldr	r2, [r3, #20]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	699b      	ldr	r3, [r3, #24]
 8010574:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801057a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6a1b      	ldr	r3, [r3, #32]
 8010580:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8010586:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010592:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010598:	3b01      	subs	r3, #1
 801059a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 801059c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80105a8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80105aa:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105b4:	d107      	bne.n	80105c6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	691a      	ldr	r2, [r3, #16]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80105c4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2200      	movs	r2, #0
 80105cc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	da11      	bge.n	80105fa <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	695a      	ldr	r2, [r3, #20]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80105e4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105ea:	425b      	negs	r3, r3
 80105ec:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	68fa      	ldr	r2, [r7, #12]
 80105f4:	b292      	uxth	r2, r2
 80105f6:	621a      	str	r2, [r3, #32]
 80105f8:	e006      	b.n	8010608 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105fe:	461a      	mov	r2, r3
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	b292      	uxth	r2, r2
 8010606:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801060c:	2b00      	cmp	r3, #0
 801060e:	da15      	bge.n	801063c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	695a      	ldr	r2, [r3, #20]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 801061e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010624:	425b      	negs	r3, r3
 8010626:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	6a19      	ldr	r1, [r3, #32]
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	041a      	lsls	r2, r3, #16
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	430a      	orrs	r2, r1
 8010638:	621a      	str	r2, [r3, #32]
 801063a:	e009      	b.n	8010650 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	6a19      	ldr	r1, [r3, #32]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010646:	041a      	lsls	r2, r3, #16
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	430a      	orrs	r2, r1
 801064e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010658:	d006      	beq.n	8010668 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	685a      	ldr	r2, [r3, #4]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	b2d2      	uxtb	r2, r2
 8010664:	629a      	str	r2, [r3, #40]	; 0x28
 8010666:	e003      	b.n	8010670 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	2200      	movs	r2, #0
 801066e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	2200      	movs	r2, #0
 8010676:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010678:	bf00      	nop
 801067a:	3714      	adds	r7, #20
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b086      	sub	sp, #24
 8010688:	af02      	add	r7, sp, #8
 801068a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801068c:	2300      	movs	r3, #0
 801068e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010690:	f7fb fa9e 	bl	800bbd0 <HAL_GetTick>
 8010694:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d102      	bne.n	80106a2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 801069c:	2301      	movs	r3, #1
 801069e:	73fb      	strb	r3, [r7, #15]
 80106a0:	e0a5      	b.n	80107ee <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	f040 809e 	bne.w	80107ee <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7f6 fbec 	bl	8006e90 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80106b8:	f241 3188 	movw	r1, #5000	; 0x1388
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f000 fd44 	bl	801114a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	689a      	ldr	r2, [r3, #8]
 80106c8:	4b4b      	ldr	r3, [pc, #300]	; (80107f8 <HAL_OSPI_Init+0x174>)
 80106ca:	4013      	ands	r3, r2
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	68d1      	ldr	r1, [r2, #12]
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	6912      	ldr	r2, [r2, #16]
 80106d4:	3a01      	subs	r2, #1
 80106d6:	0412      	lsls	r2, r2, #16
 80106d8:	4311      	orrs	r1, r2
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	6952      	ldr	r2, [r2, #20]
 80106de:	3a01      	subs	r2, #1
 80106e0:	0212      	lsls	r2, r2, #8
 80106e2:	4311      	orrs	r1, r2
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80106e8:	4311      	orrs	r1, r2
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	69d2      	ldr	r2, [r2, #28]
 80106ee:	4311      	orrs	r1, r2
 80106f0:	687a      	ldr	r2, [r7, #4]
 80106f2:	6812      	ldr	r2, [r2, #0]
 80106f4:	430b      	orrs	r3, r1
 80106f6:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6a1a      	ldr	r2, [r3, #32]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	430a      	orrs	r2, r1
 801070c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010712:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	430a      	orrs	r2, r1
 801071e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010728:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	3b01      	subs	r3, #1
 801073a:	021a      	lsls	r2, r3, #8
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	430a      	orrs	r2, r1
 8010742:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	2200      	movs	r2, #0
 801074e:	2120      	movs	r1, #32
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f000 fd45 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8010756:	4603      	mov	r3, r0
 8010758:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801075a:	7bfb      	ldrb	r3, [r7, #15]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d146      	bne.n	80107ee <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	68db      	ldr	r3, [r3, #12]
 8010766:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801076e:	1e5a      	subs	r2, r3, #1
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	430a      	orrs	r2, r1
 8010776:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	689a      	ldr	r2, [r3, #8]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	430a      	orrs	r2, r1
 801078c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8010796:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a2:	431a      	orrs	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	430a      	orrs	r2, r1
 80107aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f042 0201 	orr.w	r2, r2, #1
 80107bc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	699b      	ldr	r3, [r3, #24]
 80107c2:	2b02      	cmp	r3, #2
 80107c4:	d107      	bne.n	80107d6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	689a      	ldr	r2, [r3, #8]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f042 0202 	orr.w	r2, r2, #2
 80107d4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80107de:	d103      	bne.n	80107e8 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2201      	movs	r2, #1
 80107e4:	651a      	str	r2, [r3, #80]	; 0x50
 80107e6:	e002      	b.n	80107ee <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2202      	movs	r2, #2
 80107ec:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80107ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3710      	adds	r7, #16
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	f8e0f8f4 	.word	0xf8e0f8f4

080107fc <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010804:	2300      	movs	r3, #0
 8010806:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d102      	bne.n	8010814 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 801080e:	2301      	movs	r3, #1
 8010810:	73fb      	strb	r3, [r7, #15]
 8010812:	e015      	b.n	8010840 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f022 0201 	bic.w	r2, r2, #1
 8010822:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	689a      	ldr	r2, [r3, #8]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	f022 0202 	bic.w	r2, r2, #2
 8010832:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f7f6 fb8d 	bl	8006f54 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2200      	movs	r2, #0
 801083e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 8010840:	7bfb      	ldrb	r3, [r7, #15]
}
 8010842:	4618      	mov	r0, r3
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
	...

0801084c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b086      	sub	sp, #24
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	3350      	adds	r3, #80	; 0x50
 801085a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	6a1b      	ldr	r3, [r3, #32]
 8010862:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010870:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	f003 0304 	and.w	r3, r3, #4
 8010878:	2b00      	cmp	r3, #0
 801087a:	d03a      	beq.n	80108f2 <HAL_OSPI_IRQHandler+0xa6>
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010882:	2b00      	cmp	r3, #0
 8010884:	d035      	beq.n	80108f2 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	2b18      	cmp	r3, #24
 801088a:	d10f      	bne.n	80108ac <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010890:	781a      	ldrb	r2, [r3, #0]
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801089a:	1c5a      	adds	r2, r3, #1
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108a4:	1e5a      	subs	r2, r3, #1
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	649a      	str	r2, [r3, #72]	; 0x48
 80108aa:	e012      	b.n	80108d2 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	2b28      	cmp	r3, #40	; 0x28
 80108b0:	d10f      	bne.n	80108d2 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108b6:	697a      	ldr	r2, [r7, #20]
 80108b8:	7812      	ldrb	r2, [r2, #0]
 80108ba:	b2d2      	uxtb	r2, r2
 80108bc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108c2:	1c5a      	adds	r2, r3, #1
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108cc:	1e5a      	subs	r2, r3, #1
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d107      	bne.n	80108ea <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80108e8:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 fb7c 	bl	8010fe8 <HAL_OSPI_FifoThresholdCallback>
 80108f0:	e0e7      	b.n	8010ac2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	f003 0302 	and.w	r3, r3, #2
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d067      	beq.n	80109cc <HAL_OSPI_IRQHandler+0x180>
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010902:	2b00      	cmp	r3, #0
 8010904:	d062      	beq.n	80109cc <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	2b28      	cmp	r3, #40	; 0x28
 801090a:	d131      	bne.n	8010970 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010910:	2b00      	cmp	r3, #0
 8010912:	d015      	beq.n	8010940 <HAL_OSPI_IRQHandler+0xf4>
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801091a:	2b00      	cmp	r3, #0
 801091c:	d010      	beq.n	8010940 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010922:	697a      	ldr	r2, [r7, #20]
 8010924:	7812      	ldrb	r2, [r2, #0]
 8010926:	b2d2      	uxtb	r2, r2
 8010928:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801092e:	1c5a      	adds	r2, r3, #1
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010938:	1e5a      	subs	r2, r3, #1
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801093e:	e0bd      	b.n	8010abc <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010944:	2b00      	cmp	r3, #0
 8010946:	f040 80b9 	bne.w	8010abc <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2202      	movs	r2, #2
 8010950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8010960:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2202      	movs	r2, #2
 8010966:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f000 fb51 	bl	8011010 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801096e:	e0a5      	b.n	8010abc <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2202      	movs	r2, #2
 8010976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8010986:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2202      	movs	r2, #2
 801098c:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	2b18      	cmp	r3, #24
 8010992:	d103      	bne.n	801099c <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 fb45 	bl	8011024 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801099a:	e08f      	b.n	8010abc <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	2b08      	cmp	r3, #8
 80109a0:	d103      	bne.n	80109aa <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 fb2a 	bl	8010ffc <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80109a8:	e088      	b.n	8010abc <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109b0:	f040 8084 	bne.w	8010abc <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d103      	bne.n	80109c4 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f000 fb09 	bl	8010fd4 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80109c2:	e07b      	b.n	8010abc <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 fafb 	bl	8010fc0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80109ca:	e077      	b.n	8010abc <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	f003 0308 	and.w	r3, r3, #8
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d01e      	beq.n	8010a14 <HAL_OSPI_IRQHandler+0x1c8>
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d019      	beq.n	8010a14 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2208      	movs	r2, #8
 80109e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00a      	beq.n	8010a0c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8010a04:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2202      	movs	r2, #2
 8010a0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f000 fb13 	bl	8011038 <HAL_OSPI_StatusMatchCallback>
 8010a12:	e056      	b.n	8010ac2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	f003 0301 	and.w	r3, r3, #1
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d03c      	beq.n	8010a98 <HAL_OSPI_IRQHandler+0x24c>
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d037      	beq.n	8010a98 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8010a3e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2202      	movs	r2, #2
 8010a44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f003 0304 	and.w	r3, r3, #4
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d01a      	beq.n	8010a8a <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f022 0204 	bic.w	r2, r2, #4
 8010a62:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a68:	4a18      	ldr	r2, [pc, #96]	; (8010acc <HAL_OSPI_IRQHandler+0x280>)
 8010a6a:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7ff fb83 	bl	801017c <HAL_MDMA_Abort_IT>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d021      	beq.n	8010ac0 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2202      	movs	r2, #2
 8010a80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f000 fa9c 	bl	8010fc0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010a88:	e01a      	b.n	8010ac0 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2202      	movs	r2, #2
 8010a8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f000 fa95 	bl	8010fc0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010a96:	e013      	b.n	8010ac0 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	f003 0310 	and.w	r3, r3, #16
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d00f      	beq.n	8010ac2 <HAL_OSPI_IRQHandler+0x276>
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d00a      	beq.n	8010ac2 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2210      	movs	r2, #16
 8010ab2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f000 fac9 	bl	801104c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010aba:	e002      	b.n	8010ac2 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010abc:	bf00      	nop
 8010abe:	e000      	b.n	8010ac2 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010ac0:	bf00      	nop
}
 8010ac2:	bf00      	nop
 8010ac4:	3718      	adds	r7, #24
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}
 8010aca:	bf00      	nop
 8010acc:	08011169 	.word	0x08011169

08010ad0 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b08a      	sub	sp, #40	; 0x28
 8010ad4:	af02      	add	r7, sp, #8
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	60b9      	str	r1, [r7, #8]
 8010ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8010adc:	f7fb f878 	bl	800bbd0 <HAL_GetTick>
 8010ae0:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ae6:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aec:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	2b02      	cmp	r3, #2
 8010af2:	d104      	bne.n	8010afe <HAL_OSPI_Command+0x2e>
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010afc:	d115      	bne.n	8010b2a <HAL_OSPI_Command+0x5a>
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	2b14      	cmp	r3, #20
 8010b02:	d107      	bne.n	8010b14 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2b02      	cmp	r3, #2
 8010b0a:	d00e      	beq.n	8010b2a <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	2b03      	cmp	r3, #3
 8010b12:	d00a      	beq.n	8010b2a <HAL_OSPI_Command+0x5a>
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	2b24      	cmp	r3, #36	; 0x24
 8010b18:	d15b      	bne.n	8010bd2 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d003      	beq.n	8010b2a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8010b26:	2b03      	cmp	r3, #3
 8010b28:	d153      	bne.n	8010bd2 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	9300      	str	r3, [sp, #0]
 8010b2e:	69bb      	ldr	r3, [r7, #24]
 8010b30:	2200      	movs	r2, #0
 8010b32:	2120      	movs	r1, #32
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f000 fb53 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8010b3e:	7ffb      	ldrb	r3, [r7, #31]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d14c      	bne.n	8010bde <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2200      	movs	r2, #0
 8010b48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8010b4a:	68b9      	ldr	r1, [r7, #8]
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f000 fb7f 	bl	8011250 <OSPI_ConfigCmd>
 8010b52:	4603      	mov	r3, r0
 8010b54:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8010b56:	7ffb      	ldrb	r3, [r7, #31]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d140      	bne.n	8010bde <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d10e      	bne.n	8010b82 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	9300      	str	r3, [sp, #0]
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	2102      	movs	r1, #2
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f000 fb36 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8010b74:	4603      	mov	r3, r0
 8010b76:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2202      	movs	r2, #2
 8010b7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8010b80:	e02d      	b.n	8010bde <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d103      	bne.n	8010b92 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2204      	movs	r2, #4
 8010b8e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010b90:	e025      	b.n	8010bde <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	d10b      	bne.n	8010bb2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b9e:	2b24      	cmp	r3, #36	; 0x24
 8010ba0:	d103      	bne.n	8010baa <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2204      	movs	r2, #4
 8010ba6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010ba8:	e019      	b.n	8010bde <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2214      	movs	r2, #20
 8010bae:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010bb0:	e015      	b.n	8010bde <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	2b02      	cmp	r3, #2
 8010bb8:	d111      	bne.n	8010bde <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bbe:	2b14      	cmp	r3, #20
 8010bc0:	d103      	bne.n	8010bca <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2204      	movs	r2, #4
 8010bc6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010bc8:	e009      	b.n	8010bde <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2224      	movs	r2, #36	; 0x24
 8010bce:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010bd0:	e005      	b.n	8010bde <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2210      	movs	r2, #16
 8010bda:	655a      	str	r2, [r3, #84]	; 0x54
 8010bdc:	e000      	b.n	8010be0 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8010bde:	bf00      	nop
  }

  /* Return function status */
  return status;
 8010be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3720      	adds	r7, #32
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8010bea:	b580      	push	{r7, lr}
 8010bec:	b08a      	sub	sp, #40	; 0x28
 8010bee:	af02      	add	r7, sp, #8
 8010bf0:	60f8      	str	r0, [r7, #12]
 8010bf2:	60b9      	str	r1, [r7, #8]
 8010bf4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010bf6:	f7fa ffeb 	bl	800bbd0 <HAL_GetTick>
 8010bfa:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	3350      	adds	r3, #80	; 0x50
 8010c02:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d105      	bne.n	8010c16 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2208      	movs	r2, #8
 8010c12:	655a      	str	r2, [r3, #84]	; 0x54
 8010c14:	e057      	b.n	8010cc6 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c1a:	2b04      	cmp	r3, #4
 8010c1c:	d14e      	bne.n	8010cbc <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c24:	1c5a      	adds	r2, r3, #1
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	68ba      	ldr	r2, [r7, #8]
 8010c36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010c46:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	9300      	str	r3, [sp, #0]
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	2201      	movs	r2, #1
 8010c50:	2104      	movs	r1, #4
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f000 fac4 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8010c5c:	7ffb      	ldrb	r3, [r7, #31]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d113      	bne.n	8010c8a <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c66:	781a      	ldrb	r2, [r3, #0]
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c70:	1c5a      	adds	r2, r3, #1
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c7a:	1e5a      	subs	r2, r3, #1
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d1df      	bne.n	8010c48 <HAL_OSPI_Transmit+0x5e>
 8010c88:	e000      	b.n	8010c8c <HAL_OSPI_Transmit+0xa2>
          break;
 8010c8a:	bf00      	nop

      if (status == HAL_OK)
 8010c8c:	7ffb      	ldrb	r3, [r7, #31]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d119      	bne.n	8010cc6 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	9300      	str	r3, [sp, #0]
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	2201      	movs	r2, #1
 8010c9a:	2102      	movs	r1, #2
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f000 fa9f 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8010ca6:	7ffb      	ldrb	r3, [r7, #31]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d10c      	bne.n	8010cc6 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2202      	movs	r2, #2
 8010cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2202      	movs	r2, #2
 8010cb8:	651a      	str	r2, [r3, #80]	; 0x50
 8010cba:	e004      	b.n	8010cc6 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2210      	movs	r2, #16
 8010cc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8010cc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3720      	adds	r7, #32
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b08c      	sub	sp, #48	; 0x30
 8010cd4:	af02      	add	r7, sp, #8
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	60b9      	str	r1, [r7, #8]
 8010cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010cdc:	f7fa ff78 	bl	800bbd0 <HAL_GetTick>
 8010ce0:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	3350      	adds	r3, #80	; 0x50
 8010ce8:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010cf0:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8010cfa:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d106      	bne.n	8010d10 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8010d02:	2301      	movs	r3, #1
 8010d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2208      	movs	r2, #8
 8010d0c:	655a      	str	r2, [r3, #84]	; 0x54
 8010d0e:	e07c      	b.n	8010e0a <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d14:	2b04      	cmp	r3, #4
 8010d16:	d172      	bne.n	8010dfe <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d1e:	1c5a      	adds	r2, r3, #1
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010d44:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	68db      	ldr	r3, [r3, #12]
 8010d4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010d4e:	d104      	bne.n	8010d5a <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	69ba      	ldr	r2, [r7, #24]
 8010d56:	649a      	str	r2, [r3, #72]	; 0x48
 8010d58:	e011      	b.n	8010d7e <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8010d62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d004      	beq.n	8010d74 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	69ba      	ldr	r2, [r7, #24]
 8010d70:	649a      	str	r2, [r3, #72]	; 0x48
 8010d72:	e004      	b.n	8010d7e <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	697a      	ldr	r2, [r7, #20]
 8010d7a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	9300      	str	r3, [sp, #0]
 8010d82:	6a3b      	ldr	r3, [r7, #32]
 8010d84:	2201      	movs	r2, #1
 8010d86:	2106      	movs	r1, #6
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f000 fa29 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8010d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d114      	bne.n	8010dc6 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da0:	69fa      	ldr	r2, [r7, #28]
 8010da2:	7812      	ldrb	r2, [r2, #0]
 8010da4:	b2d2      	uxtb	r2, r2
 8010da6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dac:	1c5a      	adds	r2, r3, #1
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010db6:	1e5a      	subs	r2, r3, #1
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d1dc      	bne.n	8010d7e <HAL_OSPI_Receive+0xae>
 8010dc4:	e000      	b.n	8010dc8 <HAL_OSPI_Receive+0xf8>
          break;
 8010dc6:	bf00      	nop

      if (status == HAL_OK)
 8010dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d11c      	bne.n	8010e0a <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	6a3b      	ldr	r3, [r7, #32]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	2102      	movs	r1, #2
 8010dda:	68f8      	ldr	r0, [r7, #12]
 8010ddc:	f000 fa00 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8010de0:	4603      	mov	r3, r0
 8010de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8010de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d10d      	bne.n	8010e0a <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2202      	movs	r2, #2
 8010df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2202      	movs	r2, #2
 8010dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8010dfc:	e005      	b.n	8010e0a <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2210      	movs	r2, #16
 8010e08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8010e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3728      	adds	r7, #40	; 0x28
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}

08010e16 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b08a      	sub	sp, #40	; 0x28
 8010e1a:	af02      	add	r7, sp, #8
 8010e1c:	60f8      	str	r0, [r7, #12]
 8010e1e:	60b9      	str	r1, [r7, #8]
 8010e20:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010e22:	f7fa fed5 	bl	800bbd0 <HAL_GetTick>
 8010e26:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e2e:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8010e38:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e3e:	2b04      	cmp	r3, #4
 8010e40:	d164      	bne.n	8010f0c <HAL_OSPI_AutoPolling+0xf6>
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010e4a:	d15f      	bne.n	8010f0c <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	69bb      	ldr	r3, [r7, #24]
 8010e52:	2200      	movs	r2, #0
 8010e54:	2120      	movs	r1, #32
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f000 f9c2 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8010e60:	7ffb      	ldrb	r3, [r7, #31]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d158      	bne.n	8010f18 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	6812      	ldr	r2, [r2, #0]
 8010e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	68ba      	ldr	r2, [r7, #8]
 8010e78:	6852      	ldr	r2, [r2, #4]
 8010e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68ba      	ldr	r2, [r7, #8]
 8010e84:	6912      	ldr	r2, [r2, #16]
 8010e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	6899      	ldr	r1, [r3, #8]
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	430b      	orrs	r3, r1
 8010e9e:	431a      	orrs	r2, r3
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8010ea8:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010eb2:	d104      	bne.n	8010ebe <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	697a      	ldr	r2, [r7, #20]
 8010eba:	649a      	str	r2, [r3, #72]	; 0x48
 8010ebc:	e011      	b.n	8010ee2 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8010ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d004      	beq.n	8010ed8 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	697a      	ldr	r2, [r7, #20]
 8010ed4:	649a      	str	r2, [r3, #72]	; 0x48
 8010ed6:	e004      	b.n	8010ee2 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	693a      	ldr	r2, [r7, #16]
 8010ede:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	9300      	str	r3, [sp, #0]
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	2201      	movs	r2, #1
 8010eea:	2108      	movs	r1, #8
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f000 f977 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8010ef6:	7ffb      	ldrb	r3, [r7, #31]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d10d      	bne.n	8010f18 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	2208      	movs	r2, #8
 8010f02:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2202      	movs	r2, #2
 8010f08:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010f0a:	e005      	b.n	8010f18 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2210      	movs	r2, #16
 8010f14:	655a      	str	r2, [r3, #84]	; 0x54
 8010f16:	e000      	b.n	8010f1a <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8010f18:	bf00      	nop
  }

  /* Return function status */
  return status;
 8010f1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3720      	adds	r7, #32
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b086      	sub	sp, #24
 8010f28:	af02      	add	r7, sp, #8
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010f2e:	f7fa fe4f 	bl	800bbd0 <HAL_GetTick>
 8010f32:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f38:	2b04      	cmp	r3, #4
 8010f3a:	d134      	bne.n	8010fa6 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	2200      	movs	r2, #0
 8010f46:	2120      	movs	r1, #32
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f000 f949 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8010f52:	7bfb      	ldrb	r3, [r7, #15]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d12b      	bne.n	8010fb0 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2288      	movs	r2, #136	; 0x88
 8010f5c:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	2b08      	cmp	r3, #8
 8010f64:	d111      	bne.n	8010f8a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	683a      	ldr	r2, [r7, #0]
 8010f6c:	6852      	ldr	r2, [r2, #4]
 8010f6e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	2210      	movs	r2, #16
 8010f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	681a      	ldr	r2, [r3, #0]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010f88:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	681a      	ldr	r2, [r3, #0]
 8010f90:	4b0a      	ldr	r3, [pc, #40]	; (8010fbc <HAL_OSPI_MemoryMapped+0x98>)
 8010f92:	4013      	ands	r3, r2
 8010f94:	683a      	ldr	r2, [r7, #0]
 8010f96:	6812      	ldr	r2, [r2, #0]
 8010f98:	431a      	orrs	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8010fa2:	601a      	str	r2, [r3, #0]
 8010fa4:	e004      	b.n	8010fb0 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2210      	movs	r2, #16
 8010fae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8010fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3710      	adds	r7, #16
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	cffffff7 	.word	0xcffffff7

08010fc0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8010fc8:	bf00      	nop
 8010fca:	370c      	adds	r7, #12
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr

08010fd4 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8010fdc:	bf00      	nop
 8010fde:	370c      	adds	r7, #12
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8010ff0:	bf00      	nop
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8011004:	bf00      	nop
 8011006:	370c      	adds	r7, #12
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr

08011010 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8011010:	b480      	push	{r7}
 8011012:	b083      	sub	sp, #12
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8011018:	bf00      	nop
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 801102c:	bf00      	nop
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8011040:	bf00      	nop
 8011042:	370c      	adds	r7, #12
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr

0801104c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 801104c:	b480      	push	{r7}
 801104e:	b083      	sub	sp, #12
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8011054:	bf00      	nop
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b088      	sub	sp, #32
 8011064:	af02      	add	r7, sp, #8
 8011066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011068:	2300      	movs	r3, #0
 801106a:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 801106c:	f7fa fdb0 	bl	800bbd0 <HAL_GetTick>
 8011070:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011076:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	f003 0308 	and.w	r3, r3, #8
 801107e:	2b00      	cmp	r3, #0
 8011080:	d104      	bne.n	801108c <HAL_OSPI_Abort+0x2c>
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	f003 0304 	and.w	r3, r3, #4
 8011088:	2b00      	cmp	r3, #0
 801108a:	d052      	beq.n	8011132 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	f003 0304 	and.w	r3, r3, #4
 8011096:	2b00      	cmp	r3, #0
 8011098:	d014      	beq.n	80110c4 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	f022 0204 	bic.w	r2, r2, #4
 80110a8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7ff f809 	bl	80100c6 <HAL_MDMA_Abort>
 80110b4:	4603      	mov	r3, r0
 80110b6:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80110b8:	7dfb      	ldrb	r3, [r7, #23]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d002      	beq.n	80110c4 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2204      	movs	r2, #4
 80110c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	6a1b      	ldr	r3, [r3, #32]
 80110ca:	f003 0320 	and.w	r3, r3, #32
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d02b      	beq.n	801112a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	f042 0202 	orr.w	r2, r2, #2
 80110e0:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110e6:	9300      	str	r3, [sp, #0]
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	2201      	movs	r2, #1
 80110ec:	2102      	movs	r1, #2
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f000 f876 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 80110f4:	4603      	mov	r3, r0
 80110f6:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80110f8:	7dfb      	ldrb	r3, [r7, #23]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d11f      	bne.n	801113e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2202      	movs	r2, #2
 8011104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801110a:	9300      	str	r3, [sp, #0]
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	2200      	movs	r2, #0
 8011110:	2120      	movs	r1, #32
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 f864 	bl	80111e0 <OSPI_WaitFlagStateUntilTimeout>
 8011118:	4603      	mov	r3, r0
 801111a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 801111c:	7dfb      	ldrb	r3, [r7, #23]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d10d      	bne.n	801113e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2202      	movs	r2, #2
 8011126:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8011128:	e009      	b.n	801113e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2202      	movs	r2, #2
 801112e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8011130:	e005      	b.n	801113e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8011132:	2301      	movs	r3, #1
 8011134:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2210      	movs	r2, #16
 801113a:	655a      	str	r2, [r3, #84]	; 0x54
 801113c:	e000      	b.n	8011140 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 801113e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8011140:	7dfb      	ldrb	r3, [r7, #23]
}
 8011142:	4618      	mov	r0, r3
 8011144:	3718      	adds	r7, #24
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 801114a:	b480      	push	{r7}
 801114c:	b083      	sub	sp, #12
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
 8011152:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	683a      	ldr	r2, [r7, #0]
 8011158:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 801115a:	2300      	movs	r3, #0
}
 801115c:	4618      	mov	r0, r3
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011174:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2200      	movs	r2, #0
 801117a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011184:	d122      	bne.n	80111cc <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	6a1b      	ldr	r3, [r3, #32]
 801118c:	f003 0320 	and.w	r3, r3, #32
 8011190:	2b00      	cmp	r3, #0
 8011192:	d014      	beq.n	80111be <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2202      	movs	r2, #2
 801119a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80111aa:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f042 0202 	orr.w	r2, r2, #2
 80111ba:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 80111bc:	e00c      	b.n	80111d8 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2202      	movs	r2, #2
 80111c2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 80111c4:	68f8      	ldr	r0, [r7, #12]
 80111c6:	f7ff ff05 	bl	8010fd4 <HAL_OSPI_AbortCpltCallback>
}
 80111ca:	e005      	b.n	80111d8 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2202      	movs	r2, #2
 80111d0:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 80111d2:	68f8      	ldr	r0, [r7, #12]
 80111d4:	f7ff fef4 	bl	8010fc0 <HAL_OSPI_ErrorCallback>
}
 80111d8:	bf00      	nop
 80111da:	3710      	adds	r7, #16
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	603b      	str	r3, [r7, #0]
 80111ec:	4613      	mov	r3, r2
 80111ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80111f0:	e01a      	b.n	8011228 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111f8:	d016      	beq.n	8011228 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111fa:	f7fa fce9 	bl	800bbd0 <HAL_GetTick>
 80111fe:	4602      	mov	r2, r0
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	1ad3      	subs	r3, r2, r3
 8011204:	69ba      	ldr	r2, [r7, #24]
 8011206:	429a      	cmp	r2, r3
 8011208:	d302      	bcc.n	8011210 <OSPI_WaitFlagStateUntilTimeout+0x30>
 801120a:	69bb      	ldr	r3, [r7, #24]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d10b      	bne.n	8011228 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011216:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801121c:	f043 0201 	orr.w	r2, r3, #1
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8011224:	2301      	movs	r3, #1
 8011226:	e00e      	b.n	8011246 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	6a1a      	ldr	r2, [r3, #32]
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	4013      	ands	r3, r2
 8011232:	2b00      	cmp	r3, #0
 8011234:	bf14      	ite	ne
 8011236:	2301      	movne	r3, #1
 8011238:	2300      	moveq	r3, #0
 801123a:	b2db      	uxtb	r3, r3
 801123c:	461a      	mov	r2, r3
 801123e:	79fb      	ldrb	r3, [r7, #7]
 8011240:	429a      	cmp	r2, r3
 8011242:	d1d6      	bne.n	80111f2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011244:	2300      	movs	r3, #0
}
 8011246:	4618      	mov	r0, r3
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
	...

08011250 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8011250:	b480      	push	{r7}
 8011252:	b089      	sub	sp, #36	; 0x24
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801125a:	2300      	movs	r3, #0
 801125c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801126c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	689b      	ldr	r3, [r3, #8]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d10a      	bne.n	801128c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	685a      	ldr	r2, [r3, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	430a      	orrs	r2, r1
 801128a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2b02      	cmp	r3, #2
 8011292:	d114      	bne.n	80112be <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801129c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80112a6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80112b0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80112ba:	60fb      	str	r3, [r7, #12]
 80112bc:	e02c      	b.n	8011318 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	2b03      	cmp	r3, #3
 80112c4:	d114      	bne.n	80112f0 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80112ce:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80112d8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80112e2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80112ec:	60fb      	str	r3, [r7, #12]
 80112ee:	e013      	b.n	8011318 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80112f8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8011302:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801130c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8011316:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011320:	431a      	orrs	r2, r3
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801132a:	2b00      	cmp	r3, #0
 801132c:	d012      	beq.n	8011354 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8011336:	69bb      	ldr	r3, [r7, #24]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011346:	4319      	orrs	r1, r3
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801134c:	430b      	orrs	r3, r1
 801134e:	431a      	orrs	r2, r3
 8011350:	69bb      	ldr	r3, [r7, #24]
 8011352:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	f023 021f 	bic.w	r2, r3, #31
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011360:	431a      	orrs	r2, r3
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801136a:	2b00      	cmp	r3, #0
 801136c:	d009      	beq.n	8011382 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d105      	bne.n	8011382 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	3a01      	subs	r2, #1
 8011380:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	2b00      	cmp	r3, #0
 8011388:	f000 8095 	beq.w	80114b6 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	69db      	ldr	r3, [r3, #28]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d053      	beq.n	801143c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011398:	2b00      	cmp	r3, #0
 801139a:	d01e      	beq.n	80113da <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801139c:	69bb      	ldr	r3, [r7, #24]
 801139e:	681a      	ldr	r2, [r3, #0]
 80113a0:	4b64      	ldr	r3, [pc, #400]	; (8011534 <OSPI_ConfigCmd+0x2e4>)
 80113a2:	4013      	ands	r3, r2
 80113a4:	683a      	ldr	r2, [r7, #0]
 80113a6:	68d1      	ldr	r1, [r2, #12]
 80113a8:	683a      	ldr	r2, [r7, #0]
 80113aa:	6952      	ldr	r2, [r2, #20]
 80113ac:	4311      	orrs	r1, r2
 80113ae:	683a      	ldr	r2, [r7, #0]
 80113b0:	6912      	ldr	r2, [r2, #16]
 80113b2:	4311      	orrs	r1, r2
 80113b4:	683a      	ldr	r2, [r7, #0]
 80113b6:	69d2      	ldr	r2, [r2, #28]
 80113b8:	4311      	orrs	r1, r2
 80113ba:	683a      	ldr	r2, [r7, #0]
 80113bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80113be:	4311      	orrs	r1, r2
 80113c0:	683a      	ldr	r2, [r7, #0]
 80113c2:	6a12      	ldr	r2, [r2, #32]
 80113c4:	4311      	orrs	r1, r2
 80113c6:	683a      	ldr	r2, [r7, #0]
 80113c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80113ca:	4311      	orrs	r1, r2
 80113cc:	683a      	ldr	r2, [r7, #0]
 80113ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80113d0:	430a      	orrs	r2, r1
 80113d2:	431a      	orrs	r2, r3
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	601a      	str	r2, [r3, #0]
 80113d8:	e026      	b.n	8011428 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80113da:	69bb      	ldr	r3, [r7, #24]
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	4b56      	ldr	r3, [pc, #344]	; (8011538 <OSPI_ConfigCmd+0x2e8>)
 80113e0:	4013      	ands	r3, r2
 80113e2:	683a      	ldr	r2, [r7, #0]
 80113e4:	68d1      	ldr	r1, [r2, #12]
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	6952      	ldr	r2, [r2, #20]
 80113ea:	4311      	orrs	r1, r2
 80113ec:	683a      	ldr	r2, [r7, #0]
 80113ee:	6912      	ldr	r2, [r2, #16]
 80113f0:	4311      	orrs	r1, r2
 80113f2:	683a      	ldr	r2, [r7, #0]
 80113f4:	69d2      	ldr	r2, [r2, #28]
 80113f6:	4311      	orrs	r1, r2
 80113f8:	683a      	ldr	r2, [r7, #0]
 80113fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80113fc:	4311      	orrs	r1, r2
 80113fe:	683a      	ldr	r2, [r7, #0]
 8011400:	6a12      	ldr	r2, [r2, #32]
 8011402:	430a      	orrs	r2, r1
 8011404:	431a      	orrs	r2, r3
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801140e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011412:	d109      	bne.n	8011428 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8011418:	2b08      	cmp	r3, #8
 801141a:	d105      	bne.n	8011428 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011424:	69bb      	ldr	r3, [r7, #24]
 8011426:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	689a      	ldr	r2, [r3, #8]
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	683a      	ldr	r2, [r7, #0]
 8011436:	6992      	ldr	r2, [r2, #24]
 8011438:	649a      	str	r2, [r3, #72]	; 0x48
 801143a:	e074      	b.n	8011526 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011440:	2b00      	cmp	r3, #0
 8011442:	d015      	beq.n	8011470 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	4b3c      	ldr	r3, [pc, #240]	; (801153c <OSPI_ConfigCmd+0x2ec>)
 801144a:	4013      	ands	r3, r2
 801144c:	683a      	ldr	r2, [r7, #0]
 801144e:	68d1      	ldr	r1, [r2, #12]
 8011450:	683a      	ldr	r2, [r7, #0]
 8011452:	6952      	ldr	r2, [r2, #20]
 8011454:	4311      	orrs	r1, r2
 8011456:	683a      	ldr	r2, [r7, #0]
 8011458:	6912      	ldr	r2, [r2, #16]
 801145a:	4311      	orrs	r1, r2
 801145c:	683a      	ldr	r2, [r7, #0]
 801145e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011460:	4311      	orrs	r1, r2
 8011462:	683a      	ldr	r2, [r7, #0]
 8011464:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011466:	430a      	orrs	r2, r1
 8011468:	431a      	orrs	r2, r3
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	601a      	str	r2, [r3, #0]
 801146e:	e01d      	b.n	80114ac <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	68d9      	ldr	r1, [r3, #12]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	695b      	ldr	r3, [r3, #20]
 8011480:	4319      	orrs	r1, r3
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	691b      	ldr	r3, [r3, #16]
 8011486:	430b      	orrs	r3, r1
 8011488:	431a      	orrs	r2, r3
 801148a:	69bb      	ldr	r3, [r7, #24]
 801148c:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011496:	d109      	bne.n	80114ac <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801149c:	2b08      	cmp	r3, #8
 801149e:	d105      	bne.n	80114ac <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80114a0:	69bb      	ldr	r3, [r7, #24]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80114a8:	69bb      	ldr	r3, [r7, #24]
 80114aa:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	689a      	ldr	r2, [r3, #8]
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	601a      	str	r2, [r3, #0]
 80114b4:	e037      	b.n	8011526 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	69db      	ldr	r3, [r3, #28]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d02e      	beq.n	801151c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d015      	beq.n	80114f2 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	681a      	ldr	r2, [r3, #0]
 80114ca:	4b1d      	ldr	r3, [pc, #116]	; (8011540 <OSPI_ConfigCmd+0x2f0>)
 80114cc:	4013      	ands	r3, r2
 80114ce:	683a      	ldr	r2, [r7, #0]
 80114d0:	69d1      	ldr	r1, [r2, #28]
 80114d2:	683a      	ldr	r2, [r7, #0]
 80114d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80114d6:	4311      	orrs	r1, r2
 80114d8:	683a      	ldr	r2, [r7, #0]
 80114da:	6a12      	ldr	r2, [r2, #32]
 80114dc:	4311      	orrs	r1, r2
 80114de:	683a      	ldr	r2, [r7, #0]
 80114e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80114e2:	4311      	orrs	r1, r2
 80114e4:	683a      	ldr	r2, [r7, #0]
 80114e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80114e8:	430a      	orrs	r2, r1
 80114ea:	431a      	orrs	r2, r3
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	601a      	str	r2, [r3, #0]
 80114f0:	e00e      	b.n	8011510 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	69d9      	ldr	r1, [r3, #28]
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011502:	4319      	orrs	r1, r3
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	6a1b      	ldr	r3, [r3, #32]
 8011508:	430b      	orrs	r3, r1
 801150a:	431a      	orrs	r2, r3
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	683a      	ldr	r2, [r7, #0]
 8011516:	6992      	ldr	r2, [r2, #24]
 8011518:	649a      	str	r2, [r3, #72]	; 0x48
 801151a:	e004      	b.n	8011526 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 801151c:	2301      	movs	r3, #1
 801151e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2208      	movs	r2, #8
 8011524:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8011526:	7ffb      	ldrb	r3, [r7, #31]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3724      	adds	r7, #36	; 0x24
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr
 8011534:	f0ffc0c0 	.word	0xf0ffc0c0
 8011538:	ffffc0c0 	.word	0xffffc0c0
 801153c:	f0ffffc0 	.word	0xf0ffffc0
 8011540:	f0ffc0ff 	.word	0xf0ffc0ff

08011544 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801154c:	4b29      	ldr	r3, [pc, #164]	; (80115f4 <HAL_PWREx_ConfigSupply+0xb0>)
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	f003 0307 	and.w	r3, r3, #7
 8011554:	2b06      	cmp	r3, #6
 8011556:	d00a      	beq.n	801156e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8011558:	4b26      	ldr	r3, [pc, #152]	; (80115f4 <HAL_PWREx_ConfigSupply+0xb0>)
 801155a:	68db      	ldr	r3, [r3, #12]
 801155c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011560:	687a      	ldr	r2, [r7, #4]
 8011562:	429a      	cmp	r2, r3
 8011564:	d001      	beq.n	801156a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8011566:	2301      	movs	r3, #1
 8011568:	e040      	b.n	80115ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801156a:	2300      	movs	r3, #0
 801156c:	e03e      	b.n	80115ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801156e:	4b21      	ldr	r3, [pc, #132]	; (80115f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8011576:	491f      	ldr	r1, [pc, #124]	; (80115f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	4313      	orrs	r3, r2
 801157c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801157e:	f7fa fb27 	bl	800bbd0 <HAL_GetTick>
 8011582:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011584:	e009      	b.n	801159a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011586:	f7fa fb23 	bl	800bbd0 <HAL_GetTick>
 801158a:	4602      	mov	r2, r0
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	1ad3      	subs	r3, r2, r3
 8011590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011594:	d901      	bls.n	801159a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8011596:	2301      	movs	r3, #1
 8011598:	e028      	b.n	80115ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801159a:	4b16      	ldr	r3, [pc, #88]	; (80115f4 <HAL_PWREx_ConfigSupply+0xb0>)
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80115a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115a6:	d1ee      	bne.n	8011586 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b1e      	cmp	r3, #30
 80115ac:	d008      	beq.n	80115c0 <HAL_PWREx_ConfigSupply+0x7c>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2b2e      	cmp	r3, #46	; 0x2e
 80115b2:	d005      	beq.n	80115c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2b1d      	cmp	r3, #29
 80115b8:	d002      	beq.n	80115c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2b2d      	cmp	r3, #45	; 0x2d
 80115be:	d114      	bne.n	80115ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80115c0:	f7fa fb06 	bl	800bbd0 <HAL_GetTick>
 80115c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80115c6:	e009      	b.n	80115dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80115c8:	f7fa fb02 	bl	800bbd0 <HAL_GetTick>
 80115cc:	4602      	mov	r2, r0
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80115d6:	d901      	bls.n	80115dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80115d8:	2301      	movs	r3, #1
 80115da:	e007      	b.n	80115ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80115dc:	4b05      	ldr	r3, [pc, #20]	; (80115f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80115de:	68db      	ldr	r3, [r3, #12]
 80115e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80115e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115e8:	d1ee      	bne.n	80115c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80115ea:	2300      	movs	r3, #0
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3710      	adds	r7, #16
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}
 80115f4:	58024800 	.word	0x58024800

080115f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b08c      	sub	sp, #48	; 0x30
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d102      	bne.n	801160c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011606:	2301      	movs	r3, #1
 8011608:	f000 bc1f 	b.w	8011e4a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	f003 0301 	and.w	r3, r3, #1
 8011614:	2b00      	cmp	r3, #0
 8011616:	f000 80b3 	beq.w	8011780 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801161a:	4b95      	ldr	r3, [pc, #596]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801161c:	691b      	ldr	r3, [r3, #16]
 801161e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011622:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011624:	4b92      	ldr	r3, [pc, #584]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011628:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162c:	2b10      	cmp	r3, #16
 801162e:	d007      	beq.n	8011640 <HAL_RCC_OscConfig+0x48>
 8011630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011632:	2b18      	cmp	r3, #24
 8011634:	d112      	bne.n	801165c <HAL_RCC_OscConfig+0x64>
 8011636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011638:	f003 0303 	and.w	r3, r3, #3
 801163c:	2b02      	cmp	r3, #2
 801163e:	d10d      	bne.n	801165c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011640:	4b8b      	ldr	r3, [pc, #556]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 8098 	beq.w	801177e <HAL_RCC_OscConfig+0x186>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	f040 8093 	bne.w	801177e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8011658:	2301      	movs	r3, #1
 801165a:	e3f6      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011664:	d106      	bne.n	8011674 <HAL_RCC_OscConfig+0x7c>
 8011666:	4b82      	ldr	r3, [pc, #520]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4a81      	ldr	r2, [pc, #516]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011670:	6013      	str	r3, [r2, #0]
 8011672:	e058      	b.n	8011726 <HAL_RCC_OscConfig+0x12e>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d112      	bne.n	80116a2 <HAL_RCC_OscConfig+0xaa>
 801167c:	4b7c      	ldr	r3, [pc, #496]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	4a7b      	ldr	r2, [pc, #492]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011686:	6013      	str	r3, [r2, #0]
 8011688:	4b79      	ldr	r3, [pc, #484]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	4a78      	ldr	r2, [pc, #480]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801168e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011692:	6013      	str	r3, [r2, #0]
 8011694:	4b76      	ldr	r3, [pc, #472]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	4a75      	ldr	r2, [pc, #468]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801169e:	6013      	str	r3, [r2, #0]
 80116a0:	e041      	b.n	8011726 <HAL_RCC_OscConfig+0x12e>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80116aa:	d112      	bne.n	80116d2 <HAL_RCC_OscConfig+0xda>
 80116ac:	4b70      	ldr	r3, [pc, #448]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4a6f      	ldr	r2, [pc, #444]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80116b6:	6013      	str	r3, [r2, #0]
 80116b8:	4b6d      	ldr	r3, [pc, #436]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4a6c      	ldr	r2, [pc, #432]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80116c2:	6013      	str	r3, [r2, #0]
 80116c4:	4b6a      	ldr	r3, [pc, #424]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	4a69      	ldr	r2, [pc, #420]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80116ce:	6013      	str	r3, [r2, #0]
 80116d0:	e029      	b.n	8011726 <HAL_RCC_OscConfig+0x12e>
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80116da:	d112      	bne.n	8011702 <HAL_RCC_OscConfig+0x10a>
 80116dc:	4b64      	ldr	r3, [pc, #400]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4a63      	ldr	r2, [pc, #396]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80116e6:	6013      	str	r3, [r2, #0]
 80116e8:	4b61      	ldr	r3, [pc, #388]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	4a60      	ldr	r2, [pc, #384]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80116f2:	6013      	str	r3, [r2, #0]
 80116f4:	4b5e      	ldr	r3, [pc, #376]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	4a5d      	ldr	r2, [pc, #372]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80116fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80116fe:	6013      	str	r3, [r2, #0]
 8011700:	e011      	b.n	8011726 <HAL_RCC_OscConfig+0x12e>
 8011702:	4b5b      	ldr	r3, [pc, #364]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	4a5a      	ldr	r2, [pc, #360]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801170c:	6013      	str	r3, [r2, #0]
 801170e:	4b58      	ldr	r3, [pc, #352]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4a57      	ldr	r2, [pc, #348]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011718:	6013      	str	r3, [r2, #0]
 801171a:	4b55      	ldr	r3, [pc, #340]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4a54      	ldr	r2, [pc, #336]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011720:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011724:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d013      	beq.n	8011756 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801172e:	f7fa fa4f 	bl	800bbd0 <HAL_GetTick>
 8011732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011734:	e008      	b.n	8011748 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011736:	f7fa fa4b 	bl	800bbd0 <HAL_GetTick>
 801173a:	4602      	mov	r2, r0
 801173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801173e:	1ad3      	subs	r3, r2, r3
 8011740:	2b64      	cmp	r3, #100	; 0x64
 8011742:	d901      	bls.n	8011748 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8011744:	2303      	movs	r3, #3
 8011746:	e380      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011748:	4b49      	ldr	r3, [pc, #292]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011750:	2b00      	cmp	r3, #0
 8011752:	d0f0      	beq.n	8011736 <HAL_RCC_OscConfig+0x13e>
 8011754:	e014      	b.n	8011780 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011756:	f7fa fa3b 	bl	800bbd0 <HAL_GetTick>
 801175a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801175c:	e008      	b.n	8011770 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801175e:	f7fa fa37 	bl	800bbd0 <HAL_GetTick>
 8011762:	4602      	mov	r2, r0
 8011764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011766:	1ad3      	subs	r3, r2, r3
 8011768:	2b64      	cmp	r3, #100	; 0x64
 801176a:	d901      	bls.n	8011770 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 801176c:	2303      	movs	r3, #3
 801176e:	e36c      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011770:	4b3f      	ldr	r3, [pc, #252]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011778:	2b00      	cmp	r3, #0
 801177a:	d1f0      	bne.n	801175e <HAL_RCC_OscConfig+0x166>
 801177c:	e000      	b.n	8011780 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801177e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f003 0302 	and.w	r3, r3, #2
 8011788:	2b00      	cmp	r3, #0
 801178a:	f000 808c 	beq.w	80118a6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801178e:	4b38      	ldr	r3, [pc, #224]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011790:	691b      	ldr	r3, [r3, #16]
 8011792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011796:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011798:	4b35      	ldr	r3, [pc, #212]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801179c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801179e:	6a3b      	ldr	r3, [r7, #32]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d007      	beq.n	80117b4 <HAL_RCC_OscConfig+0x1bc>
 80117a4:	6a3b      	ldr	r3, [r7, #32]
 80117a6:	2b18      	cmp	r3, #24
 80117a8:	d137      	bne.n	801181a <HAL_RCC_OscConfig+0x222>
 80117aa:	69fb      	ldr	r3, [r7, #28]
 80117ac:	f003 0303 	and.w	r3, r3, #3
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d132      	bne.n	801181a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80117b4:	4b2e      	ldr	r3, [pc, #184]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f003 0304 	and.w	r3, r3, #4
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d005      	beq.n	80117cc <HAL_RCC_OscConfig+0x1d4>
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d101      	bne.n	80117cc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80117c8:	2301      	movs	r3, #1
 80117ca:	e33e      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80117cc:	4b28      	ldr	r3, [pc, #160]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f023 0219 	bic.w	r2, r3, #25
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	68db      	ldr	r3, [r3, #12]
 80117d8:	4925      	ldr	r1, [pc, #148]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80117da:	4313      	orrs	r3, r2
 80117dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80117de:	f7fa f9f7 	bl	800bbd0 <HAL_GetTick>
 80117e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80117e4:	e008      	b.n	80117f8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80117e6:	f7fa f9f3 	bl	800bbd0 <HAL_GetTick>
 80117ea:	4602      	mov	r2, r0
 80117ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ee:	1ad3      	subs	r3, r2, r3
 80117f0:	2b02      	cmp	r3, #2
 80117f2:	d901      	bls.n	80117f8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80117f4:	2303      	movs	r3, #3
 80117f6:	e328      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80117f8:	4b1d      	ldr	r3, [pc, #116]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	f003 0304 	and.w	r3, r3, #4
 8011800:	2b00      	cmp	r3, #0
 8011802:	d0f0      	beq.n	80117e6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011804:	4b1a      	ldr	r3, [pc, #104]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	691b      	ldr	r3, [r3, #16]
 8011810:	061b      	lsls	r3, r3, #24
 8011812:	4917      	ldr	r1, [pc, #92]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011814:	4313      	orrs	r3, r2
 8011816:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011818:	e045      	b.n	80118a6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	68db      	ldr	r3, [r3, #12]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d028      	beq.n	8011874 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011822:	4b13      	ldr	r3, [pc, #76]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f023 0219 	bic.w	r2, r3, #25
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	68db      	ldr	r3, [r3, #12]
 801182e:	4910      	ldr	r1, [pc, #64]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011830:	4313      	orrs	r3, r2
 8011832:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011834:	f7fa f9cc 	bl	800bbd0 <HAL_GetTick>
 8011838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801183a:	e008      	b.n	801184e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801183c:	f7fa f9c8 	bl	800bbd0 <HAL_GetTick>
 8011840:	4602      	mov	r2, r0
 8011842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	2b02      	cmp	r3, #2
 8011848:	d901      	bls.n	801184e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 801184a:	2303      	movs	r3, #3
 801184c:	e2fd      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801184e:	4b08      	ldr	r3, [pc, #32]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f003 0304 	and.w	r3, r3, #4
 8011856:	2b00      	cmp	r3, #0
 8011858:	d0f0      	beq.n	801183c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801185a:	4b05      	ldr	r3, [pc, #20]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	691b      	ldr	r3, [r3, #16]
 8011866:	061b      	lsls	r3, r3, #24
 8011868:	4901      	ldr	r1, [pc, #4]	; (8011870 <HAL_RCC_OscConfig+0x278>)
 801186a:	4313      	orrs	r3, r2
 801186c:	604b      	str	r3, [r1, #4]
 801186e:	e01a      	b.n	80118a6 <HAL_RCC_OscConfig+0x2ae>
 8011870:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011874:	4b97      	ldr	r3, [pc, #604]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4a96      	ldr	r2, [pc, #600]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 801187a:	f023 0301 	bic.w	r3, r3, #1
 801187e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011880:	f7fa f9a6 	bl	800bbd0 <HAL_GetTick>
 8011884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011886:	e008      	b.n	801189a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011888:	f7fa f9a2 	bl	800bbd0 <HAL_GetTick>
 801188c:	4602      	mov	r2, r0
 801188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011890:	1ad3      	subs	r3, r2, r3
 8011892:	2b02      	cmp	r3, #2
 8011894:	d901      	bls.n	801189a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8011896:	2303      	movs	r3, #3
 8011898:	e2d7      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801189a:	4b8e      	ldr	r3, [pc, #568]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	f003 0304 	and.w	r3, r3, #4
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d1f0      	bne.n	8011888 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f003 0310 	and.w	r3, r3, #16
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d06a      	beq.n	8011988 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80118b2:	4b88      	ldr	r3, [pc, #544]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 80118b4:	691b      	ldr	r3, [r3, #16]
 80118b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80118ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80118bc:	4b85      	ldr	r3, [pc, #532]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 80118be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	2b08      	cmp	r3, #8
 80118c6:	d007      	beq.n	80118d8 <HAL_RCC_OscConfig+0x2e0>
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	2b18      	cmp	r3, #24
 80118cc:	d11b      	bne.n	8011906 <HAL_RCC_OscConfig+0x30e>
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	f003 0303 	and.w	r3, r3, #3
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d116      	bne.n	8011906 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80118d8:	4b7e      	ldr	r3, [pc, #504]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d005      	beq.n	80118f0 <HAL_RCC_OscConfig+0x2f8>
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	69db      	ldr	r3, [r3, #28]
 80118e8:	2b80      	cmp	r3, #128	; 0x80
 80118ea:	d001      	beq.n	80118f0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80118ec:	2301      	movs	r3, #1
 80118ee:	e2ac      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80118f0:	4b78      	ldr	r3, [pc, #480]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6a1b      	ldr	r3, [r3, #32]
 80118fc:	061b      	lsls	r3, r3, #24
 80118fe:	4975      	ldr	r1, [pc, #468]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011900:	4313      	orrs	r3, r2
 8011902:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011904:	e040      	b.n	8011988 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	69db      	ldr	r3, [r3, #28]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d023      	beq.n	8011956 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801190e:	4b71      	ldr	r3, [pc, #452]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4a70      	ldr	r2, [pc, #448]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801191a:	f7fa f959 	bl	800bbd0 <HAL_GetTick>
 801191e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011920:	e008      	b.n	8011934 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011922:	f7fa f955 	bl	800bbd0 <HAL_GetTick>
 8011926:	4602      	mov	r2, r0
 8011928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192a:	1ad3      	subs	r3, r2, r3
 801192c:	2b02      	cmp	r3, #2
 801192e:	d901      	bls.n	8011934 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8011930:	2303      	movs	r3, #3
 8011932:	e28a      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011934:	4b67      	ldr	r3, [pc, #412]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801193c:	2b00      	cmp	r3, #0
 801193e:	d0f0      	beq.n	8011922 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011940:	4b64      	ldr	r3, [pc, #400]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6a1b      	ldr	r3, [r3, #32]
 801194c:	061b      	lsls	r3, r3, #24
 801194e:	4961      	ldr	r1, [pc, #388]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011950:	4313      	orrs	r3, r2
 8011952:	60cb      	str	r3, [r1, #12]
 8011954:	e018      	b.n	8011988 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011956:	4b5f      	ldr	r3, [pc, #380]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4a5e      	ldr	r2, [pc, #376]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 801195c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011962:	f7fa f935 	bl	800bbd0 <HAL_GetTick>
 8011966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011968:	e008      	b.n	801197c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801196a:	f7fa f931 	bl	800bbd0 <HAL_GetTick>
 801196e:	4602      	mov	r2, r0
 8011970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	2b02      	cmp	r3, #2
 8011976:	d901      	bls.n	801197c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8011978:	2303      	movs	r3, #3
 801197a:	e266      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801197c:	4b55      	ldr	r3, [pc, #340]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011984:	2b00      	cmp	r3, #0
 8011986:	d1f0      	bne.n	801196a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	f003 0308 	and.w	r3, r3, #8
 8011990:	2b00      	cmp	r3, #0
 8011992:	d036      	beq.n	8011a02 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	695b      	ldr	r3, [r3, #20]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d019      	beq.n	80119d0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801199c:	4b4d      	ldr	r3, [pc, #308]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 801199e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119a0:	4a4c      	ldr	r2, [pc, #304]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 80119a2:	f043 0301 	orr.w	r3, r3, #1
 80119a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80119a8:	f7fa f912 	bl	800bbd0 <HAL_GetTick>
 80119ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80119ae:	e008      	b.n	80119c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80119b0:	f7fa f90e 	bl	800bbd0 <HAL_GetTick>
 80119b4:	4602      	mov	r2, r0
 80119b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b8:	1ad3      	subs	r3, r2, r3
 80119ba:	2b02      	cmp	r3, #2
 80119bc:	d901      	bls.n	80119c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80119be:	2303      	movs	r3, #3
 80119c0:	e243      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80119c2:	4b44      	ldr	r3, [pc, #272]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 80119c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119c6:	f003 0302 	and.w	r3, r3, #2
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d0f0      	beq.n	80119b0 <HAL_RCC_OscConfig+0x3b8>
 80119ce:	e018      	b.n	8011a02 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80119d0:	4b40      	ldr	r3, [pc, #256]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 80119d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119d4:	4a3f      	ldr	r2, [pc, #252]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 80119d6:	f023 0301 	bic.w	r3, r3, #1
 80119da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80119dc:	f7fa f8f8 	bl	800bbd0 <HAL_GetTick>
 80119e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80119e2:	e008      	b.n	80119f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80119e4:	f7fa f8f4 	bl	800bbd0 <HAL_GetTick>
 80119e8:	4602      	mov	r2, r0
 80119ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ec:	1ad3      	subs	r3, r2, r3
 80119ee:	2b02      	cmp	r3, #2
 80119f0:	d901      	bls.n	80119f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80119f2:	2303      	movs	r3, #3
 80119f4:	e229      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80119f6:	4b37      	ldr	r3, [pc, #220]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 80119f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119fa:	f003 0302 	and.w	r3, r3, #2
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1f0      	bne.n	80119e4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f003 0320 	and.w	r3, r3, #32
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d036      	beq.n	8011a7c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	699b      	ldr	r3, [r3, #24]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d019      	beq.n	8011a4a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011a16:	4b2f      	ldr	r3, [pc, #188]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	4a2e      	ldr	r2, [pc, #184]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011a1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011a20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011a22:	f7fa f8d5 	bl	800bbd0 <HAL_GetTick>
 8011a26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011a28:	e008      	b.n	8011a3c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011a2a:	f7fa f8d1 	bl	800bbd0 <HAL_GetTick>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a32:	1ad3      	subs	r3, r2, r3
 8011a34:	2b02      	cmp	r3, #2
 8011a36:	d901      	bls.n	8011a3c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8011a38:	2303      	movs	r3, #3
 8011a3a:	e206      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011a3c:	4b25      	ldr	r3, [pc, #148]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d0f0      	beq.n	8011a2a <HAL_RCC_OscConfig+0x432>
 8011a48:	e018      	b.n	8011a7c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011a4a:	4b22      	ldr	r3, [pc, #136]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4a21      	ldr	r2, [pc, #132]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011a56:	f7fa f8bb 	bl	800bbd0 <HAL_GetTick>
 8011a5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011a5c:	e008      	b.n	8011a70 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011a5e:	f7fa f8b7 	bl	800bbd0 <HAL_GetTick>
 8011a62:	4602      	mov	r2, r0
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	1ad3      	subs	r3, r2, r3
 8011a68:	2b02      	cmp	r3, #2
 8011a6a:	d901      	bls.n	8011a70 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8011a6c:	2303      	movs	r3, #3
 8011a6e:	e1ec      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011a70:	4b18      	ldr	r3, [pc, #96]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d1f0      	bne.n	8011a5e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f003 0304 	and.w	r3, r3, #4
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f000 80af 	beq.w	8011be8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011a8a:	4b13      	ldr	r3, [pc, #76]	; (8011ad8 <HAL_RCC_OscConfig+0x4e0>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	4a12      	ldr	r2, [pc, #72]	; (8011ad8 <HAL_RCC_OscConfig+0x4e0>)
 8011a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011a96:	f7fa f89b 	bl	800bbd0 <HAL_GetTick>
 8011a9a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a9c:	e008      	b.n	8011ab0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011a9e:	f7fa f897 	bl	800bbd0 <HAL_GetTick>
 8011aa2:	4602      	mov	r2, r0
 8011aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	2b64      	cmp	r3, #100	; 0x64
 8011aaa:	d901      	bls.n	8011ab0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8011aac:	2303      	movs	r3, #3
 8011aae:	e1cc      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011ab0:	4b09      	ldr	r3, [pc, #36]	; (8011ad8 <HAL_RCC_OscConfig+0x4e0>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d0f0      	beq.n	8011a9e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	689b      	ldr	r3, [r3, #8]
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d10b      	bne.n	8011adc <HAL_RCC_OscConfig+0x4e4>
 8011ac4:	4b03      	ldr	r3, [pc, #12]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ac8:	4a02      	ldr	r2, [pc, #8]	; (8011ad4 <HAL_RCC_OscConfig+0x4dc>)
 8011aca:	f043 0301 	orr.w	r3, r3, #1
 8011ace:	6713      	str	r3, [r2, #112]	; 0x70
 8011ad0:	e05b      	b.n	8011b8a <HAL_RCC_OscConfig+0x592>
 8011ad2:	bf00      	nop
 8011ad4:	58024400 	.word	0x58024400
 8011ad8:	58024800 	.word	0x58024800
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	689b      	ldr	r3, [r3, #8]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d112      	bne.n	8011b0a <HAL_RCC_OscConfig+0x512>
 8011ae4:	4b9d      	ldr	r3, [pc, #628]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ae8:	4a9c      	ldr	r2, [pc, #624]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011aea:	f023 0301 	bic.w	r3, r3, #1
 8011aee:	6713      	str	r3, [r2, #112]	; 0x70
 8011af0:	4b9a      	ldr	r3, [pc, #616]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011af4:	4a99      	ldr	r2, [pc, #612]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011afa:	6713      	str	r3, [r2, #112]	; 0x70
 8011afc:	4b97      	ldr	r3, [pc, #604]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b00:	4a96      	ldr	r2, [pc, #600]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b02:	f023 0304 	bic.w	r3, r3, #4
 8011b06:	6713      	str	r3, [r2, #112]	; 0x70
 8011b08:	e03f      	b.n	8011b8a <HAL_RCC_OscConfig+0x592>
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	689b      	ldr	r3, [r3, #8]
 8011b0e:	2b05      	cmp	r3, #5
 8011b10:	d112      	bne.n	8011b38 <HAL_RCC_OscConfig+0x540>
 8011b12:	4b92      	ldr	r3, [pc, #584]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b16:	4a91      	ldr	r2, [pc, #580]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b18:	f043 0304 	orr.w	r3, r3, #4
 8011b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8011b1e:	4b8f      	ldr	r3, [pc, #572]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b22:	4a8e      	ldr	r2, [pc, #568]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b28:	6713      	str	r3, [r2, #112]	; 0x70
 8011b2a:	4b8c      	ldr	r3, [pc, #560]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b2e:	4a8b      	ldr	r2, [pc, #556]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b30:	f043 0301 	orr.w	r3, r3, #1
 8011b34:	6713      	str	r3, [r2, #112]	; 0x70
 8011b36:	e028      	b.n	8011b8a <HAL_RCC_OscConfig+0x592>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	689b      	ldr	r3, [r3, #8]
 8011b3c:	2b85      	cmp	r3, #133	; 0x85
 8011b3e:	d112      	bne.n	8011b66 <HAL_RCC_OscConfig+0x56e>
 8011b40:	4b86      	ldr	r3, [pc, #536]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b44:	4a85      	ldr	r2, [pc, #532]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b46:	f043 0304 	orr.w	r3, r3, #4
 8011b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8011b4c:	4b83      	ldr	r3, [pc, #524]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b50:	4a82      	ldr	r2, [pc, #520]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b56:	6713      	str	r3, [r2, #112]	; 0x70
 8011b58:	4b80      	ldr	r3, [pc, #512]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b5c:	4a7f      	ldr	r2, [pc, #508]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b5e:	f043 0301 	orr.w	r3, r3, #1
 8011b62:	6713      	str	r3, [r2, #112]	; 0x70
 8011b64:	e011      	b.n	8011b8a <HAL_RCC_OscConfig+0x592>
 8011b66:	4b7d      	ldr	r3, [pc, #500]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b6a:	4a7c      	ldr	r2, [pc, #496]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b6c:	f023 0301 	bic.w	r3, r3, #1
 8011b70:	6713      	str	r3, [r2, #112]	; 0x70
 8011b72:	4b7a      	ldr	r3, [pc, #488]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b76:	4a79      	ldr	r2, [pc, #484]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b78:	f023 0304 	bic.w	r3, r3, #4
 8011b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8011b7e:	4b77      	ldr	r3, [pc, #476]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b82:	4a76      	ldr	r2, [pc, #472]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	689b      	ldr	r3, [r3, #8]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d015      	beq.n	8011bbe <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b92:	f7fa f81d 	bl	800bbd0 <HAL_GetTick>
 8011b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011b98:	e00a      	b.n	8011bb0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011b9a:	f7fa f819 	bl	800bbd0 <HAL_GetTick>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba2:	1ad3      	subs	r3, r2, r3
 8011ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d901      	bls.n	8011bb0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8011bac:	2303      	movs	r3, #3
 8011bae:	e14c      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011bb0:	4b6a      	ldr	r3, [pc, #424]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bb4:	f003 0302 	and.w	r3, r3, #2
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d0ee      	beq.n	8011b9a <HAL_RCC_OscConfig+0x5a2>
 8011bbc:	e014      	b.n	8011be8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011bbe:	f7fa f807 	bl	800bbd0 <HAL_GetTick>
 8011bc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011bc4:	e00a      	b.n	8011bdc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011bc6:	f7fa f803 	bl	800bbd0 <HAL_GetTick>
 8011bca:	4602      	mov	r2, r0
 8011bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bce:	1ad3      	subs	r3, r2, r3
 8011bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	d901      	bls.n	8011bdc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8011bd8:	2303      	movs	r3, #3
 8011bda:	e136      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011bdc:	4b5f      	ldr	r3, [pc, #380]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011be0:	f003 0302 	and.w	r3, r3, #2
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d1ee      	bne.n	8011bc6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	f000 812b 	beq.w	8011e48 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8011bf2:	4b5a      	ldr	r3, [pc, #360]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011bf4:	691b      	ldr	r3, [r3, #16]
 8011bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011bfa:	2b18      	cmp	r3, #24
 8011bfc:	f000 80bb 	beq.w	8011d76 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c04:	2b02      	cmp	r3, #2
 8011c06:	f040 8095 	bne.w	8011d34 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011c0a:	4b54      	ldr	r3, [pc, #336]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	4a53      	ldr	r2, [pc, #332]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c16:	f7f9 ffdb 	bl	800bbd0 <HAL_GetTick>
 8011c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011c1c:	e008      	b.n	8011c30 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011c1e:	f7f9 ffd7 	bl	800bbd0 <HAL_GetTick>
 8011c22:	4602      	mov	r2, r0
 8011c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c26:	1ad3      	subs	r3, r2, r3
 8011c28:	2b02      	cmp	r3, #2
 8011c2a:	d901      	bls.n	8011c30 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8011c2c:	2303      	movs	r3, #3
 8011c2e:	e10c      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011c30:	4b4a      	ldr	r3, [pc, #296]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d1f0      	bne.n	8011c1e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011c3c:	4b47      	ldr	r3, [pc, #284]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c40:	4b47      	ldr	r3, [pc, #284]	; (8011d60 <HAL_RCC_OscConfig+0x768>)
 8011c42:	4013      	ands	r3, r2
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011c4c:	0112      	lsls	r2, r2, #4
 8011c4e:	430a      	orrs	r2, r1
 8011c50:	4942      	ldr	r1, [pc, #264]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011c52:	4313      	orrs	r3, r2
 8011c54:	628b      	str	r3, [r1, #40]	; 0x28
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c5a:	3b01      	subs	r3, #1
 8011c5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c64:	3b01      	subs	r3, #1
 8011c66:	025b      	lsls	r3, r3, #9
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	431a      	orrs	r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c70:	3b01      	subs	r3, #1
 8011c72:	041b      	lsls	r3, r3, #16
 8011c74:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011c78:	431a      	orrs	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	061b      	lsls	r3, r3, #24
 8011c82:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011c86:	4935      	ldr	r1, [pc, #212]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8011c8c:	4b33      	ldr	r3, [pc, #204]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c90:	4a32      	ldr	r2, [pc, #200]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011c92:	f023 0301 	bic.w	r3, r3, #1
 8011c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011c98:	4b30      	ldr	r3, [pc, #192]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c9c:	4b31      	ldr	r3, [pc, #196]	; (8011d64 <HAL_RCC_OscConfig+0x76c>)
 8011c9e:	4013      	ands	r3, r2
 8011ca0:	687a      	ldr	r2, [r7, #4]
 8011ca2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011ca4:	00d2      	lsls	r2, r2, #3
 8011ca6:	492d      	ldr	r1, [pc, #180]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8011cac:	4b2b      	ldr	r3, [pc, #172]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cb0:	f023 020c 	bic.w	r2, r3, #12
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb8:	4928      	ldr	r1, [pc, #160]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011cba:	4313      	orrs	r3, r2
 8011cbc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011cbe:	4b27      	ldr	r3, [pc, #156]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cc2:	f023 0202 	bic.w	r2, r3, #2
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cca:	4924      	ldr	r1, [pc, #144]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011ccc:	4313      	orrs	r3, r2
 8011cce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011cd0:	4b22      	ldr	r3, [pc, #136]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cd4:	4a21      	ldr	r2, [pc, #132]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011cdc:	4b1f      	ldr	r3, [pc, #124]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ce0:	4a1e      	ldr	r2, [pc, #120]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011ce8:	4b1c      	ldr	r3, [pc, #112]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cec:	4a1b      	ldr	r2, [pc, #108]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8011cf4:	4b19      	ldr	r3, [pc, #100]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cf8:	4a18      	ldr	r2, [pc, #96]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011cfa:	f043 0301 	orr.w	r3, r3, #1
 8011cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011d00:	4b16      	ldr	r3, [pc, #88]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4a15      	ldr	r2, [pc, #84]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d0c:	f7f9 ff60 	bl	800bbd0 <HAL_GetTick>
 8011d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011d12:	e008      	b.n	8011d26 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011d14:	f7f9 ff5c 	bl	800bbd0 <HAL_GetTick>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1c:	1ad3      	subs	r3, r2, r3
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d901      	bls.n	8011d26 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8011d22:	2303      	movs	r3, #3
 8011d24:	e091      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011d26:	4b0d      	ldr	r3, [pc, #52]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d0f0      	beq.n	8011d14 <HAL_RCC_OscConfig+0x71c>
 8011d32:	e089      	b.n	8011e48 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d34:	4b09      	ldr	r3, [pc, #36]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	4a08      	ldr	r2, [pc, #32]	; (8011d5c <HAL_RCC_OscConfig+0x764>)
 8011d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d40:	f7f9 ff46 	bl	800bbd0 <HAL_GetTick>
 8011d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011d46:	e00f      	b.n	8011d68 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011d48:	f7f9 ff42 	bl	800bbd0 <HAL_GetTick>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d50:	1ad3      	subs	r3, r2, r3
 8011d52:	2b02      	cmp	r3, #2
 8011d54:	d908      	bls.n	8011d68 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8011d56:	2303      	movs	r3, #3
 8011d58:	e077      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
 8011d5a:	bf00      	nop
 8011d5c:	58024400 	.word	0x58024400
 8011d60:	fffffc0c 	.word	0xfffffc0c
 8011d64:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011d68:	4b3a      	ldr	r3, [pc, #232]	; (8011e54 <HAL_RCC_OscConfig+0x85c>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d1e9      	bne.n	8011d48 <HAL_RCC_OscConfig+0x750>
 8011d74:	e068      	b.n	8011e48 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011d76:	4b37      	ldr	r3, [pc, #220]	; (8011e54 <HAL_RCC_OscConfig+0x85c>)
 8011d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d7a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011d7c:	4b35      	ldr	r3, [pc, #212]	; (8011e54 <HAL_RCC_OscConfig+0x85c>)
 8011d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d80:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d86:	2b01      	cmp	r3, #1
 8011d88:	d031      	beq.n	8011dee <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	f003 0203 	and.w	r2, r3, #3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d12a      	bne.n	8011dee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	091b      	lsrs	r3, r3, #4
 8011d9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d122      	bne.n	8011dee <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011db2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d11a      	bne.n	8011dee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	0a5b      	lsrs	r3, r3, #9
 8011dbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dc4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d111      	bne.n	8011dee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	0c1b      	lsrs	r3, r3, #16
 8011dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d108      	bne.n	8011dee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	0e1b      	lsrs	r3, r3, #24
 8011de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011de8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d001      	beq.n	8011df2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8011dee:	2301      	movs	r3, #1
 8011df0:	e02b      	b.n	8011e4a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011df2:	4b18      	ldr	r3, [pc, #96]	; (8011e54 <HAL_RCC_OscConfig+0x85c>)
 8011df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011df6:	08db      	lsrs	r3, r3, #3
 8011df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011dfc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e02:	693a      	ldr	r2, [r7, #16]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d01f      	beq.n	8011e48 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8011e08:	4b12      	ldr	r3, [pc, #72]	; (8011e54 <HAL_RCC_OscConfig+0x85c>)
 8011e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e0c:	4a11      	ldr	r2, [pc, #68]	; (8011e54 <HAL_RCC_OscConfig+0x85c>)
 8011e0e:	f023 0301 	bic.w	r3, r3, #1
 8011e12:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011e14:	f7f9 fedc 	bl	800bbd0 <HAL_GetTick>
 8011e18:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011e1a:	bf00      	nop
 8011e1c:	f7f9 fed8 	bl	800bbd0 <HAL_GetTick>
 8011e20:	4602      	mov	r2, r0
 8011e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d0f9      	beq.n	8011e1c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011e28:	4b0a      	ldr	r3, [pc, #40]	; (8011e54 <HAL_RCC_OscConfig+0x85c>)
 8011e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e2c:	4b0a      	ldr	r3, [pc, #40]	; (8011e58 <HAL_RCC_OscConfig+0x860>)
 8011e2e:	4013      	ands	r3, r2
 8011e30:	687a      	ldr	r2, [r7, #4]
 8011e32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011e34:	00d2      	lsls	r2, r2, #3
 8011e36:	4907      	ldr	r1, [pc, #28]	; (8011e54 <HAL_RCC_OscConfig+0x85c>)
 8011e38:	4313      	orrs	r3, r2
 8011e3a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8011e3c:	4b05      	ldr	r3, [pc, #20]	; (8011e54 <HAL_RCC_OscConfig+0x85c>)
 8011e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e40:	4a04      	ldr	r2, [pc, #16]	; (8011e54 <HAL_RCC_OscConfig+0x85c>)
 8011e42:	f043 0301 	orr.w	r3, r3, #1
 8011e46:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8011e48:	2300      	movs	r3, #0
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3730      	adds	r7, #48	; 0x30
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	58024400 	.word	0x58024400
 8011e58:	ffff0007 	.word	0xffff0007

08011e5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b086      	sub	sp, #24
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d101      	bne.n	8011e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	e19c      	b.n	80121aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011e70:	4b8a      	ldr	r3, [pc, #552]	; (801209c <HAL_RCC_ClockConfig+0x240>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f003 030f 	and.w	r3, r3, #15
 8011e78:	683a      	ldr	r2, [r7, #0]
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d910      	bls.n	8011ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011e7e:	4b87      	ldr	r3, [pc, #540]	; (801209c <HAL_RCC_ClockConfig+0x240>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	f023 020f 	bic.w	r2, r3, #15
 8011e86:	4985      	ldr	r1, [pc, #532]	; (801209c <HAL_RCC_ClockConfig+0x240>)
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	4313      	orrs	r3, r2
 8011e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011e8e:	4b83      	ldr	r3, [pc, #524]	; (801209c <HAL_RCC_ClockConfig+0x240>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	f003 030f 	and.w	r3, r3, #15
 8011e96:	683a      	ldr	r2, [r7, #0]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d001      	beq.n	8011ea0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	e184      	b.n	80121aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	f003 0304 	and.w	r3, r3, #4
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d010      	beq.n	8011ece <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	691a      	ldr	r2, [r3, #16]
 8011eb0:	4b7b      	ldr	r3, [pc, #492]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011eb2:	699b      	ldr	r3, [r3, #24]
 8011eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d908      	bls.n	8011ece <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011ebc:	4b78      	ldr	r3, [pc, #480]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011ebe:	699b      	ldr	r3, [r3, #24]
 8011ec0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	691b      	ldr	r3, [r3, #16]
 8011ec8:	4975      	ldr	r1, [pc, #468]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011eca:	4313      	orrs	r3, r2
 8011ecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f003 0308 	and.w	r3, r3, #8
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d010      	beq.n	8011efc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	695a      	ldr	r2, [r3, #20]
 8011ede:	4b70      	ldr	r3, [pc, #448]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011ee0:	69db      	ldr	r3, [r3, #28]
 8011ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d908      	bls.n	8011efc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011eea:	4b6d      	ldr	r3, [pc, #436]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011eec:	69db      	ldr	r3, [r3, #28]
 8011eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	695b      	ldr	r3, [r3, #20]
 8011ef6:	496a      	ldr	r1, [pc, #424]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011ef8:	4313      	orrs	r3, r2
 8011efa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f003 0310 	and.w	r3, r3, #16
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d010      	beq.n	8011f2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	699a      	ldr	r2, [r3, #24]
 8011f0c:	4b64      	ldr	r3, [pc, #400]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011f0e:	69db      	ldr	r3, [r3, #28]
 8011f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d908      	bls.n	8011f2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011f18:	4b61      	ldr	r3, [pc, #388]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011f1a:	69db      	ldr	r3, [r3, #28]
 8011f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	699b      	ldr	r3, [r3, #24]
 8011f24:	495e      	ldr	r1, [pc, #376]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011f26:	4313      	orrs	r3, r2
 8011f28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	f003 0320 	and.w	r3, r3, #32
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d010      	beq.n	8011f58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	69da      	ldr	r2, [r3, #28]
 8011f3a:	4b59      	ldr	r3, [pc, #356]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011f3c:	6a1b      	ldr	r3, [r3, #32]
 8011f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d908      	bls.n	8011f58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011f46:	4b56      	ldr	r3, [pc, #344]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011f48:	6a1b      	ldr	r3, [r3, #32]
 8011f4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	69db      	ldr	r3, [r3, #28]
 8011f52:	4953      	ldr	r1, [pc, #332]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011f54:	4313      	orrs	r3, r2
 8011f56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	f003 0302 	and.w	r3, r3, #2
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d010      	beq.n	8011f86 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	68da      	ldr	r2, [r3, #12]
 8011f68:	4b4d      	ldr	r3, [pc, #308]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011f6a:	699b      	ldr	r3, [r3, #24]
 8011f6c:	f003 030f 	and.w	r3, r3, #15
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d908      	bls.n	8011f86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011f74:	4b4a      	ldr	r3, [pc, #296]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011f76:	699b      	ldr	r3, [r3, #24]
 8011f78:	f023 020f 	bic.w	r2, r3, #15
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	4947      	ldr	r1, [pc, #284]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011f82:	4313      	orrs	r3, r2
 8011f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f003 0301 	and.w	r3, r3, #1
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d055      	beq.n	801203e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011f92:	4b43      	ldr	r3, [pc, #268]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011f94:	699b      	ldr	r3, [r3, #24]
 8011f96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	689b      	ldr	r3, [r3, #8]
 8011f9e:	4940      	ldr	r1, [pc, #256]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011fa0:	4313      	orrs	r3, r2
 8011fa2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	685b      	ldr	r3, [r3, #4]
 8011fa8:	2b02      	cmp	r3, #2
 8011faa:	d107      	bne.n	8011fbc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011fac:	4b3c      	ldr	r3, [pc, #240]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d121      	bne.n	8011ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	e0f6      	b.n	80121aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	2b03      	cmp	r3, #3
 8011fc2:	d107      	bne.n	8011fd4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011fc4:	4b36      	ldr	r3, [pc, #216]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d115      	bne.n	8011ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	e0ea      	b.n	80121aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d107      	bne.n	8011fec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011fdc:	4b30      	ldr	r3, [pc, #192]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d109      	bne.n	8011ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e0de      	b.n	80121aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011fec:	4b2c      	ldr	r3, [pc, #176]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f003 0304 	and.w	r3, r3, #4
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d101      	bne.n	8011ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e0d6      	b.n	80121aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011ffc:	4b28      	ldr	r3, [pc, #160]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8011ffe:	691b      	ldr	r3, [r3, #16]
 8012000:	f023 0207 	bic.w	r2, r3, #7
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	4925      	ldr	r1, [pc, #148]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 801200a:	4313      	orrs	r3, r2
 801200c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801200e:	f7f9 fddf 	bl	800bbd0 <HAL_GetTick>
 8012012:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012014:	e00a      	b.n	801202c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012016:	f7f9 fddb 	bl	800bbd0 <HAL_GetTick>
 801201a:	4602      	mov	r2, r0
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	f241 3288 	movw	r2, #5000	; 0x1388
 8012024:	4293      	cmp	r3, r2
 8012026:	d901      	bls.n	801202c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8012028:	2303      	movs	r3, #3
 801202a:	e0be      	b.n	80121aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801202c:	4b1c      	ldr	r3, [pc, #112]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 801202e:	691b      	ldr	r3, [r3, #16]
 8012030:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	00db      	lsls	r3, r3, #3
 801203a:	429a      	cmp	r2, r3
 801203c:	d1eb      	bne.n	8012016 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f003 0302 	and.w	r3, r3, #2
 8012046:	2b00      	cmp	r3, #0
 8012048:	d010      	beq.n	801206c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	68da      	ldr	r2, [r3, #12]
 801204e:	4b14      	ldr	r3, [pc, #80]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8012050:	699b      	ldr	r3, [r3, #24]
 8012052:	f003 030f 	and.w	r3, r3, #15
 8012056:	429a      	cmp	r2, r3
 8012058:	d208      	bcs.n	801206c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801205a:	4b11      	ldr	r3, [pc, #68]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 801205c:	699b      	ldr	r3, [r3, #24]
 801205e:	f023 020f 	bic.w	r2, r3, #15
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	490e      	ldr	r1, [pc, #56]	; (80120a0 <HAL_RCC_ClockConfig+0x244>)
 8012068:	4313      	orrs	r3, r2
 801206a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801206c:	4b0b      	ldr	r3, [pc, #44]	; (801209c <HAL_RCC_ClockConfig+0x240>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	f003 030f 	and.w	r3, r3, #15
 8012074:	683a      	ldr	r2, [r7, #0]
 8012076:	429a      	cmp	r2, r3
 8012078:	d214      	bcs.n	80120a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801207a:	4b08      	ldr	r3, [pc, #32]	; (801209c <HAL_RCC_ClockConfig+0x240>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	f023 020f 	bic.w	r2, r3, #15
 8012082:	4906      	ldr	r1, [pc, #24]	; (801209c <HAL_RCC_ClockConfig+0x240>)
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	4313      	orrs	r3, r2
 8012088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801208a:	4b04      	ldr	r3, [pc, #16]	; (801209c <HAL_RCC_ClockConfig+0x240>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	f003 030f 	and.w	r3, r3, #15
 8012092:	683a      	ldr	r2, [r7, #0]
 8012094:	429a      	cmp	r2, r3
 8012096:	d005      	beq.n	80120a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8012098:	2301      	movs	r3, #1
 801209a:	e086      	b.n	80121aa <HAL_RCC_ClockConfig+0x34e>
 801209c:	52002000 	.word	0x52002000
 80120a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f003 0304 	and.w	r3, r3, #4
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d010      	beq.n	80120d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	691a      	ldr	r2, [r3, #16]
 80120b4:	4b3f      	ldr	r3, [pc, #252]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 80120b6:	699b      	ldr	r3, [r3, #24]
 80120b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80120bc:	429a      	cmp	r2, r3
 80120be:	d208      	bcs.n	80120d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80120c0:	4b3c      	ldr	r3, [pc, #240]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 80120c2:	699b      	ldr	r3, [r3, #24]
 80120c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	691b      	ldr	r3, [r3, #16]
 80120cc:	4939      	ldr	r1, [pc, #228]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 80120ce:	4313      	orrs	r3, r2
 80120d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f003 0308 	and.w	r3, r3, #8
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d010      	beq.n	8012100 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	695a      	ldr	r2, [r3, #20]
 80120e2:	4b34      	ldr	r3, [pc, #208]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 80120e4:	69db      	ldr	r3, [r3, #28]
 80120e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d208      	bcs.n	8012100 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80120ee:	4b31      	ldr	r3, [pc, #196]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 80120f0:	69db      	ldr	r3, [r3, #28]
 80120f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	695b      	ldr	r3, [r3, #20]
 80120fa:	492e      	ldr	r1, [pc, #184]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 80120fc:	4313      	orrs	r3, r2
 80120fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	f003 0310 	and.w	r3, r3, #16
 8012108:	2b00      	cmp	r3, #0
 801210a:	d010      	beq.n	801212e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	699a      	ldr	r2, [r3, #24]
 8012110:	4b28      	ldr	r3, [pc, #160]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 8012112:	69db      	ldr	r3, [r3, #28]
 8012114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012118:	429a      	cmp	r2, r3
 801211a:	d208      	bcs.n	801212e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801211c:	4b25      	ldr	r3, [pc, #148]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 801211e:	69db      	ldr	r3, [r3, #28]
 8012120:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	699b      	ldr	r3, [r3, #24]
 8012128:	4922      	ldr	r1, [pc, #136]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 801212a:	4313      	orrs	r3, r2
 801212c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	f003 0320 	and.w	r3, r3, #32
 8012136:	2b00      	cmp	r3, #0
 8012138:	d010      	beq.n	801215c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	69da      	ldr	r2, [r3, #28]
 801213e:	4b1d      	ldr	r3, [pc, #116]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 8012140:	6a1b      	ldr	r3, [r3, #32]
 8012142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012146:	429a      	cmp	r2, r3
 8012148:	d208      	bcs.n	801215c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801214a:	4b1a      	ldr	r3, [pc, #104]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 801214c:	6a1b      	ldr	r3, [r3, #32]
 801214e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	69db      	ldr	r3, [r3, #28]
 8012156:	4917      	ldr	r1, [pc, #92]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 8012158:	4313      	orrs	r3, r2
 801215a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 801215c:	f000 f834 	bl	80121c8 <HAL_RCC_GetSysClockFreq>
 8012160:	4602      	mov	r2, r0
 8012162:	4b14      	ldr	r3, [pc, #80]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 8012164:	699b      	ldr	r3, [r3, #24]
 8012166:	0a1b      	lsrs	r3, r3, #8
 8012168:	f003 030f 	and.w	r3, r3, #15
 801216c:	4912      	ldr	r1, [pc, #72]	; (80121b8 <HAL_RCC_ClockConfig+0x35c>)
 801216e:	5ccb      	ldrb	r3, [r1, r3]
 8012170:	f003 031f 	and.w	r3, r3, #31
 8012174:	fa22 f303 	lsr.w	r3, r2, r3
 8012178:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 801217a:	4b0e      	ldr	r3, [pc, #56]	; (80121b4 <HAL_RCC_ClockConfig+0x358>)
 801217c:	699b      	ldr	r3, [r3, #24]
 801217e:	f003 030f 	and.w	r3, r3, #15
 8012182:	4a0d      	ldr	r2, [pc, #52]	; (80121b8 <HAL_RCC_ClockConfig+0x35c>)
 8012184:	5cd3      	ldrb	r3, [r2, r3]
 8012186:	f003 031f 	and.w	r3, r3, #31
 801218a:	693a      	ldr	r2, [r7, #16]
 801218c:	fa22 f303 	lsr.w	r3, r2, r3
 8012190:	4a0a      	ldr	r2, [pc, #40]	; (80121bc <HAL_RCC_ClockConfig+0x360>)
 8012192:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012194:	4a0a      	ldr	r2, [pc, #40]	; (80121c0 <HAL_RCC_ClockConfig+0x364>)
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801219a:	4b0a      	ldr	r3, [pc, #40]	; (80121c4 <HAL_RCC_ClockConfig+0x368>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	4618      	mov	r0, r3
 80121a0:	f7f5 f820 	bl	80071e4 <HAL_InitTick>
 80121a4:	4603      	mov	r3, r0
 80121a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80121a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	3718      	adds	r7, #24
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	58024400 	.word	0x58024400
 80121b8:	0802b5f0 	.word	0x0802b5f0
 80121bc:	24000058 	.word	0x24000058
 80121c0:	24000054 	.word	0x24000054
 80121c4:	2400005c 	.word	0x2400005c

080121c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b089      	sub	sp, #36	; 0x24
 80121cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80121ce:	4bb3      	ldr	r3, [pc, #716]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80121d0:	691b      	ldr	r3, [r3, #16]
 80121d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80121d6:	2b18      	cmp	r3, #24
 80121d8:	f200 8155 	bhi.w	8012486 <HAL_RCC_GetSysClockFreq+0x2be>
 80121dc:	a201      	add	r2, pc, #4	; (adr r2, 80121e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80121de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121e2:	bf00      	nop
 80121e4:	08012249 	.word	0x08012249
 80121e8:	08012487 	.word	0x08012487
 80121ec:	08012487 	.word	0x08012487
 80121f0:	08012487 	.word	0x08012487
 80121f4:	08012487 	.word	0x08012487
 80121f8:	08012487 	.word	0x08012487
 80121fc:	08012487 	.word	0x08012487
 8012200:	08012487 	.word	0x08012487
 8012204:	0801226f 	.word	0x0801226f
 8012208:	08012487 	.word	0x08012487
 801220c:	08012487 	.word	0x08012487
 8012210:	08012487 	.word	0x08012487
 8012214:	08012487 	.word	0x08012487
 8012218:	08012487 	.word	0x08012487
 801221c:	08012487 	.word	0x08012487
 8012220:	08012487 	.word	0x08012487
 8012224:	08012275 	.word	0x08012275
 8012228:	08012487 	.word	0x08012487
 801222c:	08012487 	.word	0x08012487
 8012230:	08012487 	.word	0x08012487
 8012234:	08012487 	.word	0x08012487
 8012238:	08012487 	.word	0x08012487
 801223c:	08012487 	.word	0x08012487
 8012240:	08012487 	.word	0x08012487
 8012244:	0801227b 	.word	0x0801227b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012248:	4b94      	ldr	r3, [pc, #592]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f003 0320 	and.w	r3, r3, #32
 8012250:	2b00      	cmp	r3, #0
 8012252:	d009      	beq.n	8012268 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012254:	4b91      	ldr	r3, [pc, #580]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	08db      	lsrs	r3, r3, #3
 801225a:	f003 0303 	and.w	r3, r3, #3
 801225e:	4a90      	ldr	r2, [pc, #576]	; (80124a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012260:	fa22 f303 	lsr.w	r3, r2, r3
 8012264:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8012266:	e111      	b.n	801248c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012268:	4b8d      	ldr	r3, [pc, #564]	; (80124a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801226a:	61bb      	str	r3, [r7, #24]
      break;
 801226c:	e10e      	b.n	801248c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801226e:	4b8d      	ldr	r3, [pc, #564]	; (80124a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012270:	61bb      	str	r3, [r7, #24]
      break;
 8012272:	e10b      	b.n	801248c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8012274:	4b8c      	ldr	r3, [pc, #560]	; (80124a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8012276:	61bb      	str	r3, [r7, #24]
      break;
 8012278:	e108      	b.n	801248c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801227a:	4b88      	ldr	r3, [pc, #544]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801227e:	f003 0303 	and.w	r3, r3, #3
 8012282:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8012284:	4b85      	ldr	r3, [pc, #532]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012288:	091b      	lsrs	r3, r3, #4
 801228a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801228e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012290:	4b82      	ldr	r3, [pc, #520]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012294:	f003 0301 	and.w	r3, r3, #1
 8012298:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801229a:	4b80      	ldr	r3, [pc, #512]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801229c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801229e:	08db      	lsrs	r3, r3, #3
 80122a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80122a4:	68fa      	ldr	r2, [r7, #12]
 80122a6:	fb02 f303 	mul.w	r3, r2, r3
 80122aa:	ee07 3a90 	vmov	s15, r3
 80122ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	f000 80e1 	beq.w	8012480 <HAL_RCC_GetSysClockFreq+0x2b8>
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	f000 8083 	beq.w	80123cc <HAL_RCC_GetSysClockFreq+0x204>
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	2b02      	cmp	r3, #2
 80122ca:	f200 80a1 	bhi.w	8012410 <HAL_RCC_GetSysClockFreq+0x248>
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d003      	beq.n	80122dc <HAL_RCC_GetSysClockFreq+0x114>
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	d056      	beq.n	8012388 <HAL_RCC_GetSysClockFreq+0x1c0>
 80122da:	e099      	b.n	8012410 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80122dc:	4b6f      	ldr	r3, [pc, #444]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f003 0320 	and.w	r3, r3, #32
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d02d      	beq.n	8012344 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80122e8:	4b6c      	ldr	r3, [pc, #432]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	08db      	lsrs	r3, r3, #3
 80122ee:	f003 0303 	and.w	r3, r3, #3
 80122f2:	4a6b      	ldr	r2, [pc, #428]	; (80124a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80122f4:	fa22 f303 	lsr.w	r3, r2, r3
 80122f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	ee07 3a90 	vmov	s15, r3
 8012300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	ee07 3a90 	vmov	s15, r3
 801230a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801230e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012312:	4b62      	ldr	r3, [pc, #392]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801231a:	ee07 3a90 	vmov	s15, r3
 801231e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012322:	ed97 6a02 	vldr	s12, [r7, #8]
 8012326:	eddf 5a61 	vldr	s11, [pc, #388]	; 80124ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801232a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801232e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801233e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8012342:	e087      	b.n	8012454 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	ee07 3a90 	vmov	s15, r3
 801234a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801234e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80124b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8012352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012356:	4b51      	ldr	r3, [pc, #324]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801235a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801235e:	ee07 3a90 	vmov	s15, r3
 8012362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012366:	ed97 6a02 	vldr	s12, [r7, #8]
 801236a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80124ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801236e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801237a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801237e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8012386:	e065      	b.n	8012454 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	ee07 3a90 	vmov	s15, r3
 801238e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012392:	eddf 6a48 	vldr	s13, [pc, #288]	; 80124b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801239a:	4b40      	ldr	r3, [pc, #256]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801239e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123a2:	ee07 3a90 	vmov	s15, r3
 80123a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80123aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80123ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80124ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80123b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80123b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80123ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80123be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80123ca:	e043      	b.n	8012454 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	ee07 3a90 	vmov	s15, r3
 80123d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80124b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80123da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80123de:	4b2f      	ldr	r3, [pc, #188]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80123e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123e6:	ee07 3a90 	vmov	s15, r3
 80123ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80123ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80123f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80124ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80123f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80123fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80123fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012406:	ee67 7a27 	vmul.f32	s15, s14, s15
 801240a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801240e:	e021      	b.n	8012454 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	ee07 3a90 	vmov	s15, r3
 8012416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801241a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80124b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801241e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012422:	4b1e      	ldr	r3, [pc, #120]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801242a:	ee07 3a90 	vmov	s15, r3
 801242e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012432:	ed97 6a02 	vldr	s12, [r7, #8]
 8012436:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80124ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801243a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801243e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801244a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801244e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8012452:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8012454:	4b11      	ldr	r3, [pc, #68]	; (801249c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012458:	0a5b      	lsrs	r3, r3, #9
 801245a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801245e:	3301      	adds	r3, #1
 8012460:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	ee07 3a90 	vmov	s15, r3
 8012468:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801246c:	edd7 6a07 	vldr	s13, [r7, #28]
 8012470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012478:	ee17 3a90 	vmov	r3, s15
 801247c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801247e:	e005      	b.n	801248c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8012480:	2300      	movs	r3, #0
 8012482:	61bb      	str	r3, [r7, #24]
      break;
 8012484:	e002      	b.n	801248c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8012486:	4b07      	ldr	r3, [pc, #28]	; (80124a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012488:	61bb      	str	r3, [r7, #24]
      break;
 801248a:	bf00      	nop
  }

  return sysclockfreq;
 801248c:	69bb      	ldr	r3, [r7, #24]
}
 801248e:	4618      	mov	r0, r3
 8012490:	3724      	adds	r7, #36	; 0x24
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop
 801249c:	58024400 	.word	0x58024400
 80124a0:	03d09000 	.word	0x03d09000
 80124a4:	003d0900 	.word	0x003d0900
 80124a8:	016e3600 	.word	0x016e3600
 80124ac:	46000000 	.word	0x46000000
 80124b0:	4c742400 	.word	0x4c742400
 80124b4:	4a742400 	.word	0x4a742400
 80124b8:	4bb71b00 	.word	0x4bb71b00

080124bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b082      	sub	sp, #8
 80124c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80124c2:	f7ff fe81 	bl	80121c8 <HAL_RCC_GetSysClockFreq>
 80124c6:	4602      	mov	r2, r0
 80124c8:	4b10      	ldr	r3, [pc, #64]	; (801250c <HAL_RCC_GetHCLKFreq+0x50>)
 80124ca:	699b      	ldr	r3, [r3, #24]
 80124cc:	0a1b      	lsrs	r3, r3, #8
 80124ce:	f003 030f 	and.w	r3, r3, #15
 80124d2:	490f      	ldr	r1, [pc, #60]	; (8012510 <HAL_RCC_GetHCLKFreq+0x54>)
 80124d4:	5ccb      	ldrb	r3, [r1, r3]
 80124d6:	f003 031f 	and.w	r3, r3, #31
 80124da:	fa22 f303 	lsr.w	r3, r2, r3
 80124de:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80124e0:	4b0a      	ldr	r3, [pc, #40]	; (801250c <HAL_RCC_GetHCLKFreq+0x50>)
 80124e2:	699b      	ldr	r3, [r3, #24]
 80124e4:	f003 030f 	and.w	r3, r3, #15
 80124e8:	4a09      	ldr	r2, [pc, #36]	; (8012510 <HAL_RCC_GetHCLKFreq+0x54>)
 80124ea:	5cd3      	ldrb	r3, [r2, r3]
 80124ec:	f003 031f 	and.w	r3, r3, #31
 80124f0:	687a      	ldr	r2, [r7, #4]
 80124f2:	fa22 f303 	lsr.w	r3, r2, r3
 80124f6:	4a07      	ldr	r2, [pc, #28]	; (8012514 <HAL_RCC_GetHCLKFreq+0x58>)
 80124f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80124fa:	4a07      	ldr	r2, [pc, #28]	; (8012518 <HAL_RCC_GetHCLKFreq+0x5c>)
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012500:	4b04      	ldr	r3, [pc, #16]	; (8012514 <HAL_RCC_GetHCLKFreq+0x58>)
 8012502:	681b      	ldr	r3, [r3, #0]
}
 8012504:	4618      	mov	r0, r3
 8012506:	3708      	adds	r7, #8
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}
 801250c:	58024400 	.word	0x58024400
 8012510:	0802b5f0 	.word	0x0802b5f0
 8012514:	24000058 	.word	0x24000058
 8012518:	24000054 	.word	0x24000054

0801251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8012520:	f7ff ffcc 	bl	80124bc <HAL_RCC_GetHCLKFreq>
 8012524:	4602      	mov	r2, r0
 8012526:	4b06      	ldr	r3, [pc, #24]	; (8012540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012528:	69db      	ldr	r3, [r3, #28]
 801252a:	091b      	lsrs	r3, r3, #4
 801252c:	f003 0307 	and.w	r3, r3, #7
 8012530:	4904      	ldr	r1, [pc, #16]	; (8012544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012532:	5ccb      	ldrb	r3, [r1, r3]
 8012534:	f003 031f 	and.w	r3, r3, #31
 8012538:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 801253c:	4618      	mov	r0, r3
 801253e:	bd80      	pop	{r7, pc}
 8012540:	58024400 	.word	0x58024400
 8012544:	0802b5f0 	.word	0x0802b5f0

08012548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 801254c:	f7ff ffb6 	bl	80124bc <HAL_RCC_GetHCLKFreq>
 8012550:	4602      	mov	r2, r0
 8012552:	4b06      	ldr	r3, [pc, #24]	; (801256c <HAL_RCC_GetPCLK2Freq+0x24>)
 8012554:	69db      	ldr	r3, [r3, #28]
 8012556:	0a1b      	lsrs	r3, r3, #8
 8012558:	f003 0307 	and.w	r3, r3, #7
 801255c:	4904      	ldr	r1, [pc, #16]	; (8012570 <HAL_RCC_GetPCLK2Freq+0x28>)
 801255e:	5ccb      	ldrb	r3, [r1, r3]
 8012560:	f003 031f 	and.w	r3, r3, #31
 8012564:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8012568:	4618      	mov	r0, r3
 801256a:	bd80      	pop	{r7, pc}
 801256c:	58024400 	.word	0x58024400
 8012570:	0802b5f0 	.word	0x0802b5f0

08012574 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012574:	b480      	push	{r7}
 8012576:	b083      	sub	sp, #12
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	223f      	movs	r2, #63	; 0x3f
 8012582:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012584:	4b1a      	ldr	r3, [pc, #104]	; (80125f0 <HAL_RCC_GetClockConfig+0x7c>)
 8012586:	691b      	ldr	r3, [r3, #16]
 8012588:	f003 0207 	and.w	r2, r3, #7
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8012590:	4b17      	ldr	r3, [pc, #92]	; (80125f0 <HAL_RCC_GetClockConfig+0x7c>)
 8012592:	699b      	ldr	r3, [r3, #24]
 8012594:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 801259c:	4b14      	ldr	r3, [pc, #80]	; (80125f0 <HAL_RCC_GetClockConfig+0x7c>)
 801259e:	699b      	ldr	r3, [r3, #24]
 80125a0:	f003 020f 	and.w	r2, r3, #15
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80125a8:	4b11      	ldr	r3, [pc, #68]	; (80125f0 <HAL_RCC_GetClockConfig+0x7c>)
 80125aa:	699b      	ldr	r3, [r3, #24]
 80125ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80125b4:	4b0e      	ldr	r3, [pc, #56]	; (80125f0 <HAL_RCC_GetClockConfig+0x7c>)
 80125b6:	69db      	ldr	r3, [r3, #28]
 80125b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80125c0:	4b0b      	ldr	r3, [pc, #44]	; (80125f0 <HAL_RCC_GetClockConfig+0x7c>)
 80125c2:	69db      	ldr	r3, [r3, #28]
 80125c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80125cc:	4b08      	ldr	r3, [pc, #32]	; (80125f0 <HAL_RCC_GetClockConfig+0x7c>)
 80125ce:	6a1b      	ldr	r3, [r3, #32]
 80125d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80125d8:	4b06      	ldr	r3, [pc, #24]	; (80125f4 <HAL_RCC_GetClockConfig+0x80>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	f003 020f 	and.w	r2, r3, #15
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	601a      	str	r2, [r3, #0]
}
 80125e4:	bf00      	nop
 80125e6:	370c      	adds	r7, #12
 80125e8:	46bd      	mov	sp, r7
 80125ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ee:	4770      	bx	lr
 80125f0:	58024400 	.word	0x58024400
 80125f4:	52002000 	.word	0x52002000

080125f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80125f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80125fc:	b0c8      	sub	sp, #288	; 0x120
 80125fe:	af00      	add	r7, sp, #0
 8012600:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012604:	2300      	movs	r3, #0
 8012606:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801260a:	2300      	movs	r3, #0
 801260c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012618:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 801261c:	2500      	movs	r5, #0
 801261e:	ea54 0305 	orrs.w	r3, r4, r5
 8012622:	d049      	beq.n	80126b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8012624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801262a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801262e:	d02f      	beq.n	8012690 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8012630:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012634:	d828      	bhi.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801263a:	d01a      	beq.n	8012672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801263c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012640:	d822      	bhi.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012642:	2b00      	cmp	r3, #0
 8012644:	d003      	beq.n	801264e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8012646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801264a:	d007      	beq.n	801265c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801264c:	e01c      	b.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801264e:	4ba7      	ldr	r3, [pc, #668]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012652:	4aa6      	ldr	r2, [pc, #664]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012658:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801265a:	e01a      	b.n	8012692 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801265c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012660:	3308      	adds	r3, #8
 8012662:	2102      	movs	r1, #2
 8012664:	4618      	mov	r0, r3
 8012666:	f001 f985 	bl	8013974 <RCCEx_PLL2_Config>
 801266a:	4603      	mov	r3, r0
 801266c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012670:	e00f      	b.n	8012692 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012676:	3328      	adds	r3, #40	; 0x28
 8012678:	2102      	movs	r1, #2
 801267a:	4618      	mov	r0, r3
 801267c:	f001 fa2c 	bl	8013ad8 <RCCEx_PLL3_Config>
 8012680:	4603      	mov	r3, r0
 8012682:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012686:	e004      	b.n	8012692 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012688:	2301      	movs	r3, #1
 801268a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801268e:	e000      	b.n	8012692 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8012690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012692:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012696:	2b00      	cmp	r3, #0
 8012698:	d10a      	bne.n	80126b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801269a:	4b94      	ldr	r3, [pc, #592]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801269c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801269e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80126a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80126a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126a8:	4a90      	ldr	r2, [pc, #576]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80126aa:	430b      	orrs	r3, r1
 80126ac:	6513      	str	r3, [r2, #80]	; 0x50
 80126ae:	e003      	b.n	80126b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80126b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80126b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80126bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80126c4:	f04f 0900 	mov.w	r9, #0
 80126c8:	ea58 0309 	orrs.w	r3, r8, r9
 80126cc:	d047      	beq.n	801275e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80126ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80126d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126d4:	2b04      	cmp	r3, #4
 80126d6:	d82a      	bhi.n	801272e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80126d8:	a201      	add	r2, pc, #4	; (adr r2, 80126e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80126da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126de:	bf00      	nop
 80126e0:	080126f5 	.word	0x080126f5
 80126e4:	08012703 	.word	0x08012703
 80126e8:	08012719 	.word	0x08012719
 80126ec:	08012737 	.word	0x08012737
 80126f0:	08012737 	.word	0x08012737
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126f4:	4b7d      	ldr	r3, [pc, #500]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80126f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126f8:	4a7c      	ldr	r2, [pc, #496]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80126fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80126fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012700:	e01a      	b.n	8012738 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012706:	3308      	adds	r3, #8
 8012708:	2100      	movs	r1, #0
 801270a:	4618      	mov	r0, r3
 801270c:	f001 f932 	bl	8013974 <RCCEx_PLL2_Config>
 8012710:	4603      	mov	r3, r0
 8012712:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012716:	e00f      	b.n	8012738 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801271c:	3328      	adds	r3, #40	; 0x28
 801271e:	2100      	movs	r1, #0
 8012720:	4618      	mov	r0, r3
 8012722:	f001 f9d9 	bl	8013ad8 <RCCEx_PLL3_Config>
 8012726:	4603      	mov	r3, r0
 8012728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801272c:	e004      	b.n	8012738 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801272e:	2301      	movs	r3, #1
 8012730:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012734:	e000      	b.n	8012738 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8012736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801273c:	2b00      	cmp	r3, #0
 801273e:	d10a      	bne.n	8012756 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012740:	4b6a      	ldr	r3, [pc, #424]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012744:	f023 0107 	bic.w	r1, r3, #7
 8012748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801274e:	4a67      	ldr	r2, [pc, #412]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012750:	430b      	orrs	r3, r1
 8012752:	6513      	str	r3, [r2, #80]	; 0x50
 8012754:	e003      	b.n	801275e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012756:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801275a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 801275e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012766:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 801276a:	f04f 0b00 	mov.w	fp, #0
 801276e:	ea5a 030b 	orrs.w	r3, sl, fp
 8012772:	d054      	beq.n	801281e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8012774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801277a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801277e:	d036      	beq.n	80127ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8012780:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8012784:	d82f      	bhi.n	80127e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8012786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801278a:	d032      	beq.n	80127f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801278c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012790:	d829      	bhi.n	80127e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8012792:	2bc0      	cmp	r3, #192	; 0xc0
 8012794:	d02f      	beq.n	80127f6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8012796:	2bc0      	cmp	r3, #192	; 0xc0
 8012798:	d825      	bhi.n	80127e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801279a:	2b80      	cmp	r3, #128	; 0x80
 801279c:	d018      	beq.n	80127d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 801279e:	2b80      	cmp	r3, #128	; 0x80
 80127a0:	d821      	bhi.n	80127e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d002      	beq.n	80127ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80127a6:	2b40      	cmp	r3, #64	; 0x40
 80127a8:	d007      	beq.n	80127ba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80127aa:	e01c      	b.n	80127e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80127ac:	4b4f      	ldr	r3, [pc, #316]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80127ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127b0:	4a4e      	ldr	r2, [pc, #312]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80127b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80127b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80127b8:	e01e      	b.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80127ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80127be:	3308      	adds	r3, #8
 80127c0:	2100      	movs	r1, #0
 80127c2:	4618      	mov	r0, r3
 80127c4:	f001 f8d6 	bl	8013974 <RCCEx_PLL2_Config>
 80127c8:	4603      	mov	r3, r0
 80127ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80127ce:	e013      	b.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80127d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80127d4:	3328      	adds	r3, #40	; 0x28
 80127d6:	2100      	movs	r1, #0
 80127d8:	4618      	mov	r0, r3
 80127da:	f001 f97d 	bl	8013ad8 <RCCEx_PLL3_Config>
 80127de:	4603      	mov	r3, r0
 80127e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80127e4:	e008      	b.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80127e6:	2301      	movs	r3, #1
 80127e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80127ec:	e004      	b.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80127ee:	bf00      	nop
 80127f0:	e002      	b.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80127f2:	bf00      	nop
 80127f4:	e000      	b.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80127f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80127f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d10a      	bne.n	8012816 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8012800:	4b3a      	ldr	r3, [pc, #232]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012804:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8012808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801280e:	4a37      	ldr	r2, [pc, #220]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012810:	430b      	orrs	r3, r1
 8012812:	6513      	str	r3, [r2, #80]	; 0x50
 8012814:	e003      	b.n	801281e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012816:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801281a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 801281e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012826:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 801282a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801282e:	2300      	movs	r3, #0
 8012830:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8012834:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8012838:	460b      	mov	r3, r1
 801283a:	4313      	orrs	r3, r2
 801283c:	d05c      	beq.n	80128f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 801283e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012844:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8012848:	d03b      	beq.n	80128c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801284a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 801284e:	d834      	bhi.n	80128ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8012850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012854:	d037      	beq.n	80128c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8012856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801285a:	d82e      	bhi.n	80128ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 801285c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012860:	d033      	beq.n	80128ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012862:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012866:	d828      	bhi.n	80128ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8012868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801286c:	d01a      	beq.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 801286e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012872:	d822      	bhi.n	80128ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8012874:	2b00      	cmp	r3, #0
 8012876:	d003      	beq.n	8012880 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8012878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801287c:	d007      	beq.n	801288e <HAL_RCCEx_PeriphCLKConfig+0x296>
 801287e:	e01c      	b.n	80128ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012880:	4b1a      	ldr	r3, [pc, #104]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012884:	4a19      	ldr	r2, [pc, #100]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801288a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 801288c:	e01e      	b.n	80128cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801288e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012892:	3308      	adds	r3, #8
 8012894:	2100      	movs	r1, #0
 8012896:	4618      	mov	r0, r3
 8012898:	f001 f86c 	bl	8013974 <RCCEx_PLL2_Config>
 801289c:	4603      	mov	r3, r0
 801289e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80128a2:	e013      	b.n	80128cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80128a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80128a8:	3328      	adds	r3, #40	; 0x28
 80128aa:	2100      	movs	r1, #0
 80128ac:	4618      	mov	r0, r3
 80128ae:	f001 f913 	bl	8013ad8 <RCCEx_PLL3_Config>
 80128b2:	4603      	mov	r3, r0
 80128b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80128b8:	e008      	b.n	80128cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80128ba:	2301      	movs	r3, #1
 80128bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80128c0:	e004      	b.n	80128cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80128c2:	bf00      	nop
 80128c4:	e002      	b.n	80128cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80128c6:	bf00      	nop
 80128c8:	e000      	b.n	80128cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80128ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80128cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d10d      	bne.n	80128f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80128d4:	4b05      	ldr	r3, [pc, #20]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80128d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128d8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80128dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80128e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80128e2:	4a02      	ldr	r2, [pc, #8]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80128e4:	430b      	orrs	r3, r1
 80128e6:	6513      	str	r3, [r2, #80]	; 0x50
 80128e8:	e006      	b.n	80128f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80128ea:	bf00      	nop
 80128ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80128f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80128f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80128f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80128fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012900:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8012904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012908:	2300      	movs	r3, #0
 801290a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801290e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8012912:	460b      	mov	r3, r1
 8012914:	4313      	orrs	r3, r2
 8012916:	d03a      	beq.n	801298e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8012918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801291e:	2b30      	cmp	r3, #48	; 0x30
 8012920:	d01f      	beq.n	8012962 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8012922:	2b30      	cmp	r3, #48	; 0x30
 8012924:	d819      	bhi.n	801295a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8012926:	2b20      	cmp	r3, #32
 8012928:	d00c      	beq.n	8012944 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 801292a:	2b20      	cmp	r3, #32
 801292c:	d815      	bhi.n	801295a <HAL_RCCEx_PeriphCLKConfig+0x362>
 801292e:	2b00      	cmp	r3, #0
 8012930:	d019      	beq.n	8012966 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8012932:	2b10      	cmp	r3, #16
 8012934:	d111      	bne.n	801295a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012936:	4bae      	ldr	r3, [pc, #696]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293a:	4aad      	ldr	r2, [pc, #692]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801293c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012940:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012942:	e011      	b.n	8012968 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012948:	3308      	adds	r3, #8
 801294a:	2102      	movs	r1, #2
 801294c:	4618      	mov	r0, r3
 801294e:	f001 f811 	bl	8013974 <RCCEx_PLL2_Config>
 8012952:	4603      	mov	r3, r0
 8012954:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012958:	e006      	b.n	8012968 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801295a:	2301      	movs	r3, #1
 801295c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012960:	e002      	b.n	8012968 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8012962:	bf00      	nop
 8012964:	e000      	b.n	8012968 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8012966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012968:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801296c:	2b00      	cmp	r3, #0
 801296e:	d10a      	bne.n	8012986 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8012970:	4b9f      	ldr	r3, [pc, #636]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012974:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8012978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801297e:	4a9c      	ldr	r2, [pc, #624]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012980:	430b      	orrs	r3, r1
 8012982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012984:	e003      	b.n	801298e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012986:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801298a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801298e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012996:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801299a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801299e:	2300      	movs	r3, #0
 80129a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80129a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80129a8:	460b      	mov	r3, r1
 80129aa:	4313      	orrs	r3, r2
 80129ac:	d051      	beq.n	8012a52 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80129ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80129b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80129b8:	d035      	beq.n	8012a26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80129ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80129be:	d82e      	bhi.n	8012a1e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80129c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80129c4:	d031      	beq.n	8012a2a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80129c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80129ca:	d828      	bhi.n	8012a1e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80129cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80129d0:	d01a      	beq.n	8012a08 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80129d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80129d6:	d822      	bhi.n	8012a1e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d003      	beq.n	80129e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80129dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80129e0:	d007      	beq.n	80129f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80129e2:	e01c      	b.n	8012a1e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80129e4:	4b82      	ldr	r3, [pc, #520]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80129e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129e8:	4a81      	ldr	r2, [pc, #516]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80129ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80129ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80129f0:	e01c      	b.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80129f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80129f6:	3308      	adds	r3, #8
 80129f8:	2100      	movs	r1, #0
 80129fa:	4618      	mov	r0, r3
 80129fc:	f000 ffba 	bl	8013974 <RCCEx_PLL2_Config>
 8012a00:	4603      	mov	r3, r0
 8012a02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012a06:	e011      	b.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a0c:	3328      	adds	r3, #40	; 0x28
 8012a0e:	2100      	movs	r1, #0
 8012a10:	4618      	mov	r0, r3
 8012a12:	f001 f861 	bl	8013ad8 <RCCEx_PLL3_Config>
 8012a16:	4603      	mov	r3, r0
 8012a18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012a1c:	e006      	b.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a1e:	2301      	movs	r3, #1
 8012a20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012a24:	e002      	b.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8012a26:	bf00      	nop
 8012a28:	e000      	b.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8012a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d10a      	bne.n	8012a4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012a34:	4b6e      	ldr	r3, [pc, #440]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a38:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8012a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012a42:	4a6b      	ldr	r2, [pc, #428]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012a44:	430b      	orrs	r3, r1
 8012a46:	6513      	str	r3, [r2, #80]	; 0x50
 8012a48:	e003      	b.n	8012a52 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012a4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8012a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012a62:	2300      	movs	r3, #0
 8012a64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012a68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	4313      	orrs	r3, r2
 8012a70:	d053      	beq.n	8012b1a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8012a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012a7c:	d033      	beq.n	8012ae6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8012a7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012a82:	d82c      	bhi.n	8012ade <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012a84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012a88:	d02f      	beq.n	8012aea <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8012a8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012a8e:	d826      	bhi.n	8012ade <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012a90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012a94:	d02b      	beq.n	8012aee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012a96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012a9a:	d820      	bhi.n	8012ade <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012aa0:	d012      	beq.n	8012ac8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8012aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012aa6:	d81a      	bhi.n	8012ade <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d022      	beq.n	8012af2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8012aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ab0:	d115      	bne.n	8012ade <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ab6:	3308      	adds	r3, #8
 8012ab8:	2101      	movs	r1, #1
 8012aba:	4618      	mov	r0, r3
 8012abc:	f000 ff5a 	bl	8013974 <RCCEx_PLL2_Config>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012ac6:	e015      	b.n	8012af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012acc:	3328      	adds	r3, #40	; 0x28
 8012ace:	2101      	movs	r1, #1
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f001 f801 	bl	8013ad8 <RCCEx_PLL3_Config>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012adc:	e00a      	b.n	8012af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ade:	2301      	movs	r3, #1
 8012ae0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012ae4:	e006      	b.n	8012af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012ae6:	bf00      	nop
 8012ae8:	e004      	b.n	8012af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012aea:	bf00      	nop
 8012aec:	e002      	b.n	8012af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012aee:	bf00      	nop
 8012af0:	e000      	b.n	8012af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012af4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d10a      	bne.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8012afc:	4b3c      	ldr	r3, [pc, #240]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b00:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8012b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b0a:	4a39      	ldr	r2, [pc, #228]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012b0c:	430b      	orrs	r3, r1
 8012b0e:	6513      	str	r3, [r2, #80]	; 0x50
 8012b10:	e003      	b.n	8012b1a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012b16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b22:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8012b26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012b30:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8012b34:	460b      	mov	r3, r1
 8012b36:	4313      	orrs	r3, r2
 8012b38:	d060      	beq.n	8012bfc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8012b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012b42:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8012b46:	d039      	beq.n	8012bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8012b48:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8012b4c:	d832      	bhi.n	8012bb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012b52:	d035      	beq.n	8012bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012b58:	d82c      	bhi.n	8012bb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b5e:	d031      	beq.n	8012bc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8012b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b64:	d826      	bhi.n	8012bb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012b66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012b6a:	d02d      	beq.n	8012bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8012b6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012b70:	d820      	bhi.n	8012bb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012b76:	d012      	beq.n	8012b9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8012b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012b7c:	d81a      	bhi.n	8012bb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d024      	beq.n	8012bcc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8012b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012b86:	d115      	bne.n	8012bb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b8c:	3308      	adds	r3, #8
 8012b8e:	2101      	movs	r1, #1
 8012b90:	4618      	mov	r0, r3
 8012b92:	f000 feef 	bl	8013974 <RCCEx_PLL2_Config>
 8012b96:	4603      	mov	r3, r0
 8012b98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012b9c:	e017      	b.n	8012bce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ba2:	3328      	adds	r3, #40	; 0x28
 8012ba4:	2101      	movs	r1, #1
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f000 ff96 	bl	8013ad8 <RCCEx_PLL3_Config>
 8012bac:	4603      	mov	r3, r0
 8012bae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012bb2:	e00c      	b.n	8012bce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012bba:	e008      	b.n	8012bce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012bbc:	bf00      	nop
 8012bbe:	e006      	b.n	8012bce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012bc0:	bf00      	nop
 8012bc2:	e004      	b.n	8012bce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012bc4:	bf00      	nop
 8012bc6:	e002      	b.n	8012bce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012bc8:	bf00      	nop
 8012bca:	e000      	b.n	8012bce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012bce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d10e      	bne.n	8012bf4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012bd6:	4b06      	ldr	r3, [pc, #24]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bda:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8012bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012be2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012be6:	4a02      	ldr	r2, [pc, #8]	; (8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012be8:	430b      	orrs	r3, r1
 8012bea:	6593      	str	r3, [r2, #88]	; 0x58
 8012bec:	e006      	b.n	8012bfc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8012bee:	bf00      	nop
 8012bf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012bf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012bf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c04:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8012c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012c12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012c16:	460b      	mov	r3, r1
 8012c18:	4313      	orrs	r3, r2
 8012c1a:	d037      	beq.n	8012c8c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8012c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012c26:	d00e      	beq.n	8012c46 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8012c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012c2c:	d816      	bhi.n	8012c5c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d018      	beq.n	8012c64 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8012c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012c36:	d111      	bne.n	8012c5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012c38:	4bc4      	ldr	r3, [pc, #784]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c3c:	4ac3      	ldr	r2, [pc, #780]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012c44:	e00f      	b.n	8012c66 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c4a:	3308      	adds	r3, #8
 8012c4c:	2101      	movs	r1, #1
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f000 fe90 	bl	8013974 <RCCEx_PLL2_Config>
 8012c54:	4603      	mov	r3, r0
 8012c56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012c5a:	e004      	b.n	8012c66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012c62:	e000      	b.n	8012c66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8012c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d10a      	bne.n	8012c84 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8012c6e:	4bb7      	ldr	r3, [pc, #732]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c72:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8012c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c7c:	4ab3      	ldr	r2, [pc, #716]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012c7e:	430b      	orrs	r3, r1
 8012c80:	6513      	str	r3, [r2, #80]	; 0x50
 8012c82:	e003      	b.n	8012c8c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012c88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c94:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8012c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012ca2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8012ca6:	460b      	mov	r3, r1
 8012ca8:	4313      	orrs	r3, r2
 8012caa:	d039      	beq.n	8012d20 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8012cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012cb2:	2b03      	cmp	r3, #3
 8012cb4:	d81c      	bhi.n	8012cf0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8012cb6:	a201      	add	r2, pc, #4	; (adr r2, 8012cbc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cbc:	08012cf9 	.word	0x08012cf9
 8012cc0:	08012ccd 	.word	0x08012ccd
 8012cc4:	08012cdb 	.word	0x08012cdb
 8012cc8:	08012cf9 	.word	0x08012cf9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ccc:	4b9f      	ldr	r3, [pc, #636]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cd0:	4a9e      	ldr	r2, [pc, #632]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012cd8:	e00f      	b.n	8012cfa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012cde:	3308      	adds	r3, #8
 8012ce0:	2102      	movs	r1, #2
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f000 fe46 	bl	8013974 <RCCEx_PLL2_Config>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012cee:	e004      	b.n	8012cfa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012cf0:	2301      	movs	r3, #1
 8012cf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012cf6:	e000      	b.n	8012cfa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8012cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012cfa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d10a      	bne.n	8012d18 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012d02:	4b92      	ldr	r3, [pc, #584]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d06:	f023 0103 	bic.w	r1, r3, #3
 8012d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d10:	4a8e      	ldr	r2, [pc, #568]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d12:	430b      	orrs	r3, r1
 8012d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012d16:	e003      	b.n	8012d20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d28:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8012d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012d30:	2300      	movs	r3, #0
 8012d32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012d36:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	f000 8099 	beq.w	8012e74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012d42:	4b83      	ldr	r3, [pc, #524]	; (8012f50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	4a82      	ldr	r2, [pc, #520]	; (8012f50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012d4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012d4e:	f7f8 ff3f 	bl	800bbd0 <HAL_GetTick>
 8012d52:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012d56:	e00b      	b.n	8012d70 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012d58:	f7f8 ff3a 	bl	800bbd0 <HAL_GetTick>
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012d62:	1ad3      	subs	r3, r2, r3
 8012d64:	2b64      	cmp	r3, #100	; 0x64
 8012d66:	d903      	bls.n	8012d70 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012d68:	2303      	movs	r3, #3
 8012d6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012d6e:	e005      	b.n	8012d7c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012d70:	4b77      	ldr	r3, [pc, #476]	; (8012f50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d0ed      	beq.n	8012d58 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8012d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d173      	bne.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012d84:	4b71      	ldr	r3, [pc, #452]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012d90:	4053      	eors	r3, r2
 8012d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d015      	beq.n	8012dc6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012d9a:	4b6c      	ldr	r3, [pc, #432]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012da2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012da6:	4b69      	ldr	r3, [pc, #420]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012daa:	4a68      	ldr	r2, [pc, #416]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012db0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012db2:	4b66      	ldr	r3, [pc, #408]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012db6:	4a65      	ldr	r2, [pc, #404]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012dbc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012dbe:	4a63      	ldr	r2, [pc, #396]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8012dc4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012dca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012dd2:	d118      	bne.n	8012e06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012dd4:	f7f8 fefc 	bl	800bbd0 <HAL_GetTick>
 8012dd8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012ddc:	e00d      	b.n	8012dfa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012dde:	f7f8 fef7 	bl	800bbd0 <HAL_GetTick>
 8012de2:	4602      	mov	r2, r0
 8012de4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012de8:	1ad2      	subs	r2, r2, r3
 8012dea:	f241 3388 	movw	r3, #5000	; 0x1388
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d903      	bls.n	8012dfa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8012df2:	2303      	movs	r3, #3
 8012df4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8012df8:	e005      	b.n	8012e06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012dfa:	4b54      	ldr	r3, [pc, #336]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dfe:	f003 0302 	and.w	r3, r3, #2
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d0eb      	beq.n	8012dde <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8012e06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d129      	bne.n	8012e62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012e1e:	d10e      	bne.n	8012e3e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8012e20:	4b4a      	ldr	r3, [pc, #296]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012e22:	691b      	ldr	r3, [r3, #16]
 8012e24:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8012e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012e30:	091a      	lsrs	r2, r3, #4
 8012e32:	4b48      	ldr	r3, [pc, #288]	; (8012f54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012e34:	4013      	ands	r3, r2
 8012e36:	4a45      	ldr	r2, [pc, #276]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012e38:	430b      	orrs	r3, r1
 8012e3a:	6113      	str	r3, [r2, #16]
 8012e3c:	e005      	b.n	8012e4a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8012e3e:	4b43      	ldr	r3, [pc, #268]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012e40:	691b      	ldr	r3, [r3, #16]
 8012e42:	4a42      	ldr	r2, [pc, #264]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012e44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e48:	6113      	str	r3, [r2, #16]
 8012e4a:	4b40      	ldr	r3, [pc, #256]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012e4c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e5a:	4a3c      	ldr	r2, [pc, #240]	; (8012f4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012e5c:	430b      	orrs	r3, r1
 8012e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8012e60:	e008      	b.n	8012e74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012e62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012e66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8012e6a:	e003      	b.n	8012e74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012e70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e7c:	f002 0301 	and.w	r3, r2, #1
 8012e80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012e84:	2300      	movs	r3, #0
 8012e86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012e8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8012e8e:	460b      	mov	r3, r1
 8012e90:	4313      	orrs	r3, r2
 8012e92:	f000 8090 	beq.w	8012fb6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e9e:	2b28      	cmp	r3, #40	; 0x28
 8012ea0:	d870      	bhi.n	8012f84 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012ea2:	a201      	add	r2, pc, #4	; (adr r2, 8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8012ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ea8:	08012f8d 	.word	0x08012f8d
 8012eac:	08012f85 	.word	0x08012f85
 8012eb0:	08012f85 	.word	0x08012f85
 8012eb4:	08012f85 	.word	0x08012f85
 8012eb8:	08012f85 	.word	0x08012f85
 8012ebc:	08012f85 	.word	0x08012f85
 8012ec0:	08012f85 	.word	0x08012f85
 8012ec4:	08012f85 	.word	0x08012f85
 8012ec8:	08012f59 	.word	0x08012f59
 8012ecc:	08012f85 	.word	0x08012f85
 8012ed0:	08012f85 	.word	0x08012f85
 8012ed4:	08012f85 	.word	0x08012f85
 8012ed8:	08012f85 	.word	0x08012f85
 8012edc:	08012f85 	.word	0x08012f85
 8012ee0:	08012f85 	.word	0x08012f85
 8012ee4:	08012f85 	.word	0x08012f85
 8012ee8:	08012f6f 	.word	0x08012f6f
 8012eec:	08012f85 	.word	0x08012f85
 8012ef0:	08012f85 	.word	0x08012f85
 8012ef4:	08012f85 	.word	0x08012f85
 8012ef8:	08012f85 	.word	0x08012f85
 8012efc:	08012f85 	.word	0x08012f85
 8012f00:	08012f85 	.word	0x08012f85
 8012f04:	08012f85 	.word	0x08012f85
 8012f08:	08012f8d 	.word	0x08012f8d
 8012f0c:	08012f85 	.word	0x08012f85
 8012f10:	08012f85 	.word	0x08012f85
 8012f14:	08012f85 	.word	0x08012f85
 8012f18:	08012f85 	.word	0x08012f85
 8012f1c:	08012f85 	.word	0x08012f85
 8012f20:	08012f85 	.word	0x08012f85
 8012f24:	08012f85 	.word	0x08012f85
 8012f28:	08012f8d 	.word	0x08012f8d
 8012f2c:	08012f85 	.word	0x08012f85
 8012f30:	08012f85 	.word	0x08012f85
 8012f34:	08012f85 	.word	0x08012f85
 8012f38:	08012f85 	.word	0x08012f85
 8012f3c:	08012f85 	.word	0x08012f85
 8012f40:	08012f85 	.word	0x08012f85
 8012f44:	08012f85 	.word	0x08012f85
 8012f48:	08012f8d 	.word	0x08012f8d
 8012f4c:	58024400 	.word	0x58024400
 8012f50:	58024800 	.word	0x58024800
 8012f54:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f5c:	3308      	adds	r3, #8
 8012f5e:	2101      	movs	r1, #1
 8012f60:	4618      	mov	r0, r3
 8012f62:	f000 fd07 	bl	8013974 <RCCEx_PLL2_Config>
 8012f66:	4603      	mov	r3, r0
 8012f68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012f6c:	e00f      	b.n	8012f8e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f72:	3328      	adds	r3, #40	; 0x28
 8012f74:	2101      	movs	r1, #1
 8012f76:	4618      	mov	r0, r3
 8012f78:	f000 fdae 	bl	8013ad8 <RCCEx_PLL3_Config>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012f82:	e004      	b.n	8012f8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f84:	2301      	movs	r3, #1
 8012f86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012f8a:	e000      	b.n	8012f8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8012f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d10b      	bne.n	8012fae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012f96:	4bc0      	ldr	r3, [pc, #768]	; (8013298 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8012f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f9a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8012f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012fa6:	4abc      	ldr	r2, [pc, #752]	; (8013298 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8012fa8:	430b      	orrs	r3, r1
 8012faa:	6553      	str	r3, [r2, #84]	; 0x54
 8012fac:	e003      	b.n	8012fb6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012fb2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbe:	f002 0302 	and.w	r3, r2, #2
 8012fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012fcc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8012fd0:	460b      	mov	r3, r1
 8012fd2:	4313      	orrs	r3, r2
 8012fd4:	d043      	beq.n	801305e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012fde:	2b05      	cmp	r3, #5
 8012fe0:	d824      	bhi.n	801302c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8012fe2:	a201      	add	r2, pc, #4	; (adr r2, 8012fe8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8012fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fe8:	08013035 	.word	0x08013035
 8012fec:	08013001 	.word	0x08013001
 8012ff0:	08013017 	.word	0x08013017
 8012ff4:	08013035 	.word	0x08013035
 8012ff8:	08013035 	.word	0x08013035
 8012ffc:	08013035 	.word	0x08013035
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013004:	3308      	adds	r3, #8
 8013006:	2101      	movs	r1, #1
 8013008:	4618      	mov	r0, r3
 801300a:	f000 fcb3 	bl	8013974 <RCCEx_PLL2_Config>
 801300e:	4603      	mov	r3, r0
 8013010:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8013014:	e00f      	b.n	8013036 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801301a:	3328      	adds	r3, #40	; 0x28
 801301c:	2101      	movs	r1, #1
 801301e:	4618      	mov	r0, r3
 8013020:	f000 fd5a 	bl	8013ad8 <RCCEx_PLL3_Config>
 8013024:	4603      	mov	r3, r0
 8013026:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801302a:	e004      	b.n	8013036 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801302c:	2301      	movs	r3, #1
 801302e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013032:	e000      	b.n	8013036 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8013034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013036:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801303a:	2b00      	cmp	r3, #0
 801303c:	d10b      	bne.n	8013056 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801303e:	4b96      	ldr	r3, [pc, #600]	; (8013298 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013042:	f023 0107 	bic.w	r1, r3, #7
 8013046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801304a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801304e:	4a92      	ldr	r2, [pc, #584]	; (8013298 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013050:	430b      	orrs	r3, r1
 8013052:	6553      	str	r3, [r2, #84]	; 0x54
 8013054:	e003      	b.n	801305e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013056:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801305a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801305e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013066:	f002 0304 	and.w	r3, r2, #4
 801306a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801306e:	2300      	movs	r3, #0
 8013070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013074:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8013078:	460b      	mov	r3, r1
 801307a:	4313      	orrs	r3, r2
 801307c:	d043      	beq.n	8013106 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801307e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013086:	2b05      	cmp	r3, #5
 8013088:	d824      	bhi.n	80130d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 801308a:	a201      	add	r2, pc, #4	; (adr r2, 8013090 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 801308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013090:	080130dd 	.word	0x080130dd
 8013094:	080130a9 	.word	0x080130a9
 8013098:	080130bf 	.word	0x080130bf
 801309c:	080130dd 	.word	0x080130dd
 80130a0:	080130dd 	.word	0x080130dd
 80130a4:	080130dd 	.word	0x080130dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80130a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130ac:	3308      	adds	r3, #8
 80130ae:	2101      	movs	r1, #1
 80130b0:	4618      	mov	r0, r3
 80130b2:	f000 fc5f 	bl	8013974 <RCCEx_PLL2_Config>
 80130b6:	4603      	mov	r3, r0
 80130b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80130bc:	e00f      	b.n	80130de <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80130be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130c2:	3328      	adds	r3, #40	; 0x28
 80130c4:	2101      	movs	r1, #1
 80130c6:	4618      	mov	r0, r3
 80130c8:	f000 fd06 	bl	8013ad8 <RCCEx_PLL3_Config>
 80130cc:	4603      	mov	r3, r0
 80130ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80130d2:	e004      	b.n	80130de <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80130d4:	2301      	movs	r3, #1
 80130d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80130da:	e000      	b.n	80130de <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80130dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80130de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d10b      	bne.n	80130fe <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80130e6:	4b6c      	ldr	r3, [pc, #432]	; (8013298 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80130e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130ea:	f023 0107 	bic.w	r1, r3, #7
 80130ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80130f6:	4a68      	ldr	r2, [pc, #416]	; (8013298 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80130f8:	430b      	orrs	r3, r1
 80130fa:	6593      	str	r3, [r2, #88]	; 0x58
 80130fc:	e003      	b.n	8013106 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013102:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310e:	f002 0320 	and.w	r3, r2, #32
 8013112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013116:	2300      	movs	r3, #0
 8013118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801311c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8013120:	460b      	mov	r3, r1
 8013122:	4313      	orrs	r3, r2
 8013124:	d055      	beq.n	80131d2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8013126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801312a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801312e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013132:	d033      	beq.n	801319c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8013134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013138:	d82c      	bhi.n	8013194 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 801313a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801313e:	d02f      	beq.n	80131a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8013140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013144:	d826      	bhi.n	8013194 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8013146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801314a:	d02b      	beq.n	80131a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801314c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013150:	d820      	bhi.n	8013194 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8013152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013156:	d012      	beq.n	801317e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8013158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801315c:	d81a      	bhi.n	8013194 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 801315e:	2b00      	cmp	r3, #0
 8013160:	d022      	beq.n	80131a8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8013162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013166:	d115      	bne.n	8013194 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801316c:	3308      	adds	r3, #8
 801316e:	2100      	movs	r1, #0
 8013170:	4618      	mov	r0, r3
 8013172:	f000 fbff 	bl	8013974 <RCCEx_PLL2_Config>
 8013176:	4603      	mov	r3, r0
 8013178:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801317c:	e015      	b.n	80131aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801317e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013182:	3328      	adds	r3, #40	; 0x28
 8013184:	2102      	movs	r1, #2
 8013186:	4618      	mov	r0, r3
 8013188:	f000 fca6 	bl	8013ad8 <RCCEx_PLL3_Config>
 801318c:	4603      	mov	r3, r0
 801318e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8013192:	e00a      	b.n	80131aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013194:	2301      	movs	r3, #1
 8013196:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801319a:	e006      	b.n	80131aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 801319c:	bf00      	nop
 801319e:	e004      	b.n	80131aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80131a0:	bf00      	nop
 80131a2:	e002      	b.n	80131aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80131a4:	bf00      	nop
 80131a6:	e000      	b.n	80131aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80131a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80131aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d10b      	bne.n	80131ca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80131b2:	4b39      	ldr	r3, [pc, #228]	; (8013298 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80131b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80131ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80131c2:	4a35      	ldr	r2, [pc, #212]	; (8013298 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80131c4:	430b      	orrs	r3, r1
 80131c6:	6553      	str	r3, [r2, #84]	; 0x54
 80131c8:	e003      	b.n	80131d2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80131ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80131ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80131d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80131de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80131e2:	2300      	movs	r3, #0
 80131e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80131e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80131ec:	460b      	mov	r3, r1
 80131ee:	4313      	orrs	r3, r2
 80131f0:	d058      	beq.n	80132a4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80131f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80131fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80131fe:	d033      	beq.n	8013268 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8013200:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8013204:	d82c      	bhi.n	8013260 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8013206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801320a:	d02f      	beq.n	801326c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801320c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013210:	d826      	bhi.n	8013260 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8013212:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013216:	d02b      	beq.n	8013270 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8013218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801321c:	d820      	bhi.n	8013260 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 801321e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013222:	d012      	beq.n	801324a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8013224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013228:	d81a      	bhi.n	8013260 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 801322a:	2b00      	cmp	r3, #0
 801322c:	d022      	beq.n	8013274 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 801322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013232:	d115      	bne.n	8013260 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013238:	3308      	adds	r3, #8
 801323a:	2100      	movs	r1, #0
 801323c:	4618      	mov	r0, r3
 801323e:	f000 fb99 	bl	8013974 <RCCEx_PLL2_Config>
 8013242:	4603      	mov	r3, r0
 8013244:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8013248:	e015      	b.n	8013276 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801324a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801324e:	3328      	adds	r3, #40	; 0x28
 8013250:	2102      	movs	r1, #2
 8013252:	4618      	mov	r0, r3
 8013254:	f000 fc40 	bl	8013ad8 <RCCEx_PLL3_Config>
 8013258:	4603      	mov	r3, r0
 801325a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801325e:	e00a      	b.n	8013276 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013260:	2301      	movs	r3, #1
 8013262:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013266:	e006      	b.n	8013276 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8013268:	bf00      	nop
 801326a:	e004      	b.n	8013276 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 801326c:	bf00      	nop
 801326e:	e002      	b.n	8013276 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8013270:	bf00      	nop
 8013272:	e000      	b.n	8013276 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8013274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013276:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801327a:	2b00      	cmp	r3, #0
 801327c:	d10e      	bne.n	801329c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801327e:	4b06      	ldr	r3, [pc, #24]	; (8013298 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013282:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8013286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801328a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801328e:	4a02      	ldr	r2, [pc, #8]	; (8013298 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013290:	430b      	orrs	r3, r1
 8013292:	6593      	str	r3, [r2, #88]	; 0x58
 8013294:	e006      	b.n	80132a4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8013296:	bf00      	nop
 8013298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801329c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80132a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80132a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80132b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80132b4:	2300      	movs	r3, #0
 80132b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80132ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80132be:	460b      	mov	r3, r1
 80132c0:	4313      	orrs	r3, r2
 80132c2:	d055      	beq.n	8013370 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80132c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80132cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80132d0:	d033      	beq.n	801333a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80132d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80132d6:	d82c      	bhi.n	8013332 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80132d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80132dc:	d02f      	beq.n	801333e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80132de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80132e2:	d826      	bhi.n	8013332 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80132e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80132e8:	d02b      	beq.n	8013342 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80132ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80132ee:	d820      	bhi.n	8013332 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80132f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80132f4:	d012      	beq.n	801331c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80132f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80132fa:	d81a      	bhi.n	8013332 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d022      	beq.n	8013346 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8013300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013304:	d115      	bne.n	8013332 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801330a:	3308      	adds	r3, #8
 801330c:	2100      	movs	r1, #0
 801330e:	4618      	mov	r0, r3
 8013310:	f000 fb30 	bl	8013974 <RCCEx_PLL2_Config>
 8013314:	4603      	mov	r3, r0
 8013316:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801331a:	e015      	b.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801331c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013320:	3328      	adds	r3, #40	; 0x28
 8013322:	2102      	movs	r1, #2
 8013324:	4618      	mov	r0, r3
 8013326:	f000 fbd7 	bl	8013ad8 <RCCEx_PLL3_Config>
 801332a:	4603      	mov	r3, r0
 801332c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8013330:	e00a      	b.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013332:	2301      	movs	r3, #1
 8013334:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013338:	e006      	b.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 801333a:	bf00      	nop
 801333c:	e004      	b.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 801333e:	bf00      	nop
 8013340:	e002      	b.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8013342:	bf00      	nop
 8013344:	e000      	b.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8013346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013348:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801334c:	2b00      	cmp	r3, #0
 801334e:	d10b      	bne.n	8013368 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8013350:	4ba1      	ldr	r3, [pc, #644]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013354:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8013358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801335c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013360:	4a9d      	ldr	r2, [pc, #628]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013362:	430b      	orrs	r3, r1
 8013364:	6593      	str	r3, [r2, #88]	; 0x58
 8013366:	e003      	b.n	8013370 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013368:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801336c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8013370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013378:	f002 0308 	and.w	r3, r2, #8
 801337c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013380:	2300      	movs	r3, #0
 8013382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013386:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801338a:	460b      	mov	r3, r1
 801338c:	4313      	orrs	r3, r2
 801338e:	d01e      	beq.n	80133ce <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8013390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801339c:	d10c      	bne.n	80133b8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801339e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133a2:	3328      	adds	r3, #40	; 0x28
 80133a4:	2102      	movs	r1, #2
 80133a6:	4618      	mov	r0, r3
 80133a8:	f000 fb96 	bl	8013ad8 <RCCEx_PLL3_Config>
 80133ac:	4603      	mov	r3, r0
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d002      	beq.n	80133b8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80133b2:	2301      	movs	r3, #1
 80133b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80133b8:	4b87      	ldr	r3, [pc, #540]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80133ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80133c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80133c8:	4a83      	ldr	r2, [pc, #524]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80133ca:	430b      	orrs	r3, r1
 80133cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80133ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d6:	f002 0310 	and.w	r3, r2, #16
 80133da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80133de:	2300      	movs	r3, #0
 80133e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80133e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80133e8:	460b      	mov	r3, r1
 80133ea:	4313      	orrs	r3, r2
 80133ec:	d01e      	beq.n	801342c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80133ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80133f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80133fa:	d10c      	bne.n	8013416 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80133fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013400:	3328      	adds	r3, #40	; 0x28
 8013402:	2102      	movs	r1, #2
 8013404:	4618      	mov	r0, r3
 8013406:	f000 fb67 	bl	8013ad8 <RCCEx_PLL3_Config>
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d002      	beq.n	8013416 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8013410:	2301      	movs	r3, #1
 8013412:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8013416:	4b70      	ldr	r3, [pc, #448]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801341a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801341e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013426:	4a6c      	ldr	r2, [pc, #432]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013428:	430b      	orrs	r3, r1
 801342a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801342c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013434:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8013438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801343c:	2300      	movs	r3, #0
 801343e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013442:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8013446:	460b      	mov	r3, r1
 8013448:	4313      	orrs	r3, r2
 801344a:	d03e      	beq.n	80134ca <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801344c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013450:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013458:	d022      	beq.n	80134a0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 801345a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801345e:	d81b      	bhi.n	8013498 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8013460:	2b00      	cmp	r3, #0
 8013462:	d003      	beq.n	801346c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8013464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013468:	d00b      	beq.n	8013482 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 801346a:	e015      	b.n	8013498 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801346c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013470:	3308      	adds	r3, #8
 8013472:	2100      	movs	r1, #0
 8013474:	4618      	mov	r0, r3
 8013476:	f000 fa7d 	bl	8013974 <RCCEx_PLL2_Config>
 801347a:	4603      	mov	r3, r0
 801347c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8013480:	e00f      	b.n	80134a2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013486:	3328      	adds	r3, #40	; 0x28
 8013488:	2102      	movs	r1, #2
 801348a:	4618      	mov	r0, r3
 801348c:	f000 fb24 	bl	8013ad8 <RCCEx_PLL3_Config>
 8013490:	4603      	mov	r3, r0
 8013492:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8013496:	e004      	b.n	80134a2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013498:	2301      	movs	r3, #1
 801349a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801349e:	e000      	b.n	80134a2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80134a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80134a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d10b      	bne.n	80134c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80134aa:	4b4b      	ldr	r3, [pc, #300]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80134ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80134b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80134ba:	4a47      	ldr	r2, [pc, #284]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80134bc:	430b      	orrs	r3, r1
 80134be:	6593      	str	r3, [r2, #88]	; 0x58
 80134c0:	e003      	b.n	80134ca <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80134c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80134c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80134ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80134d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80134d8:	2300      	movs	r3, #0
 80134da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80134dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80134e0:	460b      	mov	r3, r1
 80134e2:	4313      	orrs	r3, r2
 80134e4:	d03b      	beq.n	801355e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80134e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80134ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80134f2:	d01f      	beq.n	8013534 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80134f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80134f8:	d818      	bhi.n	801352c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80134fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80134fe:	d003      	beq.n	8013508 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8013500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013504:	d007      	beq.n	8013516 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8013506:	e011      	b.n	801352c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013508:	4b33      	ldr	r3, [pc, #204]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801350c:	4a32      	ldr	r2, [pc, #200]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801350e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8013514:	e00f      	b.n	8013536 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801351a:	3328      	adds	r3, #40	; 0x28
 801351c:	2101      	movs	r1, #1
 801351e:	4618      	mov	r0, r3
 8013520:	f000 fada 	bl	8013ad8 <RCCEx_PLL3_Config>
 8013524:	4603      	mov	r3, r0
 8013526:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 801352a:	e004      	b.n	8013536 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801352c:	2301      	movs	r3, #1
 801352e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013532:	e000      	b.n	8013536 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8013534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013536:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801353a:	2b00      	cmp	r3, #0
 801353c:	d10b      	bne.n	8013556 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801353e:	4b26      	ldr	r3, [pc, #152]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013542:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8013546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801354e:	4a22      	ldr	r2, [pc, #136]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013550:	430b      	orrs	r3, r1
 8013552:	6553      	str	r3, [r2, #84]	; 0x54
 8013554:	e003      	b.n	801355e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013556:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801355a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801355e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013566:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801356a:	673b      	str	r3, [r7, #112]	; 0x70
 801356c:	2300      	movs	r3, #0
 801356e:	677b      	str	r3, [r7, #116]	; 0x74
 8013570:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8013574:	460b      	mov	r3, r1
 8013576:	4313      	orrs	r3, r2
 8013578:	d034      	beq.n	80135e4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801357a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013580:	2b00      	cmp	r3, #0
 8013582:	d003      	beq.n	801358c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8013584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013588:	d007      	beq.n	801359a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 801358a:	e011      	b.n	80135b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801358c:	4b12      	ldr	r3, [pc, #72]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013590:	4a11      	ldr	r2, [pc, #68]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013598:	e00e      	b.n	80135b8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801359a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801359e:	3308      	adds	r3, #8
 80135a0:	2102      	movs	r1, #2
 80135a2:	4618      	mov	r0, r3
 80135a4:	f000 f9e6 	bl	8013974 <RCCEx_PLL2_Config>
 80135a8:	4603      	mov	r3, r0
 80135aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80135ae:	e003      	b.n	80135b8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80135b0:	2301      	movs	r3, #1
 80135b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80135b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80135b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d10d      	bne.n	80135dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80135c0:	4b05      	ldr	r3, [pc, #20]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80135c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80135c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ce:	4a02      	ldr	r2, [pc, #8]	; (80135d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80135d0:	430b      	orrs	r3, r1
 80135d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80135d4:	e006      	b.n	80135e4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80135d6:	bf00      	nop
 80135d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80135dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80135e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80135e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80135f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80135f2:	2300      	movs	r3, #0
 80135f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80135f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80135fa:	460b      	mov	r3, r1
 80135fc:	4313      	orrs	r3, r2
 80135fe:	d00c      	beq.n	801361a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8013600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013604:	3328      	adds	r3, #40	; 0x28
 8013606:	2102      	movs	r1, #2
 8013608:	4618      	mov	r0, r3
 801360a:	f000 fa65 	bl	8013ad8 <RCCEx_PLL3_Config>
 801360e:	4603      	mov	r3, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	d002      	beq.n	801361a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8013614:	2301      	movs	r3, #1
 8013616:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801361a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013622:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8013626:	663b      	str	r3, [r7, #96]	; 0x60
 8013628:	2300      	movs	r3, #0
 801362a:	667b      	str	r3, [r7, #100]	; 0x64
 801362c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8013630:	460b      	mov	r3, r1
 8013632:	4313      	orrs	r3, r2
 8013634:	d038      	beq.n	80136a8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8013636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801363e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013642:	d018      	beq.n	8013676 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8013644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013648:	d811      	bhi.n	801366e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 801364a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801364e:	d014      	beq.n	801367a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8013650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013654:	d80b      	bhi.n	801366e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8013656:	2b00      	cmp	r3, #0
 8013658:	d011      	beq.n	801367e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 801365a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801365e:	d106      	bne.n	801366e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013660:	4bc3      	ldr	r3, [pc, #780]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013664:	4ac2      	ldr	r2, [pc, #776]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801366a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801366c:	e008      	b.n	8013680 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801366e:	2301      	movs	r3, #1
 8013670:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013674:	e004      	b.n	8013680 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8013676:	bf00      	nop
 8013678:	e002      	b.n	8013680 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 801367a:	bf00      	nop
 801367c:	e000      	b.n	8013680 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 801367e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013680:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013684:	2b00      	cmp	r3, #0
 8013686:	d10b      	bne.n	80136a0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013688:	4bb9      	ldr	r3, [pc, #740]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801368c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8013690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013698:	4ab5      	ldr	r2, [pc, #724]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801369a:	430b      	orrs	r3, r1
 801369c:	6553      	str	r3, [r2, #84]	; 0x54
 801369e:	e003      	b.n	80136a8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80136a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80136a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80136a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80136b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80136b6:	2300      	movs	r3, #0
 80136b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80136ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80136be:	460b      	mov	r3, r1
 80136c0:	4313      	orrs	r3, r2
 80136c2:	d009      	beq.n	80136d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80136c4:	4baa      	ldr	r3, [pc, #680]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80136c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80136cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136d2:	4aa7      	ldr	r2, [pc, #668]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80136d4:	430b      	orrs	r3, r1
 80136d6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80136d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80136e4:	653b      	str	r3, [r7, #80]	; 0x50
 80136e6:	2300      	movs	r3, #0
 80136e8:	657b      	str	r3, [r7, #84]	; 0x54
 80136ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80136ee:	460b      	mov	r3, r1
 80136f0:	4313      	orrs	r3, r2
 80136f2:	d009      	beq.n	8013708 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80136f4:	4b9e      	ldr	r3, [pc, #632]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80136f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136f8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80136fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013702:	4a9b      	ldr	r2, [pc, #620]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013704:	430b      	orrs	r3, r1
 8013706:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8013708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013710:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8013714:	64bb      	str	r3, [r7, #72]	; 0x48
 8013716:	2300      	movs	r3, #0
 8013718:	64fb      	str	r3, [r7, #76]	; 0x4c
 801371a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801371e:	460b      	mov	r3, r1
 8013720:	4313      	orrs	r3, r2
 8013722:	d009      	beq.n	8013738 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8013724:	4b92      	ldr	r3, [pc, #584]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013728:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 801372c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013732:	4a8f      	ldr	r2, [pc, #572]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013734:	430b      	orrs	r3, r1
 8013736:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8013738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013740:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8013744:	643b      	str	r3, [r7, #64]	; 0x40
 8013746:	2300      	movs	r3, #0
 8013748:	647b      	str	r3, [r7, #68]	; 0x44
 801374a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801374e:	460b      	mov	r3, r1
 8013750:	4313      	orrs	r3, r2
 8013752:	d00e      	beq.n	8013772 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013754:	4b86      	ldr	r3, [pc, #536]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013756:	691b      	ldr	r3, [r3, #16]
 8013758:	4a85      	ldr	r2, [pc, #532]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801375a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801375e:	6113      	str	r3, [r2, #16]
 8013760:	4b83      	ldr	r3, [pc, #524]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013762:	6919      	ldr	r1, [r3, #16]
 8013764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013768:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801376c:	4a80      	ldr	r2, [pc, #512]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801376e:	430b      	orrs	r3, r1
 8013770:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801377e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013780:	2300      	movs	r3, #0
 8013782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013784:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8013788:	460b      	mov	r3, r1
 801378a:	4313      	orrs	r3, r2
 801378c:	d009      	beq.n	80137a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801378e:	4b78      	ldr	r3, [pc, #480]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013792:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8013796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801379c:	4a74      	ldr	r2, [pc, #464]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801379e:	430b      	orrs	r3, r1
 80137a0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80137a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137aa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80137ae:	633b      	str	r3, [r7, #48]	; 0x30
 80137b0:	2300      	movs	r3, #0
 80137b2:	637b      	str	r3, [r7, #52]	; 0x34
 80137b4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80137b8:	460b      	mov	r3, r1
 80137ba:	4313      	orrs	r3, r2
 80137bc:	d00a      	beq.n	80137d4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80137be:	4b6c      	ldr	r3, [pc, #432]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80137c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137c2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80137c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80137ce:	4a68      	ldr	r2, [pc, #416]	; (8013970 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80137d0:	430b      	orrs	r3, r1
 80137d2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80137d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137dc:	2100      	movs	r1, #0
 80137de:	62b9      	str	r1, [r7, #40]	; 0x28
 80137e0:	f003 0301 	and.w	r3, r3, #1
 80137e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80137ea:	460b      	mov	r3, r1
 80137ec:	4313      	orrs	r3, r2
 80137ee:	d011      	beq.n	8013814 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80137f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137f4:	3308      	adds	r3, #8
 80137f6:	2100      	movs	r1, #0
 80137f8:	4618      	mov	r0, r3
 80137fa:	f000 f8bb 	bl	8013974 <RCCEx_PLL2_Config>
 80137fe:	4603      	mov	r3, r0
 8013800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013804:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013808:	2b00      	cmp	r3, #0
 801380a:	d003      	beq.n	8013814 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801380c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013810:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8013814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801381c:	2100      	movs	r1, #0
 801381e:	6239      	str	r1, [r7, #32]
 8013820:	f003 0302 	and.w	r3, r3, #2
 8013824:	627b      	str	r3, [r7, #36]	; 0x24
 8013826:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801382a:	460b      	mov	r3, r1
 801382c:	4313      	orrs	r3, r2
 801382e:	d011      	beq.n	8013854 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013834:	3308      	adds	r3, #8
 8013836:	2101      	movs	r1, #1
 8013838:	4618      	mov	r0, r3
 801383a:	f000 f89b 	bl	8013974 <RCCEx_PLL2_Config>
 801383e:	4603      	mov	r3, r0
 8013840:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013844:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013848:	2b00      	cmp	r3, #0
 801384a:	d003      	beq.n	8013854 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801384c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013850:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8013854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385c:	2100      	movs	r1, #0
 801385e:	61b9      	str	r1, [r7, #24]
 8013860:	f003 0304 	and.w	r3, r3, #4
 8013864:	61fb      	str	r3, [r7, #28]
 8013866:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801386a:	460b      	mov	r3, r1
 801386c:	4313      	orrs	r3, r2
 801386e:	d011      	beq.n	8013894 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013874:	3308      	adds	r3, #8
 8013876:	2102      	movs	r1, #2
 8013878:	4618      	mov	r0, r3
 801387a:	f000 f87b 	bl	8013974 <RCCEx_PLL2_Config>
 801387e:	4603      	mov	r3, r0
 8013880:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013884:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013888:	2b00      	cmp	r3, #0
 801388a:	d003      	beq.n	8013894 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801388c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013890:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8013894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801389c:	2100      	movs	r1, #0
 801389e:	6139      	str	r1, [r7, #16]
 80138a0:	f003 0308 	and.w	r3, r3, #8
 80138a4:	617b      	str	r3, [r7, #20]
 80138a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80138aa:	460b      	mov	r3, r1
 80138ac:	4313      	orrs	r3, r2
 80138ae:	d011      	beq.n	80138d4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80138b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138b4:	3328      	adds	r3, #40	; 0x28
 80138b6:	2100      	movs	r1, #0
 80138b8:	4618      	mov	r0, r3
 80138ba:	f000 f90d 	bl	8013ad8 <RCCEx_PLL3_Config>
 80138be:	4603      	mov	r3, r0
 80138c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80138c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d003      	beq.n	80138d4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80138cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80138d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80138d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138dc:	2100      	movs	r1, #0
 80138de:	60b9      	str	r1, [r7, #8]
 80138e0:	f003 0310 	and.w	r3, r3, #16
 80138e4:	60fb      	str	r3, [r7, #12]
 80138e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80138ea:	460b      	mov	r3, r1
 80138ec:	4313      	orrs	r3, r2
 80138ee:	d011      	beq.n	8013914 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80138f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138f4:	3328      	adds	r3, #40	; 0x28
 80138f6:	2101      	movs	r1, #1
 80138f8:	4618      	mov	r0, r3
 80138fa:	f000 f8ed 	bl	8013ad8 <RCCEx_PLL3_Config>
 80138fe:	4603      	mov	r3, r0
 8013900:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013904:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013908:	2b00      	cmp	r3, #0
 801390a:	d003      	beq.n	8013914 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801390c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013910:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8013914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391c:	2100      	movs	r1, #0
 801391e:	6039      	str	r1, [r7, #0]
 8013920:	f003 0320 	and.w	r3, r3, #32
 8013924:	607b      	str	r3, [r7, #4]
 8013926:	e9d7 1200 	ldrd	r1, r2, [r7]
 801392a:	460b      	mov	r3, r1
 801392c:	4313      	orrs	r3, r2
 801392e:	d011      	beq.n	8013954 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013934:	3328      	adds	r3, #40	; 0x28
 8013936:	2102      	movs	r1, #2
 8013938:	4618      	mov	r0, r3
 801393a:	f000 f8cd 	bl	8013ad8 <RCCEx_PLL3_Config>
 801393e:	4603      	mov	r3, r0
 8013940:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013944:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013948:	2b00      	cmp	r3, #0
 801394a:	d003      	beq.n	8013954 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801394c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013950:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8013954:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8013958:	2b00      	cmp	r3, #0
 801395a:	d101      	bne.n	8013960 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 801395c:	2300      	movs	r3, #0
 801395e:	e000      	b.n	8013962 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8013960:	2301      	movs	r3, #1
}
 8013962:	4618      	mov	r0, r3
 8013964:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8013968:	46bd      	mov	sp, r7
 801396a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801396e:	bf00      	nop
 8013970:	58024400 	.word	0x58024400

08013974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801397e:	2300      	movs	r3, #0
 8013980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013982:	4b53      	ldr	r3, [pc, #332]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013986:	f003 0303 	and.w	r3, r3, #3
 801398a:	2b03      	cmp	r3, #3
 801398c:	d101      	bne.n	8013992 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801398e:	2301      	movs	r3, #1
 8013990:	e099      	b.n	8013ac6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013992:	4b4f      	ldr	r3, [pc, #316]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	4a4e      	ldr	r2, [pc, #312]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801399c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801399e:	f7f8 f917 	bl	800bbd0 <HAL_GetTick>
 80139a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80139a4:	e008      	b.n	80139b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80139a6:	f7f8 f913 	bl	800bbd0 <HAL_GetTick>
 80139aa:	4602      	mov	r2, r0
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	1ad3      	subs	r3, r2, r3
 80139b0:	2b02      	cmp	r3, #2
 80139b2:	d901      	bls.n	80139b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80139b4:	2303      	movs	r3, #3
 80139b6:	e086      	b.n	8013ac6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80139b8:	4b45      	ldr	r3, [pc, #276]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d1f0      	bne.n	80139a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80139c4:	4b42      	ldr	r3, [pc, #264]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 80139c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	031b      	lsls	r3, r3, #12
 80139d2:	493f      	ldr	r1, [pc, #252]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 80139d4:	4313      	orrs	r3, r2
 80139d6:	628b      	str	r3, [r1, #40]	; 0x28
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	3b01      	subs	r3, #1
 80139de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	689b      	ldr	r3, [r3, #8]
 80139e6:	3b01      	subs	r3, #1
 80139e8:	025b      	lsls	r3, r3, #9
 80139ea:	b29b      	uxth	r3, r3
 80139ec:	431a      	orrs	r2, r3
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	68db      	ldr	r3, [r3, #12]
 80139f2:	3b01      	subs	r3, #1
 80139f4:	041b      	lsls	r3, r3, #16
 80139f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80139fa:	431a      	orrs	r2, r3
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	691b      	ldr	r3, [r3, #16]
 8013a00:	3b01      	subs	r3, #1
 8013a02:	061b      	lsls	r3, r3, #24
 8013a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8013a08:	4931      	ldr	r1, [pc, #196]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a0a:	4313      	orrs	r3, r2
 8013a0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8013a0e:	4b30      	ldr	r3, [pc, #192]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	695b      	ldr	r3, [r3, #20]
 8013a1a:	492d      	ldr	r1, [pc, #180]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a1c:	4313      	orrs	r3, r2
 8013a1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8013a20:	4b2b      	ldr	r3, [pc, #172]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a24:	f023 0220 	bic.w	r2, r3, #32
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	699b      	ldr	r3, [r3, #24]
 8013a2c:	4928      	ldr	r1, [pc, #160]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8013a32:	4b27      	ldr	r3, [pc, #156]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a36:	4a26      	ldr	r2, [pc, #152]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a38:	f023 0310 	bic.w	r3, r3, #16
 8013a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8013a3e:	4b24      	ldr	r3, [pc, #144]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013a42:	4b24      	ldr	r3, [pc, #144]	; (8013ad4 <RCCEx_PLL2_Config+0x160>)
 8013a44:	4013      	ands	r3, r2
 8013a46:	687a      	ldr	r2, [r7, #4]
 8013a48:	69d2      	ldr	r2, [r2, #28]
 8013a4a:	00d2      	lsls	r2, r2, #3
 8013a4c:	4920      	ldr	r1, [pc, #128]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a4e:	4313      	orrs	r3, r2
 8013a50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8013a52:	4b1f      	ldr	r3, [pc, #124]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a56:	4a1e      	ldr	r2, [pc, #120]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a58:	f043 0310 	orr.w	r3, r3, #16
 8013a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d106      	bne.n	8013a72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8013a64:	4b1a      	ldr	r3, [pc, #104]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a68:	4a19      	ldr	r2, [pc, #100]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013a70:	e00f      	b.n	8013a92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	d106      	bne.n	8013a86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8013a78:	4b15      	ldr	r3, [pc, #84]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a7c:	4a14      	ldr	r2, [pc, #80]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013a84:	e005      	b.n	8013a92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8013a86:	4b12      	ldr	r3, [pc, #72]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a8a:	4a11      	ldr	r2, [pc, #68]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013a90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8013a92:	4b0f      	ldr	r3, [pc, #60]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	4a0e      	ldr	r2, [pc, #56]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013a98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013a9e:	f7f8 f897 	bl	800bbd0 <HAL_GetTick>
 8013aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013aa4:	e008      	b.n	8013ab8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013aa6:	f7f8 f893 	bl	800bbd0 <HAL_GetTick>
 8013aaa:	4602      	mov	r2, r0
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	1ad3      	subs	r3, r2, r3
 8013ab0:	2b02      	cmp	r3, #2
 8013ab2:	d901      	bls.n	8013ab8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013ab4:	2303      	movs	r3, #3
 8013ab6:	e006      	b.n	8013ac6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013ab8:	4b05      	ldr	r3, [pc, #20]	; (8013ad0 <RCCEx_PLL2_Config+0x15c>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d0f0      	beq.n	8013aa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8013ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3710      	adds	r7, #16
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	58024400 	.word	0x58024400
 8013ad4:	ffff0007 	.word	0xffff0007

08013ad8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b084      	sub	sp, #16
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013ae6:	4b53      	ldr	r3, [pc, #332]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aea:	f003 0303 	and.w	r3, r3, #3
 8013aee:	2b03      	cmp	r3, #3
 8013af0:	d101      	bne.n	8013af6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8013af2:	2301      	movs	r3, #1
 8013af4:	e099      	b.n	8013c2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8013af6:	4b4f      	ldr	r3, [pc, #316]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4a4e      	ldr	r2, [pc, #312]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013b02:	f7f8 f865 	bl	800bbd0 <HAL_GetTick>
 8013b06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013b08:	e008      	b.n	8013b1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013b0a:	f7f8 f861 	bl	800bbd0 <HAL_GetTick>
 8013b0e:	4602      	mov	r2, r0
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	1ad3      	subs	r3, r2, r3
 8013b14:	2b02      	cmp	r3, #2
 8013b16:	d901      	bls.n	8013b1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013b18:	2303      	movs	r3, #3
 8013b1a:	e086      	b.n	8013c2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013b1c:	4b45      	ldr	r3, [pc, #276]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d1f0      	bne.n	8013b0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8013b28:	4b42      	ldr	r3, [pc, #264]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	051b      	lsls	r3, r3, #20
 8013b36:	493f      	ldr	r1, [pc, #252]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013b38:	4313      	orrs	r3, r2
 8013b3a:	628b      	str	r3, [r1, #40]	; 0x28
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	685b      	ldr	r3, [r3, #4]
 8013b40:	3b01      	subs	r3, #1
 8013b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	689b      	ldr	r3, [r3, #8]
 8013b4a:	3b01      	subs	r3, #1
 8013b4c:	025b      	lsls	r3, r3, #9
 8013b4e:	b29b      	uxth	r3, r3
 8013b50:	431a      	orrs	r2, r3
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	68db      	ldr	r3, [r3, #12]
 8013b56:	3b01      	subs	r3, #1
 8013b58:	041b      	lsls	r3, r3, #16
 8013b5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8013b5e:	431a      	orrs	r2, r3
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	691b      	ldr	r3, [r3, #16]
 8013b64:	3b01      	subs	r3, #1
 8013b66:	061b      	lsls	r3, r3, #24
 8013b68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8013b6c:	4931      	ldr	r1, [pc, #196]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013b6e:	4313      	orrs	r3, r2
 8013b70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8013b72:	4b30      	ldr	r3, [pc, #192]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	695b      	ldr	r3, [r3, #20]
 8013b7e:	492d      	ldr	r1, [pc, #180]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013b80:	4313      	orrs	r3, r2
 8013b82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013b84:	4b2b      	ldr	r3, [pc, #172]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	699b      	ldr	r3, [r3, #24]
 8013b90:	4928      	ldr	r1, [pc, #160]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013b92:	4313      	orrs	r3, r2
 8013b94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8013b96:	4b27      	ldr	r3, [pc, #156]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b9a:	4a26      	ldr	r2, [pc, #152]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8013ba2:	4b24      	ldr	r3, [pc, #144]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ba6:	4b24      	ldr	r3, [pc, #144]	; (8013c38 <RCCEx_PLL3_Config+0x160>)
 8013ba8:	4013      	ands	r3, r2
 8013baa:	687a      	ldr	r2, [r7, #4]
 8013bac:	69d2      	ldr	r2, [r2, #28]
 8013bae:	00d2      	lsls	r2, r2, #3
 8013bb0:	4920      	ldr	r1, [pc, #128]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013bb2:	4313      	orrs	r3, r2
 8013bb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8013bb6:	4b1f      	ldr	r3, [pc, #124]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bba:	4a1e      	ldr	r2, [pc, #120]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d106      	bne.n	8013bd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013bc8:	4b1a      	ldr	r3, [pc, #104]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bcc:	4a19      	ldr	r2, [pc, #100]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013bce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013bd4:	e00f      	b.n	8013bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d106      	bne.n	8013bea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8013bdc:	4b15      	ldr	r3, [pc, #84]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be0:	4a14      	ldr	r2, [pc, #80]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013be2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013be8:	e005      	b.n	8013bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8013bea:	4b12      	ldr	r3, [pc, #72]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bee:	4a11      	ldr	r2, [pc, #68]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013bf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8013bf6:	4b0f      	ldr	r3, [pc, #60]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	4a0e      	ldr	r2, [pc, #56]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013c02:	f7f7 ffe5 	bl	800bbd0 <HAL_GetTick>
 8013c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013c08:	e008      	b.n	8013c1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013c0a:	f7f7 ffe1 	bl	800bbd0 <HAL_GetTick>
 8013c0e:	4602      	mov	r2, r0
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	1ad3      	subs	r3, r2, r3
 8013c14:	2b02      	cmp	r3, #2
 8013c16:	d901      	bls.n	8013c1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013c18:	2303      	movs	r3, #3
 8013c1a:	e006      	b.n	8013c2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013c1c:	4b05      	ldr	r3, [pc, #20]	; (8013c34 <RCCEx_PLL3_Config+0x15c>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d0f0      	beq.n	8013c0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8013c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3710      	adds	r7, #16
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	bf00      	nop
 8013c34:	58024400 	.word	0x58024400
 8013c38:	ffff0007 	.word	0xffff0007

08013c3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d101      	bne.n	8013c50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	e02b      	b.n	8013ca8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d106      	bne.n	8013c6a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f7f3 fab3 	bl	80071d0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2202      	movs	r2, #2
 8013c6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	3304      	adds	r3, #4
 8013c7a:	4619      	mov	r1, r3
 8013c7c:	4610      	mov	r0, r2
 8013c7e:	f001 fae9 	bl	8015254 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6818      	ldr	r0, [r3, #0]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	461a      	mov	r2, r3
 8013c8c:	6839      	ldr	r1, [r7, #0]
 8013c8e:	f001 fb3d 	bl	801530c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8013c92:	4b07      	ldr	r3, [pc, #28]	; (8013cb0 <HAL_SDRAM_Init+0x74>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	4a06      	ldr	r2, [pc, #24]	; (8013cb0 <HAL_SDRAM_Init+0x74>)
 8013c98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013c9c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2201      	movs	r2, #1
 8013ca2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013ca6:	2300      	movs	r3, #0
}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	3708      	adds	r7, #8
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}
 8013cb0:	52004000 	.word	0x52004000

08013cb4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b086      	sub	sp, #24
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	60f8      	str	r0, [r7, #12]
 8013cbc:	60b9      	str	r1, [r7, #8]
 8013cbe:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013cc6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8013cc8:	7dfb      	ldrb	r3, [r7, #23]
 8013cca:	2b02      	cmp	r3, #2
 8013ccc:	d101      	bne.n	8013cd2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8013cce:	2302      	movs	r3, #2
 8013cd0:	e021      	b.n	8013d16 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8013cd2:	7dfb      	ldrb	r3, [r7, #23]
 8013cd4:	2b01      	cmp	r3, #1
 8013cd6:	d002      	beq.n	8013cde <HAL_SDRAM_SendCommand+0x2a>
 8013cd8:	7dfb      	ldrb	r3, [r7, #23]
 8013cda:	2b05      	cmp	r3, #5
 8013cdc:	d118      	bne.n	8013d10 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	2202      	movs	r2, #2
 8013ce2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	687a      	ldr	r2, [r7, #4]
 8013cec:	68b9      	ldr	r1, [r7, #8]
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f001 fb76 	bl	80153e0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	2b02      	cmp	r3, #2
 8013cfa:	d104      	bne.n	8013d06 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	2205      	movs	r2, #5
 8013d00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013d04:	e006      	b.n	8013d14 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013d0e:	e001      	b.n	8013d14 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8013d10:	2301      	movs	r3, #1
 8013d12:	e000      	b.n	8013d16 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8013d14:	2300      	movs	r3, #0
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3718      	adds	r7, #24
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}

08013d1e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8013d1e:	b580      	push	{r7, lr}
 8013d20:	b082      	sub	sp, #8
 8013d22:	af00      	add	r7, sp, #0
 8013d24:	6078      	str	r0, [r7, #4]
 8013d26:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	2b02      	cmp	r3, #2
 8013d32:	d101      	bne.n	8013d38 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8013d34:	2302      	movs	r3, #2
 8013d36:	e016      	b.n	8013d66 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013d3e:	b2db      	uxtb	r3, r3
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d10f      	bne.n	8013d64 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2202      	movs	r2, #2
 8013d48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	6839      	ldr	r1, [r7, #0]
 8013d52:	4618      	mov	r0, r3
 8013d54:	f001 fb68 	bl	8015428 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2201      	movs	r2, #1
 8013d5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8013d60:	2300      	movs	r3, #0
 8013d62:	e000      	b.n	8013d66 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8013d64:	2301      	movs	r3, #1
}
 8013d66:	4618      	mov	r0, r3
 8013d68:	3708      	adds	r7, #8
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}

08013d6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013d6e:	b580      	push	{r7, lr}
 8013d70:	b082      	sub	sp, #8
 8013d72:	af00      	add	r7, sp, #0
 8013d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d101      	bne.n	8013d80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	e049      	b.n	8013e14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d86:	b2db      	uxtb	r3, r3
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d106      	bne.n	8013d9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013d94:	6878      	ldr	r0, [r7, #4]
 8013d96:	f7f3 f901 	bl	8006f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2202      	movs	r2, #2
 8013d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	3304      	adds	r3, #4
 8013daa:	4619      	mov	r1, r3
 8013dac:	4610      	mov	r0, r2
 8013dae:	f000 fd71 	bl	8014894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2201      	movs	r2, #1
 8013db6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2201      	movs	r2, #1
 8013dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2201      	movs	r2, #1
 8013dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2201      	movs	r2, #1
 8013dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2201      	movs	r2, #1
 8013dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2201      	movs	r2, #1
 8013dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2201      	movs	r2, #1
 8013de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2201      	movs	r2, #1
 8013dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2201      	movs	r2, #1
 8013df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2201      	movs	r2, #1
 8013e06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013e12:	2300      	movs	r3, #0
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3708      	adds	r7, #8
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}

08013e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b085      	sub	sp, #20
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e2a:	b2db      	uxtb	r3, r3
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d001      	beq.n	8013e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013e30:	2301      	movs	r3, #1
 8013e32:	e054      	b.n	8013ede <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	2202      	movs	r2, #2
 8013e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	68da      	ldr	r2, [r3, #12]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	f042 0201 	orr.w	r2, r2, #1
 8013e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	4a26      	ldr	r2, [pc, #152]	; (8013eec <HAL_TIM_Base_Start_IT+0xd0>)
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d022      	beq.n	8013e9c <HAL_TIM_Base_Start_IT+0x80>
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013e5e:	d01d      	beq.n	8013e9c <HAL_TIM_Base_Start_IT+0x80>
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	4a22      	ldr	r2, [pc, #136]	; (8013ef0 <HAL_TIM_Base_Start_IT+0xd4>)
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d018      	beq.n	8013e9c <HAL_TIM_Base_Start_IT+0x80>
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	4a21      	ldr	r2, [pc, #132]	; (8013ef4 <HAL_TIM_Base_Start_IT+0xd8>)
 8013e70:	4293      	cmp	r3, r2
 8013e72:	d013      	beq.n	8013e9c <HAL_TIM_Base_Start_IT+0x80>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	4a1f      	ldr	r2, [pc, #124]	; (8013ef8 <HAL_TIM_Base_Start_IT+0xdc>)
 8013e7a:	4293      	cmp	r3, r2
 8013e7c:	d00e      	beq.n	8013e9c <HAL_TIM_Base_Start_IT+0x80>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	4a1e      	ldr	r2, [pc, #120]	; (8013efc <HAL_TIM_Base_Start_IT+0xe0>)
 8013e84:	4293      	cmp	r3, r2
 8013e86:	d009      	beq.n	8013e9c <HAL_TIM_Base_Start_IT+0x80>
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	4a1c      	ldr	r2, [pc, #112]	; (8013f00 <HAL_TIM_Base_Start_IT+0xe4>)
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	d004      	beq.n	8013e9c <HAL_TIM_Base_Start_IT+0x80>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	4a1b      	ldr	r2, [pc, #108]	; (8013f04 <HAL_TIM_Base_Start_IT+0xe8>)
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	d115      	bne.n	8013ec8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	689a      	ldr	r2, [r3, #8]
 8013ea2:	4b19      	ldr	r3, [pc, #100]	; (8013f08 <HAL_TIM_Base_Start_IT+0xec>)
 8013ea4:	4013      	ands	r3, r2
 8013ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	2b06      	cmp	r3, #6
 8013eac:	d015      	beq.n	8013eda <HAL_TIM_Base_Start_IT+0xbe>
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013eb4:	d011      	beq.n	8013eda <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f042 0201 	orr.w	r2, r2, #1
 8013ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013ec6:	e008      	b.n	8013eda <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	681a      	ldr	r2, [r3, #0]
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	f042 0201 	orr.w	r2, r2, #1
 8013ed6:	601a      	str	r2, [r3, #0]
 8013ed8:	e000      	b.n	8013edc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013eda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013edc:	2300      	movs	r3, #0
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3714      	adds	r7, #20
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee8:	4770      	bx	lr
 8013eea:	bf00      	nop
 8013eec:	40010000 	.word	0x40010000
 8013ef0:	40000400 	.word	0x40000400
 8013ef4:	40000800 	.word	0x40000800
 8013ef8:	40000c00 	.word	0x40000c00
 8013efc:	40010400 	.word	0x40010400
 8013f00:	40001800 	.word	0x40001800
 8013f04:	40014000 	.word	0x40014000
 8013f08:	00010007 	.word	0x00010007

08013f0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d101      	bne.n	8013f1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	e049      	b.n	8013fb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d106      	bne.n	8013f38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f000 f841 	bl	8013fba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2202      	movs	r2, #2
 8013f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	3304      	adds	r3, #4
 8013f48:	4619      	mov	r1, r3
 8013f4a:	4610      	mov	r0, r2
 8013f4c:	f000 fca2 	bl	8014894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2201      	movs	r2, #1
 8013f54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2201      	movs	r2, #1
 8013f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	2201      	movs	r2, #1
 8013f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2201      	movs	r2, #1
 8013f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2201      	movs	r2, #1
 8013f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2201      	movs	r2, #1
 8013f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2201      	movs	r2, #1
 8013f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2201      	movs	r2, #1
 8013f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2201      	movs	r2, #1
 8013f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2201      	movs	r2, #1
 8013fa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2201      	movs	r2, #1
 8013fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013fb0:	2300      	movs	r3, #0
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3708      	adds	r7, #8
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}

08013fba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8013fba:	b480      	push	{r7}
 8013fbc:	b083      	sub	sp, #12
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8013fc2:	bf00      	nop
 8013fc4:	370c      	adds	r7, #12
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fcc:	4770      	bx	lr
	...

08013fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d109      	bne.n	8013ff4 <HAL_TIM_PWM_Start+0x24>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013fe6:	b2db      	uxtb	r3, r3
 8013fe8:	2b01      	cmp	r3, #1
 8013fea:	bf14      	ite	ne
 8013fec:	2301      	movne	r3, #1
 8013fee:	2300      	moveq	r3, #0
 8013ff0:	b2db      	uxtb	r3, r3
 8013ff2:	e03c      	b.n	801406e <HAL_TIM_PWM_Start+0x9e>
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	2b04      	cmp	r3, #4
 8013ff8:	d109      	bne.n	801400e <HAL_TIM_PWM_Start+0x3e>
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014000:	b2db      	uxtb	r3, r3
 8014002:	2b01      	cmp	r3, #1
 8014004:	bf14      	ite	ne
 8014006:	2301      	movne	r3, #1
 8014008:	2300      	moveq	r3, #0
 801400a:	b2db      	uxtb	r3, r3
 801400c:	e02f      	b.n	801406e <HAL_TIM_PWM_Start+0x9e>
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	2b08      	cmp	r3, #8
 8014012:	d109      	bne.n	8014028 <HAL_TIM_PWM_Start+0x58>
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801401a:	b2db      	uxtb	r3, r3
 801401c:	2b01      	cmp	r3, #1
 801401e:	bf14      	ite	ne
 8014020:	2301      	movne	r3, #1
 8014022:	2300      	moveq	r3, #0
 8014024:	b2db      	uxtb	r3, r3
 8014026:	e022      	b.n	801406e <HAL_TIM_PWM_Start+0x9e>
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	2b0c      	cmp	r3, #12
 801402c:	d109      	bne.n	8014042 <HAL_TIM_PWM_Start+0x72>
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014034:	b2db      	uxtb	r3, r3
 8014036:	2b01      	cmp	r3, #1
 8014038:	bf14      	ite	ne
 801403a:	2301      	movne	r3, #1
 801403c:	2300      	moveq	r3, #0
 801403e:	b2db      	uxtb	r3, r3
 8014040:	e015      	b.n	801406e <HAL_TIM_PWM_Start+0x9e>
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	2b10      	cmp	r3, #16
 8014046:	d109      	bne.n	801405c <HAL_TIM_PWM_Start+0x8c>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801404e:	b2db      	uxtb	r3, r3
 8014050:	2b01      	cmp	r3, #1
 8014052:	bf14      	ite	ne
 8014054:	2301      	movne	r3, #1
 8014056:	2300      	moveq	r3, #0
 8014058:	b2db      	uxtb	r3, r3
 801405a:	e008      	b.n	801406e <HAL_TIM_PWM_Start+0x9e>
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014062:	b2db      	uxtb	r3, r3
 8014064:	2b01      	cmp	r3, #1
 8014066:	bf14      	ite	ne
 8014068:	2301      	movne	r3, #1
 801406a:	2300      	moveq	r3, #0
 801406c:	b2db      	uxtb	r3, r3
 801406e:	2b00      	cmp	r3, #0
 8014070:	d001      	beq.n	8014076 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8014072:	2301      	movs	r3, #1
 8014074:	e0a1      	b.n	80141ba <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d104      	bne.n	8014086 <HAL_TIM_PWM_Start+0xb6>
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2202      	movs	r2, #2
 8014080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014084:	e023      	b.n	80140ce <HAL_TIM_PWM_Start+0xfe>
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	2b04      	cmp	r3, #4
 801408a:	d104      	bne.n	8014096 <HAL_TIM_PWM_Start+0xc6>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2202      	movs	r2, #2
 8014090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014094:	e01b      	b.n	80140ce <HAL_TIM_PWM_Start+0xfe>
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	2b08      	cmp	r3, #8
 801409a:	d104      	bne.n	80140a6 <HAL_TIM_PWM_Start+0xd6>
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2202      	movs	r2, #2
 80140a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80140a4:	e013      	b.n	80140ce <HAL_TIM_PWM_Start+0xfe>
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	2b0c      	cmp	r3, #12
 80140aa:	d104      	bne.n	80140b6 <HAL_TIM_PWM_Start+0xe6>
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2202      	movs	r2, #2
 80140b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80140b4:	e00b      	b.n	80140ce <HAL_TIM_PWM_Start+0xfe>
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	2b10      	cmp	r3, #16
 80140ba:	d104      	bne.n	80140c6 <HAL_TIM_PWM_Start+0xf6>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2202      	movs	r2, #2
 80140c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80140c4:	e003      	b.n	80140ce <HAL_TIM_PWM_Start+0xfe>
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2202      	movs	r2, #2
 80140ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	2201      	movs	r2, #1
 80140d4:	6839      	ldr	r1, [r7, #0]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f000 ffea 	bl	80150b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	4a38      	ldr	r2, [pc, #224]	; (80141c4 <HAL_TIM_PWM_Start+0x1f4>)
 80140e2:	4293      	cmp	r3, r2
 80140e4:	d013      	beq.n	801410e <HAL_TIM_PWM_Start+0x13e>
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	4a37      	ldr	r2, [pc, #220]	; (80141c8 <HAL_TIM_PWM_Start+0x1f8>)
 80140ec:	4293      	cmp	r3, r2
 80140ee:	d00e      	beq.n	801410e <HAL_TIM_PWM_Start+0x13e>
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	4a35      	ldr	r2, [pc, #212]	; (80141cc <HAL_TIM_PWM_Start+0x1fc>)
 80140f6:	4293      	cmp	r3, r2
 80140f8:	d009      	beq.n	801410e <HAL_TIM_PWM_Start+0x13e>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	4a34      	ldr	r2, [pc, #208]	; (80141d0 <HAL_TIM_PWM_Start+0x200>)
 8014100:	4293      	cmp	r3, r2
 8014102:	d004      	beq.n	801410e <HAL_TIM_PWM_Start+0x13e>
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	4a32      	ldr	r2, [pc, #200]	; (80141d4 <HAL_TIM_PWM_Start+0x204>)
 801410a:	4293      	cmp	r3, r2
 801410c:	d101      	bne.n	8014112 <HAL_TIM_PWM_Start+0x142>
 801410e:	2301      	movs	r3, #1
 8014110:	e000      	b.n	8014114 <HAL_TIM_PWM_Start+0x144>
 8014112:	2300      	movs	r3, #0
 8014114:	2b00      	cmp	r3, #0
 8014116:	d007      	beq.n	8014128 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014126:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	4a25      	ldr	r2, [pc, #148]	; (80141c4 <HAL_TIM_PWM_Start+0x1f4>)
 801412e:	4293      	cmp	r3, r2
 8014130:	d022      	beq.n	8014178 <HAL_TIM_PWM_Start+0x1a8>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801413a:	d01d      	beq.n	8014178 <HAL_TIM_PWM_Start+0x1a8>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	4a25      	ldr	r2, [pc, #148]	; (80141d8 <HAL_TIM_PWM_Start+0x208>)
 8014142:	4293      	cmp	r3, r2
 8014144:	d018      	beq.n	8014178 <HAL_TIM_PWM_Start+0x1a8>
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	4a24      	ldr	r2, [pc, #144]	; (80141dc <HAL_TIM_PWM_Start+0x20c>)
 801414c:	4293      	cmp	r3, r2
 801414e:	d013      	beq.n	8014178 <HAL_TIM_PWM_Start+0x1a8>
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	4a22      	ldr	r2, [pc, #136]	; (80141e0 <HAL_TIM_PWM_Start+0x210>)
 8014156:	4293      	cmp	r3, r2
 8014158:	d00e      	beq.n	8014178 <HAL_TIM_PWM_Start+0x1a8>
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	4a1a      	ldr	r2, [pc, #104]	; (80141c8 <HAL_TIM_PWM_Start+0x1f8>)
 8014160:	4293      	cmp	r3, r2
 8014162:	d009      	beq.n	8014178 <HAL_TIM_PWM_Start+0x1a8>
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	4a1e      	ldr	r2, [pc, #120]	; (80141e4 <HAL_TIM_PWM_Start+0x214>)
 801416a:	4293      	cmp	r3, r2
 801416c:	d004      	beq.n	8014178 <HAL_TIM_PWM_Start+0x1a8>
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	4a16      	ldr	r2, [pc, #88]	; (80141cc <HAL_TIM_PWM_Start+0x1fc>)
 8014174:	4293      	cmp	r3, r2
 8014176:	d115      	bne.n	80141a4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	689a      	ldr	r2, [r3, #8]
 801417e:	4b1a      	ldr	r3, [pc, #104]	; (80141e8 <HAL_TIM_PWM_Start+0x218>)
 8014180:	4013      	ands	r3, r2
 8014182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2b06      	cmp	r3, #6
 8014188:	d015      	beq.n	80141b6 <HAL_TIM_PWM_Start+0x1e6>
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014190:	d011      	beq.n	80141b6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	681a      	ldr	r2, [r3, #0]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	f042 0201 	orr.w	r2, r2, #1
 80141a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80141a2:	e008      	b.n	80141b6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	f042 0201 	orr.w	r2, r2, #1
 80141b2:	601a      	str	r2, [r3, #0]
 80141b4:	e000      	b.n	80141b8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80141b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80141b8:	2300      	movs	r3, #0
}
 80141ba:	4618      	mov	r0, r3
 80141bc:	3710      	adds	r7, #16
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	40010000 	.word	0x40010000
 80141c8:	40010400 	.word	0x40010400
 80141cc:	40014000 	.word	0x40014000
 80141d0:	40014400 	.word	0x40014400
 80141d4:	40014800 	.word	0x40014800
 80141d8:	40000400 	.word	0x40000400
 80141dc:	40000800 	.word	0x40000800
 80141e0:	40000c00 	.word	0x40000c00
 80141e4:	40001800 	.word	0x40001800
 80141e8:	00010007 	.word	0x00010007

080141ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	691b      	ldr	r3, [r3, #16]
 80141fa:	f003 0302 	and.w	r3, r3, #2
 80141fe:	2b02      	cmp	r3, #2
 8014200:	d122      	bne.n	8014248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	f003 0302 	and.w	r3, r3, #2
 801420c:	2b02      	cmp	r3, #2
 801420e:	d11b      	bne.n	8014248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	f06f 0202 	mvn.w	r2, #2
 8014218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	2201      	movs	r2, #1
 801421e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	699b      	ldr	r3, [r3, #24]
 8014226:	f003 0303 	and.w	r3, r3, #3
 801422a:	2b00      	cmp	r3, #0
 801422c:	d003      	beq.n	8014236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f000 fb12 	bl	8014858 <HAL_TIM_IC_CaptureCallback>
 8014234:	e005      	b.n	8014242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f000 fb04 	bl	8014844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f000 fb15 	bl	801486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2200      	movs	r2, #0
 8014246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	691b      	ldr	r3, [r3, #16]
 801424e:	f003 0304 	and.w	r3, r3, #4
 8014252:	2b04      	cmp	r3, #4
 8014254:	d122      	bne.n	801429c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	f003 0304 	and.w	r3, r3, #4
 8014260:	2b04      	cmp	r3, #4
 8014262:	d11b      	bne.n	801429c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	f06f 0204 	mvn.w	r2, #4
 801426c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2202      	movs	r2, #2
 8014272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	699b      	ldr	r3, [r3, #24]
 801427a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801427e:	2b00      	cmp	r3, #0
 8014280:	d003      	beq.n	801428a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 fae8 	bl	8014858 <HAL_TIM_IC_CaptureCallback>
 8014288:	e005      	b.n	8014296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f000 fada 	bl	8014844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f000 faeb 	bl	801486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2200      	movs	r2, #0
 801429a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	691b      	ldr	r3, [r3, #16]
 80142a2:	f003 0308 	and.w	r3, r3, #8
 80142a6:	2b08      	cmp	r3, #8
 80142a8:	d122      	bne.n	80142f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	f003 0308 	and.w	r3, r3, #8
 80142b4:	2b08      	cmp	r3, #8
 80142b6:	d11b      	bne.n	80142f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	f06f 0208 	mvn.w	r2, #8
 80142c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2204      	movs	r2, #4
 80142c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	69db      	ldr	r3, [r3, #28]
 80142ce:	f003 0303 	and.w	r3, r3, #3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d003      	beq.n	80142de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f000 fabe 	bl	8014858 <HAL_TIM_IC_CaptureCallback>
 80142dc:	e005      	b.n	80142ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f000 fab0 	bl	8014844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f000 fac1 	bl	801486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2200      	movs	r2, #0
 80142ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	691b      	ldr	r3, [r3, #16]
 80142f6:	f003 0310 	and.w	r3, r3, #16
 80142fa:	2b10      	cmp	r3, #16
 80142fc:	d122      	bne.n	8014344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	f003 0310 	and.w	r3, r3, #16
 8014308:	2b10      	cmp	r3, #16
 801430a:	d11b      	bne.n	8014344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	f06f 0210 	mvn.w	r2, #16
 8014314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2208      	movs	r2, #8
 801431a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	69db      	ldr	r3, [r3, #28]
 8014322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014326:	2b00      	cmp	r3, #0
 8014328:	d003      	beq.n	8014332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f000 fa94 	bl	8014858 <HAL_TIM_IC_CaptureCallback>
 8014330:	e005      	b.n	801433e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f000 fa86 	bl	8014844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f000 fa97 	bl	801486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2200      	movs	r2, #0
 8014342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	691b      	ldr	r3, [r3, #16]
 801434a:	f003 0301 	and.w	r3, r3, #1
 801434e:	2b01      	cmp	r3, #1
 8014350:	d10e      	bne.n	8014370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	68db      	ldr	r3, [r3, #12]
 8014358:	f003 0301 	and.w	r3, r3, #1
 801435c:	2b01      	cmp	r3, #1
 801435e:	d107      	bne.n	8014370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	f06f 0201 	mvn.w	r2, #1
 8014368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f7f2 faee 	bl	800694c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	691b      	ldr	r3, [r3, #16]
 8014376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801437a:	2b80      	cmp	r3, #128	; 0x80
 801437c:	d10e      	bne.n	801439c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	68db      	ldr	r3, [r3, #12]
 8014384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014388:	2b80      	cmp	r3, #128	; 0x80
 801438a:	d107      	bne.n	801439c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f000 ff48 	bl	801522c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	691b      	ldr	r3, [r3, #16]
 80143a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143aa:	d10e      	bne.n	80143ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	68db      	ldr	r3, [r3, #12]
 80143b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80143b6:	2b80      	cmp	r3, #128	; 0x80
 80143b8:	d107      	bne.n	80143ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80143c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f000 ff3b 	bl	8015240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	691b      	ldr	r3, [r3, #16]
 80143d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143d4:	2b40      	cmp	r3, #64	; 0x40
 80143d6:	d10e      	bne.n	80143f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143e2:	2b40      	cmp	r3, #64	; 0x40
 80143e4:	d107      	bne.n	80143f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80143ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f000 fa45 	bl	8014880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	691b      	ldr	r3, [r3, #16]
 80143fc:	f003 0320 	and.w	r3, r3, #32
 8014400:	2b20      	cmp	r3, #32
 8014402:	d10e      	bne.n	8014422 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	68db      	ldr	r3, [r3, #12]
 801440a:	f003 0320 	and.w	r3, r3, #32
 801440e:	2b20      	cmp	r3, #32
 8014410:	d107      	bne.n	8014422 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	f06f 0220 	mvn.w	r2, #32
 801441a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f000 fefb 	bl	8015218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014422:	bf00      	nop
 8014424:	3708      	adds	r7, #8
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}
	...

0801442c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b086      	sub	sp, #24
 8014430:	af00      	add	r7, sp, #0
 8014432:	60f8      	str	r0, [r7, #12]
 8014434:	60b9      	str	r1, [r7, #8]
 8014436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014438:	2300      	movs	r3, #0
 801443a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014442:	2b01      	cmp	r3, #1
 8014444:	d101      	bne.n	801444a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014446:	2302      	movs	r3, #2
 8014448:	e0ff      	b.n	801464a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	2201      	movs	r2, #1
 801444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2b14      	cmp	r3, #20
 8014456:	f200 80f0 	bhi.w	801463a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801445a:	a201      	add	r2, pc, #4	; (adr r2, 8014460 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014460:	080144b5 	.word	0x080144b5
 8014464:	0801463b 	.word	0x0801463b
 8014468:	0801463b 	.word	0x0801463b
 801446c:	0801463b 	.word	0x0801463b
 8014470:	080144f5 	.word	0x080144f5
 8014474:	0801463b 	.word	0x0801463b
 8014478:	0801463b 	.word	0x0801463b
 801447c:	0801463b 	.word	0x0801463b
 8014480:	08014537 	.word	0x08014537
 8014484:	0801463b 	.word	0x0801463b
 8014488:	0801463b 	.word	0x0801463b
 801448c:	0801463b 	.word	0x0801463b
 8014490:	08014577 	.word	0x08014577
 8014494:	0801463b 	.word	0x0801463b
 8014498:	0801463b 	.word	0x0801463b
 801449c:	0801463b 	.word	0x0801463b
 80144a0:	080145b9 	.word	0x080145b9
 80144a4:	0801463b 	.word	0x0801463b
 80144a8:	0801463b 	.word	0x0801463b
 80144ac:	0801463b 	.word	0x0801463b
 80144b0:	080145f9 	.word	0x080145f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	68b9      	ldr	r1, [r7, #8]
 80144ba:	4618      	mov	r0, r3
 80144bc:	f000 fa84 	bl	80149c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	699a      	ldr	r2, [r3, #24]
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	f042 0208 	orr.w	r2, r2, #8
 80144ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	699a      	ldr	r2, [r3, #24]
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	f022 0204 	bic.w	r2, r2, #4
 80144de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	6999      	ldr	r1, [r3, #24]
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	691a      	ldr	r2, [r3, #16]
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	430a      	orrs	r2, r1
 80144f0:	619a      	str	r2, [r3, #24]
      break;
 80144f2:	e0a5      	b.n	8014640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	68b9      	ldr	r1, [r7, #8]
 80144fa:	4618      	mov	r0, r3
 80144fc:	f000 faf4 	bl	8014ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	699a      	ldr	r2, [r3, #24]
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801450e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	699a      	ldr	r2, [r3, #24]
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801451e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	6999      	ldr	r1, [r3, #24]
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	691b      	ldr	r3, [r3, #16]
 801452a:	021a      	lsls	r2, r3, #8
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	430a      	orrs	r2, r1
 8014532:	619a      	str	r2, [r3, #24]
      break;
 8014534:	e084      	b.n	8014640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	68b9      	ldr	r1, [r7, #8]
 801453c:	4618      	mov	r0, r3
 801453e:	f000 fb5d 	bl	8014bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	69da      	ldr	r2, [r3, #28]
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	f042 0208 	orr.w	r2, r2, #8
 8014550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	69da      	ldr	r2, [r3, #28]
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	f022 0204 	bic.w	r2, r2, #4
 8014560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	69d9      	ldr	r1, [r3, #28]
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	691a      	ldr	r2, [r3, #16]
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	430a      	orrs	r2, r1
 8014572:	61da      	str	r2, [r3, #28]
      break;
 8014574:	e064      	b.n	8014640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	68b9      	ldr	r1, [r7, #8]
 801457c:	4618      	mov	r0, r3
 801457e:	f000 fbc5 	bl	8014d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	69da      	ldr	r2, [r3, #28]
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	69da      	ldr	r2, [r3, #28]
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80145a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	69d9      	ldr	r1, [r3, #28]
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	691b      	ldr	r3, [r3, #16]
 80145ac:	021a      	lsls	r2, r3, #8
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	430a      	orrs	r2, r1
 80145b4:	61da      	str	r2, [r3, #28]
      break;
 80145b6:	e043      	b.n	8014640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	68b9      	ldr	r1, [r7, #8]
 80145be:	4618      	mov	r0, r3
 80145c0:	f000 fc0e 	bl	8014de0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f042 0208 	orr.w	r2, r2, #8
 80145d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	f022 0204 	bic.w	r2, r2, #4
 80145e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80145ea:	68bb      	ldr	r3, [r7, #8]
 80145ec:	691a      	ldr	r2, [r3, #16]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	430a      	orrs	r2, r1
 80145f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80145f6:	e023      	b.n	8014640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	68b9      	ldr	r1, [r7, #8]
 80145fe:	4618      	mov	r0, r3
 8014600:	f000 fc52 	bl	8014ea8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014622:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	691b      	ldr	r3, [r3, #16]
 801462e:	021a      	lsls	r2, r3, #8
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	430a      	orrs	r2, r1
 8014636:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014638:	e002      	b.n	8014640 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801463a:	2301      	movs	r3, #1
 801463c:	75fb      	strb	r3, [r7, #23]
      break;
 801463e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2200      	movs	r2, #0
 8014644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014648:	7dfb      	ldrb	r3, [r7, #23]
}
 801464a:	4618      	mov	r0, r3
 801464c:	3718      	adds	r7, #24
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}
 8014652:	bf00      	nop

08014654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801465e:	2300      	movs	r3, #0
 8014660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014668:	2b01      	cmp	r3, #1
 801466a:	d101      	bne.n	8014670 <HAL_TIM_ConfigClockSource+0x1c>
 801466c:	2302      	movs	r3, #2
 801466e:	e0dc      	b.n	801482a <HAL_TIM_ConfigClockSource+0x1d6>
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2201      	movs	r2, #1
 8014674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	2202      	movs	r2, #2
 801467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	689b      	ldr	r3, [r3, #8]
 8014686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014688:	68ba      	ldr	r2, [r7, #8]
 801468a:	4b6a      	ldr	r3, [pc, #424]	; (8014834 <HAL_TIM_ConfigClockSource+0x1e0>)
 801468c:	4013      	ands	r3, r2
 801468e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	68ba      	ldr	r2, [r7, #8]
 801469e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	4a64      	ldr	r2, [pc, #400]	; (8014838 <HAL_TIM_ConfigClockSource+0x1e4>)
 80146a6:	4293      	cmp	r3, r2
 80146a8:	f000 80a9 	beq.w	80147fe <HAL_TIM_ConfigClockSource+0x1aa>
 80146ac:	4a62      	ldr	r2, [pc, #392]	; (8014838 <HAL_TIM_ConfigClockSource+0x1e4>)
 80146ae:	4293      	cmp	r3, r2
 80146b0:	f200 80ae 	bhi.w	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 80146b4:	4a61      	ldr	r2, [pc, #388]	; (801483c <HAL_TIM_ConfigClockSource+0x1e8>)
 80146b6:	4293      	cmp	r3, r2
 80146b8:	f000 80a1 	beq.w	80147fe <HAL_TIM_ConfigClockSource+0x1aa>
 80146bc:	4a5f      	ldr	r2, [pc, #380]	; (801483c <HAL_TIM_ConfigClockSource+0x1e8>)
 80146be:	4293      	cmp	r3, r2
 80146c0:	f200 80a6 	bhi.w	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 80146c4:	4a5e      	ldr	r2, [pc, #376]	; (8014840 <HAL_TIM_ConfigClockSource+0x1ec>)
 80146c6:	4293      	cmp	r3, r2
 80146c8:	f000 8099 	beq.w	80147fe <HAL_TIM_ConfigClockSource+0x1aa>
 80146cc:	4a5c      	ldr	r2, [pc, #368]	; (8014840 <HAL_TIM_ConfigClockSource+0x1ec>)
 80146ce:	4293      	cmp	r3, r2
 80146d0:	f200 809e 	bhi.w	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 80146d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80146d8:	f000 8091 	beq.w	80147fe <HAL_TIM_ConfigClockSource+0x1aa>
 80146dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80146e0:	f200 8096 	bhi.w	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 80146e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80146e8:	f000 8089 	beq.w	80147fe <HAL_TIM_ConfigClockSource+0x1aa>
 80146ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80146f0:	f200 808e 	bhi.w	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 80146f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80146f8:	d03e      	beq.n	8014778 <HAL_TIM_ConfigClockSource+0x124>
 80146fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80146fe:	f200 8087 	bhi.w	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 8014702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014706:	f000 8086 	beq.w	8014816 <HAL_TIM_ConfigClockSource+0x1c2>
 801470a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801470e:	d87f      	bhi.n	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 8014710:	2b70      	cmp	r3, #112	; 0x70
 8014712:	d01a      	beq.n	801474a <HAL_TIM_ConfigClockSource+0xf6>
 8014714:	2b70      	cmp	r3, #112	; 0x70
 8014716:	d87b      	bhi.n	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 8014718:	2b60      	cmp	r3, #96	; 0x60
 801471a:	d050      	beq.n	80147be <HAL_TIM_ConfigClockSource+0x16a>
 801471c:	2b60      	cmp	r3, #96	; 0x60
 801471e:	d877      	bhi.n	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 8014720:	2b50      	cmp	r3, #80	; 0x50
 8014722:	d03c      	beq.n	801479e <HAL_TIM_ConfigClockSource+0x14a>
 8014724:	2b50      	cmp	r3, #80	; 0x50
 8014726:	d873      	bhi.n	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 8014728:	2b40      	cmp	r3, #64	; 0x40
 801472a:	d058      	beq.n	80147de <HAL_TIM_ConfigClockSource+0x18a>
 801472c:	2b40      	cmp	r3, #64	; 0x40
 801472e:	d86f      	bhi.n	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 8014730:	2b30      	cmp	r3, #48	; 0x30
 8014732:	d064      	beq.n	80147fe <HAL_TIM_ConfigClockSource+0x1aa>
 8014734:	2b30      	cmp	r3, #48	; 0x30
 8014736:	d86b      	bhi.n	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 8014738:	2b20      	cmp	r3, #32
 801473a:	d060      	beq.n	80147fe <HAL_TIM_ConfigClockSource+0x1aa>
 801473c:	2b20      	cmp	r3, #32
 801473e:	d867      	bhi.n	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
 8014740:	2b00      	cmp	r3, #0
 8014742:	d05c      	beq.n	80147fe <HAL_TIM_ConfigClockSource+0x1aa>
 8014744:	2b10      	cmp	r3, #16
 8014746:	d05a      	beq.n	80147fe <HAL_TIM_ConfigClockSource+0x1aa>
 8014748:	e062      	b.n	8014810 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6818      	ldr	r0, [r3, #0]
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	6899      	ldr	r1, [r3, #8]
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	685a      	ldr	r2, [r3, #4]
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	68db      	ldr	r3, [r3, #12]
 801475a:	f000 fc89 	bl	8015070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	689b      	ldr	r3, [r3, #8]
 8014764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801476c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	68ba      	ldr	r2, [r7, #8]
 8014774:	609a      	str	r2, [r3, #8]
      break;
 8014776:	e04f      	b.n	8014818 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6818      	ldr	r0, [r3, #0]
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	6899      	ldr	r1, [r3, #8]
 8014780:	683b      	ldr	r3, [r7, #0]
 8014782:	685a      	ldr	r2, [r3, #4]
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	68db      	ldr	r3, [r3, #12]
 8014788:	f000 fc72 	bl	8015070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	689a      	ldr	r2, [r3, #8]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801479a:	609a      	str	r2, [r3, #8]
      break;
 801479c:	e03c      	b.n	8014818 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6818      	ldr	r0, [r3, #0]
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	6859      	ldr	r1, [r3, #4]
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	68db      	ldr	r3, [r3, #12]
 80147aa:	461a      	mov	r2, r3
 80147ac:	f000 fbe2 	bl	8014f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	2150      	movs	r1, #80	; 0x50
 80147b6:	4618      	mov	r0, r3
 80147b8:	f000 fc3c 	bl	8015034 <TIM_ITRx_SetConfig>
      break;
 80147bc:	e02c      	b.n	8014818 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	6818      	ldr	r0, [r3, #0]
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	6859      	ldr	r1, [r3, #4]
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	461a      	mov	r2, r3
 80147cc:	f000 fc01 	bl	8014fd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	2160      	movs	r1, #96	; 0x60
 80147d6:	4618      	mov	r0, r3
 80147d8:	f000 fc2c 	bl	8015034 <TIM_ITRx_SetConfig>
      break;
 80147dc:	e01c      	b.n	8014818 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6818      	ldr	r0, [r3, #0]
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	6859      	ldr	r1, [r3, #4]
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	68db      	ldr	r3, [r3, #12]
 80147ea:	461a      	mov	r2, r3
 80147ec:	f000 fbc2 	bl	8014f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	2140      	movs	r1, #64	; 0x40
 80147f6:	4618      	mov	r0, r3
 80147f8:	f000 fc1c 	bl	8015034 <TIM_ITRx_SetConfig>
      break;
 80147fc:	e00c      	b.n	8014818 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681a      	ldr	r2, [r3, #0]
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	4619      	mov	r1, r3
 8014808:	4610      	mov	r0, r2
 801480a:	f000 fc13 	bl	8015034 <TIM_ITRx_SetConfig>
      break;
 801480e:	e003      	b.n	8014818 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8014810:	2301      	movs	r3, #1
 8014812:	73fb      	strb	r3, [r7, #15]
      break;
 8014814:	e000      	b.n	8014818 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8014816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2201      	movs	r2, #1
 801481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2200      	movs	r2, #0
 8014824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014828:	7bfb      	ldrb	r3, [r7, #15]
}
 801482a:	4618      	mov	r0, r3
 801482c:	3710      	adds	r7, #16
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}
 8014832:	bf00      	nop
 8014834:	ffceff88 	.word	0xffceff88
 8014838:	00100040 	.word	0x00100040
 801483c:	00100030 	.word	0x00100030
 8014840:	00100020 	.word	0x00100020

08014844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014844:	b480      	push	{r7}
 8014846:	b083      	sub	sp, #12
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801484c:	bf00      	nop
 801484e:	370c      	adds	r7, #12
 8014850:	46bd      	mov	sp, r7
 8014852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014856:	4770      	bx	lr

08014858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014858:	b480      	push	{r7}
 801485a:	b083      	sub	sp, #12
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014860:	bf00      	nop
 8014862:	370c      	adds	r7, #12
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr

0801486c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801486c:	b480      	push	{r7}
 801486e:	b083      	sub	sp, #12
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014874:	bf00      	nop
 8014876:	370c      	adds	r7, #12
 8014878:	46bd      	mov	sp, r7
 801487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487e:	4770      	bx	lr

08014880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014880:	b480      	push	{r7}
 8014882:	b083      	sub	sp, #12
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014888:	bf00      	nop
 801488a:	370c      	adds	r7, #12
 801488c:	46bd      	mov	sp, r7
 801488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014892:	4770      	bx	lr

08014894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014894:	b480      	push	{r7}
 8014896:	b085      	sub	sp, #20
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	4a40      	ldr	r2, [pc, #256]	; (80149a8 <TIM_Base_SetConfig+0x114>)
 80148a8:	4293      	cmp	r3, r2
 80148aa:	d013      	beq.n	80148d4 <TIM_Base_SetConfig+0x40>
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80148b2:	d00f      	beq.n	80148d4 <TIM_Base_SetConfig+0x40>
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	4a3d      	ldr	r2, [pc, #244]	; (80149ac <TIM_Base_SetConfig+0x118>)
 80148b8:	4293      	cmp	r3, r2
 80148ba:	d00b      	beq.n	80148d4 <TIM_Base_SetConfig+0x40>
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	4a3c      	ldr	r2, [pc, #240]	; (80149b0 <TIM_Base_SetConfig+0x11c>)
 80148c0:	4293      	cmp	r3, r2
 80148c2:	d007      	beq.n	80148d4 <TIM_Base_SetConfig+0x40>
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	4a3b      	ldr	r2, [pc, #236]	; (80149b4 <TIM_Base_SetConfig+0x120>)
 80148c8:	4293      	cmp	r3, r2
 80148ca:	d003      	beq.n	80148d4 <TIM_Base_SetConfig+0x40>
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	4a3a      	ldr	r2, [pc, #232]	; (80149b8 <TIM_Base_SetConfig+0x124>)
 80148d0:	4293      	cmp	r3, r2
 80148d2:	d108      	bne.n	80148e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80148da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	68fa      	ldr	r2, [r7, #12]
 80148e2:	4313      	orrs	r3, r2
 80148e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	4a2f      	ldr	r2, [pc, #188]	; (80149a8 <TIM_Base_SetConfig+0x114>)
 80148ea:	4293      	cmp	r3, r2
 80148ec:	d01f      	beq.n	801492e <TIM_Base_SetConfig+0x9a>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80148f4:	d01b      	beq.n	801492e <TIM_Base_SetConfig+0x9a>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	4a2c      	ldr	r2, [pc, #176]	; (80149ac <TIM_Base_SetConfig+0x118>)
 80148fa:	4293      	cmp	r3, r2
 80148fc:	d017      	beq.n	801492e <TIM_Base_SetConfig+0x9a>
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	4a2b      	ldr	r2, [pc, #172]	; (80149b0 <TIM_Base_SetConfig+0x11c>)
 8014902:	4293      	cmp	r3, r2
 8014904:	d013      	beq.n	801492e <TIM_Base_SetConfig+0x9a>
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	4a2a      	ldr	r2, [pc, #168]	; (80149b4 <TIM_Base_SetConfig+0x120>)
 801490a:	4293      	cmp	r3, r2
 801490c:	d00f      	beq.n	801492e <TIM_Base_SetConfig+0x9a>
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	4a29      	ldr	r2, [pc, #164]	; (80149b8 <TIM_Base_SetConfig+0x124>)
 8014912:	4293      	cmp	r3, r2
 8014914:	d00b      	beq.n	801492e <TIM_Base_SetConfig+0x9a>
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	4a28      	ldr	r2, [pc, #160]	; (80149bc <TIM_Base_SetConfig+0x128>)
 801491a:	4293      	cmp	r3, r2
 801491c:	d007      	beq.n	801492e <TIM_Base_SetConfig+0x9a>
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	4a27      	ldr	r2, [pc, #156]	; (80149c0 <TIM_Base_SetConfig+0x12c>)
 8014922:	4293      	cmp	r3, r2
 8014924:	d003      	beq.n	801492e <TIM_Base_SetConfig+0x9a>
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	4a26      	ldr	r2, [pc, #152]	; (80149c4 <TIM_Base_SetConfig+0x130>)
 801492a:	4293      	cmp	r3, r2
 801492c:	d108      	bne.n	8014940 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	68db      	ldr	r3, [r3, #12]
 801493a:	68fa      	ldr	r2, [r7, #12]
 801493c:	4313      	orrs	r3, r2
 801493e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	695b      	ldr	r3, [r3, #20]
 801494a:	4313      	orrs	r3, r2
 801494c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	68fa      	ldr	r2, [r7, #12]
 8014952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	689a      	ldr	r2, [r3, #8]
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	681a      	ldr	r2, [r3, #0]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	4a10      	ldr	r2, [pc, #64]	; (80149a8 <TIM_Base_SetConfig+0x114>)
 8014968:	4293      	cmp	r3, r2
 801496a:	d00f      	beq.n	801498c <TIM_Base_SetConfig+0xf8>
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	4a12      	ldr	r2, [pc, #72]	; (80149b8 <TIM_Base_SetConfig+0x124>)
 8014970:	4293      	cmp	r3, r2
 8014972:	d00b      	beq.n	801498c <TIM_Base_SetConfig+0xf8>
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	4a11      	ldr	r2, [pc, #68]	; (80149bc <TIM_Base_SetConfig+0x128>)
 8014978:	4293      	cmp	r3, r2
 801497a:	d007      	beq.n	801498c <TIM_Base_SetConfig+0xf8>
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	4a10      	ldr	r2, [pc, #64]	; (80149c0 <TIM_Base_SetConfig+0x12c>)
 8014980:	4293      	cmp	r3, r2
 8014982:	d003      	beq.n	801498c <TIM_Base_SetConfig+0xf8>
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	4a0f      	ldr	r2, [pc, #60]	; (80149c4 <TIM_Base_SetConfig+0x130>)
 8014988:	4293      	cmp	r3, r2
 801498a:	d103      	bne.n	8014994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	691a      	ldr	r2, [r3, #16]
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2201      	movs	r2, #1
 8014998:	615a      	str	r2, [r3, #20]
}
 801499a:	bf00      	nop
 801499c:	3714      	adds	r7, #20
 801499e:	46bd      	mov	sp, r7
 80149a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a4:	4770      	bx	lr
 80149a6:	bf00      	nop
 80149a8:	40010000 	.word	0x40010000
 80149ac:	40000400 	.word	0x40000400
 80149b0:	40000800 	.word	0x40000800
 80149b4:	40000c00 	.word	0x40000c00
 80149b8:	40010400 	.word	0x40010400
 80149bc:	40014000 	.word	0x40014000
 80149c0:	40014400 	.word	0x40014400
 80149c4:	40014800 	.word	0x40014800

080149c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80149c8:	b480      	push	{r7}
 80149ca:	b087      	sub	sp, #28
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6a1b      	ldr	r3, [r3, #32]
 80149d6:	f023 0201 	bic.w	r2, r3, #1
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6a1b      	ldr	r3, [r3, #32]
 80149e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	685b      	ldr	r3, [r3, #4]
 80149e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	699b      	ldr	r3, [r3, #24]
 80149ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80149f0:	68fa      	ldr	r2, [r7, #12]
 80149f2:	4b37      	ldr	r3, [pc, #220]	; (8014ad0 <TIM_OC1_SetConfig+0x108>)
 80149f4:	4013      	ands	r3, r2
 80149f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	f023 0303 	bic.w	r3, r3, #3
 80149fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	68fa      	ldr	r2, [r7, #12]
 8014a06:	4313      	orrs	r3, r2
 8014a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	f023 0302 	bic.w	r3, r3, #2
 8014a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	689b      	ldr	r3, [r3, #8]
 8014a16:	697a      	ldr	r2, [r7, #20]
 8014a18:	4313      	orrs	r3, r2
 8014a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	4a2d      	ldr	r2, [pc, #180]	; (8014ad4 <TIM_OC1_SetConfig+0x10c>)
 8014a20:	4293      	cmp	r3, r2
 8014a22:	d00f      	beq.n	8014a44 <TIM_OC1_SetConfig+0x7c>
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	4a2c      	ldr	r2, [pc, #176]	; (8014ad8 <TIM_OC1_SetConfig+0x110>)
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	d00b      	beq.n	8014a44 <TIM_OC1_SetConfig+0x7c>
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	4a2b      	ldr	r2, [pc, #172]	; (8014adc <TIM_OC1_SetConfig+0x114>)
 8014a30:	4293      	cmp	r3, r2
 8014a32:	d007      	beq.n	8014a44 <TIM_OC1_SetConfig+0x7c>
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	4a2a      	ldr	r2, [pc, #168]	; (8014ae0 <TIM_OC1_SetConfig+0x118>)
 8014a38:	4293      	cmp	r3, r2
 8014a3a:	d003      	beq.n	8014a44 <TIM_OC1_SetConfig+0x7c>
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	4a29      	ldr	r2, [pc, #164]	; (8014ae4 <TIM_OC1_SetConfig+0x11c>)
 8014a40:	4293      	cmp	r3, r2
 8014a42:	d10c      	bne.n	8014a5e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	f023 0308 	bic.w	r3, r3, #8
 8014a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	68db      	ldr	r3, [r3, #12]
 8014a50:	697a      	ldr	r2, [r7, #20]
 8014a52:	4313      	orrs	r3, r2
 8014a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	f023 0304 	bic.w	r3, r3, #4
 8014a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	4a1c      	ldr	r2, [pc, #112]	; (8014ad4 <TIM_OC1_SetConfig+0x10c>)
 8014a62:	4293      	cmp	r3, r2
 8014a64:	d00f      	beq.n	8014a86 <TIM_OC1_SetConfig+0xbe>
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	4a1b      	ldr	r2, [pc, #108]	; (8014ad8 <TIM_OC1_SetConfig+0x110>)
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	d00b      	beq.n	8014a86 <TIM_OC1_SetConfig+0xbe>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	4a1a      	ldr	r2, [pc, #104]	; (8014adc <TIM_OC1_SetConfig+0x114>)
 8014a72:	4293      	cmp	r3, r2
 8014a74:	d007      	beq.n	8014a86 <TIM_OC1_SetConfig+0xbe>
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	4a19      	ldr	r2, [pc, #100]	; (8014ae0 <TIM_OC1_SetConfig+0x118>)
 8014a7a:	4293      	cmp	r3, r2
 8014a7c:	d003      	beq.n	8014a86 <TIM_OC1_SetConfig+0xbe>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	4a18      	ldr	r2, [pc, #96]	; (8014ae4 <TIM_OC1_SetConfig+0x11c>)
 8014a82:	4293      	cmp	r3, r2
 8014a84:	d111      	bne.n	8014aaa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014a86:	693b      	ldr	r3, [r7, #16]
 8014a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	695b      	ldr	r3, [r3, #20]
 8014a9a:	693a      	ldr	r2, [r7, #16]
 8014a9c:	4313      	orrs	r3, r2
 8014a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014aa0:	683b      	ldr	r3, [r7, #0]
 8014aa2:	699b      	ldr	r3, [r3, #24]
 8014aa4:	693a      	ldr	r2, [r7, #16]
 8014aa6:	4313      	orrs	r3, r2
 8014aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	693a      	ldr	r2, [r7, #16]
 8014aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	68fa      	ldr	r2, [r7, #12]
 8014ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	685a      	ldr	r2, [r3, #4]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	697a      	ldr	r2, [r7, #20]
 8014ac2:	621a      	str	r2, [r3, #32]
}
 8014ac4:	bf00      	nop
 8014ac6:	371c      	adds	r7, #28
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ace:	4770      	bx	lr
 8014ad0:	fffeff8f 	.word	0xfffeff8f
 8014ad4:	40010000 	.word	0x40010000
 8014ad8:	40010400 	.word	0x40010400
 8014adc:	40014000 	.word	0x40014000
 8014ae0:	40014400 	.word	0x40014400
 8014ae4:	40014800 	.word	0x40014800

08014ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b087      	sub	sp, #28
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	6a1b      	ldr	r3, [r3, #32]
 8014af6:	f023 0210 	bic.w	r2, r3, #16
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	6a1b      	ldr	r3, [r3, #32]
 8014b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	685b      	ldr	r3, [r3, #4]
 8014b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	699b      	ldr	r3, [r3, #24]
 8014b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014b10:	68fa      	ldr	r2, [r7, #12]
 8014b12:	4b34      	ldr	r3, [pc, #208]	; (8014be4 <TIM_OC2_SetConfig+0xfc>)
 8014b14:	4013      	ands	r3, r2
 8014b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014b20:	683b      	ldr	r3, [r7, #0]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	021b      	lsls	r3, r3, #8
 8014b26:	68fa      	ldr	r2, [r7, #12]
 8014b28:	4313      	orrs	r3, r2
 8014b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	f023 0320 	bic.w	r3, r3, #32
 8014b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	689b      	ldr	r3, [r3, #8]
 8014b38:	011b      	lsls	r3, r3, #4
 8014b3a:	697a      	ldr	r2, [r7, #20]
 8014b3c:	4313      	orrs	r3, r2
 8014b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	4a29      	ldr	r2, [pc, #164]	; (8014be8 <TIM_OC2_SetConfig+0x100>)
 8014b44:	4293      	cmp	r3, r2
 8014b46:	d003      	beq.n	8014b50 <TIM_OC2_SetConfig+0x68>
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	4a28      	ldr	r2, [pc, #160]	; (8014bec <TIM_OC2_SetConfig+0x104>)
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d10d      	bne.n	8014b6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014b50:	697b      	ldr	r3, [r7, #20]
 8014b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	68db      	ldr	r3, [r3, #12]
 8014b5c:	011b      	lsls	r3, r3, #4
 8014b5e:	697a      	ldr	r2, [r7, #20]
 8014b60:	4313      	orrs	r3, r2
 8014b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	4a1e      	ldr	r2, [pc, #120]	; (8014be8 <TIM_OC2_SetConfig+0x100>)
 8014b70:	4293      	cmp	r3, r2
 8014b72:	d00f      	beq.n	8014b94 <TIM_OC2_SetConfig+0xac>
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	4a1d      	ldr	r2, [pc, #116]	; (8014bec <TIM_OC2_SetConfig+0x104>)
 8014b78:	4293      	cmp	r3, r2
 8014b7a:	d00b      	beq.n	8014b94 <TIM_OC2_SetConfig+0xac>
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	4a1c      	ldr	r2, [pc, #112]	; (8014bf0 <TIM_OC2_SetConfig+0x108>)
 8014b80:	4293      	cmp	r3, r2
 8014b82:	d007      	beq.n	8014b94 <TIM_OC2_SetConfig+0xac>
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	4a1b      	ldr	r2, [pc, #108]	; (8014bf4 <TIM_OC2_SetConfig+0x10c>)
 8014b88:	4293      	cmp	r3, r2
 8014b8a:	d003      	beq.n	8014b94 <TIM_OC2_SetConfig+0xac>
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	4a1a      	ldr	r2, [pc, #104]	; (8014bf8 <TIM_OC2_SetConfig+0x110>)
 8014b90:	4293      	cmp	r3, r2
 8014b92:	d113      	bne.n	8014bbc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014b9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014b9c:	693b      	ldr	r3, [r7, #16]
 8014b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	695b      	ldr	r3, [r3, #20]
 8014ba8:	009b      	lsls	r3, r3, #2
 8014baa:	693a      	ldr	r2, [r7, #16]
 8014bac:	4313      	orrs	r3, r2
 8014bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	699b      	ldr	r3, [r3, #24]
 8014bb4:	009b      	lsls	r3, r3, #2
 8014bb6:	693a      	ldr	r2, [r7, #16]
 8014bb8:	4313      	orrs	r3, r2
 8014bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	693a      	ldr	r2, [r7, #16]
 8014bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	68fa      	ldr	r2, [r7, #12]
 8014bc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014bc8:	683b      	ldr	r3, [r7, #0]
 8014bca:	685a      	ldr	r2, [r3, #4]
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	697a      	ldr	r2, [r7, #20]
 8014bd4:	621a      	str	r2, [r3, #32]
}
 8014bd6:	bf00      	nop
 8014bd8:	371c      	adds	r7, #28
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop
 8014be4:	feff8fff 	.word	0xfeff8fff
 8014be8:	40010000 	.word	0x40010000
 8014bec:	40010400 	.word	0x40010400
 8014bf0:	40014000 	.word	0x40014000
 8014bf4:	40014400 	.word	0x40014400
 8014bf8:	40014800 	.word	0x40014800

08014bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014bfc:	b480      	push	{r7}
 8014bfe:	b087      	sub	sp, #28
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
 8014c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	6a1b      	ldr	r3, [r3, #32]
 8014c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	6a1b      	ldr	r3, [r3, #32]
 8014c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	685b      	ldr	r3, [r3, #4]
 8014c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	69db      	ldr	r3, [r3, #28]
 8014c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014c24:	68fa      	ldr	r2, [r7, #12]
 8014c26:	4b33      	ldr	r3, [pc, #204]	; (8014cf4 <TIM_OC3_SetConfig+0xf8>)
 8014c28:	4013      	ands	r3, r2
 8014c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	f023 0303 	bic.w	r3, r3, #3
 8014c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	68fa      	ldr	r2, [r7, #12]
 8014c3a:	4313      	orrs	r3, r2
 8014c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	689b      	ldr	r3, [r3, #8]
 8014c4a:	021b      	lsls	r3, r3, #8
 8014c4c:	697a      	ldr	r2, [r7, #20]
 8014c4e:	4313      	orrs	r3, r2
 8014c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	4a28      	ldr	r2, [pc, #160]	; (8014cf8 <TIM_OC3_SetConfig+0xfc>)
 8014c56:	4293      	cmp	r3, r2
 8014c58:	d003      	beq.n	8014c62 <TIM_OC3_SetConfig+0x66>
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	4a27      	ldr	r2, [pc, #156]	; (8014cfc <TIM_OC3_SetConfig+0x100>)
 8014c5e:	4293      	cmp	r3, r2
 8014c60:	d10d      	bne.n	8014c7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014c62:	697b      	ldr	r3, [r7, #20]
 8014c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	68db      	ldr	r3, [r3, #12]
 8014c6e:	021b      	lsls	r3, r3, #8
 8014c70:	697a      	ldr	r2, [r7, #20]
 8014c72:	4313      	orrs	r3, r2
 8014c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	4a1d      	ldr	r2, [pc, #116]	; (8014cf8 <TIM_OC3_SetConfig+0xfc>)
 8014c82:	4293      	cmp	r3, r2
 8014c84:	d00f      	beq.n	8014ca6 <TIM_OC3_SetConfig+0xaa>
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	4a1c      	ldr	r2, [pc, #112]	; (8014cfc <TIM_OC3_SetConfig+0x100>)
 8014c8a:	4293      	cmp	r3, r2
 8014c8c:	d00b      	beq.n	8014ca6 <TIM_OC3_SetConfig+0xaa>
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	4a1b      	ldr	r2, [pc, #108]	; (8014d00 <TIM_OC3_SetConfig+0x104>)
 8014c92:	4293      	cmp	r3, r2
 8014c94:	d007      	beq.n	8014ca6 <TIM_OC3_SetConfig+0xaa>
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	4a1a      	ldr	r2, [pc, #104]	; (8014d04 <TIM_OC3_SetConfig+0x108>)
 8014c9a:	4293      	cmp	r3, r2
 8014c9c:	d003      	beq.n	8014ca6 <TIM_OC3_SetConfig+0xaa>
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	4a19      	ldr	r2, [pc, #100]	; (8014d08 <TIM_OC3_SetConfig+0x10c>)
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	d113      	bne.n	8014cce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	695b      	ldr	r3, [r3, #20]
 8014cba:	011b      	lsls	r3, r3, #4
 8014cbc:	693a      	ldr	r2, [r7, #16]
 8014cbe:	4313      	orrs	r3, r2
 8014cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	699b      	ldr	r3, [r3, #24]
 8014cc6:	011b      	lsls	r3, r3, #4
 8014cc8:	693a      	ldr	r2, [r7, #16]
 8014cca:	4313      	orrs	r3, r2
 8014ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	693a      	ldr	r2, [r7, #16]
 8014cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	68fa      	ldr	r2, [r7, #12]
 8014cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	685a      	ldr	r2, [r3, #4]
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	697a      	ldr	r2, [r7, #20]
 8014ce6:	621a      	str	r2, [r3, #32]
}
 8014ce8:	bf00      	nop
 8014cea:	371c      	adds	r7, #28
 8014cec:	46bd      	mov	sp, r7
 8014cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf2:	4770      	bx	lr
 8014cf4:	fffeff8f 	.word	0xfffeff8f
 8014cf8:	40010000 	.word	0x40010000
 8014cfc:	40010400 	.word	0x40010400
 8014d00:	40014000 	.word	0x40014000
 8014d04:	40014400 	.word	0x40014400
 8014d08:	40014800 	.word	0x40014800

08014d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b087      	sub	sp, #28
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	6a1b      	ldr	r3, [r3, #32]
 8014d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	6a1b      	ldr	r3, [r3, #32]
 8014d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	685b      	ldr	r3, [r3, #4]
 8014d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	69db      	ldr	r3, [r3, #28]
 8014d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014d34:	68fa      	ldr	r2, [r7, #12]
 8014d36:	4b24      	ldr	r3, [pc, #144]	; (8014dc8 <TIM_OC4_SetConfig+0xbc>)
 8014d38:	4013      	ands	r3, r2
 8014d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	021b      	lsls	r3, r3, #8
 8014d4a:	68fa      	ldr	r2, [r7, #12]
 8014d4c:	4313      	orrs	r3, r2
 8014d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	689b      	ldr	r3, [r3, #8]
 8014d5c:	031b      	lsls	r3, r3, #12
 8014d5e:	693a      	ldr	r2, [r7, #16]
 8014d60:	4313      	orrs	r3, r2
 8014d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	4a19      	ldr	r2, [pc, #100]	; (8014dcc <TIM_OC4_SetConfig+0xc0>)
 8014d68:	4293      	cmp	r3, r2
 8014d6a:	d00f      	beq.n	8014d8c <TIM_OC4_SetConfig+0x80>
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	4a18      	ldr	r2, [pc, #96]	; (8014dd0 <TIM_OC4_SetConfig+0xc4>)
 8014d70:	4293      	cmp	r3, r2
 8014d72:	d00b      	beq.n	8014d8c <TIM_OC4_SetConfig+0x80>
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	4a17      	ldr	r2, [pc, #92]	; (8014dd4 <TIM_OC4_SetConfig+0xc8>)
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	d007      	beq.n	8014d8c <TIM_OC4_SetConfig+0x80>
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	4a16      	ldr	r2, [pc, #88]	; (8014dd8 <TIM_OC4_SetConfig+0xcc>)
 8014d80:	4293      	cmp	r3, r2
 8014d82:	d003      	beq.n	8014d8c <TIM_OC4_SetConfig+0x80>
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	4a15      	ldr	r2, [pc, #84]	; (8014ddc <TIM_OC4_SetConfig+0xd0>)
 8014d88:	4293      	cmp	r3, r2
 8014d8a:	d109      	bne.n	8014da0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	695b      	ldr	r3, [r3, #20]
 8014d98:	019b      	lsls	r3, r3, #6
 8014d9a:	697a      	ldr	r2, [r7, #20]
 8014d9c:	4313      	orrs	r3, r2
 8014d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	697a      	ldr	r2, [r7, #20]
 8014da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	68fa      	ldr	r2, [r7, #12]
 8014daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	685a      	ldr	r2, [r3, #4]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	693a      	ldr	r2, [r7, #16]
 8014db8:	621a      	str	r2, [r3, #32]
}
 8014dba:	bf00      	nop
 8014dbc:	371c      	adds	r7, #28
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc4:	4770      	bx	lr
 8014dc6:	bf00      	nop
 8014dc8:	feff8fff 	.word	0xfeff8fff
 8014dcc:	40010000 	.word	0x40010000
 8014dd0:	40010400 	.word	0x40010400
 8014dd4:	40014000 	.word	0x40014000
 8014dd8:	40014400 	.word	0x40014400
 8014ddc:	40014800 	.word	0x40014800

08014de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014de0:	b480      	push	{r7}
 8014de2:	b087      	sub	sp, #28
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	6a1b      	ldr	r3, [r3, #32]
 8014dee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	6a1b      	ldr	r3, [r3, #32]
 8014dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	685b      	ldr	r3, [r3, #4]
 8014e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	4b21      	ldr	r3, [pc, #132]	; (8014e90 <TIM_OC5_SetConfig+0xb0>)
 8014e0c:	4013      	ands	r3, r2
 8014e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	68fa      	ldr	r2, [r7, #12]
 8014e16:	4313      	orrs	r3, r2
 8014e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8014e20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	689b      	ldr	r3, [r3, #8]
 8014e26:	041b      	lsls	r3, r3, #16
 8014e28:	693a      	ldr	r2, [r7, #16]
 8014e2a:	4313      	orrs	r3, r2
 8014e2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	4a18      	ldr	r2, [pc, #96]	; (8014e94 <TIM_OC5_SetConfig+0xb4>)
 8014e32:	4293      	cmp	r3, r2
 8014e34:	d00f      	beq.n	8014e56 <TIM_OC5_SetConfig+0x76>
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	4a17      	ldr	r2, [pc, #92]	; (8014e98 <TIM_OC5_SetConfig+0xb8>)
 8014e3a:	4293      	cmp	r3, r2
 8014e3c:	d00b      	beq.n	8014e56 <TIM_OC5_SetConfig+0x76>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	4a16      	ldr	r2, [pc, #88]	; (8014e9c <TIM_OC5_SetConfig+0xbc>)
 8014e42:	4293      	cmp	r3, r2
 8014e44:	d007      	beq.n	8014e56 <TIM_OC5_SetConfig+0x76>
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	4a15      	ldr	r2, [pc, #84]	; (8014ea0 <TIM_OC5_SetConfig+0xc0>)
 8014e4a:	4293      	cmp	r3, r2
 8014e4c:	d003      	beq.n	8014e56 <TIM_OC5_SetConfig+0x76>
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	4a14      	ldr	r2, [pc, #80]	; (8014ea4 <TIM_OC5_SetConfig+0xc4>)
 8014e52:	4293      	cmp	r3, r2
 8014e54:	d109      	bne.n	8014e6a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	695b      	ldr	r3, [r3, #20]
 8014e62:	021b      	lsls	r3, r3, #8
 8014e64:	697a      	ldr	r2, [r7, #20]
 8014e66:	4313      	orrs	r3, r2
 8014e68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	697a      	ldr	r2, [r7, #20]
 8014e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	68fa      	ldr	r2, [r7, #12]
 8014e74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	685a      	ldr	r2, [r3, #4]
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	693a      	ldr	r2, [r7, #16]
 8014e82:	621a      	str	r2, [r3, #32]
}
 8014e84:	bf00      	nop
 8014e86:	371c      	adds	r7, #28
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8e:	4770      	bx	lr
 8014e90:	fffeff8f 	.word	0xfffeff8f
 8014e94:	40010000 	.word	0x40010000
 8014e98:	40010400 	.word	0x40010400
 8014e9c:	40014000 	.word	0x40014000
 8014ea0:	40014400 	.word	0x40014400
 8014ea4:	40014800 	.word	0x40014800

08014ea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014ea8:	b480      	push	{r7}
 8014eaa:	b087      	sub	sp, #28
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	6a1b      	ldr	r3, [r3, #32]
 8014eb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6a1b      	ldr	r3, [r3, #32]
 8014ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	685b      	ldr	r3, [r3, #4]
 8014ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8014ed0:	68fa      	ldr	r2, [r7, #12]
 8014ed2:	4b22      	ldr	r3, [pc, #136]	; (8014f5c <TIM_OC6_SetConfig+0xb4>)
 8014ed4:	4013      	ands	r3, r2
 8014ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	021b      	lsls	r3, r3, #8
 8014ede:	68fa      	ldr	r2, [r7, #12]
 8014ee0:	4313      	orrs	r3, r2
 8014ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	689b      	ldr	r3, [r3, #8]
 8014ef0:	051b      	lsls	r3, r3, #20
 8014ef2:	693a      	ldr	r2, [r7, #16]
 8014ef4:	4313      	orrs	r3, r2
 8014ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	4a19      	ldr	r2, [pc, #100]	; (8014f60 <TIM_OC6_SetConfig+0xb8>)
 8014efc:	4293      	cmp	r3, r2
 8014efe:	d00f      	beq.n	8014f20 <TIM_OC6_SetConfig+0x78>
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	4a18      	ldr	r2, [pc, #96]	; (8014f64 <TIM_OC6_SetConfig+0xbc>)
 8014f04:	4293      	cmp	r3, r2
 8014f06:	d00b      	beq.n	8014f20 <TIM_OC6_SetConfig+0x78>
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	4a17      	ldr	r2, [pc, #92]	; (8014f68 <TIM_OC6_SetConfig+0xc0>)
 8014f0c:	4293      	cmp	r3, r2
 8014f0e:	d007      	beq.n	8014f20 <TIM_OC6_SetConfig+0x78>
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	4a16      	ldr	r2, [pc, #88]	; (8014f6c <TIM_OC6_SetConfig+0xc4>)
 8014f14:	4293      	cmp	r3, r2
 8014f16:	d003      	beq.n	8014f20 <TIM_OC6_SetConfig+0x78>
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	4a15      	ldr	r2, [pc, #84]	; (8014f70 <TIM_OC6_SetConfig+0xc8>)
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	d109      	bne.n	8014f34 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014f26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	695b      	ldr	r3, [r3, #20]
 8014f2c:	029b      	lsls	r3, r3, #10
 8014f2e:	697a      	ldr	r2, [r7, #20]
 8014f30:	4313      	orrs	r3, r2
 8014f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	697a      	ldr	r2, [r7, #20]
 8014f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	68fa      	ldr	r2, [r7, #12]
 8014f3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	685a      	ldr	r2, [r3, #4]
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	693a      	ldr	r2, [r7, #16]
 8014f4c:	621a      	str	r2, [r3, #32]
}
 8014f4e:	bf00      	nop
 8014f50:	371c      	adds	r7, #28
 8014f52:	46bd      	mov	sp, r7
 8014f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop
 8014f5c:	feff8fff 	.word	0xfeff8fff
 8014f60:	40010000 	.word	0x40010000
 8014f64:	40010400 	.word	0x40010400
 8014f68:	40014000 	.word	0x40014000
 8014f6c:	40014400 	.word	0x40014400
 8014f70:	40014800 	.word	0x40014800

08014f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014f74:	b480      	push	{r7}
 8014f76:	b087      	sub	sp, #28
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	60f8      	str	r0, [r7, #12]
 8014f7c:	60b9      	str	r1, [r7, #8]
 8014f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	6a1b      	ldr	r3, [r3, #32]
 8014f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	6a1b      	ldr	r3, [r3, #32]
 8014f8a:	f023 0201 	bic.w	r2, r3, #1
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	699b      	ldr	r3, [r3, #24]
 8014f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	011b      	lsls	r3, r3, #4
 8014fa4:	693a      	ldr	r2, [r7, #16]
 8014fa6:	4313      	orrs	r3, r2
 8014fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	f023 030a 	bic.w	r3, r3, #10
 8014fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014fb2:	697a      	ldr	r2, [r7, #20]
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	4313      	orrs	r3, r2
 8014fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	693a      	ldr	r2, [r7, #16]
 8014fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	697a      	ldr	r2, [r7, #20]
 8014fc4:	621a      	str	r2, [r3, #32]
}
 8014fc6:	bf00      	nop
 8014fc8:	371c      	adds	r7, #28
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd0:	4770      	bx	lr

08014fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014fd2:	b480      	push	{r7}
 8014fd4:	b087      	sub	sp, #28
 8014fd6:	af00      	add	r7, sp, #0
 8014fd8:	60f8      	str	r0, [r7, #12]
 8014fda:	60b9      	str	r1, [r7, #8]
 8014fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	6a1b      	ldr	r3, [r3, #32]
 8014fe2:	f023 0210 	bic.w	r2, r3, #16
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	699b      	ldr	r3, [r3, #24]
 8014fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	6a1b      	ldr	r3, [r3, #32]
 8014ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	031b      	lsls	r3, r3, #12
 8015002:	697a      	ldr	r2, [r7, #20]
 8015004:	4313      	orrs	r3, r2
 8015006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801500e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015010:	68bb      	ldr	r3, [r7, #8]
 8015012:	011b      	lsls	r3, r3, #4
 8015014:	693a      	ldr	r2, [r7, #16]
 8015016:	4313      	orrs	r3, r2
 8015018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	697a      	ldr	r2, [r7, #20]
 801501e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	693a      	ldr	r2, [r7, #16]
 8015024:	621a      	str	r2, [r3, #32]
}
 8015026:	bf00      	nop
 8015028:	371c      	adds	r7, #28
 801502a:	46bd      	mov	sp, r7
 801502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015030:	4770      	bx	lr
	...

08015034 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015034:	b480      	push	{r7}
 8015036:	b085      	sub	sp, #20
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	689b      	ldr	r3, [r3, #8]
 8015042:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015044:	68fa      	ldr	r2, [r7, #12]
 8015046:	4b09      	ldr	r3, [pc, #36]	; (801506c <TIM_ITRx_SetConfig+0x38>)
 8015048:	4013      	ands	r3, r2
 801504a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801504c:	683a      	ldr	r2, [r7, #0]
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	4313      	orrs	r3, r2
 8015052:	f043 0307 	orr.w	r3, r3, #7
 8015056:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	68fa      	ldr	r2, [r7, #12]
 801505c:	609a      	str	r2, [r3, #8]
}
 801505e:	bf00      	nop
 8015060:	3714      	adds	r7, #20
 8015062:	46bd      	mov	sp, r7
 8015064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015068:	4770      	bx	lr
 801506a:	bf00      	nop
 801506c:	ffcfff8f 	.word	0xffcfff8f

08015070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015070:	b480      	push	{r7}
 8015072:	b087      	sub	sp, #28
 8015074:	af00      	add	r7, sp, #0
 8015076:	60f8      	str	r0, [r7, #12]
 8015078:	60b9      	str	r1, [r7, #8]
 801507a:	607a      	str	r2, [r7, #4]
 801507c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	689b      	ldr	r3, [r3, #8]
 8015082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801508a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	021a      	lsls	r2, r3, #8
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	431a      	orrs	r2, r3
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	4313      	orrs	r3, r2
 8015098:	697a      	ldr	r2, [r7, #20]
 801509a:	4313      	orrs	r3, r2
 801509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	697a      	ldr	r2, [r7, #20]
 80150a2:	609a      	str	r2, [r3, #8]
}
 80150a4:	bf00      	nop
 80150a6:	371c      	adds	r7, #28
 80150a8:	46bd      	mov	sp, r7
 80150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ae:	4770      	bx	lr

080150b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80150b0:	b480      	push	{r7}
 80150b2:	b087      	sub	sp, #28
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	60b9      	str	r1, [r7, #8]
 80150ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	f003 031f 	and.w	r3, r3, #31
 80150c2:	2201      	movs	r2, #1
 80150c4:	fa02 f303 	lsl.w	r3, r2, r3
 80150c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	6a1a      	ldr	r2, [r3, #32]
 80150ce:	697b      	ldr	r3, [r7, #20]
 80150d0:	43db      	mvns	r3, r3
 80150d2:	401a      	ands	r2, r3
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	6a1a      	ldr	r2, [r3, #32]
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	f003 031f 	and.w	r3, r3, #31
 80150e2:	6879      	ldr	r1, [r7, #4]
 80150e4:	fa01 f303 	lsl.w	r3, r1, r3
 80150e8:	431a      	orrs	r2, r3
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	621a      	str	r2, [r3, #32]
}
 80150ee:	bf00      	nop
 80150f0:	371c      	adds	r7, #28
 80150f2:	46bd      	mov	sp, r7
 80150f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f8:	4770      	bx	lr
	...

080150fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80150fc:	b480      	push	{r7}
 80150fe:	b085      	sub	sp, #20
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801510c:	2b01      	cmp	r3, #1
 801510e:	d101      	bne.n	8015114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015110:	2302      	movs	r3, #2
 8015112:	e06d      	b.n	80151f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2201      	movs	r2, #1
 8015118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2202      	movs	r2, #2
 8015120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	685b      	ldr	r3, [r3, #4]
 801512a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	689b      	ldr	r3, [r3, #8]
 8015132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	4a30      	ldr	r2, [pc, #192]	; (80151fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801513a:	4293      	cmp	r3, r2
 801513c:	d004      	beq.n	8015148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	4a2f      	ldr	r2, [pc, #188]	; (8015200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015144:	4293      	cmp	r3, r2
 8015146:	d108      	bne.n	801515a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801514e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	68fa      	ldr	r2, [r7, #12]
 8015156:	4313      	orrs	r3, r2
 8015158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	68fa      	ldr	r2, [r7, #12]
 8015168:	4313      	orrs	r3, r2
 801516a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	68fa      	ldr	r2, [r7, #12]
 8015172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	4a20      	ldr	r2, [pc, #128]	; (80151fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801517a:	4293      	cmp	r3, r2
 801517c:	d022      	beq.n	80151c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015186:	d01d      	beq.n	80151c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4a1d      	ldr	r2, [pc, #116]	; (8015204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801518e:	4293      	cmp	r3, r2
 8015190:	d018      	beq.n	80151c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	4a1c      	ldr	r2, [pc, #112]	; (8015208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8015198:	4293      	cmp	r3, r2
 801519a:	d013      	beq.n	80151c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	4a1a      	ldr	r2, [pc, #104]	; (801520c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80151a2:	4293      	cmp	r3, r2
 80151a4:	d00e      	beq.n	80151c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	4a15      	ldr	r2, [pc, #84]	; (8015200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80151ac:	4293      	cmp	r3, r2
 80151ae:	d009      	beq.n	80151c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	4a16      	ldr	r2, [pc, #88]	; (8015210 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80151b6:	4293      	cmp	r3, r2
 80151b8:	d004      	beq.n	80151c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	4a15      	ldr	r2, [pc, #84]	; (8015214 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80151c0:	4293      	cmp	r3, r2
 80151c2:	d10c      	bne.n	80151de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80151ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	689b      	ldr	r3, [r3, #8]
 80151d0:	68ba      	ldr	r2, [r7, #8]
 80151d2:	4313      	orrs	r3, r2
 80151d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	2201      	movs	r2, #1
 80151e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	2200      	movs	r2, #0
 80151ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80151ee:	2300      	movs	r3, #0
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3714      	adds	r7, #20
 80151f4:	46bd      	mov	sp, r7
 80151f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fa:	4770      	bx	lr
 80151fc:	40010000 	.word	0x40010000
 8015200:	40010400 	.word	0x40010400
 8015204:	40000400 	.word	0x40000400
 8015208:	40000800 	.word	0x40000800
 801520c:	40000c00 	.word	0x40000c00
 8015210:	40001800 	.word	0x40001800
 8015214:	40014000 	.word	0x40014000

08015218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015218:	b480      	push	{r7}
 801521a:	b083      	sub	sp, #12
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015220:	bf00      	nop
 8015222:	370c      	adds	r7, #12
 8015224:	46bd      	mov	sp, r7
 8015226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522a:	4770      	bx	lr

0801522c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801522c:	b480      	push	{r7}
 801522e:	b083      	sub	sp, #12
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015234:	bf00      	nop
 8015236:	370c      	adds	r7, #12
 8015238:	46bd      	mov	sp, r7
 801523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523e:	4770      	bx	lr

08015240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015240:	b480      	push	{r7}
 8015242:	b083      	sub	sp, #12
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015248:	bf00      	nop
 801524a:	370c      	adds	r7, #12
 801524c:	46bd      	mov	sp, r7
 801524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015252:	4770      	bx	lr

08015254 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8015254:	b480      	push	{r7}
 8015256:	b083      	sub	sp, #12
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801525e:	683b      	ldr	r3, [r7, #0]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d121      	bne.n	80152aa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	681a      	ldr	r2, [r3, #0]
 801526a:	4b27      	ldr	r3, [pc, #156]	; (8015308 <FMC_SDRAM_Init+0xb4>)
 801526c:	4013      	ands	r3, r2
 801526e:	683a      	ldr	r2, [r7, #0]
 8015270:	6851      	ldr	r1, [r2, #4]
 8015272:	683a      	ldr	r2, [r7, #0]
 8015274:	6892      	ldr	r2, [r2, #8]
 8015276:	4311      	orrs	r1, r2
 8015278:	683a      	ldr	r2, [r7, #0]
 801527a:	68d2      	ldr	r2, [r2, #12]
 801527c:	4311      	orrs	r1, r2
 801527e:	683a      	ldr	r2, [r7, #0]
 8015280:	6912      	ldr	r2, [r2, #16]
 8015282:	4311      	orrs	r1, r2
 8015284:	683a      	ldr	r2, [r7, #0]
 8015286:	6952      	ldr	r2, [r2, #20]
 8015288:	4311      	orrs	r1, r2
 801528a:	683a      	ldr	r2, [r7, #0]
 801528c:	6992      	ldr	r2, [r2, #24]
 801528e:	4311      	orrs	r1, r2
 8015290:	683a      	ldr	r2, [r7, #0]
 8015292:	69d2      	ldr	r2, [r2, #28]
 8015294:	4311      	orrs	r1, r2
 8015296:	683a      	ldr	r2, [r7, #0]
 8015298:	6a12      	ldr	r2, [r2, #32]
 801529a:	4311      	orrs	r1, r2
 801529c:	683a      	ldr	r2, [r7, #0]
 801529e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80152a0:	430a      	orrs	r2, r1
 80152a2:	431a      	orrs	r2, r3
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	601a      	str	r2, [r3, #0]
 80152a8:	e026      	b.n	80152f8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80152b2:	683b      	ldr	r3, [r7, #0]
 80152b4:	69d9      	ldr	r1, [r3, #28]
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	6a1b      	ldr	r3, [r3, #32]
 80152ba:	4319      	orrs	r1, r3
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152c0:	430b      	orrs	r3, r1
 80152c2:	431a      	orrs	r2, r3
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	685a      	ldr	r2, [r3, #4]
 80152cc:	4b0e      	ldr	r3, [pc, #56]	; (8015308 <FMC_SDRAM_Init+0xb4>)
 80152ce:	4013      	ands	r3, r2
 80152d0:	683a      	ldr	r2, [r7, #0]
 80152d2:	6851      	ldr	r1, [r2, #4]
 80152d4:	683a      	ldr	r2, [r7, #0]
 80152d6:	6892      	ldr	r2, [r2, #8]
 80152d8:	4311      	orrs	r1, r2
 80152da:	683a      	ldr	r2, [r7, #0]
 80152dc:	68d2      	ldr	r2, [r2, #12]
 80152de:	4311      	orrs	r1, r2
 80152e0:	683a      	ldr	r2, [r7, #0]
 80152e2:	6912      	ldr	r2, [r2, #16]
 80152e4:	4311      	orrs	r1, r2
 80152e6:	683a      	ldr	r2, [r7, #0]
 80152e8:	6952      	ldr	r2, [r2, #20]
 80152ea:	4311      	orrs	r1, r2
 80152ec:	683a      	ldr	r2, [r7, #0]
 80152ee:	6992      	ldr	r2, [r2, #24]
 80152f0:	430a      	orrs	r2, r1
 80152f2:	431a      	orrs	r2, r3
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80152f8:	2300      	movs	r3, #0
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	370c      	adds	r7, #12
 80152fe:	46bd      	mov	sp, r7
 8015300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015304:	4770      	bx	lr
 8015306:	bf00      	nop
 8015308:	ffff8000 	.word	0xffff8000

0801530c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801530c:	b480      	push	{r7}
 801530e:	b085      	sub	sp, #20
 8015310:	af00      	add	r7, sp, #0
 8015312:	60f8      	str	r0, [r7, #12]
 8015314:	60b9      	str	r1, [r7, #8]
 8015316:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d128      	bne.n	8015370 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	689b      	ldr	r3, [r3, #8]
 8015322:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	1e59      	subs	r1, r3, #1
 801532c:	68bb      	ldr	r3, [r7, #8]
 801532e:	685b      	ldr	r3, [r3, #4]
 8015330:	3b01      	subs	r3, #1
 8015332:	011b      	lsls	r3, r3, #4
 8015334:	4319      	orrs	r1, r3
 8015336:	68bb      	ldr	r3, [r7, #8]
 8015338:	689b      	ldr	r3, [r3, #8]
 801533a:	3b01      	subs	r3, #1
 801533c:	021b      	lsls	r3, r3, #8
 801533e:	4319      	orrs	r1, r3
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	68db      	ldr	r3, [r3, #12]
 8015344:	3b01      	subs	r3, #1
 8015346:	031b      	lsls	r3, r3, #12
 8015348:	4319      	orrs	r1, r3
 801534a:	68bb      	ldr	r3, [r7, #8]
 801534c:	691b      	ldr	r3, [r3, #16]
 801534e:	3b01      	subs	r3, #1
 8015350:	041b      	lsls	r3, r3, #16
 8015352:	4319      	orrs	r1, r3
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	695b      	ldr	r3, [r3, #20]
 8015358:	3b01      	subs	r3, #1
 801535a:	051b      	lsls	r3, r3, #20
 801535c:	4319      	orrs	r1, r3
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	699b      	ldr	r3, [r3, #24]
 8015362:	3b01      	subs	r3, #1
 8015364:	061b      	lsls	r3, r3, #24
 8015366:	430b      	orrs	r3, r1
 8015368:	431a      	orrs	r2, r3
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	609a      	str	r2, [r3, #8]
 801536e:	e02d      	b.n	80153cc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	689a      	ldr	r2, [r3, #8]
 8015374:	4b19      	ldr	r3, [pc, #100]	; (80153dc <FMC_SDRAM_Timing_Init+0xd0>)
 8015376:	4013      	ands	r3, r2
 8015378:	68ba      	ldr	r2, [r7, #8]
 801537a:	68d2      	ldr	r2, [r2, #12]
 801537c:	3a01      	subs	r2, #1
 801537e:	0311      	lsls	r1, r2, #12
 8015380:	68ba      	ldr	r2, [r7, #8]
 8015382:	6952      	ldr	r2, [r2, #20]
 8015384:	3a01      	subs	r2, #1
 8015386:	0512      	lsls	r2, r2, #20
 8015388:	430a      	orrs	r2, r1
 801538a:	431a      	orrs	r2, r3
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	68db      	ldr	r3, [r3, #12]
 8015394:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	1e59      	subs	r1, r3, #1
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	685b      	ldr	r3, [r3, #4]
 80153a2:	3b01      	subs	r3, #1
 80153a4:	011b      	lsls	r3, r3, #4
 80153a6:	4319      	orrs	r1, r3
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	689b      	ldr	r3, [r3, #8]
 80153ac:	3b01      	subs	r3, #1
 80153ae:	021b      	lsls	r3, r3, #8
 80153b0:	4319      	orrs	r1, r3
 80153b2:	68bb      	ldr	r3, [r7, #8]
 80153b4:	691b      	ldr	r3, [r3, #16]
 80153b6:	3b01      	subs	r3, #1
 80153b8:	041b      	lsls	r3, r3, #16
 80153ba:	4319      	orrs	r1, r3
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	699b      	ldr	r3, [r3, #24]
 80153c0:	3b01      	subs	r3, #1
 80153c2:	061b      	lsls	r3, r3, #24
 80153c4:	430b      	orrs	r3, r1
 80153c6:	431a      	orrs	r2, r3
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80153cc:	2300      	movs	r3, #0
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3714      	adds	r7, #20
 80153d2:	46bd      	mov	sp, r7
 80153d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d8:	4770      	bx	lr
 80153da:	bf00      	nop
 80153dc:	ff0f0fff 	.word	0xff0f0fff

080153e0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80153e0:	b480      	push	{r7}
 80153e2:	b085      	sub	sp, #20
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	691a      	ldr	r2, [r3, #16]
 80153f0:	4b0c      	ldr	r3, [pc, #48]	; (8015424 <FMC_SDRAM_SendCommand+0x44>)
 80153f2:	4013      	ands	r3, r2
 80153f4:	68ba      	ldr	r2, [r7, #8]
 80153f6:	6811      	ldr	r1, [r2, #0]
 80153f8:	68ba      	ldr	r2, [r7, #8]
 80153fa:	6852      	ldr	r2, [r2, #4]
 80153fc:	4311      	orrs	r1, r2
 80153fe:	68ba      	ldr	r2, [r7, #8]
 8015400:	6892      	ldr	r2, [r2, #8]
 8015402:	3a01      	subs	r2, #1
 8015404:	0152      	lsls	r2, r2, #5
 8015406:	4311      	orrs	r1, r2
 8015408:	68ba      	ldr	r2, [r7, #8]
 801540a:	68d2      	ldr	r2, [r2, #12]
 801540c:	0252      	lsls	r2, r2, #9
 801540e:	430a      	orrs	r2, r1
 8015410:	431a      	orrs	r2, r3
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8015416:	2300      	movs	r3, #0
}
 8015418:	4618      	mov	r0, r3
 801541a:	3714      	adds	r7, #20
 801541c:	46bd      	mov	sp, r7
 801541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015422:	4770      	bx	lr
 8015424:	ffc00000 	.word	0xffc00000

08015428 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8015428:	b480      	push	{r7}
 801542a:	b083      	sub	sp, #12
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	695a      	ldr	r2, [r3, #20]
 8015436:	4b07      	ldr	r3, [pc, #28]	; (8015454 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8015438:	4013      	ands	r3, r2
 801543a:	683a      	ldr	r2, [r7, #0]
 801543c:	0052      	lsls	r2, r2, #1
 801543e:	431a      	orrs	r2, r3
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8015444:	2300      	movs	r3, #0
}
 8015446:	4618      	mov	r0, r3
 8015448:	370c      	adds	r7, #12
 801544a:	46bd      	mov	sp, r7
 801544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015450:	4770      	bx	lr
 8015452:	bf00      	nop
 8015454:	ffffc001 	.word	0xffffc001

08015458 <__NVIC_SetPriority>:
{
 8015458:	b480      	push	{r7}
 801545a:	b083      	sub	sp, #12
 801545c:	af00      	add	r7, sp, #0
 801545e:	4603      	mov	r3, r0
 8015460:	6039      	str	r1, [r7, #0]
 8015462:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015468:	2b00      	cmp	r3, #0
 801546a:	db0a      	blt.n	8015482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	b2da      	uxtb	r2, r3
 8015470:	490c      	ldr	r1, [pc, #48]	; (80154a4 <__NVIC_SetPriority+0x4c>)
 8015472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015476:	0112      	lsls	r2, r2, #4
 8015478:	b2d2      	uxtb	r2, r2
 801547a:	440b      	add	r3, r1
 801547c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015480:	e00a      	b.n	8015498 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	b2da      	uxtb	r2, r3
 8015486:	4908      	ldr	r1, [pc, #32]	; (80154a8 <__NVIC_SetPriority+0x50>)
 8015488:	88fb      	ldrh	r3, [r7, #6]
 801548a:	f003 030f 	and.w	r3, r3, #15
 801548e:	3b04      	subs	r3, #4
 8015490:	0112      	lsls	r2, r2, #4
 8015492:	b2d2      	uxtb	r2, r2
 8015494:	440b      	add	r3, r1
 8015496:	761a      	strb	r2, [r3, #24]
}
 8015498:	bf00      	nop
 801549a:	370c      	adds	r7, #12
 801549c:	46bd      	mov	sp, r7
 801549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a2:	4770      	bx	lr
 80154a4:	e000e100 	.word	0xe000e100
 80154a8:	e000ed00 	.word	0xe000ed00

080154ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80154ac:	b580      	push	{r7, lr}
 80154ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80154b0:	4b05      	ldr	r3, [pc, #20]	; (80154c8 <SysTick_Handler+0x1c>)
 80154b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80154b4:	f003 f8d6 	bl	8018664 <xTaskGetSchedulerState>
 80154b8:	4603      	mov	r3, r0
 80154ba:	2b01      	cmp	r3, #1
 80154bc:	d001      	beq.n	80154c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80154be:	f001 f8fb 	bl	80166b8 <xPortSysTickHandler>
  }
}
 80154c2:	bf00      	nop
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	e000e010 	.word	0xe000e010

080154cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80154cc:	b580      	push	{r7, lr}
 80154ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80154d0:	2100      	movs	r1, #0
 80154d2:	f06f 0004 	mvn.w	r0, #4
 80154d6:	f7ff ffbf 	bl	8015458 <__NVIC_SetPriority>
#endif
}
 80154da:	bf00      	nop
 80154dc:	bd80      	pop	{r7, pc}
	...

080154e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80154e0:	b480      	push	{r7}
 80154e2:	b083      	sub	sp, #12
 80154e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80154e6:	f3ef 8305 	mrs	r3, IPSR
 80154ea:	603b      	str	r3, [r7, #0]
  return(result);
 80154ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d003      	beq.n	80154fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80154f2:	f06f 0305 	mvn.w	r3, #5
 80154f6:	607b      	str	r3, [r7, #4]
 80154f8:	e00c      	b.n	8015514 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80154fa:	4b0a      	ldr	r3, [pc, #40]	; (8015524 <osKernelInitialize+0x44>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d105      	bne.n	801550e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015502:	4b08      	ldr	r3, [pc, #32]	; (8015524 <osKernelInitialize+0x44>)
 8015504:	2201      	movs	r2, #1
 8015506:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015508:	2300      	movs	r3, #0
 801550a:	607b      	str	r3, [r7, #4]
 801550c:	e002      	b.n	8015514 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801550e:	f04f 33ff 	mov.w	r3, #4294967295
 8015512:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015514:	687b      	ldr	r3, [r7, #4]
}
 8015516:	4618      	mov	r0, r3
 8015518:	370c      	adds	r7, #12
 801551a:	46bd      	mov	sp, r7
 801551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015520:	4770      	bx	lr
 8015522:	bf00      	nop
 8015524:	2400be48 	.word	0x2400be48

08015528 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015528:	b580      	push	{r7, lr}
 801552a:	b082      	sub	sp, #8
 801552c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801552e:	f3ef 8305 	mrs	r3, IPSR
 8015532:	603b      	str	r3, [r7, #0]
  return(result);
 8015534:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015536:	2b00      	cmp	r3, #0
 8015538:	d003      	beq.n	8015542 <osKernelStart+0x1a>
    stat = osErrorISR;
 801553a:	f06f 0305 	mvn.w	r3, #5
 801553e:	607b      	str	r3, [r7, #4]
 8015540:	e010      	b.n	8015564 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015542:	4b0b      	ldr	r3, [pc, #44]	; (8015570 <osKernelStart+0x48>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	2b01      	cmp	r3, #1
 8015548:	d109      	bne.n	801555e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801554a:	f7ff ffbf 	bl	80154cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801554e:	4b08      	ldr	r3, [pc, #32]	; (8015570 <osKernelStart+0x48>)
 8015550:	2202      	movs	r2, #2
 8015552:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015554:	f002 fbdc 	bl	8017d10 <vTaskStartScheduler>
      stat = osOK;
 8015558:	2300      	movs	r3, #0
 801555a:	607b      	str	r3, [r7, #4]
 801555c:	e002      	b.n	8015564 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801555e:	f04f 33ff 	mov.w	r3, #4294967295
 8015562:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015564:	687b      	ldr	r3, [r7, #4]
}
 8015566:	4618      	mov	r0, r3
 8015568:	3708      	adds	r7, #8
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}
 801556e:	bf00      	nop
 8015570:	2400be48 	.word	0x2400be48

08015574 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015574:	b580      	push	{r7, lr}
 8015576:	b08e      	sub	sp, #56	; 0x38
 8015578:	af04      	add	r7, sp, #16
 801557a:	60f8      	str	r0, [r7, #12]
 801557c:	60b9      	str	r1, [r7, #8]
 801557e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015580:	2300      	movs	r3, #0
 8015582:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015584:	f3ef 8305 	mrs	r3, IPSR
 8015588:	617b      	str	r3, [r7, #20]
  return(result);
 801558a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801558c:	2b00      	cmp	r3, #0
 801558e:	d17e      	bne.n	801568e <osThreadNew+0x11a>
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d07b      	beq.n	801568e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015596:	2380      	movs	r3, #128	; 0x80
 8015598:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801559a:	2318      	movs	r3, #24
 801559c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801559e:	2300      	movs	r3, #0
 80155a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80155a2:	f04f 33ff 	mov.w	r3, #4294967295
 80155a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d045      	beq.n	801563a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d002      	beq.n	80155bc <osThreadNew+0x48>
        name = attr->name;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	699b      	ldr	r3, [r3, #24]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d002      	beq.n	80155ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	699b      	ldr	r3, [r3, #24]
 80155c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80155ca:	69fb      	ldr	r3, [r7, #28]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d008      	beq.n	80155e2 <osThreadNew+0x6e>
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	2b38      	cmp	r3, #56	; 0x38
 80155d4:	d805      	bhi.n	80155e2 <osThreadNew+0x6e>
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	685b      	ldr	r3, [r3, #4]
 80155da:	f003 0301 	and.w	r3, r3, #1
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d001      	beq.n	80155e6 <osThreadNew+0x72>
        return (NULL);
 80155e2:	2300      	movs	r3, #0
 80155e4:	e054      	b.n	8015690 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	695b      	ldr	r3, [r3, #20]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d003      	beq.n	80155f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	695b      	ldr	r3, [r3, #20]
 80155f2:	089b      	lsrs	r3, r3, #2
 80155f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	689b      	ldr	r3, [r3, #8]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d00e      	beq.n	801561c <osThreadNew+0xa8>
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	2b5f      	cmp	r3, #95	; 0x5f
 8015604:	d90a      	bls.n	801561c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801560a:	2b00      	cmp	r3, #0
 801560c:	d006      	beq.n	801561c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	695b      	ldr	r3, [r3, #20]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d002      	beq.n	801561c <osThreadNew+0xa8>
        mem = 1;
 8015616:	2301      	movs	r3, #1
 8015618:	61bb      	str	r3, [r7, #24]
 801561a:	e010      	b.n	801563e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	689b      	ldr	r3, [r3, #8]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d10c      	bne.n	801563e <osThreadNew+0xca>
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	68db      	ldr	r3, [r3, #12]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d108      	bne.n	801563e <osThreadNew+0xca>
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	691b      	ldr	r3, [r3, #16]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d104      	bne.n	801563e <osThreadNew+0xca>
          mem = 0;
 8015634:	2300      	movs	r3, #0
 8015636:	61bb      	str	r3, [r7, #24]
 8015638:	e001      	b.n	801563e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801563a:	2300      	movs	r3, #0
 801563c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	2b01      	cmp	r3, #1
 8015642:	d110      	bne.n	8015666 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015648:	687a      	ldr	r2, [r7, #4]
 801564a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801564c:	9202      	str	r2, [sp, #8]
 801564e:	9301      	str	r3, [sp, #4]
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	9300      	str	r3, [sp, #0]
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	6a3a      	ldr	r2, [r7, #32]
 8015658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801565a:	68f8      	ldr	r0, [r7, #12]
 801565c:	f002 f980 	bl	8017960 <xTaskCreateStatic>
 8015660:	4603      	mov	r3, r0
 8015662:	613b      	str	r3, [r7, #16]
 8015664:	e013      	b.n	801568e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015666:	69bb      	ldr	r3, [r7, #24]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d110      	bne.n	801568e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801566c:	6a3b      	ldr	r3, [r7, #32]
 801566e:	b29a      	uxth	r2, r3
 8015670:	f107 0310 	add.w	r3, r7, #16
 8015674:	9301      	str	r3, [sp, #4]
 8015676:	69fb      	ldr	r3, [r7, #28]
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801567e:	68f8      	ldr	r0, [r7, #12]
 8015680:	f002 f9cb 	bl	8017a1a <xTaskCreate>
 8015684:	4603      	mov	r3, r0
 8015686:	2b01      	cmp	r3, #1
 8015688:	d001      	beq.n	801568e <osThreadNew+0x11a>
            hTask = NULL;
 801568a:	2300      	movs	r3, #0
 801568c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801568e:	693b      	ldr	r3, [r7, #16]
}
 8015690:	4618      	mov	r0, r3
 8015692:	3728      	adds	r7, #40	; 0x28
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015698:	b580      	push	{r7, lr}
 801569a:	b084      	sub	sp, #16
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156a0:	f3ef 8305 	mrs	r3, IPSR
 80156a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80156a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d003      	beq.n	80156b4 <osDelay+0x1c>
    stat = osErrorISR;
 80156ac:	f06f 0305 	mvn.w	r3, #5
 80156b0:	60fb      	str	r3, [r7, #12]
 80156b2:	e007      	b.n	80156c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80156b4:	2300      	movs	r3, #0
 80156b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d002      	beq.n	80156c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f002 faf2 	bl	8017ca8 <vTaskDelay>
    }
  }

  return (stat);
 80156c4:	68fb      	ldr	r3, [r7, #12]
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3710      	adds	r7, #16
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}

080156ce <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80156ce:	b580      	push	{r7, lr}
 80156d0:	b088      	sub	sp, #32
 80156d2:	af00      	add	r7, sp, #0
 80156d4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80156d6:	2300      	movs	r3, #0
 80156d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156da:	f3ef 8305 	mrs	r3, IPSR
 80156de:	60bb      	str	r3, [r7, #8]
  return(result);
 80156e0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d174      	bne.n	80157d0 <osMutexNew+0x102>
    if (attr != NULL) {
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d003      	beq.n	80156f4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	685b      	ldr	r3, [r3, #4]
 80156f0:	61bb      	str	r3, [r7, #24]
 80156f2:	e001      	b.n	80156f8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80156f4:	2300      	movs	r3, #0
 80156f6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80156f8:	69bb      	ldr	r3, [r7, #24]
 80156fa:	f003 0301 	and.w	r3, r3, #1
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d002      	beq.n	8015708 <osMutexNew+0x3a>
      rmtx = 1U;
 8015702:	2301      	movs	r3, #1
 8015704:	617b      	str	r3, [r7, #20]
 8015706:	e001      	b.n	801570c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8015708:	2300      	movs	r3, #0
 801570a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	f003 0308 	and.w	r3, r3, #8
 8015712:	2b00      	cmp	r3, #0
 8015714:	d15c      	bne.n	80157d0 <osMutexNew+0x102>
      mem = -1;
 8015716:	f04f 33ff 	mov.w	r3, #4294967295
 801571a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d015      	beq.n	801574e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	689b      	ldr	r3, [r3, #8]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d006      	beq.n	8015738 <osMutexNew+0x6a>
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	68db      	ldr	r3, [r3, #12]
 801572e:	2b4f      	cmp	r3, #79	; 0x4f
 8015730:	d902      	bls.n	8015738 <osMutexNew+0x6a>
          mem = 1;
 8015732:	2301      	movs	r3, #1
 8015734:	613b      	str	r3, [r7, #16]
 8015736:	e00c      	b.n	8015752 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	689b      	ldr	r3, [r3, #8]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d108      	bne.n	8015752 <osMutexNew+0x84>
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	68db      	ldr	r3, [r3, #12]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d104      	bne.n	8015752 <osMutexNew+0x84>
            mem = 0;
 8015748:	2300      	movs	r3, #0
 801574a:	613b      	str	r3, [r7, #16]
 801574c:	e001      	b.n	8015752 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 801574e:	2300      	movs	r3, #0
 8015750:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	2b01      	cmp	r3, #1
 8015756:	d112      	bne.n	801577e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d007      	beq.n	801576e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	689b      	ldr	r3, [r3, #8]
 8015762:	4619      	mov	r1, r3
 8015764:	2004      	movs	r0, #4
 8015766:	f001 f9a6 	bl	8016ab6 <xQueueCreateMutexStatic>
 801576a:	61f8      	str	r0, [r7, #28]
 801576c:	e016      	b.n	801579c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	689b      	ldr	r3, [r3, #8]
 8015772:	4619      	mov	r1, r3
 8015774:	2001      	movs	r0, #1
 8015776:	f001 f99e 	bl	8016ab6 <xQueueCreateMutexStatic>
 801577a:	61f8      	str	r0, [r7, #28]
 801577c:	e00e      	b.n	801579c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d10b      	bne.n	801579c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d004      	beq.n	8015794 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801578a:	2004      	movs	r0, #4
 801578c:	f001 f97b 	bl	8016a86 <xQueueCreateMutex>
 8015790:	61f8      	str	r0, [r7, #28]
 8015792:	e003      	b.n	801579c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8015794:	2001      	movs	r0, #1
 8015796:	f001 f976 	bl	8016a86 <xQueueCreateMutex>
 801579a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801579c:	69fb      	ldr	r3, [r7, #28]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d00c      	beq.n	80157bc <osMutexNew+0xee>
        if (attr != NULL) {
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d003      	beq.n	80157b0 <osMutexNew+0xe2>
          name = attr->name;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	60fb      	str	r3, [r7, #12]
 80157ae:	e001      	b.n	80157b4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80157b0:	2300      	movs	r3, #0
 80157b2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80157b4:	68f9      	ldr	r1, [r7, #12]
 80157b6:	69f8      	ldr	r0, [r7, #28]
 80157b8:	f002 f84a 	bl	8017850 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80157bc:	69fb      	ldr	r3, [r7, #28]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d006      	beq.n	80157d0 <osMutexNew+0x102>
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d003      	beq.n	80157d0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80157c8:	69fb      	ldr	r3, [r7, #28]
 80157ca:	f043 0301 	orr.w	r3, r3, #1
 80157ce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80157d0:	69fb      	ldr	r3, [r7, #28]
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	3720      	adds	r7, #32
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}

080157da <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80157da:	b580      	push	{r7, lr}
 80157dc:	b086      	sub	sp, #24
 80157de:	af00      	add	r7, sp, #0
 80157e0:	6078      	str	r0, [r7, #4]
 80157e2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f023 0301 	bic.w	r3, r3, #1
 80157ea:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f003 0301 	and.w	r3, r3, #1
 80157f2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80157f4:	2300      	movs	r3, #0
 80157f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80157f8:	f3ef 8305 	mrs	r3, IPSR
 80157fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80157fe:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015800:	2b00      	cmp	r3, #0
 8015802:	d003      	beq.n	801580c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8015804:	f06f 0305 	mvn.w	r3, #5
 8015808:	617b      	str	r3, [r7, #20]
 801580a:	e02c      	b.n	8015866 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d103      	bne.n	801581a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8015812:	f06f 0303 	mvn.w	r3, #3
 8015816:	617b      	str	r3, [r7, #20]
 8015818:	e025      	b.n	8015866 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d011      	beq.n	8015844 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8015820:	6839      	ldr	r1, [r7, #0]
 8015822:	6938      	ldr	r0, [r7, #16]
 8015824:	f001 f996 	bl	8016b54 <xQueueTakeMutexRecursive>
 8015828:	4603      	mov	r3, r0
 801582a:	2b01      	cmp	r3, #1
 801582c:	d01b      	beq.n	8015866 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d003      	beq.n	801583c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8015834:	f06f 0301 	mvn.w	r3, #1
 8015838:	617b      	str	r3, [r7, #20]
 801583a:	e014      	b.n	8015866 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801583c:	f06f 0302 	mvn.w	r3, #2
 8015840:	617b      	str	r3, [r7, #20]
 8015842:	e010      	b.n	8015866 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8015844:	6839      	ldr	r1, [r7, #0]
 8015846:	6938      	ldr	r0, [r7, #16]
 8015848:	f001 fd2a 	bl	80172a0 <xQueueSemaphoreTake>
 801584c:	4603      	mov	r3, r0
 801584e:	2b01      	cmp	r3, #1
 8015850:	d009      	beq.n	8015866 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d003      	beq.n	8015860 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8015858:	f06f 0301 	mvn.w	r3, #1
 801585c:	617b      	str	r3, [r7, #20]
 801585e:	e002      	b.n	8015866 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015860:	f06f 0302 	mvn.w	r3, #2
 8015864:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8015866:	697b      	ldr	r3, [r7, #20]
}
 8015868:	4618      	mov	r0, r3
 801586a:	3718      	adds	r7, #24
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}

08015870 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8015870:	b580      	push	{r7, lr}
 8015872:	b086      	sub	sp, #24
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f023 0301 	bic.w	r3, r3, #1
 801587e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f003 0301 	and.w	r3, r3, #1
 8015886:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015888:	2300      	movs	r3, #0
 801588a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801588c:	f3ef 8305 	mrs	r3, IPSR
 8015890:	60bb      	str	r3, [r7, #8]
  return(result);
 8015892:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015894:	2b00      	cmp	r3, #0
 8015896:	d003      	beq.n	80158a0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8015898:	f06f 0305 	mvn.w	r3, #5
 801589c:	617b      	str	r3, [r7, #20]
 801589e:	e01f      	b.n	80158e0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80158a0:	693b      	ldr	r3, [r7, #16]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d103      	bne.n	80158ae <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80158a6:	f06f 0303 	mvn.w	r3, #3
 80158aa:	617b      	str	r3, [r7, #20]
 80158ac:	e018      	b.n	80158e0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d009      	beq.n	80158c8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80158b4:	6938      	ldr	r0, [r7, #16]
 80158b6:	f001 f919 	bl	8016aec <xQueueGiveMutexRecursive>
 80158ba:	4603      	mov	r3, r0
 80158bc:	2b01      	cmp	r3, #1
 80158be:	d00f      	beq.n	80158e0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80158c0:	f06f 0302 	mvn.w	r3, #2
 80158c4:	617b      	str	r3, [r7, #20]
 80158c6:	e00b      	b.n	80158e0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80158c8:	2300      	movs	r3, #0
 80158ca:	2200      	movs	r2, #0
 80158cc:	2100      	movs	r1, #0
 80158ce:	6938      	ldr	r0, [r7, #16]
 80158d0:	f001 f9e0 	bl	8016c94 <xQueueGenericSend>
 80158d4:	4603      	mov	r3, r0
 80158d6:	2b01      	cmp	r3, #1
 80158d8:	d002      	beq.n	80158e0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80158da:	f06f 0302 	mvn.w	r3, #2
 80158de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80158e0:	697b      	ldr	r3, [r7, #20]
}
 80158e2:	4618      	mov	r0, r3
 80158e4:	3718      	adds	r7, #24
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}

080158ea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80158ea:	b580      	push	{r7, lr}
 80158ec:	b08a      	sub	sp, #40	; 0x28
 80158ee:	af02      	add	r7, sp, #8
 80158f0:	60f8      	str	r0, [r7, #12]
 80158f2:	60b9      	str	r1, [r7, #8]
 80158f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80158f6:	2300      	movs	r3, #0
 80158f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80158fa:	f3ef 8305 	mrs	r3, IPSR
 80158fe:	613b      	str	r3, [r7, #16]
  return(result);
 8015900:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015902:	2b00      	cmp	r3, #0
 8015904:	d175      	bne.n	80159f2 <osSemaphoreNew+0x108>
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d072      	beq.n	80159f2 <osSemaphoreNew+0x108>
 801590c:	68ba      	ldr	r2, [r7, #8]
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	429a      	cmp	r2, r3
 8015912:	d86e      	bhi.n	80159f2 <osSemaphoreNew+0x108>
    mem = -1;
 8015914:	f04f 33ff 	mov.w	r3, #4294967295
 8015918:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d015      	beq.n	801594c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	689b      	ldr	r3, [r3, #8]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d006      	beq.n	8015936 <osSemaphoreNew+0x4c>
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	2b4f      	cmp	r3, #79	; 0x4f
 801592e:	d902      	bls.n	8015936 <osSemaphoreNew+0x4c>
        mem = 1;
 8015930:	2301      	movs	r3, #1
 8015932:	61bb      	str	r3, [r7, #24]
 8015934:	e00c      	b.n	8015950 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	689b      	ldr	r3, [r3, #8]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d108      	bne.n	8015950 <osSemaphoreNew+0x66>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	68db      	ldr	r3, [r3, #12]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d104      	bne.n	8015950 <osSemaphoreNew+0x66>
          mem = 0;
 8015946:	2300      	movs	r3, #0
 8015948:	61bb      	str	r3, [r7, #24]
 801594a:	e001      	b.n	8015950 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801594c:	2300      	movs	r3, #0
 801594e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015950:	69bb      	ldr	r3, [r7, #24]
 8015952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015956:	d04c      	beq.n	80159f2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	2b01      	cmp	r3, #1
 801595c:	d128      	bne.n	80159b0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	2b01      	cmp	r3, #1
 8015962:	d10a      	bne.n	801597a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	689b      	ldr	r3, [r3, #8]
 8015968:	2203      	movs	r2, #3
 801596a:	9200      	str	r2, [sp, #0]
 801596c:	2200      	movs	r2, #0
 801596e:	2100      	movs	r1, #0
 8015970:	2001      	movs	r0, #1
 8015972:	f000 ff99 	bl	80168a8 <xQueueGenericCreateStatic>
 8015976:	61f8      	str	r0, [r7, #28]
 8015978:	e005      	b.n	8015986 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801597a:	2203      	movs	r2, #3
 801597c:	2100      	movs	r1, #0
 801597e:	2001      	movs	r0, #1
 8015980:	f001 f80a 	bl	8016998 <xQueueGenericCreate>
 8015984:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015986:	69fb      	ldr	r3, [r7, #28]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d022      	beq.n	80159d2 <osSemaphoreNew+0xe8>
 801598c:	68bb      	ldr	r3, [r7, #8]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d01f      	beq.n	80159d2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015992:	2300      	movs	r3, #0
 8015994:	2200      	movs	r2, #0
 8015996:	2100      	movs	r1, #0
 8015998:	69f8      	ldr	r0, [r7, #28]
 801599a:	f001 f97b 	bl	8016c94 <xQueueGenericSend>
 801599e:	4603      	mov	r3, r0
 80159a0:	2b01      	cmp	r3, #1
 80159a2:	d016      	beq.n	80159d2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80159a4:	69f8      	ldr	r0, [r7, #28]
 80159a6:	f001 fe07 	bl	80175b8 <vQueueDelete>
            hSemaphore = NULL;
 80159aa:	2300      	movs	r3, #0
 80159ac:	61fb      	str	r3, [r7, #28]
 80159ae:	e010      	b.n	80159d2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80159b0:	69bb      	ldr	r3, [r7, #24]
 80159b2:	2b01      	cmp	r3, #1
 80159b4:	d108      	bne.n	80159c8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	689b      	ldr	r3, [r3, #8]
 80159ba:	461a      	mov	r2, r3
 80159bc:	68b9      	ldr	r1, [r7, #8]
 80159be:	68f8      	ldr	r0, [r7, #12]
 80159c0:	f001 f8fe 	bl	8016bc0 <xQueueCreateCountingSemaphoreStatic>
 80159c4:	61f8      	str	r0, [r7, #28]
 80159c6:	e004      	b.n	80159d2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80159c8:	68b9      	ldr	r1, [r7, #8]
 80159ca:	68f8      	ldr	r0, [r7, #12]
 80159cc:	f001 f92f 	bl	8016c2e <xQueueCreateCountingSemaphore>
 80159d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80159d2:	69fb      	ldr	r3, [r7, #28]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d00c      	beq.n	80159f2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d003      	beq.n	80159e6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	617b      	str	r3, [r7, #20]
 80159e4:	e001      	b.n	80159ea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80159e6:	2300      	movs	r3, #0
 80159e8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80159ea:	6979      	ldr	r1, [r7, #20]
 80159ec:	69f8      	ldr	r0, [r7, #28]
 80159ee:	f001 ff2f 	bl	8017850 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80159f2:	69fb      	ldr	r3, [r7, #28]
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	3720      	adds	r7, #32
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}

080159fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b086      	sub	sp, #24
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d103      	bne.n	8015a1c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015a14:	f06f 0303 	mvn.w	r3, #3
 8015a18:	617b      	str	r3, [r7, #20]
 8015a1a:	e039      	b.n	8015a90 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a1c:	f3ef 8305 	mrs	r3, IPSR
 8015a20:	60fb      	str	r3, [r7, #12]
  return(result);
 8015a22:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d022      	beq.n	8015a6e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d003      	beq.n	8015a36 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8015a2e:	f06f 0303 	mvn.w	r3, #3
 8015a32:	617b      	str	r3, [r7, #20]
 8015a34:	e02c      	b.n	8015a90 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015a36:	2300      	movs	r3, #0
 8015a38:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015a3a:	f107 0308 	add.w	r3, r7, #8
 8015a3e:	461a      	mov	r2, r3
 8015a40:	2100      	movs	r1, #0
 8015a42:	6938      	ldr	r0, [r7, #16]
 8015a44:	f001 fd38 	bl	80174b8 <xQueueReceiveFromISR>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	2b01      	cmp	r3, #1
 8015a4c:	d003      	beq.n	8015a56 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8015a4e:	f06f 0302 	mvn.w	r3, #2
 8015a52:	617b      	str	r3, [r7, #20]
 8015a54:	e01c      	b.n	8015a90 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d019      	beq.n	8015a90 <osSemaphoreAcquire+0x94>
 8015a5c:	4b0f      	ldr	r3, [pc, #60]	; (8015a9c <osSemaphoreAcquire+0xa0>)
 8015a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a62:	601a      	str	r2, [r3, #0]
 8015a64:	f3bf 8f4f 	dsb	sy
 8015a68:	f3bf 8f6f 	isb	sy
 8015a6c:	e010      	b.n	8015a90 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015a6e:	6839      	ldr	r1, [r7, #0]
 8015a70:	6938      	ldr	r0, [r7, #16]
 8015a72:	f001 fc15 	bl	80172a0 <xQueueSemaphoreTake>
 8015a76:	4603      	mov	r3, r0
 8015a78:	2b01      	cmp	r3, #1
 8015a7a:	d009      	beq.n	8015a90 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d003      	beq.n	8015a8a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015a82:	f06f 0301 	mvn.w	r3, #1
 8015a86:	617b      	str	r3, [r7, #20]
 8015a88:	e002      	b.n	8015a90 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015a8a:	f06f 0302 	mvn.w	r3, #2
 8015a8e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015a90:	697b      	ldr	r3, [r7, #20]
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	3718      	adds	r7, #24
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}
 8015a9a:	bf00      	nop
 8015a9c:	e000ed04 	.word	0xe000ed04

08015aa0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015aac:	2300      	movs	r3, #0
 8015aae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d103      	bne.n	8015abe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015ab6:	f06f 0303 	mvn.w	r3, #3
 8015aba:	617b      	str	r3, [r7, #20]
 8015abc:	e02c      	b.n	8015b18 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015abe:	f3ef 8305 	mrs	r3, IPSR
 8015ac2:	60fb      	str	r3, [r7, #12]
  return(result);
 8015ac4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d01a      	beq.n	8015b00 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015aca:	2300      	movs	r3, #0
 8015acc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015ace:	f107 0308 	add.w	r3, r7, #8
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	6938      	ldr	r0, [r7, #16]
 8015ad6:	f001 fa76 	bl	8016fc6 <xQueueGiveFromISR>
 8015ada:	4603      	mov	r3, r0
 8015adc:	2b01      	cmp	r3, #1
 8015ade:	d003      	beq.n	8015ae8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015ae0:	f06f 0302 	mvn.w	r3, #2
 8015ae4:	617b      	str	r3, [r7, #20]
 8015ae6:	e017      	b.n	8015b18 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d014      	beq.n	8015b18 <osSemaphoreRelease+0x78>
 8015aee:	4b0d      	ldr	r3, [pc, #52]	; (8015b24 <osSemaphoreRelease+0x84>)
 8015af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015af4:	601a      	str	r2, [r3, #0]
 8015af6:	f3bf 8f4f 	dsb	sy
 8015afa:	f3bf 8f6f 	isb	sy
 8015afe:	e00b      	b.n	8015b18 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015b00:	2300      	movs	r3, #0
 8015b02:	2200      	movs	r2, #0
 8015b04:	2100      	movs	r1, #0
 8015b06:	6938      	ldr	r0, [r7, #16]
 8015b08:	f001 f8c4 	bl	8016c94 <xQueueGenericSend>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	2b01      	cmp	r3, #1
 8015b10:	d002      	beq.n	8015b18 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015b12:	f06f 0302 	mvn.w	r3, #2
 8015b16:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015b18:	697b      	ldr	r3, [r7, #20]
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	3718      	adds	r7, #24
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}
 8015b22:	bf00      	nop
 8015b24:	e000ed04 	.word	0xe000ed04

08015b28 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b08a      	sub	sp, #40	; 0x28
 8015b2c:	af02      	add	r7, sp, #8
 8015b2e:	60f8      	str	r0, [r7, #12]
 8015b30:	60b9      	str	r1, [r7, #8]
 8015b32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015b34:	2300      	movs	r3, #0
 8015b36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b38:	f3ef 8305 	mrs	r3, IPSR
 8015b3c:	613b      	str	r3, [r7, #16]
  return(result);
 8015b3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d15f      	bne.n	8015c04 <osMessageQueueNew+0xdc>
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d05c      	beq.n	8015c04 <osMessageQueueNew+0xdc>
 8015b4a:	68bb      	ldr	r3, [r7, #8]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d059      	beq.n	8015c04 <osMessageQueueNew+0xdc>
    mem = -1;
 8015b50:	f04f 33ff 	mov.w	r3, #4294967295
 8015b54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d029      	beq.n	8015bb0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	689b      	ldr	r3, [r3, #8]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d012      	beq.n	8015b8a <osMessageQueueNew+0x62>
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	68db      	ldr	r3, [r3, #12]
 8015b68:	2b4f      	cmp	r3, #79	; 0x4f
 8015b6a:	d90e      	bls.n	8015b8a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d00a      	beq.n	8015b8a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	695a      	ldr	r2, [r3, #20]
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	68b9      	ldr	r1, [r7, #8]
 8015b7c:	fb01 f303 	mul.w	r3, r1, r3
 8015b80:	429a      	cmp	r2, r3
 8015b82:	d302      	bcc.n	8015b8a <osMessageQueueNew+0x62>
        mem = 1;
 8015b84:	2301      	movs	r3, #1
 8015b86:	61bb      	str	r3, [r7, #24]
 8015b88:	e014      	b.n	8015bb4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	689b      	ldr	r3, [r3, #8]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d110      	bne.n	8015bb4 <osMessageQueueNew+0x8c>
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	68db      	ldr	r3, [r3, #12]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d10c      	bne.n	8015bb4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d108      	bne.n	8015bb4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	695b      	ldr	r3, [r3, #20]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d104      	bne.n	8015bb4 <osMessageQueueNew+0x8c>
          mem = 0;
 8015baa:	2300      	movs	r3, #0
 8015bac:	61bb      	str	r3, [r7, #24]
 8015bae:	e001      	b.n	8015bb4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015bb4:	69bb      	ldr	r3, [r7, #24]
 8015bb6:	2b01      	cmp	r3, #1
 8015bb8:	d10b      	bne.n	8015bd2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	691a      	ldr	r2, [r3, #16]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	689b      	ldr	r3, [r3, #8]
 8015bc2:	2100      	movs	r1, #0
 8015bc4:	9100      	str	r1, [sp, #0]
 8015bc6:	68b9      	ldr	r1, [r7, #8]
 8015bc8:	68f8      	ldr	r0, [r7, #12]
 8015bca:	f000 fe6d 	bl	80168a8 <xQueueGenericCreateStatic>
 8015bce:	61f8      	str	r0, [r7, #28]
 8015bd0:	e008      	b.n	8015be4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8015bd2:	69bb      	ldr	r3, [r7, #24]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d105      	bne.n	8015be4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8015bd8:	2200      	movs	r2, #0
 8015bda:	68b9      	ldr	r1, [r7, #8]
 8015bdc:	68f8      	ldr	r0, [r7, #12]
 8015bde:	f000 fedb 	bl	8016998 <xQueueGenericCreate>
 8015be2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015be4:	69fb      	ldr	r3, [r7, #28]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d00c      	beq.n	8015c04 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d003      	beq.n	8015bf8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	617b      	str	r3, [r7, #20]
 8015bf6:	e001      	b.n	8015bfc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8015bfc:	6979      	ldr	r1, [r7, #20]
 8015bfe:	69f8      	ldr	r0, [r7, #28]
 8015c00:	f001 fe26 	bl	8017850 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015c04:	69fb      	ldr	r3, [r7, #28]
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	3720      	adds	r7, #32
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}
	...

08015c10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b088      	sub	sp, #32
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	60f8      	str	r0, [r7, #12]
 8015c18:	60b9      	str	r1, [r7, #8]
 8015c1a:	603b      	str	r3, [r7, #0]
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015c24:	2300      	movs	r3, #0
 8015c26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c28:	f3ef 8305 	mrs	r3, IPSR
 8015c2c:	617b      	str	r3, [r7, #20]
  return(result);
 8015c2e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d028      	beq.n	8015c86 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015c34:	69bb      	ldr	r3, [r7, #24]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d005      	beq.n	8015c46 <osMessageQueuePut+0x36>
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d002      	beq.n	8015c46 <osMessageQueuePut+0x36>
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d003      	beq.n	8015c4e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8015c46:	f06f 0303 	mvn.w	r3, #3
 8015c4a:	61fb      	str	r3, [r7, #28]
 8015c4c:	e038      	b.n	8015cc0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8015c52:	f107 0210 	add.w	r2, r7, #16
 8015c56:	2300      	movs	r3, #0
 8015c58:	68b9      	ldr	r1, [r7, #8]
 8015c5a:	69b8      	ldr	r0, [r7, #24]
 8015c5c:	f001 f918 	bl	8016e90 <xQueueGenericSendFromISR>
 8015c60:	4603      	mov	r3, r0
 8015c62:	2b01      	cmp	r3, #1
 8015c64:	d003      	beq.n	8015c6e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8015c66:	f06f 0302 	mvn.w	r3, #2
 8015c6a:	61fb      	str	r3, [r7, #28]
 8015c6c:	e028      	b.n	8015cc0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d025      	beq.n	8015cc0 <osMessageQueuePut+0xb0>
 8015c74:	4b15      	ldr	r3, [pc, #84]	; (8015ccc <osMessageQueuePut+0xbc>)
 8015c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c7a:	601a      	str	r2, [r3, #0]
 8015c7c:	f3bf 8f4f 	dsb	sy
 8015c80:	f3bf 8f6f 	isb	sy
 8015c84:	e01c      	b.n	8015cc0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015c86:	69bb      	ldr	r3, [r7, #24]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d002      	beq.n	8015c92 <osMessageQueuePut+0x82>
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d103      	bne.n	8015c9a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8015c92:	f06f 0303 	mvn.w	r3, #3
 8015c96:	61fb      	str	r3, [r7, #28]
 8015c98:	e012      	b.n	8015cc0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	683a      	ldr	r2, [r7, #0]
 8015c9e:	68b9      	ldr	r1, [r7, #8]
 8015ca0:	69b8      	ldr	r0, [r7, #24]
 8015ca2:	f000 fff7 	bl	8016c94 <xQueueGenericSend>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	2b01      	cmp	r3, #1
 8015caa:	d009      	beq.n	8015cc0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d003      	beq.n	8015cba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8015cb2:	f06f 0301 	mvn.w	r3, #1
 8015cb6:	61fb      	str	r3, [r7, #28]
 8015cb8:	e002      	b.n	8015cc0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8015cba:	f06f 0302 	mvn.w	r3, #2
 8015cbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015cc0:	69fb      	ldr	r3, [r7, #28]
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3720      	adds	r7, #32
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bd80      	pop	{r7, pc}
 8015cca:	bf00      	nop
 8015ccc:	e000ed04 	.word	0xe000ed04

08015cd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b088      	sub	sp, #32
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	60f8      	str	r0, [r7, #12]
 8015cd8:	60b9      	str	r1, [r7, #8]
 8015cda:	607a      	str	r2, [r7, #4]
 8015cdc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ce6:	f3ef 8305 	mrs	r3, IPSR
 8015cea:	617b      	str	r3, [r7, #20]
  return(result);
 8015cec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d028      	beq.n	8015d44 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015cf2:	69bb      	ldr	r3, [r7, #24]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d005      	beq.n	8015d04 <osMessageQueueGet+0x34>
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d002      	beq.n	8015d04 <osMessageQueueGet+0x34>
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d003      	beq.n	8015d0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8015d04:	f06f 0303 	mvn.w	r3, #3
 8015d08:	61fb      	str	r3, [r7, #28]
 8015d0a:	e037      	b.n	8015d7c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8015d10:	f107 0310 	add.w	r3, r7, #16
 8015d14:	461a      	mov	r2, r3
 8015d16:	68b9      	ldr	r1, [r7, #8]
 8015d18:	69b8      	ldr	r0, [r7, #24]
 8015d1a:	f001 fbcd 	bl	80174b8 <xQueueReceiveFromISR>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	2b01      	cmp	r3, #1
 8015d22:	d003      	beq.n	8015d2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8015d24:	f06f 0302 	mvn.w	r3, #2
 8015d28:	61fb      	str	r3, [r7, #28]
 8015d2a:	e027      	b.n	8015d7c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8015d2c:	693b      	ldr	r3, [r7, #16]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d024      	beq.n	8015d7c <osMessageQueueGet+0xac>
 8015d32:	4b15      	ldr	r3, [pc, #84]	; (8015d88 <osMessageQueueGet+0xb8>)
 8015d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d38:	601a      	str	r2, [r3, #0]
 8015d3a:	f3bf 8f4f 	dsb	sy
 8015d3e:	f3bf 8f6f 	isb	sy
 8015d42:	e01b      	b.n	8015d7c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015d44:	69bb      	ldr	r3, [r7, #24]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d002      	beq.n	8015d50 <osMessageQueueGet+0x80>
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d103      	bne.n	8015d58 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8015d50:	f06f 0303 	mvn.w	r3, #3
 8015d54:	61fb      	str	r3, [r7, #28]
 8015d56:	e011      	b.n	8015d7c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015d58:	683a      	ldr	r2, [r7, #0]
 8015d5a:	68b9      	ldr	r1, [r7, #8]
 8015d5c:	69b8      	ldr	r0, [r7, #24]
 8015d5e:	f001 f9bf 	bl	80170e0 <xQueueReceive>
 8015d62:	4603      	mov	r3, r0
 8015d64:	2b01      	cmp	r3, #1
 8015d66:	d009      	beq.n	8015d7c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d003      	beq.n	8015d76 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8015d6e:	f06f 0301 	mvn.w	r3, #1
 8015d72:	61fb      	str	r3, [r7, #28]
 8015d74:	e002      	b.n	8015d7c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8015d76:	f06f 0302 	mvn.w	r3, #2
 8015d7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015d7c:	69fb      	ldr	r3, [r7, #28]
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3720      	adds	r7, #32
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	e000ed04 	.word	0xe000ed04

08015d8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015d8c:	b480      	push	{r7}
 8015d8e:	b085      	sub	sp, #20
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	60f8      	str	r0, [r7, #12]
 8015d94:	60b9      	str	r1, [r7, #8]
 8015d96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	4a07      	ldr	r2, [pc, #28]	; (8015db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8015d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	4a06      	ldr	r2, [pc, #24]	; (8015dbc <vApplicationGetIdleTaskMemory+0x30>)
 8015da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2280      	movs	r2, #128	; 0x80
 8015da8:	601a      	str	r2, [r3, #0]
}
 8015daa:	bf00      	nop
 8015dac:	3714      	adds	r7, #20
 8015dae:	46bd      	mov	sp, r7
 8015db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db4:	4770      	bx	lr
 8015db6:	bf00      	nop
 8015db8:	2400be4c 	.word	0x2400be4c
 8015dbc:	2400beac 	.word	0x2400beac

08015dc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015dc0:	b480      	push	{r7}
 8015dc2:	b085      	sub	sp, #20
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	60f8      	str	r0, [r7, #12]
 8015dc8:	60b9      	str	r1, [r7, #8]
 8015dca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	4a07      	ldr	r2, [pc, #28]	; (8015dec <vApplicationGetTimerTaskMemory+0x2c>)
 8015dd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	4a06      	ldr	r2, [pc, #24]	; (8015df0 <vApplicationGetTimerTaskMemory+0x30>)
 8015dd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015dde:	601a      	str	r2, [r3, #0]
}
 8015de0:	bf00      	nop
 8015de2:	3714      	adds	r7, #20
 8015de4:	46bd      	mov	sp, r7
 8015de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dea:	4770      	bx	lr
 8015dec:	2400c0ac 	.word	0x2400c0ac
 8015df0:	2400c10c 	.word	0x2400c10c

08015df4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b08a      	sub	sp, #40	; 0x28
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015e00:	f001 fff4 	bl	8017dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015e04:	4b5b      	ldr	r3, [pc, #364]	; (8015f74 <pvPortMalloc+0x180>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d101      	bne.n	8015e10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015e0c:	f000 f920 	bl	8016050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015e10:	4b59      	ldr	r3, [pc, #356]	; (8015f78 <pvPortMalloc+0x184>)
 8015e12:	681a      	ldr	r2, [r3, #0]
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	4013      	ands	r3, r2
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	f040 8093 	bne.w	8015f44 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d01d      	beq.n	8015e60 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015e24:	2208      	movs	r2, #8
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	4413      	add	r3, r2
 8015e2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f003 0307 	and.w	r3, r3, #7
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d014      	beq.n	8015e60 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f023 0307 	bic.w	r3, r3, #7
 8015e3c:	3308      	adds	r3, #8
 8015e3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f003 0307 	and.w	r3, r3, #7
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d00a      	beq.n	8015e60 <pvPortMalloc+0x6c>
	__asm volatile
 8015e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e4e:	f383 8811 	msr	BASEPRI, r3
 8015e52:	f3bf 8f6f 	isb	sy
 8015e56:	f3bf 8f4f 	dsb	sy
 8015e5a:	617b      	str	r3, [r7, #20]
}
 8015e5c:	bf00      	nop
 8015e5e:	e7fe      	b.n	8015e5e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d06e      	beq.n	8015f44 <pvPortMalloc+0x150>
 8015e66:	4b45      	ldr	r3, [pc, #276]	; (8015f7c <pvPortMalloc+0x188>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	687a      	ldr	r2, [r7, #4]
 8015e6c:	429a      	cmp	r2, r3
 8015e6e:	d869      	bhi.n	8015f44 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015e70:	4b43      	ldr	r3, [pc, #268]	; (8015f80 <pvPortMalloc+0x18c>)
 8015e72:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015e74:	4b42      	ldr	r3, [pc, #264]	; (8015f80 <pvPortMalloc+0x18c>)
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e7a:	e004      	b.n	8015e86 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e7e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d903      	bls.n	8015e98 <pvPortMalloc+0xa4>
 8015e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d1f1      	bne.n	8015e7c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015e98:	4b36      	ldr	r3, [pc, #216]	; (8015f74 <pvPortMalloc+0x180>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	d050      	beq.n	8015f44 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015ea2:	6a3b      	ldr	r3, [r7, #32]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	2208      	movs	r2, #8
 8015ea8:	4413      	add	r3, r2
 8015eaa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eae:	681a      	ldr	r2, [r3, #0]
 8015eb0:	6a3b      	ldr	r3, [r7, #32]
 8015eb2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb6:	685a      	ldr	r2, [r3, #4]
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	1ad2      	subs	r2, r2, r3
 8015ebc:	2308      	movs	r3, #8
 8015ebe:	005b      	lsls	r3, r3, #1
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	d91f      	bls.n	8015f04 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	4413      	add	r3, r2
 8015eca:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ecc:	69bb      	ldr	r3, [r7, #24]
 8015ece:	f003 0307 	and.w	r3, r3, #7
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d00a      	beq.n	8015eec <pvPortMalloc+0xf8>
	__asm volatile
 8015ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eda:	f383 8811 	msr	BASEPRI, r3
 8015ede:	f3bf 8f6f 	isb	sy
 8015ee2:	f3bf 8f4f 	dsb	sy
 8015ee6:	613b      	str	r3, [r7, #16]
}
 8015ee8:	bf00      	nop
 8015eea:	e7fe      	b.n	8015eea <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eee:	685a      	ldr	r2, [r3, #4]
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	1ad2      	subs	r2, r2, r3
 8015ef4:	69bb      	ldr	r3, [r7, #24]
 8015ef6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015efe:	69b8      	ldr	r0, [r7, #24]
 8015f00:	f000 f90a 	bl	8016118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015f04:	4b1d      	ldr	r3, [pc, #116]	; (8015f7c <pvPortMalloc+0x188>)
 8015f06:	681a      	ldr	r2, [r3, #0]
 8015f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0a:	685b      	ldr	r3, [r3, #4]
 8015f0c:	1ad3      	subs	r3, r2, r3
 8015f0e:	4a1b      	ldr	r2, [pc, #108]	; (8015f7c <pvPortMalloc+0x188>)
 8015f10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015f12:	4b1a      	ldr	r3, [pc, #104]	; (8015f7c <pvPortMalloc+0x188>)
 8015f14:	681a      	ldr	r2, [r3, #0]
 8015f16:	4b1b      	ldr	r3, [pc, #108]	; (8015f84 <pvPortMalloc+0x190>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	d203      	bcs.n	8015f26 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015f1e:	4b17      	ldr	r3, [pc, #92]	; (8015f7c <pvPortMalloc+0x188>)
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	4a18      	ldr	r2, [pc, #96]	; (8015f84 <pvPortMalloc+0x190>)
 8015f24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f28:	685a      	ldr	r2, [r3, #4]
 8015f2a:	4b13      	ldr	r3, [pc, #76]	; (8015f78 <pvPortMalloc+0x184>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	431a      	orrs	r2, r3
 8015f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f36:	2200      	movs	r2, #0
 8015f38:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015f3a:	4b13      	ldr	r3, [pc, #76]	; (8015f88 <pvPortMalloc+0x194>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	3301      	adds	r3, #1
 8015f40:	4a11      	ldr	r2, [pc, #68]	; (8015f88 <pvPortMalloc+0x194>)
 8015f42:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015f44:	f001 ff60 	bl	8017e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f48:	69fb      	ldr	r3, [r7, #28]
 8015f4a:	f003 0307 	and.w	r3, r3, #7
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d00a      	beq.n	8015f68 <pvPortMalloc+0x174>
	__asm volatile
 8015f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f56:	f383 8811 	msr	BASEPRI, r3
 8015f5a:	f3bf 8f6f 	isb	sy
 8015f5e:	f3bf 8f4f 	dsb	sy
 8015f62:	60fb      	str	r3, [r7, #12]
}
 8015f64:	bf00      	nop
 8015f66:	e7fe      	b.n	8015f66 <pvPortMalloc+0x172>
	return pvReturn;
 8015f68:	69fb      	ldr	r3, [r7, #28]
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	3728      	adds	r7, #40	; 0x28
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
 8015f72:	bf00      	nop
 8015f74:	24024bb4 	.word	0x24024bb4
 8015f78:	24024bc8 	.word	0x24024bc8
 8015f7c:	24024bb8 	.word	0x24024bb8
 8015f80:	24024bac 	.word	0x24024bac
 8015f84:	24024bbc 	.word	0x24024bbc
 8015f88:	24024bc0 	.word	0x24024bc0

08015f8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b086      	sub	sp, #24
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d04d      	beq.n	801603a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015f9e:	2308      	movs	r3, #8
 8015fa0:	425b      	negs	r3, r3
 8015fa2:	697a      	ldr	r2, [r7, #20]
 8015fa4:	4413      	add	r3, r2
 8015fa6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	685a      	ldr	r2, [r3, #4]
 8015fb0:	4b24      	ldr	r3, [pc, #144]	; (8016044 <vPortFree+0xb8>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	4013      	ands	r3, r2
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d10a      	bne.n	8015fd0 <vPortFree+0x44>
	__asm volatile
 8015fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fbe:	f383 8811 	msr	BASEPRI, r3
 8015fc2:	f3bf 8f6f 	isb	sy
 8015fc6:	f3bf 8f4f 	dsb	sy
 8015fca:	60fb      	str	r3, [r7, #12]
}
 8015fcc:	bf00      	nop
 8015fce:	e7fe      	b.n	8015fce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d00a      	beq.n	8015fee <vPortFree+0x62>
	__asm volatile
 8015fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fdc:	f383 8811 	msr	BASEPRI, r3
 8015fe0:	f3bf 8f6f 	isb	sy
 8015fe4:	f3bf 8f4f 	dsb	sy
 8015fe8:	60bb      	str	r3, [r7, #8]
}
 8015fea:	bf00      	nop
 8015fec:	e7fe      	b.n	8015fec <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015fee:	693b      	ldr	r3, [r7, #16]
 8015ff0:	685a      	ldr	r2, [r3, #4]
 8015ff2:	4b14      	ldr	r3, [pc, #80]	; (8016044 <vPortFree+0xb8>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	4013      	ands	r3, r2
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d01e      	beq.n	801603a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d11a      	bne.n	801603a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016004:	693b      	ldr	r3, [r7, #16]
 8016006:	685a      	ldr	r2, [r3, #4]
 8016008:	4b0e      	ldr	r3, [pc, #56]	; (8016044 <vPortFree+0xb8>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	43db      	mvns	r3, r3
 801600e:	401a      	ands	r2, r3
 8016010:	693b      	ldr	r3, [r7, #16]
 8016012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016014:	f001 feea 	bl	8017dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	685a      	ldr	r2, [r3, #4]
 801601c:	4b0a      	ldr	r3, [pc, #40]	; (8016048 <vPortFree+0xbc>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	4413      	add	r3, r2
 8016022:	4a09      	ldr	r2, [pc, #36]	; (8016048 <vPortFree+0xbc>)
 8016024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016026:	6938      	ldr	r0, [r7, #16]
 8016028:	f000 f876 	bl	8016118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801602c:	4b07      	ldr	r3, [pc, #28]	; (801604c <vPortFree+0xc0>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	3301      	adds	r3, #1
 8016032:	4a06      	ldr	r2, [pc, #24]	; (801604c <vPortFree+0xc0>)
 8016034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016036:	f001 fee7 	bl	8017e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801603a:	bf00      	nop
 801603c:	3718      	adds	r7, #24
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	24024bc8 	.word	0x24024bc8
 8016048:	24024bb8 	.word	0x24024bb8
 801604c:	24024bc4 	.word	0x24024bc4

08016050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016050:	b480      	push	{r7}
 8016052:	b085      	sub	sp, #20
 8016054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016056:	4b29      	ldr	r3, [pc, #164]	; (80160fc <prvHeapInit+0xac>)
 8016058:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801605a:	4b29      	ldr	r3, [pc, #164]	; (8016100 <prvHeapInit+0xb0>)
 801605c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	f003 0307 	and.w	r3, r3, #7
 8016064:	2b00      	cmp	r3, #0
 8016066:	d00c      	beq.n	8016082 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	3307      	adds	r3, #7
 801606c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	f023 0307 	bic.w	r3, r3, #7
 8016074:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016076:	68ba      	ldr	r2, [r7, #8]
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	1ad3      	subs	r3, r2, r3
 801607c:	4a20      	ldr	r2, [pc, #128]	; (8016100 <prvHeapInit+0xb0>)
 801607e:	4413      	add	r3, r2
 8016080:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016086:	4a1f      	ldr	r2, [pc, #124]	; (8016104 <prvHeapInit+0xb4>)
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801608c:	4b1d      	ldr	r3, [pc, #116]	; (8016104 <prvHeapInit+0xb4>)
 801608e:	2200      	movs	r2, #0
 8016090:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	68ba      	ldr	r2, [r7, #8]
 8016096:	4413      	add	r3, r2
 8016098:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801609a:	2208      	movs	r2, #8
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	1a9b      	subs	r3, r3, r2
 80160a0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	f023 0307 	bic.w	r3, r3, #7
 80160a8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	4a16      	ldr	r2, [pc, #88]	; (8016108 <prvHeapInit+0xb8>)
 80160ae:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80160b0:	4b15      	ldr	r3, [pc, #84]	; (8016108 <prvHeapInit+0xb8>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2200      	movs	r2, #0
 80160b6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80160b8:	4b13      	ldr	r3, [pc, #76]	; (8016108 <prvHeapInit+0xb8>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	2200      	movs	r2, #0
 80160be:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	68fa      	ldr	r2, [r7, #12]
 80160c8:	1ad2      	subs	r2, r2, r3
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80160ce:	4b0e      	ldr	r3, [pc, #56]	; (8016108 <prvHeapInit+0xb8>)
 80160d0:	681a      	ldr	r2, [r3, #0]
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	685b      	ldr	r3, [r3, #4]
 80160da:	4a0c      	ldr	r2, [pc, #48]	; (801610c <prvHeapInit+0xbc>)
 80160dc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80160de:	683b      	ldr	r3, [r7, #0]
 80160e0:	685b      	ldr	r3, [r3, #4]
 80160e2:	4a0b      	ldr	r2, [pc, #44]	; (8016110 <prvHeapInit+0xc0>)
 80160e4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80160e6:	4b0b      	ldr	r3, [pc, #44]	; (8016114 <prvHeapInit+0xc4>)
 80160e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80160ec:	601a      	str	r2, [r3, #0]
}
 80160ee:	bf00      	nop
 80160f0:	3714      	adds	r7, #20
 80160f2:	46bd      	mov	sp, r7
 80160f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f8:	4770      	bx	lr
 80160fa:	bf00      	nop
 80160fc:	000186a0 	.word	0x000186a0
 8016100:	2400c50c 	.word	0x2400c50c
 8016104:	24024bac 	.word	0x24024bac
 8016108:	24024bb4 	.word	0x24024bb4
 801610c:	24024bbc 	.word	0x24024bbc
 8016110:	24024bb8 	.word	0x24024bb8
 8016114:	24024bc8 	.word	0x24024bc8

08016118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016118:	b480      	push	{r7}
 801611a:	b085      	sub	sp, #20
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016120:	4b28      	ldr	r3, [pc, #160]	; (80161c4 <prvInsertBlockIntoFreeList+0xac>)
 8016122:	60fb      	str	r3, [r7, #12]
 8016124:	e002      	b.n	801612c <prvInsertBlockIntoFreeList+0x14>
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	60fb      	str	r3, [r7, #12]
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	687a      	ldr	r2, [r7, #4]
 8016132:	429a      	cmp	r2, r3
 8016134:	d8f7      	bhi.n	8016126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	685b      	ldr	r3, [r3, #4]
 801613e:	68ba      	ldr	r2, [r7, #8]
 8016140:	4413      	add	r3, r2
 8016142:	687a      	ldr	r2, [r7, #4]
 8016144:	429a      	cmp	r2, r3
 8016146:	d108      	bne.n	801615a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	685a      	ldr	r2, [r3, #4]
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	441a      	add	r2, r3
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	68ba      	ldr	r2, [r7, #8]
 8016164:	441a      	add	r2, r3
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	429a      	cmp	r2, r3
 801616c:	d118      	bne.n	80161a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	681a      	ldr	r2, [r3, #0]
 8016172:	4b15      	ldr	r3, [pc, #84]	; (80161c8 <prvInsertBlockIntoFreeList+0xb0>)
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	429a      	cmp	r2, r3
 8016178:	d00d      	beq.n	8016196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	685a      	ldr	r2, [r3, #4]
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	685b      	ldr	r3, [r3, #4]
 8016184:	441a      	add	r2, r3
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	681a      	ldr	r2, [r3, #0]
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	601a      	str	r2, [r3, #0]
 8016194:	e008      	b.n	80161a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016196:	4b0c      	ldr	r3, [pc, #48]	; (80161c8 <prvInsertBlockIntoFreeList+0xb0>)
 8016198:	681a      	ldr	r2, [r3, #0]
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	601a      	str	r2, [r3, #0]
 801619e:	e003      	b.n	80161a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	681a      	ldr	r2, [r3, #0]
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80161a8:	68fa      	ldr	r2, [r7, #12]
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	429a      	cmp	r2, r3
 80161ae:	d002      	beq.n	80161b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	687a      	ldr	r2, [r7, #4]
 80161b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80161b6:	bf00      	nop
 80161b8:	3714      	adds	r7, #20
 80161ba:	46bd      	mov	sp, r7
 80161bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c0:	4770      	bx	lr
 80161c2:	bf00      	nop
 80161c4:	24024bac 	.word	0x24024bac
 80161c8:	24024bb4 	.word	0x24024bb4

080161cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80161cc:	b480      	push	{r7}
 80161ce:	b083      	sub	sp, #12
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f103 0208 	add.w	r2, r3, #8
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f04f 32ff 	mov.w	r2, #4294967295
 80161e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f103 0208 	add.w	r2, r3, #8
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	f103 0208 	add.w	r2, r3, #8
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	2200      	movs	r2, #0
 80161fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016200:	bf00      	nop
 8016202:	370c      	adds	r7, #12
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr

0801620c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801620c:	b480      	push	{r7}
 801620e:	b083      	sub	sp, #12
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2200      	movs	r2, #0
 8016218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801621a:	bf00      	nop
 801621c:	370c      	adds	r7, #12
 801621e:	46bd      	mov	sp, r7
 8016220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016224:	4770      	bx	lr

08016226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016226:	b480      	push	{r7}
 8016228:	b085      	sub	sp, #20
 801622a:	af00      	add	r7, sp, #0
 801622c:	6078      	str	r0, [r7, #4]
 801622e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	685b      	ldr	r3, [r3, #4]
 8016234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	68fa      	ldr	r2, [r7, #12]
 801623a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	689a      	ldr	r2, [r3, #8]
 8016240:	683b      	ldr	r3, [r7, #0]
 8016242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	689b      	ldr	r3, [r3, #8]
 8016248:	683a      	ldr	r2, [r7, #0]
 801624a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	683a      	ldr	r2, [r7, #0]
 8016250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016252:	683b      	ldr	r3, [r7, #0]
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	1c5a      	adds	r2, r3, #1
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	601a      	str	r2, [r3, #0]
}
 8016262:	bf00      	nop
 8016264:	3714      	adds	r7, #20
 8016266:	46bd      	mov	sp, r7
 8016268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626c:	4770      	bx	lr

0801626e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801626e:	b480      	push	{r7}
 8016270:	b085      	sub	sp, #20
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
 8016276:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016278:	683b      	ldr	r3, [r7, #0]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016284:	d103      	bne.n	801628e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	691b      	ldr	r3, [r3, #16]
 801628a:	60fb      	str	r3, [r7, #12]
 801628c:	e00c      	b.n	80162a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	3308      	adds	r3, #8
 8016292:	60fb      	str	r3, [r7, #12]
 8016294:	e002      	b.n	801629c <vListInsert+0x2e>
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	685b      	ldr	r3, [r3, #4]
 801629a:	60fb      	str	r3, [r7, #12]
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	685b      	ldr	r3, [r3, #4]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	68ba      	ldr	r2, [r7, #8]
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d2f6      	bcs.n	8016296 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	685a      	ldr	r2, [r3, #4]
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	685b      	ldr	r3, [r3, #4]
 80162b4:	683a      	ldr	r2, [r7, #0]
 80162b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80162b8:	683b      	ldr	r3, [r7, #0]
 80162ba:	68fa      	ldr	r2, [r7, #12]
 80162bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	683a      	ldr	r2, [r7, #0]
 80162c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	687a      	ldr	r2, [r7, #4]
 80162c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	1c5a      	adds	r2, r3, #1
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	601a      	str	r2, [r3, #0]
}
 80162d4:	bf00      	nop
 80162d6:	3714      	adds	r7, #20
 80162d8:	46bd      	mov	sp, r7
 80162da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162de:	4770      	bx	lr

080162e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80162e0:	b480      	push	{r7}
 80162e2:	b085      	sub	sp, #20
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	691b      	ldr	r3, [r3, #16]
 80162ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	687a      	ldr	r2, [r7, #4]
 80162f4:	6892      	ldr	r2, [r2, #8]
 80162f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	689b      	ldr	r3, [r3, #8]
 80162fc:	687a      	ldr	r2, [r7, #4]
 80162fe:	6852      	ldr	r2, [r2, #4]
 8016300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	687a      	ldr	r2, [r7, #4]
 8016308:	429a      	cmp	r2, r3
 801630a:	d103      	bne.n	8016314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	689a      	ldr	r2, [r3, #8]
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2200      	movs	r2, #0
 8016318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	1e5a      	subs	r2, r3, #1
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	681b      	ldr	r3, [r3, #0]
}
 8016328:	4618      	mov	r0, r3
 801632a:	3714      	adds	r7, #20
 801632c:	46bd      	mov	sp, r7
 801632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016332:	4770      	bx	lr

08016334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016334:	b480      	push	{r7}
 8016336:	b085      	sub	sp, #20
 8016338:	af00      	add	r7, sp, #0
 801633a:	60f8      	str	r0, [r7, #12]
 801633c:	60b9      	str	r1, [r7, #8]
 801633e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	3b04      	subs	r3, #4
 8016344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801634c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	3b04      	subs	r3, #4
 8016352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016354:	68bb      	ldr	r3, [r7, #8]
 8016356:	f023 0201 	bic.w	r2, r3, #1
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	3b04      	subs	r3, #4
 8016362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016364:	4a0c      	ldr	r2, [pc, #48]	; (8016398 <pxPortInitialiseStack+0x64>)
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	3b14      	subs	r3, #20
 801636e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016370:	687a      	ldr	r2, [r7, #4]
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	3b04      	subs	r3, #4
 801637a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	f06f 0202 	mvn.w	r2, #2
 8016382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	3b20      	subs	r3, #32
 8016388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801638a:	68fb      	ldr	r3, [r7, #12]
}
 801638c:	4618      	mov	r0, r3
 801638e:	3714      	adds	r7, #20
 8016390:	46bd      	mov	sp, r7
 8016392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016396:	4770      	bx	lr
 8016398:	0801639d 	.word	0x0801639d

0801639c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801639c:	b480      	push	{r7}
 801639e:	b085      	sub	sp, #20
 80163a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80163a2:	2300      	movs	r3, #0
 80163a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80163a6:	4b12      	ldr	r3, [pc, #72]	; (80163f0 <prvTaskExitError+0x54>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163ae:	d00a      	beq.n	80163c6 <prvTaskExitError+0x2a>
	__asm volatile
 80163b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163b4:	f383 8811 	msr	BASEPRI, r3
 80163b8:	f3bf 8f6f 	isb	sy
 80163bc:	f3bf 8f4f 	dsb	sy
 80163c0:	60fb      	str	r3, [r7, #12]
}
 80163c2:	bf00      	nop
 80163c4:	e7fe      	b.n	80163c4 <prvTaskExitError+0x28>
	__asm volatile
 80163c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ca:	f383 8811 	msr	BASEPRI, r3
 80163ce:	f3bf 8f6f 	isb	sy
 80163d2:	f3bf 8f4f 	dsb	sy
 80163d6:	60bb      	str	r3, [r7, #8]
}
 80163d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80163da:	bf00      	nop
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d0fc      	beq.n	80163dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80163e2:	bf00      	nop
 80163e4:	bf00      	nop
 80163e6:	3714      	adds	r7, #20
 80163e8:	46bd      	mov	sp, r7
 80163ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ee:	4770      	bx	lr
 80163f0:	24000064 	.word	0x24000064
	...

08016400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016400:	4b07      	ldr	r3, [pc, #28]	; (8016420 <pxCurrentTCBConst2>)
 8016402:	6819      	ldr	r1, [r3, #0]
 8016404:	6808      	ldr	r0, [r1, #0]
 8016406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801640a:	f380 8809 	msr	PSP, r0
 801640e:	f3bf 8f6f 	isb	sy
 8016412:	f04f 0000 	mov.w	r0, #0
 8016416:	f380 8811 	msr	BASEPRI, r0
 801641a:	4770      	bx	lr
 801641c:	f3af 8000 	nop.w

08016420 <pxCurrentTCBConst2>:
 8016420:	24024c14 	.word	0x24024c14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016424:	bf00      	nop
 8016426:	bf00      	nop

08016428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016428:	4808      	ldr	r0, [pc, #32]	; (801644c <prvPortStartFirstTask+0x24>)
 801642a:	6800      	ldr	r0, [r0, #0]
 801642c:	6800      	ldr	r0, [r0, #0]
 801642e:	f380 8808 	msr	MSP, r0
 8016432:	f04f 0000 	mov.w	r0, #0
 8016436:	f380 8814 	msr	CONTROL, r0
 801643a:	b662      	cpsie	i
 801643c:	b661      	cpsie	f
 801643e:	f3bf 8f4f 	dsb	sy
 8016442:	f3bf 8f6f 	isb	sy
 8016446:	df00      	svc	0
 8016448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801644a:	bf00      	nop
 801644c:	e000ed08 	.word	0xe000ed08

08016450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b086      	sub	sp, #24
 8016454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016456:	4b46      	ldr	r3, [pc, #280]	; (8016570 <xPortStartScheduler+0x120>)
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	4a46      	ldr	r2, [pc, #280]	; (8016574 <xPortStartScheduler+0x124>)
 801645c:	4293      	cmp	r3, r2
 801645e:	d10a      	bne.n	8016476 <xPortStartScheduler+0x26>
	__asm volatile
 8016460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016464:	f383 8811 	msr	BASEPRI, r3
 8016468:	f3bf 8f6f 	isb	sy
 801646c:	f3bf 8f4f 	dsb	sy
 8016470:	613b      	str	r3, [r7, #16]
}
 8016472:	bf00      	nop
 8016474:	e7fe      	b.n	8016474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016476:	4b3e      	ldr	r3, [pc, #248]	; (8016570 <xPortStartScheduler+0x120>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	4a3f      	ldr	r2, [pc, #252]	; (8016578 <xPortStartScheduler+0x128>)
 801647c:	4293      	cmp	r3, r2
 801647e:	d10a      	bne.n	8016496 <xPortStartScheduler+0x46>
	__asm volatile
 8016480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016484:	f383 8811 	msr	BASEPRI, r3
 8016488:	f3bf 8f6f 	isb	sy
 801648c:	f3bf 8f4f 	dsb	sy
 8016490:	60fb      	str	r3, [r7, #12]
}
 8016492:	bf00      	nop
 8016494:	e7fe      	b.n	8016494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016496:	4b39      	ldr	r3, [pc, #228]	; (801657c <xPortStartScheduler+0x12c>)
 8016498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	781b      	ldrb	r3, [r3, #0]
 801649e:	b2db      	uxtb	r3, r3
 80164a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80164a2:	697b      	ldr	r3, [r7, #20]
 80164a4:	22ff      	movs	r2, #255	; 0xff
 80164a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80164a8:	697b      	ldr	r3, [r7, #20]
 80164aa:	781b      	ldrb	r3, [r3, #0]
 80164ac:	b2db      	uxtb	r3, r3
 80164ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80164b0:	78fb      	ldrb	r3, [r7, #3]
 80164b2:	b2db      	uxtb	r3, r3
 80164b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80164b8:	b2da      	uxtb	r2, r3
 80164ba:	4b31      	ldr	r3, [pc, #196]	; (8016580 <xPortStartScheduler+0x130>)
 80164bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80164be:	4b31      	ldr	r3, [pc, #196]	; (8016584 <xPortStartScheduler+0x134>)
 80164c0:	2207      	movs	r2, #7
 80164c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80164c4:	e009      	b.n	80164da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80164c6:	4b2f      	ldr	r3, [pc, #188]	; (8016584 <xPortStartScheduler+0x134>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	3b01      	subs	r3, #1
 80164cc:	4a2d      	ldr	r2, [pc, #180]	; (8016584 <xPortStartScheduler+0x134>)
 80164ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80164d0:	78fb      	ldrb	r3, [r7, #3]
 80164d2:	b2db      	uxtb	r3, r3
 80164d4:	005b      	lsls	r3, r3, #1
 80164d6:	b2db      	uxtb	r3, r3
 80164d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80164da:	78fb      	ldrb	r3, [r7, #3]
 80164dc:	b2db      	uxtb	r3, r3
 80164de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80164e2:	2b80      	cmp	r3, #128	; 0x80
 80164e4:	d0ef      	beq.n	80164c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80164e6:	4b27      	ldr	r3, [pc, #156]	; (8016584 <xPortStartScheduler+0x134>)
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	f1c3 0307 	rsb	r3, r3, #7
 80164ee:	2b04      	cmp	r3, #4
 80164f0:	d00a      	beq.n	8016508 <xPortStartScheduler+0xb8>
	__asm volatile
 80164f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164f6:	f383 8811 	msr	BASEPRI, r3
 80164fa:	f3bf 8f6f 	isb	sy
 80164fe:	f3bf 8f4f 	dsb	sy
 8016502:	60bb      	str	r3, [r7, #8]
}
 8016504:	bf00      	nop
 8016506:	e7fe      	b.n	8016506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016508:	4b1e      	ldr	r3, [pc, #120]	; (8016584 <xPortStartScheduler+0x134>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	021b      	lsls	r3, r3, #8
 801650e:	4a1d      	ldr	r2, [pc, #116]	; (8016584 <xPortStartScheduler+0x134>)
 8016510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016512:	4b1c      	ldr	r3, [pc, #112]	; (8016584 <xPortStartScheduler+0x134>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801651a:	4a1a      	ldr	r2, [pc, #104]	; (8016584 <xPortStartScheduler+0x134>)
 801651c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	b2da      	uxtb	r2, r3
 8016522:	697b      	ldr	r3, [r7, #20]
 8016524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016526:	4b18      	ldr	r3, [pc, #96]	; (8016588 <xPortStartScheduler+0x138>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	4a17      	ldr	r2, [pc, #92]	; (8016588 <xPortStartScheduler+0x138>)
 801652c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016532:	4b15      	ldr	r3, [pc, #84]	; (8016588 <xPortStartScheduler+0x138>)
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	4a14      	ldr	r2, [pc, #80]	; (8016588 <xPortStartScheduler+0x138>)
 8016538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801653c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801653e:	f000 f8dd 	bl	80166fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016542:	4b12      	ldr	r3, [pc, #72]	; (801658c <xPortStartScheduler+0x13c>)
 8016544:	2200      	movs	r2, #0
 8016546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016548:	f000 f8fc 	bl	8016744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801654c:	4b10      	ldr	r3, [pc, #64]	; (8016590 <xPortStartScheduler+0x140>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	4a0f      	ldr	r2, [pc, #60]	; (8016590 <xPortStartScheduler+0x140>)
 8016552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016558:	f7ff ff66 	bl	8016428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801655c:	f001 fdfa 	bl	8018154 <vTaskSwitchContext>
	prvTaskExitError();
 8016560:	f7ff ff1c 	bl	801639c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016564:	2300      	movs	r3, #0
}
 8016566:	4618      	mov	r0, r3
 8016568:	3718      	adds	r7, #24
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}
 801656e:	bf00      	nop
 8016570:	e000ed00 	.word	0xe000ed00
 8016574:	410fc271 	.word	0x410fc271
 8016578:	410fc270 	.word	0x410fc270
 801657c:	e000e400 	.word	0xe000e400
 8016580:	24024bcc 	.word	0x24024bcc
 8016584:	24024bd0 	.word	0x24024bd0
 8016588:	e000ed20 	.word	0xe000ed20
 801658c:	24000064 	.word	0x24000064
 8016590:	e000ef34 	.word	0xe000ef34

08016594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016594:	b480      	push	{r7}
 8016596:	b083      	sub	sp, #12
 8016598:	af00      	add	r7, sp, #0
	__asm volatile
 801659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801659e:	f383 8811 	msr	BASEPRI, r3
 80165a2:	f3bf 8f6f 	isb	sy
 80165a6:	f3bf 8f4f 	dsb	sy
 80165aa:	607b      	str	r3, [r7, #4]
}
 80165ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80165ae:	4b0f      	ldr	r3, [pc, #60]	; (80165ec <vPortEnterCritical+0x58>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	3301      	adds	r3, #1
 80165b4:	4a0d      	ldr	r2, [pc, #52]	; (80165ec <vPortEnterCritical+0x58>)
 80165b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80165b8:	4b0c      	ldr	r3, [pc, #48]	; (80165ec <vPortEnterCritical+0x58>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	2b01      	cmp	r3, #1
 80165be:	d10f      	bne.n	80165e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80165c0:	4b0b      	ldr	r3, [pc, #44]	; (80165f0 <vPortEnterCritical+0x5c>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	b2db      	uxtb	r3, r3
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d00a      	beq.n	80165e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80165ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165ce:	f383 8811 	msr	BASEPRI, r3
 80165d2:	f3bf 8f6f 	isb	sy
 80165d6:	f3bf 8f4f 	dsb	sy
 80165da:	603b      	str	r3, [r7, #0]
}
 80165dc:	bf00      	nop
 80165de:	e7fe      	b.n	80165de <vPortEnterCritical+0x4a>
	}
}
 80165e0:	bf00      	nop
 80165e2:	370c      	adds	r7, #12
 80165e4:	46bd      	mov	sp, r7
 80165e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ea:	4770      	bx	lr
 80165ec:	24000064 	.word	0x24000064
 80165f0:	e000ed04 	.word	0xe000ed04

080165f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80165f4:	b480      	push	{r7}
 80165f6:	b083      	sub	sp, #12
 80165f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80165fa:	4b12      	ldr	r3, [pc, #72]	; (8016644 <vPortExitCritical+0x50>)
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d10a      	bne.n	8016618 <vPortExitCritical+0x24>
	__asm volatile
 8016602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016606:	f383 8811 	msr	BASEPRI, r3
 801660a:	f3bf 8f6f 	isb	sy
 801660e:	f3bf 8f4f 	dsb	sy
 8016612:	607b      	str	r3, [r7, #4]
}
 8016614:	bf00      	nop
 8016616:	e7fe      	b.n	8016616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016618:	4b0a      	ldr	r3, [pc, #40]	; (8016644 <vPortExitCritical+0x50>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	3b01      	subs	r3, #1
 801661e:	4a09      	ldr	r2, [pc, #36]	; (8016644 <vPortExitCritical+0x50>)
 8016620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016622:	4b08      	ldr	r3, [pc, #32]	; (8016644 <vPortExitCritical+0x50>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d105      	bne.n	8016636 <vPortExitCritical+0x42>
 801662a:	2300      	movs	r3, #0
 801662c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016636:	bf00      	nop
 8016638:	370c      	adds	r7, #12
 801663a:	46bd      	mov	sp, r7
 801663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016640:	4770      	bx	lr
 8016642:	bf00      	nop
 8016644:	24000064 	.word	0x24000064
	...

08016650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016650:	f3ef 8009 	mrs	r0, PSP
 8016654:	f3bf 8f6f 	isb	sy
 8016658:	4b15      	ldr	r3, [pc, #84]	; (80166b0 <pxCurrentTCBConst>)
 801665a:	681a      	ldr	r2, [r3, #0]
 801665c:	f01e 0f10 	tst.w	lr, #16
 8016660:	bf08      	it	eq
 8016662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666a:	6010      	str	r0, [r2, #0]
 801666c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016674:	f380 8811 	msr	BASEPRI, r0
 8016678:	f3bf 8f4f 	dsb	sy
 801667c:	f3bf 8f6f 	isb	sy
 8016680:	f001 fd68 	bl	8018154 <vTaskSwitchContext>
 8016684:	f04f 0000 	mov.w	r0, #0
 8016688:	f380 8811 	msr	BASEPRI, r0
 801668c:	bc09      	pop	{r0, r3}
 801668e:	6819      	ldr	r1, [r3, #0]
 8016690:	6808      	ldr	r0, [r1, #0]
 8016692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016696:	f01e 0f10 	tst.w	lr, #16
 801669a:	bf08      	it	eq
 801669c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80166a0:	f380 8809 	msr	PSP, r0
 80166a4:	f3bf 8f6f 	isb	sy
 80166a8:	4770      	bx	lr
 80166aa:	bf00      	nop
 80166ac:	f3af 8000 	nop.w

080166b0 <pxCurrentTCBConst>:
 80166b0:	24024c14 	.word	0x24024c14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80166b4:	bf00      	nop
 80166b6:	bf00      	nop

080166b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
	__asm volatile
 80166be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c2:	f383 8811 	msr	BASEPRI, r3
 80166c6:	f3bf 8f6f 	isb	sy
 80166ca:	f3bf 8f4f 	dsb	sy
 80166ce:	607b      	str	r3, [r7, #4]
}
 80166d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80166d2:	f001 fc47 	bl	8017f64 <xTaskIncrementTick>
 80166d6:	4603      	mov	r3, r0
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d003      	beq.n	80166e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80166dc:	4b06      	ldr	r3, [pc, #24]	; (80166f8 <xPortSysTickHandler+0x40>)
 80166de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166e2:	601a      	str	r2, [r3, #0]
 80166e4:	2300      	movs	r3, #0
 80166e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	f383 8811 	msr	BASEPRI, r3
}
 80166ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80166f0:	bf00      	nop
 80166f2:	3708      	adds	r7, #8
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	e000ed04 	.word	0xe000ed04

080166fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80166fc:	b480      	push	{r7}
 80166fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016700:	4b0b      	ldr	r3, [pc, #44]	; (8016730 <vPortSetupTimerInterrupt+0x34>)
 8016702:	2200      	movs	r2, #0
 8016704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016706:	4b0b      	ldr	r3, [pc, #44]	; (8016734 <vPortSetupTimerInterrupt+0x38>)
 8016708:	2200      	movs	r2, #0
 801670a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801670c:	4b0a      	ldr	r3, [pc, #40]	; (8016738 <vPortSetupTimerInterrupt+0x3c>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	4a0a      	ldr	r2, [pc, #40]	; (801673c <vPortSetupTimerInterrupt+0x40>)
 8016712:	fba2 2303 	umull	r2, r3, r2, r3
 8016716:	099b      	lsrs	r3, r3, #6
 8016718:	4a09      	ldr	r2, [pc, #36]	; (8016740 <vPortSetupTimerInterrupt+0x44>)
 801671a:	3b01      	subs	r3, #1
 801671c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801671e:	4b04      	ldr	r3, [pc, #16]	; (8016730 <vPortSetupTimerInterrupt+0x34>)
 8016720:	2207      	movs	r2, #7
 8016722:	601a      	str	r2, [r3, #0]
}
 8016724:	bf00      	nop
 8016726:	46bd      	mov	sp, r7
 8016728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672c:	4770      	bx	lr
 801672e:	bf00      	nop
 8016730:	e000e010 	.word	0xe000e010
 8016734:	e000e018 	.word	0xe000e018
 8016738:	24000054 	.word	0x24000054
 801673c:	10624dd3 	.word	0x10624dd3
 8016740:	e000e014 	.word	0xe000e014

08016744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016754 <vPortEnableVFP+0x10>
 8016748:	6801      	ldr	r1, [r0, #0]
 801674a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801674e:	6001      	str	r1, [r0, #0]
 8016750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016752:	bf00      	nop
 8016754:	e000ed88 	.word	0xe000ed88

08016758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016758:	b480      	push	{r7}
 801675a:	b085      	sub	sp, #20
 801675c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801675e:	f3ef 8305 	mrs	r3, IPSR
 8016762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2b0f      	cmp	r3, #15
 8016768:	d914      	bls.n	8016794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801676a:	4a17      	ldr	r2, [pc, #92]	; (80167c8 <vPortValidateInterruptPriority+0x70>)
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	4413      	add	r3, r2
 8016770:	781b      	ldrb	r3, [r3, #0]
 8016772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016774:	4b15      	ldr	r3, [pc, #84]	; (80167cc <vPortValidateInterruptPriority+0x74>)
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	7afa      	ldrb	r2, [r7, #11]
 801677a:	429a      	cmp	r2, r3
 801677c:	d20a      	bcs.n	8016794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016782:	f383 8811 	msr	BASEPRI, r3
 8016786:	f3bf 8f6f 	isb	sy
 801678a:	f3bf 8f4f 	dsb	sy
 801678e:	607b      	str	r3, [r7, #4]
}
 8016790:	bf00      	nop
 8016792:	e7fe      	b.n	8016792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016794:	4b0e      	ldr	r3, [pc, #56]	; (80167d0 <vPortValidateInterruptPriority+0x78>)
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801679c:	4b0d      	ldr	r3, [pc, #52]	; (80167d4 <vPortValidateInterruptPriority+0x7c>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d90a      	bls.n	80167ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80167a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167a8:	f383 8811 	msr	BASEPRI, r3
 80167ac:	f3bf 8f6f 	isb	sy
 80167b0:	f3bf 8f4f 	dsb	sy
 80167b4:	603b      	str	r3, [r7, #0]
}
 80167b6:	bf00      	nop
 80167b8:	e7fe      	b.n	80167b8 <vPortValidateInterruptPriority+0x60>
	}
 80167ba:	bf00      	nop
 80167bc:	3714      	adds	r7, #20
 80167be:	46bd      	mov	sp, r7
 80167c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c4:	4770      	bx	lr
 80167c6:	bf00      	nop
 80167c8:	e000e3f0 	.word	0xe000e3f0
 80167cc:	24024bcc 	.word	0x24024bcc
 80167d0:	e000ed0c 	.word	0xe000ed0c
 80167d4:	24024bd0 	.word	0x24024bd0

080167d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b084      	sub	sp, #16
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d10a      	bne.n	8016802 <xQueueGenericReset+0x2a>
	__asm volatile
 80167ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167f0:	f383 8811 	msr	BASEPRI, r3
 80167f4:	f3bf 8f6f 	isb	sy
 80167f8:	f3bf 8f4f 	dsb	sy
 80167fc:	60bb      	str	r3, [r7, #8]
}
 80167fe:	bf00      	nop
 8016800:	e7fe      	b.n	8016800 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016802:	f7ff fec7 	bl	8016594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	681a      	ldr	r2, [r3, #0]
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801680e:	68f9      	ldr	r1, [r7, #12]
 8016810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016812:	fb01 f303 	mul.w	r3, r1, r3
 8016816:	441a      	add	r2, r3
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	2200      	movs	r2, #0
 8016820:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	681a      	ldr	r2, [r3, #0]
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	681a      	ldr	r2, [r3, #0]
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016832:	3b01      	subs	r3, #1
 8016834:	68f9      	ldr	r1, [r7, #12]
 8016836:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016838:	fb01 f303 	mul.w	r3, r1, r3
 801683c:	441a      	add	r2, r3
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	22ff      	movs	r2, #255	; 0xff
 8016846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	22ff      	movs	r2, #255	; 0xff
 801684e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d114      	bne.n	8016882 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	691b      	ldr	r3, [r3, #16]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d01a      	beq.n	8016896 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	3310      	adds	r3, #16
 8016864:	4618      	mov	r0, r3
 8016866:	f001 fd2d 	bl	80182c4 <xTaskRemoveFromEventList>
 801686a:	4603      	mov	r3, r0
 801686c:	2b00      	cmp	r3, #0
 801686e:	d012      	beq.n	8016896 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016870:	4b0c      	ldr	r3, [pc, #48]	; (80168a4 <xQueueGenericReset+0xcc>)
 8016872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016876:	601a      	str	r2, [r3, #0]
 8016878:	f3bf 8f4f 	dsb	sy
 801687c:	f3bf 8f6f 	isb	sy
 8016880:	e009      	b.n	8016896 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	3310      	adds	r3, #16
 8016886:	4618      	mov	r0, r3
 8016888:	f7ff fca0 	bl	80161cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	3324      	adds	r3, #36	; 0x24
 8016890:	4618      	mov	r0, r3
 8016892:	f7ff fc9b 	bl	80161cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016896:	f7ff fead 	bl	80165f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801689a:	2301      	movs	r3, #1
}
 801689c:	4618      	mov	r0, r3
 801689e:	3710      	adds	r7, #16
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	e000ed04 	.word	0xe000ed04

080168a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b08e      	sub	sp, #56	; 0x38
 80168ac:	af02      	add	r7, sp, #8
 80168ae:	60f8      	str	r0, [r7, #12]
 80168b0:	60b9      	str	r1, [r7, #8]
 80168b2:	607a      	str	r2, [r7, #4]
 80168b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d10a      	bne.n	80168d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80168bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c0:	f383 8811 	msr	BASEPRI, r3
 80168c4:	f3bf 8f6f 	isb	sy
 80168c8:	f3bf 8f4f 	dsb	sy
 80168cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80168ce:	bf00      	nop
 80168d0:	e7fe      	b.n	80168d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d10a      	bne.n	80168ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80168d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168dc:	f383 8811 	msr	BASEPRI, r3
 80168e0:	f3bf 8f6f 	isb	sy
 80168e4:	f3bf 8f4f 	dsb	sy
 80168e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80168ea:	bf00      	nop
 80168ec:	e7fe      	b.n	80168ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d002      	beq.n	80168fa <xQueueGenericCreateStatic+0x52>
 80168f4:	68bb      	ldr	r3, [r7, #8]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d001      	beq.n	80168fe <xQueueGenericCreateStatic+0x56>
 80168fa:	2301      	movs	r3, #1
 80168fc:	e000      	b.n	8016900 <xQueueGenericCreateStatic+0x58>
 80168fe:	2300      	movs	r3, #0
 8016900:	2b00      	cmp	r3, #0
 8016902:	d10a      	bne.n	801691a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016908:	f383 8811 	msr	BASEPRI, r3
 801690c:	f3bf 8f6f 	isb	sy
 8016910:	f3bf 8f4f 	dsb	sy
 8016914:	623b      	str	r3, [r7, #32]
}
 8016916:	bf00      	nop
 8016918:	e7fe      	b.n	8016918 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d102      	bne.n	8016926 <xQueueGenericCreateStatic+0x7e>
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d101      	bne.n	801692a <xQueueGenericCreateStatic+0x82>
 8016926:	2301      	movs	r3, #1
 8016928:	e000      	b.n	801692c <xQueueGenericCreateStatic+0x84>
 801692a:	2300      	movs	r3, #0
 801692c:	2b00      	cmp	r3, #0
 801692e:	d10a      	bne.n	8016946 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016934:	f383 8811 	msr	BASEPRI, r3
 8016938:	f3bf 8f6f 	isb	sy
 801693c:	f3bf 8f4f 	dsb	sy
 8016940:	61fb      	str	r3, [r7, #28]
}
 8016942:	bf00      	nop
 8016944:	e7fe      	b.n	8016944 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016946:	2350      	movs	r3, #80	; 0x50
 8016948:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801694a:	697b      	ldr	r3, [r7, #20]
 801694c:	2b50      	cmp	r3, #80	; 0x50
 801694e:	d00a      	beq.n	8016966 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016954:	f383 8811 	msr	BASEPRI, r3
 8016958:	f3bf 8f6f 	isb	sy
 801695c:	f3bf 8f4f 	dsb	sy
 8016960:	61bb      	str	r3, [r7, #24]
}
 8016962:	bf00      	nop
 8016964:	e7fe      	b.n	8016964 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016966:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016968:	683b      	ldr	r3, [r7, #0]
 801696a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801696e:	2b00      	cmp	r3, #0
 8016970:	d00d      	beq.n	801698e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016974:	2201      	movs	r2, #1
 8016976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801697a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016980:	9300      	str	r3, [sp, #0]
 8016982:	4613      	mov	r3, r2
 8016984:	687a      	ldr	r2, [r7, #4]
 8016986:	68b9      	ldr	r1, [r7, #8]
 8016988:	68f8      	ldr	r0, [r7, #12]
 801698a:	f000 f83f 	bl	8016a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016990:	4618      	mov	r0, r3
 8016992:	3730      	adds	r7, #48	; 0x30
 8016994:	46bd      	mov	sp, r7
 8016996:	bd80      	pop	{r7, pc}

08016998 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016998:	b580      	push	{r7, lr}
 801699a:	b08a      	sub	sp, #40	; 0x28
 801699c:	af02      	add	r7, sp, #8
 801699e:	60f8      	str	r0, [r7, #12]
 80169a0:	60b9      	str	r1, [r7, #8]
 80169a2:	4613      	mov	r3, r2
 80169a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d10a      	bne.n	80169c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80169ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169b0:	f383 8811 	msr	BASEPRI, r3
 80169b4:	f3bf 8f6f 	isb	sy
 80169b8:	f3bf 8f4f 	dsb	sy
 80169bc:	613b      	str	r3, [r7, #16]
}
 80169be:	bf00      	nop
 80169c0:	e7fe      	b.n	80169c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	68ba      	ldr	r2, [r7, #8]
 80169c6:	fb02 f303 	mul.w	r3, r2, r3
 80169ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80169cc:	69fb      	ldr	r3, [r7, #28]
 80169ce:	3350      	adds	r3, #80	; 0x50
 80169d0:	4618      	mov	r0, r3
 80169d2:	f7ff fa0f 	bl	8015df4 <pvPortMalloc>
 80169d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80169d8:	69bb      	ldr	r3, [r7, #24]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d011      	beq.n	8016a02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80169de:	69bb      	ldr	r3, [r7, #24]
 80169e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80169e2:	697b      	ldr	r3, [r7, #20]
 80169e4:	3350      	adds	r3, #80	; 0x50
 80169e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80169e8:	69bb      	ldr	r3, [r7, #24]
 80169ea:	2200      	movs	r2, #0
 80169ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80169f0:	79fa      	ldrb	r2, [r7, #7]
 80169f2:	69bb      	ldr	r3, [r7, #24]
 80169f4:	9300      	str	r3, [sp, #0]
 80169f6:	4613      	mov	r3, r2
 80169f8:	697a      	ldr	r2, [r7, #20]
 80169fa:	68b9      	ldr	r1, [r7, #8]
 80169fc:	68f8      	ldr	r0, [r7, #12]
 80169fe:	f000 f805 	bl	8016a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016a02:	69bb      	ldr	r3, [r7, #24]
	}
 8016a04:	4618      	mov	r0, r3
 8016a06:	3720      	adds	r7, #32
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd80      	pop	{r7, pc}

08016a0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b084      	sub	sp, #16
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	60f8      	str	r0, [r7, #12]
 8016a14:	60b9      	str	r1, [r7, #8]
 8016a16:	607a      	str	r2, [r7, #4]
 8016a18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016a1a:	68bb      	ldr	r3, [r7, #8]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d103      	bne.n	8016a28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016a20:	69bb      	ldr	r3, [r7, #24]
 8016a22:	69ba      	ldr	r2, [r7, #24]
 8016a24:	601a      	str	r2, [r3, #0]
 8016a26:	e002      	b.n	8016a2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016a28:	69bb      	ldr	r3, [r7, #24]
 8016a2a:	687a      	ldr	r2, [r7, #4]
 8016a2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016a2e:	69bb      	ldr	r3, [r7, #24]
 8016a30:	68fa      	ldr	r2, [r7, #12]
 8016a32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016a34:	69bb      	ldr	r3, [r7, #24]
 8016a36:	68ba      	ldr	r2, [r7, #8]
 8016a38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016a3a:	2101      	movs	r1, #1
 8016a3c:	69b8      	ldr	r0, [r7, #24]
 8016a3e:	f7ff fecb 	bl	80167d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016a42:	69bb      	ldr	r3, [r7, #24]
 8016a44:	78fa      	ldrb	r2, [r7, #3]
 8016a46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016a4a:	bf00      	nop
 8016a4c:	3710      	adds	r7, #16
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}

08016a52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016a52:	b580      	push	{r7, lr}
 8016a54:	b082      	sub	sp, #8
 8016a56:	af00      	add	r7, sp, #0
 8016a58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d00e      	beq.n	8016a7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	2200      	movs	r2, #0
 8016a64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	2200      	movs	r2, #0
 8016a6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016a72:	2300      	movs	r3, #0
 8016a74:	2200      	movs	r2, #0
 8016a76:	2100      	movs	r1, #0
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f000 f90b 	bl	8016c94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016a7e:	bf00      	nop
 8016a80:	3708      	adds	r7, #8
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}

08016a86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016a86:	b580      	push	{r7, lr}
 8016a88:	b086      	sub	sp, #24
 8016a8a:	af00      	add	r7, sp, #0
 8016a8c:	4603      	mov	r3, r0
 8016a8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016a90:	2301      	movs	r3, #1
 8016a92:	617b      	str	r3, [r7, #20]
 8016a94:	2300      	movs	r3, #0
 8016a96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016a98:	79fb      	ldrb	r3, [r7, #7]
 8016a9a:	461a      	mov	r2, r3
 8016a9c:	6939      	ldr	r1, [r7, #16]
 8016a9e:	6978      	ldr	r0, [r7, #20]
 8016aa0:	f7ff ff7a 	bl	8016998 <xQueueGenericCreate>
 8016aa4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016aa6:	68f8      	ldr	r0, [r7, #12]
 8016aa8:	f7ff ffd3 	bl	8016a52 <prvInitialiseMutex>

		return xNewQueue;
 8016aac:	68fb      	ldr	r3, [r7, #12]
	}
 8016aae:	4618      	mov	r0, r3
 8016ab0:	3718      	adds	r7, #24
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}

08016ab6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016ab6:	b580      	push	{r7, lr}
 8016ab8:	b088      	sub	sp, #32
 8016aba:	af02      	add	r7, sp, #8
 8016abc:	4603      	mov	r3, r0
 8016abe:	6039      	str	r1, [r7, #0]
 8016ac0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	617b      	str	r3, [r7, #20]
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016aca:	79fb      	ldrb	r3, [r7, #7]
 8016acc:	9300      	str	r3, [sp, #0]
 8016ace:	683b      	ldr	r3, [r7, #0]
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	6939      	ldr	r1, [r7, #16]
 8016ad4:	6978      	ldr	r0, [r7, #20]
 8016ad6:	f7ff fee7 	bl	80168a8 <xQueueGenericCreateStatic>
 8016ada:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016adc:	68f8      	ldr	r0, [r7, #12]
 8016ade:	f7ff ffb8 	bl	8016a52 <prvInitialiseMutex>

		return xNewQueue;
 8016ae2:	68fb      	ldr	r3, [r7, #12]
	}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	3718      	adds	r7, #24
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}

08016aec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016aec:	b590      	push	{r4, r7, lr}
 8016aee:	b087      	sub	sp, #28
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d10a      	bne.n	8016b14 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8016afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b02:	f383 8811 	msr	BASEPRI, r3
 8016b06:	f3bf 8f6f 	isb	sy
 8016b0a:	f3bf 8f4f 	dsb	sy
 8016b0e:	60fb      	str	r3, [r7, #12]
}
 8016b10:	bf00      	nop
 8016b12:	e7fe      	b.n	8016b12 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	689c      	ldr	r4, [r3, #8]
 8016b18:	f001 fd94 	bl	8018644 <xTaskGetCurrentTaskHandle>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	429c      	cmp	r4, r3
 8016b20:	d111      	bne.n	8016b46 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	68db      	ldr	r3, [r3, #12]
 8016b26:	1e5a      	subs	r2, r3, #1
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	68db      	ldr	r3, [r3, #12]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d105      	bne.n	8016b40 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016b34:	2300      	movs	r3, #0
 8016b36:	2200      	movs	r2, #0
 8016b38:	2100      	movs	r1, #0
 8016b3a:	6938      	ldr	r0, [r7, #16]
 8016b3c:	f000 f8aa 	bl	8016c94 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016b40:	2301      	movs	r3, #1
 8016b42:	617b      	str	r3, [r7, #20]
 8016b44:	e001      	b.n	8016b4a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016b46:	2300      	movs	r3, #0
 8016b48:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016b4a:	697b      	ldr	r3, [r7, #20]
	}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	371c      	adds	r7, #28
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd90      	pop	{r4, r7, pc}

08016b54 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016b54:	b590      	push	{r4, r7, lr}
 8016b56:	b087      	sub	sp, #28
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
 8016b5c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016b62:	693b      	ldr	r3, [r7, #16]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d10a      	bne.n	8016b7e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8016b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b6c:	f383 8811 	msr	BASEPRI, r3
 8016b70:	f3bf 8f6f 	isb	sy
 8016b74:	f3bf 8f4f 	dsb	sy
 8016b78:	60fb      	str	r3, [r7, #12]
}
 8016b7a:	bf00      	nop
 8016b7c:	e7fe      	b.n	8016b7c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016b7e:	693b      	ldr	r3, [r7, #16]
 8016b80:	689c      	ldr	r4, [r3, #8]
 8016b82:	f001 fd5f 	bl	8018644 <xTaskGetCurrentTaskHandle>
 8016b86:	4603      	mov	r3, r0
 8016b88:	429c      	cmp	r4, r3
 8016b8a:	d107      	bne.n	8016b9c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	68db      	ldr	r3, [r3, #12]
 8016b90:	1c5a      	adds	r2, r3, #1
 8016b92:	693b      	ldr	r3, [r7, #16]
 8016b94:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016b96:	2301      	movs	r3, #1
 8016b98:	617b      	str	r3, [r7, #20]
 8016b9a:	e00c      	b.n	8016bb6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8016b9c:	6839      	ldr	r1, [r7, #0]
 8016b9e:	6938      	ldr	r0, [r7, #16]
 8016ba0:	f000 fb7e 	bl	80172a0 <xQueueSemaphoreTake>
 8016ba4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016ba6:	697b      	ldr	r3, [r7, #20]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d004      	beq.n	8016bb6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016bac:	693b      	ldr	r3, [r7, #16]
 8016bae:	68db      	ldr	r3, [r3, #12]
 8016bb0:	1c5a      	adds	r2, r3, #1
 8016bb2:	693b      	ldr	r3, [r7, #16]
 8016bb4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016bb6:	697b      	ldr	r3, [r7, #20]
	}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	371c      	adds	r7, #28
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd90      	pop	{r4, r7, pc}

08016bc0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b08a      	sub	sp, #40	; 0x28
 8016bc4:	af02      	add	r7, sp, #8
 8016bc6:	60f8      	str	r0, [r7, #12]
 8016bc8:	60b9      	str	r1, [r7, #8]
 8016bca:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d10a      	bne.n	8016be8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8016bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd6:	f383 8811 	msr	BASEPRI, r3
 8016bda:	f3bf 8f6f 	isb	sy
 8016bde:	f3bf 8f4f 	dsb	sy
 8016be2:	61bb      	str	r3, [r7, #24]
}
 8016be4:	bf00      	nop
 8016be6:	e7fe      	b.n	8016be6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016be8:	68ba      	ldr	r2, [r7, #8]
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d90a      	bls.n	8016c06 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8016bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bf4:	f383 8811 	msr	BASEPRI, r3
 8016bf8:	f3bf 8f6f 	isb	sy
 8016bfc:	f3bf 8f4f 	dsb	sy
 8016c00:	617b      	str	r3, [r7, #20]
}
 8016c02:	bf00      	nop
 8016c04:	e7fe      	b.n	8016c04 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016c06:	2302      	movs	r3, #2
 8016c08:	9300      	str	r3, [sp, #0]
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	2100      	movs	r1, #0
 8016c10:	68f8      	ldr	r0, [r7, #12]
 8016c12:	f7ff fe49 	bl	80168a8 <xQueueGenericCreateStatic>
 8016c16:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016c18:	69fb      	ldr	r3, [r7, #28]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d002      	beq.n	8016c24 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016c1e:	69fb      	ldr	r3, [r7, #28]
 8016c20:	68ba      	ldr	r2, [r7, #8]
 8016c22:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016c24:	69fb      	ldr	r3, [r7, #28]
	}
 8016c26:	4618      	mov	r0, r3
 8016c28:	3720      	adds	r7, #32
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	bd80      	pop	{r7, pc}

08016c2e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016c2e:	b580      	push	{r7, lr}
 8016c30:	b086      	sub	sp, #24
 8016c32:	af00      	add	r7, sp, #0
 8016c34:	6078      	str	r0, [r7, #4]
 8016c36:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d10a      	bne.n	8016c54 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8016c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c42:	f383 8811 	msr	BASEPRI, r3
 8016c46:	f3bf 8f6f 	isb	sy
 8016c4a:	f3bf 8f4f 	dsb	sy
 8016c4e:	613b      	str	r3, [r7, #16]
}
 8016c50:	bf00      	nop
 8016c52:	e7fe      	b.n	8016c52 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016c54:	683a      	ldr	r2, [r7, #0]
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d90a      	bls.n	8016c72 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8016c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c60:	f383 8811 	msr	BASEPRI, r3
 8016c64:	f3bf 8f6f 	isb	sy
 8016c68:	f3bf 8f4f 	dsb	sy
 8016c6c:	60fb      	str	r3, [r7, #12]
}
 8016c6e:	bf00      	nop
 8016c70:	e7fe      	b.n	8016c70 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016c72:	2202      	movs	r2, #2
 8016c74:	2100      	movs	r1, #0
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	f7ff fe8e 	bl	8016998 <xQueueGenericCreate>
 8016c7c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016c7e:	697b      	ldr	r3, [r7, #20]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d002      	beq.n	8016c8a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	683a      	ldr	r2, [r7, #0]
 8016c88:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016c8a:	697b      	ldr	r3, [r7, #20]
	}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3718      	adds	r7, #24
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b08e      	sub	sp, #56	; 0x38
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	60f8      	str	r0, [r7, #12]
 8016c9c:	60b9      	str	r1, [r7, #8]
 8016c9e:	607a      	str	r2, [r7, #4]
 8016ca0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d10a      	bne.n	8016cc6 <xQueueGenericSend+0x32>
	__asm volatile
 8016cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb4:	f383 8811 	msr	BASEPRI, r3
 8016cb8:	f3bf 8f6f 	isb	sy
 8016cbc:	f3bf 8f4f 	dsb	sy
 8016cc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016cc2:	bf00      	nop
 8016cc4:	e7fe      	b.n	8016cc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016cc6:	68bb      	ldr	r3, [r7, #8]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d103      	bne.n	8016cd4 <xQueueGenericSend+0x40>
 8016ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d101      	bne.n	8016cd8 <xQueueGenericSend+0x44>
 8016cd4:	2301      	movs	r3, #1
 8016cd6:	e000      	b.n	8016cda <xQueueGenericSend+0x46>
 8016cd8:	2300      	movs	r3, #0
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d10a      	bne.n	8016cf4 <xQueueGenericSend+0x60>
	__asm volatile
 8016cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce2:	f383 8811 	msr	BASEPRI, r3
 8016ce6:	f3bf 8f6f 	isb	sy
 8016cea:	f3bf 8f4f 	dsb	sy
 8016cee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016cf0:	bf00      	nop
 8016cf2:	e7fe      	b.n	8016cf2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	2b02      	cmp	r3, #2
 8016cf8:	d103      	bne.n	8016d02 <xQueueGenericSend+0x6e>
 8016cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016cfe:	2b01      	cmp	r3, #1
 8016d00:	d101      	bne.n	8016d06 <xQueueGenericSend+0x72>
 8016d02:	2301      	movs	r3, #1
 8016d04:	e000      	b.n	8016d08 <xQueueGenericSend+0x74>
 8016d06:	2300      	movs	r3, #0
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d10a      	bne.n	8016d22 <xQueueGenericSend+0x8e>
	__asm volatile
 8016d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d10:	f383 8811 	msr	BASEPRI, r3
 8016d14:	f3bf 8f6f 	isb	sy
 8016d18:	f3bf 8f4f 	dsb	sy
 8016d1c:	623b      	str	r3, [r7, #32]
}
 8016d1e:	bf00      	nop
 8016d20:	e7fe      	b.n	8016d20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d22:	f001 fc9f 	bl	8018664 <xTaskGetSchedulerState>
 8016d26:	4603      	mov	r3, r0
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d102      	bne.n	8016d32 <xQueueGenericSend+0x9e>
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d101      	bne.n	8016d36 <xQueueGenericSend+0xa2>
 8016d32:	2301      	movs	r3, #1
 8016d34:	e000      	b.n	8016d38 <xQueueGenericSend+0xa4>
 8016d36:	2300      	movs	r3, #0
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d10a      	bne.n	8016d52 <xQueueGenericSend+0xbe>
	__asm volatile
 8016d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d40:	f383 8811 	msr	BASEPRI, r3
 8016d44:	f3bf 8f6f 	isb	sy
 8016d48:	f3bf 8f4f 	dsb	sy
 8016d4c:	61fb      	str	r3, [r7, #28]
}
 8016d4e:	bf00      	nop
 8016d50:	e7fe      	b.n	8016d50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016d52:	f7ff fc1f 	bl	8016594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d302      	bcc.n	8016d68 <xQueueGenericSend+0xd4>
 8016d62:	683b      	ldr	r3, [r7, #0]
 8016d64:	2b02      	cmp	r3, #2
 8016d66:	d129      	bne.n	8016dbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016d68:	683a      	ldr	r2, [r7, #0]
 8016d6a:	68b9      	ldr	r1, [r7, #8]
 8016d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d6e:	f000 fc5e 	bl	801762e <prvCopyDataToQueue>
 8016d72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d010      	beq.n	8016d9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d7e:	3324      	adds	r3, #36	; 0x24
 8016d80:	4618      	mov	r0, r3
 8016d82:	f001 fa9f 	bl	80182c4 <xTaskRemoveFromEventList>
 8016d86:	4603      	mov	r3, r0
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d013      	beq.n	8016db4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016d8c:	4b3f      	ldr	r3, [pc, #252]	; (8016e8c <xQueueGenericSend+0x1f8>)
 8016d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d92:	601a      	str	r2, [r3, #0]
 8016d94:	f3bf 8f4f 	dsb	sy
 8016d98:	f3bf 8f6f 	isb	sy
 8016d9c:	e00a      	b.n	8016db4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d007      	beq.n	8016db4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016da4:	4b39      	ldr	r3, [pc, #228]	; (8016e8c <xQueueGenericSend+0x1f8>)
 8016da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016daa:	601a      	str	r2, [r3, #0]
 8016dac:	f3bf 8f4f 	dsb	sy
 8016db0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016db4:	f7ff fc1e 	bl	80165f4 <vPortExitCritical>
				return pdPASS;
 8016db8:	2301      	movs	r3, #1
 8016dba:	e063      	b.n	8016e84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d103      	bne.n	8016dca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016dc2:	f7ff fc17 	bl	80165f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	e05c      	b.n	8016e84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d106      	bne.n	8016dde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016dd0:	f107 0314 	add.w	r3, r7, #20
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f001 fad9 	bl	801838c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016dda:	2301      	movs	r3, #1
 8016ddc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016dde:	f7ff fc09 	bl	80165f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016de2:	f001 f803 	bl	8017dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016de6:	f7ff fbd5 	bl	8016594 <vPortEnterCritical>
 8016dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016df0:	b25b      	sxtb	r3, r3
 8016df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016df6:	d103      	bne.n	8016e00 <xQueueGenericSend+0x16c>
 8016df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e06:	b25b      	sxtb	r3, r3
 8016e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e0c:	d103      	bne.n	8016e16 <xQueueGenericSend+0x182>
 8016e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e10:	2200      	movs	r2, #0
 8016e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016e16:	f7ff fbed 	bl	80165f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e1a:	1d3a      	adds	r2, r7, #4
 8016e1c:	f107 0314 	add.w	r3, r7, #20
 8016e20:	4611      	mov	r1, r2
 8016e22:	4618      	mov	r0, r3
 8016e24:	f001 fac8 	bl	80183b8 <xTaskCheckForTimeOut>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d124      	bne.n	8016e78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e30:	f000 fcf5 	bl	801781e <prvIsQueueFull>
 8016e34:	4603      	mov	r3, r0
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d018      	beq.n	8016e6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e3c:	3310      	adds	r3, #16
 8016e3e:	687a      	ldr	r2, [r7, #4]
 8016e40:	4611      	mov	r1, r2
 8016e42:	4618      	mov	r0, r3
 8016e44:	f001 f9ee 	bl	8018224 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e4a:	f000 fc80 	bl	801774e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016e4e:	f000 ffdb 	bl	8017e08 <xTaskResumeAll>
 8016e52:	4603      	mov	r3, r0
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	f47f af7c 	bne.w	8016d52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016e5a:	4b0c      	ldr	r3, [pc, #48]	; (8016e8c <xQueueGenericSend+0x1f8>)
 8016e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e60:	601a      	str	r2, [r3, #0]
 8016e62:	f3bf 8f4f 	dsb	sy
 8016e66:	f3bf 8f6f 	isb	sy
 8016e6a:	e772      	b.n	8016d52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e6e:	f000 fc6e 	bl	801774e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016e72:	f000 ffc9 	bl	8017e08 <xTaskResumeAll>
 8016e76:	e76c      	b.n	8016d52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e7a:	f000 fc68 	bl	801774e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016e7e:	f000 ffc3 	bl	8017e08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016e82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016e84:	4618      	mov	r0, r3
 8016e86:	3738      	adds	r7, #56	; 0x38
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	bd80      	pop	{r7, pc}
 8016e8c:	e000ed04 	.word	0xe000ed04

08016e90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b090      	sub	sp, #64	; 0x40
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	60b9      	str	r1, [r7, #8]
 8016e9a:	607a      	str	r2, [r7, #4]
 8016e9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d10a      	bne.n	8016ebe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eac:	f383 8811 	msr	BASEPRI, r3
 8016eb0:	f3bf 8f6f 	isb	sy
 8016eb4:	f3bf 8f4f 	dsb	sy
 8016eb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016eba:	bf00      	nop
 8016ebc:	e7fe      	b.n	8016ebc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d103      	bne.n	8016ecc <xQueueGenericSendFromISR+0x3c>
 8016ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d101      	bne.n	8016ed0 <xQueueGenericSendFromISR+0x40>
 8016ecc:	2301      	movs	r3, #1
 8016ece:	e000      	b.n	8016ed2 <xQueueGenericSendFromISR+0x42>
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d10a      	bne.n	8016eec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eda:	f383 8811 	msr	BASEPRI, r3
 8016ede:	f3bf 8f6f 	isb	sy
 8016ee2:	f3bf 8f4f 	dsb	sy
 8016ee6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016ee8:	bf00      	nop
 8016eea:	e7fe      	b.n	8016eea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016eec:	683b      	ldr	r3, [r7, #0]
 8016eee:	2b02      	cmp	r3, #2
 8016ef0:	d103      	bne.n	8016efa <xQueueGenericSendFromISR+0x6a>
 8016ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ef6:	2b01      	cmp	r3, #1
 8016ef8:	d101      	bne.n	8016efe <xQueueGenericSendFromISR+0x6e>
 8016efa:	2301      	movs	r3, #1
 8016efc:	e000      	b.n	8016f00 <xQueueGenericSendFromISR+0x70>
 8016efe:	2300      	movs	r3, #0
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d10a      	bne.n	8016f1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f08:	f383 8811 	msr	BASEPRI, r3
 8016f0c:	f3bf 8f6f 	isb	sy
 8016f10:	f3bf 8f4f 	dsb	sy
 8016f14:	623b      	str	r3, [r7, #32]
}
 8016f16:	bf00      	nop
 8016f18:	e7fe      	b.n	8016f18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f1a:	f7ff fc1d 	bl	8016758 <vPortValidateInterruptPriority>
	__asm volatile
 8016f1e:	f3ef 8211 	mrs	r2, BASEPRI
 8016f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f26:	f383 8811 	msr	BASEPRI, r3
 8016f2a:	f3bf 8f6f 	isb	sy
 8016f2e:	f3bf 8f4f 	dsb	sy
 8016f32:	61fa      	str	r2, [r7, #28]
 8016f34:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8016f36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016f38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d302      	bcc.n	8016f4c <xQueueGenericSendFromISR+0xbc>
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	2b02      	cmp	r3, #2
 8016f4a:	d12f      	bne.n	8016fac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f5c:	683a      	ldr	r2, [r7, #0]
 8016f5e:	68b9      	ldr	r1, [r7, #8]
 8016f60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016f62:	f000 fb64 	bl	801762e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016f66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f6e:	d112      	bne.n	8016f96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d016      	beq.n	8016fa6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f7a:	3324      	adds	r3, #36	; 0x24
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f001 f9a1 	bl	80182c4 <xTaskRemoveFromEventList>
 8016f82:	4603      	mov	r3, r0
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d00e      	beq.n	8016fa6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d00b      	beq.n	8016fa6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	2201      	movs	r2, #1
 8016f92:	601a      	str	r2, [r3, #0]
 8016f94:	e007      	b.n	8016fa6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016f96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016f9a:	3301      	adds	r3, #1
 8016f9c:	b2db      	uxtb	r3, r3
 8016f9e:	b25a      	sxtb	r2, r3
 8016fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016fa6:	2301      	movs	r3, #1
 8016fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016faa:	e001      	b.n	8016fb0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016fac:	2300      	movs	r3, #0
 8016fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fb2:	617b      	str	r3, [r7, #20]
	__asm volatile
 8016fb4:	697b      	ldr	r3, [r7, #20]
 8016fb6:	f383 8811 	msr	BASEPRI, r3
}
 8016fba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	3740      	adds	r7, #64	; 0x40
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	bd80      	pop	{r7, pc}

08016fc6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016fc6:	b580      	push	{r7, lr}
 8016fc8:	b08e      	sub	sp, #56	; 0x38
 8016fca:	af00      	add	r7, sp, #0
 8016fcc:	6078      	str	r0, [r7, #4]
 8016fce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d10a      	bne.n	8016ff0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8016fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fde:	f383 8811 	msr	BASEPRI, r3
 8016fe2:	f3bf 8f6f 	isb	sy
 8016fe6:	f3bf 8f4f 	dsb	sy
 8016fea:	623b      	str	r3, [r7, #32]
}
 8016fec:	bf00      	nop
 8016fee:	e7fe      	b.n	8016fee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d00a      	beq.n	801700e <xQueueGiveFromISR+0x48>
	__asm volatile
 8016ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ffc:	f383 8811 	msr	BASEPRI, r3
 8017000:	f3bf 8f6f 	isb	sy
 8017004:	f3bf 8f4f 	dsb	sy
 8017008:	61fb      	str	r3, [r7, #28]
}
 801700a:	bf00      	nop
 801700c:	e7fe      	b.n	801700c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d103      	bne.n	801701e <xQueueGiveFromISR+0x58>
 8017016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017018:	689b      	ldr	r3, [r3, #8]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d101      	bne.n	8017022 <xQueueGiveFromISR+0x5c>
 801701e:	2301      	movs	r3, #1
 8017020:	e000      	b.n	8017024 <xQueueGiveFromISR+0x5e>
 8017022:	2300      	movs	r3, #0
 8017024:	2b00      	cmp	r3, #0
 8017026:	d10a      	bne.n	801703e <xQueueGiveFromISR+0x78>
	__asm volatile
 8017028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801702c:	f383 8811 	msr	BASEPRI, r3
 8017030:	f3bf 8f6f 	isb	sy
 8017034:	f3bf 8f4f 	dsb	sy
 8017038:	61bb      	str	r3, [r7, #24]
}
 801703a:	bf00      	nop
 801703c:	e7fe      	b.n	801703c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801703e:	f7ff fb8b 	bl	8016758 <vPortValidateInterruptPriority>
	__asm volatile
 8017042:	f3ef 8211 	mrs	r2, BASEPRI
 8017046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801704a:	f383 8811 	msr	BASEPRI, r3
 801704e:	f3bf 8f6f 	isb	sy
 8017052:	f3bf 8f4f 	dsb	sy
 8017056:	617a      	str	r2, [r7, #20]
 8017058:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801705a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801705c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017062:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801706a:	429a      	cmp	r2, r3
 801706c:	d22b      	bcs.n	80170c6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801707a:	1c5a      	adds	r2, r3, #1
 801707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801707e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017080:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017088:	d112      	bne.n	80170b0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801708e:	2b00      	cmp	r3, #0
 8017090:	d016      	beq.n	80170c0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017094:	3324      	adds	r3, #36	; 0x24
 8017096:	4618      	mov	r0, r3
 8017098:	f001 f914 	bl	80182c4 <xTaskRemoveFromEventList>
 801709c:	4603      	mov	r3, r0
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d00e      	beq.n	80170c0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80170a2:	683b      	ldr	r3, [r7, #0]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d00b      	beq.n	80170c0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	2201      	movs	r2, #1
 80170ac:	601a      	str	r2, [r3, #0]
 80170ae:	e007      	b.n	80170c0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80170b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170b4:	3301      	adds	r3, #1
 80170b6:	b2db      	uxtb	r3, r3
 80170b8:	b25a      	sxtb	r2, r3
 80170ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80170c0:	2301      	movs	r3, #1
 80170c2:	637b      	str	r3, [r7, #52]	; 0x34
 80170c4:	e001      	b.n	80170ca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80170c6:	2300      	movs	r3, #0
 80170c8:	637b      	str	r3, [r7, #52]	; 0x34
 80170ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	f383 8811 	msr	BASEPRI, r3
}
 80170d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80170d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80170d8:	4618      	mov	r0, r3
 80170da:	3738      	adds	r7, #56	; 0x38
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}

080170e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b08c      	sub	sp, #48	; 0x30
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	60f8      	str	r0, [r7, #12]
 80170e8:	60b9      	str	r1, [r7, #8]
 80170ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80170ec:	2300      	movs	r3, #0
 80170ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80170f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d10a      	bne.n	8017110 <xQueueReceive+0x30>
	__asm volatile
 80170fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170fe:	f383 8811 	msr	BASEPRI, r3
 8017102:	f3bf 8f6f 	isb	sy
 8017106:	f3bf 8f4f 	dsb	sy
 801710a:	623b      	str	r3, [r7, #32]
}
 801710c:	bf00      	nop
 801710e:	e7fe      	b.n	801710e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017110:	68bb      	ldr	r3, [r7, #8]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d103      	bne.n	801711e <xQueueReceive+0x3e>
 8017116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801711a:	2b00      	cmp	r3, #0
 801711c:	d101      	bne.n	8017122 <xQueueReceive+0x42>
 801711e:	2301      	movs	r3, #1
 8017120:	e000      	b.n	8017124 <xQueueReceive+0x44>
 8017122:	2300      	movs	r3, #0
 8017124:	2b00      	cmp	r3, #0
 8017126:	d10a      	bne.n	801713e <xQueueReceive+0x5e>
	__asm volatile
 8017128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801712c:	f383 8811 	msr	BASEPRI, r3
 8017130:	f3bf 8f6f 	isb	sy
 8017134:	f3bf 8f4f 	dsb	sy
 8017138:	61fb      	str	r3, [r7, #28]
}
 801713a:	bf00      	nop
 801713c:	e7fe      	b.n	801713c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801713e:	f001 fa91 	bl	8018664 <xTaskGetSchedulerState>
 8017142:	4603      	mov	r3, r0
 8017144:	2b00      	cmp	r3, #0
 8017146:	d102      	bne.n	801714e <xQueueReceive+0x6e>
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d101      	bne.n	8017152 <xQueueReceive+0x72>
 801714e:	2301      	movs	r3, #1
 8017150:	e000      	b.n	8017154 <xQueueReceive+0x74>
 8017152:	2300      	movs	r3, #0
 8017154:	2b00      	cmp	r3, #0
 8017156:	d10a      	bne.n	801716e <xQueueReceive+0x8e>
	__asm volatile
 8017158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801715c:	f383 8811 	msr	BASEPRI, r3
 8017160:	f3bf 8f6f 	isb	sy
 8017164:	f3bf 8f4f 	dsb	sy
 8017168:	61bb      	str	r3, [r7, #24]
}
 801716a:	bf00      	nop
 801716c:	e7fe      	b.n	801716c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801716e:	f7ff fa11 	bl	8016594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017176:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717a:	2b00      	cmp	r3, #0
 801717c:	d01f      	beq.n	80171be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801717e:	68b9      	ldr	r1, [r7, #8]
 8017180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017182:	f000 fabe 	bl	8017702 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017188:	1e5a      	subs	r2, r3, #1
 801718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801718c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017190:	691b      	ldr	r3, [r3, #16]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d00f      	beq.n	80171b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017198:	3310      	adds	r3, #16
 801719a:	4618      	mov	r0, r3
 801719c:	f001 f892 	bl	80182c4 <xTaskRemoveFromEventList>
 80171a0:	4603      	mov	r3, r0
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d007      	beq.n	80171b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80171a6:	4b3d      	ldr	r3, [pc, #244]	; (801729c <xQueueReceive+0x1bc>)
 80171a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171ac:	601a      	str	r2, [r3, #0]
 80171ae:	f3bf 8f4f 	dsb	sy
 80171b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80171b6:	f7ff fa1d 	bl	80165f4 <vPortExitCritical>
				return pdPASS;
 80171ba:	2301      	movs	r3, #1
 80171bc:	e069      	b.n	8017292 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d103      	bne.n	80171cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80171c4:	f7ff fa16 	bl	80165f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80171c8:	2300      	movs	r3, #0
 80171ca:	e062      	b.n	8017292 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80171cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d106      	bne.n	80171e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80171d2:	f107 0310 	add.w	r3, r7, #16
 80171d6:	4618      	mov	r0, r3
 80171d8:	f001 f8d8 	bl	801838c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80171dc:	2301      	movs	r3, #1
 80171de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80171e0:	f7ff fa08 	bl	80165f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80171e4:	f000 fe02 	bl	8017dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80171e8:	f7ff f9d4 	bl	8016594 <vPortEnterCritical>
 80171ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80171f2:	b25b      	sxtb	r3, r3
 80171f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171f8:	d103      	bne.n	8017202 <xQueueReceive+0x122>
 80171fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171fc:	2200      	movs	r2, #0
 80171fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017208:	b25b      	sxtb	r3, r3
 801720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801720e:	d103      	bne.n	8017218 <xQueueReceive+0x138>
 8017210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017212:	2200      	movs	r2, #0
 8017214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017218:	f7ff f9ec 	bl	80165f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801721c:	1d3a      	adds	r2, r7, #4
 801721e:	f107 0310 	add.w	r3, r7, #16
 8017222:	4611      	mov	r1, r2
 8017224:	4618      	mov	r0, r3
 8017226:	f001 f8c7 	bl	80183b8 <xTaskCheckForTimeOut>
 801722a:	4603      	mov	r3, r0
 801722c:	2b00      	cmp	r3, #0
 801722e:	d123      	bne.n	8017278 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017232:	f000 fade 	bl	80177f2 <prvIsQueueEmpty>
 8017236:	4603      	mov	r3, r0
 8017238:	2b00      	cmp	r3, #0
 801723a:	d017      	beq.n	801726c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801723e:	3324      	adds	r3, #36	; 0x24
 8017240:	687a      	ldr	r2, [r7, #4]
 8017242:	4611      	mov	r1, r2
 8017244:	4618      	mov	r0, r3
 8017246:	f000 ffed 	bl	8018224 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801724a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801724c:	f000 fa7f 	bl	801774e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017250:	f000 fdda 	bl	8017e08 <xTaskResumeAll>
 8017254:	4603      	mov	r3, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d189      	bne.n	801716e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801725a:	4b10      	ldr	r3, [pc, #64]	; (801729c <xQueueReceive+0x1bc>)
 801725c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017260:	601a      	str	r2, [r3, #0]
 8017262:	f3bf 8f4f 	dsb	sy
 8017266:	f3bf 8f6f 	isb	sy
 801726a:	e780      	b.n	801716e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801726c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801726e:	f000 fa6e 	bl	801774e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017272:	f000 fdc9 	bl	8017e08 <xTaskResumeAll>
 8017276:	e77a      	b.n	801716e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801727a:	f000 fa68 	bl	801774e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801727e:	f000 fdc3 	bl	8017e08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017284:	f000 fab5 	bl	80177f2 <prvIsQueueEmpty>
 8017288:	4603      	mov	r3, r0
 801728a:	2b00      	cmp	r3, #0
 801728c:	f43f af6f 	beq.w	801716e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017290:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017292:	4618      	mov	r0, r3
 8017294:	3730      	adds	r7, #48	; 0x30
 8017296:	46bd      	mov	sp, r7
 8017298:	bd80      	pop	{r7, pc}
 801729a:	bf00      	nop
 801729c:	e000ed04 	.word	0xe000ed04

080172a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b08e      	sub	sp, #56	; 0x38
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
 80172a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80172aa:	2300      	movs	r3, #0
 80172ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80172b2:	2300      	movs	r3, #0
 80172b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80172b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d10a      	bne.n	80172d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80172bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172c0:	f383 8811 	msr	BASEPRI, r3
 80172c4:	f3bf 8f6f 	isb	sy
 80172c8:	f3bf 8f4f 	dsb	sy
 80172cc:	623b      	str	r3, [r7, #32]
}
 80172ce:	bf00      	nop
 80172d0:	e7fe      	b.n	80172d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80172d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d00a      	beq.n	80172f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80172da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172de:	f383 8811 	msr	BASEPRI, r3
 80172e2:	f3bf 8f6f 	isb	sy
 80172e6:	f3bf 8f4f 	dsb	sy
 80172ea:	61fb      	str	r3, [r7, #28]
}
 80172ec:	bf00      	nop
 80172ee:	e7fe      	b.n	80172ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80172f0:	f001 f9b8 	bl	8018664 <xTaskGetSchedulerState>
 80172f4:	4603      	mov	r3, r0
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d102      	bne.n	8017300 <xQueueSemaphoreTake+0x60>
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d101      	bne.n	8017304 <xQueueSemaphoreTake+0x64>
 8017300:	2301      	movs	r3, #1
 8017302:	e000      	b.n	8017306 <xQueueSemaphoreTake+0x66>
 8017304:	2300      	movs	r3, #0
 8017306:	2b00      	cmp	r3, #0
 8017308:	d10a      	bne.n	8017320 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801730e:	f383 8811 	msr	BASEPRI, r3
 8017312:	f3bf 8f6f 	isb	sy
 8017316:	f3bf 8f4f 	dsb	sy
 801731a:	61bb      	str	r3, [r7, #24]
}
 801731c:	bf00      	nop
 801731e:	e7fe      	b.n	801731e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017320:	f7ff f938 	bl	8016594 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017328:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801732c:	2b00      	cmp	r3, #0
 801732e:	d024      	beq.n	801737a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017332:	1e5a      	subs	r2, r3, #1
 8017334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017336:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d104      	bne.n	801734a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017340:	f001 fb06 	bl	8018950 <pvTaskIncrementMutexHeldCount>
 8017344:	4602      	mov	r2, r0
 8017346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017348:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801734c:	691b      	ldr	r3, [r3, #16]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d00f      	beq.n	8017372 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017354:	3310      	adds	r3, #16
 8017356:	4618      	mov	r0, r3
 8017358:	f000 ffb4 	bl	80182c4 <xTaskRemoveFromEventList>
 801735c:	4603      	mov	r3, r0
 801735e:	2b00      	cmp	r3, #0
 8017360:	d007      	beq.n	8017372 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017362:	4b54      	ldr	r3, [pc, #336]	; (80174b4 <xQueueSemaphoreTake+0x214>)
 8017364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017368:	601a      	str	r2, [r3, #0]
 801736a:	f3bf 8f4f 	dsb	sy
 801736e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017372:	f7ff f93f 	bl	80165f4 <vPortExitCritical>
				return pdPASS;
 8017376:	2301      	movs	r3, #1
 8017378:	e097      	b.n	80174aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801737a:	683b      	ldr	r3, [r7, #0]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d111      	bne.n	80173a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017382:	2b00      	cmp	r3, #0
 8017384:	d00a      	beq.n	801739c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8017386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801738a:	f383 8811 	msr	BASEPRI, r3
 801738e:	f3bf 8f6f 	isb	sy
 8017392:	f3bf 8f4f 	dsb	sy
 8017396:	617b      	str	r3, [r7, #20]
}
 8017398:	bf00      	nop
 801739a:	e7fe      	b.n	801739a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801739c:	f7ff f92a 	bl	80165f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80173a0:	2300      	movs	r3, #0
 80173a2:	e082      	b.n	80174aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80173a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d106      	bne.n	80173b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80173aa:	f107 030c 	add.w	r3, r7, #12
 80173ae:	4618      	mov	r0, r3
 80173b0:	f000 ffec 	bl	801838c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80173b4:	2301      	movs	r3, #1
 80173b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80173b8:	f7ff f91c 	bl	80165f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80173bc:	f000 fd16 	bl	8017dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80173c0:	f7ff f8e8 	bl	8016594 <vPortEnterCritical>
 80173c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80173ca:	b25b      	sxtb	r3, r3
 80173cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173d0:	d103      	bne.n	80173da <xQueueSemaphoreTake+0x13a>
 80173d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d4:	2200      	movs	r2, #0
 80173d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80173da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80173e0:	b25b      	sxtb	r3, r3
 80173e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173e6:	d103      	bne.n	80173f0 <xQueueSemaphoreTake+0x150>
 80173e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ea:	2200      	movs	r2, #0
 80173ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80173f0:	f7ff f900 	bl	80165f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80173f4:	463a      	mov	r2, r7
 80173f6:	f107 030c 	add.w	r3, r7, #12
 80173fa:	4611      	mov	r1, r2
 80173fc:	4618      	mov	r0, r3
 80173fe:	f000 ffdb 	bl	80183b8 <xTaskCheckForTimeOut>
 8017402:	4603      	mov	r3, r0
 8017404:	2b00      	cmp	r3, #0
 8017406:	d132      	bne.n	801746e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801740a:	f000 f9f2 	bl	80177f2 <prvIsQueueEmpty>
 801740e:	4603      	mov	r3, r0
 8017410:	2b00      	cmp	r3, #0
 8017412:	d026      	beq.n	8017462 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d109      	bne.n	8017430 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801741c:	f7ff f8ba 	bl	8016594 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017422:	689b      	ldr	r3, [r3, #8]
 8017424:	4618      	mov	r0, r3
 8017426:	f001 f93b 	bl	80186a0 <xTaskPriorityInherit>
 801742a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801742c:	f7ff f8e2 	bl	80165f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017432:	3324      	adds	r3, #36	; 0x24
 8017434:	683a      	ldr	r2, [r7, #0]
 8017436:	4611      	mov	r1, r2
 8017438:	4618      	mov	r0, r3
 801743a:	f000 fef3 	bl	8018224 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801743e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017440:	f000 f985 	bl	801774e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017444:	f000 fce0 	bl	8017e08 <xTaskResumeAll>
 8017448:	4603      	mov	r3, r0
 801744a:	2b00      	cmp	r3, #0
 801744c:	f47f af68 	bne.w	8017320 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8017450:	4b18      	ldr	r3, [pc, #96]	; (80174b4 <xQueueSemaphoreTake+0x214>)
 8017452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017456:	601a      	str	r2, [r3, #0]
 8017458:	f3bf 8f4f 	dsb	sy
 801745c:	f3bf 8f6f 	isb	sy
 8017460:	e75e      	b.n	8017320 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017464:	f000 f973 	bl	801774e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017468:	f000 fcce 	bl	8017e08 <xTaskResumeAll>
 801746c:	e758      	b.n	8017320 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801746e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017470:	f000 f96d 	bl	801774e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017474:	f000 fcc8 	bl	8017e08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801747a:	f000 f9ba 	bl	80177f2 <prvIsQueueEmpty>
 801747e:	4603      	mov	r3, r0
 8017480:	2b00      	cmp	r3, #0
 8017482:	f43f af4d 	beq.w	8017320 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017488:	2b00      	cmp	r3, #0
 801748a:	d00d      	beq.n	80174a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801748c:	f7ff f882 	bl	8016594 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017492:	f000 f8b4 	bl	80175fe <prvGetDisinheritPriorityAfterTimeout>
 8017496:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801749a:	689b      	ldr	r3, [r3, #8]
 801749c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801749e:	4618      	mov	r0, r3
 80174a0:	f001 f9d4 	bl	801884c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80174a4:	f7ff f8a6 	bl	80165f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80174a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3738      	adds	r7, #56	; 0x38
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}
 80174b2:	bf00      	nop
 80174b4:	e000ed04 	.word	0xe000ed04

080174b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b08e      	sub	sp, #56	; 0x38
 80174bc:	af00      	add	r7, sp, #0
 80174be:	60f8      	str	r0, [r7, #12]
 80174c0:	60b9      	str	r1, [r7, #8]
 80174c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80174c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d10a      	bne.n	80174e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80174ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174d2:	f383 8811 	msr	BASEPRI, r3
 80174d6:	f3bf 8f6f 	isb	sy
 80174da:	f3bf 8f4f 	dsb	sy
 80174de:	623b      	str	r3, [r7, #32]
}
 80174e0:	bf00      	nop
 80174e2:	e7fe      	b.n	80174e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80174e4:	68bb      	ldr	r3, [r7, #8]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d103      	bne.n	80174f2 <xQueueReceiveFromISR+0x3a>
 80174ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d101      	bne.n	80174f6 <xQueueReceiveFromISR+0x3e>
 80174f2:	2301      	movs	r3, #1
 80174f4:	e000      	b.n	80174f8 <xQueueReceiveFromISR+0x40>
 80174f6:	2300      	movs	r3, #0
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d10a      	bne.n	8017512 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80174fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017500:	f383 8811 	msr	BASEPRI, r3
 8017504:	f3bf 8f6f 	isb	sy
 8017508:	f3bf 8f4f 	dsb	sy
 801750c:	61fb      	str	r3, [r7, #28]
}
 801750e:	bf00      	nop
 8017510:	e7fe      	b.n	8017510 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017512:	f7ff f921 	bl	8016758 <vPortValidateInterruptPriority>
	__asm volatile
 8017516:	f3ef 8211 	mrs	r2, BASEPRI
 801751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801751e:	f383 8811 	msr	BASEPRI, r3
 8017522:	f3bf 8f6f 	isb	sy
 8017526:	f3bf 8f4f 	dsb	sy
 801752a:	61ba      	str	r2, [r7, #24]
 801752c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801752e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017536:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801753a:	2b00      	cmp	r3, #0
 801753c:	d02f      	beq.n	801759e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017548:	68b9      	ldr	r1, [r7, #8]
 801754a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801754c:	f000 f8d9 	bl	8017702 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017552:	1e5a      	subs	r2, r3, #1
 8017554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017556:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017560:	d112      	bne.n	8017588 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017564:	691b      	ldr	r3, [r3, #16]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d016      	beq.n	8017598 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801756c:	3310      	adds	r3, #16
 801756e:	4618      	mov	r0, r3
 8017570:	f000 fea8 	bl	80182c4 <xTaskRemoveFromEventList>
 8017574:	4603      	mov	r3, r0
 8017576:	2b00      	cmp	r3, #0
 8017578:	d00e      	beq.n	8017598 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d00b      	beq.n	8017598 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2201      	movs	r2, #1
 8017584:	601a      	str	r2, [r3, #0]
 8017586:	e007      	b.n	8017598 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801758c:	3301      	adds	r3, #1
 801758e:	b2db      	uxtb	r3, r3
 8017590:	b25a      	sxtb	r2, r3
 8017592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017598:	2301      	movs	r3, #1
 801759a:	637b      	str	r3, [r7, #52]	; 0x34
 801759c:	e001      	b.n	80175a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801759e:	2300      	movs	r3, #0
 80175a0:	637b      	str	r3, [r7, #52]	; 0x34
 80175a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80175a6:	693b      	ldr	r3, [r7, #16]
 80175a8:	f383 8811 	msr	BASEPRI, r3
}
 80175ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80175ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80175b0:	4618      	mov	r0, r3
 80175b2:	3738      	adds	r7, #56	; 0x38
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}

080175b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b084      	sub	sp, #16
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d10a      	bne.n	80175e0 <vQueueDelete+0x28>
	__asm volatile
 80175ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ce:	f383 8811 	msr	BASEPRI, r3
 80175d2:	f3bf 8f6f 	isb	sy
 80175d6:	f3bf 8f4f 	dsb	sy
 80175da:	60bb      	str	r3, [r7, #8]
}
 80175dc:	bf00      	nop
 80175de:	e7fe      	b.n	80175de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80175e0:	68f8      	ldr	r0, [r7, #12]
 80175e2:	f000 f95f 	bl	80178a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d102      	bne.n	80175f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80175f0:	68f8      	ldr	r0, [r7, #12]
 80175f2:	f7fe fccb 	bl	8015f8c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80175f6:	bf00      	nop
 80175f8:	3710      	adds	r7, #16
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}

080175fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80175fe:	b480      	push	{r7}
 8017600:	b085      	sub	sp, #20
 8017602:	af00      	add	r7, sp, #0
 8017604:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801760a:	2b00      	cmp	r3, #0
 801760c:	d006      	beq.n	801761c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8017618:	60fb      	str	r3, [r7, #12]
 801761a:	e001      	b.n	8017620 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801761c:	2300      	movs	r3, #0
 801761e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017620:	68fb      	ldr	r3, [r7, #12]
	}
 8017622:	4618      	mov	r0, r3
 8017624:	3714      	adds	r7, #20
 8017626:	46bd      	mov	sp, r7
 8017628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762c:	4770      	bx	lr

0801762e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801762e:	b580      	push	{r7, lr}
 8017630:	b086      	sub	sp, #24
 8017632:	af00      	add	r7, sp, #0
 8017634:	60f8      	str	r0, [r7, #12]
 8017636:	60b9      	str	r1, [r7, #8]
 8017638:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801763a:	2300      	movs	r3, #0
 801763c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017642:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017648:	2b00      	cmp	r3, #0
 801764a:	d10d      	bne.n	8017668 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d14d      	bne.n	80176f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	689b      	ldr	r3, [r3, #8]
 8017658:	4618      	mov	r0, r3
 801765a:	f001 f889 	bl	8018770 <xTaskPriorityDisinherit>
 801765e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	2200      	movs	r2, #0
 8017664:	609a      	str	r2, [r3, #8]
 8017666:	e043      	b.n	80176f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d119      	bne.n	80176a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	6858      	ldr	r0, [r3, #4]
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017676:	461a      	mov	r2, r3
 8017678:	68b9      	ldr	r1, [r7, #8]
 801767a:	f010 f873 	bl	8027764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	685a      	ldr	r2, [r3, #4]
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017686:	441a      	add	r2, r3
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	685a      	ldr	r2, [r3, #4]
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	689b      	ldr	r3, [r3, #8]
 8017694:	429a      	cmp	r2, r3
 8017696:	d32b      	bcc.n	80176f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	681a      	ldr	r2, [r3, #0]
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	605a      	str	r2, [r3, #4]
 80176a0:	e026      	b.n	80176f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	68d8      	ldr	r0, [r3, #12]
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176aa:	461a      	mov	r2, r3
 80176ac:	68b9      	ldr	r1, [r7, #8]
 80176ae:	f010 f859 	bl	8027764 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	68da      	ldr	r2, [r3, #12]
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176ba:	425b      	negs	r3, r3
 80176bc:	441a      	add	r2, r3
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	68da      	ldr	r2, [r3, #12]
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	429a      	cmp	r2, r3
 80176cc:	d207      	bcs.n	80176de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	689a      	ldr	r2, [r3, #8]
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176d6:	425b      	negs	r3, r3
 80176d8:	441a      	add	r2, r3
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2b02      	cmp	r3, #2
 80176e2:	d105      	bne.n	80176f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80176e4:	693b      	ldr	r3, [r7, #16]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d002      	beq.n	80176f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80176ea:	693b      	ldr	r3, [r7, #16]
 80176ec:	3b01      	subs	r3, #1
 80176ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	1c5a      	adds	r2, r3, #1
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80176f8:	697b      	ldr	r3, [r7, #20]
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3718      	adds	r7, #24
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}

08017702 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017702:	b580      	push	{r7, lr}
 8017704:	b082      	sub	sp, #8
 8017706:	af00      	add	r7, sp, #0
 8017708:	6078      	str	r0, [r7, #4]
 801770a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017710:	2b00      	cmp	r3, #0
 8017712:	d018      	beq.n	8017746 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	68da      	ldr	r2, [r3, #12]
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801771c:	441a      	add	r2, r3
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	68da      	ldr	r2, [r3, #12]
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	689b      	ldr	r3, [r3, #8]
 801772a:	429a      	cmp	r2, r3
 801772c:	d303      	bcc.n	8017736 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	681a      	ldr	r2, [r3, #0]
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	68d9      	ldr	r1, [r3, #12]
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801773e:	461a      	mov	r2, r3
 8017740:	6838      	ldr	r0, [r7, #0]
 8017742:	f010 f80f 	bl	8027764 <memcpy>
	}
}
 8017746:	bf00      	nop
 8017748:	3708      	adds	r7, #8
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}

0801774e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801774e:	b580      	push	{r7, lr}
 8017750:	b084      	sub	sp, #16
 8017752:	af00      	add	r7, sp, #0
 8017754:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017756:	f7fe ff1d 	bl	8016594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017760:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017762:	e011      	b.n	8017788 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017768:	2b00      	cmp	r3, #0
 801776a:	d012      	beq.n	8017792 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	3324      	adds	r3, #36	; 0x24
 8017770:	4618      	mov	r0, r3
 8017772:	f000 fda7 	bl	80182c4 <xTaskRemoveFromEventList>
 8017776:	4603      	mov	r3, r0
 8017778:	2b00      	cmp	r3, #0
 801777a:	d001      	beq.n	8017780 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801777c:	f000 fe7e 	bl	801847c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017780:	7bfb      	ldrb	r3, [r7, #15]
 8017782:	3b01      	subs	r3, #1
 8017784:	b2db      	uxtb	r3, r3
 8017786:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801778c:	2b00      	cmp	r3, #0
 801778e:	dce9      	bgt.n	8017764 <prvUnlockQueue+0x16>
 8017790:	e000      	b.n	8017794 <prvUnlockQueue+0x46>
					break;
 8017792:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	22ff      	movs	r2, #255	; 0xff
 8017798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801779c:	f7fe ff2a 	bl	80165f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80177a0:	f7fe fef8 	bl	8016594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80177aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80177ac:	e011      	b.n	80177d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	691b      	ldr	r3, [r3, #16]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d012      	beq.n	80177dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	3310      	adds	r3, #16
 80177ba:	4618      	mov	r0, r3
 80177bc:	f000 fd82 	bl	80182c4 <xTaskRemoveFromEventList>
 80177c0:	4603      	mov	r3, r0
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d001      	beq.n	80177ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80177c6:	f000 fe59 	bl	801847c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80177ca:	7bbb      	ldrb	r3, [r7, #14]
 80177cc:	3b01      	subs	r3, #1
 80177ce:	b2db      	uxtb	r3, r3
 80177d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80177d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	dce9      	bgt.n	80177ae <prvUnlockQueue+0x60>
 80177da:	e000      	b.n	80177de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80177dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	22ff      	movs	r2, #255	; 0xff
 80177e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80177e6:	f7fe ff05 	bl	80165f4 <vPortExitCritical>
}
 80177ea:	bf00      	nop
 80177ec:	3710      	adds	r7, #16
 80177ee:	46bd      	mov	sp, r7
 80177f0:	bd80      	pop	{r7, pc}

080177f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80177f2:	b580      	push	{r7, lr}
 80177f4:	b084      	sub	sp, #16
 80177f6:	af00      	add	r7, sp, #0
 80177f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80177fa:	f7fe fecb 	bl	8016594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017802:	2b00      	cmp	r3, #0
 8017804:	d102      	bne.n	801780c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017806:	2301      	movs	r3, #1
 8017808:	60fb      	str	r3, [r7, #12]
 801780a:	e001      	b.n	8017810 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801780c:	2300      	movs	r3, #0
 801780e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017810:	f7fe fef0 	bl	80165f4 <vPortExitCritical>

	return xReturn;
 8017814:	68fb      	ldr	r3, [r7, #12]
}
 8017816:	4618      	mov	r0, r3
 8017818:	3710      	adds	r7, #16
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}

0801781e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801781e:	b580      	push	{r7, lr}
 8017820:	b084      	sub	sp, #16
 8017822:	af00      	add	r7, sp, #0
 8017824:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017826:	f7fe feb5 	bl	8016594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017832:	429a      	cmp	r2, r3
 8017834:	d102      	bne.n	801783c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017836:	2301      	movs	r3, #1
 8017838:	60fb      	str	r3, [r7, #12]
 801783a:	e001      	b.n	8017840 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801783c:	2300      	movs	r3, #0
 801783e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017840:	f7fe fed8 	bl	80165f4 <vPortExitCritical>

	return xReturn;
 8017844:	68fb      	ldr	r3, [r7, #12]
}
 8017846:	4618      	mov	r0, r3
 8017848:	3710      	adds	r7, #16
 801784a:	46bd      	mov	sp, r7
 801784c:	bd80      	pop	{r7, pc}
	...

08017850 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017850:	b480      	push	{r7}
 8017852:	b085      	sub	sp, #20
 8017854:	af00      	add	r7, sp, #0
 8017856:	6078      	str	r0, [r7, #4]
 8017858:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801785a:	2300      	movs	r3, #0
 801785c:	60fb      	str	r3, [r7, #12]
 801785e:	e014      	b.n	801788a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017860:	4a0f      	ldr	r2, [pc, #60]	; (80178a0 <vQueueAddToRegistry+0x50>)
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d10b      	bne.n	8017884 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801786c:	490c      	ldr	r1, [pc, #48]	; (80178a0 <vQueueAddToRegistry+0x50>)
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	683a      	ldr	r2, [r7, #0]
 8017872:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017876:	4a0a      	ldr	r2, [pc, #40]	; (80178a0 <vQueueAddToRegistry+0x50>)
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	00db      	lsls	r3, r3, #3
 801787c:	4413      	add	r3, r2
 801787e:	687a      	ldr	r2, [r7, #4]
 8017880:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017882:	e006      	b.n	8017892 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	3301      	adds	r3, #1
 8017888:	60fb      	str	r3, [r7, #12]
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	2b07      	cmp	r3, #7
 801788e:	d9e7      	bls.n	8017860 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017890:	bf00      	nop
 8017892:	bf00      	nop
 8017894:	3714      	adds	r7, #20
 8017896:	46bd      	mov	sp, r7
 8017898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789c:	4770      	bx	lr
 801789e:	bf00      	nop
 80178a0:	24024bd4 	.word	0x24024bd4

080178a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80178a4:	b480      	push	{r7}
 80178a6:	b085      	sub	sp, #20
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80178ac:	2300      	movs	r3, #0
 80178ae:	60fb      	str	r3, [r7, #12]
 80178b0:	e016      	b.n	80178e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80178b2:	4a10      	ldr	r2, [pc, #64]	; (80178f4 <vQueueUnregisterQueue+0x50>)
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	00db      	lsls	r3, r3, #3
 80178b8:	4413      	add	r3, r2
 80178ba:	685b      	ldr	r3, [r3, #4]
 80178bc:	687a      	ldr	r2, [r7, #4]
 80178be:	429a      	cmp	r2, r3
 80178c0:	d10b      	bne.n	80178da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80178c2:	4a0c      	ldr	r2, [pc, #48]	; (80178f4 <vQueueUnregisterQueue+0x50>)
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	2100      	movs	r1, #0
 80178c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80178cc:	4a09      	ldr	r2, [pc, #36]	; (80178f4 <vQueueUnregisterQueue+0x50>)
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	00db      	lsls	r3, r3, #3
 80178d2:	4413      	add	r3, r2
 80178d4:	2200      	movs	r2, #0
 80178d6:	605a      	str	r2, [r3, #4]
				break;
 80178d8:	e006      	b.n	80178e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	3301      	adds	r3, #1
 80178de:	60fb      	str	r3, [r7, #12]
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	2b07      	cmp	r3, #7
 80178e4:	d9e5      	bls.n	80178b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80178e6:	bf00      	nop
 80178e8:	bf00      	nop
 80178ea:	3714      	adds	r7, #20
 80178ec:	46bd      	mov	sp, r7
 80178ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f2:	4770      	bx	lr
 80178f4:	24024bd4 	.word	0x24024bd4

080178f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b086      	sub	sp, #24
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	60f8      	str	r0, [r7, #12]
 8017900:	60b9      	str	r1, [r7, #8]
 8017902:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017908:	f7fe fe44 	bl	8016594 <vPortEnterCritical>
 801790c:	697b      	ldr	r3, [r7, #20]
 801790e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017912:	b25b      	sxtb	r3, r3
 8017914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017918:	d103      	bne.n	8017922 <vQueueWaitForMessageRestricted+0x2a>
 801791a:	697b      	ldr	r3, [r7, #20]
 801791c:	2200      	movs	r2, #0
 801791e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017928:	b25b      	sxtb	r3, r3
 801792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801792e:	d103      	bne.n	8017938 <vQueueWaitForMessageRestricted+0x40>
 8017930:	697b      	ldr	r3, [r7, #20]
 8017932:	2200      	movs	r2, #0
 8017934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017938:	f7fe fe5c 	bl	80165f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801793c:	697b      	ldr	r3, [r7, #20]
 801793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017940:	2b00      	cmp	r3, #0
 8017942:	d106      	bne.n	8017952 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	3324      	adds	r3, #36	; 0x24
 8017948:	687a      	ldr	r2, [r7, #4]
 801794a:	68b9      	ldr	r1, [r7, #8]
 801794c:	4618      	mov	r0, r3
 801794e:	f000 fc8d 	bl	801826c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017952:	6978      	ldr	r0, [r7, #20]
 8017954:	f7ff fefb 	bl	801774e <prvUnlockQueue>
	}
 8017958:	bf00      	nop
 801795a:	3718      	adds	r7, #24
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017960:	b580      	push	{r7, lr}
 8017962:	b08e      	sub	sp, #56	; 0x38
 8017964:	af04      	add	r7, sp, #16
 8017966:	60f8      	str	r0, [r7, #12]
 8017968:	60b9      	str	r1, [r7, #8]
 801796a:	607a      	str	r2, [r7, #4]
 801796c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801796e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017970:	2b00      	cmp	r3, #0
 8017972:	d10a      	bne.n	801798a <xTaskCreateStatic+0x2a>
	__asm volatile
 8017974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017978:	f383 8811 	msr	BASEPRI, r3
 801797c:	f3bf 8f6f 	isb	sy
 8017980:	f3bf 8f4f 	dsb	sy
 8017984:	623b      	str	r3, [r7, #32]
}
 8017986:	bf00      	nop
 8017988:	e7fe      	b.n	8017988 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801798c:	2b00      	cmp	r3, #0
 801798e:	d10a      	bne.n	80179a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8017990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017994:	f383 8811 	msr	BASEPRI, r3
 8017998:	f3bf 8f6f 	isb	sy
 801799c:	f3bf 8f4f 	dsb	sy
 80179a0:	61fb      	str	r3, [r7, #28]
}
 80179a2:	bf00      	nop
 80179a4:	e7fe      	b.n	80179a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80179a6:	2360      	movs	r3, #96	; 0x60
 80179a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80179aa:	693b      	ldr	r3, [r7, #16]
 80179ac:	2b60      	cmp	r3, #96	; 0x60
 80179ae:	d00a      	beq.n	80179c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80179b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179b4:	f383 8811 	msr	BASEPRI, r3
 80179b8:	f3bf 8f6f 	isb	sy
 80179bc:	f3bf 8f4f 	dsb	sy
 80179c0:	61bb      	str	r3, [r7, #24]
}
 80179c2:	bf00      	nop
 80179c4:	e7fe      	b.n	80179c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80179c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80179c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d01e      	beq.n	8017a0c <xTaskCreateStatic+0xac>
 80179ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d01b      	beq.n	8017a0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80179d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80179d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80179dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80179de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e0:	2202      	movs	r2, #2
 80179e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80179e6:	2300      	movs	r3, #0
 80179e8:	9303      	str	r3, [sp, #12]
 80179ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ec:	9302      	str	r3, [sp, #8]
 80179ee:	f107 0314 	add.w	r3, r7, #20
 80179f2:	9301      	str	r3, [sp, #4]
 80179f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179f6:	9300      	str	r3, [sp, #0]
 80179f8:	683b      	ldr	r3, [r7, #0]
 80179fa:	687a      	ldr	r2, [r7, #4]
 80179fc:	68b9      	ldr	r1, [r7, #8]
 80179fe:	68f8      	ldr	r0, [r7, #12]
 8017a00:	f000 f850 	bl	8017aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a06:	f000 f8df 	bl	8017bc8 <prvAddNewTaskToReadyList>
 8017a0a:	e001      	b.n	8017a10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017a10:	697b      	ldr	r3, [r7, #20]
	}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3728      	adds	r7, #40	; 0x28
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}

08017a1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017a1a:	b580      	push	{r7, lr}
 8017a1c:	b08c      	sub	sp, #48	; 0x30
 8017a1e:	af04      	add	r7, sp, #16
 8017a20:	60f8      	str	r0, [r7, #12]
 8017a22:	60b9      	str	r1, [r7, #8]
 8017a24:	603b      	str	r3, [r7, #0]
 8017a26:	4613      	mov	r3, r2
 8017a28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017a2a:	88fb      	ldrh	r3, [r7, #6]
 8017a2c:	009b      	lsls	r3, r3, #2
 8017a2e:	4618      	mov	r0, r3
 8017a30:	f7fe f9e0 	bl	8015df4 <pvPortMalloc>
 8017a34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017a36:	697b      	ldr	r3, [r7, #20]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d00e      	beq.n	8017a5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017a3c:	2060      	movs	r0, #96	; 0x60
 8017a3e:	f7fe f9d9 	bl	8015df4 <pvPortMalloc>
 8017a42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017a44:	69fb      	ldr	r3, [r7, #28]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d003      	beq.n	8017a52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017a4a:	69fb      	ldr	r3, [r7, #28]
 8017a4c:	697a      	ldr	r2, [r7, #20]
 8017a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8017a50:	e005      	b.n	8017a5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017a52:	6978      	ldr	r0, [r7, #20]
 8017a54:	f7fe fa9a 	bl	8015f8c <vPortFree>
 8017a58:	e001      	b.n	8017a5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017a5e:	69fb      	ldr	r3, [r7, #28]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d017      	beq.n	8017a94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017a64:	69fb      	ldr	r3, [r7, #28]
 8017a66:	2200      	movs	r2, #0
 8017a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017a6c:	88fa      	ldrh	r2, [r7, #6]
 8017a6e:	2300      	movs	r3, #0
 8017a70:	9303      	str	r3, [sp, #12]
 8017a72:	69fb      	ldr	r3, [r7, #28]
 8017a74:	9302      	str	r3, [sp, #8]
 8017a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a78:	9301      	str	r3, [sp, #4]
 8017a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a7c:	9300      	str	r3, [sp, #0]
 8017a7e:	683b      	ldr	r3, [r7, #0]
 8017a80:	68b9      	ldr	r1, [r7, #8]
 8017a82:	68f8      	ldr	r0, [r7, #12]
 8017a84:	f000 f80e 	bl	8017aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017a88:	69f8      	ldr	r0, [r7, #28]
 8017a8a:	f000 f89d 	bl	8017bc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017a8e:	2301      	movs	r3, #1
 8017a90:	61bb      	str	r3, [r7, #24]
 8017a92:	e002      	b.n	8017a9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017a94:	f04f 33ff 	mov.w	r3, #4294967295
 8017a98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017a9a:	69bb      	ldr	r3, [r7, #24]
	}
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	3720      	adds	r7, #32
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}

08017aa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b088      	sub	sp, #32
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	60f8      	str	r0, [r7, #12]
 8017aac:	60b9      	str	r1, [r7, #8]
 8017aae:	607a      	str	r2, [r7, #4]
 8017ab0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	009b      	lsls	r3, r3, #2
 8017aba:	461a      	mov	r2, r3
 8017abc:	21a5      	movs	r1, #165	; 0xa5
 8017abe:	f00f fe5f 	bl	8027780 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017ac6:	6879      	ldr	r1, [r7, #4]
 8017ac8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017acc:	440b      	add	r3, r1
 8017ace:	009b      	lsls	r3, r3, #2
 8017ad0:	4413      	add	r3, r2
 8017ad2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017ad4:	69bb      	ldr	r3, [r7, #24]
 8017ad6:	f023 0307 	bic.w	r3, r3, #7
 8017ada:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017adc:	69bb      	ldr	r3, [r7, #24]
 8017ade:	f003 0307 	and.w	r3, r3, #7
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d00a      	beq.n	8017afc <prvInitialiseNewTask+0x58>
	__asm volatile
 8017ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aea:	f383 8811 	msr	BASEPRI, r3
 8017aee:	f3bf 8f6f 	isb	sy
 8017af2:	f3bf 8f4f 	dsb	sy
 8017af6:	617b      	str	r3, [r7, #20]
}
 8017af8:	bf00      	nop
 8017afa:	e7fe      	b.n	8017afa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017afc:	68bb      	ldr	r3, [r7, #8]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d01f      	beq.n	8017b42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017b02:	2300      	movs	r3, #0
 8017b04:	61fb      	str	r3, [r7, #28]
 8017b06:	e012      	b.n	8017b2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017b08:	68ba      	ldr	r2, [r7, #8]
 8017b0a:	69fb      	ldr	r3, [r7, #28]
 8017b0c:	4413      	add	r3, r2
 8017b0e:	7819      	ldrb	r1, [r3, #0]
 8017b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b12:	69fb      	ldr	r3, [r7, #28]
 8017b14:	4413      	add	r3, r2
 8017b16:	3334      	adds	r3, #52	; 0x34
 8017b18:	460a      	mov	r2, r1
 8017b1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017b1c:	68ba      	ldr	r2, [r7, #8]
 8017b1e:	69fb      	ldr	r3, [r7, #28]
 8017b20:	4413      	add	r3, r2
 8017b22:	781b      	ldrb	r3, [r3, #0]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d006      	beq.n	8017b36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017b28:	69fb      	ldr	r3, [r7, #28]
 8017b2a:	3301      	adds	r3, #1
 8017b2c:	61fb      	str	r3, [r7, #28]
 8017b2e:	69fb      	ldr	r3, [r7, #28]
 8017b30:	2b0f      	cmp	r3, #15
 8017b32:	d9e9      	bls.n	8017b08 <prvInitialiseNewTask+0x64>
 8017b34:	e000      	b.n	8017b38 <prvInitialiseNewTask+0x94>
			{
				break;
 8017b36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017b40:	e003      	b.n	8017b4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b44:	2200      	movs	r2, #0
 8017b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b4c:	2b37      	cmp	r3, #55	; 0x37
 8017b4e:	d901      	bls.n	8017b54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017b50:	2337      	movs	r3, #55	; 0x37
 8017b52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b62:	2200      	movs	r2, #0
 8017b64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b68:	3304      	adds	r3, #4
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f7fe fb4e 	bl	801620c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b72:	3318      	adds	r3, #24
 8017b74:	4618      	mov	r0, r3
 8017b76:	f7fe fb49 	bl	801620c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b92:	2200      	movs	r2, #0
 8017b94:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b98:	2200      	movs	r2, #0
 8017b9a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017ba4:	683a      	ldr	r2, [r7, #0]
 8017ba6:	68f9      	ldr	r1, [r7, #12]
 8017ba8:	69b8      	ldr	r0, [r7, #24]
 8017baa:	f7fe fbc3 	bl	8016334 <pxPortInitialiseStack>
 8017bae:	4602      	mov	r2, r0
 8017bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bb2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d002      	beq.n	8017bc0 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017bc0:	bf00      	nop
 8017bc2:	3720      	adds	r7, #32
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}

08017bc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b082      	sub	sp, #8
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017bd0:	f7fe fce0 	bl	8016594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017bd4:	4b2d      	ldr	r3, [pc, #180]	; (8017c8c <prvAddNewTaskToReadyList+0xc4>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	3301      	adds	r3, #1
 8017bda:	4a2c      	ldr	r2, [pc, #176]	; (8017c8c <prvAddNewTaskToReadyList+0xc4>)
 8017bdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017bde:	4b2c      	ldr	r3, [pc, #176]	; (8017c90 <prvAddNewTaskToReadyList+0xc8>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d109      	bne.n	8017bfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017be6:	4a2a      	ldr	r2, [pc, #168]	; (8017c90 <prvAddNewTaskToReadyList+0xc8>)
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017bec:	4b27      	ldr	r3, [pc, #156]	; (8017c8c <prvAddNewTaskToReadyList+0xc4>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	2b01      	cmp	r3, #1
 8017bf2:	d110      	bne.n	8017c16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017bf4:	f000 fc68 	bl	80184c8 <prvInitialiseTaskLists>
 8017bf8:	e00d      	b.n	8017c16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017bfa:	4b26      	ldr	r3, [pc, #152]	; (8017c94 <prvAddNewTaskToReadyList+0xcc>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d109      	bne.n	8017c16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017c02:	4b23      	ldr	r3, [pc, #140]	; (8017c90 <prvAddNewTaskToReadyList+0xc8>)
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c0c:	429a      	cmp	r2, r3
 8017c0e:	d802      	bhi.n	8017c16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017c10:	4a1f      	ldr	r2, [pc, #124]	; (8017c90 <prvAddNewTaskToReadyList+0xc8>)
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017c16:	4b20      	ldr	r3, [pc, #128]	; (8017c98 <prvAddNewTaskToReadyList+0xd0>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	4a1e      	ldr	r2, [pc, #120]	; (8017c98 <prvAddNewTaskToReadyList+0xd0>)
 8017c1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017c20:	4b1d      	ldr	r3, [pc, #116]	; (8017c98 <prvAddNewTaskToReadyList+0xd0>)
 8017c22:	681a      	ldr	r2, [r3, #0]
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c2c:	4b1b      	ldr	r3, [pc, #108]	; (8017c9c <prvAddNewTaskToReadyList+0xd4>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	429a      	cmp	r2, r3
 8017c32:	d903      	bls.n	8017c3c <prvAddNewTaskToReadyList+0x74>
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c38:	4a18      	ldr	r2, [pc, #96]	; (8017c9c <prvAddNewTaskToReadyList+0xd4>)
 8017c3a:	6013      	str	r3, [r2, #0]
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c40:	4613      	mov	r3, r2
 8017c42:	009b      	lsls	r3, r3, #2
 8017c44:	4413      	add	r3, r2
 8017c46:	009b      	lsls	r3, r3, #2
 8017c48:	4a15      	ldr	r2, [pc, #84]	; (8017ca0 <prvAddNewTaskToReadyList+0xd8>)
 8017c4a:	441a      	add	r2, r3
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	3304      	adds	r3, #4
 8017c50:	4619      	mov	r1, r3
 8017c52:	4610      	mov	r0, r2
 8017c54:	f7fe fae7 	bl	8016226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017c58:	f7fe fccc 	bl	80165f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017c5c:	4b0d      	ldr	r3, [pc, #52]	; (8017c94 <prvAddNewTaskToReadyList+0xcc>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d00e      	beq.n	8017c82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017c64:	4b0a      	ldr	r3, [pc, #40]	; (8017c90 <prvAddNewTaskToReadyList+0xc8>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d207      	bcs.n	8017c82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017c72:	4b0c      	ldr	r3, [pc, #48]	; (8017ca4 <prvAddNewTaskToReadyList+0xdc>)
 8017c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c78:	601a      	str	r2, [r3, #0]
 8017c7a:	f3bf 8f4f 	dsb	sy
 8017c7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017c82:	bf00      	nop
 8017c84:	3708      	adds	r7, #8
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd80      	pop	{r7, pc}
 8017c8a:	bf00      	nop
 8017c8c:	240250e8 	.word	0x240250e8
 8017c90:	24024c14 	.word	0x24024c14
 8017c94:	240250f4 	.word	0x240250f4
 8017c98:	24025104 	.word	0x24025104
 8017c9c:	240250f0 	.word	0x240250f0
 8017ca0:	24024c18 	.word	0x24024c18
 8017ca4:	e000ed04 	.word	0xe000ed04

08017ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b084      	sub	sp, #16
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d017      	beq.n	8017cea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017cba:	4b13      	ldr	r3, [pc, #76]	; (8017d08 <vTaskDelay+0x60>)
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d00a      	beq.n	8017cd8 <vTaskDelay+0x30>
	__asm volatile
 8017cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cc6:	f383 8811 	msr	BASEPRI, r3
 8017cca:	f3bf 8f6f 	isb	sy
 8017cce:	f3bf 8f4f 	dsb	sy
 8017cd2:	60bb      	str	r3, [r7, #8]
}
 8017cd4:	bf00      	nop
 8017cd6:	e7fe      	b.n	8017cd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017cd8:	f000 f888 	bl	8017dec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017cdc:	2100      	movs	r1, #0
 8017cde:	6878      	ldr	r0, [r7, #4]
 8017ce0:	f000 fe4a 	bl	8018978 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017ce4:	f000 f890 	bl	8017e08 <xTaskResumeAll>
 8017ce8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d107      	bne.n	8017d00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017cf0:	4b06      	ldr	r3, [pc, #24]	; (8017d0c <vTaskDelay+0x64>)
 8017cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cf6:	601a      	str	r2, [r3, #0]
 8017cf8:	f3bf 8f4f 	dsb	sy
 8017cfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017d00:	bf00      	nop
 8017d02:	3710      	adds	r7, #16
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}
 8017d08:	24025110 	.word	0x24025110
 8017d0c:	e000ed04 	.word	0xe000ed04

08017d10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b08a      	sub	sp, #40	; 0x28
 8017d14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017d16:	2300      	movs	r3, #0
 8017d18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017d1e:	463a      	mov	r2, r7
 8017d20:	1d39      	adds	r1, r7, #4
 8017d22:	f107 0308 	add.w	r3, r7, #8
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7fe f830 	bl	8015d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017d2c:	6839      	ldr	r1, [r7, #0]
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	68ba      	ldr	r2, [r7, #8]
 8017d32:	9202      	str	r2, [sp, #8]
 8017d34:	9301      	str	r3, [sp, #4]
 8017d36:	2300      	movs	r3, #0
 8017d38:	9300      	str	r3, [sp, #0]
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	460a      	mov	r2, r1
 8017d3e:	4924      	ldr	r1, [pc, #144]	; (8017dd0 <vTaskStartScheduler+0xc0>)
 8017d40:	4824      	ldr	r0, [pc, #144]	; (8017dd4 <vTaskStartScheduler+0xc4>)
 8017d42:	f7ff fe0d 	bl	8017960 <xTaskCreateStatic>
 8017d46:	4603      	mov	r3, r0
 8017d48:	4a23      	ldr	r2, [pc, #140]	; (8017dd8 <vTaskStartScheduler+0xc8>)
 8017d4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017d4c:	4b22      	ldr	r3, [pc, #136]	; (8017dd8 <vTaskStartScheduler+0xc8>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d002      	beq.n	8017d5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017d54:	2301      	movs	r3, #1
 8017d56:	617b      	str	r3, [r7, #20]
 8017d58:	e001      	b.n	8017d5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	2b01      	cmp	r3, #1
 8017d62:	d102      	bne.n	8017d6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017d64:	f000 fe5c 	bl	8018a20 <xTimerCreateTimerTask>
 8017d68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017d6a:	697b      	ldr	r3, [r7, #20]
 8017d6c:	2b01      	cmp	r3, #1
 8017d6e:	d11c      	bne.n	8017daa <vTaskStartScheduler+0x9a>
	__asm volatile
 8017d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d74:	f383 8811 	msr	BASEPRI, r3
 8017d78:	f3bf 8f6f 	isb	sy
 8017d7c:	f3bf 8f4f 	dsb	sy
 8017d80:	613b      	str	r3, [r7, #16]
}
 8017d82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017d84:	4b15      	ldr	r3, [pc, #84]	; (8017ddc <vTaskStartScheduler+0xcc>)
 8017d86:	f04f 32ff 	mov.w	r2, #4294967295
 8017d8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017d8c:	4b14      	ldr	r3, [pc, #80]	; (8017de0 <vTaskStartScheduler+0xd0>)
 8017d8e:	2201      	movs	r2, #1
 8017d90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017d92:	4b14      	ldr	r3, [pc, #80]	; (8017de4 <vTaskStartScheduler+0xd4>)
 8017d94:	2200      	movs	r2, #0
 8017d96:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8017d98:	4b13      	ldr	r3, [pc, #76]	; (8017de8 <vTaskStartScheduler+0xd8>)
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	2100      	movs	r1, #0
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f000 f9b6 	bl	8018110 <xTaskCallApplicationTaskHook>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017da4:	f7fe fb54 	bl	8016450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017da8:	e00e      	b.n	8017dc8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017daa:	697b      	ldr	r3, [r7, #20]
 8017dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017db0:	d10a      	bne.n	8017dc8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8017db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017db6:	f383 8811 	msr	BASEPRI, r3
 8017dba:	f3bf 8f6f 	isb	sy
 8017dbe:	f3bf 8f4f 	dsb	sy
 8017dc2:	60fb      	str	r3, [r7, #12]
}
 8017dc4:	bf00      	nop
 8017dc6:	e7fe      	b.n	8017dc6 <vTaskStartScheduler+0xb6>
}
 8017dc8:	bf00      	nop
 8017dca:	3718      	adds	r7, #24
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	bd80      	pop	{r7, pc}
 8017dd0:	0802a8e8 	.word	0x0802a8e8
 8017dd4:	08018495 	.word	0x08018495
 8017dd8:	2402510c 	.word	0x2402510c
 8017ddc:	24025108 	.word	0x24025108
 8017de0:	240250f4 	.word	0x240250f4
 8017de4:	240250ec 	.word	0x240250ec
 8017de8:	24024c14 	.word	0x24024c14

08017dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017dec:	b480      	push	{r7}
 8017dee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017df0:	4b04      	ldr	r3, [pc, #16]	; (8017e04 <vTaskSuspendAll+0x18>)
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	3301      	adds	r3, #1
 8017df6:	4a03      	ldr	r2, [pc, #12]	; (8017e04 <vTaskSuspendAll+0x18>)
 8017df8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017dfa:	bf00      	nop
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr
 8017e04:	24025110 	.word	0x24025110

08017e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b084      	sub	sp, #16
 8017e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017e12:	2300      	movs	r3, #0
 8017e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017e16:	4b42      	ldr	r3, [pc, #264]	; (8017f20 <xTaskResumeAll+0x118>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d10a      	bne.n	8017e34 <xTaskResumeAll+0x2c>
	__asm volatile
 8017e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e22:	f383 8811 	msr	BASEPRI, r3
 8017e26:	f3bf 8f6f 	isb	sy
 8017e2a:	f3bf 8f4f 	dsb	sy
 8017e2e:	603b      	str	r3, [r7, #0]
}
 8017e30:	bf00      	nop
 8017e32:	e7fe      	b.n	8017e32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017e34:	f7fe fbae 	bl	8016594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017e38:	4b39      	ldr	r3, [pc, #228]	; (8017f20 <xTaskResumeAll+0x118>)
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	3b01      	subs	r3, #1
 8017e3e:	4a38      	ldr	r2, [pc, #224]	; (8017f20 <xTaskResumeAll+0x118>)
 8017e40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017e42:	4b37      	ldr	r3, [pc, #220]	; (8017f20 <xTaskResumeAll+0x118>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d162      	bne.n	8017f10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017e4a:	4b36      	ldr	r3, [pc, #216]	; (8017f24 <xTaskResumeAll+0x11c>)
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d05e      	beq.n	8017f10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017e52:	e02f      	b.n	8017eb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e54:	4b34      	ldr	r3, [pc, #208]	; (8017f28 <xTaskResumeAll+0x120>)
 8017e56:	68db      	ldr	r3, [r3, #12]
 8017e58:	68db      	ldr	r3, [r3, #12]
 8017e5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	3318      	adds	r3, #24
 8017e60:	4618      	mov	r0, r3
 8017e62:	f7fe fa3d 	bl	80162e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	3304      	adds	r3, #4
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f7fe fa38 	bl	80162e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e74:	4b2d      	ldr	r3, [pc, #180]	; (8017f2c <xTaskResumeAll+0x124>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	429a      	cmp	r2, r3
 8017e7a:	d903      	bls.n	8017e84 <xTaskResumeAll+0x7c>
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e80:	4a2a      	ldr	r2, [pc, #168]	; (8017f2c <xTaskResumeAll+0x124>)
 8017e82:	6013      	str	r3, [r2, #0]
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e88:	4613      	mov	r3, r2
 8017e8a:	009b      	lsls	r3, r3, #2
 8017e8c:	4413      	add	r3, r2
 8017e8e:	009b      	lsls	r3, r3, #2
 8017e90:	4a27      	ldr	r2, [pc, #156]	; (8017f30 <xTaskResumeAll+0x128>)
 8017e92:	441a      	add	r2, r3
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	3304      	adds	r3, #4
 8017e98:	4619      	mov	r1, r3
 8017e9a:	4610      	mov	r0, r2
 8017e9c:	f7fe f9c3 	bl	8016226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ea4:	4b23      	ldr	r3, [pc, #140]	; (8017f34 <xTaskResumeAll+0x12c>)
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eaa:	429a      	cmp	r2, r3
 8017eac:	d302      	bcc.n	8017eb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017eae:	4b22      	ldr	r3, [pc, #136]	; (8017f38 <xTaskResumeAll+0x130>)
 8017eb0:	2201      	movs	r2, #1
 8017eb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017eb4:	4b1c      	ldr	r3, [pc, #112]	; (8017f28 <xTaskResumeAll+0x120>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d1cb      	bne.n	8017e54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d001      	beq.n	8017ec6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017ec2:	f000 fb9f 	bl	8018604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017ec6:	4b1d      	ldr	r3, [pc, #116]	; (8017f3c <xTaskResumeAll+0x134>)
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d010      	beq.n	8017ef4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017ed2:	f000 f847 	bl	8017f64 <xTaskIncrementTick>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d002      	beq.n	8017ee2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017edc:	4b16      	ldr	r3, [pc, #88]	; (8017f38 <xTaskResumeAll+0x130>)
 8017ede:	2201      	movs	r2, #1
 8017ee0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	3b01      	subs	r3, #1
 8017ee6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d1f1      	bne.n	8017ed2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017eee:	4b13      	ldr	r3, [pc, #76]	; (8017f3c <xTaskResumeAll+0x134>)
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017ef4:	4b10      	ldr	r3, [pc, #64]	; (8017f38 <xTaskResumeAll+0x130>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d009      	beq.n	8017f10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017efc:	2301      	movs	r3, #1
 8017efe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017f00:	4b0f      	ldr	r3, [pc, #60]	; (8017f40 <xTaskResumeAll+0x138>)
 8017f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f06:	601a      	str	r2, [r3, #0]
 8017f08:	f3bf 8f4f 	dsb	sy
 8017f0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017f10:	f7fe fb70 	bl	80165f4 <vPortExitCritical>

	return xAlreadyYielded;
 8017f14:	68bb      	ldr	r3, [r7, #8]
}
 8017f16:	4618      	mov	r0, r3
 8017f18:	3710      	adds	r7, #16
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd80      	pop	{r7, pc}
 8017f1e:	bf00      	nop
 8017f20:	24025110 	.word	0x24025110
 8017f24:	240250e8 	.word	0x240250e8
 8017f28:	240250a8 	.word	0x240250a8
 8017f2c:	240250f0 	.word	0x240250f0
 8017f30:	24024c18 	.word	0x24024c18
 8017f34:	24024c14 	.word	0x24024c14
 8017f38:	240250fc 	.word	0x240250fc
 8017f3c:	240250f8 	.word	0x240250f8
 8017f40:	e000ed04 	.word	0xe000ed04

08017f44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017f44:	b480      	push	{r7}
 8017f46:	b083      	sub	sp, #12
 8017f48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017f4a:	4b05      	ldr	r3, [pc, #20]	; (8017f60 <xTaskGetTickCount+0x1c>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017f50:	687b      	ldr	r3, [r7, #4]
}
 8017f52:	4618      	mov	r0, r3
 8017f54:	370c      	adds	r7, #12
 8017f56:	46bd      	mov	sp, r7
 8017f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5c:	4770      	bx	lr
 8017f5e:	bf00      	nop
 8017f60:	240250ec 	.word	0x240250ec

08017f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017f64:	b580      	push	{r7, lr}
 8017f66:	b086      	sub	sp, #24
 8017f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017f6e:	4b4f      	ldr	r3, [pc, #316]	; (80180ac <xTaskIncrementTick+0x148>)
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	f040 808f 	bne.w	8018096 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017f78:	4b4d      	ldr	r3, [pc, #308]	; (80180b0 <xTaskIncrementTick+0x14c>)
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	3301      	adds	r3, #1
 8017f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017f80:	4a4b      	ldr	r2, [pc, #300]	; (80180b0 <xTaskIncrementTick+0x14c>)
 8017f82:	693b      	ldr	r3, [r7, #16]
 8017f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017f86:	693b      	ldr	r3, [r7, #16]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d120      	bne.n	8017fce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017f8c:	4b49      	ldr	r3, [pc, #292]	; (80180b4 <xTaskIncrementTick+0x150>)
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d00a      	beq.n	8017fac <xTaskIncrementTick+0x48>
	__asm volatile
 8017f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f9a:	f383 8811 	msr	BASEPRI, r3
 8017f9e:	f3bf 8f6f 	isb	sy
 8017fa2:	f3bf 8f4f 	dsb	sy
 8017fa6:	603b      	str	r3, [r7, #0]
}
 8017fa8:	bf00      	nop
 8017faa:	e7fe      	b.n	8017faa <xTaskIncrementTick+0x46>
 8017fac:	4b41      	ldr	r3, [pc, #260]	; (80180b4 <xTaskIncrementTick+0x150>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	60fb      	str	r3, [r7, #12]
 8017fb2:	4b41      	ldr	r3, [pc, #260]	; (80180b8 <xTaskIncrementTick+0x154>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	4a3f      	ldr	r2, [pc, #252]	; (80180b4 <xTaskIncrementTick+0x150>)
 8017fb8:	6013      	str	r3, [r2, #0]
 8017fba:	4a3f      	ldr	r2, [pc, #252]	; (80180b8 <xTaskIncrementTick+0x154>)
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	6013      	str	r3, [r2, #0]
 8017fc0:	4b3e      	ldr	r3, [pc, #248]	; (80180bc <xTaskIncrementTick+0x158>)
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	3301      	adds	r3, #1
 8017fc6:	4a3d      	ldr	r2, [pc, #244]	; (80180bc <xTaskIncrementTick+0x158>)
 8017fc8:	6013      	str	r3, [r2, #0]
 8017fca:	f000 fb1b 	bl	8018604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017fce:	4b3c      	ldr	r3, [pc, #240]	; (80180c0 <xTaskIncrementTick+0x15c>)
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	693a      	ldr	r2, [r7, #16]
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d349      	bcc.n	801806c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017fd8:	4b36      	ldr	r3, [pc, #216]	; (80180b4 <xTaskIncrementTick+0x150>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d104      	bne.n	8017fec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017fe2:	4b37      	ldr	r3, [pc, #220]	; (80180c0 <xTaskIncrementTick+0x15c>)
 8017fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8017fe8:	601a      	str	r2, [r3, #0]
					break;
 8017fea:	e03f      	b.n	801806c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017fec:	4b31      	ldr	r3, [pc, #196]	; (80180b4 <xTaskIncrementTick+0x150>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	68db      	ldr	r3, [r3, #12]
 8017ff2:	68db      	ldr	r3, [r3, #12]
 8017ff4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017ff6:	68bb      	ldr	r3, [r7, #8]
 8017ff8:	685b      	ldr	r3, [r3, #4]
 8017ffa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017ffc:	693a      	ldr	r2, [r7, #16]
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	429a      	cmp	r2, r3
 8018002:	d203      	bcs.n	801800c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018004:	4a2e      	ldr	r2, [pc, #184]	; (80180c0 <xTaskIncrementTick+0x15c>)
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801800a:	e02f      	b.n	801806c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801800c:	68bb      	ldr	r3, [r7, #8]
 801800e:	3304      	adds	r3, #4
 8018010:	4618      	mov	r0, r3
 8018012:	f7fe f965 	bl	80162e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018016:	68bb      	ldr	r3, [r7, #8]
 8018018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801801a:	2b00      	cmp	r3, #0
 801801c:	d004      	beq.n	8018028 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	3318      	adds	r3, #24
 8018022:	4618      	mov	r0, r3
 8018024:	f7fe f95c 	bl	80162e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801802c:	4b25      	ldr	r3, [pc, #148]	; (80180c4 <xTaskIncrementTick+0x160>)
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	429a      	cmp	r2, r3
 8018032:	d903      	bls.n	801803c <xTaskIncrementTick+0xd8>
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018038:	4a22      	ldr	r2, [pc, #136]	; (80180c4 <xTaskIncrementTick+0x160>)
 801803a:	6013      	str	r3, [r2, #0]
 801803c:	68bb      	ldr	r3, [r7, #8]
 801803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018040:	4613      	mov	r3, r2
 8018042:	009b      	lsls	r3, r3, #2
 8018044:	4413      	add	r3, r2
 8018046:	009b      	lsls	r3, r3, #2
 8018048:	4a1f      	ldr	r2, [pc, #124]	; (80180c8 <xTaskIncrementTick+0x164>)
 801804a:	441a      	add	r2, r3
 801804c:	68bb      	ldr	r3, [r7, #8]
 801804e:	3304      	adds	r3, #4
 8018050:	4619      	mov	r1, r3
 8018052:	4610      	mov	r0, r2
 8018054:	f7fe f8e7 	bl	8016226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801805c:	4b1b      	ldr	r3, [pc, #108]	; (80180cc <xTaskIncrementTick+0x168>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018062:	429a      	cmp	r2, r3
 8018064:	d3b8      	bcc.n	8017fd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018066:	2301      	movs	r3, #1
 8018068:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801806a:	e7b5      	b.n	8017fd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801806c:	4b17      	ldr	r3, [pc, #92]	; (80180cc <xTaskIncrementTick+0x168>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018072:	4915      	ldr	r1, [pc, #84]	; (80180c8 <xTaskIncrementTick+0x164>)
 8018074:	4613      	mov	r3, r2
 8018076:	009b      	lsls	r3, r3, #2
 8018078:	4413      	add	r3, r2
 801807a:	009b      	lsls	r3, r3, #2
 801807c:	440b      	add	r3, r1
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	2b01      	cmp	r3, #1
 8018082:	d901      	bls.n	8018088 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018084:	2301      	movs	r3, #1
 8018086:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018088:	4b11      	ldr	r3, [pc, #68]	; (80180d0 <xTaskIncrementTick+0x16c>)
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d007      	beq.n	80180a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018090:	2301      	movs	r3, #1
 8018092:	617b      	str	r3, [r7, #20]
 8018094:	e004      	b.n	80180a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018096:	4b0f      	ldr	r3, [pc, #60]	; (80180d4 <xTaskIncrementTick+0x170>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	3301      	adds	r3, #1
 801809c:	4a0d      	ldr	r2, [pc, #52]	; (80180d4 <xTaskIncrementTick+0x170>)
 801809e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80180a0:	697b      	ldr	r3, [r7, #20]
}
 80180a2:	4618      	mov	r0, r3
 80180a4:	3718      	adds	r7, #24
 80180a6:	46bd      	mov	sp, r7
 80180a8:	bd80      	pop	{r7, pc}
 80180aa:	bf00      	nop
 80180ac:	24025110 	.word	0x24025110
 80180b0:	240250ec 	.word	0x240250ec
 80180b4:	240250a0 	.word	0x240250a0
 80180b8:	240250a4 	.word	0x240250a4
 80180bc:	24025100 	.word	0x24025100
 80180c0:	24025108 	.word	0x24025108
 80180c4:	240250f0 	.word	0x240250f0
 80180c8:	24024c18 	.word	0x24024c18
 80180cc:	24024c14 	.word	0x24024c14
 80180d0:	240250fc 	.word	0x240250fc
 80180d4:	240250f8 	.word	0x240250f8

080180d8 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b084      	sub	sp, #16
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
 80180e0:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d103      	bne.n	80180f0 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80180e8:	4b08      	ldr	r3, [pc, #32]	; (801810c <vTaskSetApplicationTaskTag+0x34>)
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	60fb      	str	r3, [r7, #12]
 80180ee:	e001      	b.n	80180f4 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80180f4:	f7fe fa4e 	bl	8016594 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	683a      	ldr	r2, [r7, #0]
 80180fc:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80180fe:	f7fe fa79 	bl	80165f4 <vPortExitCritical>
	}
 8018102:	bf00      	nop
 8018104:	3710      	adds	r7, #16
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}
 801810a:	bf00      	nop
 801810c:	24024c14 	.word	0x24024c14

08018110 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8018110:	b580      	push	{r7, lr}
 8018112:	b084      	sub	sp, #16
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
 8018118:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d103      	bne.n	8018128 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = pxCurrentTCB;
 8018120:	4b0b      	ldr	r3, [pc, #44]	; (8018150 <xTaskCallApplicationTaskHook+0x40>)
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	60fb      	str	r3, [r7, #12]
 8018126:	e001      	b.n	801812c <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = xTask;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018130:	2b00      	cmp	r3, #0
 8018132:	d005      	beq.n	8018140 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018138:	6838      	ldr	r0, [r7, #0]
 801813a:	4798      	blx	r3
 801813c:	60b8      	str	r0, [r7, #8]
 801813e:	e001      	b.n	8018144 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8018140:	2300      	movs	r3, #0
 8018142:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8018144:	68bb      	ldr	r3, [r7, #8]
	}
 8018146:	4618      	mov	r0, r3
 8018148:	3710      	adds	r7, #16
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}
 801814e:	bf00      	nop
 8018150:	24024c14 	.word	0x24024c14

08018154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b084      	sub	sp, #16
 8018158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801815a:	4b2d      	ldr	r3, [pc, #180]	; (8018210 <vTaskSwitchContext+0xbc>)
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d003      	beq.n	801816a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018162:	4b2c      	ldr	r3, [pc, #176]	; (8018214 <vTaskSwitchContext+0xc0>)
 8018164:	2201      	movs	r2, #1
 8018166:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018168:	e04d      	b.n	8018206 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 801816a:	4b2a      	ldr	r3, [pc, #168]	; (8018214 <vTaskSwitchContext+0xc0>)
 801816c:	2200      	movs	r2, #0
 801816e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8018170:	4b29      	ldr	r3, [pc, #164]	; (8018218 <vTaskSwitchContext+0xc4>)
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	2101      	movs	r1, #1
 8018176:	4618      	mov	r0, r3
 8018178:	f7ff ffca 	bl	8018110 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801817c:	4b27      	ldr	r3, [pc, #156]	; (801821c <vTaskSwitchContext+0xc8>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	60fb      	str	r3, [r7, #12]
 8018182:	e010      	b.n	80181a6 <vTaskSwitchContext+0x52>
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d10a      	bne.n	80181a0 <vTaskSwitchContext+0x4c>
	__asm volatile
 801818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801818e:	f383 8811 	msr	BASEPRI, r3
 8018192:	f3bf 8f6f 	isb	sy
 8018196:	f3bf 8f4f 	dsb	sy
 801819a:	607b      	str	r3, [r7, #4]
}
 801819c:	bf00      	nop
 801819e:	e7fe      	b.n	801819e <vTaskSwitchContext+0x4a>
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	3b01      	subs	r3, #1
 80181a4:	60fb      	str	r3, [r7, #12]
 80181a6:	491e      	ldr	r1, [pc, #120]	; (8018220 <vTaskSwitchContext+0xcc>)
 80181a8:	68fa      	ldr	r2, [r7, #12]
 80181aa:	4613      	mov	r3, r2
 80181ac:	009b      	lsls	r3, r3, #2
 80181ae:	4413      	add	r3, r2
 80181b0:	009b      	lsls	r3, r3, #2
 80181b2:	440b      	add	r3, r1
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d0e4      	beq.n	8018184 <vTaskSwitchContext+0x30>
 80181ba:	68fa      	ldr	r2, [r7, #12]
 80181bc:	4613      	mov	r3, r2
 80181be:	009b      	lsls	r3, r3, #2
 80181c0:	4413      	add	r3, r2
 80181c2:	009b      	lsls	r3, r3, #2
 80181c4:	4a16      	ldr	r2, [pc, #88]	; (8018220 <vTaskSwitchContext+0xcc>)
 80181c6:	4413      	add	r3, r2
 80181c8:	60bb      	str	r3, [r7, #8]
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	685b      	ldr	r3, [r3, #4]
 80181ce:	685a      	ldr	r2, [r3, #4]
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	605a      	str	r2, [r3, #4]
 80181d4:	68bb      	ldr	r3, [r7, #8]
 80181d6:	685a      	ldr	r2, [r3, #4]
 80181d8:	68bb      	ldr	r3, [r7, #8]
 80181da:	3308      	adds	r3, #8
 80181dc:	429a      	cmp	r2, r3
 80181de:	d104      	bne.n	80181ea <vTaskSwitchContext+0x96>
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	685b      	ldr	r3, [r3, #4]
 80181e4:	685a      	ldr	r2, [r3, #4]
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	605a      	str	r2, [r3, #4]
 80181ea:	68bb      	ldr	r3, [r7, #8]
 80181ec:	685b      	ldr	r3, [r3, #4]
 80181ee:	68db      	ldr	r3, [r3, #12]
 80181f0:	4a09      	ldr	r2, [pc, #36]	; (8018218 <vTaskSwitchContext+0xc4>)
 80181f2:	6013      	str	r3, [r2, #0]
 80181f4:	4a09      	ldr	r2, [pc, #36]	; (801821c <vTaskSwitchContext+0xc8>)
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80181fa:	4b07      	ldr	r3, [pc, #28]	; (8018218 <vTaskSwitchContext+0xc4>)
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	2100      	movs	r1, #0
 8018200:	4618      	mov	r0, r3
 8018202:	f7ff ff85 	bl	8018110 <xTaskCallApplicationTaskHook>
}
 8018206:	bf00      	nop
 8018208:	3710      	adds	r7, #16
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	24025110 	.word	0x24025110
 8018214:	240250fc 	.word	0x240250fc
 8018218:	24024c14 	.word	0x24024c14
 801821c:	240250f0 	.word	0x240250f0
 8018220:	24024c18 	.word	0x24024c18

08018224 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b084      	sub	sp, #16
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
 801822c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d10a      	bne.n	801824a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018238:	f383 8811 	msr	BASEPRI, r3
 801823c:	f3bf 8f6f 	isb	sy
 8018240:	f3bf 8f4f 	dsb	sy
 8018244:	60fb      	str	r3, [r7, #12]
}
 8018246:	bf00      	nop
 8018248:	e7fe      	b.n	8018248 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801824a:	4b07      	ldr	r3, [pc, #28]	; (8018268 <vTaskPlaceOnEventList+0x44>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	3318      	adds	r3, #24
 8018250:	4619      	mov	r1, r3
 8018252:	6878      	ldr	r0, [r7, #4]
 8018254:	f7fe f80b 	bl	801626e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018258:	2101      	movs	r1, #1
 801825a:	6838      	ldr	r0, [r7, #0]
 801825c:	f000 fb8c 	bl	8018978 <prvAddCurrentTaskToDelayedList>
}
 8018260:	bf00      	nop
 8018262:	3710      	adds	r7, #16
 8018264:	46bd      	mov	sp, r7
 8018266:	bd80      	pop	{r7, pc}
 8018268:	24024c14 	.word	0x24024c14

0801826c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801826c:	b580      	push	{r7, lr}
 801826e:	b086      	sub	sp, #24
 8018270:	af00      	add	r7, sp, #0
 8018272:	60f8      	str	r0, [r7, #12]
 8018274:	60b9      	str	r1, [r7, #8]
 8018276:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d10a      	bne.n	8018294 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018282:	f383 8811 	msr	BASEPRI, r3
 8018286:	f3bf 8f6f 	isb	sy
 801828a:	f3bf 8f4f 	dsb	sy
 801828e:	617b      	str	r3, [r7, #20]
}
 8018290:	bf00      	nop
 8018292:	e7fe      	b.n	8018292 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018294:	4b0a      	ldr	r3, [pc, #40]	; (80182c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	3318      	adds	r3, #24
 801829a:	4619      	mov	r1, r3
 801829c:	68f8      	ldr	r0, [r7, #12]
 801829e:	f7fd ffc2 	bl	8016226 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d002      	beq.n	80182ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80182a8:	f04f 33ff 	mov.w	r3, #4294967295
 80182ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80182ae:	6879      	ldr	r1, [r7, #4]
 80182b0:	68b8      	ldr	r0, [r7, #8]
 80182b2:	f000 fb61 	bl	8018978 <prvAddCurrentTaskToDelayedList>
	}
 80182b6:	bf00      	nop
 80182b8:	3718      	adds	r7, #24
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bd80      	pop	{r7, pc}
 80182be:	bf00      	nop
 80182c0:	24024c14 	.word	0x24024c14

080182c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	b086      	sub	sp, #24
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	68db      	ldr	r3, [r3, #12]
 80182d0:	68db      	ldr	r3, [r3, #12]
 80182d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80182d4:	693b      	ldr	r3, [r7, #16]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d10a      	bne.n	80182f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80182da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182de:	f383 8811 	msr	BASEPRI, r3
 80182e2:	f3bf 8f6f 	isb	sy
 80182e6:	f3bf 8f4f 	dsb	sy
 80182ea:	60fb      	str	r3, [r7, #12]
}
 80182ec:	bf00      	nop
 80182ee:	e7fe      	b.n	80182ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80182f0:	693b      	ldr	r3, [r7, #16]
 80182f2:	3318      	adds	r3, #24
 80182f4:	4618      	mov	r0, r3
 80182f6:	f7fd fff3 	bl	80162e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80182fa:	4b1e      	ldr	r3, [pc, #120]	; (8018374 <xTaskRemoveFromEventList+0xb0>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d11d      	bne.n	801833e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018302:	693b      	ldr	r3, [r7, #16]
 8018304:	3304      	adds	r3, #4
 8018306:	4618      	mov	r0, r3
 8018308:	f7fd ffea 	bl	80162e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801830c:	693b      	ldr	r3, [r7, #16]
 801830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018310:	4b19      	ldr	r3, [pc, #100]	; (8018378 <xTaskRemoveFromEventList+0xb4>)
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	429a      	cmp	r2, r3
 8018316:	d903      	bls.n	8018320 <xTaskRemoveFromEventList+0x5c>
 8018318:	693b      	ldr	r3, [r7, #16]
 801831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801831c:	4a16      	ldr	r2, [pc, #88]	; (8018378 <xTaskRemoveFromEventList+0xb4>)
 801831e:	6013      	str	r3, [r2, #0]
 8018320:	693b      	ldr	r3, [r7, #16]
 8018322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018324:	4613      	mov	r3, r2
 8018326:	009b      	lsls	r3, r3, #2
 8018328:	4413      	add	r3, r2
 801832a:	009b      	lsls	r3, r3, #2
 801832c:	4a13      	ldr	r2, [pc, #76]	; (801837c <xTaskRemoveFromEventList+0xb8>)
 801832e:	441a      	add	r2, r3
 8018330:	693b      	ldr	r3, [r7, #16]
 8018332:	3304      	adds	r3, #4
 8018334:	4619      	mov	r1, r3
 8018336:	4610      	mov	r0, r2
 8018338:	f7fd ff75 	bl	8016226 <vListInsertEnd>
 801833c:	e005      	b.n	801834a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801833e:	693b      	ldr	r3, [r7, #16]
 8018340:	3318      	adds	r3, #24
 8018342:	4619      	mov	r1, r3
 8018344:	480e      	ldr	r0, [pc, #56]	; (8018380 <xTaskRemoveFromEventList+0xbc>)
 8018346:	f7fd ff6e 	bl	8016226 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801834a:	693b      	ldr	r3, [r7, #16]
 801834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801834e:	4b0d      	ldr	r3, [pc, #52]	; (8018384 <xTaskRemoveFromEventList+0xc0>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018354:	429a      	cmp	r2, r3
 8018356:	d905      	bls.n	8018364 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018358:	2301      	movs	r3, #1
 801835a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801835c:	4b0a      	ldr	r3, [pc, #40]	; (8018388 <xTaskRemoveFromEventList+0xc4>)
 801835e:	2201      	movs	r2, #1
 8018360:	601a      	str	r2, [r3, #0]
 8018362:	e001      	b.n	8018368 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018364:	2300      	movs	r3, #0
 8018366:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018368:	697b      	ldr	r3, [r7, #20]
}
 801836a:	4618      	mov	r0, r3
 801836c:	3718      	adds	r7, #24
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}
 8018372:	bf00      	nop
 8018374:	24025110 	.word	0x24025110
 8018378:	240250f0 	.word	0x240250f0
 801837c:	24024c18 	.word	0x24024c18
 8018380:	240250a8 	.word	0x240250a8
 8018384:	24024c14 	.word	0x24024c14
 8018388:	240250fc 	.word	0x240250fc

0801838c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801838c:	b480      	push	{r7}
 801838e:	b083      	sub	sp, #12
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018394:	4b06      	ldr	r3, [pc, #24]	; (80183b0 <vTaskInternalSetTimeOutState+0x24>)
 8018396:	681a      	ldr	r2, [r3, #0]
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801839c:	4b05      	ldr	r3, [pc, #20]	; (80183b4 <vTaskInternalSetTimeOutState+0x28>)
 801839e:	681a      	ldr	r2, [r3, #0]
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	605a      	str	r2, [r3, #4]
}
 80183a4:	bf00      	nop
 80183a6:	370c      	adds	r7, #12
 80183a8:	46bd      	mov	sp, r7
 80183aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ae:	4770      	bx	lr
 80183b0:	24025100 	.word	0x24025100
 80183b4:	240250ec 	.word	0x240250ec

080183b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b088      	sub	sp, #32
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
 80183c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d10a      	bne.n	80183de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80183c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183cc:	f383 8811 	msr	BASEPRI, r3
 80183d0:	f3bf 8f6f 	isb	sy
 80183d4:	f3bf 8f4f 	dsb	sy
 80183d8:	613b      	str	r3, [r7, #16]
}
 80183da:	bf00      	nop
 80183dc:	e7fe      	b.n	80183dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80183de:	683b      	ldr	r3, [r7, #0]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d10a      	bne.n	80183fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80183e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183e8:	f383 8811 	msr	BASEPRI, r3
 80183ec:	f3bf 8f6f 	isb	sy
 80183f0:	f3bf 8f4f 	dsb	sy
 80183f4:	60fb      	str	r3, [r7, #12]
}
 80183f6:	bf00      	nop
 80183f8:	e7fe      	b.n	80183f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80183fa:	f7fe f8cb 	bl	8016594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80183fe:	4b1d      	ldr	r3, [pc, #116]	; (8018474 <xTaskCheckForTimeOut+0xbc>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	685b      	ldr	r3, [r3, #4]
 8018408:	69ba      	ldr	r2, [r7, #24]
 801840a:	1ad3      	subs	r3, r2, r3
 801840c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018416:	d102      	bne.n	801841e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018418:	2300      	movs	r3, #0
 801841a:	61fb      	str	r3, [r7, #28]
 801841c:	e023      	b.n	8018466 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	681a      	ldr	r2, [r3, #0]
 8018422:	4b15      	ldr	r3, [pc, #84]	; (8018478 <xTaskCheckForTimeOut+0xc0>)
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	429a      	cmp	r2, r3
 8018428:	d007      	beq.n	801843a <xTaskCheckForTimeOut+0x82>
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	685b      	ldr	r3, [r3, #4]
 801842e:	69ba      	ldr	r2, [r7, #24]
 8018430:	429a      	cmp	r2, r3
 8018432:	d302      	bcc.n	801843a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018434:	2301      	movs	r3, #1
 8018436:	61fb      	str	r3, [r7, #28]
 8018438:	e015      	b.n	8018466 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801843a:	683b      	ldr	r3, [r7, #0]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	697a      	ldr	r2, [r7, #20]
 8018440:	429a      	cmp	r2, r3
 8018442:	d20b      	bcs.n	801845c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018444:	683b      	ldr	r3, [r7, #0]
 8018446:	681a      	ldr	r2, [r3, #0]
 8018448:	697b      	ldr	r3, [r7, #20]
 801844a:	1ad2      	subs	r2, r2, r3
 801844c:	683b      	ldr	r3, [r7, #0]
 801844e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018450:	6878      	ldr	r0, [r7, #4]
 8018452:	f7ff ff9b 	bl	801838c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018456:	2300      	movs	r3, #0
 8018458:	61fb      	str	r3, [r7, #28]
 801845a:	e004      	b.n	8018466 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801845c:	683b      	ldr	r3, [r7, #0]
 801845e:	2200      	movs	r2, #0
 8018460:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018462:	2301      	movs	r3, #1
 8018464:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018466:	f7fe f8c5 	bl	80165f4 <vPortExitCritical>

	return xReturn;
 801846a:	69fb      	ldr	r3, [r7, #28]
}
 801846c:	4618      	mov	r0, r3
 801846e:	3720      	adds	r7, #32
 8018470:	46bd      	mov	sp, r7
 8018472:	bd80      	pop	{r7, pc}
 8018474:	240250ec 	.word	0x240250ec
 8018478:	24025100 	.word	0x24025100

0801847c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801847c:	b480      	push	{r7}
 801847e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018480:	4b03      	ldr	r3, [pc, #12]	; (8018490 <vTaskMissedYield+0x14>)
 8018482:	2201      	movs	r2, #1
 8018484:	601a      	str	r2, [r3, #0]
}
 8018486:	bf00      	nop
 8018488:	46bd      	mov	sp, r7
 801848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848e:	4770      	bx	lr
 8018490:	240250fc 	.word	0x240250fc

08018494 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b082      	sub	sp, #8
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801849c:	f000 f854 	bl	8018548 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80184a0:	4b07      	ldr	r3, [pc, #28]	; (80184c0 <prvIdleTask+0x2c>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	2b01      	cmp	r3, #1
 80184a6:	d907      	bls.n	80184b8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80184a8:	4b06      	ldr	r3, [pc, #24]	; (80184c4 <prvIdleTask+0x30>)
 80184aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80184ae:	601a      	str	r2, [r3, #0]
 80184b0:	f3bf 8f4f 	dsb	sy
 80184b4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80184b8:	f7ed fcbc 	bl	8005e34 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80184bc:	e7ee      	b.n	801849c <prvIdleTask+0x8>
 80184be:	bf00      	nop
 80184c0:	24024c18 	.word	0x24024c18
 80184c4:	e000ed04 	.word	0xe000ed04

080184c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b082      	sub	sp, #8
 80184cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80184ce:	2300      	movs	r3, #0
 80184d0:	607b      	str	r3, [r7, #4]
 80184d2:	e00c      	b.n	80184ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80184d4:	687a      	ldr	r2, [r7, #4]
 80184d6:	4613      	mov	r3, r2
 80184d8:	009b      	lsls	r3, r3, #2
 80184da:	4413      	add	r3, r2
 80184dc:	009b      	lsls	r3, r3, #2
 80184de:	4a12      	ldr	r2, [pc, #72]	; (8018528 <prvInitialiseTaskLists+0x60>)
 80184e0:	4413      	add	r3, r2
 80184e2:	4618      	mov	r0, r3
 80184e4:	f7fd fe72 	bl	80161cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	3301      	adds	r3, #1
 80184ec:	607b      	str	r3, [r7, #4]
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	2b37      	cmp	r3, #55	; 0x37
 80184f2:	d9ef      	bls.n	80184d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80184f4:	480d      	ldr	r0, [pc, #52]	; (801852c <prvInitialiseTaskLists+0x64>)
 80184f6:	f7fd fe69 	bl	80161cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80184fa:	480d      	ldr	r0, [pc, #52]	; (8018530 <prvInitialiseTaskLists+0x68>)
 80184fc:	f7fd fe66 	bl	80161cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018500:	480c      	ldr	r0, [pc, #48]	; (8018534 <prvInitialiseTaskLists+0x6c>)
 8018502:	f7fd fe63 	bl	80161cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018506:	480c      	ldr	r0, [pc, #48]	; (8018538 <prvInitialiseTaskLists+0x70>)
 8018508:	f7fd fe60 	bl	80161cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801850c:	480b      	ldr	r0, [pc, #44]	; (801853c <prvInitialiseTaskLists+0x74>)
 801850e:	f7fd fe5d 	bl	80161cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018512:	4b0b      	ldr	r3, [pc, #44]	; (8018540 <prvInitialiseTaskLists+0x78>)
 8018514:	4a05      	ldr	r2, [pc, #20]	; (801852c <prvInitialiseTaskLists+0x64>)
 8018516:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018518:	4b0a      	ldr	r3, [pc, #40]	; (8018544 <prvInitialiseTaskLists+0x7c>)
 801851a:	4a05      	ldr	r2, [pc, #20]	; (8018530 <prvInitialiseTaskLists+0x68>)
 801851c:	601a      	str	r2, [r3, #0]
}
 801851e:	bf00      	nop
 8018520:	3708      	adds	r7, #8
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}
 8018526:	bf00      	nop
 8018528:	24024c18 	.word	0x24024c18
 801852c:	24025078 	.word	0x24025078
 8018530:	2402508c 	.word	0x2402508c
 8018534:	240250a8 	.word	0x240250a8
 8018538:	240250bc 	.word	0x240250bc
 801853c:	240250d4 	.word	0x240250d4
 8018540:	240250a0 	.word	0x240250a0
 8018544:	240250a4 	.word	0x240250a4

08018548 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b082      	sub	sp, #8
 801854c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801854e:	e019      	b.n	8018584 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018550:	f7fe f820 	bl	8016594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018554:	4b10      	ldr	r3, [pc, #64]	; (8018598 <prvCheckTasksWaitingTermination+0x50>)
 8018556:	68db      	ldr	r3, [r3, #12]
 8018558:	68db      	ldr	r3, [r3, #12]
 801855a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	3304      	adds	r3, #4
 8018560:	4618      	mov	r0, r3
 8018562:	f7fd febd 	bl	80162e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018566:	4b0d      	ldr	r3, [pc, #52]	; (801859c <prvCheckTasksWaitingTermination+0x54>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	3b01      	subs	r3, #1
 801856c:	4a0b      	ldr	r2, [pc, #44]	; (801859c <prvCheckTasksWaitingTermination+0x54>)
 801856e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018570:	4b0b      	ldr	r3, [pc, #44]	; (80185a0 <prvCheckTasksWaitingTermination+0x58>)
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	3b01      	subs	r3, #1
 8018576:	4a0a      	ldr	r2, [pc, #40]	; (80185a0 <prvCheckTasksWaitingTermination+0x58>)
 8018578:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801857a:	f7fe f83b 	bl	80165f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801857e:	6878      	ldr	r0, [r7, #4]
 8018580:	f000 f810 	bl	80185a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018584:	4b06      	ldr	r3, [pc, #24]	; (80185a0 <prvCheckTasksWaitingTermination+0x58>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d1e1      	bne.n	8018550 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801858c:	bf00      	nop
 801858e:	bf00      	nop
 8018590:	3708      	adds	r7, #8
 8018592:	46bd      	mov	sp, r7
 8018594:	bd80      	pop	{r7, pc}
 8018596:	bf00      	nop
 8018598:	240250bc 	.word	0x240250bc
 801859c:	240250e8 	.word	0x240250e8
 80185a0:	240250d0 	.word	0x240250d0

080185a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80185a4:	b580      	push	{r7, lr}
 80185a6:	b084      	sub	sp, #16
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d108      	bne.n	80185c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185ba:	4618      	mov	r0, r3
 80185bc:	f7fd fce6 	bl	8015f8c <vPortFree>
				vPortFree( pxTCB );
 80185c0:	6878      	ldr	r0, [r7, #4]
 80185c2:	f7fd fce3 	bl	8015f8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80185c6:	e018      	b.n	80185fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80185ce:	2b01      	cmp	r3, #1
 80185d0:	d103      	bne.n	80185da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80185d2:	6878      	ldr	r0, [r7, #4]
 80185d4:	f7fd fcda 	bl	8015f8c <vPortFree>
	}
 80185d8:	e00f      	b.n	80185fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80185e0:	2b02      	cmp	r3, #2
 80185e2:	d00a      	beq.n	80185fa <prvDeleteTCB+0x56>
	__asm volatile
 80185e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185e8:	f383 8811 	msr	BASEPRI, r3
 80185ec:	f3bf 8f6f 	isb	sy
 80185f0:	f3bf 8f4f 	dsb	sy
 80185f4:	60fb      	str	r3, [r7, #12]
}
 80185f6:	bf00      	nop
 80185f8:	e7fe      	b.n	80185f8 <prvDeleteTCB+0x54>
	}
 80185fa:	bf00      	nop
 80185fc:	3710      	adds	r7, #16
 80185fe:	46bd      	mov	sp, r7
 8018600:	bd80      	pop	{r7, pc}
	...

08018604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018604:	b480      	push	{r7}
 8018606:	b083      	sub	sp, #12
 8018608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801860a:	4b0c      	ldr	r3, [pc, #48]	; (801863c <prvResetNextTaskUnblockTime+0x38>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d104      	bne.n	801861e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018614:	4b0a      	ldr	r3, [pc, #40]	; (8018640 <prvResetNextTaskUnblockTime+0x3c>)
 8018616:	f04f 32ff 	mov.w	r2, #4294967295
 801861a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801861c:	e008      	b.n	8018630 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801861e:	4b07      	ldr	r3, [pc, #28]	; (801863c <prvResetNextTaskUnblockTime+0x38>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	68db      	ldr	r3, [r3, #12]
 8018624:	68db      	ldr	r3, [r3, #12]
 8018626:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	685b      	ldr	r3, [r3, #4]
 801862c:	4a04      	ldr	r2, [pc, #16]	; (8018640 <prvResetNextTaskUnblockTime+0x3c>)
 801862e:	6013      	str	r3, [r2, #0]
}
 8018630:	bf00      	nop
 8018632:	370c      	adds	r7, #12
 8018634:	46bd      	mov	sp, r7
 8018636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863a:	4770      	bx	lr
 801863c:	240250a0 	.word	0x240250a0
 8018640:	24025108 	.word	0x24025108

08018644 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018644:	b480      	push	{r7}
 8018646:	b083      	sub	sp, #12
 8018648:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801864a:	4b05      	ldr	r3, [pc, #20]	; (8018660 <xTaskGetCurrentTaskHandle+0x1c>)
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018650:	687b      	ldr	r3, [r7, #4]
	}
 8018652:	4618      	mov	r0, r3
 8018654:	370c      	adds	r7, #12
 8018656:	46bd      	mov	sp, r7
 8018658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865c:	4770      	bx	lr
 801865e:	bf00      	nop
 8018660:	24024c14 	.word	0x24024c14

08018664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018664:	b480      	push	{r7}
 8018666:	b083      	sub	sp, #12
 8018668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801866a:	4b0b      	ldr	r3, [pc, #44]	; (8018698 <xTaskGetSchedulerState+0x34>)
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d102      	bne.n	8018678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018672:	2301      	movs	r3, #1
 8018674:	607b      	str	r3, [r7, #4]
 8018676:	e008      	b.n	801868a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018678:	4b08      	ldr	r3, [pc, #32]	; (801869c <xTaskGetSchedulerState+0x38>)
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d102      	bne.n	8018686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018680:	2302      	movs	r3, #2
 8018682:	607b      	str	r3, [r7, #4]
 8018684:	e001      	b.n	801868a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018686:	2300      	movs	r3, #0
 8018688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801868a:	687b      	ldr	r3, [r7, #4]
	}
 801868c:	4618      	mov	r0, r3
 801868e:	370c      	adds	r7, #12
 8018690:	46bd      	mov	sp, r7
 8018692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018696:	4770      	bx	lr
 8018698:	240250f4 	.word	0x240250f4
 801869c:	24025110 	.word	0x24025110

080186a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b084      	sub	sp, #16
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80186ac:	2300      	movs	r3, #0
 80186ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d051      	beq.n	801875a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80186b6:	68bb      	ldr	r3, [r7, #8]
 80186b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186ba:	4b2a      	ldr	r3, [pc, #168]	; (8018764 <xTaskPriorityInherit+0xc4>)
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d241      	bcs.n	8018748 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80186c4:	68bb      	ldr	r3, [r7, #8]
 80186c6:	699b      	ldr	r3, [r3, #24]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	db06      	blt.n	80186da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186cc:	4b25      	ldr	r3, [pc, #148]	; (8018764 <xTaskPriorityInherit+0xc4>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80186d6:	68bb      	ldr	r3, [r7, #8]
 80186d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	6959      	ldr	r1, [r3, #20]
 80186de:	68bb      	ldr	r3, [r7, #8]
 80186e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186e2:	4613      	mov	r3, r2
 80186e4:	009b      	lsls	r3, r3, #2
 80186e6:	4413      	add	r3, r2
 80186e8:	009b      	lsls	r3, r3, #2
 80186ea:	4a1f      	ldr	r2, [pc, #124]	; (8018768 <xTaskPriorityInherit+0xc8>)
 80186ec:	4413      	add	r3, r2
 80186ee:	4299      	cmp	r1, r3
 80186f0:	d122      	bne.n	8018738 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80186f2:	68bb      	ldr	r3, [r7, #8]
 80186f4:	3304      	adds	r3, #4
 80186f6:	4618      	mov	r0, r3
 80186f8:	f7fd fdf2 	bl	80162e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80186fc:	4b19      	ldr	r3, [pc, #100]	; (8018764 <xTaskPriorityInherit+0xc4>)
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018702:	68bb      	ldr	r3, [r7, #8]
 8018704:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018706:	68bb      	ldr	r3, [r7, #8]
 8018708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801870a:	4b18      	ldr	r3, [pc, #96]	; (801876c <xTaskPriorityInherit+0xcc>)
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	429a      	cmp	r2, r3
 8018710:	d903      	bls.n	801871a <xTaskPriorityInherit+0x7a>
 8018712:	68bb      	ldr	r3, [r7, #8]
 8018714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018716:	4a15      	ldr	r2, [pc, #84]	; (801876c <xTaskPriorityInherit+0xcc>)
 8018718:	6013      	str	r3, [r2, #0]
 801871a:	68bb      	ldr	r3, [r7, #8]
 801871c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801871e:	4613      	mov	r3, r2
 8018720:	009b      	lsls	r3, r3, #2
 8018722:	4413      	add	r3, r2
 8018724:	009b      	lsls	r3, r3, #2
 8018726:	4a10      	ldr	r2, [pc, #64]	; (8018768 <xTaskPriorityInherit+0xc8>)
 8018728:	441a      	add	r2, r3
 801872a:	68bb      	ldr	r3, [r7, #8]
 801872c:	3304      	adds	r3, #4
 801872e:	4619      	mov	r1, r3
 8018730:	4610      	mov	r0, r2
 8018732:	f7fd fd78 	bl	8016226 <vListInsertEnd>
 8018736:	e004      	b.n	8018742 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018738:	4b0a      	ldr	r3, [pc, #40]	; (8018764 <xTaskPriorityInherit+0xc4>)
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801873e:	68bb      	ldr	r3, [r7, #8]
 8018740:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018742:	2301      	movs	r3, #1
 8018744:	60fb      	str	r3, [r7, #12]
 8018746:	e008      	b.n	801875a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801874c:	4b05      	ldr	r3, [pc, #20]	; (8018764 <xTaskPriorityInherit+0xc4>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018752:	429a      	cmp	r2, r3
 8018754:	d201      	bcs.n	801875a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018756:	2301      	movs	r3, #1
 8018758:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801875a:	68fb      	ldr	r3, [r7, #12]
	}
 801875c:	4618      	mov	r0, r3
 801875e:	3710      	adds	r7, #16
 8018760:	46bd      	mov	sp, r7
 8018762:	bd80      	pop	{r7, pc}
 8018764:	24024c14 	.word	0x24024c14
 8018768:	24024c18 	.word	0x24024c18
 801876c:	240250f0 	.word	0x240250f0

08018770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018770:	b580      	push	{r7, lr}
 8018772:	b086      	sub	sp, #24
 8018774:	af00      	add	r7, sp, #0
 8018776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801877c:	2300      	movs	r3, #0
 801877e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d056      	beq.n	8018834 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018786:	4b2e      	ldr	r3, [pc, #184]	; (8018840 <xTaskPriorityDisinherit+0xd0>)
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	693a      	ldr	r2, [r7, #16]
 801878c:	429a      	cmp	r2, r3
 801878e:	d00a      	beq.n	80187a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018794:	f383 8811 	msr	BASEPRI, r3
 8018798:	f3bf 8f6f 	isb	sy
 801879c:	f3bf 8f4f 	dsb	sy
 80187a0:	60fb      	str	r3, [r7, #12]
}
 80187a2:	bf00      	nop
 80187a4:	e7fe      	b.n	80187a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80187a6:	693b      	ldr	r3, [r7, #16]
 80187a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d10a      	bne.n	80187c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80187ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187b2:	f383 8811 	msr	BASEPRI, r3
 80187b6:	f3bf 8f6f 	isb	sy
 80187ba:	f3bf 8f4f 	dsb	sy
 80187be:	60bb      	str	r3, [r7, #8]
}
 80187c0:	bf00      	nop
 80187c2:	e7fe      	b.n	80187c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80187c4:	693b      	ldr	r3, [r7, #16]
 80187c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80187c8:	1e5a      	subs	r2, r3, #1
 80187ca:	693b      	ldr	r3, [r7, #16]
 80187cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80187ce:	693b      	ldr	r3, [r7, #16]
 80187d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187d2:	693b      	ldr	r3, [r7, #16]
 80187d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80187d6:	429a      	cmp	r2, r3
 80187d8:	d02c      	beq.n	8018834 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80187da:	693b      	ldr	r3, [r7, #16]
 80187dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d128      	bne.n	8018834 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80187e2:	693b      	ldr	r3, [r7, #16]
 80187e4:	3304      	adds	r3, #4
 80187e6:	4618      	mov	r0, r3
 80187e8:	f7fd fd7a 	bl	80162e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80187f0:	693b      	ldr	r3, [r7, #16]
 80187f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80187f4:	693b      	ldr	r3, [r7, #16]
 80187f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80187fc:	693b      	ldr	r3, [r7, #16]
 80187fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018800:	693b      	ldr	r3, [r7, #16]
 8018802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018804:	4b0f      	ldr	r3, [pc, #60]	; (8018844 <xTaskPriorityDisinherit+0xd4>)
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	429a      	cmp	r2, r3
 801880a:	d903      	bls.n	8018814 <xTaskPriorityDisinherit+0xa4>
 801880c:	693b      	ldr	r3, [r7, #16]
 801880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018810:	4a0c      	ldr	r2, [pc, #48]	; (8018844 <xTaskPriorityDisinherit+0xd4>)
 8018812:	6013      	str	r3, [r2, #0]
 8018814:	693b      	ldr	r3, [r7, #16]
 8018816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018818:	4613      	mov	r3, r2
 801881a:	009b      	lsls	r3, r3, #2
 801881c:	4413      	add	r3, r2
 801881e:	009b      	lsls	r3, r3, #2
 8018820:	4a09      	ldr	r2, [pc, #36]	; (8018848 <xTaskPriorityDisinherit+0xd8>)
 8018822:	441a      	add	r2, r3
 8018824:	693b      	ldr	r3, [r7, #16]
 8018826:	3304      	adds	r3, #4
 8018828:	4619      	mov	r1, r3
 801882a:	4610      	mov	r0, r2
 801882c:	f7fd fcfb 	bl	8016226 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018830:	2301      	movs	r3, #1
 8018832:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018834:	697b      	ldr	r3, [r7, #20]
	}
 8018836:	4618      	mov	r0, r3
 8018838:	3718      	adds	r7, #24
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}
 801883e:	bf00      	nop
 8018840:	24024c14 	.word	0x24024c14
 8018844:	240250f0 	.word	0x240250f0
 8018848:	24024c18 	.word	0x24024c18

0801884c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801884c:	b580      	push	{r7, lr}
 801884e:	b088      	sub	sp, #32
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
 8018854:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801885a:	2301      	movs	r3, #1
 801885c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d06a      	beq.n	801893a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018864:	69bb      	ldr	r3, [r7, #24]
 8018866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018868:	2b00      	cmp	r3, #0
 801886a:	d10a      	bne.n	8018882 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018870:	f383 8811 	msr	BASEPRI, r3
 8018874:	f3bf 8f6f 	isb	sy
 8018878:	f3bf 8f4f 	dsb	sy
 801887c:	60fb      	str	r3, [r7, #12]
}
 801887e:	bf00      	nop
 8018880:	e7fe      	b.n	8018880 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018882:	69bb      	ldr	r3, [r7, #24]
 8018884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018886:	683a      	ldr	r2, [r7, #0]
 8018888:	429a      	cmp	r2, r3
 801888a:	d902      	bls.n	8018892 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801888c:	683b      	ldr	r3, [r7, #0]
 801888e:	61fb      	str	r3, [r7, #28]
 8018890:	e002      	b.n	8018898 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018892:	69bb      	ldr	r3, [r7, #24]
 8018894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018896:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018898:	69bb      	ldr	r3, [r7, #24]
 801889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801889c:	69fa      	ldr	r2, [r7, #28]
 801889e:	429a      	cmp	r2, r3
 80188a0:	d04b      	beq.n	801893a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80188a2:	69bb      	ldr	r3, [r7, #24]
 80188a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188a6:	697a      	ldr	r2, [r7, #20]
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d146      	bne.n	801893a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80188ac:	4b25      	ldr	r3, [pc, #148]	; (8018944 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	69ba      	ldr	r2, [r7, #24]
 80188b2:	429a      	cmp	r2, r3
 80188b4:	d10a      	bne.n	80188cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80188b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ba:	f383 8811 	msr	BASEPRI, r3
 80188be:	f3bf 8f6f 	isb	sy
 80188c2:	f3bf 8f4f 	dsb	sy
 80188c6:	60bb      	str	r3, [r7, #8]
}
 80188c8:	bf00      	nop
 80188ca:	e7fe      	b.n	80188ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80188cc:	69bb      	ldr	r3, [r7, #24]
 80188ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80188d2:	69bb      	ldr	r3, [r7, #24]
 80188d4:	69fa      	ldr	r2, [r7, #28]
 80188d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80188d8:	69bb      	ldr	r3, [r7, #24]
 80188da:	699b      	ldr	r3, [r3, #24]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	db04      	blt.n	80188ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80188e0:	69fb      	ldr	r3, [r7, #28]
 80188e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80188e6:	69bb      	ldr	r3, [r7, #24]
 80188e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80188ea:	69bb      	ldr	r3, [r7, #24]
 80188ec:	6959      	ldr	r1, [r3, #20]
 80188ee:	693a      	ldr	r2, [r7, #16]
 80188f0:	4613      	mov	r3, r2
 80188f2:	009b      	lsls	r3, r3, #2
 80188f4:	4413      	add	r3, r2
 80188f6:	009b      	lsls	r3, r3, #2
 80188f8:	4a13      	ldr	r2, [pc, #76]	; (8018948 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80188fa:	4413      	add	r3, r2
 80188fc:	4299      	cmp	r1, r3
 80188fe:	d11c      	bne.n	801893a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018900:	69bb      	ldr	r3, [r7, #24]
 8018902:	3304      	adds	r3, #4
 8018904:	4618      	mov	r0, r3
 8018906:	f7fd fceb 	bl	80162e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801890a:	69bb      	ldr	r3, [r7, #24]
 801890c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801890e:	4b0f      	ldr	r3, [pc, #60]	; (801894c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	429a      	cmp	r2, r3
 8018914:	d903      	bls.n	801891e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8018916:	69bb      	ldr	r3, [r7, #24]
 8018918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801891a:	4a0c      	ldr	r2, [pc, #48]	; (801894c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801891c:	6013      	str	r3, [r2, #0]
 801891e:	69bb      	ldr	r3, [r7, #24]
 8018920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018922:	4613      	mov	r3, r2
 8018924:	009b      	lsls	r3, r3, #2
 8018926:	4413      	add	r3, r2
 8018928:	009b      	lsls	r3, r3, #2
 801892a:	4a07      	ldr	r2, [pc, #28]	; (8018948 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801892c:	441a      	add	r2, r3
 801892e:	69bb      	ldr	r3, [r7, #24]
 8018930:	3304      	adds	r3, #4
 8018932:	4619      	mov	r1, r3
 8018934:	4610      	mov	r0, r2
 8018936:	f7fd fc76 	bl	8016226 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801893a:	bf00      	nop
 801893c:	3720      	adds	r7, #32
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}
 8018942:	bf00      	nop
 8018944:	24024c14 	.word	0x24024c14
 8018948:	24024c18 	.word	0x24024c18
 801894c:	240250f0 	.word	0x240250f0

08018950 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018950:	b480      	push	{r7}
 8018952:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018954:	4b07      	ldr	r3, [pc, #28]	; (8018974 <pvTaskIncrementMutexHeldCount+0x24>)
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d004      	beq.n	8018966 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801895c:	4b05      	ldr	r3, [pc, #20]	; (8018974 <pvTaskIncrementMutexHeldCount+0x24>)
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018962:	3201      	adds	r2, #1
 8018964:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018966:	4b03      	ldr	r3, [pc, #12]	; (8018974 <pvTaskIncrementMutexHeldCount+0x24>)
 8018968:	681b      	ldr	r3, [r3, #0]
	}
 801896a:	4618      	mov	r0, r3
 801896c:	46bd      	mov	sp, r7
 801896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018972:	4770      	bx	lr
 8018974:	24024c14 	.word	0x24024c14

08018978 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b084      	sub	sp, #16
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
 8018980:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018982:	4b21      	ldr	r3, [pc, #132]	; (8018a08 <prvAddCurrentTaskToDelayedList+0x90>)
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018988:	4b20      	ldr	r3, [pc, #128]	; (8018a0c <prvAddCurrentTaskToDelayedList+0x94>)
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	3304      	adds	r3, #4
 801898e:	4618      	mov	r0, r3
 8018990:	f7fd fca6 	bl	80162e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801899a:	d10a      	bne.n	80189b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801899c:	683b      	ldr	r3, [r7, #0]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d007      	beq.n	80189b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80189a2:	4b1a      	ldr	r3, [pc, #104]	; (8018a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	3304      	adds	r3, #4
 80189a8:	4619      	mov	r1, r3
 80189aa:	4819      	ldr	r0, [pc, #100]	; (8018a10 <prvAddCurrentTaskToDelayedList+0x98>)
 80189ac:	f7fd fc3b 	bl	8016226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80189b0:	e026      	b.n	8018a00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80189b2:	68fa      	ldr	r2, [r7, #12]
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	4413      	add	r3, r2
 80189b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80189ba:	4b14      	ldr	r3, [pc, #80]	; (8018a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	68ba      	ldr	r2, [r7, #8]
 80189c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80189c2:	68ba      	ldr	r2, [r7, #8]
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	429a      	cmp	r2, r3
 80189c8:	d209      	bcs.n	80189de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80189ca:	4b12      	ldr	r3, [pc, #72]	; (8018a14 <prvAddCurrentTaskToDelayedList+0x9c>)
 80189cc:	681a      	ldr	r2, [r3, #0]
 80189ce:	4b0f      	ldr	r3, [pc, #60]	; (8018a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	3304      	adds	r3, #4
 80189d4:	4619      	mov	r1, r3
 80189d6:	4610      	mov	r0, r2
 80189d8:	f7fd fc49 	bl	801626e <vListInsert>
}
 80189dc:	e010      	b.n	8018a00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80189de:	4b0e      	ldr	r3, [pc, #56]	; (8018a18 <prvAddCurrentTaskToDelayedList+0xa0>)
 80189e0:	681a      	ldr	r2, [r3, #0]
 80189e2:	4b0a      	ldr	r3, [pc, #40]	; (8018a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	3304      	adds	r3, #4
 80189e8:	4619      	mov	r1, r3
 80189ea:	4610      	mov	r0, r2
 80189ec:	f7fd fc3f 	bl	801626e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80189f0:	4b0a      	ldr	r3, [pc, #40]	; (8018a1c <prvAddCurrentTaskToDelayedList+0xa4>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	68ba      	ldr	r2, [r7, #8]
 80189f6:	429a      	cmp	r2, r3
 80189f8:	d202      	bcs.n	8018a00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80189fa:	4a08      	ldr	r2, [pc, #32]	; (8018a1c <prvAddCurrentTaskToDelayedList+0xa4>)
 80189fc:	68bb      	ldr	r3, [r7, #8]
 80189fe:	6013      	str	r3, [r2, #0]
}
 8018a00:	bf00      	nop
 8018a02:	3710      	adds	r7, #16
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bd80      	pop	{r7, pc}
 8018a08:	240250ec 	.word	0x240250ec
 8018a0c:	24024c14 	.word	0x24024c14
 8018a10:	240250d4 	.word	0x240250d4
 8018a14:	240250a4 	.word	0x240250a4
 8018a18:	240250a0 	.word	0x240250a0
 8018a1c:	24025108 	.word	0x24025108

08018a20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b08a      	sub	sp, #40	; 0x28
 8018a24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018a26:	2300      	movs	r3, #0
 8018a28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018a2a:	f000 fb07 	bl	801903c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018a2e:	4b1c      	ldr	r3, [pc, #112]	; (8018aa0 <xTimerCreateTimerTask+0x80>)
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d021      	beq.n	8018a7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018a36:	2300      	movs	r3, #0
 8018a38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018a3e:	1d3a      	adds	r2, r7, #4
 8018a40:	f107 0108 	add.w	r1, r7, #8
 8018a44:	f107 030c 	add.w	r3, r7, #12
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f7fd f9b9 	bl	8015dc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018a4e:	6879      	ldr	r1, [r7, #4]
 8018a50:	68bb      	ldr	r3, [r7, #8]
 8018a52:	68fa      	ldr	r2, [r7, #12]
 8018a54:	9202      	str	r2, [sp, #8]
 8018a56:	9301      	str	r3, [sp, #4]
 8018a58:	2302      	movs	r3, #2
 8018a5a:	9300      	str	r3, [sp, #0]
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	460a      	mov	r2, r1
 8018a60:	4910      	ldr	r1, [pc, #64]	; (8018aa4 <xTimerCreateTimerTask+0x84>)
 8018a62:	4811      	ldr	r0, [pc, #68]	; (8018aa8 <xTimerCreateTimerTask+0x88>)
 8018a64:	f7fe ff7c 	bl	8017960 <xTaskCreateStatic>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	4a10      	ldr	r2, [pc, #64]	; (8018aac <xTimerCreateTimerTask+0x8c>)
 8018a6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018a6e:	4b0f      	ldr	r3, [pc, #60]	; (8018aac <xTimerCreateTimerTask+0x8c>)
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d001      	beq.n	8018a7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018a76:	2301      	movs	r3, #1
 8018a78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018a7a:	697b      	ldr	r3, [r7, #20]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d10a      	bne.n	8018a96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a84:	f383 8811 	msr	BASEPRI, r3
 8018a88:	f3bf 8f6f 	isb	sy
 8018a8c:	f3bf 8f4f 	dsb	sy
 8018a90:	613b      	str	r3, [r7, #16]
}
 8018a92:	bf00      	nop
 8018a94:	e7fe      	b.n	8018a94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018a96:	697b      	ldr	r3, [r7, #20]
}
 8018a98:	4618      	mov	r0, r3
 8018a9a:	3718      	adds	r7, #24
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd80      	pop	{r7, pc}
 8018aa0:	24025144 	.word	0x24025144
 8018aa4:	0802a8f0 	.word	0x0802a8f0
 8018aa8:	08018be5 	.word	0x08018be5
 8018aac:	24025148 	.word	0x24025148

08018ab0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b08a      	sub	sp, #40	; 0x28
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	60f8      	str	r0, [r7, #12]
 8018ab8:	60b9      	str	r1, [r7, #8]
 8018aba:	607a      	str	r2, [r7, #4]
 8018abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018abe:	2300      	movs	r3, #0
 8018ac0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d10a      	bne.n	8018ade <xTimerGenericCommand+0x2e>
	__asm volatile
 8018ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018acc:	f383 8811 	msr	BASEPRI, r3
 8018ad0:	f3bf 8f6f 	isb	sy
 8018ad4:	f3bf 8f4f 	dsb	sy
 8018ad8:	623b      	str	r3, [r7, #32]
}
 8018ada:	bf00      	nop
 8018adc:	e7fe      	b.n	8018adc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018ade:	4b1a      	ldr	r3, [pc, #104]	; (8018b48 <xTimerGenericCommand+0x98>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d02a      	beq.n	8018b3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018ae6:	68bb      	ldr	r3, [r7, #8]
 8018ae8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	2b05      	cmp	r3, #5
 8018af6:	dc18      	bgt.n	8018b2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018af8:	f7ff fdb4 	bl	8018664 <xTaskGetSchedulerState>
 8018afc:	4603      	mov	r3, r0
 8018afe:	2b02      	cmp	r3, #2
 8018b00:	d109      	bne.n	8018b16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018b02:	4b11      	ldr	r3, [pc, #68]	; (8018b48 <xTimerGenericCommand+0x98>)
 8018b04:	6818      	ldr	r0, [r3, #0]
 8018b06:	f107 0110 	add.w	r1, r7, #16
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b0e:	f7fe f8c1 	bl	8016c94 <xQueueGenericSend>
 8018b12:	6278      	str	r0, [r7, #36]	; 0x24
 8018b14:	e012      	b.n	8018b3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018b16:	4b0c      	ldr	r3, [pc, #48]	; (8018b48 <xTimerGenericCommand+0x98>)
 8018b18:	6818      	ldr	r0, [r3, #0]
 8018b1a:	f107 0110 	add.w	r1, r7, #16
 8018b1e:	2300      	movs	r3, #0
 8018b20:	2200      	movs	r2, #0
 8018b22:	f7fe f8b7 	bl	8016c94 <xQueueGenericSend>
 8018b26:	6278      	str	r0, [r7, #36]	; 0x24
 8018b28:	e008      	b.n	8018b3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018b2a:	4b07      	ldr	r3, [pc, #28]	; (8018b48 <xTimerGenericCommand+0x98>)
 8018b2c:	6818      	ldr	r0, [r3, #0]
 8018b2e:	f107 0110 	add.w	r1, r7, #16
 8018b32:	2300      	movs	r3, #0
 8018b34:	683a      	ldr	r2, [r7, #0]
 8018b36:	f7fe f9ab 	bl	8016e90 <xQueueGenericSendFromISR>
 8018b3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018b3e:	4618      	mov	r0, r3
 8018b40:	3728      	adds	r7, #40	; 0x28
 8018b42:	46bd      	mov	sp, r7
 8018b44:	bd80      	pop	{r7, pc}
 8018b46:	bf00      	nop
 8018b48:	24025144 	.word	0x24025144

08018b4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b088      	sub	sp, #32
 8018b50:	af02      	add	r7, sp, #8
 8018b52:	6078      	str	r0, [r7, #4]
 8018b54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b56:	4b22      	ldr	r3, [pc, #136]	; (8018be0 <prvProcessExpiredTimer+0x94>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	68db      	ldr	r3, [r3, #12]
 8018b5c:	68db      	ldr	r3, [r3, #12]
 8018b5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018b60:	697b      	ldr	r3, [r7, #20]
 8018b62:	3304      	adds	r3, #4
 8018b64:	4618      	mov	r0, r3
 8018b66:	f7fd fbbb 	bl	80162e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018b6a:	697b      	ldr	r3, [r7, #20]
 8018b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b70:	f003 0304 	and.w	r3, r3, #4
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d022      	beq.n	8018bbe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018b78:	697b      	ldr	r3, [r7, #20]
 8018b7a:	699a      	ldr	r2, [r3, #24]
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	18d1      	adds	r1, r2, r3
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	683a      	ldr	r2, [r7, #0]
 8018b84:	6978      	ldr	r0, [r7, #20]
 8018b86:	f000 f8d1 	bl	8018d2c <prvInsertTimerInActiveList>
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d01f      	beq.n	8018bd0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018b90:	2300      	movs	r3, #0
 8018b92:	9300      	str	r3, [sp, #0]
 8018b94:	2300      	movs	r3, #0
 8018b96:	687a      	ldr	r2, [r7, #4]
 8018b98:	2100      	movs	r1, #0
 8018b9a:	6978      	ldr	r0, [r7, #20]
 8018b9c:	f7ff ff88 	bl	8018ab0 <xTimerGenericCommand>
 8018ba0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018ba2:	693b      	ldr	r3, [r7, #16]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d113      	bne.n	8018bd0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bac:	f383 8811 	msr	BASEPRI, r3
 8018bb0:	f3bf 8f6f 	isb	sy
 8018bb4:	f3bf 8f4f 	dsb	sy
 8018bb8:	60fb      	str	r3, [r7, #12]
}
 8018bba:	bf00      	nop
 8018bbc:	e7fe      	b.n	8018bbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018bbe:	697b      	ldr	r3, [r7, #20]
 8018bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018bc4:	f023 0301 	bic.w	r3, r3, #1
 8018bc8:	b2da      	uxtb	r2, r3
 8018bca:	697b      	ldr	r3, [r7, #20]
 8018bcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018bd0:	697b      	ldr	r3, [r7, #20]
 8018bd2:	6a1b      	ldr	r3, [r3, #32]
 8018bd4:	6978      	ldr	r0, [r7, #20]
 8018bd6:	4798      	blx	r3
}
 8018bd8:	bf00      	nop
 8018bda:	3718      	adds	r7, #24
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}
 8018be0:	2402513c 	.word	0x2402513c

08018be4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b084      	sub	sp, #16
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018bec:	f107 0308 	add.w	r3, r7, #8
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	f000 f857 	bl	8018ca4 <prvGetNextExpireTime>
 8018bf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018bf8:	68bb      	ldr	r3, [r7, #8]
 8018bfa:	4619      	mov	r1, r3
 8018bfc:	68f8      	ldr	r0, [r7, #12]
 8018bfe:	f000 f803 	bl	8018c08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018c02:	f000 f8d5 	bl	8018db0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018c06:	e7f1      	b.n	8018bec <prvTimerTask+0x8>

08018c08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b084      	sub	sp, #16
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
 8018c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018c12:	f7ff f8eb 	bl	8017dec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018c16:	f107 0308 	add.w	r3, r7, #8
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	f000 f866 	bl	8018cec <prvSampleTimeNow>
 8018c20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018c22:	68bb      	ldr	r3, [r7, #8]
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d130      	bne.n	8018c8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018c28:	683b      	ldr	r3, [r7, #0]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d10a      	bne.n	8018c44 <prvProcessTimerOrBlockTask+0x3c>
 8018c2e:	687a      	ldr	r2, [r7, #4]
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	429a      	cmp	r2, r3
 8018c34:	d806      	bhi.n	8018c44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018c36:	f7ff f8e7 	bl	8017e08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018c3a:	68f9      	ldr	r1, [r7, #12]
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f7ff ff85 	bl	8018b4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018c42:	e024      	b.n	8018c8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018c44:	683b      	ldr	r3, [r7, #0]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d008      	beq.n	8018c5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018c4a:	4b13      	ldr	r3, [pc, #76]	; (8018c98 <prvProcessTimerOrBlockTask+0x90>)
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d101      	bne.n	8018c58 <prvProcessTimerOrBlockTask+0x50>
 8018c54:	2301      	movs	r3, #1
 8018c56:	e000      	b.n	8018c5a <prvProcessTimerOrBlockTask+0x52>
 8018c58:	2300      	movs	r3, #0
 8018c5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018c5c:	4b0f      	ldr	r3, [pc, #60]	; (8018c9c <prvProcessTimerOrBlockTask+0x94>)
 8018c5e:	6818      	ldr	r0, [r3, #0]
 8018c60:	687a      	ldr	r2, [r7, #4]
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	1ad3      	subs	r3, r2, r3
 8018c66:	683a      	ldr	r2, [r7, #0]
 8018c68:	4619      	mov	r1, r3
 8018c6a:	f7fe fe45 	bl	80178f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018c6e:	f7ff f8cb 	bl	8017e08 <xTaskResumeAll>
 8018c72:	4603      	mov	r3, r0
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d10a      	bne.n	8018c8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018c78:	4b09      	ldr	r3, [pc, #36]	; (8018ca0 <prvProcessTimerOrBlockTask+0x98>)
 8018c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c7e:	601a      	str	r2, [r3, #0]
 8018c80:	f3bf 8f4f 	dsb	sy
 8018c84:	f3bf 8f6f 	isb	sy
}
 8018c88:	e001      	b.n	8018c8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018c8a:	f7ff f8bd 	bl	8017e08 <xTaskResumeAll>
}
 8018c8e:	bf00      	nop
 8018c90:	3710      	adds	r7, #16
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bd80      	pop	{r7, pc}
 8018c96:	bf00      	nop
 8018c98:	24025140 	.word	0x24025140
 8018c9c:	24025144 	.word	0x24025144
 8018ca0:	e000ed04 	.word	0xe000ed04

08018ca4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018ca4:	b480      	push	{r7}
 8018ca6:	b085      	sub	sp, #20
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018cac:	4b0e      	ldr	r3, [pc, #56]	; (8018ce8 <prvGetNextExpireTime+0x44>)
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d101      	bne.n	8018cba <prvGetNextExpireTime+0x16>
 8018cb6:	2201      	movs	r2, #1
 8018cb8:	e000      	b.n	8018cbc <prvGetNextExpireTime+0x18>
 8018cba:	2200      	movs	r2, #0
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d105      	bne.n	8018cd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018cc8:	4b07      	ldr	r3, [pc, #28]	; (8018ce8 <prvGetNextExpireTime+0x44>)
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	68db      	ldr	r3, [r3, #12]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	60fb      	str	r3, [r7, #12]
 8018cd2:	e001      	b.n	8018cd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018cd8:	68fb      	ldr	r3, [r7, #12]
}
 8018cda:	4618      	mov	r0, r3
 8018cdc:	3714      	adds	r7, #20
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce4:	4770      	bx	lr
 8018ce6:	bf00      	nop
 8018ce8:	2402513c 	.word	0x2402513c

08018cec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b084      	sub	sp, #16
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018cf4:	f7ff f926 	bl	8017f44 <xTaskGetTickCount>
 8018cf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018cfa:	4b0b      	ldr	r3, [pc, #44]	; (8018d28 <prvSampleTimeNow+0x3c>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	68fa      	ldr	r2, [r7, #12]
 8018d00:	429a      	cmp	r2, r3
 8018d02:	d205      	bcs.n	8018d10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018d04:	f000 f936 	bl	8018f74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	2201      	movs	r2, #1
 8018d0c:	601a      	str	r2, [r3, #0]
 8018d0e:	e002      	b.n	8018d16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2200      	movs	r2, #0
 8018d14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018d16:	4a04      	ldr	r2, [pc, #16]	; (8018d28 <prvSampleTimeNow+0x3c>)
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018d1c:	68fb      	ldr	r3, [r7, #12]
}
 8018d1e:	4618      	mov	r0, r3
 8018d20:	3710      	adds	r7, #16
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd80      	pop	{r7, pc}
 8018d26:	bf00      	nop
 8018d28:	2402514c 	.word	0x2402514c

08018d2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018d2c:	b580      	push	{r7, lr}
 8018d2e:	b086      	sub	sp, #24
 8018d30:	af00      	add	r7, sp, #0
 8018d32:	60f8      	str	r0, [r7, #12]
 8018d34:	60b9      	str	r1, [r7, #8]
 8018d36:	607a      	str	r2, [r7, #4]
 8018d38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	68ba      	ldr	r2, [r7, #8]
 8018d42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	68fa      	ldr	r2, [r7, #12]
 8018d48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018d4a:	68ba      	ldr	r2, [r7, #8]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	429a      	cmp	r2, r3
 8018d50:	d812      	bhi.n	8018d78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018d52:	687a      	ldr	r2, [r7, #4]
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	1ad2      	subs	r2, r2, r3
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	699b      	ldr	r3, [r3, #24]
 8018d5c:	429a      	cmp	r2, r3
 8018d5e:	d302      	bcc.n	8018d66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018d60:	2301      	movs	r3, #1
 8018d62:	617b      	str	r3, [r7, #20]
 8018d64:	e01b      	b.n	8018d9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018d66:	4b10      	ldr	r3, [pc, #64]	; (8018da8 <prvInsertTimerInActiveList+0x7c>)
 8018d68:	681a      	ldr	r2, [r3, #0]
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	3304      	adds	r3, #4
 8018d6e:	4619      	mov	r1, r3
 8018d70:	4610      	mov	r0, r2
 8018d72:	f7fd fa7c 	bl	801626e <vListInsert>
 8018d76:	e012      	b.n	8018d9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018d78:	687a      	ldr	r2, [r7, #4]
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	429a      	cmp	r2, r3
 8018d7e:	d206      	bcs.n	8018d8e <prvInsertTimerInActiveList+0x62>
 8018d80:	68ba      	ldr	r2, [r7, #8]
 8018d82:	683b      	ldr	r3, [r7, #0]
 8018d84:	429a      	cmp	r2, r3
 8018d86:	d302      	bcc.n	8018d8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018d88:	2301      	movs	r3, #1
 8018d8a:	617b      	str	r3, [r7, #20]
 8018d8c:	e007      	b.n	8018d9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018d8e:	4b07      	ldr	r3, [pc, #28]	; (8018dac <prvInsertTimerInActiveList+0x80>)
 8018d90:	681a      	ldr	r2, [r3, #0]
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	3304      	adds	r3, #4
 8018d96:	4619      	mov	r1, r3
 8018d98:	4610      	mov	r0, r2
 8018d9a:	f7fd fa68 	bl	801626e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018d9e:	697b      	ldr	r3, [r7, #20]
}
 8018da0:	4618      	mov	r0, r3
 8018da2:	3718      	adds	r7, #24
 8018da4:	46bd      	mov	sp, r7
 8018da6:	bd80      	pop	{r7, pc}
 8018da8:	24025140 	.word	0x24025140
 8018dac:	2402513c 	.word	0x2402513c

08018db0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b08e      	sub	sp, #56	; 0x38
 8018db4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018db6:	e0ca      	b.n	8018f4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	da18      	bge.n	8018df0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018dbe:	1d3b      	adds	r3, r7, #4
 8018dc0:	3304      	adds	r3, #4
 8018dc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d10a      	bne.n	8018de0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dce:	f383 8811 	msr	BASEPRI, r3
 8018dd2:	f3bf 8f6f 	isb	sy
 8018dd6:	f3bf 8f4f 	dsb	sy
 8018dda:	61fb      	str	r3, [r7, #28]
}
 8018ddc:	bf00      	nop
 8018dde:	e7fe      	b.n	8018dde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018de6:	6850      	ldr	r0, [r2, #4]
 8018de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018dea:	6892      	ldr	r2, [r2, #8]
 8018dec:	4611      	mov	r1, r2
 8018dee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	f2c0 80aa 	blt.w	8018f4c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dfe:	695b      	ldr	r3, [r3, #20]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d004      	beq.n	8018e0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e06:	3304      	adds	r3, #4
 8018e08:	4618      	mov	r0, r3
 8018e0a:	f7fd fa69 	bl	80162e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018e0e:	463b      	mov	r3, r7
 8018e10:	4618      	mov	r0, r3
 8018e12:	f7ff ff6b 	bl	8018cec <prvSampleTimeNow>
 8018e16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2b09      	cmp	r3, #9
 8018e1c:	f200 8097 	bhi.w	8018f4e <prvProcessReceivedCommands+0x19e>
 8018e20:	a201      	add	r2, pc, #4	; (adr r2, 8018e28 <prvProcessReceivedCommands+0x78>)
 8018e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e26:	bf00      	nop
 8018e28:	08018e51 	.word	0x08018e51
 8018e2c:	08018e51 	.word	0x08018e51
 8018e30:	08018e51 	.word	0x08018e51
 8018e34:	08018ec5 	.word	0x08018ec5
 8018e38:	08018ed9 	.word	0x08018ed9
 8018e3c:	08018f23 	.word	0x08018f23
 8018e40:	08018e51 	.word	0x08018e51
 8018e44:	08018e51 	.word	0x08018e51
 8018e48:	08018ec5 	.word	0x08018ec5
 8018e4c:	08018ed9 	.word	0x08018ed9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e56:	f043 0301 	orr.w	r3, r3, #1
 8018e5a:	b2da      	uxtb	r2, r3
 8018e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018e62:	68ba      	ldr	r2, [r7, #8]
 8018e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e66:	699b      	ldr	r3, [r3, #24]
 8018e68:	18d1      	adds	r1, r2, r3
 8018e6a:	68bb      	ldr	r3, [r7, #8]
 8018e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e70:	f7ff ff5c 	bl	8018d2c <prvInsertTimerInActiveList>
 8018e74:	4603      	mov	r3, r0
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d069      	beq.n	8018f4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e7c:	6a1b      	ldr	r3, [r3, #32]
 8018e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e88:	f003 0304 	and.w	r3, r3, #4
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d05e      	beq.n	8018f4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018e90:	68ba      	ldr	r2, [r7, #8]
 8018e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e94:	699b      	ldr	r3, [r3, #24]
 8018e96:	441a      	add	r2, r3
 8018e98:	2300      	movs	r3, #0
 8018e9a:	9300      	str	r3, [sp, #0]
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	2100      	movs	r1, #0
 8018ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ea2:	f7ff fe05 	bl	8018ab0 <xTimerGenericCommand>
 8018ea6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018ea8:	6a3b      	ldr	r3, [r7, #32]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d14f      	bne.n	8018f4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eb2:	f383 8811 	msr	BASEPRI, r3
 8018eb6:	f3bf 8f6f 	isb	sy
 8018eba:	f3bf 8f4f 	dsb	sy
 8018ebe:	61bb      	str	r3, [r7, #24]
}
 8018ec0:	bf00      	nop
 8018ec2:	e7fe      	b.n	8018ec2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018eca:	f023 0301 	bic.w	r3, r3, #1
 8018ece:	b2da      	uxtb	r2, r3
 8018ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018ed6:	e03a      	b.n	8018f4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ede:	f043 0301 	orr.w	r3, r3, #1
 8018ee2:	b2da      	uxtb	r2, r3
 8018ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018eea:	68ba      	ldr	r2, [r7, #8]
 8018eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ef2:	699b      	ldr	r3, [r3, #24]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d10a      	bne.n	8018f0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018efc:	f383 8811 	msr	BASEPRI, r3
 8018f00:	f3bf 8f6f 	isb	sy
 8018f04:	f3bf 8f4f 	dsb	sy
 8018f08:	617b      	str	r3, [r7, #20]
}
 8018f0a:	bf00      	nop
 8018f0c:	e7fe      	b.n	8018f0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f10:	699a      	ldr	r2, [r3, #24]
 8018f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f14:	18d1      	adds	r1, r2, r3
 8018f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f1c:	f7ff ff06 	bl	8018d2c <prvInsertTimerInActiveList>
					break;
 8018f20:	e015      	b.n	8018f4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f28:	f003 0302 	and.w	r3, r3, #2
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d103      	bne.n	8018f38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f32:	f7fd f82b 	bl	8015f8c <vPortFree>
 8018f36:	e00a      	b.n	8018f4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f3e:	f023 0301 	bic.w	r3, r3, #1
 8018f42:	b2da      	uxtb	r2, r3
 8018f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018f4a:	e000      	b.n	8018f4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018f4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018f4e:	4b08      	ldr	r3, [pc, #32]	; (8018f70 <prvProcessReceivedCommands+0x1c0>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	1d39      	adds	r1, r7, #4
 8018f54:	2200      	movs	r2, #0
 8018f56:	4618      	mov	r0, r3
 8018f58:	f7fe f8c2 	bl	80170e0 <xQueueReceive>
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	f47f af2a 	bne.w	8018db8 <prvProcessReceivedCommands+0x8>
	}
}
 8018f64:	bf00      	nop
 8018f66:	bf00      	nop
 8018f68:	3730      	adds	r7, #48	; 0x30
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	bd80      	pop	{r7, pc}
 8018f6e:	bf00      	nop
 8018f70:	24025144 	.word	0x24025144

08018f74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b088      	sub	sp, #32
 8018f78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018f7a:	e048      	b.n	801900e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018f7c:	4b2d      	ldr	r3, [pc, #180]	; (8019034 <prvSwitchTimerLists+0xc0>)
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	68db      	ldr	r3, [r3, #12]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f86:	4b2b      	ldr	r3, [pc, #172]	; (8019034 <prvSwitchTimerLists+0xc0>)
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	68db      	ldr	r3, [r3, #12]
 8018f8c:	68db      	ldr	r3, [r3, #12]
 8018f8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	3304      	adds	r3, #4
 8018f94:	4618      	mov	r0, r3
 8018f96:	f7fd f9a3 	bl	80162e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	6a1b      	ldr	r3, [r3, #32]
 8018f9e:	68f8      	ldr	r0, [r7, #12]
 8018fa0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fa8:	f003 0304 	and.w	r3, r3, #4
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d02e      	beq.n	801900e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	699b      	ldr	r3, [r3, #24]
 8018fb4:	693a      	ldr	r2, [r7, #16]
 8018fb6:	4413      	add	r3, r2
 8018fb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018fba:	68ba      	ldr	r2, [r7, #8]
 8018fbc:	693b      	ldr	r3, [r7, #16]
 8018fbe:	429a      	cmp	r2, r3
 8018fc0:	d90e      	bls.n	8018fe0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	68ba      	ldr	r2, [r7, #8]
 8018fc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	68fa      	ldr	r2, [r7, #12]
 8018fcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018fce:	4b19      	ldr	r3, [pc, #100]	; (8019034 <prvSwitchTimerLists+0xc0>)
 8018fd0:	681a      	ldr	r2, [r3, #0]
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	3304      	adds	r3, #4
 8018fd6:	4619      	mov	r1, r3
 8018fd8:	4610      	mov	r0, r2
 8018fda:	f7fd f948 	bl	801626e <vListInsert>
 8018fde:	e016      	b.n	801900e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	9300      	str	r3, [sp, #0]
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	693a      	ldr	r2, [r7, #16]
 8018fe8:	2100      	movs	r1, #0
 8018fea:	68f8      	ldr	r0, [r7, #12]
 8018fec:	f7ff fd60 	bl	8018ab0 <xTimerGenericCommand>
 8018ff0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d10a      	bne.n	801900e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ffc:	f383 8811 	msr	BASEPRI, r3
 8019000:	f3bf 8f6f 	isb	sy
 8019004:	f3bf 8f4f 	dsb	sy
 8019008:	603b      	str	r3, [r7, #0]
}
 801900a:	bf00      	nop
 801900c:	e7fe      	b.n	801900c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801900e:	4b09      	ldr	r3, [pc, #36]	; (8019034 <prvSwitchTimerLists+0xc0>)
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d1b1      	bne.n	8018f7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019018:	4b06      	ldr	r3, [pc, #24]	; (8019034 <prvSwitchTimerLists+0xc0>)
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801901e:	4b06      	ldr	r3, [pc, #24]	; (8019038 <prvSwitchTimerLists+0xc4>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	4a04      	ldr	r2, [pc, #16]	; (8019034 <prvSwitchTimerLists+0xc0>)
 8019024:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019026:	4a04      	ldr	r2, [pc, #16]	; (8019038 <prvSwitchTimerLists+0xc4>)
 8019028:	697b      	ldr	r3, [r7, #20]
 801902a:	6013      	str	r3, [r2, #0]
}
 801902c:	bf00      	nop
 801902e:	3718      	adds	r7, #24
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}
 8019034:	2402513c 	.word	0x2402513c
 8019038:	24025140 	.word	0x24025140

0801903c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b082      	sub	sp, #8
 8019040:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019042:	f7fd faa7 	bl	8016594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019046:	4b15      	ldr	r3, [pc, #84]	; (801909c <prvCheckForValidListAndQueue+0x60>)
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d120      	bne.n	8019090 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801904e:	4814      	ldr	r0, [pc, #80]	; (80190a0 <prvCheckForValidListAndQueue+0x64>)
 8019050:	f7fd f8bc 	bl	80161cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019054:	4813      	ldr	r0, [pc, #76]	; (80190a4 <prvCheckForValidListAndQueue+0x68>)
 8019056:	f7fd f8b9 	bl	80161cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801905a:	4b13      	ldr	r3, [pc, #76]	; (80190a8 <prvCheckForValidListAndQueue+0x6c>)
 801905c:	4a10      	ldr	r2, [pc, #64]	; (80190a0 <prvCheckForValidListAndQueue+0x64>)
 801905e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019060:	4b12      	ldr	r3, [pc, #72]	; (80190ac <prvCheckForValidListAndQueue+0x70>)
 8019062:	4a10      	ldr	r2, [pc, #64]	; (80190a4 <prvCheckForValidListAndQueue+0x68>)
 8019064:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019066:	2300      	movs	r3, #0
 8019068:	9300      	str	r3, [sp, #0]
 801906a:	4b11      	ldr	r3, [pc, #68]	; (80190b0 <prvCheckForValidListAndQueue+0x74>)
 801906c:	4a11      	ldr	r2, [pc, #68]	; (80190b4 <prvCheckForValidListAndQueue+0x78>)
 801906e:	2110      	movs	r1, #16
 8019070:	200a      	movs	r0, #10
 8019072:	f7fd fc19 	bl	80168a8 <xQueueGenericCreateStatic>
 8019076:	4603      	mov	r3, r0
 8019078:	4a08      	ldr	r2, [pc, #32]	; (801909c <prvCheckForValidListAndQueue+0x60>)
 801907a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801907c:	4b07      	ldr	r3, [pc, #28]	; (801909c <prvCheckForValidListAndQueue+0x60>)
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d005      	beq.n	8019090 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019084:	4b05      	ldr	r3, [pc, #20]	; (801909c <prvCheckForValidListAndQueue+0x60>)
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	490b      	ldr	r1, [pc, #44]	; (80190b8 <prvCheckForValidListAndQueue+0x7c>)
 801908a:	4618      	mov	r0, r3
 801908c:	f7fe fbe0 	bl	8017850 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019090:	f7fd fab0 	bl	80165f4 <vPortExitCritical>
}
 8019094:	bf00      	nop
 8019096:	46bd      	mov	sp, r7
 8019098:	bd80      	pop	{r7, pc}
 801909a:	bf00      	nop
 801909c:	24025144 	.word	0x24025144
 80190a0:	24025114 	.word	0x24025114
 80190a4:	24025128 	.word	0x24025128
 80190a8:	2402513c 	.word	0x2402513c
 80190ac:	24025140 	.word	0x24025140
 80190b0:	240251f0 	.word	0x240251f0
 80190b4:	24025150 	.word	0x24025150
 80190b8:	0802a8f8 	.word	0x0802a8f8

080190bc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80190bc:	b480      	push	{r7}
 80190be:	b097      	sub	sp, #92	; 0x5c
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	60f8      	str	r0, [r7, #12]
 80190c4:	60b9      	str	r1, [r7, #8]
 80190c6:	607a      	str	r2, [r7, #4]
 80190c8:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 80190ca:	683b      	ldr	r3, [r7, #0]
 80190cc:	4a9a      	ldr	r2, [pc, #616]	; (8019338 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x27c>)
 80190ce:	fba2 2303 	umull	r2, r3, r2, r3
 80190d2:	0a1b      	lsrs	r3, r3, #8
 80190d4:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 80190da:	e11e      	b.n	801931a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25e>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80190dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80190de:	011a      	lsls	r2, r3, #4
 80190e0:	4b96      	ldr	r3, [pc, #600]	; (801933c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80190e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80190e8:	011b      	lsls	r3, r3, #4
 80190ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80190ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80190ee:	011b      	lsls	r3, r3, #4
 80190f0:	4a92      	ldr	r2, [pc, #584]	; (801933c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80190f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80190f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80190f8:	fb01 f202 	mul.w	r2, r1, r2
 80190fc:	1a9b      	subs	r3, r3, r2
 80190fe:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019100:	4b8e      	ldr	r3, [pc, #568]	; (801933c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 8019102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019106:	fb02 f103 	mul.w	r1, r2, r3
 801910a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801910c:	4613      	mov	r3, r2
 801910e:	005b      	lsls	r3, r3, #1
 8019110:	4413      	add	r3, r2
 8019112:	440b      	add	r3, r1
 8019114:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8019116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019118:	3301      	adds	r3, #1
 801911a:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019122:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  16; i+=2)
 8019128:	2300      	movs	r3, #0
 801912a:	657b      	str	r3, [r7, #84]	; 0x54
 801912c:	e0ed      	b.n	801930a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24e>
    {
      if(i == 8)
 801912e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019130:	2b08      	cmp	r3, #8
 8019132:	d102      	bne.n	801913a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      {
        pLum = pInBuffer + 128;
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	3380      	adds	r3, #128	; 0x80
 8019138:	637b      	str	r3, [r7, #52]	; 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801913a:	4b80      	ldr	r3, [pc, #512]	; (801933c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 801913c:	691b      	ldr	r3, [r3, #16]
 801913e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019140:	429a      	cmp	r2, r3
 8019142:	f080 80df 	bcs.w	8019304 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x248>
      {
        pOutAddr = pOutBuffer + refline;
 8019146:	68ba      	ldr	r2, [r7, #8]
 8019148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801914a:	4413      	add	r3, r2
 801914c:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 801914e:	4b7b      	ldr	r3, [pc, #492]	; (801933c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 8019150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019154:	4413      	add	r3, r2
 8019156:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        for(k= 0; k<2; k++)
 8019158:	2300      	movs	r3, #0
 801915a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801915c:	e0c5      	b.n	80192ea <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22e>
        {
          for(j=0; j < 8; j+=2)
 801915e:	2300      	movs	r3, #0
 8019160:	653b      	str	r3, [r7, #80]	; 0x50
 8019162:	e0b8      	b.n	80192d6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21a>
          {           
            cbcomp = (int32_t)(*(pChrom));
 8019164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019166:	781b      	ldrb	r3, [r3, #0]
 8019168:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801916c:	009b      	lsls	r3, r3, #2
 801916e:	4a74      	ldr	r2, [pc, #464]	; (8019340 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x284>)
 8019170:	4413      	add	r3, r2
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8019176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019178:	3340      	adds	r3, #64	; 0x40
 801917a:	781b      	ldrb	r3, [r3, #0]
 801917c:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 801917e:	69fb      	ldr	r3, [r7, #28]
 8019180:	009b      	lsls	r3, r3, #2
 8019182:	4a70      	ldr	r2, [pc, #448]	; (8019344 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x288>)
 8019184:	4413      	add	r3, r2
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801918a:	69fb      	ldr	r3, [r7, #28]
 801918c:	009b      	lsls	r3, r3, #2
 801918e:	4a6e      	ldr	r2, [pc, #440]	; (8019348 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 8019190:	4413      	add	r3, r2
 8019192:	681a      	ldr	r2, [r3, #0]
 8019194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019196:	009b      	lsls	r3, r3, #2
 8019198:	496c      	ldr	r1, [pc, #432]	; (801934c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 801919a:	440b      	add	r3, r1
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	4413      	add	r3, r2
 80191a0:	141b      	asrs	r3, r3, #16
 80191a2:	617b      	str	r3, [r7, #20]
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 80191a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80191a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191a8:	4413      	add	r3, r2
 80191aa:	781b      	ldrb	r3, [r3, #0]
 80191ac:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80191ae:	693a      	ldr	r2, [r7, #16]
 80191b0:	69bb      	ldr	r3, [r7, #24]
 80191b2:	4413      	add	r3, r2
 80191b4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80191b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191ba:	3302      	adds	r3, #2
 80191bc:	4964      	ldr	r1, [pc, #400]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80191be:	5c8a      	ldrb	r2, [r1, r2]
 80191c0:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80191c2:	693a      	ldr	r2, [r7, #16]
 80191c4:	697b      	ldr	r3, [r7, #20]
 80191c6:	4413      	add	r3, r2
 80191c8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80191cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191ce:	3301      	adds	r3, #1
 80191d0:	495f      	ldr	r1, [pc, #380]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80191d2:	5c8a      	ldrb	r2, [r1, r2]
 80191d4:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80191d6:	693a      	ldr	r2, [r7, #16]
 80191d8:	6a3b      	ldr	r3, [r7, #32]
 80191da:	4413      	add	r3, r2
 80191dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80191e0:	4a5b      	ldr	r2, [pc, #364]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80191e2:	5cd2      	ldrb	r2, [r2, r3]
 80191e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191e6:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80191e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191ea:	3301      	adds	r3, #1
 80191ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80191ee:	4413      	add	r3, r2
 80191f0:	781b      	ldrb	r3, [r3, #0]
 80191f2:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80191f4:	693a      	ldr	r2, [r7, #16]
 80191f6:	69bb      	ldr	r3, [r7, #24]
 80191f8:	4413      	add	r3, r2
 80191fa:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80191fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019200:	3305      	adds	r3, #5
 8019202:	4953      	ldr	r1, [pc, #332]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019204:	5c8a      	ldrb	r2, [r1, r2]
 8019206:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019208:	693a      	ldr	r2, [r7, #16]
 801920a:	697b      	ldr	r3, [r7, #20]
 801920c:	4413      	add	r3, r2
 801920e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019214:	3304      	adds	r3, #4
 8019216:	494e      	ldr	r1, [pc, #312]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019218:	5c8a      	ldrb	r2, [r1, r2]
 801921a:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 801921c:	693a      	ldr	r2, [r7, #16]
 801921e:	6a3b      	ldr	r3, [r7, #32]
 8019220:	4413      	add	r3, r2
 8019222:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019228:	3303      	adds	r3, #3
 801922a:	4949      	ldr	r1, [pc, #292]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801922c:	5c8a      	ldrb	r2, [r1, r2]
 801922e:	701a      	strb	r2, [r3, #0]

            /**********/            
            ycomp = (int32_t)(*(pLum +j +8));
 8019230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019232:	3308      	adds	r3, #8
 8019234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019236:	4413      	add	r3, r2
 8019238:	781b      	ldrb	r3, [r3, #0]
 801923a:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801923c:	693a      	ldr	r2, [r7, #16]
 801923e:	69bb      	ldr	r3, [r7, #24]
 8019240:	4413      	add	r3, r2
 8019242:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019248:	3302      	adds	r3, #2
 801924a:	4941      	ldr	r1, [pc, #260]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801924c:	5c8a      	ldrb	r2, [r1, r2]
 801924e:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019250:	693a      	ldr	r2, [r7, #16]
 8019252:	697b      	ldr	r3, [r7, #20]
 8019254:	4413      	add	r3, r2
 8019256:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801925a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801925c:	3301      	adds	r3, #1
 801925e:	493c      	ldr	r1, [pc, #240]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019260:	5c8a      	ldrb	r2, [r1, r2]
 8019262:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019264:	693a      	ldr	r2, [r7, #16]
 8019266:	6a3b      	ldr	r3, [r7, #32]
 8019268:	4413      	add	r3, r2
 801926a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801926e:	4a38      	ldr	r2, [pc, #224]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019270:	5cd2      	ldrb	r2, [r2, r3]
 8019272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019274:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));            
 8019276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019278:	3309      	adds	r3, #9
 801927a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801927c:	4413      	add	r3, r2
 801927e:	781b      	ldrb	r3, [r3, #0]
 8019280:	613b      	str	r3, [r7, #16]
            
            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8019282:	693a      	ldr	r2, [r7, #16]
 8019284:	69bb      	ldr	r3, [r7, #24]
 8019286:	4413      	add	r3, r2
 8019288:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801928c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801928e:	3305      	adds	r3, #5
 8019290:	492f      	ldr	r1, [pc, #188]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019292:	5c8a      	ldrb	r2, [r1, r2]
 8019294:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019296:	693a      	ldr	r2, [r7, #16]
 8019298:	697b      	ldr	r3, [r7, #20]
 801929a:	4413      	add	r3, r2
 801929c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80192a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192a2:	3304      	adds	r3, #4
 80192a4:	492a      	ldr	r1, [pc, #168]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80192a6:	5c8a      	ldrb	r2, [r1, r2]
 80192a8:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80192aa:	693a      	ldr	r2, [r7, #16]
 80192ac:	6a3b      	ldr	r3, [r7, #32]
 80192ae:	4413      	add	r3, r2
 80192b0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80192b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192b6:	3303      	adds	r3, #3
 80192b8:	4925      	ldr	r1, [pc, #148]	; (8019350 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80192ba:	5c8a      	ldrb	r2, [r1, r2]
 80192bc:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80192be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192c0:	3306      	adds	r3, #6
 80192c2:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 80192c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192c6:	3306      	adds	r3, #6
 80192c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 80192ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192cc:	3301      	adds	r3, #1
 80192ce:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 80192d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192d2:	3302      	adds	r3, #2
 80192d4:	653b      	str	r3, [r7, #80]	; 0x50
 80192d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192d8:	2b07      	cmp	r3, #7
 80192da:	f67f af43 	bls.w	8019164 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>
          }
          pLum += 64;                      
 80192de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192e0:	3340      	adds	r3, #64	; 0x40
 80192e2:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 80192e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80192e6:	3301      	adds	r3, #1
 80192e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80192ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80192ec:	2b01      	cmp	r3, #1
 80192ee:	f67f af36 	bls.w	801915e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
        }

        pLum = pLum - 128 + 16;
 80192f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192f4:	3b70      	subs	r3, #112	; 0x70
 80192f6:	637b      	str	r3, [r7, #52]	; 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 80192f8:	4b10      	ldr	r3, [pc, #64]	; (801933c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80192fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192fc:	005b      	lsls	r3, r3, #1
 80192fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019300:	4413      	add	r3, r2
 8019302:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 8019304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019306:	3302      	adds	r3, #2
 8019308:	657b      	str	r3, [r7, #84]	; 0x54
 801930a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801930c:	2b0f      	cmp	r3, #15
 801930e:	f67f af0e 	bls.w	801912e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x72>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8019318:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801931a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	4413      	add	r3, r2
 8019320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019322:	429a      	cmp	r2, r3
 8019324:	f4ff aeda 	bcc.w	80190dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8019328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801932a:	4618      	mov	r0, r3
 801932c:	375c      	adds	r7, #92	; 0x5c
 801932e:	46bd      	mov	sp, r7
 8019330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019334:	4770      	bx	lr
 8019336:	bf00      	nop
 8019338:	aaaaaaab 	.word	0xaaaaaaab
 801933c:	24025240 	.word	0x24025240
 8019340:	24025680 	.word	0x24025680
 8019344:	24025280 	.word	0x24025280
 8019348:	24025a80 	.word	0x24025a80
 801934c:	24025e80 	.word	0x24025e80
 8019350:	0802b860 	.word	0x0802b860

08019354 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8019354:	b480      	push	{r7}
 8019356:	b097      	sub	sp, #92	; 0x5c
 8019358:	af00      	add	r7, sp, #0
 801935a:	60f8      	str	r0, [r7, #12]
 801935c:	60b9      	str	r1, [r7, #8]
 801935e:	607a      	str	r2, [r7, #4]
 8019360:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8019362:	683b      	ldr	r3, [r7, #0]
 8019364:	0a1b      	lsrs	r3, r3, #8
 8019366:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801936c:	e0c5      	b.n	80194fa <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801936e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019370:	011a      	lsls	r2, r3, #4
 8019372:	4b69      	ldr	r3, [pc, #420]	; (8019518 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019376:	fbb2 f3f3 	udiv	r3, r2, r3
 801937a:	00db      	lsls	r3, r3, #3
 801937c:	633b      	str	r3, [r7, #48]	; 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801937e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019380:	011b      	lsls	r3, r3, #4
 8019382:	4a65      	ldr	r2, [pc, #404]	; (8019518 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019386:	fbb3 f1f2 	udiv	r1, r3, r2
 801938a:	fb01 f202 	mul.w	r2, r1, r2
 801938e:	1a9b      	subs	r3, r3, r2
 8019390:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019392:	4b61      	ldr	r3, [pc, #388]	; (8019518 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019398:	fb02 f103 	mul.w	r1, r2, r3
 801939c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801939e:	4613      	mov	r3, r2
 80193a0:	005b      	lsls	r3, r3, #1
 80193a2:	4413      	add	r3, r2
 80193a4:	440b      	add	r3, r1
 80193a6:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80193a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80193aa:	3301      	adds	r3, #1
 80193ac:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	3380      	adds	r3, #128	; 0x80
 80193b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pLum = pInBuffer;
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	63bb      	str	r3, [r7, #56]	; 0x38
    
    for(i= 0; i <  8; i++)
 80193b8:	2300      	movs	r3, #0
 80193ba:	657b      	str	r3, [r7, #84]	; 0x54
 80193bc:	e095      	b.n	80194ea <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80193be:	4b56      	ldr	r3, [pc, #344]	; (8019518 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80193c0:	691b      	ldr	r3, [r3, #16]
 80193c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80193c4:	429a      	cmp	r2, r3
 80193c6:	f080 808d 	bcs.w	80194e4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 80193ca:	68ba      	ldr	r2, [r7, #8]
 80193cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193ce:	4413      	add	r3, r2
 80193d0:	643b      	str	r3, [r7, #64]	; 0x40
        
        for(k= 0; k<2; k++)
 80193d2:	2300      	movs	r3, #0
 80193d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80193d6:	e07a      	b.n	80194ce <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 80193d8:	2300      	movs	r3, #0
 80193da:	653b      	str	r3, [r7, #80]	; 0x50
 80193dc:	e06e      	b.n	80194bc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {           
            cbcomp = (int32_t)(*(pChrom));
 80193de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80193e0:	781b      	ldrb	r3, [r3, #0]
 80193e2:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80193e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e6:	009b      	lsls	r3, r3, #2
 80193e8:	4a4c      	ldr	r2, [pc, #304]	; (801951c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 80193ea:	4413      	add	r3, r2
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	627b      	str	r3, [r7, #36]	; 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 80193f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80193f2:	3340      	adds	r3, #64	; 0x40
 80193f4:	781b      	ldrb	r3, [r3, #0]
 80193f6:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80193f8:	6a3b      	ldr	r3, [r7, #32]
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	4a48      	ldr	r2, [pc, #288]	; (8019520 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 80193fe:	4413      	add	r3, r2
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8019404:	6a3b      	ldr	r3, [r7, #32]
 8019406:	009b      	lsls	r3, r3, #2
 8019408:	4a46      	ldr	r2, [pc, #280]	; (8019524 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 801940a:	4413      	add	r3, r2
 801940c:	681a      	ldr	r2, [r3, #0]
 801940e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019410:	009b      	lsls	r3, r3, #2
 8019412:	4945      	ldr	r1, [pc, #276]	; (8019528 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 8019414:	440b      	add	r3, r1
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	4413      	add	r3, r2
 801941a:	141b      	asrs	r3, r3, #16
 801941c:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 801941e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019422:	4413      	add	r3, r2
 8019424:	781b      	ldrb	r3, [r3, #0]
 8019426:	617b      	str	r3, [r7, #20]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8019428:	697a      	ldr	r2, [r7, #20]
 801942a:	69fb      	ldr	r3, [r7, #28]
 801942c:	4413      	add	r3, r2
 801942e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019434:	3302      	adds	r3, #2
 8019436:	493d      	ldr	r1, [pc, #244]	; (801952c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8019438:	5c8a      	ldrb	r2, [r1, r2]
 801943a:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 801943c:	697a      	ldr	r2, [r7, #20]
 801943e:	69bb      	ldr	r3, [r7, #24]
 8019440:	4413      	add	r3, r2
 8019442:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019448:	3301      	adds	r3, #1
 801944a:	4938      	ldr	r1, [pc, #224]	; (801952c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801944c:	5c8a      	ldrb	r2, [r1, r2]
 801944e:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019450:	697a      	ldr	r2, [r7, #20]
 8019452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019454:	4413      	add	r3, r2
 8019456:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801945a:	4a34      	ldr	r2, [pc, #208]	; (801952c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801945c:	5cd2      	ldrb	r2, [r2, r3]
 801945e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019460:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8019462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019464:	3301      	adds	r3, #1
 8019466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019468:	4413      	add	r3, r2
 801946a:	781b      	ldrb	r3, [r3, #0]
 801946c:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801946e:	697a      	ldr	r2, [r7, #20]
 8019470:	69fb      	ldr	r3, [r7, #28]
 8019472:	4413      	add	r3, r2
 8019474:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801947a:	3305      	adds	r3, #5
 801947c:	492b      	ldr	r1, [pc, #172]	; (801952c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801947e:	5c8a      	ldrb	r2, [r1, r2]
 8019480:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019482:	697a      	ldr	r2, [r7, #20]
 8019484:	69bb      	ldr	r3, [r7, #24]
 8019486:	4413      	add	r3, r2
 8019488:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801948c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801948e:	3304      	adds	r3, #4
 8019490:	4926      	ldr	r1, [pc, #152]	; (801952c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8019492:	5c8a      	ldrb	r2, [r1, r2]
 8019494:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019496:	697a      	ldr	r2, [r7, #20]
 8019498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801949a:	4413      	add	r3, r2
 801949c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80194a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194a2:	3303      	adds	r3, #3
 80194a4:	4921      	ldr	r1, [pc, #132]	; (801952c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80194a6:	5c8a      	ldrb	r2, [r1, r2]
 80194a8:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80194aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194ac:	3306      	adds	r3, #6
 80194ae:	643b      	str	r3, [r7, #64]	; 0x40
          
            pChrom++;
 80194b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80194b2:	3301      	adds	r3, #1
 80194b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 80194b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194b8:	3302      	adds	r3, #2
 80194ba:	653b      	str	r3, [r7, #80]	; 0x50
 80194bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194be:	2b07      	cmp	r3, #7
 80194c0:	d98d      	bls.n	80193de <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;                      
 80194c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194c4:	3340      	adds	r3, #64	; 0x40
 80194c6:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 80194c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194ca:	3301      	adds	r3, #1
 80194cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80194ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194d0:	2b01      	cmp	r3, #1
 80194d2:	d981      	bls.n	80193d8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }
        
        pLum = pLum - 128 + 8;
 80194d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194d6:	3b78      	subs	r3, #120	; 0x78
 80194d8:	63bb      	str	r3, [r7, #56]	; 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80194da:	4b0f      	ldr	r3, [pc, #60]	; (8019518 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80194dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80194e0:	4413      	add	r3, r2
 80194e2:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 80194e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194e6:	3301      	adds	r3, #1
 80194e8:	657b      	str	r3, [r7, #84]	; 0x54
 80194ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194ec:	2b07      	cmp	r3, #7
 80194ee:	f67f af66 	bls.w	80193be <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80194f8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80194fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	4413      	add	r3, r2
 8019500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019502:	429a      	cmp	r2, r3
 8019504:	f4ff af33 	bcc.w	801936e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8019508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801950a:	4618      	mov	r0, r3
 801950c:	375c      	adds	r7, #92	; 0x5c
 801950e:	46bd      	mov	sp, r7
 8019510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019514:	4770      	bx	lr
 8019516:	bf00      	nop
 8019518:	24025240 	.word	0x24025240
 801951c:	24025680 	.word	0x24025680
 8019520:	24025280 	.word	0x24025280
 8019524:	24025a80 	.word	0x24025a80
 8019528:	24025e80 	.word	0x24025e80
 801952c:	0802b860 	.word	0x0802b860

08019530 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8019530:	b480      	push	{r7}
 8019532:	b095      	sub	sp, #84	; 0x54
 8019534:	af00      	add	r7, sp, #0
 8019536:	60f8      	str	r0, [r7, #12]
 8019538:	60b9      	str	r1, [r7, #8]
 801953a:	607a      	str	r2, [r7, #4]
 801953c:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 801953e:	683b      	ldr	r3, [r7, #0]
 8019540:	4a54      	ldr	r2, [pc, #336]	; (8019694 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 8019542:	fba2 2303 	umull	r2, r3, r2, r3
 8019546:	09db      	lsrs	r3, r3, #7
 8019548:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	647b      	str	r3, [r7, #68]	; 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 801954e:	e092      	b.n	8019676 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8019550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019552:	00da      	lsls	r2, r3, #3
 8019554:	4b50      	ldr	r3, [pc, #320]	; (8019698 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019558:	fbb2 f3f3 	udiv	r3, r2, r3
 801955c:	00db      	lsls	r3, r3, #3
 801955e:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8019560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019562:	00db      	lsls	r3, r3, #3
 8019564:	4a4c      	ldr	r2, [pc, #304]	; (8019698 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019566:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019568:	fbb3 f1f2 	udiv	r1, r3, r2
 801956c:	fb01 f202 	mul.w	r2, r1, r2
 8019570:	1a9b      	subs	r3, r3, r2
 8019572:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019574:	4b48      	ldr	r3, [pc, #288]	; (8019698 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801957a:	fb02 f103 	mul.w	r1, r2, r3
 801957e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019580:	4613      	mov	r3, r2
 8019582:	005b      	lsls	r3, r3, #1
 8019584:	4413      	add	r3, r2
 8019586:	440b      	add	r3, r1
 8019588:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;   
 801958a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801958c:	3301      	adds	r3, #1
 801958e:	647b      	str	r3, [r7, #68]	; 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	3340      	adds	r3, #64	; 0x40
 8019594:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  8; i++)
 801959a:	2300      	movs	r3, #0
 801959c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801959e:	e064      	b.n	801966a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80195a0:	4b3d      	ldr	r3, [pc, #244]	; (8019698 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80195a2:	691b      	ldr	r3, [r3, #16]
 80195a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80195a6:	429a      	cmp	r2, r3
 80195a8:	d25c      	bcs.n	8019664 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 80195aa:	68ba      	ldr	r2, [r7, #8]
 80195ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195ae:	4413      	add	r3, r2
 80195b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        

          for(j=0; j < 8; j++)
 80195b2:	2300      	movs	r3, #0
 80195b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80195b6:	e04a      	b.n	801964e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {           
            cbcomp = (int32_t)(*pChrom);
 80195b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ba:	781b      	ldrb	r3, [r3, #0]
 80195bc:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80195be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195c0:	009b      	lsls	r3, r3, #2
 80195c2:	4a36      	ldr	r2, [pc, #216]	; (801969c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 80195c4:	4413      	add	r3, r2
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 80195ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195cc:	3340      	adds	r3, #64	; 0x40
 80195ce:	781b      	ldrb	r3, [r3, #0]
 80195d0:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80195d2:	69fb      	ldr	r3, [r7, #28]
 80195d4:	009b      	lsls	r3, r3, #2
 80195d6:	4a32      	ldr	r2, [pc, #200]	; (80196a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 80195d8:	4413      	add	r3, r2
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80195de:	69fb      	ldr	r3, [r7, #28]
 80195e0:	009b      	lsls	r3, r3, #2
 80195e2:	4a30      	ldr	r2, [pc, #192]	; (80196a4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 80195e4:	4413      	add	r3, r2
 80195e6:	681a      	ldr	r2, [r3, #0]
 80195e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ea:	009b      	lsls	r3, r3, #2
 80195ec:	492e      	ldr	r1, [pc, #184]	; (80196a8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80195ee:	440b      	add	r3, r1
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	4413      	add	r3, r2
 80195f4:	141b      	asrs	r3, r3, #16
 80195f6:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
            ycomp = (int32_t)(*(pLum +j));
 80195f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80195fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195fc:	4413      	add	r3, r2
 80195fe:	781b      	ldrb	r3, [r3, #0]
 8019600:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8019602:	693a      	ldr	r2, [r7, #16]
 8019604:	69bb      	ldr	r3, [r7, #24]
 8019606:	4413      	add	r3, r2
 8019608:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801960c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801960e:	3302      	adds	r3, #2
 8019610:	4926      	ldr	r1, [pc, #152]	; (80196ac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8019612:	5c8a      	ldrb	r2, [r1, r2]
 8019614:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019616:	693a      	ldr	r2, [r7, #16]
 8019618:	697b      	ldr	r3, [r7, #20]
 801961a:	4413      	add	r3, r2
 801961c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019622:	3301      	adds	r3, #1
 8019624:	4921      	ldr	r1, [pc, #132]	; (80196ac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8019626:	5c8a      	ldrb	r2, [r1, r2]
 8019628:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        
 801962a:	693a      	ldr	r2, [r7, #16]
 801962c:	6a3b      	ldr	r3, [r7, #32]
 801962e:	4413      	add	r3, r2
 8019630:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019634:	4a1d      	ldr	r2, [pc, #116]	; (80196ac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8019636:	5cd2      	ldrb	r2, [r2, r3]
 8019638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801963a:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 801963c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801963e:	3303      	adds	r3, #3
 8019640:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 8019642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019644:	3301      	adds	r3, #1
 8019646:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8019648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801964a:	3301      	adds	r3, #1
 801964c:	64bb      	str	r3, [r7, #72]	; 0x48
 801964e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019650:	2b07      	cmp	r3, #7
 8019652:	d9b1      	bls.n	80195b8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 8019654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019656:	3308      	adds	r3, #8
 8019658:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 801965a:	4b0f      	ldr	r3, [pc, #60]	; (8019698 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 801965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801965e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019660:	4413      	add	r3, r2
 8019662:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 8019664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019666:	3301      	adds	r3, #1
 8019668:	64fb      	str	r3, [r7, #76]	; 0x4c
 801966a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801966c:	2b07      	cmp	r3, #7
 801966e:	d997      	bls.n	80195a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	33c0      	adds	r3, #192	; 0xc0
 8019674:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8019676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	4413      	add	r3, r2
 801967c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801967e:	429a      	cmp	r2, r3
 8019680:	f4ff af66 	bcc.w	8019550 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8019684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8019686:	4618      	mov	r0, r3
 8019688:	3754      	adds	r7, #84	; 0x54
 801968a:	46bd      	mov	sp, r7
 801968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019690:	4770      	bx	lr
 8019692:	bf00      	nop
 8019694:	aaaaaaab 	.word	0xaaaaaaab
 8019698:	24025240 	.word	0x24025240
 801969c:	24025680 	.word	0x24025680
 80196a0:	24025280 	.word	0x24025280
 80196a4:	24025a80 	.word	0x24025a80
 80196a8:	24025e80 	.word	0x24025e80
 80196ac:	0802b860 	.word	0x0802b860

080196b0 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80196b0:	b480      	push	{r7}
 80196b2:	b08f      	sub	sp, #60	; 0x3c
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	60f8      	str	r0, [r7, #12]
 80196b8:	60b9      	str	r1, [r7, #8]
 80196ba:	607a      	str	r2, [r7, #4]
 80196bc:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 80196be:	683b      	ldr	r3, [r7, #0]
 80196c0:	099b      	lsrs	r3, r3, #6
 80196c2:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	637b      	str	r3, [r7, #52]	; 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 80196c8:	e05b      	b.n	8019782 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80196ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196cc:	00da      	lsls	r2, r3, #3
 80196ce:	4b33      	ldr	r3, [pc, #204]	; (801979c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80196d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80196d6:	00db      	lsls	r3, r3, #3
 80196d8:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80196da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196dc:	00db      	lsls	r3, r3, #3
 80196de:	4a2f      	ldr	r2, [pc, #188]	; (801979c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80196e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80196e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80196e6:	fb01 f202 	mul.w	r2, r1, r2
 80196ea:	1a9b      	subs	r3, r3, r2
 80196ec:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80196ee:	4b2b      	ldr	r3, [pc, #172]	; (801979c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80196f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196f2:	69ba      	ldr	r2, [r7, #24]
 80196f4:	fb02 f103 	mul.w	r1, r2, r3
 80196f8:	697a      	ldr	r2, [r7, #20]
 80196fa:	4613      	mov	r3, r2
 80196fc:	005b      	lsls	r3, r3, #1
 80196fe:	4413      	add	r3, r2
 8019700:	440b      	add	r3, r1
 8019702:	633b      	str	r3, [r7, #48]	; 0x30
    
    currentMCU++;
 8019704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019706:	3301      	adds	r3, #1
 8019708:	637b      	str	r3, [r7, #52]	; 0x34
  
    pLum = pInBuffer;
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 801970e:	2300      	movs	r3, #0
 8019710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019712:	e030      	b.n	8019776 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    { 
      pOutAddr = pOutBuffer + refline;
 8019714:	68ba      	ldr	r2, [r7, #8]
 8019716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019718:	4413      	add	r3, r2
 801971a:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801971c:	4b1f      	ldr	r3, [pc, #124]	; (801979c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 801971e:	691b      	ldr	r3, [r3, #16]
 8019720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019722:	429a      	cmp	r2, r3
 8019724:	d224      	bcs.n	8019770 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {  
        for(j=0; j < 8; j++)
 8019726:	2300      	movs	r3, #0
 8019728:	62bb      	str	r3, [r7, #40]	; 0x28
 801972a:	e019      	b.n	8019760 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        { 
          ySample =   (uint32_t)(*pLum);
 801972c:	6a3b      	ldr	r3, [r7, #32]
 801972e:	781b      	ldrb	r3, [r3, #0]
 8019730:	613b      	str	r3, [r7, #16]
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
          pOutAddr[0] =  ySample;
 8019732:	693b      	ldr	r3, [r7, #16]
 8019734:	b2da      	uxtb	r2, r3
 8019736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019738:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 801973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801973c:	3301      	adds	r3, #1
 801973e:	693a      	ldr	r2, [r7, #16]
 8019740:	b2d2      	uxtb	r2, r2
 8019742:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;     
 8019744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019746:	3302      	adds	r3, #2
 8019748:	693a      	ldr	r2, [r7, #16]
 801974a:	b2d2      	uxtb	r2, r2
 801974c:	701a      	strb	r2, [r3, #0]
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 801974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019750:	3303      	adds	r3, #3
 8019752:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 8019754:	6a3b      	ldr	r3, [r7, #32]
 8019756:	3301      	adds	r3, #1
 8019758:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 801975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801975c:	3301      	adds	r3, #1
 801975e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019762:	2b07      	cmp	r3, #7
 8019764:	d9e2      	bls.n	801972c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 8019766:	4b0d      	ldr	r3, [pc, #52]	; (801979c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801976a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801976c:	4413      	add	r3, r2
 801976e:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 8019770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019772:	3301      	adds	r3, #1
 8019774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019778:	2b07      	cmp	r3, #7
 801977a:	d9cb      	bls.n	8019714 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	3340      	adds	r3, #64	; 0x40
 8019780:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8019782:	69fa      	ldr	r2, [r7, #28]
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	4413      	add	r3, r2
 8019788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801978a:	429a      	cmp	r2, r3
 801978c:	d39d      	bcc.n	80196ca <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 801978e:	69fb      	ldr	r3, [r7, #28]
}
 8019790:	4618      	mov	r0, r3
 8019792:	373c      	adds	r7, #60	; 0x3c
 8019794:	46bd      	mov	sp, r7
 8019796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979a:	4770      	bx	lr
 801979c:	24025240 	.word	0x24025240

080197a0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80197a0:	b480      	push	{r7}
 80197a2:	b093      	sub	sp, #76	; 0x4c
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	60f8      	str	r0, [r7, #12]
 80197a8:	60b9      	str	r1, [r7, #8]
 80197aa:	607a      	str	r2, [r7, #4]
 80197ac:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 80197ae:	683b      	ldr	r3, [r7, #0]
 80197b0:	0a1b      	lsrs	r3, r3, #8
 80197b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 80197b8:	e089      	b.n	80198ce <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80197ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197bc:	00da      	lsls	r2, r3, #3
 80197be:	4b4b      	ldr	r3, [pc, #300]	; (80198ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 80197c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80197c6:	00db      	lsls	r3, r3, #3
 80197c8:	62bb      	str	r3, [r7, #40]	; 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80197ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197cc:	00db      	lsls	r3, r3, #3
 80197ce:	4a47      	ldr	r2, [pc, #284]	; (80198ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 80197d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80197d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80197d6:	fb01 f202 	mul.w	r2, r1, r2
 80197da:	1a9b      	subs	r3, r3, r2
 80197dc:	627b      	str	r3, [r7, #36]	; 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80197de:	4b43      	ldr	r3, [pc, #268]	; (80198ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 80197e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80197e4:	fb02 f103 	mul.w	r1, r2, r3
 80197e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197ea:	4613      	mov	r3, r2
 80197ec:	005b      	lsls	r3, r3, #1
 80197ee:	4413      	add	r3, r2
 80197f0:	440b      	add	r3, r1
 80197f2:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 80197f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197f6:	3301      	adds	r3, #1
 80197f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pChrom = pInBuffer;
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	633b      	str	r3, [r7, #48]	; 0x30
    
    for(i= 0; i <  8; i++)
 80197fe:	2300      	movs	r3, #0
 8019800:	647b      	str	r3, [r7, #68]	; 0x44
 8019802:	e05d      	b.n	80198c0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8019804:	4b39      	ldr	r3, [pc, #228]	; (80198ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019806:	691b      	ldr	r3, [r3, #16]
 8019808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801980a:	429a      	cmp	r2, r3
 801980c:	d255      	bcs.n	80198ba <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;        
 801980e:	68ba      	ldr	r2, [r7, #8]
 8019810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019812:	4413      	add	r3, r2
 8019814:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8019816:	2300      	movs	r3, #0
 8019818:	643b      	str	r3, [r7, #64]	; 0x40
 801981a:	e046      	b.n	80198aa <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 801981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801981e:	33c0      	adds	r3, #192	; 0xc0
 8019820:	781b      	ldrb	r3, [r3, #0]
 8019822:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8019824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019826:	781b      	ldrb	r3, [r3, #0]
 8019828:	461a      	mov	r2, r3
 801982a:	6a3b      	ldr	r3, [r7, #32]
 801982c:	fb02 f303 	mul.w	r3, r2, r3
 8019830:	4a2f      	ldr	r2, [pc, #188]	; (80198f0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8019832:	fb82 1203 	smull	r1, r2, r2, r3
 8019836:	441a      	add	r2, r3
 8019838:	11d2      	asrs	r2, r2, #7
 801983a:	17db      	asrs	r3, r3, #31
 801983c:	1ad3      	subs	r3, r2, r3
 801983e:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8019840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019842:	3340      	adds	r3, #64	; 0x40
 8019844:	781b      	ldrb	r3, [r3, #0]
 8019846:	461a      	mov	r2, r3
 8019848:	6a3b      	ldr	r3, [r7, #32]
 801984a:	fb02 f303 	mul.w	r3, r2, r3
 801984e:	4a28      	ldr	r2, [pc, #160]	; (80198f0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8019850:	fb82 1203 	smull	r1, r2, r2, r3
 8019854:	441a      	add	r2, r3
 8019856:	11d2      	asrs	r2, r2, #7
 8019858:	17db      	asrs	r3, r3, #31
 801985a:	1ad3      	subs	r3, r2, r3
 801985c:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 801985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019860:	3380      	adds	r3, #128	; 0x80
 8019862:	781b      	ldrb	r3, [r3, #0]
 8019864:	461a      	mov	r2, r3
 8019866:	6a3b      	ldr	r3, [r7, #32]
 8019868:	fb02 f303 	mul.w	r3, r2, r3
 801986c:	4a20      	ldr	r2, [pc, #128]	; (80198f0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801986e:	fb82 1203 	smull	r1, r2, r2, r3
 8019872:	441a      	add	r2, r3
 8019874:	11d2      	asrs	r2, r2, #7
 8019876:	17db      	asrs	r3, r3, #31
 8019878:	1ad3      	subs	r3, r2, r3
 801987a:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);     
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 801987c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801987e:	3302      	adds	r3, #2
 8019880:	69fa      	ldr	r2, [r7, #28]
 8019882:	b2d2      	uxtb	r2, r2
 8019884:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 8019886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019888:	3301      	adds	r3, #1
 801988a:	69ba      	ldr	r2, [r7, #24]
 801988c:	b2d2      	uxtb	r2, r2
 801988e:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 8019890:	697b      	ldr	r3, [r7, #20]
 8019892:	b2da      	uxtb	r2, r3
 8019894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019896:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8019898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801989a:	3303      	adds	r3, #3
 801989c:	637b      	str	r3, [r7, #52]	; 0x34
          
            pChrom++;
 801989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198a0:	3301      	adds	r3, #1
 80198a2:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 80198a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198a6:	3301      	adds	r3, #1
 80198a8:	643b      	str	r3, [r7, #64]	; 0x40
 80198aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198ac:	2b07      	cmp	r3, #7
 80198ae:	d9b5      	bls.n	801981c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 80198b0:	4b0e      	ldr	r3, [pc, #56]	; (80198ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 80198b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80198b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80198b6:	4413      	add	r3, r2
 80198b8:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 80198ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80198bc:	3301      	adds	r3, #1
 80198be:	647b      	str	r3, [r7, #68]	; 0x44
 80198c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80198c2:	2b07      	cmp	r3, #7
 80198c4:	d99e      	bls.n	8019804 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80198cc:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80198ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	4413      	add	r3, r2
 80198d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80198d6:	429a      	cmp	r2, r3
 80198d8:	f4ff af6f 	bcc.w	80197ba <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80198dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80198de:	4618      	mov	r0, r3
 80198e0:	374c      	adds	r7, #76	; 0x4c
 80198e2:	46bd      	mov	sp, r7
 80198e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e8:	4770      	bx	lr
 80198ea:	bf00      	nop
 80198ec:	24025240 	.word	0x24025240
 80198f0:	80808081 	.word	0x80808081

080198f4 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 80198f4:	b480      	push	{r7}
 80198f6:	b087      	sub	sp, #28
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	60f8      	str	r0, [r7, #12]
 80198fc:	60b9      	str	r1, [r7, #8]
 80198fe:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	4a7c      	ldr	r2, [pc, #496]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019906:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	68db      	ldr	r3, [r3, #12]
 801990c:	4a7a      	ldr	r2, [pc, #488]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801990e:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	689b      	ldr	r3, [r3, #8]
 8019914:	4a78      	ldr	r2, [pc, #480]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019916:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	68db      	ldr	r3, [r3, #12]
 801991c:	68fa      	ldr	r2, [r7, #12]
 801991e:	6892      	ldr	r2, [r2, #8]
 8019920:	fb03 f202 	mul.w	r2, r3, r2
 8019924:	4613      	mov	r3, r2
 8019926:	005b      	lsls	r3, r3, #1
 8019928:	4413      	add	r3, r2
 801992a:	4a73      	ldr	r2, [pc, #460]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801992c:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	685b      	ldr	r3, [r3, #4]
 8019932:	4a71      	ldr	r2, [pc, #452]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019934:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8019936:	4b70      	ldr	r3, [pc, #448]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	2b10      	cmp	r3, #16
 801993c:	d155      	bne.n	80199ea <JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 801993e:	4b6e      	ldr	r3, [pc, #440]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019940:	685b      	ldr	r3, [r3, #4]
 8019942:	2b01      	cmp	r3, #1
 8019944:	d119      	bne.n	801997a <JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8019946:	68bb      	ldr	r3, [r7, #8]
 8019948:	4a6c      	ldr	r2, [pc, #432]	; (8019afc <JPEG_GetDecodeColorConvertFunc+0x208>)
 801994a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 801994c:	4b6a      	ldr	r3, [pc, #424]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801994e:	689b      	ldr	r3, [r3, #8]
 8019950:	f003 030f 	and.w	r3, r3, #15
 8019954:	4a68      	ldr	r2, [pc, #416]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019956:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8019958:	4b67      	ldr	r3, [pc, #412]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801995a:	695b      	ldr	r3, [r3, #20]
 801995c:	2b00      	cmp	r3, #0
 801995e:	d005      	beq.n	801996c <JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8019960:	4b65      	ldr	r3, [pc, #404]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019962:	695b      	ldr	r3, [r3, #20]
 8019964:	f1c3 0310 	rsb	r3, r3, #16
 8019968:	4a63      	ldr	r2, [pc, #396]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801996a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 801996c:	4b62      	ldr	r3, [pc, #392]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801996e:	2210      	movs	r2, #16
 8019970:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8019972:	4b61      	ldr	r3, [pc, #388]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019974:	2210      	movs	r2, #16
 8019976:	621a      	str	r2, [r3, #32]
 8019978:	e075      	b.n	8019a66 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 801997a:	4b5f      	ldr	r3, [pc, #380]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801997c:	685b      	ldr	r3, [r3, #4]
 801997e:	2b02      	cmp	r3, #2
 8019980:	d119      	bne.n	80199b6 <JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8019982:	68bb      	ldr	r3, [r7, #8]
 8019984:	4a5e      	ldr	r2, [pc, #376]	; (8019b00 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 8019986:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8019988:	4b5b      	ldr	r3, [pc, #364]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801998a:	689b      	ldr	r3, [r3, #8]
 801998c:	f003 030f 	and.w	r3, r3, #15
 8019990:	4a59      	ldr	r2, [pc, #356]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019992:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8019994:	4b58      	ldr	r3, [pc, #352]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019996:	695b      	ldr	r3, [r3, #20]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d005      	beq.n	80199a8 <JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 801999c:	4b56      	ldr	r3, [pc, #344]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801999e:	695b      	ldr	r3, [r3, #20]
 80199a0:	f1c3 0310 	rsb	r3, r3, #16
 80199a4:	4a54      	ldr	r2, [pc, #336]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199a6:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 80199a8:	4b53      	ldr	r3, [pc, #332]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199aa:	2210      	movs	r2, #16
 80199ac:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 80199ae:	4b52      	ldr	r3, [pc, #328]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199b0:	2208      	movs	r2, #8
 80199b2:	621a      	str	r2, [r3, #32]
 80199b4:	e057      	b.n	8019a66 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 80199b6:	68bb      	ldr	r3, [r7, #8]
 80199b8:	4a52      	ldr	r2, [pc, #328]	; (8019b04 <JPEG_GetDecodeColorConvertFunc+0x210>)
 80199ba:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80199bc:	4b4e      	ldr	r3, [pc, #312]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199be:	689b      	ldr	r3, [r3, #8]
 80199c0:	f003 0307 	and.w	r3, r3, #7
 80199c4:	4a4c      	ldr	r2, [pc, #304]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199c6:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 80199c8:	4b4b      	ldr	r3, [pc, #300]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199ca:	695b      	ldr	r3, [r3, #20]
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d005      	beq.n	80199dc <JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 80199d0:	4b49      	ldr	r3, [pc, #292]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199d2:	695b      	ldr	r3, [r3, #20]
 80199d4:	f1c3 0308 	rsb	r3, r3, #8
 80199d8:	4a47      	ldr	r2, [pc, #284]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199da:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 80199dc:	4b46      	ldr	r3, [pc, #280]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199de:	2208      	movs	r2, #8
 80199e0:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 80199e2:	4b45      	ldr	r3, [pc, #276]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199e4:	2208      	movs	r2, #8
 80199e6:	621a      	str	r2, [r3, #32]
 80199e8:	e03d      	b.n	8019a66 <JPEG_GetDecodeColorConvertFunc+0x172>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 80199ea:	4b43      	ldr	r3, [pc, #268]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d119      	bne.n	8019a26 <JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 80199f2:	68bb      	ldr	r3, [r7, #8]
 80199f4:	4a44      	ldr	r2, [pc, #272]	; (8019b08 <JPEG_GetDecodeColorConvertFunc+0x214>)
 80199f6:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80199f8:	4b3f      	ldr	r3, [pc, #252]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199fa:	689b      	ldr	r3, [r3, #8]
 80199fc:	f003 0307 	and.w	r3, r3, #7
 8019a00:	4a3d      	ldr	r2, [pc, #244]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a02:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8019a04:	4b3c      	ldr	r3, [pc, #240]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a06:	695b      	ldr	r3, [r3, #20]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d005      	beq.n	8019a18 <JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019a0c:	4b3a      	ldr	r3, [pc, #232]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a0e:	695b      	ldr	r3, [r3, #20]
 8019a10:	f1c3 0308 	rsb	r3, r3, #8
 8019a14:	4a38      	ldr	r2, [pc, #224]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a16:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8019a18:	4b37      	ldr	r3, [pc, #220]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a1a:	2208      	movs	r2, #8
 8019a1c:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8019a1e:	4b36      	ldr	r3, [pc, #216]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a20:	2208      	movs	r2, #8
 8019a22:	621a      	str	r2, [r3, #32]
 8019a24:	e01f      	b.n	8019a66 <JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8019a26:	4b34      	ldr	r3, [pc, #208]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	2b30      	cmp	r3, #48	; 0x30
 8019a2c:	d119      	bne.n	8019a62 <JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8019a2e:	68bb      	ldr	r3, [r7, #8]
 8019a30:	4a36      	ldr	r2, [pc, #216]	; (8019b0c <JPEG_GetDecodeColorConvertFunc+0x218>)
 8019a32:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8019a34:	4b30      	ldr	r3, [pc, #192]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a36:	689b      	ldr	r3, [r3, #8]
 8019a38:	f003 0307 	and.w	r3, r3, #7
 8019a3c:	4a2e      	ldr	r2, [pc, #184]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a3e:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8019a40:	4b2d      	ldr	r3, [pc, #180]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a42:	695b      	ldr	r3, [r3, #20]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d005      	beq.n	8019a54 <JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019a48:	4b2b      	ldr	r3, [pc, #172]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a4a:	695b      	ldr	r3, [r3, #20]
 8019a4c:	f1c3 0308 	rsb	r3, r3, #8
 8019a50:	4a29      	ldr	r2, [pc, #164]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a52:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8019a54:	4b28      	ldr	r3, [pc, #160]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a56:	2208      	movs	r2, #8
 8019a58:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8019a5a:	4b27      	ldr	r3, [pc, #156]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a5c:	2208      	movs	r2, #8
 8019a5e:	621a      	str	r2, [r3, #32]
 8019a60:	e001      	b.n	8019a66 <JPEG_GetDecodeColorConvertFunc+0x172>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 8019a62:	2301      	movs	r3, #1
 8019a64:	e042      	b.n	8019aec <JPEG_GetDecodeColorConvertFunc+0x1f8>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8019a66:	4b24      	ldr	r3, [pc, #144]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a68:	689a      	ldr	r2, [r3, #8]
 8019a6a:	4b23      	ldr	r3, [pc, #140]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a6c:	695b      	ldr	r3, [r3, #20]
 8019a6e:	4413      	add	r3, r2
 8019a70:	4a21      	ldr	r2, [pc, #132]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a72:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8019a74:	4b20      	ldr	r3, [pc, #128]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a76:	689a      	ldr	r2, [r3, #8]
 8019a78:	4613      	mov	r3, r2
 8019a7a:	005b      	lsls	r3, r3, #1
 8019a7c:	4413      	add	r3, r2
 8019a7e:	4a1e      	ldr	r2, [pc, #120]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a80:	6293      	str	r3, [r2, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8019a82:	4b1d      	ldr	r3, [pc, #116]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a84:	689a      	ldr	r2, [r3, #8]
 8019a86:	4b1c      	ldr	r3, [pc, #112]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a88:	69db      	ldr	r3, [r3, #28]
 8019a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a8e:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8019a90:	4b19      	ldr	r3, [pc, #100]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a92:	689b      	ldr	r3, [r3, #8]
 8019a94:	4a18      	ldr	r2, [pc, #96]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a96:	69d2      	ldr	r2, [r2, #28]
 8019a98:	fbb3 f1f2 	udiv	r1, r3, r2
 8019a9c:	fb01 f202 	mul.w	r2, r1, r2
 8019aa0:	1a9b      	subs	r3, r3, r2
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d002      	beq.n	8019aac <JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8019aa6:	697b      	ldr	r3, [r7, #20]
 8019aa8:	3301      	adds	r3, #1
 8019aaa:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8019aac:	4b12      	ldr	r3, [pc, #72]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019aae:	68da      	ldr	r2, [r3, #12]
 8019ab0:	4b11      	ldr	r3, [pc, #68]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ab2:	6a1b      	ldr	r3, [r3, #32]
 8019ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8019ab8:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8019aba:	4b0f      	ldr	r3, [pc, #60]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019abc:	68db      	ldr	r3, [r3, #12]
 8019abe:	4a0e      	ldr	r2, [pc, #56]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ac0:	6a12      	ldr	r2, [r2, #32]
 8019ac2:	fbb3 f1f2 	udiv	r1, r3, r2
 8019ac6:	fb01 f202 	mul.w	r2, r1, r2
 8019aca:	1a9b      	subs	r3, r3, r2
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d002      	beq.n	8019ad6 <JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8019ad0:	693b      	ldr	r3, [r7, #16]
 8019ad2:	3301      	adds	r3, #1
 8019ad4:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8019ad6:	697b      	ldr	r3, [r7, #20]
 8019ad8:	693a      	ldr	r2, [r7, #16]
 8019ada:	fb02 f303 	mul.w	r3, r2, r3
 8019ade:	4a06      	ldr	r2, [pc, #24]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8019ae2:	4b05      	ldr	r3, [pc, #20]	; (8019af8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8019aea:	2300      	movs	r3, #0
}
 8019aec:	4618      	mov	r0, r3
 8019aee:	371c      	adds	r7, #28
 8019af0:	46bd      	mov	sp, r7
 8019af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af6:	4770      	bx	lr
 8019af8:	24025240 	.word	0x24025240
 8019afc:	080190bd 	.word	0x080190bd
 8019b00:	08019355 	.word	0x08019355
 8019b04:	08019531 	.word	0x08019531
 8019b08:	080196b1 	.word	0x080196b1
 8019b0c:	080197a1 	.word	0x080197a1

08019b10 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8019b10:	8880      	ldrh	r0, [r0, #4]
 8019b12:	4770      	bx	lr

08019b14 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8019b14:	b570      	push	{r4, r5, r6, lr}
 8019b16:	6803      	ldr	r3, [r0, #0]
 8019b18:	460c      	mov	r4, r1
 8019b1a:	2100      	movs	r1, #0
 8019b1c:	4605      	mov	r5, r0
 8019b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b20:	4798      	blx	r3
 8019b22:	4606      	mov	r6, r0
 8019b24:	682b      	ldr	r3, [r5, #0]
 8019b26:	4628      	mov	r0, r5
 8019b28:	1ba4      	subs	r4, r4, r6
 8019b2a:	6a1b      	ldr	r3, [r3, #32]
 8019b2c:	b2a4      	uxth	r4, r4
 8019b2e:	4798      	blx	r3
 8019b30:	fbb4 f0f0 	udiv	r0, r4, r0
 8019b34:	bd70      	pop	{r4, r5, r6, pc}

08019b36 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8019b36:	2300      	movs	r3, #0
 8019b38:	8083      	strh	r3, [r0, #4]
 8019b3a:	4770      	bx	lr

08019b3c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8019b3c:	b510      	push	{r4, lr}
 8019b3e:	6803      	ldr	r3, [r0, #0]
 8019b40:	4604      	mov	r4, r0
 8019b42:	8881      	ldrh	r1, [r0, #4]
 8019b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b46:	4798      	blx	r3
 8019b48:	88a3      	ldrh	r3, [r4, #4]
 8019b4a:	3301      	adds	r3, #1
 8019b4c:	80a3      	strh	r3, [r4, #4]
 8019b4e:	bd10      	pop	{r4, pc}

08019b50 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8019b50:	6803      	ldr	r3, [r0, #0]
 8019b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b54:	4718      	bx	r3

08019b56 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8019b56:	4770      	bx	lr

08019b58 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8019b58:	4a02      	ldr	r2, [pc, #8]	; (8019b64 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8019b5a:	6002      	str	r2, [r0, #0]
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	8082      	strh	r2, [r0, #4]
 8019b60:	4770      	bx	lr
 8019b62:	bf00      	nop
 8019b64:	0802bb68 	.word	0x0802bb68

08019b68 <_ZN8touchgfx9Container13getFirstChildEv>:
 8019b68:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019b6a:	4770      	bx	lr

08019b6c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8019b6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019b6e:	2000      	movs	r0, #0
 8019b70:	b12b      	cbz	r3, 8019b7e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019b72:	b920      	cbnz	r0, 8019b7e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019b74:	1a5a      	subs	r2, r3, r1
 8019b76:	699b      	ldr	r3, [r3, #24]
 8019b78:	4250      	negs	r0, r2
 8019b7a:	4150      	adcs	r0, r2
 8019b7c:	e7f8      	b.n	8019b70 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8019b7e:	4770      	bx	lr

08019b80 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8019b80:	2300      	movs	r3, #0
 8019b82:	6148      	str	r0, [r1, #20]
 8019b84:	618b      	str	r3, [r1, #24]
 8019b86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019b88:	b913      	cbnz	r3, 8019b90 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8019b8a:	6281      	str	r1, [r0, #40]	; 0x28
 8019b8c:	4770      	bx	lr
 8019b8e:	4613      	mov	r3, r2
 8019b90:	699a      	ldr	r2, [r3, #24]
 8019b92:	2a00      	cmp	r2, #0
 8019b94:	d1fb      	bne.n	8019b8e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8019b96:	6199      	str	r1, [r3, #24]
 8019b98:	4770      	bx	lr

08019b9a <_ZN8touchgfx9Container9removeAllEv>:
 8019b9a:	2200      	movs	r2, #0
 8019b9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019b9e:	b123      	cbz	r3, 8019baa <_ZN8touchgfx9Container9removeAllEv+0x10>
 8019ba0:	6999      	ldr	r1, [r3, #24]
 8019ba2:	6281      	str	r1, [r0, #40]	; 0x28
 8019ba4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8019ba8:	e7f8      	b.n	8019b9c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8019baa:	4770      	bx	lr

08019bac <_ZN8touchgfx9Container6unlinkEv>:
 8019bac:	2300      	movs	r3, #0
 8019bae:	6283      	str	r3, [r0, #40]	; 0x28
 8019bb0:	4770      	bx	lr

08019bb2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	8002      	strh	r2, [r0, #0]
 8019bb6:	8042      	strh	r2, [r0, #2]
 8019bb8:	8082      	strh	r2, [r0, #4]
 8019bba:	80c2      	strh	r2, [r0, #6]
 8019bbc:	4770      	bx	lr

08019bbe <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8019bbe:	b570      	push	{r4, r5, r6, lr}
 8019bc0:	460d      	mov	r5, r1
 8019bc2:	4616      	mov	r6, r2
 8019bc4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019bc6:	b13c      	cbz	r4, 8019bd8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8019bc8:	6823      	ldr	r3, [r4, #0]
 8019bca:	4620      	mov	r0, r4
 8019bcc:	4632      	mov	r2, r6
 8019bce:	4629      	mov	r1, r5
 8019bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019bd2:	4798      	blx	r3
 8019bd4:	69a4      	ldr	r4, [r4, #24]
 8019bd6:	e7f6      	b.n	8019bc6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8019bd8:	bd70      	pop	{r4, r5, r6, pc}

08019bda <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8019bda:	b538      	push	{r3, r4, r5, lr}
 8019bdc:	460d      	mov	r5, r1
 8019bde:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019be0:	b134      	cbz	r4, 8019bf0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8019be2:	682b      	ldr	r3, [r5, #0]
 8019be4:	4621      	mov	r1, r4
 8019be6:	4628      	mov	r0, r5
 8019be8:	689b      	ldr	r3, [r3, #8]
 8019bea:	4798      	blx	r3
 8019bec:	69a4      	ldr	r4, [r4, #24]
 8019bee:	e7f7      	b.n	8019be0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8019bf0:	bd38      	pop	{r3, r4, r5, pc}

08019bf2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8019bf2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019bf4:	b19b      	cbz	r3, 8019c1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8019bf6:	428b      	cmp	r3, r1
 8019bf8:	d109      	bne.n	8019c0e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8019bfa:	699a      	ldr	r2, [r3, #24]
 8019bfc:	2100      	movs	r1, #0
 8019bfe:	6159      	str	r1, [r3, #20]
 8019c00:	6282      	str	r2, [r0, #40]	; 0x28
 8019c02:	b902      	cbnz	r2, 8019c06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8019c04:	4770      	bx	lr
 8019c06:	6199      	str	r1, [r3, #24]
 8019c08:	4770      	bx	lr
 8019c0a:	4613      	mov	r3, r2
 8019c0c:	b13a      	cbz	r2, 8019c1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8019c0e:	699a      	ldr	r2, [r3, #24]
 8019c10:	428a      	cmp	r2, r1
 8019c12:	d1fa      	bne.n	8019c0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8019c14:	698a      	ldr	r2, [r1, #24]
 8019c16:	619a      	str	r2, [r3, #24]
 8019c18:	2300      	movs	r3, #0
 8019c1a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8019c1e:	4770      	bx	lr

08019c20 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8019c20:	b410      	push	{r4}
 8019c22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019c24:	4604      	mov	r4, r0
 8019c26:	b92b      	cbnz	r3, 8019c34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8019c28:	6803      	ldr	r3, [r0, #0]
 8019c2a:	4611      	mov	r1, r2
 8019c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019c32:	4718      	bx	r3
 8019c34:	b941      	cbnz	r1, 8019c48 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8019c36:	6193      	str	r3, [r2, #24]
 8019c38:	6282      	str	r2, [r0, #40]	; 0x28
 8019c3a:	6154      	str	r4, [r2, #20]
 8019c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c40:	4770      	bx	lr
 8019c42:	4603      	mov	r3, r0
 8019c44:	2800      	cmp	r0, #0
 8019c46:	d0f9      	beq.n	8019c3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8019c48:	4299      	cmp	r1, r3
 8019c4a:	6998      	ldr	r0, [r3, #24]
 8019c4c:	d1f9      	bne.n	8019c42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8019c4e:	6190      	str	r0, [r2, #24]
 8019c50:	618a      	str	r2, [r1, #24]
 8019c52:	e7f2      	b.n	8019c3a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08019c54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8019c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c58:	461f      	mov	r7, r3
 8019c5a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8019c5e:	460d      	mov	r5, r1
 8019c60:	4616      	mov	r6, r2
 8019c62:	b103      	cbz	r3, 8019c66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8019c64:	6038      	str	r0, [r7, #0]
 8019c66:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019c68:	b314      	cbz	r4, 8019cb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8019c6a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019c6e:	b1eb      	cbz	r3, 8019cac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019c70:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019c74:	428d      	cmp	r5, r1
 8019c76:	db19      	blt.n	8019cac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019c78:	b289      	uxth	r1, r1
 8019c7a:	8923      	ldrh	r3, [r4, #8]
 8019c7c:	440b      	add	r3, r1
 8019c7e:	b21b      	sxth	r3, r3
 8019c80:	429d      	cmp	r5, r3
 8019c82:	da13      	bge.n	8019cac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019c84:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019c88:	4296      	cmp	r6, r2
 8019c8a:	db0f      	blt.n	8019cac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019c8c:	b292      	uxth	r2, r2
 8019c8e:	8963      	ldrh	r3, [r4, #10]
 8019c90:	4413      	add	r3, r2
 8019c92:	b21b      	sxth	r3, r3
 8019c94:	429e      	cmp	r6, r3
 8019c96:	da09      	bge.n	8019cac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019c98:	6823      	ldr	r3, [r4, #0]
 8019c9a:	1ab2      	subs	r2, r6, r2
 8019c9c:	1a69      	subs	r1, r5, r1
 8019c9e:	4620      	mov	r0, r4
 8019ca0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8019ca4:	b212      	sxth	r2, r2
 8019ca6:	463b      	mov	r3, r7
 8019ca8:	b209      	sxth	r1, r1
 8019caa:	47c0      	blx	r8
 8019cac:	69a4      	ldr	r4, [r4, #24]
 8019cae:	e7db      	b.n	8019c68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8019cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019cb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8019cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cb8:	4c6d      	ldr	r4, [pc, #436]	; (8019e70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8019cba:	b0a1      	sub	sp, #132	; 0x84
 8019cbc:	4606      	mov	r6, r0
 8019cbe:	6824      	ldr	r4, [r4, #0]
 8019cc0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8019cc2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8019cc6:	2400      	movs	r4, #0
 8019cc8:	9303      	str	r3, [sp, #12]
 8019cca:	802c      	strh	r4, [r5, #0]
 8019ccc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8019cce:	802c      	strh	r4, [r5, #0]
 8019cd0:	601c      	str	r4, [r3, #0]
 8019cd2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8019cd6:	f7ff ffbd 	bl	8019c54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019cda:	f1b9 0f03 	cmp.w	r9, #3
 8019cde:	f340 80c1 	ble.w	8019e64 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8019ce2:	4631      	mov	r1, r6
 8019ce4:	a80c      	add	r0, sp, #48	; 0x30
 8019ce6:	f003 ff4d 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019cea:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8019cee:	9306      	str	r3, [sp, #24]
 8019cf0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8019cf4:	9307      	str	r3, [sp, #28]
 8019cf6:	9b03      	ldr	r3, [sp, #12]
 8019cf8:	f8d3 a000 	ldr.w	sl, [r3]
 8019cfc:	f1ba 0f00 	cmp.w	sl, #0
 8019d00:	f000 80b3 	beq.w	8019e6a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8019d04:	4651      	mov	r1, sl
 8019d06:	a810      	add	r0, sp, #64	; 0x40
 8019d08:	f003 ff3c 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d0c:	2002      	movs	r0, #2
 8019d0e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8019d12:	9b01      	ldr	r3, [sp, #4]
 8019d14:	9a06      	ldr	r2, [sp, #24]
 8019d16:	fb91 f1f0 	sdiv	r1, r1, r0
 8019d1a:	189d      	adds	r5, r3, r2
 8019d1c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8019d20:	9a07      	ldr	r2, [sp, #28]
 8019d22:	4419      	add	r1, r3
 8019d24:	9b02      	ldr	r3, [sp, #8]
 8019d26:	4413      	add	r3, r2
 8019d28:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8019d2c:	1a6d      	subs	r5, r5, r1
 8019d2e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019d32:	fb92 f2f0 	sdiv	r2, r2, r0
 8019d36:	440a      	add	r2, r1
 8019d38:	1a9b      	subs	r3, r3, r2
 8019d3a:	435b      	muls	r3, r3
 8019d3c:	fb05 3505 	mla	r5, r5, r5, r3
 8019d40:	4f4c      	ldr	r7, [pc, #304]	; (8019e74 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8019d42:	ac10      	add	r4, sp, #64	; 0x40
 8019d44:	f1b9 0f0c 	cmp.w	r9, #12
 8019d48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d50:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d54:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8019d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019d5c:	f04f 0303 	mov.w	r3, #3
 8019d60:	bfd8      	it	le
 8019d62:	f109 32ff 	addle.w	r2, r9, #4294967295
 8019d66:	f04f 0400 	mov.w	r4, #0
 8019d6a:	f8cd 9000 	str.w	r9, [sp]
 8019d6e:	bfcc      	ite	gt
 8019d70:	4698      	movgt	r8, r3
 8019d72:	fb92 f8f3 	sdivle	r8, r2, r3
 8019d76:	1c63      	adds	r3, r4, #1
 8019d78:	aa10      	add	r2, sp, #64	; 0x40
 8019d7a:	f004 0401 	and.w	r4, r4, #1
 8019d7e:	f04f 0b00 	mov.w	fp, #0
 8019d82:	9308      	str	r3, [sp, #32]
 8019d84:	9b00      	ldr	r3, [sp, #0]
 8019d86:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8019d8a:	fb93 f3f8 	sdiv	r3, r3, r8
 8019d8e:	3404      	adds	r4, #4
 8019d90:	b29b      	uxth	r3, r3
 8019d92:	9304      	str	r3, [sp, #16]
 8019d94:	9a04      	ldr	r2, [sp, #16]
 8019d96:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019d9a:	fb13 f302 	smulbb	r3, r3, r2
 8019d9e:	9a01      	ldr	r2, [sp, #4]
 8019da0:	b29b      	uxth	r3, r3
 8019da2:	1899      	adds	r1, r3, r2
 8019da4:	9305      	str	r3, [sp, #20]
 8019da6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8019daa:	b209      	sxth	r1, r1
 8019dac:	4299      	cmp	r1, r3
 8019dae:	db4d      	blt.n	8019e4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019db0:	8932      	ldrh	r2, [r6, #8]
 8019db2:	4413      	add	r3, r2
 8019db4:	b21b      	sxth	r3, r3
 8019db6:	4299      	cmp	r1, r3
 8019db8:	da48      	bge.n	8019e4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019dba:	9b04      	ldr	r3, [sp, #16]
 8019dbc:	6827      	ldr	r7, [r4, #0]
 8019dbe:	fb17 f703 	smulbb	r7, r7, r3
 8019dc2:	9b02      	ldr	r3, [sp, #8]
 8019dc4:	b2bf      	uxth	r7, r7
 8019dc6:	18fa      	adds	r2, r7, r3
 8019dc8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8019dcc:	b212      	sxth	r2, r2
 8019dce:	429a      	cmp	r2, r3
 8019dd0:	db3c      	blt.n	8019e4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019dd2:	8970      	ldrh	r0, [r6, #10]
 8019dd4:	4403      	add	r3, r0
 8019dd6:	b21b      	sxth	r3, r3
 8019dd8:	429a      	cmp	r2, r3
 8019dda:	da37      	bge.n	8019e4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019ddc:	2300      	movs	r3, #0
 8019dde:	4630      	mov	r0, r6
 8019de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8019de2:	ab0b      	add	r3, sp, #44	; 0x2c
 8019de4:	f7ff ff36 	bl	8019c54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019de8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019dea:	b37a      	cbz	r2, 8019e4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019dec:	4552      	cmp	r2, sl
 8019dee:	d02d      	beq.n	8019e4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019df0:	4611      	mov	r1, r2
 8019df2:	a80e      	add	r0, sp, #56	; 0x38
 8019df4:	9209      	str	r2, [sp, #36]	; 0x24
 8019df6:	f003 fec5 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019dfa:	f04f 0e02 	mov.w	lr, #2
 8019dfe:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8019e02:	9a06      	ldr	r2, [sp, #24]
 8019e04:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8019e08:	9b01      	ldr	r3, [sp, #4]
 8019e0a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8019e0e:	4413      	add	r3, r2
 8019e10:	9a07      	ldr	r2, [sp, #28]
 8019e12:	fb91 f1fe 	sdiv	r1, r1, lr
 8019e16:	fb9c fcfe 	sdiv	ip, ip, lr
 8019e1a:	4401      	add	r1, r0
 8019e1c:	1a58      	subs	r0, r3, r1
 8019e1e:	9b02      	ldr	r3, [sp, #8]
 8019e20:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8019e24:	4413      	add	r3, r2
 8019e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e28:	448c      	add	ip, r1
 8019e2a:	eba3 030c 	sub.w	r3, r3, ip
 8019e2e:	435b      	muls	r3, r3
 8019e30:	fb00 3300 	mla	r3, r0, r0, r3
 8019e34:	42ab      	cmp	r3, r5
 8019e36:	d208      	bcs.n	8019e4a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8019e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019e3a:	461d      	mov	r5, r3
 8019e3c:	9803      	ldr	r0, [sp, #12]
 8019e3e:	6001      	str	r1, [r0, #0]
 8019e40:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019e42:	9805      	ldr	r0, [sp, #20]
 8019e44:	8008      	strh	r0, [r1, #0]
 8019e46:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019e48:	800f      	strh	r7, [r1, #0]
 8019e4a:	4692      	mov	sl, r2
 8019e4c:	f10b 0b01 	add.w	fp, fp, #1
 8019e50:	3408      	adds	r4, #8
 8019e52:	f1bb 0f04 	cmp.w	fp, #4
 8019e56:	d19d      	bne.n	8019d94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8019e58:	9b00      	ldr	r3, [sp, #0]
 8019e5a:	9c08      	ldr	r4, [sp, #32]
 8019e5c:	444b      	add	r3, r9
 8019e5e:	4544      	cmp	r4, r8
 8019e60:	9300      	str	r3, [sp, #0]
 8019e62:	d188      	bne.n	8019d76 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8019e64:	b021      	add	sp, #132	; 0x84
 8019e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e6a:	f04f 35ff 	mov.w	r5, #4294967295
 8019e6e:	e767      	b.n	8019d40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8019e70:	2402628c 	.word	0x2402628c
 8019e74:	0802a900 	.word	0x0802a900

08019e78 <_ZN8touchgfx4RectaNERKS0_>:
 8019e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e7c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8019e80:	888c      	ldrh	r4, [r1, #4]
 8019e82:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019e86:	443c      	add	r4, r7
 8019e88:	b2a4      	uxth	r4, r4
 8019e8a:	fa0f f884 	sxth.w	r8, r4
 8019e8e:	45c1      	cmp	r9, r8
 8019e90:	da2f      	bge.n	8019ef2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019e92:	8882      	ldrh	r2, [r0, #4]
 8019e94:	444a      	add	r2, r9
 8019e96:	b292      	uxth	r2, r2
 8019e98:	fa0f fe82 	sxth.w	lr, r2
 8019e9c:	4577      	cmp	r7, lr
 8019e9e:	da28      	bge.n	8019ef2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019ea0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019ea4:	88cb      	ldrh	r3, [r1, #6]
 8019ea6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8019eaa:	442b      	add	r3, r5
 8019eac:	b21b      	sxth	r3, r3
 8019eae:	429e      	cmp	r6, r3
 8019eb0:	da1f      	bge.n	8019ef2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019eb2:	88c3      	ldrh	r3, [r0, #6]
 8019eb4:	4433      	add	r3, r6
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	fa0f fc83 	sxth.w	ip, r3
 8019ebc:	4565      	cmp	r5, ip
 8019ebe:	da18      	bge.n	8019ef2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019ec0:	454f      	cmp	r7, r9
 8019ec2:	bfb8      	it	lt
 8019ec4:	464f      	movlt	r7, r9
 8019ec6:	42b5      	cmp	r5, r6
 8019ec8:	bfb8      	it	lt
 8019eca:	4635      	movlt	r5, r6
 8019ecc:	45f0      	cmp	r8, lr
 8019ece:	bfd8      	it	le
 8019ed0:	4622      	movle	r2, r4
 8019ed2:	1bd2      	subs	r2, r2, r7
 8019ed4:	8082      	strh	r2, [r0, #4]
 8019ed6:	884a      	ldrh	r2, [r1, #2]
 8019ed8:	88c9      	ldrh	r1, [r1, #6]
 8019eda:	8007      	strh	r7, [r0, #0]
 8019edc:	440a      	add	r2, r1
 8019ede:	8045      	strh	r5, [r0, #2]
 8019ee0:	b292      	uxth	r2, r2
 8019ee2:	b211      	sxth	r1, r2
 8019ee4:	458c      	cmp	ip, r1
 8019ee6:	bfa8      	it	ge
 8019ee8:	4613      	movge	r3, r2
 8019eea:	1b5b      	subs	r3, r3, r5
 8019eec:	80c3      	strh	r3, [r0, #6]
 8019eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	8003      	strh	r3, [r0, #0]
 8019ef6:	8043      	strh	r3, [r0, #2]
 8019ef8:	8083      	strh	r3, [r0, #4]
 8019efa:	80c3      	strh	r3, [r0, #6]
 8019efc:	e7f7      	b.n	8019eee <_ZN8touchgfx4RectaNERKS0_+0x76>

08019efe <_ZNK8touchgfx4Rect7isEmptyEv>:
 8019efe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	dd06      	ble.n	8019f14 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8019f06:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8019f0a:	2800      	cmp	r0, #0
 8019f0c:	bfcc      	ite	gt
 8019f0e:	2000      	movgt	r0, #0
 8019f10:	2001      	movle	r0, #1
 8019f12:	4770      	bx	lr
 8019f14:	2001      	movs	r0, #1
 8019f16:	4770      	bx	lr

08019f18 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8019f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	4604      	mov	r4, r0
 8019f20:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019f22:	8003      	strh	r3, [r0, #0]
 8019f24:	8043      	strh	r3, [r0, #2]
 8019f26:	8083      	strh	r3, [r0, #4]
 8019f28:	80c3      	strh	r3, [r0, #6]
 8019f2a:	2d00      	cmp	r5, #0
 8019f2c:	d040      	beq.n	8019fb0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8019f2e:	1d28      	adds	r0, r5, #4
 8019f30:	f7ff ffe5 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 8019f34:	b988      	cbnz	r0, 8019f5a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8019f36:	4620      	mov	r0, r4
 8019f38:	f7ff ffe1 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 8019f3c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8019f40:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019f44:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8019f48:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8019f4c:	b138      	cbz	r0, 8019f5e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8019f4e:	8022      	strh	r2, [r4, #0]
 8019f50:	8063      	strh	r3, [r4, #2]
 8019f52:	f8a4 e004 	strh.w	lr, [r4, #4]
 8019f56:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019f5a:	69ad      	ldr	r5, [r5, #24]
 8019f5c:	e7e5      	b.n	8019f2a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8019f5e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019f62:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019f66:	4290      	cmp	r0, r2
 8019f68:	4607      	mov	r7, r0
 8019f6a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8019f6e:	460e      	mov	r6, r1
 8019f70:	bfa8      	it	ge
 8019f72:	4617      	movge	r7, r2
 8019f74:	4299      	cmp	r1, r3
 8019f76:	4472      	add	r2, lr
 8019f78:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8019f7c:	bfa8      	it	ge
 8019f7e:	461e      	movge	r6, r3
 8019f80:	4440      	add	r0, r8
 8019f82:	4471      	add	r1, lr
 8019f84:	4463      	add	r3, ip
 8019f86:	b200      	sxth	r0, r0
 8019f88:	8027      	strh	r7, [r4, #0]
 8019f8a:	b212      	sxth	r2, r2
 8019f8c:	8066      	strh	r6, [r4, #2]
 8019f8e:	b209      	sxth	r1, r1
 8019f90:	b21b      	sxth	r3, r3
 8019f92:	4290      	cmp	r0, r2
 8019f94:	bfac      	ite	ge
 8019f96:	ebc7 0200 	rsbge	r2, r7, r0
 8019f9a:	ebc7 0202 	rsblt	r2, r7, r2
 8019f9e:	4299      	cmp	r1, r3
 8019fa0:	bfac      	ite	ge
 8019fa2:	ebc6 0301 	rsbge	r3, r6, r1
 8019fa6:	ebc6 0303 	rsblt	r3, r6, r3
 8019faa:	80a2      	strh	r2, [r4, #4]
 8019fac:	80e3      	strh	r3, [r4, #6]
 8019fae:	e7d4      	b.n	8019f5a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8019fb0:	4620      	mov	r0, r4
 8019fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019fb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8019fb6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019fba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8019fbe:	b383      	cbz	r3, 801a022 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8019fc0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019fc2:	b374      	cbz	r4, 801a022 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8019fc4:	f9b1 5000 	ldrsh.w	r5, [r1]
 8019fc8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8019fcc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8019fd0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8019fd4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019fd8:	b303      	cbz	r3, 801a01c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8019fda:	4668      	mov	r0, sp
 8019fdc:	1d21      	adds	r1, r4, #4
 8019fde:	f8ad 5000 	strh.w	r5, [sp]
 8019fe2:	f8ad 6002 	strh.w	r6, [sp, #2]
 8019fe6:	f8ad 7004 	strh.w	r7, [sp, #4]
 8019fea:	f8ad 8006 	strh.w	r8, [sp, #6]
 8019fee:	f7ff ff43 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 8019ff2:	4668      	mov	r0, sp
 8019ff4:	f7ff ff83 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ff8:	b980      	cbnz	r0, 801a01c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8019ffa:	f8bd 3000 	ldrh.w	r3, [sp]
 8019ffe:	4669      	mov	r1, sp
 801a000:	88a2      	ldrh	r2, [r4, #4]
 801a002:	4620      	mov	r0, r4
 801a004:	1a9b      	subs	r3, r3, r2
 801a006:	88e2      	ldrh	r2, [r4, #6]
 801a008:	f8ad 3000 	strh.w	r3, [sp]
 801a00c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a010:	1a9b      	subs	r3, r3, r2
 801a012:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a016:	6823      	ldr	r3, [r4, #0]
 801a018:	689b      	ldr	r3, [r3, #8]
 801a01a:	4798      	blx	r3
 801a01c:	69a4      	ldr	r4, [r4, #24]
 801a01e:	2c00      	cmp	r4, #0
 801a020:	d1d8      	bne.n	8019fd4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801a022:	b002      	add	sp, #8
 801a024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a028 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801a028:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a02a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a02e:	460d      	mov	r5, r1
 801a030:	4616      	mov	r6, r2
 801a032:	b323      	cbz	r3, 801a07e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801a034:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a036:	b314      	cbz	r4, 801a07e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801a038:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a03c:	b1eb      	cbz	r3, 801a07a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801a03e:	6828      	ldr	r0, [r5, #0]
 801a040:	466b      	mov	r3, sp
 801a042:	6869      	ldr	r1, [r5, #4]
 801a044:	c303      	stmia	r3!, {r0, r1}
 801a046:	4668      	mov	r0, sp
 801a048:	1d21      	adds	r1, r4, #4
 801a04a:	f7ff ff15 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 801a04e:	4668      	mov	r0, sp
 801a050:	f7ff ff55 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801a054:	b988      	cbnz	r0, 801a07a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801a056:	f8bd 3000 	ldrh.w	r3, [sp]
 801a05a:	4669      	mov	r1, sp
 801a05c:	88a2      	ldrh	r2, [r4, #4]
 801a05e:	4620      	mov	r0, r4
 801a060:	1a9b      	subs	r3, r3, r2
 801a062:	88e2      	ldrh	r2, [r4, #6]
 801a064:	f8ad 3000 	strh.w	r3, [sp]
 801a068:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a06c:	1a9b      	subs	r3, r3, r2
 801a06e:	4632      	mov	r2, r6
 801a070:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a074:	6823      	ldr	r3, [r4, #0]
 801a076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a078:	4798      	blx	r3
 801a07a:	69a4      	ldr	r4, [r4, #24]
 801a07c:	e7db      	b.n	801a036 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801a07e:	b002      	add	sp, #8
 801a080:	bd70      	pop	{r4, r5, r6, pc}

0801a082 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801a082:	f8b0 00ec 	ldrh.w	r0, [r0, #236]	; 0xec
 801a086:	4770      	bx	lr

0801a088 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 801a088:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 801a08c:	4770      	bx	lr

0801a08e <_ZNK8touchgfx6Slider11getMinValueEv>:
 801a08e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 801a090:	4770      	bx	lr

0801a092 <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801a092:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 801a094:	4770      	bx	lr

0801a096 <_ZN8touchgfx6Slider8setValueEi>:
 801a096:	b570      	push	{r4, r5, r6, lr}
 801a098:	6803      	ldr	r3, [r0, #0]
 801a09a:	4604      	mov	r4, r0
 801a09c:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801a0a0:	4798      	blx	r3
 801a0a2:	4601      	mov	r1, r0
 801a0a4:	462b      	mov	r3, r5
 801a0a6:	4620      	mov	r0, r4
 801a0a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0ac:	4718      	bx	r3

0801a0ae <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801a0ae:	b538      	push	{r3, r4, r5, lr}
 801a0b0:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 801a0b4:	4605      	mov	r5, r0
 801a0b6:	428c      	cmp	r4, r1
 801a0b8:	bfa8      	it	ge
 801a0ba:	460c      	movge	r4, r1
 801a0bc:	429c      	cmp	r4, r3
 801a0be:	bfac      	ite	ge
 801a0c0:	ebc3 0404 	rsbge	r4, r3, r4
 801a0c4:	ebc3 0403 	rsblt	r4, r3, r3
 801a0c8:	6803      	ldr	r3, [r0, #0]
 801a0ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a0ce:	4798      	blx	r3
 801a0d0:	682b      	ldr	r3, [r5, #0]
 801a0d2:	fb00 4404 	mla	r4, r0, r4, r4
 801a0d6:	4628      	mov	r0, r5
 801a0d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a0dc:	4798      	blx	r3
 801a0de:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 801a0e2:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 801a0e6:	2a01      	cmp	r2, #1
 801a0e8:	fb94 f0f0 	sdiv	r0, r4, r0
 801a0ec:	bf08      	it	eq
 801a0ee:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 801a0f2:	4418      	add	r0, r3
 801a0f4:	bf04      	itt	eq
 801a0f6:	1a10      	subeq	r0, r2, r0
 801a0f8:	18c0      	addeq	r0, r0, r3
 801a0fa:	b200      	sxth	r0, r0
 801a0fc:	bd38      	pop	{r3, r4, r5, pc}

0801a0fe <_ZNK8touchgfx6Slider15positionToValueEs>:
 801a0fe:	b570      	push	{r4, r5, r6, lr}
 801a100:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 801a104:	4605      	mov	r5, r0
 801a106:	460c      	mov	r4, r1
 801a108:	428b      	cmp	r3, r1
 801a10a:	d109      	bne.n	801a120 <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 801a10c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a10e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801a112:	2b01      	cmp	r3, #1
 801a114:	bf01      	itttt	eq
 801a116:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 801a118:	1a18      	subeq	r0, r3, r0
 801a11a:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 801a11c:	18c0      	addeq	r0, r0, r3
 801a11e:	bd70      	pop	{r4, r5, r6, pc}
 801a120:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 801a124:	428b      	cmp	r3, r1
 801a126:	d101      	bne.n	801a12c <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 801a128:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801a12a:	e7f0      	b.n	801a10e <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 801a12c:	6803      	ldr	r3, [r0, #0]
 801a12e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a132:	4798      	blx	r3
 801a134:	682b      	ldr	r3, [r5, #0]
 801a136:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 801a13a:	4606      	mov	r6, r0
 801a13c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a140:	4628      	mov	r0, r5
 801a142:	1a64      	subs	r4, r4, r1
 801a144:	4798      	blx	r3
 801a146:	2102      	movs	r1, #2
 801a148:	682b      	ldr	r3, [r5, #0]
 801a14a:	fb96 f6f1 	sdiv	r6, r6, r1
 801a14e:	fb00 6404 	mla	r4, r0, r4, r6
 801a152:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a156:	4628      	mov	r0, r5
 801a158:	4798      	blx	r3
 801a15a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801a15c:	fb94 f0f0 	sdiv	r0, r4, r0
 801a160:	4418      	add	r0, r3
 801a162:	e7d4      	b.n	801a10e <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

0801a164 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 801a164:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801a168:	2302      	movs	r3, #2
 801a16a:	b92a      	cbnz	r2, 801a178 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 801a16c:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 801a170:	fb90 f0f3 	sdiv	r0, r0, r3
 801a174:	b280      	uxth	r0, r0
 801a176:	4770      	bx	lr
 801a178:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 801a17c:	e7f8      	b.n	801a170 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801a17e <_ZN8touchgfx6Slider13setValueRangeEiii>:
 801a17e:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801a182:	6802      	ldr	r2, [r0, #0]
 801a184:	4619      	mov	r1, r3
 801a186:	b410      	push	{r4}
 801a188:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a18c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 801a190:	4710      	bx	r2

0801a192 <_ZN8touchgfx6Slider13setValueRangeEii>:
 801a192:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a194:	428b      	cmp	r3, r1
 801a196:	b410      	push	{r4}
 801a198:	db09      	blt.n	801a1ae <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 801a19a:	4293      	cmp	r3, r2
 801a19c:	bfa8      	it	ge
 801a19e:	4613      	movge	r3, r2
 801a1a0:	6804      	ldr	r4, [r0, #0]
 801a1a2:	f8d4 4098 	ldr.w	r4, [r4, #152]	; 0x98
 801a1a6:	46a4      	mov	ip, r4
 801a1a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1ac:	4760      	bx	ip
 801a1ae:	460b      	mov	r3, r1
 801a1b0:	e7f6      	b.n	801a1a0 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

0801a1b2 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 801a1b2:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 801a1b6:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 801a1ba:	1a10      	subs	r0, r2, r0
 801a1bc:	4770      	bx	lr

0801a1be <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 801a1be:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 801a1c2:	1a10      	subs	r0, r2, r0
 801a1c4:	4770      	bx	lr

0801a1c6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 801a1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1ca:	790b      	ldrb	r3, [r1, #4]
 801a1cc:	4604      	mov	r4, r0
 801a1ce:	460d      	mov	r5, r1
 801a1d0:	b323      	cbz	r3, 801a21c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 801a1d2:	2b01      	cmp	r3, #1
 801a1d4:	d135      	bne.n	801a242 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801a1d6:	6823      	ldr	r3, [r4, #0]
 801a1d8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801a1dc:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 801a1e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a1e4:	2a00      	cmp	r2, #0
 801a1e6:	d12a      	bne.n	801a23e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 801a1e8:	88ee      	ldrh	r6, [r5, #6]
 801a1ea:	4620      	mov	r0, r4
 801a1ec:	4798      	blx	r3
 801a1ee:	1a31      	subs	r1, r6, r0
 801a1f0:	4620      	mov	r0, r4
 801a1f2:	b209      	sxth	r1, r1
 801a1f4:	47b8      	blx	r7
 801a1f6:	792b      	ldrb	r3, [r5, #4]
 801a1f8:	2b01      	cmp	r3, #1
 801a1fa:	d122      	bne.n	801a242 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801a1fc:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801a200:	b1f8      	cbz	r0, 801a242 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801a202:	6803      	ldr	r3, [r0, #0]
 801a204:	68db      	ldr	r3, [r3, #12]
 801a206:	4798      	blx	r3
 801a208:	b1d8      	cbz	r0, 801a242 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801a20a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801a20e:	4621      	mov	r1, r4
 801a210:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801a212:	6803      	ldr	r3, [r0, #0]
 801a214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a218:	689b      	ldr	r3, [r3, #8]
 801a21a:	4718      	bx	r3
 801a21c:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 801a220:	2800      	cmp	r0, #0
 801a222:	d0d8      	beq.n	801a1d6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801a224:	6803      	ldr	r3, [r0, #0]
 801a226:	68db      	ldr	r3, [r3, #12]
 801a228:	4798      	blx	r3
 801a22a:	2800      	cmp	r0, #0
 801a22c:	d0d3      	beq.n	801a1d6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801a22e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 801a232:	4621      	mov	r1, r4
 801a234:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801a236:	6803      	ldr	r3, [r0, #0]
 801a238:	689b      	ldr	r3, [r3, #8]
 801a23a:	4798      	blx	r3
 801a23c:	e7cb      	b.n	801a1d6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801a23e:	892e      	ldrh	r6, [r5, #8]
 801a240:	e7d3      	b.n	801a1ea <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 801a242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a246 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 801a246:	b570      	push	{r4, r5, r6, lr}
 801a248:	6803      	ldr	r3, [r0, #0]
 801a24a:	4604      	mov	r4, r0
 801a24c:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801a250:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 801a254:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a258:	b942      	cbnz	r2, 801a26c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 801a25a:	894d      	ldrh	r5, [r1, #10]
 801a25c:	4798      	blx	r3
 801a25e:	1a29      	subs	r1, r5, r0
 801a260:	4633      	mov	r3, r6
 801a262:	4620      	mov	r0, r4
 801a264:	b209      	sxth	r1, r1
 801a266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a26a:	4718      	bx	r3
 801a26c:	898d      	ldrh	r5, [r1, #12]
 801a26e:	e7f5      	b.n	801a25c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>

0801a270 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 801a270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a274:	461d      	mov	r5, r3
 801a276:	f04f 0a00 	mov.w	sl, #0
 801a27a:	b213      	sxth	r3, r2
 801a27c:	4604      	mov	r4, r0
 801a27e:	fa0f fb81 	sxth.w	fp, r1
 801a282:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
 801a286:	4689      	mov	r9, r1
 801a288:	4690      	mov	r8, r2
 801a28a:	4659      	mov	r1, fp
 801a28c:	461a      	mov	r2, r3
 801a28e:	303c      	adds	r0, #60	; 0x3c
 801a290:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 801a294:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 801a298:	9301      	str	r3, [sp, #4]
 801a29a:	f7ed fea6 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
 801a29e:	9b01      	ldr	r3, [sp, #4]
 801a2a0:	4659      	mov	r1, fp
 801a2a2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 801a2a6:	461a      	mov	r2, r3
 801a2a8:	f7ed fe9f 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
 801a2ac:	4652      	mov	r2, sl
 801a2ae:	4651      	mov	r1, sl
 801a2b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801a2b4:	f7ed fe99 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
 801a2b8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801a2bc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	4489      	add	r9, r1
 801a2c4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801a2c8:	4490      	add	r8, r2
 801a2ca:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 801a2ce:	4431      	add	r1, r6
 801a2d0:	fa1f f989 	uxth.w	r9, r9
 801a2d4:	442a      	add	r2, r5
 801a2d6:	fa1f f888 	uxth.w	r8, r8
 801a2da:	b289      	uxth	r1, r1
 801a2dc:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801a2e0:	b292      	uxth	r2, r2
 801a2e2:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 801a2e6:	4589      	cmp	r9, r1
 801a2e8:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 801a2ec:	bf8c      	ite	hi
 801a2ee:	fa0f f189 	sxthhi.w	r1, r9
 801a2f2:	b209      	sxthls	r1, r1
 801a2f4:	4590      	cmp	r8, r2
 801a2f6:	bf8c      	ite	hi
 801a2f8:	fa0f f288 	sxthhi.w	r2, r8
 801a2fc:	b212      	sxthls	r2, r2
 801a2fe:	f7ed fe92 	bl	8008026 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a302:	6823      	ldr	r3, [r4, #0]
 801a304:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a306:	4620      	mov	r0, r4
 801a308:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801a30c:	b003      	add	sp, #12
 801a30e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a312:	4718      	bx	r3

0801a314 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 801a314:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a318:	461d      	mov	r5, r3
 801a31a:	fa0f fa81 	sxth.w	sl, r1
 801a31e:	2301      	movs	r3, #1
 801a320:	fa0f fb82 	sxth.w	fp, r2
 801a324:	4604      	mov	r4, r0
 801a326:	4689      	mov	r9, r1
 801a328:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801a32c:	4651      	mov	r1, sl
 801a32e:	4690      	mov	r8, r2
 801a330:	303c      	adds	r0, #60	; 0x3c
 801a332:	465a      	mov	r2, fp
 801a334:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 801a338:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 801a33c:	f7ed fe55 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
 801a340:	465a      	mov	r2, fp
 801a342:	4651      	mov	r1, sl
 801a344:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 801a348:	f7ed fe4f 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
 801a34c:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801a350:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 801a354:	4620      	mov	r0, r4
 801a356:	4489      	add	r9, r1
 801a358:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801a35c:	4490      	add	r8, r2
 801a35e:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 801a362:	4429      	add	r1, r5
 801a364:	fa1f f989 	uxth.w	r9, r9
 801a368:	4432      	add	r2, r6
 801a36a:	fa1f f888 	uxth.w	r8, r8
 801a36e:	b289      	uxth	r1, r1
 801a370:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 801a374:	b292      	uxth	r2, r2
 801a376:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 801a37a:	4589      	cmp	r9, r1
 801a37c:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 801a380:	bf8c      	ite	hi
 801a382:	fa0f f189 	sxthhi.w	r1, r9
 801a386:	b209      	sxthls	r1, r1
 801a388:	4590      	cmp	r8, r2
 801a38a:	bf8c      	ite	hi
 801a38c:	fa0f f288 	sxthhi.w	r2, r8
 801a390:	b212      	sxthls	r2, r2
 801a392:	f7ed fe48 	bl	8008026 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a396:	6823      	ldr	r3, [r4, #0]
 801a398:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a39a:	4620      	mov	r0, r4
 801a39c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801a3a0:	b001      	add	sp, #4
 801a3a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3a6:	4718      	bx	r3

0801a3a8 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 801a3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3ac:	f9b0 80ec 	ldrsh.w	r8, [r0, #236]	; 0xec
 801a3b0:	4604      	mov	r4, r0
 801a3b2:	3094      	adds	r0, #148	; 0x94
 801a3b4:	4588      	cmp	r8, r1
 801a3b6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a3ba:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 801a3be:	bfb8      	it	lt
 801a3c0:	4688      	movlt	r8, r1
 801a3c2:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 801a3c6:	4588      	cmp	r8, r1
 801a3c8:	bfa8      	it	ge
 801a3ca:	4688      	movge	r8, r1
 801a3cc:	fa1f f788 	uxth.w	r7, r8
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d12f      	bne.n	801a434 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 801a3d4:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 801a3d8:	4641      	mov	r1, r8
 801a3da:	f7e9 fd2a 	bl	8003e32 <_ZN8touchgfx8Drawable6moveToEss>
 801a3de:	4630      	mov	r0, r6
 801a3e0:	f003 fb35 	bl	801da4e <_ZNK8touchgfx8Drawable10invalidateEv>
 801a3e4:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 801a3e8:	6823      	ldr	r3, [r4, #0]
 801a3ea:	4620      	mov	r0, r4
 801a3ec:	1abf      	subs	r7, r7, r2
 801a3ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a3f2:	b2bf      	uxth	r7, r7
 801a3f4:	4798      	blx	r3
 801a3f6:	4407      	add	r7, r0
 801a3f8:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
 801a3fc:	4630      	mov	r0, r6
 801a3fe:	f003 fb26 	bl	801da4e <_ZNK8touchgfx8Drawable10invalidateEv>
 801a402:	6823      	ldr	r3, [r4, #0]
 801a404:	4641      	mov	r1, r8
 801a406:	4620      	mov	r0, r4
 801a408:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a40c:	4798      	blx	r3
 801a40e:	6320      	str	r0, [r4, #48]	; 0x30
 801a410:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801a414:	2800      	cmp	r0, #0
 801a416:	d03d      	beq.n	801a494 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 801a418:	6803      	ldr	r3, [r0, #0]
 801a41a:	68db      	ldr	r3, [r3, #12]
 801a41c:	4798      	blx	r3
 801a41e:	2800      	cmp	r0, #0
 801a420:	d038      	beq.n	801a494 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 801a422:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801a426:	4621      	mov	r1, r4
 801a428:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801a42a:	6803      	ldr	r3, [r0, #0]
 801a42c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a430:	689b      	ldr	r3, [r3, #8]
 801a432:	4718      	bx	r3
 801a434:	4642      	mov	r2, r8
 801a436:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 801a43a:	f7e9 fcfa 	bl	8003e32 <_ZN8touchgfx8Drawable6moveToEss>
 801a43e:	4630      	mov	r0, r6
 801a440:	f003 fb05 	bl	801da4e <_ZNK8touchgfx8Drawable10invalidateEv>
 801a444:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 801a448:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 801a44c:	6823      	ldr	r3, [r4, #0]
 801a44e:	4405      	add	r5, r0
 801a450:	4620      	mov	r0, r4
 801a452:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a456:	b2ad      	uxth	r5, r5
 801a458:	4798      	blx	r3
 801a45a:	6823      	ldr	r3, [r4, #0]
 801a45c:	1bed      	subs	r5, r5, r7
 801a45e:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	; 0xc4
 801a462:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a466:	1a2d      	subs	r5, r5, r0
 801a468:	4620      	mov	r0, r4
 801a46a:	4798      	blx	r3
 801a46c:	4438      	add	r0, r7
 801a46e:	b2ad      	uxth	r5, r5
 801a470:	f9b4 90c8 	ldrsh.w	r9, [r4, #200]	; 0xc8
 801a474:	b202      	sxth	r2, r0
 801a476:	4651      	mov	r1, sl
 801a478:	4630      	mov	r0, r6
 801a47a:	f7ed fdb6 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
 801a47e:	4630      	mov	r0, r6
 801a480:	b22a      	sxth	r2, r5
 801a482:	4649      	mov	r1, r9
 801a484:	f7ed fdcf 	bl	8008026 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a488:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 801a48c:	1a2d      	subs	r5, r5, r0
 801a48e:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 801a492:	e7b3      	b.n	801a3fc <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 801a494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a498 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 801a498:	b538      	push	{r3, r4, r5, lr}
 801a49a:	4604      	mov	r4, r0
 801a49c:	460d      	mov	r5, r1
 801a49e:	2226      	movs	r2, #38	; 0x26
 801a4a0:	2100      	movs	r1, #0
 801a4a2:	f00d f96d 	bl	8027780 <memset>
 801a4a6:	4620      	mov	r0, r4
 801a4a8:	f7ed fd4e 	bl	8007f48 <_ZN8touchgfx8DrawableC1Ev>
 801a4ac:	4b06      	ldr	r3, [pc, #24]	; (801a4c8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	4629      	mov	r1, r5
 801a4b2:	6023      	str	r3, [r4, #0]
 801a4b4:	882b      	ldrh	r3, [r5, #0]
 801a4b6:	84e3      	strh	r3, [r4, #38]	; 0x26
 801a4b8:	23ff      	movs	r3, #255	; 0xff
 801a4ba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 801a4be:	f001 f9e7 	bl	801b890 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801a4c2:	4620      	mov	r0, r4
 801a4c4:	bd38      	pop	{r3, r4, r5, pc}
 801a4c6:	bf00      	nop
 801a4c8:	0802bf2c 	.word	0x0802bf2c

0801a4cc <_ZN8touchgfx6SliderC1Ev>:
 801a4cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4d0:	4604      	mov	r4, r0
 801a4d2:	2500      	movs	r5, #0
 801a4d4:	f7ed fd38 	bl	8007f48 <_ZN8touchgfx8DrawableC1Ev>
 801a4d8:	ae02      	add	r6, sp, #8
 801a4da:	4b28      	ldr	r3, [pc, #160]	; (801a57c <_ZN8touchgfx6SliderC1Ev+0xb0>)
 801a4dc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801a4e0:	f04f 0b01 	mov.w	fp, #1
 801a4e4:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 801a4e8:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 801a4ec:	6023      	str	r3, [r4, #0]
 801a4ee:	f826 7d04 	strh.w	r7, [r6, #-4]!
 801a4f2:	4648      	mov	r0, r9
 801a4f4:	4631      	mov	r1, r6
 801a4f6:	62a5      	str	r5, [r4, #40]	; 0x28
 801a4f8:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 801a4fc:	f104 0894 	add.w	r8, r4, #148	; 0x94
 801a500:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 801a504:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 801a508:	f7ff ffc6 	bl	801a498 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801a50c:	4631      	mov	r1, r6
 801a50e:	4650      	mov	r0, sl
 801a510:	f8ad 7004 	strh.w	r7, [sp, #4]
 801a514:	f7ff ffc0 	bl	801a498 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801a518:	4631      	mov	r1, r6
 801a51a:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 801a51e:	4640      	mov	r0, r8
 801a520:	f8ad 7004 	strh.w	r7, [sp, #4]
 801a524:	f7ff ffb8 	bl	801a498 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801a528:	4630      	mov	r0, r6
 801a52a:	f7ed fd0d 	bl	8007f48 <_ZN8touchgfx8DrawableC1Ev>
 801a52e:	4b14      	ldr	r3, [pc, #80]	; (801a580 <_ZN8touchgfx6SliderC1Ev+0xb4>)
 801a530:	4651      	mov	r1, sl
 801a532:	4630      	mov	r0, r6
 801a534:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 801a538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801a53c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
 801a540:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 801a544:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 801a548:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 801a54c:	f7ff fb18 	bl	8019b80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a550:	4649      	mov	r1, r9
 801a552:	4620      	mov	r0, r4
 801a554:	f7ff fb14 	bl	8019b80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a558:	4631      	mov	r1, r6
 801a55a:	4620      	mov	r0, r4
 801a55c:	f7ff fb10 	bl	8019b80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a560:	4641      	mov	r1, r8
 801a562:	4620      	mov	r0, r4
 801a564:	f7ff fb0c 	bl	8019b80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a568:	4620      	mov	r0, r4
 801a56a:	2264      	movs	r2, #100	; 0x64
 801a56c:	4629      	mov	r1, r5
 801a56e:	f7ff fe10 	bl	801a192 <_ZN8touchgfx6Slider13setValueRangeEii>
 801a572:	4620      	mov	r0, r4
 801a574:	b003      	add	sp, #12
 801a576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a57a:	bf00      	nop
 801a57c:	0802bc2c 	.word	0x0802bc2c
 801a580:	0802bb9c 	.word	0x0802bb9c

0801a584 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 801a584:	b570      	push	{r4, r5, r6, lr}
 801a586:	4604      	mov	r4, r0
 801a588:	4616      	mov	r6, r2
 801a58a:	461d      	mov	r5, r3
 801a58c:	303c      	adds	r0, #60	; 0x3c
 801a58e:	f001 f97f 	bl	801b890 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801a592:	4631      	mov	r1, r6
 801a594:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801a598:	f001 f97a 	bl	801b890 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801a59c:	4629      	mov	r1, r5
 801a59e:	f104 0094 	add.w	r0, r4, #148	; 0x94
 801a5a2:	f001 f975 	bl	801b890 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801a5a6:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	; 0x72
 801a5aa:	f9b4 1070 	ldrsh.w	r1, [r4, #112]	; 0x70
 801a5ae:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 801a5b2:	f7ed fd38 	bl	8008026 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a5b6:	bd70      	pop	{r4, r5, r6, pc}

0801a5b8 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801a5b8:	4770      	bx	lr

0801a5ba <_ZN8touchgfx3HAL10FlushCacheEv>:
 801a5ba:	4770      	bx	lr

0801a5bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801a5bc:	6803      	ldr	r3, [r0, #0]
 801a5be:	b513      	push	{r0, r1, r4, lr}
 801a5c0:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 801a5c4:	2300      	movs	r3, #0
 801a5c6:	e9cd 3300 	strd	r3, r3, [sp]
 801a5ca:	466b      	mov	r3, sp
 801a5cc:	47a0      	blx	r4
 801a5ce:	b002      	add	sp, #8
 801a5d0:	bd10      	pop	{r4, pc}

0801a5d2 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801a5d2:	2301      	movs	r3, #1
 801a5d4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801a5d8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801a5dc:	4770      	bx	lr

0801a5de <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801a5de:	2301      	movs	r3, #1
 801a5e0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801a5e4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801a5e8:	4770      	bx	lr

0801a5ea <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801a5ea:	6843      	ldr	r3, [r0, #4]
 801a5ec:	2201      	movs	r2, #1
 801a5ee:	725a      	strb	r2, [r3, #9]
 801a5f0:	6840      	ldr	r0, [r0, #4]
 801a5f2:	6803      	ldr	r3, [r0, #0]
 801a5f4:	691b      	ldr	r3, [r3, #16]
 801a5f6:	4718      	bx	r3

0801a5f8 <_ZN8touchgfx3HAL8flushDMAEv>:
 801a5f8:	6840      	ldr	r0, [r0, #4]
 801a5fa:	6803      	ldr	r3, [r0, #0]
 801a5fc:	689b      	ldr	r3, [r3, #8]
 801a5fe:	4718      	bx	r3

0801a600 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801a600:	b530      	push	{r4, r5, lr}
 801a602:	b08b      	sub	sp, #44	; 0x2c
 801a604:	6804      	ldr	r4, [r0, #0]
 801a606:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801a60a:	9509      	str	r5, [sp, #36]	; 0x24
 801a60c:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801a610:	9508      	str	r5, [sp, #32]
 801a612:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801a616:	9507      	str	r5, [sp, #28]
 801a618:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801a61c:	9506      	str	r5, [sp, #24]
 801a61e:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801a622:	9505      	str	r5, [sp, #20]
 801a624:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801a628:	9504      	str	r5, [sp, #16]
 801a62a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801a62e:	9503      	str	r5, [sp, #12]
 801a630:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801a634:	9502      	str	r5, [sp, #8]
 801a636:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801a63a:	e9cd 3500 	strd	r3, r5, [sp]
 801a63e:	4613      	mov	r3, r2
 801a640:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801a642:	2200      	movs	r2, #0
 801a644:	47a0      	blx	r4
 801a646:	b00b      	add	sp, #44	; 0x2c
 801a648:	bd30      	pop	{r4, r5, pc}
	...

0801a64c <_ZN8touchgfx3HAL10beginFrameEv>:
 801a64c:	4b04      	ldr	r3, [pc, #16]	; (801a660 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801a64e:	781b      	ldrb	r3, [r3, #0]
 801a650:	b123      	cbz	r3, 801a65c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801a652:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801a656:	f080 0001 	eor.w	r0, r0, #1
 801a65a:	4770      	bx	lr
 801a65c:	2001      	movs	r0, #1
 801a65e:	4770      	bx	lr
 801a660:	2402628a 	.word	0x2402628a

0801a664 <_ZN8touchgfx3HAL8endFrameEv>:
 801a664:	b510      	push	{r4, lr}
 801a666:	4604      	mov	r4, r0
 801a668:	6840      	ldr	r0, [r0, #4]
 801a66a:	6803      	ldr	r3, [r0, #0]
 801a66c:	689b      	ldr	r3, [r3, #8]
 801a66e:	4798      	blx	r3
 801a670:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801a674:	b113      	cbz	r3, 801a67c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801a676:	2301      	movs	r3, #1
 801a678:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801a67c:	bd10      	pop	{r4, pc}

0801a67e <_ZN8touchgfx3HAL10initializeEv>:
 801a67e:	b510      	push	{r4, lr}
 801a680:	4604      	mov	r4, r0
 801a682:	f7e7 fe09 	bl	8002298 <_ZN8touchgfx10OSWrappers10initializeEv>
 801a686:	f7e6 f857 	bl	8000738 <_ZN8touchgfx4GPIO4initEv>
 801a68a:	6860      	ldr	r0, [r4, #4]
 801a68c:	6803      	ldr	r3, [r0, #0]
 801a68e:	68db      	ldr	r3, [r3, #12]
 801a690:	4798      	blx	r3
 801a692:	68e0      	ldr	r0, [r4, #12]
 801a694:	6803      	ldr	r3, [r0, #0]
 801a696:	689b      	ldr	r3, [r3, #8]
 801a698:	4798      	blx	r3
 801a69a:	6823      	ldr	r3, [r4, #0]
 801a69c:	4620      	mov	r0, r4
 801a69e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6a4:	4718      	bx	r3

0801a6a6 <_ZN8touchgfx3HAL9taskEntryEv>:
 801a6a6:	b508      	push	{r3, lr}
 801a6a8:	6803      	ldr	r3, [r0, #0]
 801a6aa:	4604      	mov	r4, r0
 801a6ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a6b0:	4798      	blx	r3
 801a6b2:	6823      	ldr	r3, [r4, #0]
 801a6b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	4798      	blx	r3
 801a6ba:	f7e7 fe63 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801a6be:	6823      	ldr	r3, [r4, #0]
 801a6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a6c2:	e7f8      	b.n	801a6b6 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801a6c4 <_ZN8touchgfx3HAL4tickEv>:
 801a6c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a6c6:	6803      	ldr	r3, [r0, #0]
 801a6c8:	4604      	mov	r4, r0
 801a6ca:	4d5b      	ldr	r5, [pc, #364]	; (801a838 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801a6cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a6d0:	4798      	blx	r3
 801a6d2:	2800      	cmp	r0, #0
 801a6d4:	f000 8095 	beq.w	801a802 <_ZN8touchgfx3HAL4tickEv+0x13e>
 801a6d8:	2001      	movs	r0, #1
 801a6da:	2600      	movs	r6, #0
 801a6dc:	f7e6 f852 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a6e0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801a6e4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801a6e8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a6ec:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801a6f0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801a6f4:	b133      	cbz	r3, 801a704 <_ZN8touchgfx3HAL4tickEv+0x40>
 801a6f6:	6823      	ldr	r3, [r4, #0]
 801a6f8:	4620      	mov	r0, r4
 801a6fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a6fe:	4798      	blx	r3
 801a700:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801a704:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a708:	2601      	movs	r6, #1
 801a70a:	6862      	ldr	r2, [r4, #4]
 801a70c:	f083 0301 	eor.w	r3, r3, #1
 801a710:	702e      	strb	r6, [r5, #0]
 801a712:	7253      	strb	r3, [r2, #9]
 801a714:	f002 f956 	bl	801c9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801a718:	6803      	ldr	r3, [r0, #0]
 801a71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a71c:	4798      	blx	r3
 801a71e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a722:	b90b      	cbnz	r3, 801a728 <_ZN8touchgfx3HAL4tickEv+0x64>
 801a724:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801a728:	f002 f94c 	bl	801c9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801a72c:	6803      	ldr	r3, [r0, #0]
 801a72e:	695b      	ldr	r3, [r3, #20]
 801a730:	4798      	blx	r3
 801a732:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a734:	6803      	ldr	r3, [r0, #0]
 801a736:	691b      	ldr	r3, [r3, #16]
 801a738:	4798      	blx	r3
 801a73a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a73e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801a742:	3b01      	subs	r3, #1
 801a744:	b2db      	uxtb	r3, r3
 801a746:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a74a:	b10a      	cbz	r2, 801a750 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d1eb      	bne.n	801a728 <_ZN8touchgfx3HAL4tickEv+0x64>
 801a750:	4a3a      	ldr	r2, [pc, #232]	; (801a83c <_ZN8touchgfx3HAL4tickEv+0x178>)
 801a752:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801a756:	7813      	ldrb	r3, [r2, #0]
 801a758:	3301      	adds	r3, #1
 801a75a:	b25b      	sxtb	r3, r3
 801a75c:	4299      	cmp	r1, r3
 801a75e:	7013      	strb	r3, [r2, #0]
 801a760:	dc10      	bgt.n	801a784 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a762:	2300      	movs	r3, #0
 801a764:	68e0      	ldr	r0, [r4, #12]
 801a766:	a902      	add	r1, sp, #8
 801a768:	7013      	strb	r3, [r2, #0]
 801a76a:	aa03      	add	r2, sp, #12
 801a76c:	6803      	ldr	r3, [r0, #0]
 801a76e:	68db      	ldr	r3, [r3, #12]
 801a770:	4798      	blx	r3
 801a772:	6823      	ldr	r3, [r4, #0]
 801a774:	2800      	cmp	r0, #0
 801a776:	d050      	beq.n	801a81a <_ZN8touchgfx3HAL4tickEv+0x156>
 801a778:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a77c:	4620      	mov	r0, r4
 801a77e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a782:	4798      	blx	r3
 801a784:	2300      	movs	r3, #0
 801a786:	6960      	ldr	r0, [r4, #20]
 801a788:	f88d 3007 	strb.w	r3, [sp, #7]
 801a78c:	b158      	cbz	r0, 801a7a6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a78e:	6803      	ldr	r3, [r0, #0]
 801a790:	f10d 0107 	add.w	r1, sp, #7
 801a794:	68db      	ldr	r3, [r3, #12]
 801a796:	4798      	blx	r3
 801a798:	b128      	cbz	r0, 801a7a6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a79a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a79c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a7a0:	6803      	ldr	r3, [r0, #0]
 801a7a2:	68db      	ldr	r3, [r3, #12]
 801a7a4:	4798      	blx	r3
 801a7a6:	f104 001c 	add.w	r0, r4, #28
 801a7aa:	f00c fe75 	bl	8027498 <_ZN8touchgfx8Gestures4tickEv>
 801a7ae:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801a7b2:	b30b      	cbz	r3, 801a7f8 <_ZN8touchgfx3HAL4tickEv+0x134>
 801a7b4:	6920      	ldr	r0, [r4, #16]
 801a7b6:	6803      	ldr	r3, [r0, #0]
 801a7b8:	691b      	ldr	r3, [r3, #16]
 801a7ba:	4798      	blx	r3
 801a7bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a7be:	4606      	mov	r6, r0
 801a7c0:	b903      	cbnz	r3, 801a7c4 <_ZN8touchgfx3HAL4tickEv+0x100>
 801a7c2:	6720      	str	r0, [r4, #112]	; 0x70
 801a7c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a7c6:	4a1e      	ldr	r2, [pc, #120]	; (801a840 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801a7c8:	1af3      	subs	r3, r6, r3
 801a7ca:	4293      	cmp	r3, r2
 801a7cc:	d914      	bls.n	801a7f8 <_ZN8touchgfx3HAL4tickEv+0x134>
 801a7ce:	6920      	ldr	r0, [r4, #16]
 801a7d0:	6803      	ldr	r3, [r0, #0]
 801a7d2:	699b      	ldr	r3, [r3, #24]
 801a7d4:	4798      	blx	r3
 801a7d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a7d8:	2264      	movs	r2, #100	; 0x64
 801a7da:	1af3      	subs	r3, r6, r3
 801a7dc:	fbb3 f3f2 	udiv	r3, r3, r2
 801a7e0:	fbb0 f0f3 	udiv	r0, r0, r3
 801a7e4:	2800      	cmp	r0, #0
 801a7e6:	dc1d      	bgt.n	801a824 <_ZN8touchgfx3HAL4tickEv+0x160>
 801a7e8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801a7ec:	6920      	ldr	r0, [r4, #16]
 801a7ee:	2100      	movs	r1, #0
 801a7f0:	6803      	ldr	r3, [r0, #0]
 801a7f2:	69db      	ldr	r3, [r3, #28]
 801a7f4:	4798      	blx	r3
 801a7f6:	6726      	str	r6, [r4, #112]	; 0x70
 801a7f8:	f002 f8e4 	bl	801c9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801a7fc:	6803      	ldr	r3, [r0, #0]
 801a7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a800:	4798      	blx	r3
 801a802:	6823      	ldr	r3, [r4, #0]
 801a804:	4620      	mov	r0, r4
 801a806:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a80a:	4798      	blx	r3
 801a80c:	2001      	movs	r0, #1
 801a80e:	f7e6 f817 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a812:	2300      	movs	r3, #0
 801a814:	702b      	strb	r3, [r5, #0]
 801a816:	b004      	add	sp, #16
 801a818:	bd70      	pop	{r4, r5, r6, pc}
 801a81a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a81e:	4620      	mov	r0, r4
 801a820:	4798      	blx	r3
 801a822:	e7af      	b.n	801a784 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a824:	2863      	cmp	r0, #99	; 0x63
 801a826:	bfcb      	itete	gt
 801a828:	2300      	movgt	r3, #0
 801a82a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801a82e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801a832:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801a836:	e7d9      	b.n	801a7ec <_ZN8touchgfx3HAL4tickEv+0x128>
 801a838:	24026290 	.word	0x24026290
 801a83c:	24026291 	.word	0x24026291
 801a840:	05f5e100 	.word	0x05f5e100

0801a844 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801a844:	f7e7 bd6a 	b.w	800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a848 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801a848:	6581      	str	r1, [r0, #88]	; 0x58
 801a84a:	301c      	adds	r0, #28
 801a84c:	f00c be22 	b.w	8027494 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801a850 <_ZN8touchgfx3HAL5touchEll>:
 801a850:	b530      	push	{r4, r5, lr}
 801a852:	b087      	sub	sp, #28
 801a854:	4604      	mov	r4, r0
 801a856:	a804      	add	r0, sp, #16
 801a858:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801a85c:	f001 fea0 	bl	801c5a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801a860:	9b04      	ldr	r3, [sp, #16]
 801a862:	a906      	add	r1, sp, #24
 801a864:	a803      	add	r0, sp, #12
 801a866:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a86a:	9b05      	ldr	r3, [sp, #20]
 801a86c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801a870:	f001 fee8 	bl	801c644 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801a874:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801a878:	f104 001c 	add.w	r0, r4, #28
 801a87c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a880:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a884:	b189      	cbz	r1, 801a8aa <_ZN8touchgfx3HAL5touchEll+0x5a>
 801a886:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801a88a:	9300      	str	r3, [sp, #0]
 801a88c:	4613      	mov	r3, r2
 801a88e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a892:	462a      	mov	r2, r5
 801a894:	f00c fe0e 	bl	80274b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801a898:	b128      	cbz	r0, 801a8a6 <_ZN8touchgfx3HAL5touchEll+0x56>
 801a89a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a89e:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a8a0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a8a4:	6623      	str	r3, [r4, #96]	; 0x60
 801a8a6:	b007      	add	sp, #28
 801a8a8:	bd30      	pop	{r4, r5, pc}
 801a8aa:	f00c fe43 	bl	8027534 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a8ae:	2301      	movs	r3, #1
 801a8b0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a8b4:	e7f1      	b.n	801a89a <_ZN8touchgfx3HAL5touchEll+0x4a>

0801a8b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801a8b6:	b510      	push	{r4, lr}
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d046      	beq.n	801a94a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a8bc:	ea81 0002 	eor.w	r0, r1, r2
 801a8c0:	07c4      	lsls	r4, r0, #31
 801a8c2:	d508      	bpl.n	801a8d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801a8c4:	440b      	add	r3, r1
 801a8c6:	3a01      	subs	r2, #1
 801a8c8:	428b      	cmp	r3, r1
 801a8ca:	d93e      	bls.n	801a94a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a8cc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a8d0:	f801 0b01 	strb.w	r0, [r1], #1
 801a8d4:	e7f8      	b.n	801a8c8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801a8d6:	07d0      	lsls	r0, r2, #31
 801a8d8:	bf42      	ittt	mi
 801a8da:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801a8de:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801a8e2:	f801 0b01 	strbmi.w	r0, [r1], #1
 801a8e6:	2b01      	cmp	r3, #1
 801a8e8:	d911      	bls.n	801a90e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a8ea:	ea81 0402 	eor.w	r4, r1, r2
 801a8ee:	4610      	mov	r0, r2
 801a8f0:	07a4      	lsls	r4, r4, #30
 801a8f2:	d022      	beq.n	801a93a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801a8f4:	f023 0401 	bic.w	r4, r3, #1
 801a8f8:	440c      	add	r4, r1
 801a8fa:	428c      	cmp	r4, r1
 801a8fc:	4602      	mov	r2, r0
 801a8fe:	d904      	bls.n	801a90a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801a900:	8812      	ldrh	r2, [r2, #0]
 801a902:	3002      	adds	r0, #2
 801a904:	f821 2b02 	strh.w	r2, [r1], #2
 801a908:	e7f7      	b.n	801a8fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801a90a:	f003 0301 	and.w	r3, r3, #1
 801a90e:	f023 0003 	bic.w	r0, r3, #3
 801a912:	4408      	add	r0, r1
 801a914:	4288      	cmp	r0, r1
 801a916:	4614      	mov	r4, r2
 801a918:	d904      	bls.n	801a924 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801a91a:	6824      	ldr	r4, [r4, #0]
 801a91c:	3204      	adds	r2, #4
 801a91e:	f841 4b04 	str.w	r4, [r1], #4
 801a922:	e7f7      	b.n	801a914 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801a924:	f003 0303 	and.w	r3, r3, #3
 801a928:	3a01      	subs	r2, #1
 801a92a:	440b      	add	r3, r1
 801a92c:	428b      	cmp	r3, r1
 801a92e:	d90c      	bls.n	801a94a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a930:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a934:	f801 0b01 	strb.w	r0, [r1], #1
 801a938:	e7f8      	b.n	801a92c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801a93a:	0790      	lsls	r0, r2, #30
 801a93c:	d0e7      	beq.n	801a90e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a93e:	f832 0b02 	ldrh.w	r0, [r2], #2
 801a942:	3b02      	subs	r3, #2
 801a944:	f821 0b02 	strh.w	r0, [r1], #2
 801a948:	e7e1      	b.n	801a90e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a94a:	2001      	movs	r0, #1
 801a94c:	bd10      	pop	{r4, pc}

0801a94e <_ZN8touchgfx3HAL7noTouchEv>:
 801a94e:	b510      	push	{r4, lr}
 801a950:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801a954:	4604      	mov	r4, r0
 801a956:	b153      	cbz	r3, 801a96e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801a958:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801a95c:	2101      	movs	r1, #1
 801a95e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801a962:	301c      	adds	r0, #28
 801a964:	f00c fde6 	bl	8027534 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a968:	2300      	movs	r3, #0
 801a96a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a96e:	bd10      	pop	{r4, pc}

0801a970 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801a970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a974:	b085      	sub	sp, #20
 801a976:	4604      	mov	r4, r0
 801a978:	2000      	movs	r0, #0
 801a97a:	4699      	mov	r9, r3
 801a97c:	ad04      	add	r5, sp, #16
 801a97e:	460f      	mov	r7, r1
 801a980:	4690      	mov	r8, r2
 801a982:	f845 0d04 	str.w	r0, [r5, #-4]!
 801a986:	69a0      	ldr	r0, [r4, #24]
 801a988:	6806      	ldr	r6, [r0, #0]
 801a98a:	9501      	str	r5, [sp, #4]
 801a98c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801a990:	9500      	str	r5, [sp, #0]
 801a992:	6835      	ldr	r5, [r6, #0]
 801a994:	47a8      	blx	r5
 801a996:	4d10      	ldr	r5, [pc, #64]	; (801a9d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 801a998:	4606      	mov	r6, r0
 801a99a:	f8a5 9000 	strh.w	r9, [r5]
 801a99e:	f7e9 faa3 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 801a9a2:	6803      	ldr	r3, [r0, #0]
 801a9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9a6:	4798      	blx	r3
 801a9a8:	b128      	cbz	r0, 801a9b6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801a9aa:	2801      	cmp	r0, #1
 801a9ac:	d00b      	beq.n	801a9c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801a9ae:	4630      	mov	r0, r6
 801a9b0:	b005      	add	sp, #20
 801a9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9b6:	882b      	ldrh	r3, [r5, #0]
 801a9b8:	fb08 7203 	mla	r2, r8, r3, r7
 801a9bc:	9b03      	ldr	r3, [sp, #12]
 801a9be:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801a9c2:	63e3      	str	r3, [r4, #60]	; 0x3c
 801a9c4:	e7f3      	b.n	801a9ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a9c6:	882a      	ldrh	r2, [r5, #0]
 801a9c8:	9b03      	ldr	r3, [sp, #12]
 801a9ca:	fb08 7202 	mla	r2, r8, r2, r7
 801a9ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a9d2:	1a9a      	subs	r2, r3, r2
 801a9d4:	63e2      	str	r2, [r4, #60]	; 0x3c
 801a9d6:	e7ea      	b.n	801a9ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a9d8:	24026286 	.word	0x24026286

0801a9dc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9de:	b08b      	sub	sp, #44	; 0x2c
 801a9e0:	4617      	mov	r7, r2
 801a9e2:	4604      	mov	r4, r0
 801a9e4:	460e      	mov	r6, r1
 801a9e6:	461d      	mov	r5, r3
 801a9e8:	f7e9 fa7e 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 801a9ec:	6803      	ldr	r3, [r0, #0]
 801a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9f0:	4798      	blx	r3
 801a9f2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801a9f6:	9007      	str	r0, [sp, #28]
 801a9f8:	4631      	mov	r1, r6
 801a9fa:	6822      	ldr	r2, [r4, #0]
 801a9fc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801aa00:	4b0c      	ldr	r3, [pc, #48]	; (801aa34 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801aa02:	4620      	mov	r0, r4
 801aa04:	881b      	ldrh	r3, [r3, #0]
 801aa06:	9306      	str	r3, [sp, #24]
 801aa08:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801aa0c:	9305      	str	r3, [sp, #20]
 801aa0e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801aa12:	9304      	str	r3, [sp, #16]
 801aa14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801aa18:	9303      	str	r3, [sp, #12]
 801aa1a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801aa1e:	9302      	str	r3, [sp, #8]
 801aa20:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801aa24:	e9cd 5300 	strd	r5, r3, [sp]
 801aa28:	463b      	mov	r3, r7
 801aa2a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	47a8      	blx	r5
 801aa30:	b00b      	add	sp, #44	; 0x2c
 801aa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa34:	24026286 	.word	0x24026286

0801aa38 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801aa38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa3c:	4698      	mov	r8, r3
 801aa3e:	6803      	ldr	r3, [r0, #0]
 801aa40:	b08b      	sub	sp, #44	; 0x2c
 801aa42:	4617      	mov	r7, r2
 801aa44:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801aa46:	460e      	mov	r6, r1
 801aa48:	4b13      	ldr	r3, [pc, #76]	; (801aa98 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801aa4a:	4604      	mov	r4, r0
 801aa4c:	f8b3 9000 	ldrh.w	r9, [r3]
 801aa50:	f7e9 fa4a 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 801aa54:	6803      	ldr	r3, [r0, #0]
 801aa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa58:	4798      	blx	r3
 801aa5a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801aa5e:	2200      	movs	r2, #0
 801aa60:	4631      	mov	r1, r6
 801aa62:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801aa66:	2302      	movs	r3, #2
 801aa68:	4620      	mov	r0, r4
 801aa6a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801aa6e:	2301      	movs	r3, #1
 801aa70:	9305      	str	r3, [sp, #20]
 801aa72:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801aa76:	9304      	str	r3, [sp, #16]
 801aa78:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801aa7c:	9303      	str	r3, [sp, #12]
 801aa7e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801aa82:	9302      	str	r3, [sp, #8]
 801aa84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801aa88:	e9cd 8300 	strd	r8, r3, [sp]
 801aa8c:	463b      	mov	r3, r7
 801aa8e:	47a8      	blx	r5
 801aa90:	b00b      	add	sp, #44	; 0x2c
 801aa92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa96:	bf00      	nop
 801aa98:	24026286 	.word	0x24026286

0801aa9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801aa9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aaa0:	4698      	mov	r8, r3
 801aaa2:	6803      	ldr	r3, [r0, #0]
 801aaa4:	b087      	sub	sp, #28
 801aaa6:	460e      	mov	r6, r1
 801aaa8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801aaaa:	4617      	mov	r7, r2
 801aaac:	4b0f      	ldr	r3, [pc, #60]	; (801aaec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801aaae:	4604      	mov	r4, r0
 801aab0:	f8b3 9000 	ldrh.w	r9, [r3]
 801aab4:	f7e9 fa18 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 801aab8:	6803      	ldr	r3, [r0, #0]
 801aaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aabc:	4798      	blx	r3
 801aabe:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801aac2:	463a      	mov	r2, r7
 801aac4:	4631      	mov	r1, r6
 801aac6:	f8cd 900c 	str.w	r9, [sp, #12]
 801aaca:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801aace:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801aad2:	4620      	mov	r0, r4
 801aad4:	9302      	str	r3, [sp, #8]
 801aad6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801aada:	9301      	str	r3, [sp, #4]
 801aadc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801aae0:	9300      	str	r3, [sp, #0]
 801aae2:	4643      	mov	r3, r8
 801aae4:	47a8      	blx	r5
 801aae6:	b007      	add	sp, #28
 801aae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aaec:	24026286 	.word	0x24026286

0801aaf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801aaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaf4:	4604      	mov	r4, r0
 801aaf6:	b08f      	sub	sp, #60	; 0x3c
 801aaf8:	4610      	mov	r0, r2
 801aafa:	460d      	mov	r5, r1
 801aafc:	4691      	mov	r9, r2
 801aafe:	461e      	mov	r6, r3
 801ab00:	f004 fb32 	bl	801f168 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801ab04:	2800      	cmp	r0, #0
 801ab06:	f000 809d 	beq.w	801ac44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801ab0a:	6823      	ldr	r3, [r4, #0]
 801ab0c:	4620      	mov	r0, r4
 801ab0e:	f8df b198 	ldr.w	fp, [pc, #408]	; 801aca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801ab12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801ab16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab18:	4798      	blx	r3
 801ab1a:	6823      	ldr	r3, [r4, #0]
 801ab1c:	4620      	mov	r0, r4
 801ab1e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801acac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab24:	4798      	blx	r3
 801ab26:	f8bb 3000 	ldrh.w	r3, [fp]
 801ab2a:	4f5c      	ldr	r7, [pc, #368]	; (801ac9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801ab2c:	9301      	str	r3, [sp, #4]
 801ab2e:	f8ba 3000 	ldrh.w	r3, [sl]
 801ab32:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801ab36:	4640      	mov	r0, r8
 801ab38:	9302      	str	r3, [sp, #8]
 801ab3a:	883b      	ldrh	r3, [r7, #0]
 801ab3c:	9303      	str	r3, [sp, #12]
 801ab3e:	4b58      	ldr	r3, [pc, #352]	; (801aca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801ab40:	881a      	ldrh	r2, [r3, #0]
 801ab42:	9305      	str	r3, [sp, #20]
 801ab44:	9204      	str	r2, [sp, #16]
 801ab46:	f004 fc53 	bl	801f3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ab4a:	8038      	strh	r0, [r7, #0]
 801ab4c:	4640      	mov	r0, r8
 801ab4e:	f004 fc83 	bl	801f458 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ab52:	9b05      	ldr	r3, [sp, #20]
 801ab54:	b280      	uxth	r0, r0
 801ab56:	8018      	strh	r0, [r3, #0]
 801ab58:	4b52      	ldr	r3, [pc, #328]	; (801aca4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801ab5a:	781b      	ldrb	r3, [r3, #0]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d174      	bne.n	801ac4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801ab60:	883b      	ldrh	r3, [r7, #0]
 801ab62:	f8aa 0000 	strh.w	r0, [sl]
 801ab66:	f8ab 3000 	strh.w	r3, [fp]
 801ab6a:	4648      	mov	r0, r9
 801ab6c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801ab70:	f004 fafa 	bl	801f168 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801ab74:	2200      	movs	r2, #0
 801ab76:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801ab7a:	4611      	mov	r1, r2
 801ab7c:	4628      	mov	r0, r5
 801ab7e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801ab82:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801ab86:	f7ed fa30 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
 801ab8a:	2301      	movs	r3, #1
 801ab8c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801ab90:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801ab94:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	dd5c      	ble.n	801ac56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801ab9c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	dd58      	ble.n	801ac56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801aba4:	462a      	mov	r2, r5
 801aba6:	ab0a      	add	r3, sp, #40	; 0x28
 801aba8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801abac:	6851      	ldr	r1, [r2, #4]
 801abae:	c303      	stmia	r3!, {r0, r1}
 801abb0:	4631      	mov	r1, r6
 801abb2:	a80a      	add	r0, sp, #40	; 0x28
 801abb4:	f7ff f960 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 801abb8:	4b38      	ldr	r3, [pc, #224]	; (801ac9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801abba:	2100      	movs	r1, #0
 801abbc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801abc0:	4b37      	ldr	r3, [pc, #220]	; (801aca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801abc2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801abc6:	aa0a      	add	r2, sp, #40	; 0x28
 801abc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801abcc:	910c      	str	r1, [sp, #48]	; 0x30
 801abce:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801abd2:	ab08      	add	r3, sp, #32
 801abd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801abd8:	e883 0003 	stmia.w	r3, {r0, r1}
 801abdc:	4618      	mov	r0, r3
 801abde:	a90c      	add	r1, sp, #48	; 0x30
 801abe0:	f7ff f94a 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 801abe4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d13c      	bne.n	801ac64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801abea:	2000      	movs	r0, #0
 801abec:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801abf0:	2600      	movs	r6, #0
 801abf2:	696b      	ldr	r3, [r5, #20]
 801abf4:	a908      	add	r1, sp, #32
 801abf6:	682a      	ldr	r2, [r5, #0]
 801abf8:	4628      	mov	r0, r5
 801abfa:	9305      	str	r3, [sp, #20]
 801abfc:	616e      	str	r6, [r5, #20]
 801abfe:	6892      	ldr	r2, [r2, #8]
 801ac00:	4790      	blx	r2
 801ac02:	9b05      	ldr	r3, [sp, #20]
 801ac04:	4652      	mov	r2, sl
 801ac06:	4649      	mov	r1, r9
 801ac08:	616b      	str	r3, [r5, #20]
 801ac0a:	4628      	mov	r0, r5
 801ac0c:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801ac10:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801ac14:	f7ed f9e9 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
 801ac18:	9a01      	ldr	r2, [sp, #4]
 801ac1a:	4b23      	ldr	r3, [pc, #140]	; (801aca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	801a      	strh	r2, [r3, #0]
 801ac20:	9a02      	ldr	r2, [sp, #8]
 801ac22:	4b22      	ldr	r3, [pc, #136]	; (801acac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801ac24:	801a      	strh	r2, [r3, #0]
 801ac26:	9a03      	ldr	r2, [sp, #12]
 801ac28:	4b1c      	ldr	r3, [pc, #112]	; (801ac9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801ac2a:	801a      	strh	r2, [r3, #0]
 801ac2c:	4b1c      	ldr	r3, [pc, #112]	; (801aca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801ac2e:	9a04      	ldr	r2, [sp, #16]
 801ac30:	801a      	strh	r2, [r3, #0]
 801ac32:	6823      	ldr	r3, [r4, #0]
 801ac34:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac3a:	4798      	blx	r3
 801ac3c:	6823      	ldr	r3, [r4, #0]
 801ac3e:	4620      	mov	r0, r4
 801ac40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac42:	4798      	blx	r3
 801ac44:	b00f      	add	sp, #60	; 0x3c
 801ac46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac4a:	883b      	ldrh	r3, [r7, #0]
 801ac4c:	f8ab 0000 	strh.w	r0, [fp]
 801ac50:	f8aa 3000 	strh.w	r3, [sl]
 801ac54:	e789      	b.n	801ab6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801ac56:	462a      	mov	r2, r5
 801ac58:	ab0a      	add	r3, sp, #40	; 0x28
 801ac5a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801ac5e:	6851      	ldr	r1, [r2, #4]
 801ac60:	c303      	stmia	r3!, {r0, r1}
 801ac62:	e7a9      	b.n	801abb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801ac64:	a807      	add	r0, sp, #28
 801ac66:	f004 fd33 	bl	801f6d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ac6a:	4606      	mov	r6, r0
 801ac6c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801ac6e:	6803      	ldr	r3, [r0, #0]
 801ac70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac72:	4798      	blx	r3
 801ac74:	4286      	cmp	r6, r0
 801ac76:	d1b8      	bne.n	801abea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801ac78:	f7e9 f936 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 801ac7c:	6803      	ldr	r3, [r0, #0]
 801ac7e:	4606      	mov	r6, r0
 801ac80:	a807      	add	r0, sp, #28
 801ac82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac84:	9305      	str	r3, [sp, #20]
 801ac86:	f004 fd23 	bl	801f6d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ac8a:	9b05      	ldr	r3, [sp, #20]
 801ac8c:	4601      	mov	r1, r0
 801ac8e:	4630      	mov	r0, r6
 801ac90:	4798      	blx	r3
 801ac92:	f080 0001 	eor.w	r0, r0, #1
 801ac96:	b2c0      	uxtb	r0, r0
 801ac98:	e7a8      	b.n	801abec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801ac9a:	bf00      	nop
 801ac9c:	24026280 	.word	0x24026280
 801aca0:	24026282 	.word	0x24026282
 801aca4:	24026284 	.word	0x24026284
 801aca8:	24026286 	.word	0x24026286
 801acac:	24026288 	.word	0x24026288

0801acb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801acb0:	4b07      	ldr	r3, [pc, #28]	; (801acd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801acb2:	b510      	push	{r4, lr}
 801acb4:	781b      	ldrb	r3, [r3, #0]
 801acb6:	4604      	mov	r4, r0
 801acb8:	b13b      	cbz	r3, 801acca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801acba:	6803      	ldr	r3, [r0, #0]
 801acbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801acbe:	4798      	blx	r3
 801acc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801acc2:	4283      	cmp	r3, r0
 801acc4:	d101      	bne.n	801acca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801acc6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801acc8:	bd10      	pop	{r4, pc}
 801acca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801accc:	e7fc      	b.n	801acc8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801acce:	bf00      	nop
 801acd0:	2402628a 	.word	0x2402628a

0801acd4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801acd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acd8:	461d      	mov	r5, r3
 801acda:	b08a      	sub	sp, #40	; 0x28
 801acdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ace0:	4690      	mov	r8, r2
 801ace2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801ace6:	2400      	movs	r4, #0
 801ace8:	4607      	mov	r7, r0
 801acea:	fb06 8505 	mla	r5, r6, r5, r8
 801acee:	9404      	str	r4, [sp, #16]
 801acf0:	f88d 4020 	strb.w	r4, [sp, #32]
 801acf4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801acf8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801acfc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ad00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ad04:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ad08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ad0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ad10:	f7ff ffce 	bl	801acb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ad14:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801ad18:	6878      	ldr	r0, [r7, #4]
 801ad1a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801ad1e:	a901      	add	r1, sp, #4
 801ad20:	9505      	str	r5, [sp, #20]
 801ad22:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801ad26:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801ad2a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801ad2e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801ad32:	6803      	ldr	r3, [r0, #0]
 801ad34:	685b      	ldr	r3, [r3, #4]
 801ad36:	4798      	blx	r3
 801ad38:	b00a      	add	sp, #40	; 0x28
 801ad3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ad3e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801ad3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad42:	b08b      	sub	sp, #44	; 0x2c
 801ad44:	2400      	movs	r4, #0
 801ad46:	4691      	mov	r9, r2
 801ad48:	461d      	mov	r5, r3
 801ad4a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801ad4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ad52:	4688      	mov	r8, r1
 801ad54:	4607      	mov	r7, r0
 801ad56:	9404      	str	r4, [sp, #16]
 801ad58:	fb06 9505 	mla	r5, r6, r5, r9
 801ad5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ad60:	f7ff ffa6 	bl	801acb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ad64:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ad68:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801ad6c:	6878      	ldr	r0, [r7, #4]
 801ad6e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ad72:	a901      	add	r1, sp, #4
 801ad74:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801ad78:	9505      	str	r5, [sp, #20]
 801ad7a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ad7e:	f8ad 401c 	strh.w	r4, [sp, #28]
 801ad82:	f8ad 601e 	strh.w	r6, [sp, #30]
 801ad86:	f8cd 8010 	str.w	r8, [sp, #16]
 801ad8a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801ad8e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801ad92:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801ad96:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801ad9a:	6803      	ldr	r3, [r0, #0]
 801ad9c:	685b      	ldr	r3, [r3, #4]
 801ad9e:	4798      	blx	r3
 801ada0:	b00b      	add	sp, #44	; 0x2c
 801ada2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801ada8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801ada8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adac:	b08a      	sub	sp, #40	; 0x28
 801adae:	4698      	mov	r8, r3
 801adb0:	2300      	movs	r3, #0
 801adb2:	4606      	mov	r6, r0
 801adb4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801adb8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801adbc:	2d0b      	cmp	r5, #11
 801adbe:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801adc2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801adc6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801adca:	9304      	str	r3, [sp, #16]
 801adcc:	d137      	bne.n	801ae3e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801adce:	2380      	movs	r3, #128	; 0x80
 801add0:	f88d 0020 	strb.w	r0, [sp, #32]
 801add4:	4630      	mov	r0, r6
 801add6:	9203      	str	r2, [sp, #12]
 801add8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801addc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ade0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ade4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ade8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801adec:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801adf0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801adf4:	f7ff ff5c 	bl	801acb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801adf8:	2c0b      	cmp	r4, #11
 801adfa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801adfe:	f8ad 701e 	strh.w	r7, [sp, #30]
 801ae02:	bf94      	ite	ls
 801ae04:	4b19      	ldrls	r3, [pc, #100]	; (801ae6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801ae06:	2100      	movhi	r1, #0
 801ae08:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801ae0c:	bf98      	it	ls
 801ae0e:	5d19      	ldrbls	r1, [r3, r4]
 801ae10:	fb02 8307 	mla	r3, r2, r7, r8
 801ae14:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801ae18:	10c9      	asrs	r1, r1, #3
 801ae1a:	fb01 0003 	mla	r0, r1, r3, r0
 801ae1e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801ae22:	a901      	add	r1, sp, #4
 801ae24:	9005      	str	r0, [sp, #20]
 801ae26:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	6870      	ldr	r0, [r6, #4]
 801ae2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801ae32:	6803      	ldr	r3, [r0, #0]
 801ae34:	685b      	ldr	r3, [r3, #4]
 801ae36:	4798      	blx	r3
 801ae38:	b00a      	add	sp, #40	; 0x28
 801ae3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae3e:	2d02      	cmp	r5, #2
 801ae40:	d109      	bne.n	801ae56 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801ae42:	28ff      	cmp	r0, #255	; 0xff
 801ae44:	d105      	bne.n	801ae52 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801ae46:	f1bc 0f00 	cmp.w	ip, #0
 801ae4a:	bf14      	ite	ne
 801ae4c:	2340      	movne	r3, #64	; 0x40
 801ae4e:	2320      	moveq	r3, #32
 801ae50:	e7be      	b.n	801add0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ae52:	2340      	movs	r3, #64	; 0x40
 801ae54:	e7bc      	b.n	801add0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ae56:	28ff      	cmp	r0, #255	; 0xff
 801ae58:	d105      	bne.n	801ae66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801ae5a:	f1bc 0f00 	cmp.w	ip, #0
 801ae5e:	bf14      	ite	ne
 801ae60:	2304      	movne	r3, #4
 801ae62:	2301      	moveq	r3, #1
 801ae64:	e7b4      	b.n	801add0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ae66:	2304      	movs	r3, #4
 801ae68:	e7b2      	b.n	801add0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ae6a:	bf00      	nop
 801ae6c:	0802bcf0 	.word	0x0802bcf0

0801ae70 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae74:	b08b      	sub	sp, #44	; 0x2c
 801ae76:	461d      	mov	r5, r3
 801ae78:	2400      	movs	r4, #0
 801ae7a:	4688      	mov	r8, r1
 801ae7c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801ae80:	4693      	mov	fp, r2
 801ae82:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801ae86:	4607      	mov	r7, r0
 801ae88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ae8c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801ae90:	9404      	str	r4, [sp, #16]
 801ae92:	bf14      	ite	ne
 801ae94:	2308      	movne	r3, #8
 801ae96:	2302      	moveq	r3, #2
 801ae98:	fb05 b50a 	mla	r5, r5, sl, fp
 801ae9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801aea0:	f7ff ff06 	bl	801acb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801aea4:	2e0b      	cmp	r6, #11
 801aea6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801aeaa:	a901      	add	r1, sp, #4
 801aeac:	bf98      	it	ls
 801aeae:	4b13      	ldrls	r3, [pc, #76]	; (801aefc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801aeb0:	f8ad a01e 	strh.w	sl, [sp, #30]
 801aeb4:	bf98      	it	ls
 801aeb6:	5d9c      	ldrbls	r4, [r3, r6]
 801aeb8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801aebc:	10e4      	asrs	r4, r4, #3
 801aebe:	f8cd 8010 	str.w	r8, [sp, #16]
 801aec2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801aec6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801aeca:	fb04 0405 	mla	r4, r4, r5, r0
 801aece:	6878      	ldr	r0, [r7, #4]
 801aed0:	f8ad 301a 	strh.w	r3, [sp, #26]
 801aed4:	2300      	movs	r3, #0
 801aed6:	9405      	str	r4, [sp, #20]
 801aed8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801aedc:	f88d 9020 	strb.w	r9, [sp, #32]
 801aee0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801aee4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801aee8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801aeec:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801aef0:	6803      	ldr	r3, [r0, #0]
 801aef2:	685b      	ldr	r3, [r3, #4]
 801aef4:	4798      	blx	r3
 801aef6:	b00b      	add	sp, #44	; 0x2c
 801aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aefc:	0802bcf0 	.word	0x0802bcf0

0801af00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af04:	461e      	mov	r6, r3
 801af06:	4b0a      	ldr	r3, [pc, #40]	; (801af30 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801af08:	460f      	mov	r7, r1
 801af0a:	4690      	mov	r8, r2
 801af0c:	881d      	ldrh	r5, [r3, #0]
 801af0e:	f7e8 ffeb 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 801af12:	6803      	ldr	r3, [r0, #0]
 801af14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af16:	4798      	blx	r3
 801af18:	280b      	cmp	r0, #11
 801af1a:	bf96      	itet	ls
 801af1c:	4b05      	ldrls	r3, [pc, #20]	; (801af34 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801af1e:	2400      	movhi	r4, #0
 801af20:	5c1c      	ldrbls	r4, [r3, r0]
 801af22:	fb08 7005 	mla	r0, r8, r5, r7
 801af26:	10e4      	asrs	r4, r4, #3
 801af28:	fb04 6000 	mla	r0, r4, r0, r6
 801af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af30:	24026286 	.word	0x24026286
 801af34:	0802bcf0 	.word	0x0802bcf0

0801af38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801af38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af3a:	b08b      	sub	sp, #44	; 0x2c
 801af3c:	461f      	mov	r7, r3
 801af3e:	4604      	mov	r4, r0
 801af40:	4616      	mov	r6, r2
 801af42:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801af46:	2500      	movs	r5, #0
 801af48:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801af4c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801af50:	9504      	str	r5, [sp, #16]
 801af52:	f8ad 3018 	strh.w	r3, [sp, #24]
 801af56:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801af5a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801af5e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801af62:	f8ad 301c 	strh.w	r3, [sp, #28]
 801af66:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801af6a:	f88d 3020 	strb.w	r3, [sp, #32]
 801af6e:	f7ff fe9f 	bl	801acb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801af72:	463a      	mov	r2, r7
 801af74:	4631      	mov	r1, r6
 801af76:	4603      	mov	r3, r0
 801af78:	4620      	mov	r0, r4
 801af7a:	f7ff ffc1 	bl	801af00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801af7e:	4b0e      	ldr	r3, [pc, #56]	; (801afb8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801af80:	9005      	str	r0, [sp, #20]
 801af82:	881b      	ldrh	r3, [r3, #0]
 801af84:	f8ad 301e 	strh.w	r3, [sp, #30]
 801af88:	f7e8 ffae 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 801af8c:	6803      	ldr	r3, [r0, #0]
 801af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af90:	4798      	blx	r3
 801af92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801af94:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801af98:	a901      	add	r1, sp, #4
 801af9a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801af9e:	9304      	str	r3, [sp, #16]
 801afa0:	6860      	ldr	r0, [r4, #4]
 801afa2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801afa6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801afaa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801afae:	6803      	ldr	r3, [r0, #0]
 801afb0:	685b      	ldr	r3, [r3, #4]
 801afb2:	4798      	blx	r3
 801afb4:	b00b      	add	sp, #44	; 0x2c
 801afb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afb8:	24026286 	.word	0x24026286

0801afbc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801afbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801afbe:	b08d      	sub	sp, #52	; 0x34
 801afc0:	2501      	movs	r5, #1
 801afc2:	4604      	mov	r4, r0
 801afc4:	466b      	mov	r3, sp
 801afc6:	9503      	str	r5, [sp, #12]
 801afc8:	e883 0006 	stmia.w	r3, {r1, r2}
 801afcc:	2300      	movs	r3, #0
 801afce:	f8bd 6000 	ldrh.w	r6, [sp]
 801afd2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801afd6:	9306      	str	r3, [sp, #24]
 801afd8:	6803      	ldr	r3, [r0, #0]
 801afda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801afdc:	4798      	blx	r3
 801afde:	463a      	mov	r2, r7
 801afe0:	4631      	mov	r1, r6
 801afe2:	4603      	mov	r3, r0
 801afe4:	4620      	mov	r0, r4
 801afe6:	f7ff ff8b 	bl	801af00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801afea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801afec:	9004      	str	r0, [sp, #16]
 801afee:	9307      	str	r3, [sp, #28]
 801aff0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801aff4:	f8ad 3020 	strh.w	r3, [sp, #32]
 801aff8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801affc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b000:	4b0e      	ldr	r3, [pc, #56]	; (801b03c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801b002:	881b      	ldrh	r3, [r3, #0]
 801b004:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b008:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b00c:	f7e8 ff6c 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 801b010:	6803      	ldr	r3, [r0, #0]
 801b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b014:	4798      	blx	r3
 801b016:	23ff      	movs	r3, #255	; 0xff
 801b018:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801b01c:	a903      	add	r1, sp, #12
 801b01e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801b022:	6860      	ldr	r0, [r4, #4]
 801b024:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801b028:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801b02c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801b030:	6803      	ldr	r3, [r0, #0]
 801b032:	685b      	ldr	r3, [r3, #4]
 801b034:	4798      	blx	r3
 801b036:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801b038:	b00d      	add	sp, #52	; 0x34
 801b03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b03c:	24026286 	.word	0x24026286

0801b040 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801b040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b044:	b08c      	sub	sp, #48	; 0x30
 801b046:	461e      	mov	r6, r3
 801b048:	2300      	movs	r3, #0
 801b04a:	4604      	mov	r4, r0
 801b04c:	466d      	mov	r5, sp
 801b04e:	9306      	str	r3, [sp, #24]
 801b050:	6803      	ldr	r3, [r0, #0]
 801b052:	e885 0006 	stmia.w	r5, {r1, r2}
 801b056:	2501      	movs	r5, #1
 801b058:	f8bd 7000 	ldrh.w	r7, [sp]
 801b05c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801b060:	9503      	str	r5, [sp, #12]
 801b062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b064:	4798      	blx	r3
 801b066:	4642      	mov	r2, r8
 801b068:	4639      	mov	r1, r7
 801b06a:	4603      	mov	r3, r0
 801b06c:	4620      	mov	r0, r4
 801b06e:	f7ff ff47 	bl	801af00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801b072:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b076:	9004      	str	r0, [sp, #16]
 801b078:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b07c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b080:	9607      	str	r6, [sp, #28]
 801b082:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b086:	4b10      	ldr	r3, [pc, #64]	; (801b0c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801b088:	881b      	ldrh	r3, [r3, #0]
 801b08a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b08e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b090:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b094:	f7e8 ff28 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 801b098:	6803      	ldr	r3, [r0, #0]
 801b09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b09c:	4798      	blx	r3
 801b09e:	23ff      	movs	r3, #255	; 0xff
 801b0a0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801b0a4:	a903      	add	r1, sp, #12
 801b0a6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801b0aa:	6860      	ldr	r0, [r4, #4]
 801b0ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801b0b0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801b0b4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801b0b8:	6803      	ldr	r3, [r0, #0]
 801b0ba:	685b      	ldr	r3, [r3, #4]
 801b0bc:	4798      	blx	r3
 801b0be:	4630      	mov	r0, r6
 801b0c0:	b00c      	add	sp, #48	; 0x30
 801b0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0c6:	bf00      	nop
 801b0c8:	24026286 	.word	0x24026286

0801b0cc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801b0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0ce:	b085      	sub	sp, #20
 801b0d0:	4605      	mov	r5, r0
 801b0d2:	ac02      	add	r4, sp, #8
 801b0d4:	e884 0006 	stmia.w	r4, {r1, r2}
 801b0d8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801b0dc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801b0e0:	f7ff fde6 	bl	801acb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b0e4:	4631      	mov	r1, r6
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	463a      	mov	r2, r7
 801b0ea:	4628      	mov	r0, r5
 801b0ec:	f7ff ff08 	bl	801af00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801b0f0:	4a05      	ldr	r2, [pc, #20]	; (801b108 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801b0f2:	682b      	ldr	r3, [r5, #0]
 801b0f4:	8812      	ldrh	r2, [r2, #0]
 801b0f6:	9200      	str	r2, [sp, #0]
 801b0f8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	4628      	mov	r0, r5
 801b0fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b102:	47b0      	blx	r6
 801b104:	b005      	add	sp, #20
 801b106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b108:	24026286 	.word	0x24026286

0801b10c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801b10c:	b570      	push	{r4, r5, r6, lr}
 801b10e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801b112:	4604      	mov	r4, r0
 801b114:	b19b      	cbz	r3, 801b13e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801b116:	2002      	movs	r0, #2
 801b118:	f7e5 fbf0 	bl	80008fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801b11c:	2300      	movs	r3, #0
 801b11e:	4620      	mov	r0, r4
 801b120:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801b124:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801b128:	6823      	ldr	r3, [r4, #0]
 801b12a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801b12e:	f7ff fdbf 	bl	801acb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b132:	4601      	mov	r1, r0
 801b134:	4620      	mov	r0, r4
 801b136:	462b      	mov	r3, r5
 801b138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b13c:	4718      	bx	r3
 801b13e:	bd70      	pop	{r4, r5, r6, pc}

0801b140 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801b140:	b570      	push	{r4, r5, r6, lr}
 801b142:	4605      	mov	r5, r0
 801b144:	460c      	mov	r4, r1
 801b146:	2003      	movs	r0, #3
 801b148:	b149      	cbz	r1, 801b15e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801b14a:	f7e5 fb1b 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801b14e:	6928      	ldr	r0, [r5, #16]
 801b150:	b168      	cbz	r0, 801b16e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801b152:	6803      	ldr	r3, [r0, #0]
 801b154:	2101      	movs	r1, #1
 801b156:	695b      	ldr	r3, [r3, #20]
 801b158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b15c:	4718      	bx	r3
 801b15e:	f7e5 fb6f 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801b162:	6928      	ldr	r0, [r5, #16]
 801b164:	b118      	cbz	r0, 801b16e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801b166:	6803      	ldr	r3, [r0, #0]
 801b168:	4621      	mov	r1, r4
 801b16a:	695b      	ldr	r3, [r3, #20]
 801b16c:	e7f4      	b.n	801b158 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801b16e:	bd70      	pop	{r4, r5, r6, pc}

0801b170 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801b170:	b538      	push	{r3, r4, r5, lr}
 801b172:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801b176:	4604      	mov	r4, r0
 801b178:	460d      	mov	r5, r1
 801b17a:	428b      	cmp	r3, r1
 801b17c:	d006      	beq.n	801b18c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801b17e:	6803      	ldr	r3, [r0, #0]
 801b180:	b929      	cbnz	r1, 801b18e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801b182:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801b186:	4798      	blx	r3
 801b188:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801b18c:	bd38      	pop	{r3, r4, r5, pc}
 801b18e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801b192:	e7f8      	b.n	801b186 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801b194 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801b194:	4b0d      	ldr	r3, [pc, #52]	; (801b1cc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801b196:	b510      	push	{r4, lr}
 801b198:	781b      	ldrb	r3, [r3, #0]
 801b19a:	4604      	mov	r4, r0
 801b19c:	b95b      	cbnz	r3, 801b1b6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b19e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801b1a2:	2b02      	cmp	r3, #2
 801b1a4:	d007      	beq.n	801b1b6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b1a6:	6840      	ldr	r0, [r0, #4]
 801b1a8:	f000 f90e 	bl	801b3c8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801b1ac:	b118      	cbz	r0, 801b1b6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b1ae:	6862      	ldr	r2, [r4, #4]
 801b1b0:	7a53      	ldrb	r3, [r2, #9]
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d0fc      	beq.n	801b1b0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801b1b6:	f7e7 f8a3 	bl	8002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	2100      	movs	r1, #0
 801b1be:	f7ff ffd7 	bl	801b170 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801b1c2:	4620      	mov	r0, r4
 801b1c4:	f7ff fd74 	bl	801acb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b1c8:	bd10      	pop	{r4, pc}
 801b1ca:	bf00      	nop
 801b1cc:	2402628a 	.word	0x2402628a

0801b1d0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801b1d0:	4770      	bx	lr

0801b1d2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801b1d2:	2000      	movs	r0, #0
 801b1d4:	4770      	bx	lr

0801b1d6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801b1d6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801b1da:	1a13      	subs	r3, r2, r0
 801b1dc:	4258      	negs	r0, r3
 801b1de:	4158      	adcs	r0, r3
 801b1e0:	4770      	bx	lr

0801b1e2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801b1e2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801b1e6:	1a9b      	subs	r3, r3, r2
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	bfdc      	itt	le
 801b1ec:	6882      	ldrle	r2, [r0, #8]
 801b1ee:	189b      	addle	r3, r3, r2
 801b1f0:	2b01      	cmp	r3, #1
 801b1f2:	bfcc      	ite	gt
 801b1f4:	2000      	movgt	r0, #0
 801b1f6:	2001      	movle	r0, #1
 801b1f8:	4770      	bx	lr

0801b1fa <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801b1fa:	6902      	ldr	r2, [r0, #16]
 801b1fc:	6843      	ldr	r3, [r0, #4]
 801b1fe:	2024      	movs	r0, #36	; 0x24
 801b200:	fb00 3002 	mla	r0, r0, r2, r3
 801b204:	4770      	bx	lr

0801b206 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801b206:	6803      	ldr	r3, [r0, #0]
 801b208:	691b      	ldr	r3, [r3, #16]
 801b20a:	4718      	bx	r3

0801b20c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801b20c:	2301      	movs	r3, #1
 801b20e:	b570      	push	{r4, r5, r6, lr}
 801b210:	7203      	strb	r3, [r0, #8]
 801b212:	4604      	mov	r4, r0
 801b214:	6840      	ldr	r0, [r0, #4]
 801b216:	6803      	ldr	r3, [r0, #0]
 801b218:	699b      	ldr	r3, [r3, #24]
 801b21a:	4798      	blx	r3
 801b21c:	6803      	ldr	r3, [r0, #0]
 801b21e:	4605      	mov	r5, r0
 801b220:	2b40      	cmp	r3, #64	; 0x40
 801b222:	d00c      	beq.n	801b23e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b224:	d810      	bhi.n	801b248 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801b226:	2b04      	cmp	r3, #4
 801b228:	d01d      	beq.n	801b266 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801b22a:	d804      	bhi.n	801b236 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801b22c:	2b01      	cmp	r3, #1
 801b22e:	d006      	beq.n	801b23e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b230:	2b02      	cmp	r3, #2
 801b232:	d02c      	beq.n	801b28e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801b234:	bd70      	pop	{r4, r5, r6, pc}
 801b236:	2b08      	cmp	r3, #8
 801b238:	d01d      	beq.n	801b276 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801b23a:	2b20      	cmp	r3, #32
 801b23c:	d1fa      	bne.n	801b234 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801b23e:	6823      	ldr	r3, [r4, #0]
 801b240:	4620      	mov	r0, r4
 801b242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b244:	4798      	blx	r3
 801b246:	e013      	b.n	801b270 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801b248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b24c:	d0f7      	beq.n	801b23e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b24e:	d804      	bhi.n	801b25a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801b250:	2b80      	cmp	r3, #128	; 0x80
 801b252:	d0f4      	beq.n	801b23e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b258:	e7f0      	b.n	801b23c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801b25a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b25e:	d0ee      	beq.n	801b23e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b264:	e7e5      	b.n	801b232 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801b266:	6823      	ldr	r3, [r4, #0]
 801b268:	7f01      	ldrb	r1, [r0, #28]
 801b26a:	4620      	mov	r0, r4
 801b26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b26e:	4798      	blx	r3
 801b270:	6823      	ldr	r3, [r4, #0]
 801b272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b274:	e006      	b.n	801b284 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801b276:	6823      	ldr	r3, [r4, #0]
 801b278:	7f01      	ldrb	r1, [r0, #28]
 801b27a:	4620      	mov	r0, r4
 801b27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b27e:	4798      	blx	r3
 801b280:	6823      	ldr	r3, [r4, #0]
 801b282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b284:	4629      	mov	r1, r5
 801b286:	4620      	mov	r0, r4
 801b288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b28c:	4718      	bx	r3
 801b28e:	6823      	ldr	r3, [r4, #0]
 801b290:	4620      	mov	r0, r4
 801b292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b294:	4798      	blx	r3
 801b296:	e7f3      	b.n	801b280 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801b298 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801b298:	4770      	bx	lr

0801b29a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801b29a:	4770      	bx	lr

0801b29c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801b29c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801b2a0:	b510      	push	{r4, lr}
 801b2a2:	1ad2      	subs	r2, r2, r3
 801b2a4:	2a00      	cmp	r2, #0
 801b2a6:	bfdc      	itt	le
 801b2a8:	6884      	ldrle	r4, [r0, #8]
 801b2aa:	1912      	addle	r2, r2, r4
 801b2ac:	2a01      	cmp	r2, #1
 801b2ae:	dd16      	ble.n	801b2de <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801b2b0:	6842      	ldr	r2, [r0, #4]
 801b2b2:	2424      	movs	r4, #36	; 0x24
 801b2b4:	fb04 2303 	mla	r3, r4, r3, r2
 801b2b8:	f101 0220 	add.w	r2, r1, #32
 801b2bc:	f851 4b04 	ldr.w	r4, [r1], #4
 801b2c0:	4291      	cmp	r1, r2
 801b2c2:	f843 4b04 	str.w	r4, [r3], #4
 801b2c6:	d1f9      	bne.n	801b2bc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801b2c8:	780a      	ldrb	r2, [r1, #0]
 801b2ca:	701a      	strb	r2, [r3, #0]
 801b2cc:	68c3      	ldr	r3, [r0, #12]
 801b2ce:	6882      	ldr	r2, [r0, #8]
 801b2d0:	f3bf 8f5b 	dmb	ish
 801b2d4:	3301      	adds	r3, #1
 801b2d6:	429a      	cmp	r2, r3
 801b2d8:	bfd8      	it	le
 801b2da:	1a9b      	suble	r3, r3, r2
 801b2dc:	60c3      	str	r3, [r0, #12]
 801b2de:	bd10      	pop	{r4, pc}

0801b2e0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801b2e0:	6903      	ldr	r3, [r0, #16]
 801b2e2:	6882      	ldr	r2, [r0, #8]
 801b2e4:	f3bf 8f5b 	dmb	ish
 801b2e8:	3301      	adds	r3, #1
 801b2ea:	429a      	cmp	r2, r3
 801b2ec:	bfd8      	it	le
 801b2ee:	1a9b      	suble	r3, r3, r2
 801b2f0:	6103      	str	r3, [r0, #16]
 801b2f2:	4770      	bx	lr

0801b2f4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801b2f4:	b570      	push	{r4, r5, r6, lr}
 801b2f6:	4604      	mov	r4, r0
 801b2f8:	460e      	mov	r6, r1
 801b2fa:	6860      	ldr	r0, [r4, #4]
 801b2fc:	6803      	ldr	r3, [r0, #0]
 801b2fe:	685b      	ldr	r3, [r3, #4]
 801b300:	4798      	blx	r3
 801b302:	2800      	cmp	r0, #0
 801b304:	d1f9      	bne.n	801b2fa <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801b306:	4d0d      	ldr	r5, [pc, #52]	; (801b33c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801b308:	6828      	ldr	r0, [r5, #0]
 801b30a:	6803      	ldr	r3, [r0, #0]
 801b30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b30e:	4798      	blx	r3
 801b310:	f7e7 f810 	bl	8002334 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801b314:	6828      	ldr	r0, [r5, #0]
 801b316:	2101      	movs	r1, #1
 801b318:	f7ff ff2a 	bl	801b170 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801b31c:	6860      	ldr	r0, [r4, #4]
 801b31e:	4631      	mov	r1, r6
 801b320:	6803      	ldr	r3, [r0, #0]
 801b322:	689b      	ldr	r3, [r3, #8]
 801b324:	4798      	blx	r3
 801b326:	6823      	ldr	r3, [r4, #0]
 801b328:	4620      	mov	r0, r4
 801b32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b32c:	4798      	blx	r3
 801b32e:	6828      	ldr	r0, [r5, #0]
 801b330:	6803      	ldr	r3, [r0, #0]
 801b332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b338:	4718      	bx	r3
 801b33a:	bf00      	nop
 801b33c:	2402628c 	.word	0x2402628c

0801b340 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801b340:	b508      	push	{r3, lr}
 801b342:	f7e6 ffdd 	bl	8002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801b346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b34a:	f7e6 bfe7 	b.w	800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801b34e <_ZN8touchgfx13DMA_Interface5startEv>:
 801b34e:	b510      	push	{r4, lr}
 801b350:	4604      	mov	r4, r0
 801b352:	6840      	ldr	r0, [r0, #4]
 801b354:	6803      	ldr	r3, [r0, #0]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	4798      	blx	r3
 801b35a:	b948      	cbnz	r0, 801b370 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b35c:	7a63      	ldrb	r3, [r4, #9]
 801b35e:	b13b      	cbz	r3, 801b370 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b360:	7a23      	ldrb	r3, [r4, #8]
 801b362:	b92b      	cbnz	r3, 801b370 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b364:	6823      	ldr	r3, [r4, #0]
 801b366:	4620      	mov	r0, r4
 801b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b36e:	4718      	bx	r3
 801b370:	bd10      	pop	{r4, pc}

0801b372 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801b372:	b570      	push	{r4, r5, r6, lr}
 801b374:	4604      	mov	r4, r0
 801b376:	6840      	ldr	r0, [r0, #4]
 801b378:	6803      	ldr	r3, [r0, #0]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	4798      	blx	r3
 801b37e:	4605      	mov	r5, r0
 801b380:	b930      	cbnz	r0, 801b390 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801b382:	7a23      	ldrb	r3, [r4, #8]
 801b384:	b123      	cbz	r3, 801b390 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801b386:	6860      	ldr	r0, [r4, #4]
 801b388:	6803      	ldr	r3, [r0, #0]
 801b38a:	695b      	ldr	r3, [r3, #20]
 801b38c:	4798      	blx	r3
 801b38e:	7225      	strb	r5, [r4, #8]
 801b390:	6860      	ldr	r0, [r4, #4]
 801b392:	6803      	ldr	r3, [r0, #0]
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	4798      	blx	r3
 801b398:	b928      	cbnz	r0, 801b3a6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801b39a:	6823      	ldr	r3, [r4, #0]
 801b39c:	4620      	mov	r0, r4
 801b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3a4:	4718      	bx	r3
 801b3a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3aa:	f7e6 bfcf 	b.w	800234c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801b3b0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801b3b0:	b510      	push	{r4, lr}
 801b3b2:	6082      	str	r2, [r0, #8]
 801b3b4:	2200      	movs	r2, #0
 801b3b6:	4c03      	ldr	r4, [pc, #12]	; (801b3c4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801b3b8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801b3bc:	e9c0 4100 	strd	r4, r1, [r0]
 801b3c0:	bd10      	pop	{r4, pc}
 801b3c2:	bf00      	nop
 801b3c4:	0802be2c 	.word	0x0802be2c

0801b3c8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801b3c8:	6840      	ldr	r0, [r0, #4]
 801b3ca:	6803      	ldr	r3, [r0, #0]
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	4718      	bx	r3

0801b3d0 <_ZNK8touchgfx5Image17invalidateContentEv>:
 801b3d0:	b508      	push	{r3, lr}
 801b3d2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801b3d6:	b10b      	cbz	r3, 801b3dc <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 801b3d8:	f7e8 fc82 	bl	8003ce0 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801b3dc:	bd08      	pop	{r3, pc}

0801b3de <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801b3de:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b3e2:	4770      	bx	lr

0801b3e4 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 801b3e4:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801b3e8:	4770      	bx	lr

0801b3ea <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 801b3ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b3ec:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b3f0:	4605      	mov	r5, r0
 801b3f2:	2bff      	cmp	r3, #255	; 0xff
 801b3f4:	d11e      	bne.n	801b434 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801b3f6:	f101 0426 	add.w	r4, r1, #38	; 0x26
 801b3fa:	4668      	mov	r0, sp
 801b3fc:	4621      	mov	r1, r4
 801b3fe:	f004 f85f 	bl	801f4c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b402:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 801b406:	4620      	mov	r0, r4
 801b408:	f003 fff2 	bl	801f3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b40c:	4286      	cmp	r6, r0
 801b40e:	d111      	bne.n	801b434 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801b410:	4621      	mov	r1, r4
 801b412:	a802      	add	r0, sp, #8
 801b414:	f004 f854 	bl	801f4c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b418:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b41c:	4620      	mov	r0, r4
 801b41e:	f004 f81b 	bl	801f458 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b422:	4286      	cmp	r6, r0
 801b424:	d106      	bne.n	801b434 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801b426:	4621      	mov	r1, r4
 801b428:	4628      	mov	r0, r5
 801b42a:	f004 f849 	bl	801f4c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b42e:	4628      	mov	r0, r5
 801b430:	b004      	add	sp, #16
 801b432:	bd70      	pop	{r4, r5, r6, pc}
 801b434:	2300      	movs	r3, #0
 801b436:	802b      	strh	r3, [r5, #0]
 801b438:	806b      	strh	r3, [r5, #2]
 801b43a:	80ab      	strh	r3, [r5, #4]
 801b43c:	80eb      	strh	r3, [r5, #6]
 801b43e:	e7f6      	b.n	801b42e <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

0801b440 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 801b440:	b538      	push	{r3, r4, r5, lr}
 801b442:	2300      	movs	r3, #0
 801b444:	2501      	movs	r5, #1
 801b446:	4604      	mov	r4, r0
 801b448:	8083      	strh	r3, [r0, #4]
 801b44a:	80c3      	strh	r3, [r0, #6]
 801b44c:	8103      	strh	r3, [r0, #8]
 801b44e:	8143      	strh	r3, [r0, #10]
 801b450:	8183      	strh	r3, [r0, #12]
 801b452:	81c3      	strh	r3, [r0, #14]
 801b454:	8203      	strh	r3, [r0, #16]
 801b456:	8243      	strh	r3, [r0, #18]
 801b458:	61c3      	str	r3, [r0, #28]
 801b45a:	8403      	strh	r3, [r0, #32]
 801b45c:	8443      	strh	r3, [r0, #34]	; 0x22
 801b45e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801b462:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 801b466:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801b46a:	4b07      	ldr	r3, [pc, #28]	; (801b488 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 801b46c:	6003      	str	r3, [r0, #0]
 801b46e:	880b      	ldrh	r3, [r1, #0]
 801b470:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b472:	23ff      	movs	r3, #255	; 0xff
 801b474:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b478:	f000 fa0a 	bl	801b890 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b47c:	4b03      	ldr	r3, [pc, #12]	; (801b48c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 801b47e:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801b482:	4620      	mov	r0, r4
 801b484:	6023      	str	r3, [r4, #0]
 801b486:	bd38      	pop	{r3, r4, r5, pc}
 801b488:	0802bf2c 	.word	0x0802bf2c
 801b48c:	0802be50 	.word	0x0802be50

0801b490 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 801b490:	4603      	mov	r3, r0
 801b492:	3026      	adds	r0, #38	; 0x26
 801b494:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801b498:	b90b      	cbnz	r3, 801b49e <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801b49a:	f002 bc17 	b.w	801dccc <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801b49e:	f002 bc25 	b.w	801dcec <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0801b4a4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801b4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4a8:	4604      	mov	r4, r0
 801b4aa:	469b      	mov	fp, r3
 801b4ac:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801b4b0:	b0b3      	sub	sp, #204	; 0xcc
 801b4b2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b4b6:	f9b1 6000 	ldrsh.w	r6, [r1]
 801b4ba:	8888      	ldrh	r0, [r1, #4]
 801b4bc:	9206      	str	r2, [sp, #24]
 801b4be:	2200      	movs	r2, #0
 801b4c0:	4430      	add	r0, r6
 801b4c2:	9211      	str	r2, [sp, #68]	; 0x44
 801b4c4:	b280      	uxth	r0, r0
 801b4c6:	fa0f fe80 	sxth.w	lr, r0
 801b4ca:	4596      	cmp	lr, r2
 801b4cc:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 801b4d0:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 801b4d4:	f340 811a 	ble.w	801b70c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b4d8:	45b4      	cmp	ip, r6
 801b4da:	f340 8117 	ble.w	801b70c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b4de:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801b4e2:	88ca      	ldrh	r2, [r1, #6]
 801b4e4:	442a      	add	r2, r5
 801b4e6:	b292      	uxth	r2, r2
 801b4e8:	b211      	sxth	r1, r2
 801b4ea:	2900      	cmp	r1, #0
 801b4ec:	f340 810e 	ble.w	801b70c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b4f0:	42ab      	cmp	r3, r5
 801b4f2:	f340 810b 	ble.w	801b70c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b4f6:	45f4      	cmp	ip, lr
 801b4f8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801b4fc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801b500:	bfb8      	it	lt
 801b502:	fa1f f08c 	uxthlt.w	r0, ip
 801b506:	428b      	cmp	r3, r1
 801b508:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b50c:	bfb8      	it	lt
 801b50e:	b29a      	uxthlt	r2, r3
 801b510:	1b80      	subs	r0, r0, r6
 801b512:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801b516:	1b52      	subs	r2, r2, r5
 801b518:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801b51c:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801b520:	ab11      	add	r3, sp, #68	; 0x44
 801b522:	ad13      	add	r5, sp, #76	; 0x4c
 801b524:	6822      	ldr	r2, [r4, #0]
 801b526:	1d26      	adds	r6, r4, #4
 801b528:	9307      	str	r3, [sp, #28]
 801b52a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b52c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b530:	e885 0003 	stmia.w	r5, {r0, r1}
 801b534:	4629      	mov	r1, r5
 801b536:	4620      	mov	r0, r4
 801b538:	4790      	blx	r2
 801b53a:	4621      	mov	r1, r4
 801b53c:	a815      	add	r0, sp, #84	; 0x54
 801b53e:	f002 fb21 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b542:	a815      	add	r0, sp, #84	; 0x54
 801b544:	f001 f8ac 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b548:	9b07      	ldr	r3, [sp, #28]
 801b54a:	4631      	mov	r1, r6
 801b54c:	4618      	mov	r0, r3
 801b54e:	f001 f8eb 	bl	801c728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b552:	4628      	mov	r0, r5
 801b554:	f104 0526 	add.w	r5, r4, #38	; 0x26
 801b558:	f001 f8a2 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b55c:	4628      	mov	r0, r5
 801b55e:	f004 f833 	bl	801f5c8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b562:	9007      	str	r0, [sp, #28]
 801b564:	2800      	cmp	r0, #0
 801b566:	f000 80ce 	beq.w	801b706 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 801b56a:	f8db 2000 	ldr.w	r2, [fp]
 801b56e:	a90d      	add	r1, sp, #52	; 0x34
 801b570:	a809      	add	r0, sp, #36	; 0x24
 801b572:	9209      	str	r2, [sp, #36]	; 0x24
 801b574:	f8db 2004 	ldr.w	r2, [fp, #4]
 801b578:	920a      	str	r2, [sp, #40]	; 0x28
 801b57a:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b57e:	920b      	str	r2, [sp, #44]	; 0x2c
 801b580:	f8db 200c 	ldr.w	r2, [fp, #12]
 801b584:	920c      	str	r2, [sp, #48]	; 0x30
 801b586:	f8da 2000 	ldr.w	r2, [sl]
 801b58a:	920d      	str	r2, [sp, #52]	; 0x34
 801b58c:	f8da 2004 	ldr.w	r2, [sl, #4]
 801b590:	920e      	str	r2, [sp, #56]	; 0x38
 801b592:	f8da 2008 	ldr.w	r2, [sl, #8]
 801b596:	920f      	str	r2, [sp, #60]	; 0x3c
 801b598:	f8da 200c 	ldr.w	r2, [sl, #12]
 801b59c:	9210      	str	r2, [sp, #64]	; 0x40
 801b59e:	4632      	mov	r2, r6
 801b5a0:	f001 f8a6 	bl	801c6f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b5a4:	4632      	mov	r2, r6
 801b5a6:	a90e      	add	r1, sp, #56	; 0x38
 801b5a8:	a80a      	add	r0, sp, #40	; 0x28
 801b5aa:	f001 f8a1 	bl	801c6f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b5ae:	4632      	mov	r2, r6
 801b5b0:	a90f      	add	r1, sp, #60	; 0x3c
 801b5b2:	a80b      	add	r0, sp, #44	; 0x2c
 801b5b4:	f001 f89c 	bl	801c6f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b5b8:	4632      	mov	r2, r6
 801b5ba:	a910      	add	r1, sp, #64	; 0x40
 801b5bc:	a80c      	add	r0, sp, #48	; 0x30
 801b5be:	f001 f897 	bl	801c6f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b5c2:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801b5c6:	edd7 3a00 	vldr	s7, [r7]
 801b5ca:	eef0 6a67 	vmov.f32	s13, s15
 801b5ce:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801b5d2:	ed97 5a01 	vldr	s10, [r7, #4]
 801b5d6:	eeb0 7a67 	vmov.f32	s14, s15
 801b5da:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801b5de:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801b5e2:	edd9 2a00 	vldr	s5, [r9]
 801b5e6:	eeb0 6a67 	vmov.f32	s12, s15
 801b5ea:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801b5ee:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801b5f2:	ed98 3a00 	vldr	s6, [r8]
 801b5f6:	ed99 4a01 	vldr	s8, [r9, #4]
 801b5fa:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b5fe:	edd8 4a01 	vldr	s9, [r8, #4]
 801b602:	edd9 5a02 	vldr	s11, [r9, #8]
 801b606:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801b60a:	ee16 6a10 	vmov	r6, s12
 801b60e:	eeb0 6a67 	vmov.f32	s12, s15
 801b612:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801b616:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801b61a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b61e:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801b622:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 801b626:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 801b62a:	ee16 0a10 	vmov	r0, s12
 801b62e:	eeb0 6a67 	vmov.f32	s12, s15
 801b632:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801b636:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 801b63a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b63e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801b642:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 801b646:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 801b64a:	ee16 1a10 	vmov	r1, s12
 801b64e:	eeb0 6a67 	vmov.f32	s12, s15
 801b652:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801b656:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 801b65a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b65e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801b662:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801b666:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801b66a:	68ff      	ldr	r7, [r7, #12]
 801b66c:	ee16 2a10 	vmov	r2, s12
 801b670:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801b674:	9624      	str	r6, [sp, #144]	; 0x90
 801b676:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b67a:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801b67e:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801b682:	4628      	mov	r0, r5
 801b684:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 801b688:	9b06      	ldr	r3, [sp, #24]
 801b68a:	922d      	str	r2, [sp, #180]	; 0xb4
 801b68c:	4a21      	ldr	r2, [pc, #132]	; (801b714 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 801b68e:	9317      	str	r3, [sp, #92]	; 0x5c
 801b690:	8812      	ldrh	r2, [r2, #0]
 801b692:	9b07      	ldr	r3, [sp, #28]
 801b694:	9218      	str	r2, [sp, #96]	; 0x60
 801b696:	9319      	str	r3, [sp, #100]	; 0x64
 801b698:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801b69c:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 801b6a0:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801b6a4:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801b6a8:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801b6ac:	9731      	str	r7, [sp, #196]	; 0xc4
 801b6ae:	f003 ffbb 	bl	801f628 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b6b2:	901a      	str	r0, [sp, #104]	; 0x68
 801b6b4:	4628      	mov	r0, r5
 801b6b6:	f003 fe9b 	bl	801f3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b6ba:	901b      	str	r0, [sp, #108]	; 0x6c
 801b6bc:	4628      	mov	r0, r5
 801b6be:	f003 fecb 	bl	801f458 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b6c2:	901c      	str	r0, [sp, #112]	; 0x70
 801b6c4:	4628      	mov	r0, r5
 801b6c6:	f003 fe93 	bl	801f3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b6ca:	4b13      	ldr	r3, [pc, #76]	; (801b718 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 801b6cc:	901d      	str	r0, [sp, #116]	; 0x74
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b6d4:	b10a      	cbz	r2, 801b6da <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 801b6d6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801b6d8:	b905      	cbnz	r5, 801b6dc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 801b6da:	689d      	ldr	r5, [r3, #8]
 801b6dc:	682b      	ldr	r3, [r5, #0]
 801b6de:	4620      	mov	r0, r4
 801b6e0:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801b6e2:	f7ff fed5 	bl	801b490 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801b6e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b6ea:	aa1e      	add	r2, sp, #120	; 0x78
 801b6ec:	a917      	add	r1, sp, #92	; 0x5c
 801b6ee:	9304      	str	r3, [sp, #16]
 801b6f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801b6f4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801b6f8:	ab13      	add	r3, sp, #76	; 0x4c
 801b6fa:	4628      	mov	r0, r5
 801b6fc:	9301      	str	r3, [sp, #4]
 801b6fe:	ab15      	add	r3, sp, #84	; 0x54
 801b700:	9300      	str	r3, [sp, #0]
 801b702:	ab19      	add	r3, sp, #100	; 0x64
 801b704:	47b0      	blx	r6
 801b706:	b033      	add	sp, #204	; 0xcc
 801b708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b70c:	2300      	movs	r3, #0
 801b70e:	9312      	str	r3, [sp, #72]	; 0x48
 801b710:	e706      	b.n	801b520 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 801b712:	bf00      	nop
 801b714:	24026286 	.word	0x24026286
 801b718:	2402628c 	.word	0x2402628c

0801b71c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 801b71c:	b570      	push	{r4, r5, r6, lr}
 801b71e:	ed2d 8b04 	vpush	{d8-d9}
 801b722:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801b726:	b098      	sub	sp, #96	; 0x60
 801b728:	4604      	mov	r4, r0
 801b72a:	460e      	mov	r6, r1
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	d065      	beq.n	801b7fc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 801b730:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b734:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801b738:	ed9f 8a37 	vldr	s16, [pc, #220]	; 801b818 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 801b73c:	ee09 3a10 	vmov	s18, r3
 801b740:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b744:	4628      	mov	r0, r5
 801b746:	ee08 3a90 	vmov	s17, r3
 801b74a:	4b34      	ldr	r3, [pc, #208]	; (801b81c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 801b74c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801b750:	930c      	str	r3, [sp, #48]	; 0x30
 801b752:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801b756:	930d      	str	r3, [sp, #52]	; 0x34
 801b758:	930e      	str	r3, [sp, #56]	; 0x38
 801b75a:	ee39 9a08 	vadd.f32	s18, s18, s16
 801b75e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b760:	f003 fe46 	bl	801f3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b764:	ee07 0a90 	vmov	s15, r0
 801b768:	4628      	mov	r0, r5
 801b76a:	ee78 8a88 	vadd.f32	s17, s17, s16
 801b76e:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801b772:	f003 fe71 	bl	801f458 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b776:	4b2a      	ldr	r3, [pc, #168]	; (801b820 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 801b778:	ee07 0a90 	vmov	s15, r0
 801b77c:	781b      	ldrb	r3, [r3, #0]
 801b77e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b782:	eef0 7a48 	vmov.f32	s15, s16
 801b786:	2b01      	cmp	r3, #1
 801b788:	d13c      	bne.n	801b804 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 801b78a:	eef0 6a69 	vmov.f32	s13, s19
 801b78e:	ee19 3a90 	vmov	r3, s19
 801b792:	eeb0 6a47 	vmov.f32	s12, s14
 801b796:	eef0 5a47 	vmov.f32	s11, s14
 801b79a:	eef0 9a48 	vmov.f32	s19, s16
 801b79e:	eeb0 7a48 	vmov.f32	s14, s16
 801b7a2:	9314      	str	r3, [sp, #80]	; 0x50
 801b7a4:	ab14      	add	r3, sp, #80	; 0x50
 801b7a6:	2200      	movs	r2, #0
 801b7a8:	4631      	mov	r1, r6
 801b7aa:	9303      	str	r3, [sp, #12]
 801b7ac:	ab10      	add	r3, sp, #64	; 0x40
 801b7ae:	4620      	mov	r0, r4
 801b7b0:	edcd 7a04 	vstr	s15, [sp, #16]
 801b7b4:	9302      	str	r3, [sp, #8]
 801b7b6:	ab0c      	add	r3, sp, #48	; 0x30
 801b7b8:	ed8d 9a05 	vstr	s18, [sp, #20]
 801b7bc:	9301      	str	r3, [sp, #4]
 801b7be:	ab08      	add	r3, sp, #32
 801b7c0:	ed8d 9a06 	vstr	s18, [sp, #24]
 801b7c4:	9300      	str	r3, [sp, #0]
 801b7c6:	ab04      	add	r3, sp, #16
 801b7c8:	edcd 7a07 	vstr	s15, [sp, #28]
 801b7cc:	edcd 7a08 	vstr	s15, [sp, #32]
 801b7d0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801b7d4:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 801b7d8:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 801b7dc:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801b7e0:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 801b7e4:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 801b7e8:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801b7ec:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801b7f0:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 801b7f4:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 801b7f8:	f7ff fe54 	bl	801b4a4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801b7fc:	b018      	add	sp, #96	; 0x60
 801b7fe:	ecbd 8b04 	vpop	{d8-d9}
 801b802:	bd70      	pop	{r4, r5, r6, pc}
 801b804:	eef0 6a47 	vmov.f32	s13, s14
 801b808:	ee18 3a10 	vmov	r3, s16
 801b80c:	eef0 5a69 	vmov.f32	s11, s19
 801b810:	eeb0 6a48 	vmov.f32	s12, s16
 801b814:	e7c5      	b.n	801b7a2 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 801b816:	bf00      	nop
 801b818:	00000000 	.word	0x00000000
 801b81c:	42c80000 	.word	0x42c80000
 801b820:	24026284 	.word	0x24026284

0801b824 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801b824:	2300      	movs	r3, #0
 801b826:	8083      	strh	r3, [r0, #4]
 801b828:	80c3      	strh	r3, [r0, #6]
 801b82a:	8003      	strh	r3, [r0, #0]
 801b82c:	8043      	strh	r3, [r0, #2]
 801b82e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801b832:	2bff      	cmp	r3, #255	; 0xff
 801b834:	bf01      	itttt	eq
 801b836:	890b      	ldrheq	r3, [r1, #8]
 801b838:	8083      	strheq	r3, [r0, #4]
 801b83a:	894b      	ldrheq	r3, [r1, #10]
 801b83c:	80c3      	strheq	r3, [r0, #6]
 801b83e:	4770      	bx	lr

0801b840 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801b840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b842:	4604      	mov	r4, r0
 801b844:	466b      	mov	r3, sp
 801b846:	6808      	ldr	r0, [r1, #0]
 801b848:	6849      	ldr	r1, [r1, #4]
 801b84a:	c303      	stmia	r3!, {r0, r1}
 801b84c:	6823      	ldr	r3, [r4, #0]
 801b84e:	4669      	mov	r1, sp
 801b850:	4620      	mov	r0, r4
 801b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b854:	4798      	blx	r3
 801b856:	4b08      	ldr	r3, [pc, #32]	; (801b878 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b85e:	b10a      	cbz	r2, 801b864 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801b860:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b862:	b900      	cbnz	r0, 801b866 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801b864:	6898      	ldr	r0, [r3, #8]
 801b866:	6803      	ldr	r3, [r0, #0]
 801b868:	4669      	mov	r1, sp
 801b86a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801b86c:	6a1d      	ldr	r5, [r3, #32]
 801b86e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b872:	47a8      	blx	r5
 801b874:	b003      	add	sp, #12
 801b876:	bd30      	pop	{r4, r5, pc}
 801b878:	2402628c 	.word	0x2402628c

0801b87c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801b87c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801b880:	b12a      	cbz	r2, 801b88e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b882:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801b886:	b112      	cbz	r2, 801b88e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b888:	6803      	ldr	r3, [r0, #0]
 801b88a:	695b      	ldr	r3, [r3, #20]
 801b88c:	4718      	bx	r3
 801b88e:	4770      	bx	lr

0801b890 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801b890:	b570      	push	{r4, r5, r6, lr}
 801b892:	880b      	ldrh	r3, [r1, #0]
 801b894:	460d      	mov	r5, r1
 801b896:	4604      	mov	r4, r0
 801b898:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b89a:	4608      	mov	r0, r1
 801b89c:	f003 fda8 	bl	801f3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b8a0:	4606      	mov	r6, r0
 801b8a2:	4628      	mov	r0, r5
 801b8a4:	f003 fdd8 	bl	801f458 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b8a8:	6823      	ldr	r3, [r4, #0]
 801b8aa:	4605      	mov	r5, r0
 801b8ac:	4631      	mov	r1, r6
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8b2:	4798      	blx	r3
 801b8b4:	6823      	ldr	r3, [r4, #0]
 801b8b6:	4629      	mov	r1, r5
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b8c0:	4718      	bx	r3

0801b8c2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801b8c2:	b510      	push	{r4, lr}
 801b8c4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b8c8:	4604      	mov	r4, r0
 801b8ca:	2bff      	cmp	r3, #255	; 0xff
 801b8cc:	d006      	beq.n	801b8dc <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801b8ce:	2300      	movs	r3, #0
 801b8d0:	8003      	strh	r3, [r0, #0]
 801b8d2:	8043      	strh	r3, [r0, #2]
 801b8d4:	8083      	strh	r3, [r0, #4]
 801b8d6:	80c3      	strh	r3, [r0, #6]
 801b8d8:	4620      	mov	r0, r4
 801b8da:	bd10      	pop	{r4, pc}
 801b8dc:	3126      	adds	r1, #38	; 0x26
 801b8de:	f003 fdef 	bl	801f4c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b8e2:	e7f9      	b.n	801b8d8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801b8e4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801b8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8e8:	4604      	mov	r4, r0
 801b8ea:	b088      	sub	sp, #32
 801b8ec:	2500      	movs	r5, #0
 801b8ee:	460f      	mov	r7, r1
 801b8f0:	f854 3b26 	ldr.w	r3, [r4], #38
 801b8f4:	a904      	add	r1, sp, #16
 801b8f6:	4606      	mov	r6, r0
 801b8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b8fe:	4798      	blx	r3
 801b900:	4620      	mov	r0, r4
 801b902:	f003 fd75 	bl	801f3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b906:	4680      	mov	r8, r0
 801b908:	4620      	mov	r0, r4
 801b90a:	f003 fda5 	bl	801f458 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b90e:	9506      	str	r5, [sp, #24]
 801b910:	ad06      	add	r5, sp, #24
 801b912:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b916:	4639      	mov	r1, r7
 801b918:	f8ad 801c 	strh.w	r8, [sp, #28]
 801b91c:	4628      	mov	r0, r5
 801b91e:	f7fe faab 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 801b922:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b926:	2b00      	cmp	r3, #0
 801b928:	dd19      	ble.n	801b95e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801b92a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	dd15      	ble.n	801b95e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801b932:	4b0c      	ldr	r3, [pc, #48]	; (801b964 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b93a:	b10a      	cbz	r2, 801b940 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801b93c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b93e:	b900      	cbnz	r0, 801b942 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801b940:	6898      	ldr	r0, [r3, #8]
 801b942:	2701      	movs	r7, #1
 801b944:	6801      	ldr	r1, [r0, #0]
 801b946:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b94a:	9702      	str	r7, [sp, #8]
 801b94c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801b950:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b954:	e9cd 5600 	strd	r5, r6, [sp]
 801b958:	688d      	ldr	r5, [r1, #8]
 801b95a:	4621      	mov	r1, r4
 801b95c:	47a8      	blx	r5
 801b95e:	b008      	add	sp, #32
 801b960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b964:	2402628c 	.word	0x2402628c

0801b968 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801b968:	b510      	push	{r4, lr}
 801b96a:	6803      	ldr	r3, [r0, #0]
 801b96c:	460c      	mov	r4, r1
 801b96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b970:	4798      	blx	r3
 801b972:	1b03      	subs	r3, r0, r4
 801b974:	4258      	negs	r0, r3
 801b976:	4158      	adcs	r0, r3
 801b978:	bd10      	pop	{r4, pc}
	...

0801b97c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801b97c:	4b01      	ldr	r3, [pc, #4]	; (801b984 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801b97e:	6019      	str	r1, [r3, #0]
 801b980:	4770      	bx	lr
 801b982:	bf00      	nop
 801b984:	24026294 	.word	0x24026294

0801b988 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b98c:	4696      	mov	lr, r2
 801b98e:	b097      	sub	sp, #92	; 0x5c
 801b990:	4605      	mov	r5, r0
 801b992:	4614      	mov	r4, r2
 801b994:	460e      	mov	r6, r1
 801b996:	461f      	mov	r7, r3
 801b998:	f10d 0c1c 	add.w	ip, sp, #28
 801b99c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801b9a0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801b9a4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801b9a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b9ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b9b0:	f8de 3000 	ldr.w	r3, [lr]
 801b9b4:	f104 0e14 	add.w	lr, r4, #20
 801b9b8:	f8cc 3000 	str.w	r3, [ip]
 801b9bc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b9c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b9c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b9c8:	f8de 3000 	ldr.w	r3, [lr]
 801b9cc:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801b9d0:	f8cc 3000 	str.w	r3, [ip]
 801b9d4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801b9d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b9dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b9e0:	f8de 3000 	ldr.w	r3, [lr]
 801b9e4:	4631      	mov	r1, r6
 801b9e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b9e8:	4628      	mov	r0, r5
 801b9ea:	f8cc 3000 	str.w	r3, [ip]
 801b9ee:	682b      	ldr	r3, [r5, #0]
 801b9f0:	9201      	str	r2, [sp, #4]
 801b9f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b9f4:	f8cd 8008 	str.w	r8, [sp, #8]
 801b9f8:	9200      	str	r2, [sp, #0]
 801b9fa:	aa07      	add	r2, sp, #28
 801b9fc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801ba00:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801ba04:	463b      	mov	r3, r7
 801ba06:	47d8      	blx	fp
 801ba08:	46a6      	mov	lr, r4
 801ba0a:	f10d 0c1c 	add.w	ip, sp, #28
 801ba0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ba12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ba16:	f8de 3000 	ldr.w	r3, [lr]
 801ba1a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801ba1e:	343c      	adds	r4, #60	; 0x3c
 801ba20:	f8cc 3000 	str.w	r3, [ip]
 801ba24:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801ba28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ba2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ba30:	f8de 3000 	ldr.w	r3, [lr]
 801ba34:	f8cc 3000 	str.w	r3, [ip]
 801ba38:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801ba3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ba42:	6823      	ldr	r3, [r4, #0]
 801ba44:	4631      	mov	r1, r6
 801ba46:	4628      	mov	r0, r5
 801ba48:	f8cc 3000 	str.w	r3, [ip]
 801ba4c:	682b      	ldr	r3, [r5, #0]
 801ba4e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801ba52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ba54:	f8cd 8008 	str.w	r8, [sp, #8]
 801ba58:	9201      	str	r2, [sp, #4]
 801ba5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ba5c:	9200      	str	r2, [sp, #0]
 801ba5e:	aa07      	add	r2, sp, #28
 801ba60:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801ba62:	463b      	mov	r3, r7
 801ba64:	47a0      	blx	r4
 801ba66:	b017      	add	sp, #92	; 0x5c
 801ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba6c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ba6c:	2000      	movs	r0, #0
 801ba6e:	4770      	bx	lr

0801ba70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba74:	b08d      	sub	sp, #52	; 0x34
 801ba76:	4688      	mov	r8, r1
 801ba78:	f8d3 c000 	ldr.w	ip, [r3]
 801ba7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ba7e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801ba82:	680f      	ldr	r7, [r1, #0]
 801ba84:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801ba88:	eba7 070c 	sub.w	r7, r7, ip
 801ba8c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801ba90:	edd3 6a07 	vldr	s13, [r3, #28]
 801ba94:	42bc      	cmp	r4, r7
 801ba96:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ba98:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801ba9c:	bfa8      	it	ge
 801ba9e:	463c      	movge	r4, r7
 801baa0:	f9b1 9000 	ldrsh.w	r9, [r1]
 801baa4:	f9ba 1000 	ldrsh.w	r1, [sl]
 801baa8:	ee07 4a90 	vmov	s15, r4
 801baac:	eb09 0e0c 	add.w	lr, r9, ip
 801bab0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801bab4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801bab8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801babc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801bac0:	4571      	cmp	r1, lr
 801bac2:	ee25 4a04 	vmul.f32	s8, s10, s8
 801bac6:	ee65 4a24 	vmul.f32	s9, s10, s9
 801baca:	ee25 5a27 	vmul.f32	s10, s10, s15
 801bace:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801bad2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801bad6:	ee32 1a05 	vadd.f32	s2, s4, s10
 801bada:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801bade:	ee36 0a84 	vadd.f32	s0, s13, s8
 801bae2:	ee61 1a87 	vmul.f32	s3, s3, s14
 801bae6:	ee22 2a07 	vmul.f32	s4, s4, s14
 801baea:	f340 808c 	ble.w	801bc06 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801baee:	eba1 060e 	sub.w	r6, r1, lr
 801baf2:	fb96 f5f4 	sdiv	r5, r6, r4
 801baf6:	ee07 5a10 	vmov	s14, r5
 801bafa:	2d00      	cmp	r5, #0
 801bafc:	fb04 6615 	mls	r6, r4, r5, r6
 801bb00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bb04:	eea7 0a04 	vfma.f32	s0, s14, s8
 801bb08:	eee7 0a24 	vfma.f32	s1, s14, s9
 801bb0c:	eea7 1a05 	vfma.f32	s2, s14, s10
 801bb10:	dd12      	ble.n	801bb38 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801bb12:	ee70 6a44 	vsub.f32	s13, s0, s8
 801bb16:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801bb1a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801bb1e:	eef5 6a40 	vcmp.f32	s13, #0.0
 801bb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb26:	bf14      	ite	ne
 801bb28:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801bb2c:	eeb0 7a67 	vmoveq.f32	s14, s15
 801bb30:	ee61 1a87 	vmul.f32	s3, s3, s14
 801bb34:	ee22 2a07 	vmul.f32	s4, s4, s14
 801bb38:	fb05 f204 	mul.w	r2, r5, r4
 801bb3c:	1abf      	subs	r7, r7, r2
 801bb3e:	4494      	add	ip, r2
 801bb40:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801bb44:	4411      	add	r1, r2
 801bb46:	eb09 020c 	add.w	r2, r9, ip
 801bb4a:	b209      	sxth	r1, r1
 801bb4c:	443a      	add	r2, r7
 801bb4e:	428a      	cmp	r2, r1
 801bb50:	bfc4      	itt	gt
 801bb52:	eba1 0209 	subgt.w	r2, r1, r9
 801bb56:	eba2 070c 	subgt.w	r7, r2, ip
 801bb5a:	2f00      	cmp	r7, #0
 801bb5c:	dd50      	ble.n	801bc00 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801bb5e:	fb97 f1f4 	sdiv	r1, r7, r4
 801bb62:	fb04 7211 	mls	r2, r4, r1, r7
 801bb66:	b90a      	cbnz	r2, 801bb6c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801bb68:	3901      	subs	r1, #1
 801bb6a:	4622      	mov	r2, r4
 801bb6c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801bb70:	6840      	ldr	r0, [r0, #4]
 801bb72:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801bb76:	44b6      	add	lr, r6
 801bb78:	f8d0 a000 	ldr.w	sl, [r0]
 801bb7c:	2900      	cmp	r1, #0
 801bb7e:	bfcc      	ite	gt
 801bb80:	46a1      	movgt	r9, r4
 801bb82:	4691      	movle	r9, r2
 801bb84:	900b      	str	r0, [sp, #44]	; 0x2c
 801bb86:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801bb88:	fb04 e505 	mla	r5, r4, r5, lr
 801bb8c:	eef0 6a42 	vmov.f32	s13, s4
 801bb90:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801bb94:	9008      	str	r0, [sp, #32]
 801bb96:	eeb0 7a61 	vmov.f32	s14, s3
 801bb9a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801bb9c:	695b      	ldr	r3, [r3, #20]
 801bb9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bba2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801bba6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801bbaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bbac:	445b      	add	r3, fp
 801bbae:	9307      	str	r3, [sp, #28]
 801bbb0:	ee16 3a90 	vmov	r3, s13
 801bbb4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801bbb8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801bbbc:	ee21 3a23 	vmul.f32	s6, s2, s7
 801bbc0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801bbc4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801bbc8:	ee17 7a90 	vmov	r7, s15
 801bbcc:	ee73 7a42 	vsub.f32	s15, s6, s4
 801bbd0:	fb97 f7f4 	sdiv	r7, r7, r4
 801bbd4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801bbd8:	ee17 ca90 	vmov	ip, s15
 801bbdc:	fb9c fcf4 	sdiv	ip, ip, r4
 801bbe0:	fb0c 3306 	mla	r3, ip, r6, r3
 801bbe4:	9302      	str	r3, [sp, #8]
 801bbe6:	ee17 3a10 	vmov	r3, s14
 801bbea:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801bbee:	fb07 3706 	mla	r7, r7, r6, r3
 801bbf2:	eba9 0306 	sub.w	r3, r9, r6
 801bbf6:	e9cd 4700 	strd	r4, r7, [sp]
 801bbfa:	f8da 4008 	ldr.w	r4, [sl, #8]
 801bbfe:	47a0      	blx	r4
 801bc00:	b00d      	add	sp, #52	; 0x34
 801bc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc06:	2500      	movs	r5, #0
 801bc08:	462e      	mov	r6, r5
 801bc0a:	e799      	b.n	801bb40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801bc0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801bc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc10:	b0db      	sub	sp, #364	; 0x16c
 801bc12:	461d      	mov	r5, r3
 801bc14:	4614      	mov	r4, r2
 801bc16:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801bc1a:	910f      	str	r1, [sp, #60]	; 0x3c
 801bc1c:	4629      	mov	r1, r5
 801bc1e:	930a      	str	r3, [sp, #40]	; 0x28
 801bc20:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801bc24:	9009      	str	r0, [sp, #36]	; 0x24
 801bc26:	930b      	str	r3, [sp, #44]	; 0x2c
 801bc28:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801bc2c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801bc30:	9310      	str	r3, [sp, #64]	; 0x40
 801bc32:	6803      	ldr	r3, [r0, #0]
 801bc34:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801bc36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bc3a:	47b8      	blx	r7
 801bc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc3e:	6058      	str	r0, [r3, #4]
 801bc40:	2800      	cmp	r0, #0
 801bc42:	f000 83a1 	beq.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bc46:	682b      	ldr	r3, [r5, #0]
 801bc48:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801bc4c:	ed94 7a02 	vldr	s14, [r4, #8]
 801bc50:	9314      	str	r3, [sp, #80]	; 0x50
 801bc52:	686b      	ldr	r3, [r5, #4]
 801bc54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bc58:	9315      	str	r3, [sp, #84]	; 0x54
 801bc5a:	4bc1      	ldr	r3, [pc, #772]	; (801bf60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801bc5c:	7819      	ldrb	r1, [r3, #0]
 801bc5e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801bc62:	2900      	cmp	r1, #0
 801bc64:	bf16      	itet	ne
 801bc66:	4619      	movne	r1, r3
 801bc68:	4611      	moveq	r1, r2
 801bc6a:	4613      	movne	r3, r2
 801bc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc70:	9116      	str	r1, [sp, #88]	; 0x58
 801bc72:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801bc76:	f240 8387 	bls.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bc7a:	ed94 7a07 	vldr	s14, [r4, #28]
 801bc7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc86:	f240 837f 	bls.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bc8a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801bc8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc96:	f240 8377 	bls.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bc9a:	6822      	ldr	r2, [r4, #0]
 801bc9c:	4bb1      	ldr	r3, [pc, #708]	; (801bf64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801bc9e:	429a      	cmp	r2, r3
 801bca0:	f2c0 8372 	blt.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bca4:	49b0      	ldr	r1, [pc, #704]	; (801bf68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801bca6:	6963      	ldr	r3, [r4, #20]
 801bca8:	428a      	cmp	r2, r1
 801bcaa:	f300 836d 	bgt.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bcae:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801bcb2:	48ae      	ldr	r0, [pc, #696]	; (801bf6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801bcb4:	33ff      	adds	r3, #255	; 0xff
 801bcb6:	4283      	cmp	r3, r0
 801bcb8:	f200 8366 	bhi.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bcbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bcbe:	4dac      	ldr	r5, [pc, #688]	; (801bf70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801bcc0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801bcc4:	33ff      	adds	r3, #255	; 0xff
 801bcc6:	42ab      	cmp	r3, r5
 801bcc8:	f200 835e 	bhi.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bccc:	6862      	ldr	r2, [r4, #4]
 801bcce:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801bcd2:	33ff      	adds	r3, #255	; 0xff
 801bcd4:	4283      	cmp	r3, r0
 801bcd6:	f200 8357 	bhi.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bcda:	69a1      	ldr	r1, [r4, #24]
 801bcdc:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801bce0:	33ff      	adds	r3, #255	; 0xff
 801bce2:	4283      	cmp	r3, r0
 801bce4:	f200 8350 	bhi.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bce8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801bcea:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801bcee:	30ff      	adds	r0, #255	; 0xff
 801bcf0:	42a8      	cmp	r0, r5
 801bcf2:	f200 8349 	bhi.w	801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bcf6:	428a      	cmp	r2, r1
 801bcf8:	f280 8110 	bge.w	801bf1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801bcfc:	429a      	cmp	r2, r3
 801bcfe:	f300 8119 	bgt.w	801bf34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801bd02:	4299      	cmp	r1, r3
 801bd04:	f280 811d 	bge.w	801bf42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801bd08:	2502      	movs	r5, #2
 801bd0a:	2701      	movs	r7, #1
 801bd0c:	46a9      	mov	r9, r5
 801bd0e:	46b8      	mov	r8, r7
 801bd10:	f04f 0a00 	mov.w	sl, #0
 801bd14:	4621      	mov	r1, r4
 801bd16:	a849      	add	r0, sp, #292	; 0x124
 801bd18:	f002 fff2 	bl	801ed00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801bd1c:	4622      	mov	r2, r4
 801bd1e:	4653      	mov	r3, sl
 801bd20:	a949      	add	r1, sp, #292	; 0x124
 801bd22:	f8cd 9000 	str.w	r9, [sp]
 801bd26:	a819      	add	r0, sp, #100	; 0x64
 801bd28:	f003 f91a 	bl	801ef60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801bd2c:	4622      	mov	r2, r4
 801bd2e:	4653      	mov	r3, sl
 801bd30:	a949      	add	r1, sp, #292	; 0x124
 801bd32:	f8cd 8000 	str.w	r8, [sp]
 801bd36:	a829      	add	r0, sp, #164	; 0xa4
 801bd38:	f003 f912 	bl	801ef60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801bd3c:	4643      	mov	r3, r8
 801bd3e:	4622      	mov	r2, r4
 801bd40:	a949      	add	r1, sp, #292	; 0x124
 801bd42:	f8cd 9000 	str.w	r9, [sp]
 801bd46:	a839      	add	r0, sp, #228	; 0xe4
 801bd48:	f003 f90a 	bl	801ef60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801bd4c:	42af      	cmp	r7, r5
 801bd4e:	af12      	add	r7, sp, #72	; 0x48
 801bd50:	bfb7      	itett	lt
 801bd52:	2300      	movlt	r3, #0
 801bd54:	2301      	movge	r3, #1
 801bd56:	ad29      	addlt	r5, sp, #164	; 0xa4
 801bd58:	ac19      	addlt	r4, sp, #100	; 0x64
 801bd5a:	bfb1      	iteee	lt
 801bd5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801bd5e:	ad19      	addge	r5, sp, #100	; 0x64
 801bd60:	930e      	strge	r3, [sp, #56]	; 0x38
 801bd62:	ac29      	addge	r4, sp, #164	; 0xa4
 801bd64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd66:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bd6a:	e887 0003 	stmia.w	r7, {r0, r1}
 801bd6e:	b928      	cbnz	r0, 801bd7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801bd70:	4b80      	ldr	r3, [pc, #512]	; (801bf74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801bd72:	6818      	ldr	r0, [r3, #0]
 801bd74:	6803      	ldr	r3, [r0, #0]
 801bd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd78:	4798      	blx	r3
 801bd7a:	6038      	str	r0, [r7, #0]
 801bd7c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801bd7e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801bd82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bd86:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801bd88:	930c      	str	r3, [sp, #48]	; 0x30
 801bd8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bd8c:	6963      	ldr	r3, [r4, #20]
 801bd8e:	440b      	add	r3, r1
 801bd90:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801bd94:	4408      	add	r0, r1
 801bd96:	b200      	sxth	r0, r0
 801bd98:	4283      	cmp	r3, r0
 801bd9a:	900d      	str	r0, [sp, #52]	; 0x34
 801bd9c:	f280 80dd 	bge.w	801bf5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801bda0:	428b      	cmp	r3, r1
 801bda2:	da08      	bge.n	801bdb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bda4:	2a00      	cmp	r2, #0
 801bda6:	dd06      	ble.n	801bdb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bda8:	1acb      	subs	r3, r1, r3
 801bdaa:	429a      	cmp	r2, r3
 801bdac:	f2c0 80e4 	blt.w	801bf78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	f300 80e2 	bgt.w	801bf7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801bdb6:	6967      	ldr	r7, [r4, #20]
 801bdb8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801bdbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bdbe:	443b      	add	r3, r7
 801bdc0:	461f      	mov	r7, r3
 801bdc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bdc4:	1bdf      	subs	r7, r3, r7
 801bdc6:	4297      	cmp	r7, r2
 801bdc8:	bfa8      	it	ge
 801bdca:	4617      	movge	r7, r2
 801bdcc:	2f00      	cmp	r7, #0
 801bdce:	f340 8166 	ble.w	801c09e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801bdd2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801bdd4:	6829      	ldr	r1, [r5, #0]
 801bdd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bdda:	f9bb 3000 	ldrsh.w	r3, [fp]
 801bdde:	4411      	add	r1, r2
 801bde0:	6820      	ldr	r0, [r4, #0]
 801bde2:	4299      	cmp	r1, r3
 801bde4:	dd1a      	ble.n	801be1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801bde6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801bdea:	4402      	add	r2, r0
 801bdec:	440b      	add	r3, r1
 801bdee:	b21b      	sxth	r3, r3
 801bdf0:	429a      	cmp	r2, r3
 801bdf2:	dc13      	bgt.n	801be1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801bdf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bdf6:	a912      	add	r1, sp, #72	; 0x48
 801bdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	9206      	str	r2, [sp, #24]
 801be00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801be02:	9500      	str	r5, [sp, #0]
 801be04:	9205      	str	r2, [sp, #20]
 801be06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801be08:	e9cd b203 	strd	fp, r2, [sp, #12]
 801be0c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801be0e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801be12:	aa49      	add	r2, sp, #292	; 0x124
 801be14:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801be18:	4623      	mov	r3, r4
 801be1a:	47c8      	blx	r9
 801be1c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801be20:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801be24:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801be28:	ee37 7a27 	vadd.f32	s14, s14, s15
 801be2c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801be30:	68a1      	ldr	r1, [r4, #8]
 801be32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801be36:	ed94 6a08 	vldr	s12, [r4, #32]
 801be3a:	edd4 6a07 	vldr	s13, [r4, #28]
 801be3e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801be42:	ee76 6a86 	vadd.f32	s13, s13, s12
 801be46:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801be4a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801be4e:	edc4 6a07 	vstr	s13, [r4, #28]
 801be52:	441a      	add	r2, r3
 801be54:	6963      	ldr	r3, [r4, #20]
 801be56:	3301      	adds	r3, #1
 801be58:	6022      	str	r2, [r4, #0]
 801be5a:	6163      	str	r3, [r4, #20]
 801be5c:	69a3      	ldr	r3, [r4, #24]
 801be5e:	3b01      	subs	r3, #1
 801be60:	61a3      	str	r3, [r4, #24]
 801be62:	6923      	ldr	r3, [r4, #16]
 801be64:	440b      	add	r3, r1
 801be66:	68e1      	ldr	r1, [r4, #12]
 801be68:	428b      	cmp	r3, r1
 801be6a:	6123      	str	r3, [r4, #16]
 801be6c:	db15      	blt.n	801be9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801be6e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801be72:	3201      	adds	r2, #1
 801be74:	1a5b      	subs	r3, r3, r1
 801be76:	ee76 6a26 	vadd.f32	s13, s12, s13
 801be7a:	6022      	str	r2, [r4, #0]
 801be7c:	6123      	str	r3, [r4, #16]
 801be7e:	edc4 6a07 	vstr	s13, [r4, #28]
 801be82:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801be86:	ee36 7a87 	vadd.f32	s14, s13, s14
 801be8a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801be8e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801be92:	ee77 7a27 	vadd.f32	s15, s14, s15
 801be96:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801be9a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801be9e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801bea2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801bea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801beaa:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801beae:	68a9      	ldr	r1, [r5, #8]
 801beb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801beb4:	ed95 6a08 	vldr	s12, [r5, #32]
 801beb8:	edd5 6a07 	vldr	s13, [r5, #28]
 801bebc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801bec0:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bec4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801bec8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801becc:	edc5 6a07 	vstr	s13, [r5, #28]
 801bed0:	441a      	add	r2, r3
 801bed2:	696b      	ldr	r3, [r5, #20]
 801bed4:	3301      	adds	r3, #1
 801bed6:	602a      	str	r2, [r5, #0]
 801bed8:	616b      	str	r3, [r5, #20]
 801beda:	69ab      	ldr	r3, [r5, #24]
 801bedc:	3b01      	subs	r3, #1
 801bede:	61ab      	str	r3, [r5, #24]
 801bee0:	692b      	ldr	r3, [r5, #16]
 801bee2:	440b      	add	r3, r1
 801bee4:	68e9      	ldr	r1, [r5, #12]
 801bee6:	428b      	cmp	r3, r1
 801bee8:	612b      	str	r3, [r5, #16]
 801beea:	db15      	blt.n	801bf18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801beec:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801bef0:	3201      	adds	r2, #1
 801bef2:	1a5b      	subs	r3, r3, r1
 801bef4:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bef8:	602a      	str	r2, [r5, #0]
 801befa:	612b      	str	r3, [r5, #16]
 801befc:	edc5 6a07 	vstr	s13, [r5, #28]
 801bf00:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801bf04:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bf08:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801bf0c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801bf10:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bf14:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801bf18:	3f01      	subs	r7, #1
 801bf1a:	e757      	b.n	801bdcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801bf1c:	4299      	cmp	r1, r3
 801bf1e:	dc13      	bgt.n	801bf48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801bf20:	429a      	cmp	r2, r3
 801bf22:	da14      	bge.n	801bf4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801bf24:	2502      	movs	r5, #2
 801bf26:	2703      	movs	r7, #3
 801bf28:	f04f 0800 	mov.w	r8, #0
 801bf2c:	46a9      	mov	r9, r5
 801bf2e:	f04f 0a01 	mov.w	sl, #1
 801bf32:	e6ef      	b.n	801bd14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801bf34:	2501      	movs	r5, #1
 801bf36:	2700      	movs	r7, #0
 801bf38:	46a9      	mov	r9, r5
 801bf3a:	46b8      	mov	r8, r7
 801bf3c:	f04f 0a02 	mov.w	sl, #2
 801bf40:	e6e8      	b.n	801bd14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801bf42:	2501      	movs	r5, #1
 801bf44:	2702      	movs	r7, #2
 801bf46:	e6e1      	b.n	801bd0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801bf48:	2500      	movs	r5, #0
 801bf4a:	2701      	movs	r7, #1
 801bf4c:	e7f4      	b.n	801bf38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801bf4e:	2702      	movs	r7, #2
 801bf50:	2503      	movs	r5, #3
 801bf52:	f04f 0900 	mov.w	r9, #0
 801bf56:	46b8      	mov	r8, r7
 801bf58:	e7e9      	b.n	801bf2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801bf5a:	4613      	mov	r3, r2
 801bf5c:	e728      	b.n	801bdb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801bf5e:	bf00      	nop
 801bf60:	24026284 	.word	0x24026284
 801bf64:	fffd8f01 	.word	0xfffd8f01
 801bf68:	00027100 	.word	0x00027100
 801bf6c:	0004e1ff 	.word	0x0004e1ff
 801bf70:	0004e1fe 	.word	0x0004e1fe
 801bf74:	2402628c 	.word	0x2402628c
 801bf78:	4613      	mov	r3, r2
 801bf7a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801bf7c:	469e      	mov	lr, r3
 801bf7e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801bf80:	469c      	mov	ip, r3
 801bf82:	9111      	str	r1, [sp, #68]	; 0x44
 801bf84:	f04f 0900 	mov.w	r9, #0
 801bf88:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801bf8c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801bf90:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801bf94:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801bf98:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801bf9c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801bfa0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801bfa4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801bfa8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801bfac:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801bfb0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801bfb4:	f1bc 0f00 	cmp.w	ip, #0
 801bfb8:	d147      	bne.n	801c04a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801bfba:	eb03 0c07 	add.w	ip, r3, r7
 801bfbe:	1ad7      	subs	r7, r2, r3
 801bfc0:	f1b9 0f00 	cmp.w	r9, #0
 801bfc4:	d009      	beq.n	801bfda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801bfc6:	9029      	str	r0, [sp, #164]	; 0xa4
 801bfc8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801bfcc:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801bfd0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801bfd4:	912d      	str	r1, [sp, #180]	; 0xb4
 801bfd6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801bfda:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801bfdc:	f04f 0800 	mov.w	r8, #0
 801bfe0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801bfe4:	9111      	str	r1, [sp, #68]	; 0x44
 801bfe6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801bfea:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801bfee:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801bff2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801bff6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801bffa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801bffe:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801c002:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801c006:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801c00a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801c00e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801c012:	f1be 0f00 	cmp.w	lr, #0
 801c016:	d031      	beq.n	801c07c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801c018:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c01a:	4450      	add	r0, sl
 801c01c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801c020:	4431      	add	r1, r6
 801c022:	ee37 7a04 	vadd.f32	s14, s14, s8
 801c026:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c02a:	4549      	cmp	r1, r9
 801c02c:	db08      	blt.n	801c040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801c02e:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c032:	3001      	adds	r0, #1
 801c034:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801c038:	eba1 0109 	sub.w	r1, r1, r9
 801c03c:	ee37 7a06 	vadd.f32	s14, s14, s12
 801c040:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c044:	f04f 0801 	mov.w	r8, #1
 801c048:	e7e3      	b.n	801c012 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801c04a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c04c:	4450      	add	r0, sl
 801c04e:	ee37 7a24 	vadd.f32	s14, s14, s9
 801c052:	4431      	add	r1, r6
 801c054:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c058:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801c05c:	4541      	cmp	r1, r8
 801c05e:	db08      	blt.n	801c072 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801c060:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c064:	3001      	adds	r0, #1
 801c066:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c06a:	eba1 0108 	sub.w	r1, r1, r8
 801c06e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c072:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c076:	f04f 0901 	mov.w	r9, #1
 801c07a:	e79b      	b.n	801bfb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801c07c:	449c      	add	ip, r3
 801c07e:	1aff      	subs	r7, r7, r3
 801c080:	f1b8 0f00 	cmp.w	r8, #0
 801c084:	d009      	beq.n	801c09a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801c086:	9019      	str	r0, [sp, #100]	; 0x64
 801c088:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801c08c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801c090:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801c094:	911d      	str	r1, [sp, #116]	; 0x74
 801c096:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801c09a:	1ad2      	subs	r2, r2, r3
 801c09c:	e68b      	b.n	801bdb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801c09e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0a0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	f000 80d1 	beq.w	801c24a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801c0a8:	ad19      	add	r5, sp, #100	; 0x64
 801c0aa:	ac39      	add	r4, sp, #228	; 0xe4
 801c0ac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c0ae:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801c0b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c0b6:	930c      	str	r3, [sp, #48]	; 0x30
 801c0b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c0ba:	6963      	ldr	r3, [r4, #20]
 801c0bc:	440b      	add	r3, r1
 801c0be:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801c0c2:	4408      	add	r0, r1
 801c0c4:	b200      	sxth	r0, r0
 801c0c6:	4283      	cmp	r3, r0
 801c0c8:	900d      	str	r0, [sp, #52]	; 0x34
 801c0ca:	f280 80c1 	bge.w	801c250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801c0ce:	428b      	cmp	r3, r1
 801c0d0:	da08      	bge.n	801c0e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c0d2:	2a00      	cmp	r2, #0
 801c0d4:	dd06      	ble.n	801c0e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c0d6:	1acb      	subs	r3, r1, r3
 801c0d8:	429a      	cmp	r2, r3
 801c0da:	f2c0 80bb 	blt.w	801c254 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	f300 80b9 	bgt.w	801c256 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801c0e4:	6967      	ldr	r7, [r4, #20]
 801c0e6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801c0ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0ec:	443b      	add	r3, r7
 801c0ee:	461f      	mov	r7, r3
 801c0f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c0f2:	1bdf      	subs	r7, r3, r7
 801c0f4:	4297      	cmp	r7, r2
 801c0f6:	bfa8      	it	ge
 801c0f8:	4617      	movge	r7, r2
 801c0fa:	2f00      	cmp	r7, #0
 801c0fc:	f340 813c 	ble.w	801c378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801c100:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c102:	6829      	ldr	r1, [r5, #0]
 801c104:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c108:	f9bb 3000 	ldrsh.w	r3, [fp]
 801c10c:	4411      	add	r1, r2
 801c10e:	6820      	ldr	r0, [r4, #0]
 801c110:	4299      	cmp	r1, r3
 801c112:	dd1a      	ble.n	801c14a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801c114:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801c118:	4402      	add	r2, r0
 801c11a:	440b      	add	r3, r1
 801c11c:	b21b      	sxth	r3, r3
 801c11e:	429a      	cmp	r2, r3
 801c120:	dc13      	bgt.n	801c14a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801c122:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c124:	a912      	add	r1, sp, #72	; 0x48
 801c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c128:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	9206      	str	r2, [sp, #24]
 801c12e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c130:	9500      	str	r5, [sp, #0]
 801c132:	9205      	str	r2, [sp, #20]
 801c134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c136:	e9cd b203 	strd	fp, r2, [sp, #12]
 801c13a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801c13c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801c140:	aa49      	add	r2, sp, #292	; 0x124
 801c142:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801c146:	4623      	mov	r3, r4
 801c148:	47c8      	blx	r9
 801c14a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801c14e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801c152:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801c156:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c15a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801c15e:	68a1      	ldr	r1, [r4, #8]
 801c160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c164:	ed94 6a08 	vldr	s12, [r4, #32]
 801c168:	edd4 6a07 	vldr	s13, [r4, #28]
 801c16c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801c170:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c174:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801c178:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c17c:	edc4 6a07 	vstr	s13, [r4, #28]
 801c180:	441a      	add	r2, r3
 801c182:	6963      	ldr	r3, [r4, #20]
 801c184:	3301      	adds	r3, #1
 801c186:	6022      	str	r2, [r4, #0]
 801c188:	6163      	str	r3, [r4, #20]
 801c18a:	69a3      	ldr	r3, [r4, #24]
 801c18c:	3b01      	subs	r3, #1
 801c18e:	61a3      	str	r3, [r4, #24]
 801c190:	6923      	ldr	r3, [r4, #16]
 801c192:	440b      	add	r3, r1
 801c194:	68e1      	ldr	r1, [r4, #12]
 801c196:	428b      	cmp	r3, r1
 801c198:	6123      	str	r3, [r4, #16]
 801c19a:	db15      	blt.n	801c1c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801c19c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801c1a0:	3201      	adds	r2, #1
 801c1a2:	1a5b      	subs	r3, r3, r1
 801c1a4:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c1a8:	6022      	str	r2, [r4, #0]
 801c1aa:	6123      	str	r3, [r4, #16]
 801c1ac:	edc4 6a07 	vstr	s13, [r4, #28]
 801c1b0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801c1b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c1b8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801c1bc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801c1c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c1c4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801c1c8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801c1cc:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801c1d0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801c1d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c1d8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801c1dc:	68a9      	ldr	r1, [r5, #8]
 801c1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c1e2:	ed95 6a08 	vldr	s12, [r5, #32]
 801c1e6:	edd5 6a07 	vldr	s13, [r5, #28]
 801c1ea:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c1ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c1f2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c1f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c1fa:	edc5 6a07 	vstr	s13, [r5, #28]
 801c1fe:	441a      	add	r2, r3
 801c200:	696b      	ldr	r3, [r5, #20]
 801c202:	3301      	adds	r3, #1
 801c204:	602a      	str	r2, [r5, #0]
 801c206:	616b      	str	r3, [r5, #20]
 801c208:	69ab      	ldr	r3, [r5, #24]
 801c20a:	3b01      	subs	r3, #1
 801c20c:	61ab      	str	r3, [r5, #24]
 801c20e:	692b      	ldr	r3, [r5, #16]
 801c210:	440b      	add	r3, r1
 801c212:	68e9      	ldr	r1, [r5, #12]
 801c214:	428b      	cmp	r3, r1
 801c216:	612b      	str	r3, [r5, #16]
 801c218:	db15      	blt.n	801c246 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801c21a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c21e:	3201      	adds	r2, #1
 801c220:	1a5b      	subs	r3, r3, r1
 801c222:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c226:	602a      	str	r2, [r5, #0]
 801c228:	612b      	str	r3, [r5, #16]
 801c22a:	edc5 6a07 	vstr	s13, [r5, #28]
 801c22e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801c232:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c236:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c23a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801c23e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c242:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c246:	3f01      	subs	r7, #1
 801c248:	e757      	b.n	801c0fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801c24a:	ad39      	add	r5, sp, #228	; 0xe4
 801c24c:	ac19      	add	r4, sp, #100	; 0x64
 801c24e:	e72d      	b.n	801c0ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801c250:	4613      	mov	r3, r2
 801c252:	e744      	b.n	801c0de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801c254:	4613      	mov	r3, r2
 801c256:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801c258:	469e      	mov	lr, r3
 801c25a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801c25e:	461f      	mov	r7, r3
 801c260:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801c264:	f04f 0900 	mov.w	r9, #0
 801c268:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801c26c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801c270:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801c274:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801c278:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801c27c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801c27e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801c282:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801c286:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801c28a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801c28e:	960e      	str	r6, [sp, #56]	; 0x38
 801c290:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801c294:	2f00      	cmp	r7, #0
 801c296:	d146      	bne.n	801c326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801c298:	449c      	add	ip, r3
 801c29a:	1ad7      	subs	r7, r2, r3
 801c29c:	f1b9 0f00 	cmp.w	r9, #0
 801c2a0:	d009      	beq.n	801c2b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801c2a2:	9039      	str	r0, [sp, #228]	; 0xe4
 801c2a4:	913d      	str	r1, [sp, #244]	; 0xf4
 801c2a6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801c2aa:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801c2ae:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801c2b2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801c2b6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801c2b8:	f04f 0800 	mov.w	r8, #0
 801c2bc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801c2c0:	910e      	str	r1, [sp, #56]	; 0x38
 801c2c2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801c2c6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801c2ca:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801c2ce:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801c2d2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801c2d6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801c2da:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801c2de:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801c2e2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801c2e6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801c2ea:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801c2ee:	f1be 0f00 	cmp.w	lr, #0
 801c2f2:	d030      	beq.n	801c356 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801c2f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801c2f6:	4450      	add	r0, sl
 801c2f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801c2fc:	4431      	add	r1, r6
 801c2fe:	ee37 7a04 	vadd.f32	s14, s14, s8
 801c302:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c306:	4549      	cmp	r1, r9
 801c308:	db08      	blt.n	801c31c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801c30a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c30e:	3001      	adds	r0, #1
 801c310:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801c314:	eba1 0109 	sub.w	r1, r1, r9
 801c318:	ee37 7a06 	vadd.f32	s14, s14, s12
 801c31c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c320:	f04f 0801 	mov.w	r8, #1
 801c324:	e7e3      	b.n	801c2ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801c326:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801c328:	4450      	add	r0, sl
 801c32a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801c32e:	4431      	add	r1, r6
 801c330:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c334:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801c338:	4541      	cmp	r1, r8
 801c33a:	db08      	blt.n	801c34e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801c33c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c340:	3001      	adds	r0, #1
 801c342:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c346:	eba1 0108 	sub.w	r1, r1, r8
 801c34a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c34e:	3f01      	subs	r7, #1
 801c350:	f04f 0901 	mov.w	r9, #1
 801c354:	e79e      	b.n	801c294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801c356:	449c      	add	ip, r3
 801c358:	1aff      	subs	r7, r7, r3
 801c35a:	f1b8 0f00 	cmp.w	r8, #0
 801c35e:	d009      	beq.n	801c374 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801c360:	9019      	str	r0, [sp, #100]	; 0x64
 801c362:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801c366:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801c36a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801c36e:	911d      	str	r1, [sp, #116]	; 0x74
 801c370:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801c374:	1ad2      	subs	r2, r2, r3
 801c376:	e6b5      	b.n	801c0e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	b923      	cbnz	r3, 801c388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c37e:	4b04      	ldr	r3, [pc, #16]	; (801c390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801c380:	6818      	ldr	r0, [r3, #0]
 801c382:	6803      	ldr	r3, [r0, #0]
 801c384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c386:	4798      	blx	r3
 801c388:	b05b      	add	sp, #364	; 0x16c
 801c38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c38e:	bf00      	nop
 801c390:	2402628c 	.word	0x2402628c

0801c394 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801c394:	2b03      	cmp	r3, #3
 801c396:	d818      	bhi.n	801c3ca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801c398:	e8df f003 	tbb	[pc, r3]
 801c39c:	130d0602 	.word	0x130d0602
 801c3a0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c3a4:	1850      	adds	r0, r2, r1
 801c3a6:	4770      	bx	lr
 801c3a8:	8803      	ldrh	r3, [r0, #0]
 801c3aa:	8880      	ldrh	r0, [r0, #4]
 801c3ac:	4418      	add	r0, r3
 801c3ae:	b200      	sxth	r0, r0
 801c3b0:	1a80      	subs	r0, r0, r2
 801c3b2:	3801      	subs	r0, #1
 801c3b4:	4770      	bx	lr
 801c3b6:	8803      	ldrh	r3, [r0, #0]
 801c3b8:	8880      	ldrh	r0, [r0, #4]
 801c3ba:	4418      	add	r0, r3
 801c3bc:	b200      	sxth	r0, r0
 801c3be:	1a40      	subs	r0, r0, r1
 801c3c0:	e7f7      	b.n	801c3b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801c3c2:	f9b0 0000 	ldrsh.w	r0, [r0]
 801c3c6:	4410      	add	r0, r2
 801c3c8:	4770      	bx	lr
 801c3ca:	2000      	movs	r0, #0
 801c3cc:	4770      	bx	lr

0801c3ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801c3ce:	2b03      	cmp	r3, #3
 801c3d0:	d817      	bhi.n	801c402 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801c3d2:	e8df f003 	tbb	[pc, r3]
 801c3d6:	0602      	.short	0x0602
 801c3d8:	1009      	.short	0x1009
 801c3da:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801c3de:	1850      	adds	r0, r2, r1
 801c3e0:	4770      	bx	lr
 801c3e2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c3e6:	e7fa      	b.n	801c3de <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801c3e8:	8843      	ldrh	r3, [r0, #2]
 801c3ea:	88c0      	ldrh	r0, [r0, #6]
 801c3ec:	4418      	add	r0, r3
 801c3ee:	b200      	sxth	r0, r0
 801c3f0:	1a80      	subs	r0, r0, r2
 801c3f2:	3801      	subs	r0, #1
 801c3f4:	4770      	bx	lr
 801c3f6:	8843      	ldrh	r3, [r0, #2]
 801c3f8:	88c0      	ldrh	r0, [r0, #6]
 801c3fa:	4418      	add	r0, r3
 801c3fc:	b200      	sxth	r0, r0
 801c3fe:	1a40      	subs	r0, r0, r1
 801c400:	e7f7      	b.n	801c3f2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801c402:	2000      	movs	r0, #0
 801c404:	4770      	bx	lr
	...

0801c408 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801c408:	4b01      	ldr	r3, [pc, #4]	; (801c410 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801c40a:	2200      	movs	r2, #0
 801c40c:	601a      	str	r2, [r3, #0]
 801c40e:	4770      	bx	lr
 801c410:	24026294 	.word	0x24026294

0801c414 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801c414:	4603      	mov	r3, r0
 801c416:	b1c8      	cbz	r0, 801c44c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801c418:	0c02      	lsrs	r2, r0, #16
 801c41a:	0412      	lsls	r2, r2, #16
 801c41c:	b9a2      	cbnz	r2, 801c448 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801c41e:	0403      	lsls	r3, r0, #16
 801c420:	2010      	movs	r0, #16
 801c422:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c426:	bf04      	itt	eq
 801c428:	021b      	lsleq	r3, r3, #8
 801c42a:	3008      	addeq	r0, #8
 801c42c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c430:	bf04      	itt	eq
 801c432:	011b      	lsleq	r3, r3, #4
 801c434:	3004      	addeq	r0, #4
 801c436:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c43a:	bf04      	itt	eq
 801c43c:	009b      	lsleq	r3, r3, #2
 801c43e:	3002      	addeq	r0, #2
 801c440:	2b00      	cmp	r3, #0
 801c442:	db04      	blt.n	801c44e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801c444:	3001      	adds	r0, #1
 801c446:	4770      	bx	lr
 801c448:	2000      	movs	r0, #0
 801c44a:	e7ea      	b.n	801c422 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801c44c:	2020      	movs	r0, #32
 801c44e:	4770      	bx	lr

0801c450 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c454:	b087      	sub	sp, #28
 801c456:	4681      	mov	r9, r0
 801c458:	4698      	mov	r8, r3
 801c45a:	4610      	mov	r0, r2
 801c45c:	460d      	mov	r5, r1
 801c45e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801c462:	b981      	cbnz	r1, 801c486 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801c464:	b14b      	cbz	r3, 801c47a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801c466:	460b      	mov	r3, r1
 801c468:	464a      	mov	r2, r9
 801c46a:	4641      	mov	r1, r8
 801c46c:	e9cd 4700 	strd	r4, r7, [sp]
 801c470:	f7ff ffee 	bl	801c450 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c474:	b007      	add	sp, #28
 801c476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c47a:	f04f 33ff 	mov.w	r3, #4294967295
 801c47e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801c482:	603b      	str	r3, [r7, #0]
 801c484:	e7f6      	b.n	801c474 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801c486:	fa32 fa01 	lsrs.w	sl, r2, r1
 801c48a:	d107      	bne.n	801c49c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801c48c:	fb09 f602 	mul.w	r6, r9, r2
 801c490:	fbb6 f0f4 	udiv	r0, r6, r4
 801c494:	fb04 6610 	mls	r6, r4, r0, r6
 801c498:	603e      	str	r6, [r7, #0]
 801c49a:	e7eb      	b.n	801c474 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801c49c:	2601      	movs	r6, #1
 801c49e:	fa09 fb01 	lsl.w	fp, r9, r1
 801c4a2:	408e      	lsls	r6, r1
 801c4a4:	fbbb f3f4 	udiv	r3, fp, r4
 801c4a8:	3e01      	subs	r6, #1
 801c4aa:	9302      	str	r3, [sp, #8]
 801c4ac:	fb0a f303 	mul.w	r3, sl, r3
 801c4b0:	4016      	ands	r6, r2
 801c4b2:	9303      	str	r3, [sp, #12]
 801c4b4:	4630      	mov	r0, r6
 801c4b6:	f7ff ffad 	bl	801c414 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c4ba:	464a      	mov	r2, r9
 801c4bc:	460b      	mov	r3, r1
 801c4be:	4601      	mov	r1, r0
 801c4c0:	4630      	mov	r0, r6
 801c4c2:	e9cd 4700 	strd	r4, r7, [sp]
 801c4c6:	f7ff ffc3 	bl	801c450 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c4ca:	9b02      	ldr	r3, [sp, #8]
 801c4cc:	4606      	mov	r6, r0
 801c4ce:	eb05 0108 	add.w	r1, r5, r8
 801c4d2:	fb04 bb13 	mls	fp, r4, r3, fp
 801c4d6:	4658      	mov	r0, fp
 801c4d8:	f7ff ff9c 	bl	801c414 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c4dc:	ab05      	add	r3, sp, #20
 801c4de:	465a      	mov	r2, fp
 801c4e0:	e9cd 4300 	strd	r4, r3, [sp]
 801c4e4:	4603      	mov	r3, r0
 801c4e6:	4650      	mov	r0, sl
 801c4e8:	f7ff ffb2 	bl	801c450 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c4ec:	6839      	ldr	r1, [r7, #0]
 801c4ee:	9a05      	ldr	r2, [sp, #20]
 801c4f0:	9b03      	ldr	r3, [sp, #12]
 801c4f2:	4411      	add	r1, r2
 801c4f4:	fbb1 f2f4 	udiv	r2, r1, r4
 801c4f8:	18d3      	adds	r3, r2, r3
 801c4fa:	fb04 1412 	mls	r4, r4, r2, r1
 801c4fe:	441e      	add	r6, r3
 801c500:	603c      	str	r4, [r7, #0]
 801c502:	4430      	add	r0, r6
 801c504:	e7b6      	b.n	801c474 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801c506 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801c506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c50a:	b085      	sub	sp, #20
 801c50c:	f1b0 0900 	subs.w	r9, r0, #0
 801c510:	461d      	mov	r5, r3
 801c512:	4617      	mov	r7, r2
 801c514:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c516:	bfbb      	ittet	lt
 801c518:	f1c9 0900 	rsblt	r9, r9, #0
 801c51c:	f04f 36ff 	movlt.w	r6, #4294967295
 801c520:	2601      	movge	r6, #1
 801c522:	6823      	ldrlt	r3, [r4, #0]
 801c524:	bfbc      	itt	lt
 801c526:	425b      	neglt	r3, r3
 801c528:	6023      	strlt	r3, [r4, #0]
 801c52a:	2a00      	cmp	r2, #0
 801c52c:	da04      	bge.n	801c538 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801c52e:	6823      	ldr	r3, [r4, #0]
 801c530:	4257      	negs	r7, r2
 801c532:	4276      	negs	r6, r6
 801c534:	425b      	negs	r3, r3
 801c536:	6023      	str	r3, [r4, #0]
 801c538:	2d00      	cmp	r5, #0
 801c53a:	4638      	mov	r0, r7
 801c53c:	bfba      	itte	lt
 801c53e:	426d      	neglt	r5, r5
 801c540:	f04f 38ff 	movlt.w	r8, #4294967295
 801c544:	f04f 0801 	movge.w	r8, #1
 801c548:	f7ff ff64 	bl	801c414 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c54c:	ab03      	add	r3, sp, #12
 801c54e:	463a      	mov	r2, r7
 801c550:	e9cd 5300 	strd	r5, r3, [sp]
 801c554:	4603      	mov	r3, r0
 801c556:	4648      	mov	r0, r9
 801c558:	f7ff ff7a 	bl	801c450 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c55c:	6823      	ldr	r3, [r4, #0]
 801c55e:	9a03      	ldr	r2, [sp, #12]
 801c560:	4546      	cmp	r6, r8
 801c562:	441a      	add	r2, r3
 801c564:	fb92 f3f5 	sdiv	r3, r2, r5
 801c568:	4418      	add	r0, r3
 801c56a:	fb05 2313 	mls	r3, r5, r3, r2
 801c56e:	bf18      	it	ne
 801c570:	4240      	negne	r0, r0
 801c572:	1c72      	adds	r2, r6, #1
 801c574:	6023      	str	r3, [r4, #0]
 801c576:	d105      	bne.n	801c584 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801c578:	2b00      	cmp	r3, #0
 801c57a:	f1c3 0200 	rsb	r2, r3, #0
 801c57e:	db0b      	blt.n	801c598 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801c580:	6022      	str	r2, [r4, #0]
 801c582:	e006      	b.n	801c592 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c584:	2e01      	cmp	r6, #1
 801c586:	d104      	bne.n	801c592 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c588:	2b00      	cmp	r3, #0
 801c58a:	da02      	bge.n	801c592 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c58c:	442b      	add	r3, r5
 801c58e:	3801      	subs	r0, #1
 801c590:	6023      	str	r3, [r4, #0]
 801c592:	b005      	add	sp, #20
 801c594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c598:	3801      	subs	r0, #1
 801c59a:	1b52      	subs	r2, r2, r5
 801c59c:	e7f0      	b.n	801c580 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801c5a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801c5a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801c5a4:	4c1c      	ldr	r4, [pc, #112]	; (801c618 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801c5a6:	4605      	mov	r5, r0
 801c5a8:	6807      	ldr	r7, [r0, #0]
 801c5aa:	69a3      	ldr	r3, [r4, #24]
 801c5ac:	b92b      	cbnz	r3, 801c5ba <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801c5ae:	6840      	ldr	r0, [r0, #4]
 801c5b0:	e9c5 7000 	strd	r7, r0, [r5]
 801c5b4:	b004      	add	sp, #16
 801c5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5ba:	f04f 0802 	mov.w	r8, #2
 801c5be:	68a2      	ldr	r2, [r4, #8]
 801c5c0:	ae04      	add	r6, sp, #16
 801c5c2:	6820      	ldr	r0, [r4, #0]
 801c5c4:	fb93 f1f8 	sdiv	r1, r3, r8
 801c5c8:	440a      	add	r2, r1
 801c5ca:	69e1      	ldr	r1, [r4, #28]
 801c5cc:	f846 2d04 	str.w	r2, [r6, #-4]!
 801c5d0:	463a      	mov	r2, r7
 801c5d2:	9600      	str	r6, [sp, #0]
 801c5d4:	f7ff ff97 	bl	801c506 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c5d8:	69a3      	ldr	r3, [r4, #24]
 801c5da:	4607      	mov	r7, r0
 801c5dc:	686a      	ldr	r2, [r5, #4]
 801c5de:	6a21      	ldr	r1, [r4, #32]
 801c5e0:	9600      	str	r6, [sp, #0]
 801c5e2:	6860      	ldr	r0, [r4, #4]
 801c5e4:	f7ff ff8f 	bl	801c506 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c5e8:	69a3      	ldr	r3, [r4, #24]
 801c5ea:	6962      	ldr	r2, [r4, #20]
 801c5ec:	4407      	add	r7, r0
 801c5ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c5f0:	9600      	str	r6, [sp, #0]
 801c5f2:	68e0      	ldr	r0, [r4, #12]
 801c5f4:	fb93 f8f8 	sdiv	r8, r3, r8
 801c5f8:	4442      	add	r2, r8
 801c5fa:	9203      	str	r2, [sp, #12]
 801c5fc:	682a      	ldr	r2, [r5, #0]
 801c5fe:	f7ff ff82 	bl	801c506 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c602:	4680      	mov	r8, r0
 801c604:	9600      	str	r6, [sp, #0]
 801c606:	69a3      	ldr	r3, [r4, #24]
 801c608:	686a      	ldr	r2, [r5, #4]
 801c60a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801c60c:	6920      	ldr	r0, [r4, #16]
 801c60e:	f7ff ff7a 	bl	801c506 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c612:	4440      	add	r0, r8
 801c614:	e7cc      	b.n	801c5b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801c616:	bf00      	nop
 801c618:	24026298 	.word	0x24026298

0801c61c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801c61c:	4b07      	ldr	r3, [pc, #28]	; (801c63c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801c61e:	781b      	ldrb	r3, [r3, #0]
 801c620:	2b01      	cmp	r3, #1
 801c622:	d109      	bne.n	801c638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801c624:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c628:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c62c:	8003      	strh	r3, [r0, #0]
 801c62e:	4b04      	ldr	r3, [pc, #16]	; (801c640 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801c630:	881b      	ldrh	r3, [r3, #0]
 801c632:	3b01      	subs	r3, #1
 801c634:	1a9b      	subs	r3, r3, r2
 801c636:	800b      	strh	r3, [r1, #0]
 801c638:	4770      	bx	lr
 801c63a:	bf00      	nop
 801c63c:	24026284 	.word	0x24026284
 801c640:	24026280 	.word	0x24026280

0801c644 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c644:	4b07      	ldr	r3, [pc, #28]	; (801c664 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c646:	b510      	push	{r4, lr}
 801c648:	781b      	ldrb	r3, [r3, #0]
 801c64a:	2b01      	cmp	r3, #1
 801c64c:	d108      	bne.n	801c660 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c64e:	4b06      	ldr	r3, [pc, #24]	; (801c668 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c650:	880c      	ldrh	r4, [r1, #0]
 801c652:	881b      	ldrh	r3, [r3, #0]
 801c654:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c658:	3b01      	subs	r3, #1
 801c65a:	1b1b      	subs	r3, r3, r4
 801c65c:	8003      	strh	r3, [r0, #0]
 801c65e:	800a      	strh	r2, [r1, #0]
 801c660:	bd10      	pop	{r4, pc}
 801c662:	bf00      	nop
 801c664:	24026284 	.word	0x24026284
 801c668:	24026280 	.word	0x24026280

0801c66c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801c66c:	4b0a      	ldr	r3, [pc, #40]	; (801c698 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801c66e:	b510      	push	{r4, lr}
 801c670:	781b      	ldrb	r3, [r3, #0]
 801c672:	2b01      	cmp	r3, #1
 801c674:	d10e      	bne.n	801c694 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801c676:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c67a:	8843      	ldrh	r3, [r0, #2]
 801c67c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c680:	18ca      	adds	r2, r1, r3
 801c682:	4b06      	ldr	r3, [pc, #24]	; (801c69c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801c684:	8044      	strh	r4, [r0, #2]
 801c686:	881b      	ldrh	r3, [r3, #0]
 801c688:	1a9b      	subs	r3, r3, r2
 801c68a:	8003      	strh	r3, [r0, #0]
 801c68c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c690:	8081      	strh	r1, [r0, #4]
 801c692:	80c3      	strh	r3, [r0, #6]
 801c694:	bd10      	pop	{r4, pc}
 801c696:	bf00      	nop
 801c698:	24026284 	.word	0x24026284
 801c69c:	24026280 	.word	0x24026280

0801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801c6a0:	4b08      	ldr	r3, [pc, #32]	; (801c6c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801c6a2:	781b      	ldrb	r3, [r3, #0]
 801c6a4:	2b01      	cmp	r3, #1
 801c6a6:	d10c      	bne.n	801c6c2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801c6a8:	8803      	ldrh	r3, [r0, #0]
 801c6aa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c6ae:	8842      	ldrh	r2, [r0, #2]
 801c6b0:	8002      	strh	r2, [r0, #0]
 801c6b2:	185a      	adds	r2, r3, r1
 801c6b4:	4b04      	ldr	r3, [pc, #16]	; (801c6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801c6b6:	881b      	ldrh	r3, [r3, #0]
 801c6b8:	1a9b      	subs	r3, r3, r2
 801c6ba:	8043      	strh	r3, [r0, #2]
 801c6bc:	88c3      	ldrh	r3, [r0, #6]
 801c6be:	80c1      	strh	r1, [r0, #6]
 801c6c0:	8083      	strh	r3, [r0, #4]
 801c6c2:	4770      	bx	lr
 801c6c4:	24026284 	.word	0x24026284
 801c6c8:	24026280 	.word	0x24026280

0801c6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801c6cc:	4b07      	ldr	r3, [pc, #28]	; (801c6ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801c6ce:	b510      	push	{r4, lr}
 801c6d0:	781b      	ldrb	r3, [r3, #0]
 801c6d2:	2b01      	cmp	r3, #1
 801c6d4:	d108      	bne.n	801c6e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801c6d6:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c6da:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c6de:	8003      	strh	r3, [r0, #0]
 801c6e0:	8893      	ldrh	r3, [r2, #4]
 801c6e2:	3b01      	subs	r3, #1
 801c6e4:	1b1b      	subs	r3, r3, r4
 801c6e6:	800b      	strh	r3, [r1, #0]
 801c6e8:	bd10      	pop	{r4, pc}
 801c6ea:	bf00      	nop
 801c6ec:	24026284 	.word	0x24026284

0801c6f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801c6f0:	4b0b      	ldr	r3, [pc, #44]	; (801c720 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801c6f2:	781b      	ldrb	r3, [r3, #0]
 801c6f4:	2b01      	cmp	r3, #1
 801c6f6:	d111      	bne.n	801c71c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801c6f8:	680b      	ldr	r3, [r1, #0]
 801c6fa:	ed90 7a00 	vldr	s14, [r0]
 801c6fe:	6003      	str	r3, [r0, #0]
 801c700:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801c704:	eddf 6a07 	vldr	s13, [pc, #28]	; 801c724 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801c708:	ee07 3a90 	vmov	s15, r3
 801c70c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c710:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c718:	edc1 7a00 	vstr	s15, [r1]
 801c71c:	4770      	bx	lr
 801c71e:	bf00      	nop
 801c720:	24026284 	.word	0x24026284
 801c724:	38d1b717 	.word	0x38d1b717

0801c728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801c728:	4b0a      	ldr	r3, [pc, #40]	; (801c754 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801c72a:	460a      	mov	r2, r1
 801c72c:	b510      	push	{r4, lr}
 801c72e:	781b      	ldrb	r3, [r3, #0]
 801c730:	2b01      	cmp	r3, #1
 801c732:	d10d      	bne.n	801c750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801c734:	8881      	ldrh	r1, [r0, #4]
 801c736:	8803      	ldrh	r3, [r0, #0]
 801c738:	440b      	add	r3, r1
 801c73a:	4601      	mov	r1, r0
 801c73c:	3b01      	subs	r3, #1
 801c73e:	f821 3b02 	strh.w	r3, [r1], #2
 801c742:	f7ff ffc3 	bl	801c6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c746:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c74a:	88c2      	ldrh	r2, [r0, #6]
 801c74c:	80c3      	strh	r3, [r0, #6]
 801c74e:	8082      	strh	r2, [r0, #4]
 801c750:	bd10      	pop	{r4, pc}
 801c752:	bf00      	nop
 801c754:	24026284 	.word	0x24026284

0801c758 <_ZN8touchgfx11Application13requestRedrawEv>:
 801c758:	4b06      	ldr	r3, [pc, #24]	; (801c774 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801c75a:	2100      	movs	r1, #0
 801c75c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c760:	4b05      	ldr	r3, [pc, #20]	; (801c778 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801c762:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801c766:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c76a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801c76e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801c772:	4770      	bx	lr
 801c774:	24026280 	.word	0x24026280
 801c778:	24026282 	.word	0x24026282

0801c77c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801c77c:	4b03      	ldr	r3, [pc, #12]	; (801c78c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801c77e:	6818      	ldr	r0, [r3, #0]
 801c780:	b110      	cbz	r0, 801c788 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801c782:	6803      	ldr	r3, [r0, #0]
 801c784:	699b      	ldr	r3, [r3, #24]
 801c786:	4718      	bx	r3
 801c788:	4770      	bx	lr
 801c78a:	bf00      	nop
 801c78c:	240262c8 	.word	0x240262c8

0801c790 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801c790:	4770      	bx	lr
	...

0801c794 <_ZN8touchgfx11Application4drawEv>:
 801c794:	4b09      	ldr	r3, [pc, #36]	; (801c7bc <_ZN8touchgfx11Application4drawEv+0x28>)
 801c796:	b507      	push	{r0, r1, r2, lr}
 801c798:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c79c:	2100      	movs	r1, #0
 801c79e:	4b08      	ldr	r3, [pc, #32]	; (801c7c0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801c7a0:	9100      	str	r1, [sp, #0]
 801c7a2:	4669      	mov	r1, sp
 801c7a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c7a8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c7ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c7b0:	6803      	ldr	r3, [r0, #0]
 801c7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c7b4:	4798      	blx	r3
 801c7b6:	b003      	add	sp, #12
 801c7b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801c7bc:	24026280 	.word	0x24026280
 801c7c0:	24026282 	.word	0x24026282

0801c7c4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801c7c4:	4b03      	ldr	r3, [pc, #12]	; (801c7d4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801c7c6:	6818      	ldr	r0, [r3, #0]
 801c7c8:	b110      	cbz	r0, 801c7d0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801c7ca:	6803      	ldr	r3, [r0, #0]
 801c7cc:	69db      	ldr	r3, [r3, #28]
 801c7ce:	4718      	bx	r3
 801c7d0:	4770      	bx	lr
 801c7d2:	bf00      	nop
 801c7d4:	240262c8 	.word	0x240262c8

0801c7d8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801c7d8:	4b03      	ldr	r3, [pc, #12]	; (801c7e8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801c7da:	6818      	ldr	r0, [r3, #0]
 801c7dc:	b110      	cbz	r0, 801c7e4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801c7de:	6803      	ldr	r3, [r0, #0]
 801c7e0:	6a1b      	ldr	r3, [r3, #32]
 801c7e2:	4718      	bx	r3
 801c7e4:	4770      	bx	lr
 801c7e6:	bf00      	nop
 801c7e8:	240262c8 	.word	0x240262c8

0801c7ec <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801c7f2:	4770      	bx	lr

0801c7f4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801c7f4:	4b03      	ldr	r3, [pc, #12]	; (801c804 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801c7f6:	6818      	ldr	r0, [r3, #0]
 801c7f8:	b110      	cbz	r0, 801c800 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801c7fa:	6803      	ldr	r3, [r0, #0]
 801c7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7fe:	4718      	bx	r3
 801c800:	4770      	bx	lr
 801c802:	bf00      	nop
 801c804:	240262c8 	.word	0x240262c8

0801c808 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801c808:	b510      	push	{r4, lr}
 801c80a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c80e:	888a      	ldrh	r2, [r1, #4]
 801c810:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c814:	4422      	add	r2, r4
 801c816:	b212      	sxth	r2, r2
 801c818:	4293      	cmp	r3, r2
 801c81a:	da15      	bge.n	801c848 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c81c:	8882      	ldrh	r2, [r0, #4]
 801c81e:	4413      	add	r3, r2
 801c820:	b21b      	sxth	r3, r3
 801c822:	429c      	cmp	r4, r3
 801c824:	da10      	bge.n	801c848 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c826:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c82a:	88c9      	ldrh	r1, [r1, #6]
 801c82c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c830:	4419      	add	r1, r3
 801c832:	b209      	sxth	r1, r1
 801c834:	428a      	cmp	r2, r1
 801c836:	da07      	bge.n	801c848 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c838:	88c0      	ldrh	r0, [r0, #6]
 801c83a:	4410      	add	r0, r2
 801c83c:	b200      	sxth	r0, r0
 801c83e:	4283      	cmp	r3, r0
 801c840:	bfac      	ite	ge
 801c842:	2000      	movge	r0, #0
 801c844:	2001      	movlt	r0, #1
 801c846:	bd10      	pop	{r4, pc}
 801c848:	2000      	movs	r0, #0
 801c84a:	e7fc      	b.n	801c846 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801c84c <_ZN8touchgfx4Rect10restrictToEss>:
 801c84c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c850:	2b00      	cmp	r3, #0
 801c852:	b510      	push	{r4, lr}
 801c854:	da04      	bge.n	801c860 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801c856:	8884      	ldrh	r4, [r0, #4]
 801c858:	4423      	add	r3, r4
 801c85a:	8083      	strh	r3, [r0, #4]
 801c85c:	2300      	movs	r3, #0
 801c85e:	8003      	strh	r3, [r0, #0]
 801c860:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c864:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c868:	1b09      	subs	r1, r1, r4
 801c86a:	428b      	cmp	r3, r1
 801c86c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c870:	bfc8      	it	gt
 801c872:	8081      	strhgt	r1, [r0, #4]
 801c874:	2b00      	cmp	r3, #0
 801c876:	da04      	bge.n	801c882 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801c878:	88c1      	ldrh	r1, [r0, #6]
 801c87a:	440b      	add	r3, r1
 801c87c:	80c3      	strh	r3, [r0, #6]
 801c87e:	2300      	movs	r3, #0
 801c880:	8043      	strh	r3, [r0, #2]
 801c882:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801c886:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801c88a:	1a52      	subs	r2, r2, r1
 801c88c:	4293      	cmp	r3, r2
 801c88e:	bfc8      	it	gt
 801c890:	80c2      	strhgt	r2, [r0, #6]
 801c892:	bd10      	pop	{r4, pc}

0801c894 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c894:	4b10      	ldr	r3, [pc, #64]	; (801c8d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801c896:	b510      	push	{r4, lr}
 801c898:	460c      	mov	r4, r1
 801c89a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c89e:	4b0f      	ldr	r3, [pc, #60]	; (801c8dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c8a6:	f7ff ffd1 	bl	801c84c <_ZN8touchgfx4Rect10restrictToEss>
 801c8aa:	4b0d      	ldr	r3, [pc, #52]	; (801c8e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801c8ac:	6818      	ldr	r0, [r3, #0]
 801c8ae:	b190      	cbz	r0, 801c8d6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801c8b0:	6803      	ldr	r3, [r0, #0]
 801c8b2:	4621      	mov	r1, r4
 801c8b4:	689b      	ldr	r3, [r3, #8]
 801c8b6:	4798      	blx	r3
 801c8b8:	4b0a      	ldr	r3, [pc, #40]	; (801c8e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801c8ba:	6818      	ldr	r0, [r3, #0]
 801c8bc:	b118      	cbz	r0, 801c8c6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801c8be:	6803      	ldr	r3, [r0, #0]
 801c8c0:	4621      	mov	r1, r4
 801c8c2:	689b      	ldr	r3, [r3, #8]
 801c8c4:	4798      	blx	r3
 801c8c6:	4b08      	ldr	r3, [pc, #32]	; (801c8e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801c8c8:	4621      	mov	r1, r4
 801c8ca:	6818      	ldr	r0, [r3, #0]
 801c8cc:	6803      	ldr	r3, [r0, #0]
 801c8ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c8d2:	69db      	ldr	r3, [r3, #28]
 801c8d4:	4718      	bx	r3
 801c8d6:	bd10      	pop	{r4, pc}
 801c8d8:	24026282 	.word	0x24026282
 801c8dc:	24026280 	.word	0x24026280
 801c8e0:	240262c8 	.word	0x240262c8
 801c8e4:	240262c4 	.word	0x240262c4
 801c8e8:	2402628c 	.word	0x2402628c

0801c8ec <_ZNK8touchgfx4Rect8includesERKS0_>:
 801c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8ee:	4606      	mov	r6, r0
 801c8f0:	4608      	mov	r0, r1
 801c8f2:	460f      	mov	r7, r1
 801c8f4:	f7fd fb03 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8f8:	b9e8      	cbnz	r0, 801c936 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c8fa:	f9b7 5000 	ldrsh.w	r5, [r7]
 801c8fe:	f9b6 4000 	ldrsh.w	r4, [r6]
 801c902:	42a5      	cmp	r5, r4
 801c904:	db17      	blt.n	801c936 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c906:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801c90a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801c90e:	429a      	cmp	r2, r3
 801c910:	db11      	blt.n	801c936 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c912:	88b9      	ldrh	r1, [r7, #4]
 801c914:	440d      	add	r5, r1
 801c916:	88b1      	ldrh	r1, [r6, #4]
 801c918:	440c      	add	r4, r1
 801c91a:	b22d      	sxth	r5, r5
 801c91c:	b224      	sxth	r4, r4
 801c91e:	42a5      	cmp	r5, r4
 801c920:	dc09      	bgt.n	801c936 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c922:	88f8      	ldrh	r0, [r7, #6]
 801c924:	4410      	add	r0, r2
 801c926:	88f2      	ldrh	r2, [r6, #6]
 801c928:	4413      	add	r3, r2
 801c92a:	b200      	sxth	r0, r0
 801c92c:	b21b      	sxth	r3, r3
 801c92e:	4298      	cmp	r0, r3
 801c930:	bfcc      	ite	gt
 801c932:	2000      	movgt	r0, #0
 801c934:	2001      	movle	r0, #1
 801c936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c938 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c93a:	4604      	mov	r4, r0
 801c93c:	4608      	mov	r0, r1
 801c93e:	460d      	mov	r5, r1
 801c940:	f7fd fadd 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801c944:	b978      	cbnz	r0, 801c966 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801c946:	4620      	mov	r0, r4
 801c948:	f7fd fad9 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801c94c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801c950:	b150      	cbz	r0, 801c968 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801c952:	8026      	strh	r6, [r4, #0]
 801c954:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c958:	8063      	strh	r3, [r4, #2]
 801c95a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801c95e:	80a3      	strh	r3, [r4, #4]
 801c960:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c964:	80e3      	strh	r3, [r4, #6]
 801c966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c968:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c96c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c970:	42b1      	cmp	r1, r6
 801c972:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801c976:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801c97a:	460f      	mov	r7, r1
 801c97c:	88ed      	ldrh	r5, [r5, #6]
 801c97e:	bfa8      	it	ge
 801c980:	4637      	movge	r7, r6
 801c982:	4293      	cmp	r3, r2
 801c984:	4618      	mov	r0, r3
 801c986:	4466      	add	r6, ip
 801c988:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801c98c:	bfa8      	it	ge
 801c98e:	4610      	movge	r0, r2
 801c990:	442a      	add	r2, r5
 801c992:	88e5      	ldrh	r5, [r4, #6]
 801c994:	4461      	add	r1, ip
 801c996:	b236      	sxth	r6, r6
 801c998:	8027      	strh	r7, [r4, #0]
 801c99a:	442b      	add	r3, r5
 801c99c:	b209      	sxth	r1, r1
 801c99e:	b212      	sxth	r2, r2
 801c9a0:	8060      	strh	r0, [r4, #2]
 801c9a2:	b21b      	sxth	r3, r3
 801c9a4:	428e      	cmp	r6, r1
 801c9a6:	bfac      	ite	ge
 801c9a8:	ebc7 0106 	rsbge	r1, r7, r6
 801c9ac:	ebc7 0101 	rsblt	r1, r7, r1
 801c9b0:	429a      	cmp	r2, r3
 801c9b2:	bfac      	ite	ge
 801c9b4:	ebc0 0202 	rsbge	r2, r0, r2
 801c9b8:	ebc0 0203 	rsblt	r2, r0, r3
 801c9bc:	80a1      	strh	r1, [r4, #4]
 801c9be:	80e2      	strh	r2, [r4, #6]
 801c9c0:	e7d1      	b.n	801c966 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801c9c4 <_ZN8touchgfx11Application11getInstanceEv>:
 801c9c4:	4b01      	ldr	r3, [pc, #4]	; (801c9cc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c9c6:	6818      	ldr	r0, [r3, #0]
 801c9c8:	4770      	bx	lr
 801c9ca:	bf00      	nop
 801c9cc:	240262d8 	.word	0x240262d8

0801c9d0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	b510      	push	{r4, lr}
 801c9d4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801c9d8:	4604      	mov	r4, r0
 801c9da:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801c9de:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801c9e2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801c9e6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801c9ea:	429a      	cmp	r2, r3
 801c9ec:	d90e      	bls.n	801ca0c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801c9ee:	18e2      	adds	r2, r4, r3
 801c9f0:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801c9f4:	b122      	cbz	r2, 801ca00 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801c9f6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801c9fa:	6803      	ldr	r3, [r0, #0]
 801c9fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c9fe:	4798      	blx	r3
 801ca00:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801ca04:	3301      	adds	r3, #1
 801ca06:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801ca0a:	e7ea      	b.n	801c9e2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801ca0c:	bd10      	pop	{r4, pc}

0801ca0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801ca0e:	2300      	movs	r3, #0
 801ca10:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801ca14:	30a4      	adds	r0, #164	; 0xa4
 801ca16:	f820 3c24 	strh.w	r3, [r0, #-36]
 801ca1a:	f802 3b01 	strb.w	r3, [r2], #1
 801ca1e:	4282      	cmp	r2, r0
 801ca20:	d1fb      	bne.n	801ca1a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801ca22:	4770      	bx	lr

0801ca24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801ca24:	b570      	push	{r4, r5, r6, lr}
 801ca26:	4c0b      	ldr	r4, [pc, #44]	; (801ca54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801ca28:	4605      	mov	r5, r0
 801ca2a:	460e      	mov	r6, r1
 801ca2c:	6820      	ldr	r0, [r4, #0]
 801ca2e:	b110      	cbz	r0, 801ca36 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801ca30:	6803      	ldr	r3, [r0, #0]
 801ca32:	695b      	ldr	r3, [r3, #20]
 801ca34:	4798      	blx	r3
 801ca36:	1d28      	adds	r0, r5, #4
 801ca38:	f7ff ffe9 	bl	801ca0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801ca3c:	6026      	str	r6, [r4, #0]
 801ca3e:	6833      	ldr	r3, [r6, #0]
 801ca40:	4630      	mov	r0, r6
 801ca42:	68db      	ldr	r3, [r3, #12]
 801ca44:	4798      	blx	r3
 801ca46:	682b      	ldr	r3, [r5, #0]
 801ca48:	4628      	mov	r0, r5
 801ca4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ca4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ca50:	4718      	bx	r3
 801ca52:	bf00      	nop
 801ca54:	240262c8 	.word	0x240262c8

0801ca58 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801ca58:	2300      	movs	r3, #0
 801ca5a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801ca5e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801ca62:	461a      	mov	r2, r3
 801ca64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca66:	461c      	mov	r4, r3
 801ca68:	461d      	mov	r5, r3
 801ca6a:	459c      	cmp	ip, r3
 801ca6c:	dd1a      	ble.n	801caa4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801ca6e:	18c6      	adds	r6, r0, r3
 801ca70:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801ca74:	b16e      	cbz	r6, 801ca92 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801ca76:	429a      	cmp	r2, r3
 801ca78:	d008      	beq.n	801ca8c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801ca7a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801ca7e:	fa1f fe82 	uxth.w	lr, r2
 801ca82:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801ca86:	1887      	adds	r7, r0, r2
 801ca88:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801ca8c:	3201      	adds	r2, #1
 801ca8e:	3301      	adds	r3, #1
 801ca90:	e7eb      	b.n	801ca6a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801ca92:	4299      	cmp	r1, r3
 801ca94:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801ca98:	bfa8      	it	ge
 801ca9a:	3501      	addge	r5, #1
 801ca9c:	429e      	cmp	r6, r3
 801ca9e:	bfc8      	it	gt
 801caa0:	3401      	addgt	r4, #1
 801caa2:	e7f4      	b.n	801ca8e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801caa4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801caa8:	1b49      	subs	r1, r1, r5
 801caaa:	1b1b      	subs	r3, r3, r4
 801caac:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801cab0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801cab4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801cab8:	4293      	cmp	r3, r2
 801caba:	dd03      	ble.n	801cac4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801cabc:	3b01      	subs	r3, #1
 801cabe:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801cac2:	e7f7      	b.n	801cab4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801cac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801cac8 <_ZN8touchgfx11Application15handleTickEventEv>:
 801cac8:	b570      	push	{r4, r5, r6, lr}
 801caca:	4d16      	ldr	r5, [pc, #88]	; (801cb24 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801cacc:	4604      	mov	r4, r0
 801cace:	6828      	ldr	r0, [r5, #0]
 801cad0:	b140      	cbz	r0, 801cae4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801cad2:	7a03      	ldrb	r3, [r0, #8]
 801cad4:	b933      	cbnz	r3, 801cae4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801cad6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801cada:	6803      	ldr	r3, [r0, #0]
 801cadc:	689b      	ldr	r3, [r3, #8]
 801cade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cae2:	4718      	bx	r3
 801cae4:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801cae8:	4e0f      	ldr	r6, [pc, #60]	; (801cb28 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801caea:	b973      	cbnz	r3, 801cb0a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801caec:	b168      	cbz	r0, 801cb0a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801caee:	7a03      	ldrb	r3, [r0, #8]
 801caf0:	b15b      	cbz	r3, 801cb0a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801caf2:	6830      	ldr	r0, [r6, #0]
 801caf4:	b110      	cbz	r0, 801cafc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801caf6:	6803      	ldr	r3, [r0, #0]
 801caf8:	691b      	ldr	r3, [r3, #16]
 801cafa:	4798      	blx	r3
 801cafc:	6828      	ldr	r0, [r5, #0]
 801cafe:	6803      	ldr	r3, [r0, #0]
 801cb00:	68db      	ldr	r3, [r3, #12]
 801cb02:	4798      	blx	r3
 801cb04:	2301      	movs	r3, #1
 801cb06:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801cb0a:	3404      	adds	r4, #4
 801cb0c:	4620      	mov	r0, r4
 801cb0e:	f7ff ff5f 	bl	801c9d0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801cb12:	4620      	mov	r0, r4
 801cb14:	f7ff ffa0 	bl	801ca58 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801cb18:	6830      	ldr	r0, [r6, #0]
 801cb1a:	b110      	cbz	r0, 801cb22 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801cb1c:	6803      	ldr	r3, [r0, #0]
 801cb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb20:	e7dd      	b.n	801cade <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801cb22:	bd70      	pop	{r4, r5, r6, pc}
 801cb24:	240262cc 	.word	0x240262cc
 801cb28:	240262c8 	.word	0x240262c8

0801cb2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801cb2c:	4603      	mov	r3, r0
 801cb2e:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801cb32:	2200      	movs	r2, #0
 801cb34:	801a      	strh	r2, [r3, #0]
 801cb36:	3308      	adds	r3, #8
 801cb38:	f823 2c06 	strh.w	r2, [r3, #-6]
 801cb3c:	f823 2c04 	strh.w	r2, [r3, #-4]
 801cb40:	f823 2c02 	strh.w	r2, [r3, #-2]
 801cb44:	428b      	cmp	r3, r1
 801cb46:	d1f5      	bne.n	801cb34 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801cb48:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801cb4c:	4770      	bx	lr
	...

0801cb50 <_ZN8touchgfx11ApplicationC1Ev>:
 801cb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb52:	4b1d      	ldr	r3, [pc, #116]	; (801cbc8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801cb54:	4606      	mov	r6, r0
 801cb56:	4604      	mov	r4, r0
 801cb58:	2500      	movs	r5, #0
 801cb5a:	f846 3b04 	str.w	r3, [r6], #4
 801cb5e:	22a8      	movs	r2, #168	; 0xa8
 801cb60:	2100      	movs	r1, #0
 801cb62:	4630      	mov	r0, r6
 801cb64:	f00a fe0c 	bl	8027780 <memset>
 801cb68:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801cb6c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801cb70:	4f16      	ldr	r7, [pc, #88]	; (801cbcc <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801cb72:	f7ff ffdb 	bl	801cb2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801cb76:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801cb7a:	f7ff ffd7 	bl	801cb2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801cb7e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801cb82:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801cb86:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801cb8a:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801cb8e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801cb92:	490f      	ldr	r1, [pc, #60]	; (801cbd0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801cb94:	480f      	ldr	r0, [pc, #60]	; (801cbd4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801cb96:	f00a fc2b 	bl	80273f0 <CRC_Lock>
 801cb9a:	4b0f      	ldr	r3, [pc, #60]	; (801cbd8 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801cb9c:	b158      	cbz	r0, 801cbb6 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801cb9e:	801d      	strh	r5, [r3, #0]
 801cba0:	2300      	movs	r3, #0
 801cba2:	4a0e      	ldr	r2, [pc, #56]	; (801cbdc <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801cba4:	4630      	mov	r0, r6
 801cba6:	6013      	str	r3, [r2, #0]
 801cba8:	4a0d      	ldr	r2, [pc, #52]	; (801cbe0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801cbaa:	603b      	str	r3, [r7, #0]
 801cbac:	6013      	str	r3, [r2, #0]
 801cbae:	f7ff ff2e 	bl	801ca0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801cbb2:	4620      	mov	r0, r4
 801cbb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cbb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cbba:	2002      	movs	r0, #2
 801cbbc:	801a      	strh	r2, [r3, #0]
 801cbbe:	6038      	str	r0, [r7, #0]
 801cbc0:	f001 fa3e 	bl	801e040 <_ZN8touchgfx6Screen4drawEv>
 801cbc4:	e7ec      	b.n	801cba0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801cbc6:	bf00      	nop
 801cbc8:	0802bff0 	.word	0x0802bff0
 801cbcc:	240262c8 	.word	0x240262c8
 801cbd0:	b5e8b5cd 	.word	0xb5e8b5cd
 801cbd4:	f407a5c2 	.word	0xf407a5c2
 801cbd8:	24000068 	.word	0x24000068
 801cbdc:	240262d8 	.word	0x240262d8
 801cbe0:	240262cc 	.word	0x240262cc

0801cbe4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801cbe4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801cbe8:	3b01      	subs	r3, #1
 801cbea:	b29b      	uxth	r3, r3
 801cbec:	428b      	cmp	r3, r1
 801cbee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801cbf2:	b510      	push	{r4, lr}
 801cbf4:	d908      	bls.n	801cc08 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801cbf6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801cbfa:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801cbfe:	681a      	ldr	r2, [r3, #0]
 801cc00:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801cc04:	685a      	ldr	r2, [r3, #4]
 801cc06:	6062      	str	r2, [r4, #4]
 801cc08:	bd10      	pop	{r4, pc}
	...

0801cc0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801cc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc10:	b08f      	sub	sp, #60	; 0x3c
 801cc12:	4b8f      	ldr	r3, [pc, #572]	; (801ce50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801cc14:	4683      	mov	fp, r0
 801cc16:	ac0a      	add	r4, sp, #40	; 0x28
 801cc18:	e884 0006 	stmia.w	r4, {r1, r2}
 801cc1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cc20:	4620      	mov	r0, r4
 801cc22:	4b8c      	ldr	r3, [pc, #560]	; (801ce54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801cc24:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cc28:	f7ff fe10 	bl	801c84c <_ZN8touchgfx4Rect10restrictToEss>
 801cc2c:	4620      	mov	r0, r4
 801cc2e:	f7fd f966 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc32:	2800      	cmp	r0, #0
 801cc34:	d16a      	bne.n	801cd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801cc36:	9403      	str	r4, [sp, #12]
 801cc38:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801cc3c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801cc40:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801cc44:	9301      	str	r3, [sp, #4]
 801cc46:	35a4      	adds	r5, #164	; 0xa4
 801cc48:	b15c      	cbz	r4, 801cc62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801cc4a:	4629      	mov	r1, r5
 801cc4c:	9803      	ldr	r0, [sp, #12]
 801cc4e:	f7ff fe4d 	bl	801c8ec <_ZNK8touchgfx4Rect8includesERKS0_>
 801cc52:	3c01      	subs	r4, #1
 801cc54:	b118      	cbz	r0, 801cc5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801cc56:	b2a1      	uxth	r1, r4
 801cc58:	9801      	ldr	r0, [sp, #4]
 801cc5a:	f7ff ffc3 	bl	801cbe4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cc5e:	3d08      	subs	r5, #8
 801cc60:	e7f2      	b.n	801cc48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801cc62:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801cc66:	f108 33ff 	add.w	r3, r8, #4294967295
 801cc6a:	f8cd 8010 	str.w	r8, [sp, #16]
 801cc6e:	9302      	str	r3, [sp, #8]
 801cc70:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801cc74:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801cc78:	9306      	str	r3, [sp, #24]
 801cc7a:	445c      	add	r4, fp
 801cc7c:	2500      	movs	r5, #0
 801cc7e:	4626      	mov	r6, r4
 801cc80:	f8cd 8014 	str.w	r8, [sp, #20]
 801cc84:	462f      	mov	r7, r5
 801cc86:	9b05      	ldr	r3, [sp, #20]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d073      	beq.n	801cd74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801cc8c:	9903      	ldr	r1, [sp, #12]
 801cc8e:	4630      	mov	r0, r6
 801cc90:	f7ff fdba 	bl	801c808 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cc94:	b350      	cbz	r0, 801ccec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801cc96:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801cc9a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801cc9e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801cca2:	45e6      	cmp	lr, ip
 801cca4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801cca8:	db33      	blt.n	801cd12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ccaa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801ccae:	88b3      	ldrh	r3, [r6, #4]
 801ccb0:	4472      	add	r2, lr
 801ccb2:	4463      	add	r3, ip
 801ccb4:	b212      	sxth	r2, r2
 801ccb6:	b21b      	sxth	r3, r3
 801ccb8:	429a      	cmp	r2, r3
 801ccba:	dc2a      	bgt.n	801cd12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ccbc:	fa1f f289 	uxth.w	r2, r9
 801ccc0:	88f3      	ldrh	r3, [r6, #6]
 801ccc2:	45ca      	cmp	sl, r9
 801ccc4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ccc8:	4413      	add	r3, r2
 801ccca:	fa1f fc8a 	uxth.w	ip, sl
 801ccce:	b29b      	uxth	r3, r3
 801ccd0:	fa0f fe83 	sxth.w	lr, r3
 801ccd4:	db0f      	blt.n	801ccf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ccd6:	eba3 030c 	sub.w	r3, r3, ip
 801ccda:	1ac9      	subs	r1, r1, r3
 801ccdc:	b209      	sxth	r1, r1
 801ccde:	2900      	cmp	r1, #0
 801cce0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801cce4:	dd12      	ble.n	801cd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801cce6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801ccea:	4605      	mov	r5, r0
 801ccec:	9b05      	ldr	r3, [sp, #20]
 801ccee:	3e08      	subs	r6, #8
 801ccf0:	3b01      	subs	r3, #1
 801ccf2:	9305      	str	r3, [sp, #20]
 801ccf4:	e7c7      	b.n	801cc86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801ccf6:	4461      	add	r1, ip
 801ccf8:	b209      	sxth	r1, r1
 801ccfa:	4571      	cmp	r1, lr
 801ccfc:	dc38      	bgt.n	801cd70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ccfe:	eba2 020c 	sub.w	r2, r2, ip
 801cd02:	b212      	sxth	r2, r2
 801cd04:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801cd08:	2a00      	cmp	r2, #0
 801cd0a:	dcee      	bgt.n	801ccea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801cd0c:	b00f      	add	sp, #60	; 0x3c
 801cd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd12:	45ca      	cmp	sl, r9
 801cd14:	db2c      	blt.n	801cd70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801cd16:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801cd1a:	449a      	add	sl, r3
 801cd1c:	88f3      	ldrh	r3, [r6, #6]
 801cd1e:	4499      	add	r9, r3
 801cd20:	fa0f fa8a 	sxth.w	sl, sl
 801cd24:	fa0f f989 	sxth.w	r9, r9
 801cd28:	45ca      	cmp	sl, r9
 801cd2a:	dc21      	bgt.n	801cd70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801cd2c:	fa1f f28c 	uxth.w	r2, ip
 801cd30:	88b3      	ldrh	r3, [r6, #4]
 801cd32:	45e6      	cmp	lr, ip
 801cd34:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cd38:	4413      	add	r3, r2
 801cd3a:	fa1f f98e 	uxth.w	r9, lr
 801cd3e:	b29b      	uxth	r3, r3
 801cd40:	fa0f fa83 	sxth.w	sl, r3
 801cd44:	db0a      	blt.n	801cd5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801cd46:	eba3 0309 	sub.w	r3, r3, r9
 801cd4a:	1ac9      	subs	r1, r1, r3
 801cd4c:	b209      	sxth	r1, r1
 801cd4e:	2900      	cmp	r1, #0
 801cd50:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801cd54:	ddda      	ble.n	801cd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801cd56:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801cd5a:	e7c6      	b.n	801ccea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801cd5c:	4449      	add	r1, r9
 801cd5e:	b209      	sxth	r1, r1
 801cd60:	4551      	cmp	r1, sl
 801cd62:	dc05      	bgt.n	801cd70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801cd64:	eba2 0209 	sub.w	r2, r2, r9
 801cd68:	b212      	sxth	r2, r2
 801cd6a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801cd6e:	e7cb      	b.n	801cd08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801cd70:	4607      	mov	r7, r0
 801cd72:	e7bb      	b.n	801ccec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801cd74:	2d00      	cmp	r5, #0
 801cd76:	d181      	bne.n	801cc7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801cd78:	2f00      	cmp	r7, #0
 801cd7a:	f000 81dd 	beq.w	801d138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801cd7e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801cd82:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801cd86:	b2b3      	uxth	r3, r6
 801cd88:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801cd8c:	b2b9      	uxth	r1, r7
 801cd8e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801cd92:	441a      	add	r2, r3
 801cd94:	448a      	add	sl, r1
 801cd96:	9105      	str	r1, [sp, #20]
 801cd98:	b292      	uxth	r2, r2
 801cd9a:	fa1f fa8a 	uxth.w	sl, sl
 801cd9e:	fa0f f882 	sxth.w	r8, r2
 801cda2:	fa0f f98a 	sxth.w	r9, sl
 801cda6:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801cdaa:	9b04      	ldr	r3, [sp, #16]
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d053      	beq.n	801ce58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801cdb0:	9903      	ldr	r1, [sp, #12]
 801cdb2:	4620      	mov	r0, r4
 801cdb4:	f7ff fd28 	bl	801c808 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cdb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801cdbc:	b1c0      	cbz	r0, 801cdf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801cdbe:	f9b4 e000 	ldrsh.w	lr, [r4]
 801cdc2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801cdc6:	4576      	cmp	r6, lr
 801cdc8:	dc23      	bgt.n	801ce12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801cdca:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801cdce:	44f4      	add	ip, lr
 801cdd0:	fa0f fc8c 	sxth.w	ip, ip
 801cdd4:	45e0      	cmp	r8, ip
 801cdd6:	db1c      	blt.n	801ce12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801cdd8:	428f      	cmp	r7, r1
 801cdda:	fa1f fc81 	uxth.w	ip, r1
 801cdde:	88e1      	ldrh	r1, [r4, #6]
 801cde0:	dc0d      	bgt.n	801cdfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801cde2:	ebaa 0c0c 	sub.w	ip, sl, ip
 801cde6:	f8a4 9002 	strh.w	r9, [r4, #2]
 801cdea:	eba1 010c 	sub.w	r1, r1, ip
 801cdee:	80e1      	strh	r1, [r4, #6]
 801cdf0:	4628      	mov	r0, r5
 801cdf2:	9904      	ldr	r1, [sp, #16]
 801cdf4:	3c08      	subs	r4, #8
 801cdf6:	4605      	mov	r5, r0
 801cdf8:	3901      	subs	r1, #1
 801cdfa:	9104      	str	r1, [sp, #16]
 801cdfc:	e7d3      	b.n	801cda6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801cdfe:	4461      	add	r1, ip
 801ce00:	b209      	sxth	r1, r1
 801ce02:	4549      	cmp	r1, r9
 801ce04:	dcf5      	bgt.n	801cdf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ce06:	9905      	ldr	r1, [sp, #20]
 801ce08:	eba1 0c0c 	sub.w	ip, r1, ip
 801ce0c:	f8a4 c006 	strh.w	ip, [r4, #6]
 801ce10:	e7ee      	b.n	801cdf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ce12:	428f      	cmp	r7, r1
 801ce14:	dced      	bgt.n	801cdf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ce16:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801ce1a:	4461      	add	r1, ip
 801ce1c:	b209      	sxth	r1, r1
 801ce1e:	4589      	cmp	r9, r1
 801ce20:	dbe7      	blt.n	801cdf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ce22:	4576      	cmp	r6, lr
 801ce24:	fa1f fc8e 	uxth.w	ip, lr
 801ce28:	88a1      	ldrh	r1, [r4, #4]
 801ce2a:	dc07      	bgt.n	801ce3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801ce2c:	eba2 0c0c 	sub.w	ip, r2, ip
 801ce30:	f8a4 8000 	strh.w	r8, [r4]
 801ce34:	eba1 010c 	sub.w	r1, r1, ip
 801ce38:	80a1      	strh	r1, [r4, #4]
 801ce3a:	e7d9      	b.n	801cdf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ce3c:	4461      	add	r1, ip
 801ce3e:	b209      	sxth	r1, r1
 801ce40:	4588      	cmp	r8, r1
 801ce42:	dbd6      	blt.n	801cdf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ce44:	eba3 0c0c 	sub.w	ip, r3, ip
 801ce48:	f8a4 c004 	strh.w	ip, [r4, #4]
 801ce4c:	e7d0      	b.n	801cdf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ce4e:	bf00      	nop
 801ce50:	24026282 	.word	0x24026282
 801ce54:	24026280 	.word	0x24026280
 801ce58:	2d00      	cmp	r5, #0
 801ce5a:	f000 816d 	beq.w	801d138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801ce5e:	9b06      	ldr	r3, [sp, #24]
 801ce60:	445b      	add	r3, fp
 801ce62:	461c      	mov	r4, r3
 801ce64:	9b02      	ldr	r3, [sp, #8]
 801ce66:	3301      	adds	r3, #1
 801ce68:	f000 8166 	beq.w	801d138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801ce6c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801ce70:	9803      	ldr	r0, [sp, #12]
 801ce72:	4629      	mov	r1, r5
 801ce74:	f7ff fd3a 	bl	801c8ec <_ZNK8touchgfx4Rect8includesERKS0_>
 801ce78:	b120      	cbz	r0, 801ce84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801ce7a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ce7e:	9801      	ldr	r0, [sp, #4]
 801ce80:	f7ff feb0 	bl	801cbe4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ce84:	9903      	ldr	r1, [sp, #12]
 801ce86:	4628      	mov	r0, r5
 801ce88:	f7ff fcbe 	bl	801c808 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ce8c:	2800      	cmp	r0, #0
 801ce8e:	f000 809c 	beq.w	801cfca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801ce92:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801ce96:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801ce9a:	fa1f f189 	uxth.w	r1, r9
 801ce9e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801cea2:	9309      	str	r3, [sp, #36]	; 0x24
 801cea4:	eb01 0c03 	add.w	ip, r1, r3
 801cea8:	b283      	uxth	r3, r0
 801ceaa:	4548      	cmp	r0, r9
 801ceac:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801ceb0:	fa1f fa8c 	uxth.w	sl, ip
 801ceb4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801ceb8:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801cebc:	eb03 050c 	add.w	r5, r3, ip
 801cec0:	b2ad      	uxth	r5, r5
 801cec2:	9505      	str	r5, [sp, #20]
 801cec4:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801cec8:	9504      	str	r5, [sp, #16]
 801ceca:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801cece:	f340 8099 	ble.w	801d004 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801ced2:	1a5b      	subs	r3, r3, r1
 801ced4:	4596      	cmp	lr, r2
 801ced6:	fa0f f08a 	sxth.w	r0, sl
 801ceda:	b29b      	uxth	r3, r3
 801cedc:	b21e      	sxth	r6, r3
 801cede:	dd2e      	ble.n	801cf3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801cee0:	9f02      	ldr	r7, [sp, #8]
 801cee2:	fa1f fe8e 	uxth.w	lr, lr
 801cee6:	b292      	uxth	r2, r2
 801cee8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801ceec:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801cef0:	9f04      	ldr	r7, [sp, #16]
 801cef2:	ebae 0102 	sub.w	r1, lr, r2
 801cef6:	44a6      	add	lr, r4
 801cef8:	1a3f      	subs	r7, r7, r0
 801cefa:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801cefe:	b289      	uxth	r1, r1
 801cf00:	4402      	add	r2, r0
 801cf02:	fa0f fe8e 	sxth.w	lr, lr
 801cf06:	b20d      	sxth	r5, r1
 801cf08:	b212      	sxth	r2, r2
 801cf0a:	436f      	muls	r7, r5
 801cf0c:	ebae 0202 	sub.w	r2, lr, r2
 801cf10:	4372      	muls	r2, r6
 801cf12:	4297      	cmp	r7, r2
 801cf14:	db09      	blt.n	801cf2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801cf16:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801cf1a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801cf1e:	449c      	add	ip, r3
 801cf20:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801cf24:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801cf28:	e686      	b.n	801cc38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cf2a:	4421      	add	r1, r4
 801cf2c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801cf30:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801cf34:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801cf38:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801cf3c:	e67c      	b.n	801cc38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cf3e:	9f04      	ldr	r7, [sp, #16]
 801cf40:	42b8      	cmp	r0, r7
 801cf42:	da27      	bge.n	801cf94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801cf44:	9902      	ldr	r1, [sp, #8]
 801cf46:	1a3f      	subs	r7, r7, r0
 801cf48:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801cf4c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801cf50:	eb05 010e 	add.w	r1, r5, lr
 801cf54:	fa1f f881 	uxth.w	r8, r1
 801cf58:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801cf5c:	4411      	add	r1, r2
 801cf5e:	fa0f f988 	sxth.w	r9, r8
 801cf62:	eba2 020e 	sub.w	r2, r2, lr
 801cf66:	eba1 0108 	sub.w	r1, r1, r8
 801cf6a:	4372      	muls	r2, r6
 801cf6c:	b289      	uxth	r1, r1
 801cf6e:	fa0f f881 	sxth.w	r8, r1
 801cf72:	fb08 f707 	mul.w	r7, r8, r7
 801cf76:	42ba      	cmp	r2, r7
 801cf78:	dc06      	bgt.n	801cf88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801cf7a:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801cf7e:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801cf82:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801cf86:	e7ca      	b.n	801cf1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801cf88:	4429      	add	r1, r5
 801cf8a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801cf8e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801cf92:	e651      	b.n	801cc38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cf94:	9805      	ldr	r0, [sp, #20]
 801cf96:	2d06      	cmp	r5, #6
 801cf98:	ebaa 0000 	sub.w	r0, sl, r0
 801cf9c:	b280      	uxth	r0, r0
 801cf9e:	fa0f fe80 	sxth.w	lr, r0
 801cfa2:	d817      	bhi.n	801cfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801cfa4:	9b04      	ldr	r3, [sp, #16]
 801cfa6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801cfaa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801cfae:	1c6b      	adds	r3, r5, #1
 801cfb0:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801cfb4:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801cfb8:	9b01      	ldr	r3, [sp, #4]
 801cfba:	9801      	ldr	r0, [sp, #4]
 801cfbc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cfc0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801cfc4:	805a      	strh	r2, [r3, #2]
 801cfc6:	809e      	strh	r6, [r3, #4]
 801cfc8:	80d9      	strh	r1, [r3, #6]
 801cfca:	9b02      	ldr	r3, [sp, #8]
 801cfcc:	3c08      	subs	r4, #8
 801cfce:	3b01      	subs	r3, #1
 801cfd0:	9302      	str	r3, [sp, #8]
 801cfd2:	e747      	b.n	801ce64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801cfd4:	9a02      	ldr	r2, [sp, #8]
 801cfd6:	45b6      	cmp	lr, r6
 801cfd8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801cfdc:	db0d      	blt.n	801cffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801cfde:	449c      	add	ip, r3
 801cfe0:	445a      	add	r2, fp
 801cfe2:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801cfe6:	fa1f fc8c 	uxth.w	ip, ip
 801cfea:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801cfee:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801cff2:	448c      	add	ip, r1
 801cff4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801cff8:	e61e      	b.n	801cc38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cffa:	445a      	add	r2, fp
 801cffc:	4484      	add	ip, r0
 801cffe:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801d002:	e78f      	b.n	801cf24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d004:	fa1f f18e 	uxth.w	r1, lr
 801d008:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801d00c:	b293      	uxth	r3, r2
 801d00e:	4596      	cmp	lr, r2
 801d010:	eb01 0806 	add.w	r8, r1, r6
 801d014:	9306      	str	r3, [sp, #24]
 801d016:	fa1f f888 	uxth.w	r8, r8
 801d01a:	9f06      	ldr	r7, [sp, #24]
 801d01c:	fa0f f388 	sxth.w	r3, r8
 801d020:	9307      	str	r3, [sp, #28]
 801d022:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801d026:	443b      	add	r3, r7
 801d028:	b29b      	uxth	r3, r3
 801d02a:	9308      	str	r3, [sp, #32]
 801d02c:	da24      	bge.n	801d078 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801d02e:	9905      	ldr	r1, [sp, #20]
 801d030:	eba3 0308 	sub.w	r3, r3, r8
 801d034:	eba2 020e 	sub.w	r2, r2, lr
 801d038:	eba9 0000 	sub.w	r0, r9, r0
 801d03c:	ebaa 0401 	sub.w	r4, sl, r1
 801d040:	b29b      	uxth	r3, r3
 801d042:	b2a4      	uxth	r4, r4
 801d044:	b219      	sxth	r1, r3
 801d046:	b225      	sxth	r5, r4
 801d048:	4348      	muls	r0, r1
 801d04a:	436a      	muls	r2, r5
 801d04c:	4282      	cmp	r2, r0
 801d04e:	9a02      	ldr	r2, [sp, #8]
 801d050:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801d054:	445a      	add	r2, fp
 801d056:	dc06      	bgt.n	801d066 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801d058:	9b07      	ldr	r3, [sp, #28]
 801d05a:	44a4      	add	ip, r4
 801d05c:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801d060:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801d064:	e75e      	b.n	801cf24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d066:	9904      	ldr	r1, [sp, #16]
 801d068:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801d06c:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801d070:	4433      	add	r3, r6
 801d072:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d076:	e5df      	b.n	801cc38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d078:	9f06      	ldr	r7, [sp, #24]
 801d07a:	9b04      	ldr	r3, [sp, #16]
 801d07c:	1bc9      	subs	r1, r1, r7
 801d07e:	fa0f f78a 	sxth.w	r7, sl
 801d082:	b289      	uxth	r1, r1
 801d084:	429f      	cmp	r7, r3
 801d086:	fa0f fe81 	sxth.w	lr, r1
 801d08a:	dd23      	ble.n	801d0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801d08c:	9a05      	ldr	r2, [sp, #20]
 801d08e:	eba9 0000 	sub.w	r0, r9, r0
 801d092:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d096:	ebaa 0202 	sub.w	r2, sl, r2
 801d09a:	9d07      	ldr	r5, [sp, #28]
 801d09c:	fb0e f000 	mul.w	r0, lr, r0
 801d0a0:	b292      	uxth	r2, r2
 801d0a2:	eba5 0a03 	sub.w	sl, r5, r3
 801d0a6:	9b02      	ldr	r3, [sp, #8]
 801d0a8:	b214      	sxth	r4, r2
 801d0aa:	00db      	lsls	r3, r3, #3
 801d0ac:	fb04 fa0a 	mul.w	sl, r4, sl
 801d0b0:	445b      	add	r3, fp
 801d0b2:	4550      	cmp	r0, sl
 801d0b4:	db03      	blt.n	801d0be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801d0b6:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801d0ba:	4494      	add	ip, r2
 801d0bc:	e732      	b.n	801cf24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d0be:	9a04      	ldr	r2, [sp, #16]
 801d0c0:	4431      	add	r1, r6
 801d0c2:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801d0c6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801d0ca:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801d0ce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d0d2:	e75c      	b.n	801cf8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801d0d4:	9b08      	ldr	r3, [sp, #32]
 801d0d6:	2d06      	cmp	r5, #6
 801d0d8:	eba3 0308 	sub.w	r3, r3, r8
 801d0dc:	b29b      	uxth	r3, r3
 801d0de:	b218      	sxth	r0, r3
 801d0e0:	d813      	bhi.n	801d10a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801d0e2:	9b07      	ldr	r3, [sp, #28]
 801d0e4:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801d0e8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801d0ec:	1c6b      	adds	r3, r5, #1
 801d0ee:	9901      	ldr	r1, [sp, #4]
 801d0f0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801d0f4:	9b01      	ldr	r3, [sp, #4]
 801d0f6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801d0fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d0fe:	805a      	strh	r2, [r3, #2]
 801d100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d102:	f8a3 e006 	strh.w	lr, [r3, #6]
 801d106:	809a      	strh	r2, [r3, #4]
 801d108:	e75f      	b.n	801cfca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801d10a:	9c02      	ldr	r4, [sp, #8]
 801d10c:	4570      	cmp	r0, lr
 801d10e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801d112:	db0d      	blt.n	801d130 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801d114:	4431      	add	r1, r6
 801d116:	9b06      	ldr	r3, [sp, #24]
 801d118:	445c      	add	r4, fp
 801d11a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801d11e:	b289      	uxth	r1, r1
 801d120:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801d124:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d128:	4419      	add	r1, r3
 801d12a:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801d12e:	e583      	b.n	801cc38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d130:	445c      	add	r4, fp
 801d132:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801d136:	e79b      	b.n	801d070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801d138:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801d13c:	2e07      	cmp	r6, #7
 801d13e:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801d142:	d812      	bhi.n	801d16a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 801d144:	1c75      	adds	r5, r6, #1
 801d146:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801d14a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801d14e:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801d152:	9d01      	ldr	r5, [sp, #4]
 801d154:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801d158:	442c      	add	r4, r5
 801d15a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801d15e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801d162:	8061      	strh	r1, [r4, #2]
 801d164:	80a2      	strh	r2, [r4, #4]
 801d166:	80e3      	strh	r3, [r4, #6]
 801d168:	e5d0      	b.n	801cd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d16a:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801d16e:	3e01      	subs	r6, #1
 801d170:	445c      	add	r4, fp
 801d172:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801d176:	f04f 37ff 	mov.w	r7, #4294967295
 801d17a:	2500      	movs	r5, #0
 801d17c:	9305      	str	r3, [sp, #20]
 801d17e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801d182:	1e72      	subs	r2, r6, #1
 801d184:	9302      	str	r3, [sp, #8]
 801d186:	4691      	mov	r9, r2
 801d188:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801d18c:	9304      	str	r3, [sp, #16]
 801d18e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801d192:	f1b9 3fff 	cmp.w	r9, #4294967295
 801d196:	6818      	ldr	r0, [r3, #0]
 801d198:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801d19c:	9207      	str	r2, [sp, #28]
 801d19e:	bf16      	itet	ne
 801d1a0:	9905      	ldrne	r1, [sp, #20]
 801d1a2:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801d1a6:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801d1aa:	9306      	str	r3, [sp, #24]
 801d1ac:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801d1b0:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801d1b4:	fb18 f801 	smulbb	r8, r8, r1
 801d1b8:	6859      	ldr	r1, [r3, #4]
 801d1ba:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d1be:	4671      	mov	r1, lr
 801d1c0:	a80c      	add	r0, sp, #48	; 0x30
 801d1c2:	f7ff fbb9 	bl	801c938 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d1c6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801d1ca:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801d1ce:	f04f 0c08 	mov.w	ip, #8
 801d1d2:	9b04      	ldr	r3, [sp, #16]
 801d1d4:	9a02      	ldr	r2, [sp, #8]
 801d1d6:	fb10 f001 	smulbb	r0, r0, r1
 801d1da:	fb02 8803 	mla	r8, r2, r3, r8
 801d1de:	eba0 0108 	sub.w	r1, r0, r8
 801d1e2:	fb90 f0fc 	sdiv	r0, r0, ip
 801d1e6:	4288      	cmp	r0, r1
 801d1e8:	dc20      	bgt.n	801d22c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801d1ea:	4551      	cmp	r1, sl
 801d1ec:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801d1f0:	da03      	bge.n	801d1fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801d1f2:	b1d9      	cbz	r1, 801d22c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801d1f4:	468a      	mov	sl, r1
 801d1f6:	464f      	mov	r7, r9
 801d1f8:	4635      	mov	r5, r6
 801d1fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801d1fe:	f119 0f02 	cmn.w	r9, #2
 801d202:	d1c6      	bne.n	801d192 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801d204:	4616      	mov	r6, r2
 801d206:	3201      	adds	r2, #1
 801d208:	f1a4 0408 	sub.w	r4, r4, #8
 801d20c:	d1b7      	bne.n	801d17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801d20e:	9b01      	ldr	r3, [sp, #4]
 801d210:	b2ac      	uxth	r4, r5
 801d212:	00ed      	lsls	r5, r5, #3
 801d214:	1958      	adds	r0, r3, r5
 801d216:	1c7b      	adds	r3, r7, #1
 801d218:	d10b      	bne.n	801d232 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801d21a:	4601      	mov	r1, r0
 801d21c:	9803      	ldr	r0, [sp, #12]
 801d21e:	f7ff fb8b 	bl	801c938 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d222:	4621      	mov	r1, r4
 801d224:	9801      	ldr	r0, [sp, #4]
 801d226:	f7ff fcdd 	bl	801cbe4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d22a:	e505      	b.n	801cc38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d22c:	464f      	mov	r7, r9
 801d22e:	4635      	mov	r5, r6
 801d230:	e7ed      	b.n	801d20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801d232:	9b01      	ldr	r3, [sp, #4]
 801d234:	00ff      	lsls	r7, r7, #3
 801d236:	445d      	add	r5, fp
 801d238:	19d9      	adds	r1, r3, r7
 801d23a:	445f      	add	r7, fp
 801d23c:	f7ff fb7c 	bl	801c938 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d240:	9b03      	ldr	r3, [sp, #12]
 801d242:	cb03      	ldmia	r3!, {r0, r1}
 801d244:	9b03      	ldr	r3, [sp, #12]
 801d246:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801d24a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801d24e:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801d252:	6869      	ldr	r1, [r5, #4]
 801d254:	c303      	stmia	r3!, {r0, r1}
 801d256:	e7e4      	b.n	801d222 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0801d258 <_ZN8touchgfx11Application10invalidateEv>:
 801d258:	4b09      	ldr	r3, [pc, #36]	; (801d280 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801d25a:	b082      	sub	sp, #8
 801d25c:	2100      	movs	r1, #0
 801d25e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d262:	4b08      	ldr	r3, [pc, #32]	; (801d284 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801d264:	9100      	str	r1, [sp, #0]
 801d266:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d26a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d26e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d272:	ab02      	add	r3, sp, #8
 801d274:	e913 0006 	ldmdb	r3, {r1, r2}
 801d278:	b002      	add	sp, #8
 801d27a:	f7ff bcc7 	b.w	801cc0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d27e:	bf00      	nop
 801d280:	24026280 	.word	0x24026280
 801d284:	24026282 	.word	0x24026282

0801d288 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d28c:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801d290:	b09b      	sub	sp, #108	; 0x6c
 801d292:	4604      	mov	r4, r0
 801d294:	4630      	mov	r0, r6
 801d296:	f7fc fe32 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801d29a:	4605      	mov	r5, r0
 801d29c:	b940      	cbnz	r0, 801d2b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801d29e:	4620      	mov	r0, r4
 801d2a0:	e896 0006 	ldmia.w	r6, {r1, r2}
 801d2a4:	f7ff fcb2 	bl	801cc0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d2a8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801d2ac:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801d2b0:	4bc8      	ldr	r3, [pc, #800]	; (801d5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d03e      	beq.n	801d336 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801d2b8:	4dc7      	ldr	r5, [pc, #796]	; (801d5d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801d2ba:	4628      	mov	r0, r5
 801d2bc:	f7fc fe1f 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801d2c0:	4606      	mov	r6, r0
 801d2c2:	2800      	cmp	r0, #0
 801d2c4:	d137      	bne.n	801d336 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801d2c6:	4628      	mov	r0, r5
 801d2c8:	f7ff f9d0 	bl	801c66c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d2cc:	6829      	ldr	r1, [r5, #0]
 801d2ce:	686a      	ldr	r2, [r5, #4]
 801d2d0:	4620      	mov	r0, r4
 801d2d2:	f7ff fc9b 	bl	801cc0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d2d6:	802e      	strh	r6, [r5, #0]
 801d2d8:	806e      	strh	r6, [r5, #2]
 801d2da:	80ae      	strh	r6, [r5, #4]
 801d2dc:	80ee      	strh	r6, [r5, #6]
 801d2de:	ae09      	add	r6, sp, #36	; 0x24
 801d2e0:	4630      	mov	r0, r6
 801d2e2:	f7ff fc23 	bl	801cb2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d2e6:	4abd      	ldr	r2, [pc, #756]	; (801d5dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801d2e8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801d2ec:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801d2f0:	8815      	ldrh	r5, [r2, #0]
 801d2f2:	9202      	str	r2, [sp, #8]
 801d2f4:	462b      	mov	r3, r5
 801d2f6:	429f      	cmp	r7, r3
 801d2f8:	d924      	bls.n	801d344 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801d2fa:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801d2fe:	2907      	cmp	r1, #7
 801d300:	d816      	bhi.n	801d330 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801d302:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801d306:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801d30a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801d30e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801d312:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801d316:	1c4a      	adds	r2, r1, #1
 801d318:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801d31c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801d320:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801d324:	f8a2 9002 	strh.w	r9, [r2, #2]
 801d328:	f8a2 e004 	strh.w	lr, [r2, #4]
 801d32c:	f8a2 c006 	strh.w	ip, [r2, #6]
 801d330:	3301      	adds	r3, #1
 801d332:	b29b      	uxth	r3, r3
 801d334:	e7df      	b.n	801d2f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801d336:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	d1cf      	bne.n	801d2de <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801d33e:	b01b      	add	sp, #108	; 0x6c
 801d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d344:	462f      	mov	r7, r5
 801d346:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801d34a:	42bb      	cmp	r3, r7
 801d34c:	d90b      	bls.n	801d366 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801d34e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801d352:	3701      	adds	r7, #1
 801d354:	4620      	mov	r0, r4
 801d356:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801d35a:	b2bf      	uxth	r7, r7
 801d35c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801d360:	f7ff fc54 	bl	801cc0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d364:	e7ef      	b.n	801d346 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801d366:	4a9e      	ldr	r2, [pc, #632]	; (801d5e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801d368:	6813      	ldr	r3, [r2, #0]
 801d36a:	4690      	mov	r8, r2
 801d36c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801d370:	2b01      	cmp	r3, #1
 801d372:	f040 80e4 	bne.w	801d53e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801d376:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801d37a:	4629      	mov	r1, r5
 801d37c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801d380:	2500      	movs	r5, #0
 801d382:	33ae      	adds	r3, #174	; 0xae
 801d384:	428f      	cmp	r7, r1
 801d386:	f103 0308 	add.w	r3, r3, #8
 801d38a:	dd0a      	ble.n	801d3a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801d38c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801d390:	3101      	adds	r1, #1
 801d392:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801d396:	4402      	add	r2, r0
 801d398:	b212      	sxth	r2, r2
 801d39a:	4295      	cmp	r5, r2
 801d39c:	bfb8      	it	lt
 801d39e:	4615      	movlt	r5, r2
 801d3a0:	e7f0      	b.n	801d384 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801d3a2:	4b90      	ldr	r3, [pc, #576]	; (801d5e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801d3a4:	f8df b238 	ldr.w	fp, [pc, #568]	; 801d5e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801d3a8:	881b      	ldrh	r3, [r3, #0]
 801d3aa:	46d8      	mov	r8, fp
 801d3ac:	2b0f      	cmp	r3, #15
 801d3ae:	bf8c      	ite	hi
 801d3b0:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801d3b4:	f04f 0a01 	movls.w	sl, #1
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801d3be:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801d3c2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801d3c6:	4438      	add	r0, r7
 801d3c8:	b207      	sxth	r7, r0
 801d3ca:	f8db 0000 	ldr.w	r0, [fp]
 801d3ce:	42bd      	cmp	r5, r7
 801d3d0:	6803      	ldr	r3, [r0, #0]
 801d3d2:	f340 8084 	ble.w	801d4de <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801d3d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d3da:	4798      	blx	r3
 801d3dc:	eb07 030a 	add.w	r3, r7, sl
 801d3e0:	4298      	cmp	r0, r3
 801d3e2:	da07      	bge.n	801d3f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801d3e4:	4285      	cmp	r5, r0
 801d3e6:	dd05      	ble.n	801d3f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801d3e8:	4287      	cmp	r7, r0
 801d3ea:	dd6d      	ble.n	801d4c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801d3ec:	2f00      	cmp	r7, #0
 801d3ee:	dd6b      	ble.n	801d4c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801d3f0:	4628      	mov	r0, r5
 801d3f2:	e004      	b.n	801d3fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801d3f4:	4287      	cmp	r7, r0
 801d3f6:	dcfb      	bgt.n	801d3f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801d3f8:	42a8      	cmp	r0, r5
 801d3fa:	bfa8      	it	ge
 801d3fc:	4628      	movge	r0, r5
 801d3fe:	4b7a      	ldr	r3, [pc, #488]	; (801d5e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801d400:	1bc0      	subs	r0, r0, r7
 801d402:	2200      	movs	r2, #0
 801d404:	f8ad 7016 	strh.w	r7, [sp, #22]
 801d408:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d40c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d410:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d414:	9b02      	ldr	r3, [sp, #8]
 801d416:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d41a:	881f      	ldrh	r7, [r3, #0]
 801d41c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801d420:	42bb      	cmp	r3, r7
 801d422:	d9cc      	bls.n	801d3be <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801d424:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801d428:	ab07      	add	r3, sp, #28
 801d42a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801d42e:	6851      	ldr	r1, [r2, #4]
 801d430:	c303      	stmia	r3!, {r0, r1}
 801d432:	a905      	add	r1, sp, #20
 801d434:	a807      	add	r0, sp, #28
 801d436:	f7ff f9e7 	bl	801c808 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d43a:	2800      	cmp	r0, #0
 801d43c:	d04c      	beq.n	801d4d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801d43e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801d442:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801d446:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801d44a:	4686      	mov	lr, r0
 801d44c:	4290      	cmp	r0, r2
 801d44e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801d452:	4448      	add	r0, r9
 801d454:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801d458:	bfb8      	it	lt
 801d45a:	4696      	movlt	lr, r2
 801d45c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d460:	444a      	add	r2, r9
 801d462:	b280      	uxth	r0, r0
 801d464:	4299      	cmp	r1, r3
 801d466:	468c      	mov	ip, r1
 801d468:	b292      	uxth	r2, r2
 801d46a:	9303      	str	r3, [sp, #12]
 801d46c:	bfb8      	it	lt
 801d46e:	469c      	movlt	ip, r3
 801d470:	b203      	sxth	r3, r0
 801d472:	fa0f f982 	sxth.w	r9, r2
 801d476:	f8ad e01c 	strh.w	lr, [sp, #28]
 801d47a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801d47e:	454b      	cmp	r3, r9
 801d480:	bfb8      	it	lt
 801d482:	4602      	movlt	r2, r0
 801d484:	9b03      	ldr	r3, [sp, #12]
 801d486:	eba2 020e 	sub.w	r2, r2, lr
 801d48a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d48e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d492:	4411      	add	r1, r2
 801d494:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d498:	4413      	add	r3, r2
 801d49a:	b289      	uxth	r1, r1
 801d49c:	b29b      	uxth	r3, r3
 801d49e:	b208      	sxth	r0, r1
 801d4a0:	b21a      	sxth	r2, r3
 801d4a2:	4290      	cmp	r0, r2
 801d4a4:	bfb8      	it	lt
 801d4a6:	460b      	movlt	r3, r1
 801d4a8:	eba3 030c 	sub.w	r3, r3, ip
 801d4ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d4b0:	a807      	add	r0, sp, #28
 801d4b2:	f7fc fd24 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801d4b6:	b920      	cbnz	r0, 801d4c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801d4b8:	6823      	ldr	r3, [r4, #0]
 801d4ba:	a907      	add	r1, sp, #28
 801d4bc:	4620      	mov	r0, r4
 801d4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4c0:	4798      	blx	r3
 801d4c2:	3701      	adds	r7, #1
 801d4c4:	b2bf      	uxth	r7, r7
 801d4c6:	e7a9      	b.n	801d41c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801d4c8:	f8d8 0000 	ldr.w	r0, [r8]
 801d4cc:	2101      	movs	r1, #1
 801d4ce:	6803      	ldr	r3, [r0, #0]
 801d4d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d4d4:	4798      	blx	r3
 801d4d6:	e772      	b.n	801d3be <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801d4d8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801d4dc:	e7e8      	b.n	801d4b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801d4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4e0:	4798      	blx	r3
 801d4e2:	4b42      	ldr	r3, [pc, #264]	; (801d5ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801d4e4:	781b      	ldrb	r3, [r3, #0]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	f43f af29 	beq.w	801d33e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801d4ec:	2300      	movs	r3, #0
 801d4ee:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801d4f2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801d4f6:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801d4fa:	9b02      	ldr	r3, [sp, #8]
 801d4fc:	881b      	ldrh	r3, [r3, #0]
 801d4fe:	429d      	cmp	r5, r3
 801d500:	f67f af1d 	bls.w	801d33e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801d504:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801d508:	2907      	cmp	r1, #7
 801d50a:	d815      	bhi.n	801d538 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801d50c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801d510:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801d514:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801d518:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801d51c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801d520:	1c4a      	adds	r2, r1, #1
 801d522:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801d526:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801d52a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801d52e:	f8a2 e002 	strh.w	lr, [r2, #2]
 801d532:	f8a2 c004 	strh.w	ip, [r2, #4]
 801d536:	80d7      	strh	r7, [r2, #6]
 801d538:	3301      	adds	r3, #1
 801d53a:	b29b      	uxth	r3, r3
 801d53c:	e7df      	b.n	801d4fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801d53e:	2b02      	cmp	r3, #2
 801d540:	f040 8135 	bne.w	801d7ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801d544:	4b2a      	ldr	r3, [pc, #168]	; (801d5f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801d546:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801d54a:	781b      	ldrb	r3, [r3, #0]
 801d54c:	2b01      	cmp	r3, #1
 801d54e:	f000 809c 	beq.w	801d68a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801d552:	9b02      	ldr	r3, [sp, #8]
 801d554:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801d558:	f8b3 b000 	ldrh.w	fp, [r3]
 801d55c:	f10b 0b01 	add.w	fp, fp, #1
 801d560:	fa1f fb8b 	uxth.w	fp, fp
 801d564:	2a00      	cmp	r2, #0
 801d566:	d0bc      	beq.n	801d4e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d568:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801d56c:	4659      	mov	r1, fp
 801d56e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801d572:	f04f 0800 	mov.w	r8, #0
 801d576:	441d      	add	r5, r3
 801d578:	b22d      	sxth	r5, r5
 801d57a:	b28b      	uxth	r3, r1
 801d57c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801d580:	429a      	cmp	r2, r3
 801d582:	f240 80c0 	bls.w	801d706 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801d586:	4427      	add	r7, r4
 801d588:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801d58c:	4608      	mov	r0, r1
 801d58e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801d592:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 801d596:	4563      	cmp	r3, ip
 801d598:	f340 80a2 	ble.w	801d6e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801d59c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 801d5a0:	4465      	add	r5, ip
 801d5a2:	b22d      	sxth	r5, r5
 801d5a4:	429d      	cmp	r5, r3
 801d5a6:	bfa8      	it	ge
 801d5a8:	461d      	movge	r5, r3
 801d5aa:	3101      	adds	r1, #1
 801d5ac:	4680      	mov	r8, r0
 801d5ae:	e7e4      	b.n	801d57a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801d5b0:	d10b      	bne.n	801d5ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801d5b2:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801d5b6:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801d5ba:	458c      	cmp	ip, r1
 801d5bc:	bfb4      	ite	lt
 801d5be:	469c      	movlt	ip, r3
 801d5c0:	46bc      	movge	ip, r7
 801d5c2:	4572      	cmp	r2, lr
 801d5c4:	bfb8      	it	lt
 801d5c6:	4672      	movlt	r2, lr
 801d5c8:	e087      	b.n	801d6da <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801d5ca:	428a      	cmp	r2, r1
 801d5cc:	46bc      	mov	ip, r7
 801d5ce:	bfb8      	it	lt
 801d5d0:	460a      	movlt	r2, r1
 801d5d2:	e082      	b.n	801d6da <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801d5d4:	240262c4 	.word	0x240262c4
 801d5d8:	240262d0 	.word	0x240262d0
 801d5dc:	24000068 	.word	0x24000068
 801d5e0:	2402628c 	.word	0x2402628c
 801d5e4:	24026282 	.word	0x24026282
 801d5e8:	24026280 	.word	0x24026280
 801d5ec:	2402628a 	.word	0x2402628a
 801d5f0:	24026284 	.word	0x24026284
 801d5f4:	1961      	adds	r1, r4, r5
 801d5f6:	ab07      	add	r3, sp, #28
 801d5f8:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801d5fc:	6849      	ldr	r1, [r1, #4]
 801d5fe:	c303      	stmia	r3!, {r0, r1}
 801d600:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d604:	a807      	add	r0, sp, #28
 801d606:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d60a:	2b13      	cmp	r3, #19
 801d60c:	440b      	add	r3, r1
 801d60e:	bfd8      	it	le
 801d610:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801d614:	1a9b      	subs	r3, r3, r2
 801d616:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d61a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d61e:	f7ff f83f 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d622:	a807      	add	r0, sp, #28
 801d624:	f7fc fc6b 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801d628:	bb78      	cbnz	r0, 801d68a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801d62a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801d62e:	4425      	add	r5, r4
 801d630:	f8d8 0000 	ldr.w	r0, [r8]
 801d634:	f1bc 0f14 	cmp.w	ip, #20
 801d638:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d63c:	f8d0 e000 	ldr.w	lr, [r0]
 801d640:	bfa8      	it	ge
 801d642:	f04f 0c14 	movge.w	ip, #20
 801d646:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801d64a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d64e:	fa1f fc8c 	uxth.w	ip, ip
 801d652:	f8cd c000 	str.w	ip, [sp]
 801d656:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801d65a:	47d0      	blx	sl
 801d65c:	4682      	mov	sl, r0
 801d65e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d662:	a807      	add	r0, sp, #28
 801d664:	f7ff f802 	bl	801c66c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d668:	6823      	ldr	r3, [r4, #0]
 801d66a:	4620      	mov	r0, r4
 801d66c:	a907      	add	r1, sp, #28
 801d66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d670:	4798      	blx	r3
 801d672:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801d676:	eba0 000a 	sub.w	r0, r0, sl
 801d67a:	b200      	sxth	r0, r0
 801d67c:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801d680:	b918      	cbnz	r0, 801d68a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801d682:	b2b9      	uxth	r1, r7
 801d684:	4648      	mov	r0, r9
 801d686:	f7ff faad 	bl	801cbe4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d68a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801d68e:	f1bb 0f00 	cmp.w	fp, #0
 801d692:	f43f af26 	beq.w	801d4e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d696:	9b02      	ldr	r3, [sp, #8]
 801d698:	2700      	movs	r7, #0
 801d69a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801d69e:	881b      	ldrh	r3, [r3, #0]
 801d6a0:	3301      	adds	r3, #1
 801d6a2:	b29b      	uxth	r3, r3
 801d6a4:	b299      	uxth	r1, r3
 801d6a6:	00fd      	lsls	r5, r7, #3
 801d6a8:	458b      	cmp	fp, r1
 801d6aa:	d9a3      	bls.n	801d5f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801d6ac:	4425      	add	r5, r4
 801d6ae:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801d6b2:	469c      	mov	ip, r3
 801d6b4:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801d6b8:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801d6bc:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801d6c0:	4408      	add	r0, r1
 801d6c2:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801d6c6:	4471      	add	r1, lr
 801d6c8:	b200      	sxth	r0, r0
 801d6ca:	b209      	sxth	r1, r1
 801d6cc:	4288      	cmp	r0, r1
 801d6ce:	f6bf af6f 	bge.w	801d5b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801d6d2:	4586      	cmp	lr, r0
 801d6d4:	4672      	mov	r2, lr
 801d6d6:	bfb8      	it	lt
 801d6d8:	4602      	movlt	r2, r0
 801d6da:	3301      	adds	r3, #1
 801d6dc:	4667      	mov	r7, ip
 801d6de:	e7e1      	b.n	801d6a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801d6e0:	d10c      	bne.n	801d6fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801d6e2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801d6e6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801d6ea:	4287      	cmp	r7, r0
 801d6ec:	bfb4      	ite	lt
 801d6ee:	4608      	movlt	r0, r1
 801d6f0:	4640      	movge	r0, r8
 801d6f2:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801d6f6:	443b      	add	r3, r7
 801d6f8:	b21b      	sxth	r3, r3
 801d6fa:	e753      	b.n	801d5a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801d6fc:	4565      	cmp	r5, ip
 801d6fe:	4640      	mov	r0, r8
 801d700:	bfa8      	it	ge
 801d702:	4665      	movge	r5, ip
 801d704:	e751      	b.n	801d5aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801d706:	eb09 0007 	add.w	r0, r9, r7
 801d70a:	4427      	add	r7, r4
 801d70c:	9203      	str	r2, [sp, #12]
 801d70e:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801d712:	f1ba 0f13 	cmp.w	sl, #19
 801d716:	bfde      	ittt	le
 801d718:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801d71c:	4455      	addle	r5, sl
 801d71e:	b22d      	sxthle	r5, r5
 801d720:	f7fc fbed 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801d724:	9a03      	ldr	r2, [sp, #12]
 801d726:	2800      	cmp	r0, #0
 801d728:	f47f af1c 	bne.w	801d564 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801d72c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801d730:	fa1f fa8a 	uxth.w	sl, sl
 801d734:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d738:	1aad      	subs	r5, r5, r2
 801d73a:	4829      	ldr	r0, [pc, #164]	; (801d7e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801d73c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801d740:	2d14      	cmp	r5, #20
 801d742:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801d746:	6800      	ldr	r0, [r0, #0]
 801d748:	bfa8      	it	ge
 801d74a:	2514      	movge	r5, #20
 801d74c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d750:	f8ad 201e 	strh.w	r2, [sp, #30]
 801d754:	b289      	uxth	r1, r1
 801d756:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d75a:	b2ad      	uxth	r5, r5
 801d75c:	f8d0 c000 	ldr.w	ip, [r0]
 801d760:	b292      	uxth	r2, r2
 801d762:	4555      	cmp	r5, sl
 801d764:	bf94      	ite	ls
 801d766:	9500      	strls	r5, [sp, #0]
 801d768:	f8cd a000 	strhi.w	sl, [sp]
 801d76c:	b29b      	uxth	r3, r3
 801d76e:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801d772:	47a8      	blx	r5
 801d774:	6823      	ldr	r3, [r4, #0]
 801d776:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d77a:	a907      	add	r1, sp, #28
 801d77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d77e:	4620      	mov	r0, r4
 801d780:	4798      	blx	r3
 801d782:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d786:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d78a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801d78e:	1a5b      	subs	r3, r3, r1
 801d790:	440a      	add	r2, r1
 801d792:	b21b      	sxth	r3, r3
 801d794:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801d798:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	f47f aed8 	bne.w	801d552 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801d7a2:	fa1f f188 	uxth.w	r1, r8
 801d7a6:	4648      	mov	r0, r9
 801d7a8:	f7ff fa1c 	bl	801cbe4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d7ac:	e6d1      	b.n	801d552 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801d7ae:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801d7b2:	42ab      	cmp	r3, r5
 801d7b4:	f67f ae95 	bls.w	801d4e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d7b8:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801d7bc:	ab07      	add	r3, sp, #28
 801d7be:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801d7c2:	6851      	ldr	r1, [r2, #4]
 801d7c4:	c303      	stmia	r3!, {r0, r1}
 801d7c6:	a807      	add	r0, sp, #28
 801d7c8:	f7fc fb99 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801d7cc:	b920      	cbnz	r0, 801d7d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801d7ce:	6823      	ldr	r3, [r4, #0]
 801d7d0:	a907      	add	r1, sp, #28
 801d7d2:	4620      	mov	r0, r4
 801d7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d7d6:	4798      	blx	r3
 801d7d8:	3501      	adds	r5, #1
 801d7da:	b2ad      	uxth	r5, r5
 801d7dc:	e7e7      	b.n	801d7ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801d7de:	bf00      	nop
 801d7e0:	2402628c 	.word	0x2402628c

0801d7e4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801d7e4:	4b03      	ldr	r3, [pc, #12]	; (801d7f4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801d7e6:	2200      	movs	r2, #0
 801d7e8:	801a      	strh	r2, [r3, #0]
 801d7ea:	805a      	strh	r2, [r3, #2]
 801d7ec:	809a      	strh	r2, [r3, #4]
 801d7ee:	80da      	strh	r2, [r3, #6]
 801d7f0:	4770      	bx	lr
 801d7f2:	bf00      	nop
 801d7f4:	240262d0 	.word	0x240262d0

0801d7f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801d7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7fc:	b09d      	sub	sp, #116	; 0x74
 801d7fe:	4606      	mov	r6, r0
 801d800:	4614      	mov	r4, r2
 801d802:	468a      	mov	sl, r1
 801d804:	a803      	add	r0, sp, #12
 801d806:	461d      	mov	r5, r3
 801d808:	f000 fd94 	bl	801e334 <_ZN8touchgfx12TextProviderC1Ev>
 801d80c:	6833      	ldr	r3, [r6, #0]
 801d80e:	4630      	mov	r0, r6
 801d810:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801d814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d816:	4798      	blx	r3
 801d818:	6833      	ldr	r3, [r6, #0]
 801d81a:	4607      	mov	r7, r0
 801d81c:	4630      	mov	r0, r6
 801d81e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d820:	4798      	blx	r3
 801d822:	462a      	mov	r2, r5
 801d824:	2500      	movs	r5, #0
 801d826:	4621      	mov	r1, r4
 801d828:	9000      	str	r0, [sp, #0]
 801d82a:	463b      	mov	r3, r7
 801d82c:	462c      	mov	r4, r5
 801d82e:	46a9      	mov	r9, r5
 801d830:	46a8      	mov	r8, r5
 801d832:	a803      	add	r0, sp, #12
 801d834:	f000 fdd1 	bl	801e3da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d838:	2300      	movs	r3, #0
 801d83a:	9302      	str	r3, [sp, #8]
 801d83c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d840:	429c      	cmp	r4, r3
 801d842:	d002      	beq.n	801d84a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801d844:	455c      	cmp	r4, fp
 801d846:	bf18      	it	ne
 801d848:	4625      	movne	r5, r4
 801d84a:	ab02      	add	r3, sp, #8
 801d84c:	4632      	mov	r2, r6
 801d84e:	4651      	mov	r1, sl
 801d850:	a803      	add	r0, sp, #12
 801d852:	f001 f8b7 	bl	801e9c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d856:	4604      	mov	r4, r0
 801d858:	b108      	cbz	r0, 801d85e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801d85a:	280a      	cmp	r0, #10
 801d85c:	d10a      	bne.n	801d874 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801d85e:	45c1      	cmp	r9, r8
 801d860:	bf38      	it	cc
 801d862:	46c1      	movcc	r9, r8
 801d864:	f04f 0800 	mov.w	r8, #0
 801d868:	2c00      	cmp	r4, #0
 801d86a:	d1e5      	bne.n	801d838 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d86c:	4648      	mov	r0, r9
 801d86e:	b01d      	add	sp, #116	; 0x74
 801d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d874:	9a02      	ldr	r2, [sp, #8]
 801d876:	2a00      	cmp	r2, #0
 801d878:	d0de      	beq.n	801d838 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d87a:	7b57      	ldrb	r7, [r2, #13]
 801d87c:	4629      	mov	r1, r5
 801d87e:	6833      	ldr	r3, [r6, #0]
 801d880:	007f      	lsls	r7, r7, #1
 801d882:	8894      	ldrh	r4, [r2, #4]
 801d884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d886:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801d88a:	7a97      	ldrb	r7, [r2, #10]
 801d88c:	4307      	orrs	r7, r0
 801d88e:	4630      	mov	r0, r6
 801d890:	4798      	blx	r3
 801d892:	4438      	add	r0, r7
 801d894:	4480      	add	r8, r0
 801d896:	fa1f f888 	uxth.w	r8, r8
 801d89a:	e7e5      	b.n	801d868 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801d89c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801d89c:	b508      	push	{r3, lr}
 801d89e:	6803      	ldr	r3, [r0, #0]
 801d8a0:	68db      	ldr	r3, [r3, #12]
 801d8a2:	4798      	blx	r3
 801d8a4:	b128      	cbz	r0, 801d8b2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801d8a6:	7b43      	ldrb	r3, [r0, #13]
 801d8a8:	7a80      	ldrb	r0, [r0, #10]
 801d8aa:	005b      	lsls	r3, r3, #1
 801d8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d8b0:	4318      	orrs	r0, r3
 801d8b2:	bd08      	pop	{r3, pc}

0801d8b4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801d8b4:	b40e      	push	{r1, r2, r3}
 801d8b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8b8:	b09e      	sub	sp, #120	; 0x78
 801d8ba:	4605      	mov	r5, r0
 801d8bc:	ab23      	add	r3, sp, #140	; 0x8c
 801d8be:	a805      	add	r0, sp, #20
 801d8c0:	f853 4b04 	ldr.w	r4, [r3], #4
 801d8c4:	9303      	str	r3, [sp, #12]
 801d8c6:	f000 fd35 	bl	801e334 <_ZN8touchgfx12TextProviderC1Ev>
 801d8ca:	682b      	ldr	r3, [r5, #0]
 801d8cc:	4628      	mov	r0, r5
 801d8ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d8d0:	4798      	blx	r3
 801d8d2:	682b      	ldr	r3, [r5, #0]
 801d8d4:	4606      	mov	r6, r0
 801d8d6:	4628      	mov	r0, r5
 801d8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d8da:	4798      	blx	r3
 801d8dc:	4633      	mov	r3, r6
 801d8de:	4621      	mov	r1, r4
 801d8e0:	ae1e      	add	r6, sp, #120	; 0x78
 801d8e2:	2400      	movs	r4, #0
 801d8e4:	9000      	str	r0, [sp, #0]
 801d8e6:	9a03      	ldr	r2, [sp, #12]
 801d8e8:	a805      	add	r0, sp, #20
 801d8ea:	f000 fd76 	bl	801e3da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d8ee:	f846 4d68 	str.w	r4, [r6, #-104]!
 801d8f2:	462a      	mov	r2, r5
 801d8f4:	4633      	mov	r3, r6
 801d8f6:	4621      	mov	r1, r4
 801d8f8:	a805      	add	r0, sp, #20
 801d8fa:	f001 f863 	bl	801e9c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d8fe:	b300      	cbz	r0, 801d942 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801d900:	280a      	cmp	r0, #10
 801d902:	d01a      	beq.n	801d93a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801d904:	9f04      	ldr	r7, [sp, #16]
 801d906:	b1c7      	cbz	r7, 801d93a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801d908:	7b78      	ldrb	r0, [r7, #13]
 801d90a:	7a3b      	ldrb	r3, [r7, #8]
 801d90c:	00c1      	lsls	r1, r0, #3
 801d90e:	88ea      	ldrh	r2, [r5, #6]
 801d910:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d914:	4319      	orrs	r1, r3
 801d916:	0643      	lsls	r3, r0, #25
 801d918:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801d91c:	bf48      	it	mi
 801d91e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801d922:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d926:	bf48      	it	mi
 801d928:	b219      	sxthmi	r1, r3
 801d92a:	79fb      	ldrb	r3, [r7, #7]
 801d92c:	4303      	orrs	r3, r0
 801d92e:	4413      	add	r3, r2
 801d930:	1a5b      	subs	r3, r3, r1
 801d932:	b21b      	sxth	r3, r3
 801d934:	429c      	cmp	r4, r3
 801d936:	bfb8      	it	lt
 801d938:	461c      	movlt	r4, r3
 801d93a:	4633      	mov	r3, r6
 801d93c:	462a      	mov	r2, r5
 801d93e:	2100      	movs	r1, #0
 801d940:	e7da      	b.n	801d8f8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801d942:	b2a0      	uxth	r0, r4
 801d944:	b01e      	add	sp, #120	; 0x78
 801d946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d94a:	b003      	add	sp, #12
 801d94c:	4770      	bx	lr

0801d94e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801d94e:	7a43      	ldrb	r3, [r0, #9]
 801d950:	8880      	ldrh	r0, [r0, #4]
 801d952:	4418      	add	r0, r3
 801d954:	b280      	uxth	r0, r0
 801d956:	4770      	bx	lr

0801d958 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801d958:	6803      	ldr	r3, [r0, #0]
 801d95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d95c:	4718      	bx	r3

0801d95e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801d95e:	b40e      	push	{r1, r2, r3}
 801d960:	b570      	push	{r4, r5, r6, lr}
 801d962:	b09d      	sub	sp, #116	; 0x74
 801d964:	4604      	mov	r4, r0
 801d966:	ab21      	add	r3, sp, #132	; 0x84
 801d968:	a803      	add	r0, sp, #12
 801d96a:	f853 5b04 	ldr.w	r5, [r3], #4
 801d96e:	9302      	str	r3, [sp, #8]
 801d970:	f000 fce0 	bl	801e334 <_ZN8touchgfx12TextProviderC1Ev>
 801d974:	6823      	ldr	r3, [r4, #0]
 801d976:	4620      	mov	r0, r4
 801d978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d97a:	4798      	blx	r3
 801d97c:	6823      	ldr	r3, [r4, #0]
 801d97e:	4606      	mov	r6, r0
 801d980:	4620      	mov	r0, r4
 801d982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d984:	2401      	movs	r4, #1
 801d986:	4798      	blx	r3
 801d988:	4633      	mov	r3, r6
 801d98a:	9000      	str	r0, [sp, #0]
 801d98c:	4629      	mov	r1, r5
 801d98e:	9a02      	ldr	r2, [sp, #8]
 801d990:	a803      	add	r0, sp, #12
 801d992:	f000 fd22 	bl	801e3da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d996:	a803      	add	r0, sp, #12
 801d998:	f001 f894 	bl	801eac4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d99c:	b2a3      	uxth	r3, r4
 801d99e:	b138      	cbz	r0, 801d9b0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801d9a0:	280a      	cmp	r0, #10
 801d9a2:	a803      	add	r0, sp, #12
 801d9a4:	bf04      	itt	eq
 801d9a6:	3301      	addeq	r3, #1
 801d9a8:	b21c      	sxtheq	r4, r3
 801d9aa:	f001 f88b 	bl	801eac4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d9ae:	e7f5      	b.n	801d99c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801d9b0:	4618      	mov	r0, r3
 801d9b2:	b01d      	add	sp, #116	; 0x74
 801d9b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d9b8:	b003      	add	sp, #12
 801d9ba:	4770      	bx	lr

0801d9bc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801d9bc:	b40e      	push	{r1, r2, r3}
 801d9be:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9c0:	b09e      	sub	sp, #120	; 0x78
 801d9c2:	4604      	mov	r4, r0
 801d9c4:	ab23      	add	r3, sp, #140	; 0x8c
 801d9c6:	a805      	add	r0, sp, #20
 801d9c8:	f853 5b04 	ldr.w	r5, [r3], #4
 801d9cc:	9303      	str	r3, [sp, #12]
 801d9ce:	f000 fcb1 	bl	801e334 <_ZN8touchgfx12TextProviderC1Ev>
 801d9d2:	6823      	ldr	r3, [r4, #0]
 801d9d4:	4620      	mov	r0, r4
 801d9d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d9d8:	4798      	blx	r3
 801d9da:	6823      	ldr	r3, [r4, #0]
 801d9dc:	4606      	mov	r6, r0
 801d9de:	4620      	mov	r0, r4
 801d9e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d9e2:	4798      	blx	r3
 801d9e4:	4633      	mov	r3, r6
 801d9e6:	4629      	mov	r1, r5
 801d9e8:	9000      	str	r0, [sp, #0]
 801d9ea:	9a03      	ldr	r2, [sp, #12]
 801d9ec:	a805      	add	r0, sp, #20
 801d9ee:	f000 fcf4 	bl	801e3da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d9f2:	ad1e      	add	r5, sp, #120	; 0x78
 801d9f4:	2100      	movs	r1, #0
 801d9f6:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801d9fa:	4622      	mov	r2, r4
 801d9fc:	a805      	add	r0, sp, #20
 801d9fe:	f845 1d68 	str.w	r1, [r5, #-104]!
 801da02:	462b      	mov	r3, r5
 801da04:	f000 ffde 	bl	801e9c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801da08:	b1d8      	cbz	r0, 801da42 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801da0a:	280a      	cmp	r0, #10
 801da0c:	d012      	beq.n	801da34 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801da0e:	9804      	ldr	r0, [sp, #16]
 801da10:	b180      	cbz	r0, 801da34 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801da12:	7b47      	ldrb	r7, [r0, #13]
 801da14:	88e2      	ldrh	r2, [r4, #6]
 801da16:	00fb      	lsls	r3, r7, #3
 801da18:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801da1c:	7a03      	ldrb	r3, [r0, #8]
 801da1e:	430b      	orrs	r3, r1
 801da20:	0679      	lsls	r1, r7, #25
 801da22:	bf44      	itt	mi
 801da24:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801da28:	b21b      	sxthmi	r3, r3
 801da2a:	1ad3      	subs	r3, r2, r3
 801da2c:	b21b      	sxth	r3, r3
 801da2e:	429e      	cmp	r6, r3
 801da30:	bfa8      	it	ge
 801da32:	461e      	movge	r6, r3
 801da34:	462b      	mov	r3, r5
 801da36:	4622      	mov	r2, r4
 801da38:	2100      	movs	r1, #0
 801da3a:	a805      	add	r0, sp, #20
 801da3c:	f000 ffc2 	bl	801e9c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801da40:	e7e2      	b.n	801da08 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801da42:	4630      	mov	r0, r6
 801da44:	b01e      	add	sp, #120	; 0x78
 801da46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801da4a:	b003      	add	sp, #12
 801da4c:	4770      	bx	lr

0801da4e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801da4e:	b513      	push	{r0, r1, r4, lr}
 801da50:	6803      	ldr	r3, [r0, #0]
 801da52:	2400      	movs	r4, #0
 801da54:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801da58:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801da5c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801da60:	4669      	mov	r1, sp
 801da62:	691b      	ldr	r3, [r3, #16]
 801da64:	9400      	str	r4, [sp, #0]
 801da66:	f8ad 2006 	strh.w	r2, [sp, #6]
 801da6a:	4798      	blx	r3
 801da6c:	b002      	add	sp, #8
 801da6e:	bd10      	pop	{r4, pc}

0801da70 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801da70:	b538      	push	{r3, r4, r5, lr}
 801da72:	680b      	ldr	r3, [r1, #0]
 801da74:	460c      	mov	r4, r1
 801da76:	4605      	mov	r5, r0
 801da78:	68db      	ldr	r3, [r3, #12]
 801da7a:	4798      	blx	r3
 801da7c:	6823      	ldr	r3, [r4, #0]
 801da7e:	4620      	mov	r0, r4
 801da80:	4629      	mov	r1, r5
 801da82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da84:	4798      	blx	r3
 801da86:	4628      	mov	r0, r5
 801da88:	bd38      	pop	{r3, r4, r5, pc}

0801da8a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801da8a:	b410      	push	{r4}
 801da8c:	880a      	ldrh	r2, [r1, #0]
 801da8e:	8884      	ldrh	r4, [r0, #4]
 801da90:	4422      	add	r2, r4
 801da92:	800a      	strh	r2, [r1, #0]
 801da94:	884a      	ldrh	r2, [r1, #2]
 801da96:	88c4      	ldrh	r4, [r0, #6]
 801da98:	4422      	add	r2, r4
 801da9a:	804a      	strh	r2, [r1, #2]
 801da9c:	6940      	ldr	r0, [r0, #20]
 801da9e:	b120      	cbz	r0, 801daaa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801daa0:	6803      	ldr	r3, [r0, #0]
 801daa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801daa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801daa8:	4718      	bx	r3
 801daaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801daae:	4770      	bx	lr

0801dab0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801dab0:	b570      	push	{r4, r5, r6, lr}
 801dab2:	8882      	ldrh	r2, [r0, #4]
 801dab4:	460c      	mov	r4, r1
 801dab6:	880b      	ldrh	r3, [r1, #0]
 801dab8:	4605      	mov	r5, r0
 801daba:	4413      	add	r3, r2
 801dabc:	800b      	strh	r3, [r1, #0]
 801dabe:	884b      	ldrh	r3, [r1, #2]
 801dac0:	88c2      	ldrh	r2, [r0, #6]
 801dac2:	4413      	add	r3, r2
 801dac4:	804b      	strh	r3, [r1, #2]
 801dac6:	1d01      	adds	r1, r0, #4
 801dac8:	4620      	mov	r0, r4
 801daca:	f7fc f9d5 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 801dace:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	dd0b      	ble.n	801daee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801dad6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	dd07      	ble.n	801daee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801dade:	6968      	ldr	r0, [r5, #20]
 801dae0:	b128      	cbz	r0, 801daee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801dae2:	6803      	ldr	r3, [r0, #0]
 801dae4:	4621      	mov	r1, r4
 801dae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801daec:	4718      	bx	r3
 801daee:	bd70      	pop	{r4, r5, r6, pc}

0801daf0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801daf0:	b570      	push	{r4, r5, r6, lr}
 801daf2:	8882      	ldrh	r2, [r0, #4]
 801daf4:	460c      	mov	r4, r1
 801daf6:	880b      	ldrh	r3, [r1, #0]
 801daf8:	4605      	mov	r5, r0
 801dafa:	4413      	add	r3, r2
 801dafc:	800b      	strh	r3, [r1, #0]
 801dafe:	884b      	ldrh	r3, [r1, #2]
 801db00:	88c2      	ldrh	r2, [r0, #6]
 801db02:	4413      	add	r3, r2
 801db04:	804b      	strh	r3, [r1, #2]
 801db06:	1d01      	adds	r1, r0, #4
 801db08:	4620      	mov	r0, r4
 801db0a:	f7fc f9b5 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 801db0e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801db12:	2b00      	cmp	r3, #0
 801db14:	dd18      	ble.n	801db48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801db16:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	dd14      	ble.n	801db48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801db1e:	6968      	ldr	r0, [r5, #20]
 801db20:	b128      	cbz	r0, 801db2e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801db22:	6803      	ldr	r3, [r0, #0]
 801db24:	4621      	mov	r1, r4
 801db26:	691b      	ldr	r3, [r3, #16]
 801db28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db2c:	4718      	bx	r3
 801db2e:	4b07      	ldr	r3, [pc, #28]	; (801db4c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801db30:	681b      	ldr	r3, [r3, #0]
 801db32:	3304      	adds	r3, #4
 801db34:	429d      	cmp	r5, r3
 801db36:	d107      	bne.n	801db48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801db38:	f7fe ff44 	bl	801c9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801db3c:	6821      	ldr	r1, [r4, #0]
 801db3e:	6862      	ldr	r2, [r4, #4]
 801db40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db44:	f7ff b862 	b.w	801cc0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801db48:	bd70      	pop	{r4, r5, r6, pc}
 801db4a:	bf00      	nop
 801db4c:	240262c8 	.word	0x240262c8

0801db50 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801db50:	b570      	push	{r4, r5, r6, lr}
 801db52:	4604      	mov	r4, r0
 801db54:	4616      	mov	r6, r2
 801db56:	460d      	mov	r5, r1
 801db58:	b901      	cbnz	r1, 801db5c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801db5a:	b192      	cbz	r2, 801db82 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801db5c:	6823      	ldr	r3, [r4, #0]
 801db5e:	4620      	mov	r0, r4
 801db60:	699b      	ldr	r3, [r3, #24]
 801db62:	4798      	blx	r3
 801db64:	88e2      	ldrh	r2, [r4, #6]
 801db66:	88a1      	ldrh	r1, [r4, #4]
 801db68:	4620      	mov	r0, r4
 801db6a:	4432      	add	r2, r6
 801db6c:	4429      	add	r1, r5
 801db6e:	b212      	sxth	r2, r2
 801db70:	b209      	sxth	r1, r1
 801db72:	f7ea fa3a 	bl	8007fea <_ZN8touchgfx8Drawable5setXYEss>
 801db76:	6823      	ldr	r3, [r4, #0]
 801db78:	4620      	mov	r0, r4
 801db7a:	699b      	ldr	r3, [r3, #24]
 801db7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db80:	4718      	bx	r3
 801db82:	bd70      	pop	{r4, r5, r6, pc}

0801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801db84:	b510      	push	{r4, lr}
 801db86:	2300      	movs	r3, #0
 801db88:	4604      	mov	r4, r0
 801db8a:	4608      	mov	r0, r1
 801db8c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801db90:	8023      	strh	r3, [r4, #0]
 801db92:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801db96:	8063      	strh	r3, [r4, #2]
 801db98:	6803      	ldr	r3, [r0, #0]
 801db9a:	80a1      	strh	r1, [r4, #4]
 801db9c:	4621      	mov	r1, r4
 801db9e:	80e2      	strh	r2, [r4, #6]
 801dba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dba2:	4798      	blx	r3
 801dba4:	4620      	mov	r0, r4
 801dba6:	bd10      	pop	{r4, pc}

0801dba8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801dba8:	b530      	push	{r4, r5, lr}
 801dbaa:	8083      	strh	r3, [r0, #4]
 801dbac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801dbb0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801dbb4:	80c3      	strh	r3, [r0, #6]
 801dbb6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801dbba:	6141      	str	r1, [r0, #20]
 801dbbc:	7203      	strb	r3, [r0, #8]
 801dbbe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dbc2:	8302      	strh	r2, [r0, #24]
 801dbc4:	7243      	strb	r3, [r0, #9]
 801dbc6:	7a83      	ldrb	r3, [r0, #10]
 801dbc8:	f365 0306 	bfi	r3, r5, #0, #7
 801dbcc:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801dbd0:	f365 13c7 	bfi	r3, r5, #7, #1
 801dbd4:	7283      	strb	r3, [r0, #10]
 801dbd6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801dbda:	72c3      	strb	r3, [r0, #11]
 801dbdc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801dbe0:	7303      	strb	r3, [r0, #12]
 801dbe2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801dbe6:	81c3      	strh	r3, [r0, #14]
 801dbe8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801dbec:	8203      	strh	r3, [r0, #16]
 801dbee:	4b01      	ldr	r3, [pc, #4]	; (801dbf4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801dbf0:	6003      	str	r3, [r0, #0]
 801dbf2:	bd30      	pop	{r4, r5, pc}
 801dbf4:	0802c0a4 	.word	0x0802c0a4

0801dbf8 <_ZNK8touchgfx9ConstFont4findEt>:
 801dbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbfa:	6944      	ldr	r4, [r0, #20]
 801dbfc:	b3bc      	cbz	r4, 801dc6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dbfe:	88a3      	ldrh	r3, [r4, #4]
 801dc00:	8b02      	ldrh	r2, [r0, #24]
 801dc02:	1acb      	subs	r3, r1, r3
 801dc04:	f102 32ff 	add.w	r2, r2, #4294967295
 801dc08:	d431      	bmi.n	801dc6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc0a:	4293      	cmp	r3, r2
 801dc0c:	dd0c      	ble.n	801dc28 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801dc0e:	230e      	movs	r3, #14
 801dc10:	fb03 4302 	mla	r3, r3, r2, r4
 801dc14:	889b      	ldrh	r3, [r3, #4]
 801dc16:	1a5b      	subs	r3, r3, r1
 801dc18:	1ad3      	subs	r3, r2, r3
 801dc1a:	429a      	cmp	r2, r3
 801dc1c:	db27      	blt.n	801dc6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	bfbc      	itt	lt
 801dc22:	2302      	movlt	r3, #2
 801dc24:	fb92 f3f3 	sdivlt	r3, r2, r3
 801dc28:	2500      	movs	r5, #0
 801dc2a:	260e      	movs	r6, #14
 801dc2c:	4295      	cmp	r5, r2
 801dc2e:	dc1e      	bgt.n	801dc6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc30:	fb06 4003 	mla	r0, r6, r3, r4
 801dc34:	8887      	ldrh	r7, [r0, #4]
 801dc36:	42b9      	cmp	r1, r7
 801dc38:	d01a      	beq.n	801dc70 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801dc3a:	d20d      	bcs.n	801dc58 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801dc3c:	1e5a      	subs	r2, r3, #1
 801dc3e:	4295      	cmp	r5, r2
 801dc40:	dc15      	bgt.n	801dc6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc42:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801dc46:	1a5b      	subs	r3, r3, r1
 801dc48:	1ad3      	subs	r3, r2, r3
 801dc4a:	429a      	cmp	r2, r3
 801dc4c:	db0f      	blt.n	801dc6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc4e:	429d      	cmp	r5, r3
 801dc50:	ddec      	ble.n	801dc2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dc52:	1953      	adds	r3, r2, r5
 801dc54:	105b      	asrs	r3, r3, #1
 801dc56:	e7e9      	b.n	801dc2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dc58:	1c5d      	adds	r5, r3, #1
 801dc5a:	42aa      	cmp	r2, r5
 801dc5c:	db07      	blt.n	801dc6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc5e:	8a43      	ldrh	r3, [r0, #18]
 801dc60:	1acb      	subs	r3, r1, r3
 801dc62:	442b      	add	r3, r5
 801dc64:	429d      	cmp	r5, r3
 801dc66:	dc02      	bgt.n	801dc6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc68:	429a      	cmp	r2, r3
 801dc6a:	dadf      	bge.n	801dc2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dc6c:	e7f1      	b.n	801dc52 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801dc6e:	2000      	movs	r0, #0
 801dc70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dc72 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801dc72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc74:	4604      	mov	r4, r0
 801dc76:	4617      	mov	r7, r2
 801dc78:	461e      	mov	r6, r3
 801dc7a:	b911      	cbnz	r1, 801dc82 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801dc7c:	2500      	movs	r5, #0
 801dc7e:	4628      	mov	r0, r5
 801dc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc82:	290a      	cmp	r1, #10
 801dc84:	d0fa      	beq.n	801dc7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dc86:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801dc8a:	4291      	cmp	r1, r2
 801dc8c:	d0f6      	beq.n	801dc7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dc8e:	f242 020b 	movw	r2, #8203	; 0x200b
 801dc92:	4291      	cmp	r1, r2
 801dc94:	d0f2      	beq.n	801dc7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dc96:	f7ff ffaf 	bl	801dbf8 <_ZNK8touchgfx9ConstFont4findEt>
 801dc9a:	4605      	mov	r5, r0
 801dc9c:	b950      	cbnz	r0, 801dcb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801dc9e:	6823      	ldr	r3, [r4, #0]
 801dca0:	4620      	mov	r0, r4
 801dca2:	691b      	ldr	r3, [r3, #16]
 801dca4:	4798      	blx	r3
 801dca6:	4601      	mov	r1, r0
 801dca8:	4620      	mov	r0, r4
 801dcaa:	f7ff ffa5 	bl	801dbf8 <_ZNK8touchgfx9ConstFont4findEt>
 801dcae:	4605      	mov	r5, r0
 801dcb0:	2800      	cmp	r0, #0
 801dcb2:	d0e3      	beq.n	801dc7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dcb4:	6823      	ldr	r3, [r4, #0]
 801dcb6:	4629      	mov	r1, r5
 801dcb8:	4620      	mov	r0, r4
 801dcba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801dcbc:	4798      	blx	r3
 801dcbe:	6038      	str	r0, [r7, #0]
 801dcc0:	6823      	ldr	r3, [r4, #0]
 801dcc2:	4620      	mov	r0, r4
 801dcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dcc6:	4798      	blx	r3
 801dcc8:	7030      	strb	r0, [r6, #0]
 801dcca:	e7d8      	b.n	801dc7e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801dccc <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801dccc:	b538      	push	{r3, r4, r5, lr}
 801dcce:	4605      	mov	r5, r0
 801dcd0:	f001 fcfe 	bl	801f6d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dcd4:	4604      	mov	r4, r0
 801dcd6:	4628      	mov	r0, r5
 801dcd8:	f001 fc3e 	bl	801f558 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801dcdc:	2800      	cmp	r0, #0
 801dcde:	bf14      	ite	ne
 801dce0:	2002      	movne	r0, #2
 801dce2:	2000      	moveq	r0, #0
 801dce4:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801dce8:	b280      	uxth	r0, r0
 801dcea:	bd38      	pop	{r3, r4, r5, pc}

0801dcec <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801dcec:	b538      	push	{r3, r4, r5, lr}
 801dcee:	4605      	mov	r5, r0
 801dcf0:	f001 fcee 	bl	801f6d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dcf4:	4604      	mov	r4, r0
 801dcf6:	4628      	mov	r0, r5
 801dcf8:	f001 fc2e 	bl	801f558 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801dcfc:	2800      	cmp	r0, #0
 801dcfe:	bf14      	ite	ne
 801dd00:	2002      	movne	r0, #2
 801dd02:	2000      	moveq	r0, #0
 801dd04:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801dd08:	f040 0001 	orr.w	r0, r0, #1
 801dd0c:	b280      	uxth	r0, r0
 801dd0e:	bd38      	pop	{r3, r4, r5, pc}

0801dd10 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801dd10:	2000      	movs	r0, #0
 801dd12:	4770      	bx	lr

0801dd14 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801dd14:	2001      	movs	r0, #1
 801dd16:	4770      	bx	lr

0801dd18 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801dd18:	2002      	movs	r0, #2
 801dd1a:	4770      	bx	lr

0801dd1c <_ZN8touchgfx12GestureEventD1Ev>:
 801dd1c:	4770      	bx	lr

0801dd1e <_ZN8touchgfx9DragEventD1Ev>:
 801dd1e:	4770      	bx	lr

0801dd20 <_ZN8touchgfx10ClickEventD1Ev>:
 801dd20:	4770      	bx	lr

0801dd22 <_ZN8touchgfx10ClickEventD0Ev>:
 801dd22:	b510      	push	{r4, lr}
 801dd24:	4604      	mov	r4, r0
 801dd26:	210c      	movs	r1, #12
 801dd28:	f009 fc6b 	bl	8027602 <_ZdlPvj>
 801dd2c:	4620      	mov	r0, r4
 801dd2e:	bd10      	pop	{r4, pc}

0801dd30 <_ZN8touchgfx9DragEventD0Ev>:
 801dd30:	b510      	push	{r4, lr}
 801dd32:	4604      	mov	r4, r0
 801dd34:	2110      	movs	r1, #16
 801dd36:	f009 fc64 	bl	8027602 <_ZdlPvj>
 801dd3a:	4620      	mov	r0, r4
 801dd3c:	bd10      	pop	{r4, pc}

0801dd3e <_ZN8touchgfx12GestureEventD0Ev>:
 801dd3e:	b510      	push	{r4, lr}
 801dd40:	4604      	mov	r4, r0
 801dd42:	210c      	movs	r1, #12
 801dd44:	f009 fc5d 	bl	8027602 <_ZdlPvj>
 801dd48:	4620      	mov	r0, r4
 801dd4a:	bd10      	pop	{r4, pc}

0801dd4c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801dd4c:	b530      	push	{r4, r5, lr}
 801dd4e:	460d      	mov	r5, r1
 801dd50:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801dd52:	b087      	sub	sp, #28
 801dd54:	4604      	mov	r4, r0
 801dd56:	b301      	cbz	r1, 801dd9a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801dd58:	a801      	add	r0, sp, #4
 801dd5a:	f7ff ff13 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dd5e:	892a      	ldrh	r2, [r5, #8]
 801dd60:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801dd64:	7928      	ldrb	r0, [r5, #4]
 801dd66:	1ad2      	subs	r2, r2, r3
 801dd68:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801dd6a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801dd6e:	441a      	add	r2, r3
 801dd70:	896b      	ldrh	r3, [r5, #10]
 801dd72:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801dd76:	f88d 0010 	strb.w	r0, [sp, #16]
 801dd7a:	1b5b      	subs	r3, r3, r5
 801dd7c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801dd7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801dd80:	442b      	add	r3, r5
 801dd82:	4d07      	ldr	r5, [pc, #28]	; (801dda0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801dd84:	f8ad 1012 	strh.w	r1, [sp, #18]
 801dd88:	a903      	add	r1, sp, #12
 801dd8a:	9503      	str	r5, [sp, #12]
 801dd8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801dd90:	f8ad 3016 	strh.w	r3, [sp, #22]
 801dd94:	6803      	ldr	r3, [r0, #0]
 801dd96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801dd98:	4798      	blx	r3
 801dd9a:	b007      	add	sp, #28
 801dd9c:	bd30      	pop	{r4, r5, pc}
 801dd9e:	bf00      	nop
 801dda0:	0802c12c 	.word	0x0802c12c

0801dda4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801dda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dda8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801ddaa:	b08a      	sub	sp, #40	; 0x28
 801ddac:	4604      	mov	r4, r0
 801ddae:	460d      	mov	r5, r1
 801ddb0:	b113      	cbz	r3, 801ddb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801ddb2:	790b      	ldrb	r3, [r1, #4]
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	d044      	beq.n	801de42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ddb8:	f104 0804 	add.w	r8, r4, #4
 801ddbc:	a803      	add	r0, sp, #12
 801ddbe:	4641      	mov	r1, r8
 801ddc0:	f7ff fee0 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ddc4:	792b      	ldrb	r3, [r5, #4]
 801ddc6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801ddca:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801ddce:	b983      	cbnz	r3, 801ddf2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801ddd0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801ddd4:	892a      	ldrh	r2, [r5, #8]
 801ddd6:	88e9      	ldrh	r1, [r5, #6]
 801ddd8:	4640      	mov	r0, r8
 801ddda:	1b92      	subs	r2, r2, r6
 801dddc:	9301      	str	r3, [sp, #4]
 801ddde:	1bc9      	subs	r1, r1, r7
 801dde0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801dde4:	b212      	sxth	r2, r2
 801dde6:	9300      	str	r3, [sp, #0]
 801dde8:	b209      	sxth	r1, r1
 801ddea:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801ddee:	f7fb ff61 	bl	8019cb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801ddf2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ddf4:	b329      	cbz	r1, 801de42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ddf6:	a805      	add	r0, sp, #20
 801ddf8:	f7ff fec4 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ddfc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801de00:	792b      	ldrb	r3, [r5, #4]
 801de02:	a907      	add	r1, sp, #28
 801de04:	1abf      	subs	r7, r7, r2
 801de06:	88ea      	ldrh	r2, [r5, #6]
 801de08:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801de0a:	4417      	add	r7, r2
 801de0c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801de0e:	f88d 3020 	strb.w	r3, [sp, #32]
 801de12:	4417      	add	r7, r2
 801de14:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801de18:	1ab6      	subs	r6, r6, r2
 801de1a:	892a      	ldrh	r2, [r5, #8]
 801de1c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801de20:	4416      	add	r6, r2
 801de22:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801de24:	4416      	add	r6, r2
 801de26:	4a08      	ldr	r2, [pc, #32]	; (801de48 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801de28:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801de2c:	2600      	movs	r6, #0
 801de2e:	9207      	str	r2, [sp, #28]
 801de30:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801de34:	6803      	ldr	r3, [r0, #0]
 801de36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801de38:	4798      	blx	r3
 801de3a:	792b      	ldrb	r3, [r5, #4]
 801de3c:	b10b      	cbz	r3, 801de42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801de3e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801de42:	b00a      	add	sp, #40	; 0x28
 801de44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de48:	0802c104 	.word	0x0802c104

0801de4c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de50:	460c      	mov	r4, r1
 801de52:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801de54:	b088      	sub	sp, #32
 801de56:	4605      	mov	r5, r0
 801de58:	2900      	cmp	r1, #0
 801de5a:	d06d      	beq.n	801df38 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801de5c:	4668      	mov	r0, sp
 801de5e:	f7ff fe91 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801de62:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801de64:	88e3      	ldrh	r3, [r4, #6]
 801de66:	f9bd 8000 	ldrsh.w	r8, [sp]
 801de6a:	440b      	add	r3, r1
 801de6c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801de70:	b21b      	sxth	r3, r3
 801de72:	4543      	cmp	r3, r8
 801de74:	db31      	blt.n	801deda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801de76:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801de7a:	44c4      	add	ip, r8
 801de7c:	fa0f fc8c 	sxth.w	ip, ip
 801de80:	4563      	cmp	r3, ip
 801de82:	da2a      	bge.n	801deda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801de84:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801de86:	8926      	ldrh	r6, [r4, #8]
 801de88:	4416      	add	r6, r2
 801de8a:	b236      	sxth	r6, r6
 801de8c:	42be      	cmp	r6, r7
 801de8e:	db24      	blt.n	801deda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801de90:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801de94:	4438      	add	r0, r7
 801de96:	b200      	sxth	r0, r0
 801de98:	4286      	cmp	r6, r0
 801de9a:	da1e      	bge.n	801deda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801de9c:	8963      	ldrh	r3, [r4, #10]
 801de9e:	4419      	add	r1, r3
 801dea0:	b209      	sxth	r1, r1
 801dea2:	4541      	cmp	r1, r8
 801dea4:	db08      	blt.n	801deb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801dea6:	4561      	cmp	r1, ip
 801dea8:	da06      	bge.n	801deb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801deaa:	89a3      	ldrh	r3, [r4, #12]
 801deac:	441a      	add	r2, r3
 801deae:	b212      	sxth	r2, r2
 801deb0:	42ba      	cmp	r2, r7
 801deb2:	db01      	blt.n	801deb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801deb4:	4282      	cmp	r2, r0
 801deb6:	db10      	blt.n	801deda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801deb8:	4b21      	ldr	r3, [pc, #132]	; (801df40 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801deba:	a904      	add	r1, sp, #16
 801debc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801debe:	9304      	str	r3, [sp, #16]
 801dec0:	2302      	movs	r3, #2
 801dec2:	f88d 3014 	strb.w	r3, [sp, #20]
 801dec6:	2300      	movs	r3, #0
 801dec8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801decc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ded0:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ded4:	6803      	ldr	r3, [r0, #0]
 801ded6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ded8:	4798      	blx	r3
 801deda:	1d29      	adds	r1, r5, #4
 801dedc:	a802      	add	r0, sp, #8
 801dede:	f7ff fe51 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dee2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801dee6:	88e0      	ldrh	r0, [r4, #6]
 801dee8:	eba3 0808 	sub.w	r8, r3, r8
 801deec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801def0:	7921      	ldrb	r1, [r4, #4]
 801def2:	fa1f f888 	uxth.w	r8, r8
 801def6:	1bdf      	subs	r7, r3, r7
 801def8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801defc:	b2bb      	uxth	r3, r7
 801defe:	4440      	add	r0, r8
 801df00:	8922      	ldrh	r2, [r4, #8]
 801df02:	8967      	ldrh	r7, [r4, #10]
 801df04:	4460      	add	r0, ip
 801df06:	89a4      	ldrh	r4, [r4, #12]
 801df08:	441a      	add	r2, r3
 801df0a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801df0c:	44b8      	add	r8, r7
 801df0e:	4423      	add	r3, r4
 801df10:	f8ad 0016 	strh.w	r0, [sp, #22]
 801df14:	4432      	add	r2, r6
 801df16:	44e0      	add	r8, ip
 801df18:	4433      	add	r3, r6
 801df1a:	4c0a      	ldr	r4, [pc, #40]	; (801df44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801df1c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801df1e:	f88d 1014 	strb.w	r1, [sp, #20]
 801df22:	a904      	add	r1, sp, #16
 801df24:	9404      	str	r4, [sp, #16]
 801df26:	f8ad 2018 	strh.w	r2, [sp, #24]
 801df2a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801df2e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801df32:	6803      	ldr	r3, [r0, #0]
 801df34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801df36:	4798      	blx	r3
 801df38:	b008      	add	sp, #32
 801df3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df3e:	bf00      	nop
 801df40:	0802c104 	.word	0x0802c104
 801df44:	0802c118 	.word	0x0802c118

0801df48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801df48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801df4a:	4604      	mov	r4, r0
 801df4c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801df50:	3201      	adds	r2, #1
 801df52:	d112      	bne.n	801df7a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801df54:	2500      	movs	r5, #0
 801df56:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801df5a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801df5e:	6803      	ldr	r3, [r0, #0]
 801df60:	9500      	str	r5, [sp, #0]
 801df62:	466d      	mov	r5, sp
 801df64:	f8ad 1004 	strh.w	r1, [sp, #4]
 801df68:	f8ad 2006 	strh.w	r2, [sp, #6]
 801df6c:	4629      	mov	r1, r5
 801df6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df70:	4798      	blx	r3
 801df72:	e895 0003 	ldmia.w	r5, {r0, r1}
 801df76:	e884 0003 	stmia.w	r4, {r0, r1}
 801df7a:	4620      	mov	r0, r4
 801df7c:	b003      	add	sp, #12
 801df7e:	bd30      	pop	{r4, r5, pc}

0801df80 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801df80:	b513      	push	{r0, r1, r4, lr}
 801df82:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801df86:	4604      	mov	r4, r0
 801df88:	3301      	adds	r3, #1
 801df8a:	d109      	bne.n	801dfa0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801df8c:	4601      	mov	r1, r0
 801df8e:	4668      	mov	r0, sp
 801df90:	f7ff fdf8 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801df94:	f8bd 3000 	ldrh.w	r3, [sp]
 801df98:	8423      	strh	r3, [r4, #32]
 801df9a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801df9e:	8463      	strh	r3, [r4, #34]	; 0x22
 801dfa0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801dfa4:	b002      	add	sp, #8
 801dfa6:	bd10      	pop	{r4, pc}

0801dfa8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801dfa8:	b513      	push	{r0, r1, r4, lr}
 801dfaa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801dfae:	4604      	mov	r4, r0
 801dfb0:	3301      	adds	r3, #1
 801dfb2:	d109      	bne.n	801dfc8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801dfb4:	4601      	mov	r1, r0
 801dfb6:	4668      	mov	r0, sp
 801dfb8:	f7ff fde4 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dfbc:	f8bd 3000 	ldrh.w	r3, [sp]
 801dfc0:	8423      	strh	r3, [r4, #32]
 801dfc2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801dfc6:	8463      	strh	r3, [r4, #34]	; 0x22
 801dfc8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801dfcc:	b002      	add	sp, #8
 801dfce:	bd10      	pop	{r4, pc}

0801dfd0 <_ZN8touchgfx6ScreenC1Ev>:
 801dfd0:	b570      	push	{r4, r5, r6, lr}
 801dfd2:	4b17      	ldr	r3, [pc, #92]	; (801e030 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801dfd4:	4605      	mov	r5, r0
 801dfd6:	4a17      	ldr	r2, [pc, #92]	; (801e034 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801dfd8:	2101      	movs	r1, #1
 801dfda:	f845 3b04 	str.w	r3, [r5], #4
 801dfde:	2300      	movs	r3, #0
 801dfe0:	6042      	str	r2, [r0, #4]
 801dfe2:	4604      	mov	r4, r0
 801dfe4:	8103      	strh	r3, [r0, #8]
 801dfe6:	8143      	strh	r3, [r0, #10]
 801dfe8:	8183      	strh	r3, [r0, #12]
 801dfea:	81c3      	strh	r3, [r0, #14]
 801dfec:	8203      	strh	r3, [r0, #16]
 801dfee:	8243      	strh	r3, [r0, #18]
 801dff0:	8283      	strh	r3, [r0, #20]
 801dff2:	82c3      	strh	r3, [r0, #22]
 801dff4:	6203      	str	r3, [r0, #32]
 801dff6:	8483      	strh	r3, [r0, #36]	; 0x24
 801dff8:	84c3      	strh	r3, [r0, #38]	; 0x26
 801dffa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801dffe:	6343      	str	r3, [r0, #52]	; 0x34
 801e000:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801e004:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801e008:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801e00c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801e010:	4b09      	ldr	r3, [pc, #36]	; (801e038 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801e012:	4628      	mov	r0, r5
 801e014:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e018:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801e01a:	4a08      	ldr	r2, [pc, #32]	; (801e03c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801e01c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e020:	4798      	blx	r3
 801e022:	6863      	ldr	r3, [r4, #4]
 801e024:	4628      	mov	r0, r5
 801e026:	4631      	mov	r1, r6
 801e028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e02a:	4798      	blx	r3
 801e02c:	4620      	mov	r0, r4
 801e02e:	bd70      	pop	{r4, r5, r6, pc}
 801e030:	0802c140 	.word	0x0802c140
 801e034:	0802bb9c 	.word	0x0802bb9c
 801e038:	24026282 	.word	0x24026282
 801e03c:	24026280 	.word	0x24026280

0801e040 <_ZN8touchgfx6Screen4drawEv>:
 801e040:	4b09      	ldr	r3, [pc, #36]	; (801e068 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801e042:	b507      	push	{r0, r1, r2, lr}
 801e044:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e048:	2100      	movs	r1, #0
 801e04a:	4b08      	ldr	r3, [pc, #32]	; (801e06c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801e04c:	9100      	str	r1, [sp, #0]
 801e04e:	4669      	mov	r1, sp
 801e050:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e054:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e058:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e05c:	6803      	ldr	r3, [r0, #0]
 801e05e:	689b      	ldr	r3, [r3, #8]
 801e060:	4798      	blx	r3
 801e062:	b003      	add	sp, #12
 801e064:	f85d fb04 	ldr.w	pc, [sp], #4
 801e068:	24026280 	.word	0x24026280
 801e06c:	24026282 	.word	0x24026282

0801e070 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801e070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e074:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e078:	b089      	sub	sp, #36	; 0x24
 801e07a:	4680      	mov	r8, r0
 801e07c:	460c      	mov	r4, r1
 801e07e:	2b00      	cmp	r3, #0
 801e080:	4615      	mov	r5, r2
 801e082:	dd0e      	ble.n	801e0a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e084:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e088:	2b00      	cmp	r3, #0
 801e08a:	dd0a      	ble.n	801e0a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e08c:	4628      	mov	r0, r5
 801e08e:	f7ff ff5b 	bl	801df48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e092:	4621      	mov	r1, r4
 801e094:	f7fe fbb8 	bl	801c808 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e098:	69eb      	ldr	r3, [r5, #28]
 801e09a:	b928      	cbnz	r0, 801e0a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801e09c:	461d      	mov	r5, r3
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d1f4      	bne.n	801e08c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801e0a2:	b009      	add	sp, #36	; 0x24
 801e0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0a8:	ae04      	add	r6, sp, #16
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	f000 80b5 	beq.w	801e21a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e0b0:	682b      	ldr	r3, [r5, #0]
 801e0b2:	4629      	mov	r1, r5
 801e0b4:	a802      	add	r0, sp, #8
 801e0b6:	68db      	ldr	r3, [r3, #12]
 801e0b8:	4798      	blx	r3
 801e0ba:	4628      	mov	r0, r5
 801e0bc:	f7ff ff60 	bl	801df80 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e0c0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801e0c4:	4407      	add	r7, r0
 801e0c6:	4628      	mov	r0, r5
 801e0c8:	f7ff ff6e 	bl	801dfa8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e0cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e0d0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801e0d4:	b23f      	sxth	r7, r7
 801e0d6:	4418      	add	r0, r3
 801e0d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801e0dc:	4621      	mov	r1, r4
 801e0de:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e0e2:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e0e6:	4630      	mov	r0, r6
 801e0e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e0ec:	f8ad 7010 	strh.w	r7, [sp, #16]
 801e0f0:	f7fb fec2 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 801e0f4:	4628      	mov	r0, r5
 801e0f6:	f7ff ff27 	bl	801df48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e0fa:	ab06      	add	r3, sp, #24
 801e0fc:	4602      	mov	r2, r0
 801e0fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e102:	e883 0003 	stmia.w	r3, {r0, r1}
 801e106:	4611      	mov	r1, r2
 801e108:	4618      	mov	r0, r3
 801e10a:	f7fb feb5 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 801e10e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801e112:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e116:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801e11a:	4299      	cmp	r1, r3
 801e11c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801e120:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801e124:	d10b      	bne.n	801e13e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e126:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e12a:	4552      	cmp	r2, sl
 801e12c:	d107      	bne.n	801e13e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e12e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e132:	455a      	cmp	r2, fp
 801e134:	d103      	bne.n	801e13e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e136:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e13a:	454a      	cmp	r2, r9
 801e13c:	d06d      	beq.n	801e21a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e13e:	f1bb 0f00 	cmp.w	fp, #0
 801e142:	dd65      	ble.n	801e210 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e144:	f1b9 0f00 	cmp.w	r9, #0
 801e148:	dd62      	ble.n	801e210 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e14a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e14e:	fa1f f08a 	uxth.w	r0, sl
 801e152:	4552      	cmp	r2, sl
 801e154:	9000      	str	r0, [sp, #0]
 801e156:	da12      	bge.n	801e17e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801e158:	9301      	str	r3, [sp, #4]
 801e15a:	9b00      	ldr	r3, [sp, #0]
 801e15c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e160:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e164:	1a9a      	subs	r2, r3, r2
 801e166:	f8ad 1010 	strh.w	r1, [sp, #16]
 801e16a:	4631      	mov	r1, r6
 801e16c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e170:	4640      	mov	r0, r8
 801e172:	f8ad 2016 	strh.w	r2, [sp, #22]
 801e176:	69ea      	ldr	r2, [r5, #28]
 801e178:	f7ff ff7a 	bl	801e070 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e17c:	9b01      	ldr	r3, [sp, #4]
 801e17e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e182:	b29f      	uxth	r7, r3
 801e184:	429a      	cmp	r2, r3
 801e186:	da0d      	bge.n	801e1a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801e188:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e18c:	1aba      	subs	r2, r7, r2
 801e18e:	f8ad a012 	strh.w	sl, [sp, #18]
 801e192:	4631      	mov	r1, r6
 801e194:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e198:	4640      	mov	r0, r8
 801e19a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e19e:	69ea      	ldr	r2, [r5, #28]
 801e1a0:	f7ff ff66 	bl	801e070 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e1a4:	8822      	ldrh	r2, [r4, #0]
 801e1a6:	445f      	add	r7, fp
 801e1a8:	88a3      	ldrh	r3, [r4, #4]
 801e1aa:	b2bf      	uxth	r7, r7
 801e1ac:	4413      	add	r3, r2
 801e1ae:	b23a      	sxth	r2, r7
 801e1b0:	b29b      	uxth	r3, r3
 801e1b2:	b219      	sxth	r1, r3
 801e1b4:	4291      	cmp	r1, r2
 801e1b6:	dd0d      	ble.n	801e1d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801e1b8:	1bdb      	subs	r3, r3, r7
 801e1ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e1be:	f8ad a012 	strh.w	sl, [sp, #18]
 801e1c2:	4631      	mov	r1, r6
 801e1c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e1c8:	4640      	mov	r0, r8
 801e1ca:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e1ce:	69ea      	ldr	r2, [r5, #28]
 801e1d0:	f7ff ff4e 	bl	801e070 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e1d4:	88e2      	ldrh	r2, [r4, #6]
 801e1d6:	8863      	ldrh	r3, [r4, #2]
 801e1d8:	4413      	add	r3, r2
 801e1da:	9a00      	ldr	r2, [sp, #0]
 801e1dc:	444a      	add	r2, r9
 801e1de:	b29b      	uxth	r3, r3
 801e1e0:	fa1f f982 	uxth.w	r9, r2
 801e1e4:	b219      	sxth	r1, r3
 801e1e6:	fa0f f289 	sxth.w	r2, r9
 801e1ea:	428a      	cmp	r2, r1
 801e1ec:	da15      	bge.n	801e21a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e1ee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e1f2:	eba3 0309 	sub.w	r3, r3, r9
 801e1f6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e1fa:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e1fe:	4631      	mov	r1, r6
 801e200:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e204:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e208:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e20c:	69ea      	ldr	r2, [r5, #28]
 801e20e:	e001      	b.n	801e214 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801e210:	69ea      	ldr	r2, [r5, #28]
 801e212:	4621      	mov	r1, r4
 801e214:	4640      	mov	r0, r8
 801e216:	f7ff ff2b 	bl	801e070 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e21a:	4628      	mov	r0, r5
 801e21c:	f7ff fe94 	bl	801df48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e220:	6861      	ldr	r1, [r4, #4]
 801e222:	4602      	mov	r2, r0
 801e224:	4633      	mov	r3, r6
 801e226:	6820      	ldr	r0, [r4, #0]
 801e228:	c303      	stmia	r3!, {r0, r1}
 801e22a:	4611      	mov	r1, r2
 801e22c:	4630      	mov	r0, r6
 801e22e:	f7fb fe23 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 801e232:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e236:	2b00      	cmp	r3, #0
 801e238:	f77f af33 	ble.w	801e0a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e23c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e240:	2b00      	cmp	r3, #0
 801e242:	f77f af2e 	ble.w	801e0a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e246:	4628      	mov	r0, r5
 801e248:	f7ff fe9a 	bl	801df80 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e24c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e250:	1a18      	subs	r0, r3, r0
 801e252:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e256:	4628      	mov	r0, r5
 801e258:	f7ff fea6 	bl	801dfa8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e25c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e260:	4631      	mov	r1, r6
 801e262:	1a18      	subs	r0, r3, r0
 801e264:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e268:	4628      	mov	r0, r5
 801e26a:	682b      	ldr	r3, [r5, #0]
 801e26c:	689b      	ldr	r3, [r3, #8]
 801e26e:	4798      	blx	r3
 801e270:	e717      	b.n	801e0a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801e272 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801e272:	b570      	push	{r4, r5, r6, lr}
 801e274:	1d06      	adds	r6, r0, #4
 801e276:	b086      	sub	sp, #24
 801e278:	460c      	mov	r4, r1
 801e27a:	2300      	movs	r3, #0
 801e27c:	4631      	mov	r1, r6
 801e27e:	4605      	mov	r5, r0
 801e280:	a802      	add	r0, sp, #8
 801e282:	9301      	str	r3, [sp, #4]
 801e284:	f7ff fc7e 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e288:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e28c:	8822      	ldrh	r2, [r4, #0]
 801e28e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801e292:	1ad2      	subs	r2, r2, r3
 801e294:	8863      	ldrh	r3, [r4, #2]
 801e296:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e29a:	1a5b      	subs	r3, r3, r1
 801e29c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e2a0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e2a4:	aa01      	add	r2, sp, #4
 801e2a6:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e2aa:	4630      	mov	r0, r6
 801e2ac:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e2b0:	a904      	add	r1, sp, #16
 801e2b2:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e2b6:	f7fb feb7 	bl	801a028 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801e2ba:	9a01      	ldr	r2, [sp, #4]
 801e2bc:	b11a      	cbz	r2, 801e2c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801e2be:	4621      	mov	r1, r4
 801e2c0:	4628      	mov	r0, r5
 801e2c2:	f7ff fed5 	bl	801e070 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e2c6:	b006      	add	sp, #24
 801e2c8:	bd70      	pop	{r4, r5, r6, pc}

0801e2ca <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801e2ca:	4602      	mov	r2, r0
 801e2cc:	b530      	push	{r4, r5, lr}
 801e2ce:	4604      	mov	r4, r0
 801e2d0:	b085      	sub	sp, #20
 801e2d2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801e2d6:	460d      	mov	r5, r1
 801e2d8:	466b      	mov	r3, sp
 801e2da:	6851      	ldr	r1, [r2, #4]
 801e2dc:	c303      	stmia	r3!, {r0, r1}
 801e2de:	4629      	mov	r1, r5
 801e2e0:	4668      	mov	r0, sp
 801e2e2:	f7fb fdc9 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 801e2e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801e2ea:	b12b      	cbz	r3, 801e2f8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801e2ec:	4669      	mov	r1, sp
 801e2ee:	4620      	mov	r0, r4
 801e2f0:	f7ff ffbf 	bl	801e272 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801e2f4:	b005      	add	sp, #20
 801e2f6:	bd30      	pop	{r4, r5, pc}
 801e2f8:	3404      	adds	r4, #4
 801e2fa:	a802      	add	r0, sp, #8
 801e2fc:	4621      	mov	r1, r4
 801e2fe:	f7ff fc41 	bl	801db84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e302:	f8bd 3000 	ldrh.w	r3, [sp]
 801e306:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801e30a:	4669      	mov	r1, sp
 801e30c:	4620      	mov	r0, r4
 801e30e:	1a9b      	subs	r3, r3, r2
 801e310:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e314:	f8ad 3000 	strh.w	r3, [sp]
 801e318:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e31c:	1a9b      	subs	r3, r3, r2
 801e31e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e322:	f7fb fe48 	bl	8019fb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801e326:	e7e5      	b.n	801e2f4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801e328 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801e328:	460b      	mov	r3, r1
 801e32a:	680a      	ldr	r2, [r1, #0]
 801e32c:	1d01      	adds	r1, r0, #4
 801e32e:	6992      	ldr	r2, [r2, #24]
 801e330:	4618      	mov	r0, r3
 801e332:	4710      	bx	r2

0801e334 <_ZN8touchgfx12TextProviderC1Ev>:
 801e334:	b538      	push	{r3, r4, r5, lr}
 801e336:	2500      	movs	r5, #0
 801e338:	2302      	movs	r3, #2
 801e33a:	4604      	mov	r4, r0
 801e33c:	220e      	movs	r2, #14
 801e33e:	7403      	strb	r3, [r0, #16]
 801e340:	4629      	mov	r1, r5
 801e342:	6145      	str	r5, [r0, #20]
 801e344:	7605      	strb	r5, [r0, #24]
 801e346:	83c5      	strh	r5, [r0, #30]
 801e348:	8405      	strh	r5, [r0, #32]
 801e34a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e34c:	8705      	strh	r5, [r0, #56]	; 0x38
 801e34e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801e350:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801e354:	e9c0 5500 	strd	r5, r5, [r0]
 801e358:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801e35c:	304c      	adds	r0, #76	; 0x4c
 801e35e:	f009 fa0f 	bl	8027780 <memset>
 801e362:	2301      	movs	r3, #1
 801e364:	4620      	mov	r0, r4
 801e366:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801e36a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e36e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801e372:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801e376:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801e37a:	f7ea fc55 	bl	8008c28 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801e37e:	4620      	mov	r0, r4
 801e380:	bd38      	pop	{r3, r4, r5, pc}

0801e382 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801e382:	b530      	push	{r4, r5, lr}
 801e384:	2500      	movs	r5, #0
 801e386:	2401      	movs	r4, #1
 801e388:	6843      	ldr	r3, [r0, #4]
 801e38a:	b913      	cbnz	r3, 801e392 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801e38c:	6803      	ldr	r3, [r0, #0]
 801e38e:	b313      	cbz	r3, 801e3d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e390:	6043      	str	r3, [r0, #4]
 801e392:	7e03      	ldrb	r3, [r0, #24]
 801e394:	b143      	cbz	r3, 801e3a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801e396:	6943      	ldr	r3, [r0, #20]
 801e398:	b12b      	cbz	r3, 801e3a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e39a:	881a      	ldrh	r2, [r3, #0]
 801e39c:	b11a      	cbz	r2, 801e3a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e39e:	1c9a      	adds	r2, r3, #2
 801e3a0:	6142      	str	r2, [r0, #20]
 801e3a2:	8818      	ldrh	r0, [r3, #0]
 801e3a4:	bd30      	pop	{r4, r5, pc}
 801e3a6:	7605      	strb	r5, [r0, #24]
 801e3a8:	6843      	ldr	r3, [r0, #4]
 801e3aa:	8819      	ldrh	r1, [r3, #0]
 801e3ac:	b199      	cbz	r1, 801e3d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e3ae:	1c9a      	adds	r2, r3, #2
 801e3b0:	2902      	cmp	r1, #2
 801e3b2:	6042      	str	r2, [r0, #4]
 801e3b4:	d1f5      	bne.n	801e3a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801e3b6:	7c03      	ldrb	r3, [r0, #16]
 801e3b8:	2b01      	cmp	r3, #1
 801e3ba:	d8e5      	bhi.n	801e388 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e3bc:	1c5a      	adds	r2, r3, #1
 801e3be:	3302      	adds	r3, #2
 801e3c0:	7402      	strb	r2, [r0, #16]
 801e3c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801e3c6:	6143      	str	r3, [r0, #20]
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d0dd      	beq.n	801e388 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e3cc:	881b      	ldrh	r3, [r3, #0]
 801e3ce:	2b00      	cmp	r3, #0
 801e3d0:	d0da      	beq.n	801e388 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e3d2:	7604      	strb	r4, [r0, #24]
 801e3d4:	e7d8      	b.n	801e388 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e3d6:	2000      	movs	r0, #0
 801e3d8:	e7e4      	b.n	801e3a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801e3da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801e3da:	6001      	str	r1, [r0, #0]
 801e3dc:	2100      	movs	r1, #0
 801e3de:	b430      	push	{r4, r5}
 801e3e0:	6041      	str	r1, [r0, #4]
 801e3e2:	6815      	ldr	r5, [r2, #0]
 801e3e4:	6085      	str	r5, [r0, #8]
 801e3e6:	6852      	ldr	r2, [r2, #4]
 801e3e8:	6443      	str	r3, [r0, #68]	; 0x44
 801e3ea:	9b02      	ldr	r3, [sp, #8]
 801e3ec:	60c2      	str	r2, [r0, #12]
 801e3ee:	7401      	strb	r1, [r0, #16]
 801e3f0:	6141      	str	r1, [r0, #20]
 801e3f2:	7601      	strb	r1, [r0, #24]
 801e3f4:	8701      	strh	r1, [r0, #56]	; 0x38
 801e3f6:	8401      	strh	r1, [r0, #32]
 801e3f8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801e3fc:	6483      	str	r3, [r0, #72]	; 0x48
 801e3fe:	bc30      	pop	{r4, r5}
 801e400:	f7ea bc12 	b.w	8008c28 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801e404 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801e404:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e406:	4605      	mov	r5, r0
 801e408:	4608      	mov	r0, r1
 801e40a:	b1f1      	cbz	r1, 801e44a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801e40c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801e410:	460b      	mov	r3, r1
 801e412:	f101 0708 	add.w	r7, r1, #8
 801e416:	4622      	mov	r2, r4
 801e418:	6818      	ldr	r0, [r3, #0]
 801e41a:	3308      	adds	r3, #8
 801e41c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e420:	4626      	mov	r6, r4
 801e422:	42bb      	cmp	r3, r7
 801e424:	c603      	stmia	r6!, {r0, r1}
 801e426:	4634      	mov	r4, r6
 801e428:	d1f6      	bne.n	801e418 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801e42a:	6818      	ldr	r0, [r3, #0]
 801e42c:	6030      	str	r0, [r6, #0]
 801e42e:	4610      	mov	r0, r2
 801e430:	889b      	ldrh	r3, [r3, #4]
 801e432:	80b3      	strh	r3, [r6, #4]
 801e434:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801e438:	015b      	lsls	r3, r3, #5
 801e43a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e43e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801e442:	430b      	orrs	r3, r1
 801e444:	425b      	negs	r3, r3
 801e446:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801e44a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e44c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801e44c:	b538      	push	{r3, r4, r5, lr}
 801e44e:	460c      	mov	r4, r1
 801e450:	6811      	ldr	r1, [r2, #0]
 801e452:	4610      	mov	r0, r2
 801e454:	68cd      	ldr	r5, [r1, #12]
 801e456:	4619      	mov	r1, r3
 801e458:	47a8      	blx	r5
 801e45a:	2800      	cmp	r0, #0
 801e45c:	bf08      	it	eq
 801e45e:	4620      	moveq	r0, r4
 801e460:	bd38      	pop	{r3, r4, r5, pc}
	...

0801e464 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801e464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e466:	4604      	mov	r4, r0
 801e468:	4615      	mov	r5, r2
 801e46a:	4608      	mov	r0, r1
 801e46c:	b93a      	cbnz	r2, 801e47e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801e46e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801e472:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801e476:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801e47a:	4628      	mov	r0, r5
 801e47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e47e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801e482:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801e486:	8893      	ldrh	r3, [r2, #4]
 801e488:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801e48c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801e490:	79ee      	ldrb	r6, [r5, #7]
 801e492:	4316      	orrs	r6, r2
 801e494:	19da      	adds	r2, r3, r7
 801e496:	b291      	uxth	r1, r2
 801e498:	b2b7      	uxth	r7, r6
 801e49a:	291d      	cmp	r1, #29
 801e49c:	d87b      	bhi.n	801e596 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801e49e:	2201      	movs	r2, #1
 801e4a0:	10f6      	asrs	r6, r6, #3
 801e4a2:	408a      	lsls	r2, r1
 801e4a4:	4974      	ldr	r1, [pc, #464]	; (801e678 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801e4a6:	420a      	tst	r2, r1
 801e4a8:	d12e      	bne.n	801e508 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801e4aa:	f412 7f60 	tst.w	r2, #896	; 0x380
 801e4ae:	d072      	beq.n	801e596 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801e4b0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801e4b4:	462b      	mov	r3, r5
 801e4b6:	f105 0e08 	add.w	lr, r5, #8
 801e4ba:	4615      	mov	r5, r2
 801e4bc:	6818      	ldr	r0, [r3, #0]
 801e4be:	3308      	adds	r3, #8
 801e4c0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e4c4:	4694      	mov	ip, r2
 801e4c6:	4573      	cmp	r3, lr
 801e4c8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801e4cc:	4662      	mov	r2, ip
 801e4ce:	d1f5      	bne.n	801e4bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801e4d0:	6818      	ldr	r0, [r3, #0]
 801e4d2:	f8cc 0000 	str.w	r0, [ip]
 801e4d6:	889b      	ldrh	r3, [r3, #4]
 801e4d8:	f8ac 3004 	strh.w	r3, [ip, #4]
 801e4dc:	b2b3      	uxth	r3, r6
 801e4de:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801e4e2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801e4e6:	1aca      	subs	r2, r1, r3
 801e4e8:	1bcf      	subs	r7, r1, r7
 801e4ea:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801e4ee:	b292      	uxth	r2, r2
 801e4f0:	1afb      	subs	r3, r7, r3
 801e4f2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801e4f6:	10d2      	asrs	r2, r2, #3
 801e4f8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801e4fc:	4302      	orrs	r2, r0
 801e4fe:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801e502:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801e506:	e7b8      	b.n	801e47a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e508:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e50a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e50e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801e510:	f640 6333 	movw	r3, #3635	; 0xe33
 801e514:	4299      	cmp	r1, r3
 801e516:	d110      	bne.n	801e53a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801e518:	6803      	ldr	r3, [r0, #0]
 801e51a:	68db      	ldr	r3, [r3, #12]
 801e51c:	4798      	blx	r3
 801e51e:	7b41      	ldrb	r1, [r0, #13]
 801e520:	00cb      	lsls	r3, r1, #3
 801e522:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e526:	7a03      	ldrb	r3, [r0, #8]
 801e528:	0648      	lsls	r0, r1, #25
 801e52a:	ea43 0302 	orr.w	r3, r3, r2
 801e52e:	bf44      	itt	mi
 801e530:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e534:	b21b      	sxthmi	r3, r3
 801e536:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e53a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801e53e:	462a      	mov	r2, r5
 801e540:	f105 0c08 	add.w	ip, r5, #8
 801e544:	443b      	add	r3, r7
 801e546:	4433      	add	r3, r6
 801e548:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801e54c:	b29b      	uxth	r3, r3
 801e54e:	4635      	mov	r5, r6
 801e550:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e554:	6810      	ldr	r0, [r2, #0]
 801e556:	3208      	adds	r2, #8
 801e558:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801e55c:	4637      	mov	r7, r6
 801e55e:	4562      	cmp	r2, ip
 801e560:	c703      	stmia	r7!, {r0, r1}
 801e562:	463e      	mov	r6, r7
 801e564:	d1f6      	bne.n	801e554 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801e566:	6810      	ldr	r0, [r2, #0]
 801e568:	6038      	str	r0, [r7, #0]
 801e56a:	8892      	ldrh	r2, [r2, #4]
 801e56c:	80ba      	strh	r2, [r7, #4]
 801e56e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e572:	10db      	asrs	r3, r3, #3
 801e574:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e578:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e57c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e580:	4313      	orrs	r3, r2
 801e582:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801e586:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e58a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801e58e:	1a9b      	subs	r3, r3, r2
 801e590:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801e594:	e771      	b.n	801e47a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e596:	f023 0204 	bic.w	r2, r3, #4
 801e59a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801e59e:	428a      	cmp	r2, r1
 801e5a0:	d003      	beq.n	801e5aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801e5a2:	f640 621d 	movw	r2, #3613	; 0xe1d
 801e5a6:	4293      	cmp	r3, r2
 801e5a8:	d120      	bne.n	801e5ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801e5aa:	3b01      	subs	r3, #1
 801e5ac:	4602      	mov	r2, r0
 801e5ae:	4629      	mov	r1, r5
 801e5b0:	4620      	mov	r0, r4
 801e5b2:	b29b      	uxth	r3, r3
 801e5b4:	f7ff ff4a 	bl	801e44c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e5b8:	7b41      	ldrb	r1, [r0, #13]
 801e5ba:	00cb      	lsls	r3, r1, #3
 801e5bc:	0649      	lsls	r1, r1, #25
 801e5be:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e5c2:	7a03      	ldrb	r3, [r0, #8]
 801e5c4:	ea43 0302 	orr.w	r3, r3, r2
 801e5c8:	bf44      	itt	mi
 801e5ca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e5ce:	b21b      	sxthmi	r3, r3
 801e5d0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e5d4:	7b6b      	ldrb	r3, [r5, #13]
 801e5d6:	7aaa      	ldrb	r2, [r5, #10]
 801e5d8:	005b      	lsls	r3, r3, #1
 801e5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e5de:	4313      	orrs	r3, r2
 801e5e0:	115a      	asrs	r2, r3, #5
 801e5e2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801e5e6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801e5ea:	e035      	b.n	801e658 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801e5ec:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801e5f0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801e5f4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801e5f8:	7a2a      	ldrb	r2, [r5, #8]
 801e5fa:	ea42 0201 	orr.w	r2, r2, r1
 801e5fe:	f640 6109 	movw	r1, #3593	; 0xe09
 801e602:	bf1c      	itt	ne
 801e604:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801e608:	b212      	sxthne	r2, r2
 801e60a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801e60e:	f023 0210 	bic.w	r2, r3, #16
 801e612:	428a      	cmp	r2, r1
 801e614:	d003      	beq.n	801e61e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801e616:	f640 6213 	movw	r2, #3603	; 0xe13
 801e61a:	4293      	cmp	r3, r2
 801e61c:	d129      	bne.n	801e672 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801e61e:	7b6e      	ldrb	r6, [r5, #13]
 801e620:	4629      	mov	r1, r5
 801e622:	0076      	lsls	r6, r6, #1
 801e624:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801e628:	7aae      	ldrb	r6, [r5, #10]
 801e62a:	4316      	orrs	r6, r2
 801e62c:	f640 6213 	movw	r2, #3603	; 0xe13
 801e630:	4293      	cmp	r3, r2
 801e632:	4602      	mov	r2, r0
 801e634:	4620      	mov	r0, r4
 801e636:	bf16      	itet	ne
 801e638:	f103 33ff 	addne.w	r3, r3, #4294967295
 801e63c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801e640:	b29b      	uxthne	r3, r3
 801e642:	f7ff ff03 	bl	801e44c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e646:	7b43      	ldrb	r3, [r0, #13]
 801e648:	7a82      	ldrb	r2, [r0, #10]
 801e64a:	005b      	lsls	r3, r3, #1
 801e64c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e650:	4313      	orrs	r3, r2
 801e652:	1af6      	subs	r6, r6, r3
 801e654:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801e658:	7b69      	ldrb	r1, [r5, #13]
 801e65a:	00cb      	lsls	r3, r1, #3
 801e65c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e660:	7a2b      	ldrb	r3, [r5, #8]
 801e662:	4313      	orrs	r3, r2
 801e664:	064a      	lsls	r2, r1, #25
 801e666:	bf44      	itt	mi
 801e668:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e66c:	b21b      	sxthmi	r3, r3
 801e66e:	1bdb      	subs	r3, r3, r7
 801e670:	e747      	b.n	801e502 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801e672:	2300      	movs	r3, #0
 801e674:	e7b7      	b.n	801e5e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801e676:	bf00      	nop
 801e678:	3fc00079 	.word	0x3fc00079

0801e67c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801e67c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e680:	4604      	mov	r4, r0
 801e682:	b942      	cbnz	r2, 801e696 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801e684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e688:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801e68c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801e690:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801e694:	e047      	b.n	801e726 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801e696:	7b51      	ldrb	r1, [r2, #13]
 801e698:	8893      	ldrh	r3, [r2, #4]
 801e69a:	010d      	lsls	r5, r1, #4
 801e69c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801e6a0:	79d5      	ldrb	r5, [r2, #7]
 801e6a2:	4305      	orrs	r5, r0
 801e6a4:	2d04      	cmp	r5, #4
 801e6a6:	bfcc      	ite	gt
 801e6a8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801e6ac:	f04f 0e01 	movle.w	lr, #1
 801e6b0:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801e6b4:	f200 80ab 	bhi.w	801e80e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801e6b8:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801e6bc:	4283      	cmp	r3, r0
 801e6be:	d216      	bcs.n	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e6c0:	f240 605b 	movw	r0, #1627	; 0x65b
 801e6c4:	4283      	cmp	r3, r0
 801e6c6:	d859      	bhi.n	801e77c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801e6c8:	f240 6057 	movw	r0, #1623	; 0x657
 801e6cc:	4283      	cmp	r3, r0
 801e6ce:	d20e      	bcs.n	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e6d0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801e6d4:	d24a      	bcs.n	801e76c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801e6d6:	f240 604e 	movw	r0, #1614	; 0x64e
 801e6da:	4283      	cmp	r3, r0
 801e6dc:	d207      	bcs.n	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e6de:	f240 601a 	movw	r0, #1562	; 0x61a
 801e6e2:	4283      	cmp	r3, r0
 801e6e4:	d02a      	beq.n	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e6e6:	d821      	bhi.n	801e72c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801e6e8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801e6ec:	d35b      	bcc.n	801e7a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e6ee:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801e6f2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e6f6:	f040 80d0 	bne.w	801e89a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801e6fa:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801e6fe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e702:	f040 80ca 	bne.w	801e89a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801e706:	00cb      	lsls	r3, r1, #3
 801e708:	0649      	lsls	r1, r1, #25
 801e70a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e70e:	7a13      	ldrb	r3, [r2, #8]
 801e710:	ea43 0300 	orr.w	r3, r3, r0
 801e714:	bf44      	itt	mi
 801e716:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e71a:	b21b      	sxthmi	r3, r3
 801e71c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e720:	1b5d      	subs	r5, r3, r5
 801e722:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e726:	4610      	mov	r0, r2
 801e728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e72c:	f240 604b 	movw	r0, #1611	; 0x64b
 801e730:	4283      	cmp	r3, r0
 801e732:	d338      	bcc.n	801e7a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e734:	f240 604c 	movw	r0, #1612	; 0x64c
 801e738:	4283      	cmp	r3, r0
 801e73a:	d9d8      	bls.n	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e73c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801e740:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801e744:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e748:	f040 80f3 	bne.w	801e932 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801e74c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e750:	f040 80ef 	bne.w	801e932 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801e754:	00cb      	lsls	r3, r1, #3
 801e756:	064e      	lsls	r6, r1, #25
 801e758:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e75c:	7a13      	ldrb	r3, [r2, #8]
 801e75e:	ea43 0300 	orr.w	r3, r3, r0
 801e762:	bf44      	itt	mi
 801e764:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e768:	b21b      	sxthmi	r3, r3
 801e76a:	e7d9      	b.n	801e720 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801e76c:	f240 6054 	movw	r0, #1620	; 0x654
 801e770:	4283      	cmp	r3, r0
 801e772:	d8e3      	bhi.n	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e774:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801e778:	d9e0      	bls.n	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e77a:	e7b8      	b.n	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e77c:	f240 6074 	movw	r0, #1652	; 0x674
 801e780:	4283      	cmp	r3, r0
 801e782:	d0b4      	beq.n	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e784:	d82d      	bhi.n	801e7e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801e786:	f240 605e 	movw	r0, #1630	; 0x65e
 801e78a:	4283      	cmp	r3, r0
 801e78c:	d804      	bhi.n	801e798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801e78e:	f240 605d 	movw	r0, #1629	; 0x65d
 801e792:	4283      	cmp	r3, r0
 801e794:	d3d2      	bcc.n	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e796:	e7aa      	b.n	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e798:	f240 605f 	movw	r0, #1631	; 0x65f
 801e79c:	4283      	cmp	r3, r0
 801e79e:	d0cd      	beq.n	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e7a0:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801e7a4:	d0a3      	beq.n	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e7a6:	00cb      	lsls	r3, r1, #3
 801e7a8:	0649      	lsls	r1, r1, #25
 801e7aa:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e7ae:	7a13      	ldrb	r3, [r2, #8]
 801e7b0:	ea43 0300 	orr.w	r3, r3, r0
 801e7b4:	bf44      	itt	mi
 801e7b6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e7ba:	b21b      	sxthmi	r3, r3
 801e7bc:	1b5d      	subs	r5, r3, r5
 801e7be:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e7c2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e7c6:	7b53      	ldrb	r3, [r2, #13]
 801e7c8:	015b      	lsls	r3, r3, #5
 801e7ca:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e7ce:	7993      	ldrb	r3, [r2, #6]
 801e7d0:	430b      	orrs	r3, r1
 801e7d2:	2105      	movs	r1, #5
 801e7d4:	005b      	lsls	r3, r3, #1
 801e7d6:	fb93 f3f1 	sdiv	r3, r3, r1
 801e7da:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801e7de:	440b      	add	r3, r1
 801e7e0:	e756      	b.n	801e690 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801e7e2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801e7e6:	4283      	cmp	r3, r0
 801e7e8:	d809      	bhi.n	801e7fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801e7ea:	f240 60df 	movw	r0, #1759	; 0x6df
 801e7ee:	4283      	cmp	r3, r0
 801e7f0:	f4bf af7d 	bcs.w	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e7f4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801e7f8:	2b05      	cmp	r3, #5
 801e7fa:	d8d4      	bhi.n	801e7a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e7fc:	e777      	b.n	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e7fe:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801e802:	4283      	cmp	r3, r0
 801e804:	d09a      	beq.n	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e806:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801e80a:	4283      	cmp	r3, r0
 801e80c:	e7ca      	b.n	801e7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e80e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801e812:	d22b      	bcs.n	801e86c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801e814:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801e818:	4283      	cmp	r3, r0
 801e81a:	d28f      	bcs.n	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e81c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e820:	4283      	cmp	r3, r0
 801e822:	d816      	bhi.n	801e852 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801e824:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801e828:	4283      	cmp	r3, r0
 801e82a:	f4bf af60 	bcs.w	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e82e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801e832:	4283      	cmp	r3, r0
 801e834:	d80a      	bhi.n	801e84c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801e836:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801e83a:	4283      	cmp	r3, r0
 801e83c:	f4bf af57 	bcs.w	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e840:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801e844:	4283      	cmp	r3, r0
 801e846:	f43f af79 	beq.w	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e84a:	e7ac      	b.n	801e7a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e84c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801e850:	e7f8      	b.n	801e844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801e852:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801e856:	4283      	cmp	r3, r0
 801e858:	d802      	bhi.n	801e860 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801e85a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e85e:	e798      	b.n	801e792 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801e860:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801e864:	4283      	cmp	r3, r0
 801e866:	f47f af42 	bne.w	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e86a:	e767      	b.n	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e86c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801e870:	4283      	cmp	r3, r0
 801e872:	f43f af63 	beq.w	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e876:	d802      	bhi.n	801e87e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801e878:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801e87c:	e7f2      	b.n	801e864 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801e87e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801e882:	4283      	cmp	r3, r0
 801e884:	d805      	bhi.n	801e892 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801e886:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801e88a:	4283      	cmp	r3, r0
 801e88c:	f4ff af2f 	bcc.w	801e6ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e890:	e754      	b.n	801e73c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e892:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801e896:	4283      	cmp	r3, r0
 801e898:	e7af      	b.n	801e7fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801e89a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801e89e:	4617      	mov	r7, r2
 801e8a0:	f102 0808 	add.w	r8, r2, #8
 801e8a4:	4666      	mov	r6, ip
 801e8a6:	6838      	ldr	r0, [r7, #0]
 801e8a8:	3708      	adds	r7, #8
 801e8aa:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801e8ae:	46e6      	mov	lr, ip
 801e8b0:	4547      	cmp	r7, r8
 801e8b2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801e8b6:	46f4      	mov	ip, lr
 801e8b8:	d1f5      	bne.n	801e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801e8ba:	6838      	ldr	r0, [r7, #0]
 801e8bc:	f8ce 0000 	str.w	r0, [lr]
 801e8c0:	88b9      	ldrh	r1, [r7, #4]
 801e8c2:	f8ae 1004 	strh.w	r1, [lr, #4]
 801e8c6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e8ca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e8ce:	d009      	beq.n	801e8e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801e8d0:	7b51      	ldrb	r1, [r2, #13]
 801e8d2:	7992      	ldrb	r2, [r2, #6]
 801e8d4:	0149      	lsls	r1, r1, #5
 801e8d6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e8da:	4311      	orrs	r1, r2
 801e8dc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e8e0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e8e4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e8e8:	b2ad      	uxth	r5, r5
 801e8ea:	d00d      	beq.n	801e908 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801e8ec:	442b      	add	r3, r5
 801e8ee:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e8f2:	b29b      	uxth	r3, r3
 801e8f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e8f8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e8fc:	10db      	asrs	r3, r3, #3
 801e8fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e902:	4313      	orrs	r3, r2
 801e904:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e908:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e90c:	00cb      	lsls	r3, r1, #3
 801e90e:	064f      	lsls	r7, r1, #25
 801e910:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e914:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e918:	ea43 0302 	orr.w	r3, r3, r2
 801e91c:	bf44      	itt	mi
 801e91e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e922:	b21b      	sxthmi	r3, r3
 801e924:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e928:	1b5b      	subs	r3, r3, r5
 801e92a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801e92e:	4632      	mov	r2, r6
 801e930:	e6f9      	b.n	801e726 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801e932:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801e936:	4617      	mov	r7, r2
 801e938:	f102 0908 	add.w	r9, r2, #8
 801e93c:	4666      	mov	r6, ip
 801e93e:	6838      	ldr	r0, [r7, #0]
 801e940:	3708      	adds	r7, #8
 801e942:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801e946:	46e0      	mov	r8, ip
 801e948:	454f      	cmp	r7, r9
 801e94a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801e94e:	46c4      	mov	ip, r8
 801e950:	d1f5      	bne.n	801e93e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801e952:	6838      	ldr	r0, [r7, #0]
 801e954:	f8c8 0000 	str.w	r0, [r8]
 801e958:	88b9      	ldrh	r1, [r7, #4]
 801e95a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801e95e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e962:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e966:	d009      	beq.n	801e97c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801e968:	7b51      	ldrb	r1, [r2, #13]
 801e96a:	7992      	ldrb	r2, [r2, #6]
 801e96c:	0149      	lsls	r1, r1, #5
 801e96e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e972:	4311      	orrs	r1, r2
 801e974:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e978:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e97c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e980:	d00e      	beq.n	801e9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801e982:	eba3 030e 	sub.w	r3, r3, lr
 801e986:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e98a:	b29b      	uxth	r3, r3
 801e98c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e990:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e994:	10db      	asrs	r3, r3, #3
 801e996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e99a:	4313      	orrs	r3, r2
 801e99c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e9a0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e9a4:	00cb      	lsls	r3, r1, #3
 801e9a6:	0648      	lsls	r0, r1, #25
 801e9a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e9ac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e9b0:	ea43 0302 	orr.w	r3, r3, r2
 801e9b4:	bf44      	itt	mi
 801e9b6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e9ba:	b21b      	sxthmi	r3, r3
 801e9bc:	1b5d      	subs	r5, r3, r5
 801e9be:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e9c2:	e7b4      	b.n	801e92e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801e9c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801e9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9c8:	461e      	mov	r6, r3
 801e9ca:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e9cc:	4604      	mov	r4, r0
 801e9ce:	4617      	mov	r7, r2
 801e9d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e9d4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e9d8:	f7ea f880 	bl	8008adc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e9dc:	4605      	mov	r5, r0
 801e9de:	b918      	cbnz	r0, 801e9e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801e9e0:	6030      	str	r0, [r6, #0]
 801e9e2:	4628      	mov	r0, r5
 801e9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9e8:	683b      	ldr	r3, [r7, #0]
 801e9ea:	4601      	mov	r1, r0
 801e9ec:	4638      	mov	r0, r7
 801e9ee:	68db      	ldr	r3, [r3, #12]
 801e9f0:	4798      	blx	r3
 801e9f2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e9f6:	4602      	mov	r2, r0
 801e9f8:	6030      	str	r0, [r6, #0]
 801e9fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e9fe:	d213      	bcs.n	801ea28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801ea00:	4643      	mov	r3, r8
 801ea02:	4639      	mov	r1, r7
 801ea04:	4620      	mov	r0, r4
 801ea06:	f7ff fe39 	bl	801e67c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ea0a:	6030      	str	r0, [r6, #0]
 801ea0c:	6833      	ldr	r3, [r6, #0]
 801ea0e:	b143      	cbz	r3, 801ea22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801ea10:	7b5a      	ldrb	r2, [r3, #13]
 801ea12:	7a9b      	ldrb	r3, [r3, #10]
 801ea14:	0052      	lsls	r2, r2, #1
 801ea16:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ea1a:	4313      	orrs	r3, r2
 801ea1c:	bf0c      	ite	eq
 801ea1e:	2301      	moveq	r3, #1
 801ea20:	2300      	movne	r3, #0
 801ea22:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ea26:	e7dc      	b.n	801e9e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801ea28:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ea2c:	b29b      	uxth	r3, r3
 801ea2e:	2b7f      	cmp	r3, #127	; 0x7f
 801ea30:	d804      	bhi.n	801ea3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801ea32:	4639      	mov	r1, r7
 801ea34:	4620      	mov	r0, r4
 801ea36:	f7ff fd15 	bl	801e464 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ea3a:	e7e6      	b.n	801ea0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801ea3c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	d0e3      	beq.n	801ea0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ea44:	f640 1302 	movw	r3, #2306	; 0x902
 801ea48:	429d      	cmp	r5, r3
 801ea4a:	d1df      	bne.n	801ea0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ea4c:	4601      	mov	r1, r0
 801ea4e:	4620      	mov	r0, r4
 801ea50:	f7ff fcd8 	bl	801e404 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ea54:	e7d9      	b.n	801ea0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801ea56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ea56:	b510      	push	{r4, lr}
 801ea58:	4604      	mov	r4, r0
 801ea5a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801ea5e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ea60:	b1e1      	cbz	r1, 801ea9c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801ea62:	2b0a      	cmp	r3, #10
 801ea64:	d02d      	beq.n	801eac2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ea66:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801ea68:	3901      	subs	r1, #1
 801ea6a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ea6e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801ea70:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801ea74:	1c51      	adds	r1, r2, #1
 801ea76:	b289      	uxth	r1, r1
 801ea78:	2901      	cmp	r1, #1
 801ea7a:	bf8a      	itet	hi
 801ea7c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ea80:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801ea82:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801ea84:	1c5a      	adds	r2, r3, #1
 801ea86:	8722      	strh	r2, [r4, #56]	; 0x38
 801ea88:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ea8a:	4413      	add	r3, r2
 801ea8c:	b29b      	uxth	r3, r3
 801ea8e:	2b09      	cmp	r3, #9
 801ea90:	bf88      	it	hi
 801ea92:	3b0a      	subhi	r3, #10
 801ea94:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ea98:	8458      	strh	r0, [r3, #34]	; 0x22
 801ea9a:	e7de      	b.n	801ea5a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ea9c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ea9e:	2b0a      	cmp	r3, #10
 801eaa0:	d00f      	beq.n	801eac2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801eaa2:	4620      	mov	r0, r4
 801eaa4:	f7ff fc6d 	bl	801e382 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801eaa8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801eaaa:	1c5a      	adds	r2, r3, #1
 801eaac:	8722      	strh	r2, [r4, #56]	; 0x38
 801eaae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801eab0:	4413      	add	r3, r2
 801eab2:	b29b      	uxth	r3, r3
 801eab4:	2b09      	cmp	r3, #9
 801eab6:	bf88      	it	hi
 801eab8:	3b0a      	subhi	r3, #10
 801eaba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eabe:	8458      	strh	r0, [r3, #34]	; 0x22
 801eac0:	e7ec      	b.n	801ea9c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801eac2:	bd10      	pop	{r4, pc}

0801eac4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801eac4:	b538      	push	{r3, r4, r5, lr}
 801eac6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801eac8:	4604      	mov	r4, r0
 801eaca:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801eace:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801ead0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801ead2:	3a01      	subs	r2, #1
 801ead4:	8702      	strh	r2, [r0, #56]	; 0x38
 801ead6:	1c5a      	adds	r2, r3, #1
 801ead8:	b292      	uxth	r2, r2
 801eada:	2a09      	cmp	r2, #9
 801eadc:	bf8a      	itet	hi
 801eade:	3b09      	subhi	r3, #9
 801eae0:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801eae2:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801eae4:	f7ff ffb7 	bl	801ea56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801eae8:	8c23      	ldrh	r3, [r4, #32]
 801eaea:	2b01      	cmp	r3, #1
 801eaec:	bf9c      	itt	ls
 801eaee:	3301      	addls	r3, #1
 801eaf0:	8423      	strhls	r3, [r4, #32]
 801eaf2:	8be3      	ldrh	r3, [r4, #30]
 801eaf4:	b90b      	cbnz	r3, 801eafa <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801eaf6:	2302      	movs	r3, #2
 801eaf8:	83e3      	strh	r3, [r4, #30]
 801eafa:	8be3      	ldrh	r3, [r4, #30]
 801eafc:	4628      	mov	r0, r5
 801eafe:	3b01      	subs	r3, #1
 801eb00:	b29b      	uxth	r3, r3
 801eb02:	83e3      	strh	r3, [r4, #30]
 801eb04:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eb08:	8365      	strh	r5, [r4, #26]
 801eb0a:	bd38      	pop	{r3, r4, r5, pc}

0801eb0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801eb0c:	428a      	cmp	r2, r1
 801eb0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb12:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801eb14:	d932      	bls.n	801eb7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801eb16:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801eb18:	1a54      	subs	r4, r2, r1
 801eb1a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801eb1e:	19ee      	adds	r6, r5, r7
 801eb20:	fa1f fe84 	uxth.w	lr, r4
 801eb24:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801eb28:	3e01      	subs	r6, #1
 801eb2a:	b2b4      	uxth	r4, r6
 801eb2c:	eba4 090e 	sub.w	r9, r4, lr
 801eb30:	fa1f f989 	uxth.w	r9, r9
 801eb34:	2c09      	cmp	r4, #9
 801eb36:	4626      	mov	r6, r4
 801eb38:	bf88      	it	hi
 801eb3a:	f1a4 060a 	subhi.w	r6, r4, #10
 801eb3e:	f1bc 0f00 	cmp.w	ip, #0
 801eb42:	f104 34ff 	add.w	r4, r4, #4294967295
 801eb46:	bf08      	it	eq
 801eb48:	f04f 0c02 	moveq.w	ip, #2
 801eb4c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801eb50:	b2a4      	uxth	r4, r4
 801eb52:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eb56:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801eb5a:	454c      	cmp	r4, r9
 801eb5c:	fa1f fc8c 	uxth.w	ip, ip
 801eb60:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801eb64:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801eb68:	d1e4      	bne.n	801eb34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801eb6a:	eba5 050e 	sub.w	r5, r5, lr
 801eb6e:	eb0e 0408 	add.w	r4, lr, r8
 801eb72:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801eb76:	8705      	strh	r5, [r0, #56]	; 0x38
 801eb78:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801eb7c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801eb7e:	250a      	movs	r5, #10
 801eb80:	1a64      	subs	r4, r4, r1
 801eb82:	4439      	add	r1, r7
 801eb84:	b289      	uxth	r1, r1
 801eb86:	8704      	strh	r4, [r0, #56]	; 0x38
 801eb88:	2909      	cmp	r1, #9
 801eb8a:	bf88      	it	hi
 801eb8c:	390a      	subhi	r1, #10
 801eb8e:	86c1      	strh	r1, [r0, #54]	; 0x36
 801eb90:	b18a      	cbz	r2, 801ebb6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801eb92:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801eb94:	3a01      	subs	r2, #1
 801eb96:	3101      	adds	r1, #1
 801eb98:	b292      	uxth	r2, r2
 801eb9a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801eb9e:	8701      	strh	r1, [r0, #56]	; 0x38
 801eba0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801eba2:	b901      	cbnz	r1, 801eba6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801eba4:	86c5      	strh	r5, [r0, #54]	; 0x36
 801eba6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801eba8:	3901      	subs	r1, #1
 801ebaa:	b289      	uxth	r1, r1
 801ebac:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ebae:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ebb2:	844c      	strh	r4, [r1, #34]	; 0x22
 801ebb4:	e7ec      	b.n	801eb90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801ebb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ebba:	f7ff bf4c 	b.w	801ea56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801ebbe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ebbe:	b570      	push	{r4, r5, r6, lr}
 801ebc0:	2500      	movs	r5, #0
 801ebc2:	4295      	cmp	r5, r2
 801ebc4:	d011      	beq.n	801ebea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801ebc6:	8bc4      	ldrh	r4, [r0, #30]
 801ebc8:	f831 6b02 	ldrh.w	r6, [r1], #2
 801ebcc:	4414      	add	r4, r2
 801ebce:	3c01      	subs	r4, #1
 801ebd0:	1b64      	subs	r4, r4, r5
 801ebd2:	b2a4      	uxth	r4, r4
 801ebd4:	2c01      	cmp	r4, #1
 801ebd6:	bf88      	it	hi
 801ebd8:	3c02      	subhi	r4, #2
 801ebda:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ebde:	8b64      	ldrh	r4, [r4, #26]
 801ebe0:	42b4      	cmp	r4, r6
 801ebe2:	d117      	bne.n	801ec14 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801ebe4:	3501      	adds	r5, #1
 801ebe6:	b2ad      	uxth	r5, r5
 801ebe8:	e7eb      	b.n	801ebc2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801ebea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ebee:	2400      	movs	r4, #0
 801ebf0:	4413      	add	r3, r2
 801ebf2:	b2a2      	uxth	r2, r4
 801ebf4:	429a      	cmp	r2, r3
 801ebf6:	da0f      	bge.n	801ec18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801ebf8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801ebfa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801ebfe:	3401      	adds	r4, #1
 801ec00:	4432      	add	r2, r6
 801ec02:	b292      	uxth	r2, r2
 801ec04:	2a09      	cmp	r2, #9
 801ec06:	bf88      	it	hi
 801ec08:	3a0a      	subhi	r2, #10
 801ec0a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ec0e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801ec10:	42aa      	cmp	r2, r5
 801ec12:	d0ee      	beq.n	801ebf2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801ec14:	2000      	movs	r0, #0
 801ec16:	bd70      	pop	{r4, r5, r6, pc}
 801ec18:	2001      	movs	r0, #1
 801ec1a:	e7fc      	b.n	801ec16 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801ec1c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ec1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec20:	4605      	mov	r5, r0
 801ec22:	4616      	mov	r6, r2
 801ec24:	1c8c      	adds	r4, r1, #2
 801ec26:	8809      	ldrh	r1, [r1, #0]
 801ec28:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ec2c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ec30:	42b3      	cmp	r3, r6
 801ec32:	d124      	bne.n	801ec7e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ec34:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ec38:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ec3c:	f001 070f 	and.w	r7, r1, #15
 801ec40:	4652      	mov	r2, sl
 801ec42:	f8cd 8000 	str.w	r8, [sp]
 801ec46:	464b      	mov	r3, r9
 801ec48:	4621      	mov	r1, r4
 801ec4a:	4628      	mov	r0, r5
 801ec4c:	f7ff ffb7 	bl	801ebbe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ec50:	4683      	mov	fp, r0
 801ec52:	b168      	cbz	r0, 801ec70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ec54:	eb0a 0109 	add.w	r1, sl, r9
 801ec58:	463a      	mov	r2, r7
 801ec5a:	4628      	mov	r0, r5
 801ec5c:	4441      	add	r1, r8
 801ec5e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ec62:	4649      	mov	r1, r9
 801ec64:	f7ff ff52 	bl	801eb0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ec68:	4658      	mov	r0, fp
 801ec6a:	b003      	add	sp, #12
 801ec6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec70:	eb07 010a 	add.w	r1, r7, sl
 801ec74:	4449      	add	r1, r9
 801ec76:	4441      	add	r1, r8
 801ec78:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ec7c:	e7d2      	b.n	801ec24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ec7e:	f04f 0b00 	mov.w	fp, #0
 801ec82:	e7f1      	b.n	801ec68 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ec84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ec84:	b570      	push	{r4, r5, r6, lr}
 801ec86:	8810      	ldrh	r0, [r2, #0]
 801ec88:	4298      	cmp	r0, r3
 801ec8a:	d817      	bhi.n	801ecbc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ec8c:	1e48      	subs	r0, r1, #1
 801ec8e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ec92:	4298      	cmp	r0, r3
 801ec94:	d312      	bcc.n	801ecbc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ec96:	2400      	movs	r4, #0
 801ec98:	428c      	cmp	r4, r1
 801ec9a:	d20f      	bcs.n	801ecbc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ec9c:	1860      	adds	r0, r4, r1
 801ec9e:	1040      	asrs	r0, r0, #1
 801eca0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801eca4:	0085      	lsls	r5, r0, #2
 801eca6:	42b3      	cmp	r3, r6
 801eca8:	d902      	bls.n	801ecb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ecaa:	3001      	adds	r0, #1
 801ecac:	b284      	uxth	r4, r0
 801ecae:	e7f3      	b.n	801ec98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ecb0:	d201      	bcs.n	801ecb6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ecb2:	b281      	uxth	r1, r0
 801ecb4:	e7f0      	b.n	801ec98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ecb6:	442a      	add	r2, r5
 801ecb8:	8850      	ldrh	r0, [r2, #2]
 801ecba:	bd70      	pop	{r4, r5, r6, pc}
 801ecbc:	2000      	movs	r0, #0
 801ecbe:	e7fc      	b.n	801ecba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801ecc0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ecc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ecc4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801ecc6:	4604      	mov	r4, r0
 801ecc8:	260b      	movs	r6, #11
 801ecca:	886f      	ldrh	r7, [r5, #2]
 801eccc:	087f      	lsrs	r7, r7, #1
 801ecce:	3e01      	subs	r6, #1
 801ecd0:	d013      	beq.n	801ecfa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ecd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ecd4:	462a      	mov	r2, r5
 801ecd6:	4639      	mov	r1, r7
 801ecd8:	4620      	mov	r0, r4
 801ecda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ecde:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ece2:	4643      	mov	r3, r8
 801ece4:	f7ff ffce 	bl	801ec84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801ece8:	b138      	cbz	r0, 801ecfa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ecea:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801ecee:	4642      	mov	r2, r8
 801ecf0:	4620      	mov	r0, r4
 801ecf2:	f7ff ff93 	bl	801ec1c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801ecf6:	2800      	cmp	r0, #0
 801ecf8:	d1e9      	bne.n	801ecce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801ecfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801ed00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801ed00:	b570      	push	{r4, r5, r6, lr}
 801ed02:	694a      	ldr	r2, [r1, #20]
 801ed04:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801ed06:	684b      	ldr	r3, [r1, #4]
 801ed08:	1b54      	subs	r4, r2, r5
 801ed0a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801ed0c:	f000 8106 	beq.w	801ef1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801ed10:	1b9b      	subs	r3, r3, r6
 801ed12:	d003      	beq.n	801ed1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ed14:	4363      	muls	r3, r4
 801ed16:	2210      	movs	r2, #16
 801ed18:	fb93 f3f2 	sdiv	r3, r3, r2
 801ed1c:	680c      	ldr	r4, [r1, #0]
 801ed1e:	698a      	ldr	r2, [r1, #24]
 801ed20:	1b65      	subs	r5, r4, r5
 801ed22:	f000 80fd 	beq.w	801ef20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801ed26:	1b92      	subs	r2, r2, r6
 801ed28:	d003      	beq.n	801ed32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ed2a:	436a      	muls	r2, r5
 801ed2c:	2410      	movs	r4, #16
 801ed2e:	fb92 f2f4 	sdiv	r2, r2, r4
 801ed32:	1a9b      	subs	r3, r3, r2
 801ed34:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801ef5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ed38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ed3c:	460a      	mov	r2, r1
 801ed3e:	ee07 3a90 	vmov	s15, r3
 801ed42:	f100 040c 	add.w	r4, r0, #12
 801ed46:	4603      	mov	r3, r0
 801ed48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed4c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ed50:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ed54:	eeb1 6a43 	vneg.f32	s12, s6
 801ed58:	edd2 7a02 	vldr	s15, [r2, #8]
 801ed5c:	3214      	adds	r2, #20
 801ed5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ed62:	ece3 6a01 	vstmia	r3!, {s13}
 801ed66:	429c      	cmp	r4, r3
 801ed68:	ed52 7a02 	vldr	s15, [r2, #-8]
 801ed6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ed70:	edc3 7a02 	vstr	s15, [r3, #8]
 801ed74:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ed78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ed7c:	edc3 7a05 	vstr	s15, [r3, #20]
 801ed80:	d1ea      	bne.n	801ed58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801ed82:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ed84:	698b      	ldr	r3, [r1, #24]
 801ed86:	edd0 4a02 	vldr	s9, [r0, #8]
 801ed8a:	1a9b      	subs	r3, r3, r2
 801ed8c:	edd0 3a00 	vldr	s7, [r0]
 801ed90:	edd0 6a01 	vldr	s13, [r0, #4]
 801ed94:	ee07 3a90 	vmov	s15, r3
 801ed98:	684b      	ldr	r3, [r1, #4]
 801ed9a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ed9e:	ed90 5a05 	vldr	s10, [r0, #20]
 801eda2:	1a9b      	subs	r3, r3, r2
 801eda4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eda8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801edac:	ed90 2a03 	vldr	s4, [r0, #12]
 801edb0:	ee07 3a10 	vmov	s14, r3
 801edb4:	edd0 5a04 	vldr	s11, [r0, #16]
 801edb8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801edbc:	ed90 1a07 	vldr	s2, [r0, #28]
 801edc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801edc4:	edd0 2a06 	vldr	s5, [r0, #24]
 801edc8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801edcc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801edd0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801edd4:	ee32 5a45 	vsub.f32	s10, s4, s10
 801edd8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801eddc:	ee67 7a83 	vmul.f32	s15, s15, s6
 801ede0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801ede4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ede6:	694a      	ldr	r2, [r1, #20]
 801ede8:	1b13      	subs	r3, r2, r4
 801edea:	ee07 3a10 	vmov	s14, r3
 801edee:	680b      	ldr	r3, [r1, #0]
 801edf0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801edf4:	1b1b      	subs	r3, r3, r4
 801edf6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801edfa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801edfe:	ee07 3a10 	vmov	s14, r3
 801ee02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ee06:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ee0a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801ee0e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801ee12:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801ee16:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ee18:	698b      	ldr	r3, [r1, #24]
 801ee1a:	1a9b      	subs	r3, r3, r2
 801ee1c:	ee06 3a90 	vmov	s13, r3
 801ee20:	684b      	ldr	r3, [r1, #4]
 801ee22:	1a9b      	subs	r3, r3, r2
 801ee24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ee28:	ee07 3a10 	vmov	s14, r3
 801ee2c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801ee30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ee34:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801ee38:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ee3c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ee40:	ee66 6a83 	vmul.f32	s13, s13, s6
 801ee44:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801ee48:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ee4a:	694a      	ldr	r2, [r1, #20]
 801ee4c:	1b13      	subs	r3, r2, r4
 801ee4e:	ee07 3a10 	vmov	s14, r3
 801ee52:	680b      	ldr	r3, [r1, #0]
 801ee54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ee58:	1b1b      	subs	r3, r3, r4
 801ee5a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ee5e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801ee62:	ee07 3a10 	vmov	s14, r3
 801ee66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ee6a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ee6e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ee72:	edd0 5a08 	vldr	s11, [r0, #32]
 801ee76:	ee31 1a65 	vsub.f32	s2, s2, s11
 801ee7a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801ee7e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801ee82:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801ee86:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ee88:	698b      	ldr	r3, [r1, #24]
 801ee8a:	1a9b      	subs	r3, r3, r2
 801ee8c:	ee07 3a10 	vmov	s14, r3
 801ee90:	684b      	ldr	r3, [r1, #4]
 801ee92:	1a9b      	subs	r3, r3, r2
 801ee94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ee98:	ee01 3a90 	vmov	s3, r3
 801ee9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801eea0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801eea4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801eea8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801eeac:	eea1 7a21 	vfma.f32	s14, s2, s3
 801eeb0:	ee27 7a03 	vmul.f32	s14, s14, s6
 801eeb4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801eeb8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801eeba:	694a      	ldr	r2, [r1, #20]
 801eebc:	1b13      	subs	r3, r2, r4
 801eebe:	ee03 3a10 	vmov	s6, r3
 801eec2:	680b      	ldr	r3, [r1, #0]
 801eec4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801eec8:	1b1b      	subs	r3, r3, r4
 801eeca:	ee23 3a04 	vmul.f32	s6, s6, s8
 801eece:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801eed2:	ee03 3a10 	vmov	s6, r3
 801eed6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801eeda:	ee23 4a04 	vmul.f32	s8, s6, s8
 801eede:	eee1 5a04 	vfma.f32	s11, s2, s8
 801eee2:	ee25 6a86 	vmul.f32	s12, s11, s12
 801eee6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801eeea:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801eeee:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801eef2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801eef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eefa:	dd13      	ble.n	801ef24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801eefc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ef00:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801ef04:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ef06:	eee3 7a87 	vfma.f32	s15, s7, s14
 801ef0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ef0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef12:	dd15      	ble.n	801ef40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801ef14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ef18:	6403      	str	r3, [r0, #64]	; 0x40
 801ef1a:	bd70      	pop	{r4, r5, r6, pc}
 801ef1c:	4623      	mov	r3, r4
 801ef1e:	e6fd      	b.n	801ed1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ef20:	462a      	mov	r2, r5
 801ef22:	e706      	b.n	801ed32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ef24:	d502      	bpl.n	801ef2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801ef26:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ef2a:	e7e9      	b.n	801ef00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801ef2c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801ef30:	eea3 2a85 	vfma.f32	s4, s7, s10
 801ef34:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801ef38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef3c:	dade      	bge.n	801eefc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801ef3e:	e7f2      	b.n	801ef26 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801ef40:	d502      	bpl.n	801ef48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801ef42:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ef46:	e7e7      	b.n	801ef18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801ef48:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801ef4c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801ef50:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801ef54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef58:	dadc      	bge.n	801ef14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801ef5a:	e7f2      	b.n	801ef42 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801ef5c:	3d800000 	.word	0x3d800000

0801ef60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801ef60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef64:	2714      	movs	r7, #20
 801ef66:	435f      	muls	r7, r3
 801ef68:	eb02 0c07 	add.w	ip, r2, r7
 801ef6c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801ef70:	f115 0e0f 	adds.w	lr, r5, #15
 801ef74:	f100 80a2 	bmi.w	801f0bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801ef78:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801ef7c:	9c08      	ldr	r4, [sp, #32]
 801ef7e:	2614      	movs	r6, #20
 801ef80:	f8c0 e014 	str.w	lr, [r0, #20]
 801ef84:	4366      	muls	r6, r4
 801ef86:	eb02 0806 	add.w	r8, r2, r6
 801ef8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ef8e:	f115 040f 	adds.w	r4, r5, #15
 801ef92:	f100 809f 	bmi.w	801f0d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801ef96:	1124      	asrs	r4, r4, #4
 801ef98:	eba4 040e 	sub.w	r4, r4, lr
 801ef9c:	6184      	str	r4, [r0, #24]
 801ef9e:	2c00      	cmp	r4, #0
 801efa0:	f000 808a 	beq.w	801f0b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801efa4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801efa8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801efac:	5995      	ldr	r5, [r2, r6]
 801efae:	eba4 0809 	sub.w	r8, r4, r9
 801efb2:	59d4      	ldr	r4, [r2, r7]
 801efb4:	eba5 0a04 	sub.w	sl, r5, r4
 801efb8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801efbc:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801efc0:	fb0e fe05 	mul.w	lr, lr, r5
 801efc4:	fb0a ee19 	mls	lr, sl, r9, lr
 801efc8:	fb08 e404 	mla	r4, r8, r4, lr
 801efcc:	3c01      	subs	r4, #1
 801efce:	19a4      	adds	r4, r4, r6
 801efd0:	f100 808c 	bmi.w	801f0ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801efd4:	fb94 fef6 	sdiv	lr, r4, r6
 801efd8:	fb06 441e 	mls	r4, r6, lr, r4
 801efdc:	f8c0 e000 	str.w	lr, [r0]
 801efe0:	6104      	str	r4, [r0, #16]
 801efe2:	2d00      	cmp	r5, #0
 801efe4:	f2c0 8095 	blt.w	801f112 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801efe8:	fb95 f4f6 	sdiv	r4, r5, r6
 801efec:	fb06 5514 	mls	r5, r6, r4, r5
 801eff0:	6044      	str	r4, [r0, #4]
 801eff2:	6085      	str	r5, [r0, #8]
 801eff4:	60c6      	str	r6, [r0, #12]
 801eff6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801effa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801effe:	6945      	ldr	r5, [r0, #20]
 801f000:	59d2      	ldr	r2, [r2, r7]
 801f002:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801f006:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801f134 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801f00a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801f00e:	ee07 4a10 	vmov	s14, r4
 801f012:	6804      	ldr	r4, [r0, #0]
 801f014:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801f018:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f01c:	ee07 2a90 	vmov	s15, r2
 801f020:	ee27 7a26 	vmul.f32	s14, s14, s13
 801f024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f028:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f02c:	edd3 6a00 	vldr	s13, [r3]
 801f030:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f034:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801f038:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f03c:	edc0 6a07 	vstr	s13, [r0, #28]
 801f040:	edd0 6a01 	vldr	s13, [r0, #4]
 801f044:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801f048:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f04c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801f050:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f054:	ed80 6a08 	vstr	s12, [r0, #32]
 801f058:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801f05a:	6242      	str	r2, [r0, #36]	; 0x24
 801f05c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801f060:	ed93 6a03 	vldr	s12, [r3, #12]
 801f064:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f068:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801f06c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f070:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801f074:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801f078:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801f07c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f080:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801f084:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f086:	6302      	str	r2, [r0, #48]	; 0x30
 801f088:	ed93 6a06 	vldr	s12, [r3, #24]
 801f08c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801f090:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f094:	eeb0 7a46 	vmov.f32	s14, s12
 801f098:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801f09c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f0a0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801f0a4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801f0a8:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801f0ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f0b0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801f0b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801f0b6:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f0bc:	2410      	movs	r4, #16
 801f0be:	f1c5 0501 	rsb	r5, r5, #1
 801f0c2:	fb9e fef4 	sdiv	lr, lr, r4
 801f0c6:	f015 050f 	ands.w	r5, r5, #15
 801f0ca:	bf18      	it	ne
 801f0cc:	2501      	movne	r5, #1
 801f0ce:	ebae 0e05 	sub.w	lr, lr, r5
 801f0d2:	e753      	b.n	801ef7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801f0d4:	f04f 0910 	mov.w	r9, #16
 801f0d8:	f1c5 0501 	rsb	r5, r5, #1
 801f0dc:	fb94 f4f9 	sdiv	r4, r4, r9
 801f0e0:	f015 050f 	ands.w	r5, r5, #15
 801f0e4:	bf18      	it	ne
 801f0e6:	2501      	movne	r5, #1
 801f0e8:	1b64      	subs	r4, r4, r5
 801f0ea:	e755      	b.n	801ef98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801f0ec:	4264      	negs	r4, r4
 801f0ee:	fb94 fef6 	sdiv	lr, r4, r6
 801f0f2:	f1ce 0800 	rsb	r8, lr, #0
 801f0f6:	fb06 441e 	mls	r4, r6, lr, r4
 801f0fa:	f8c0 8000 	str.w	r8, [r0]
 801f0fe:	6104      	str	r4, [r0, #16]
 801f100:	2c00      	cmp	r4, #0
 801f102:	f43f af6e 	beq.w	801efe2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801f106:	ea6f 0e0e 	mvn.w	lr, lr
 801f10a:	1b34      	subs	r4, r6, r4
 801f10c:	f8c0 e000 	str.w	lr, [r0]
 801f110:	e766      	b.n	801efe0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801f112:	426d      	negs	r5, r5
 801f114:	fb95 f4f6 	sdiv	r4, r5, r6
 801f118:	f1c4 0e00 	rsb	lr, r4, #0
 801f11c:	fb06 5514 	mls	r5, r6, r4, r5
 801f120:	f8c0 e004 	str.w	lr, [r0, #4]
 801f124:	6085      	str	r5, [r0, #8]
 801f126:	2d00      	cmp	r5, #0
 801f128:	f43f af64 	beq.w	801eff4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801f12c:	43e4      	mvns	r4, r4
 801f12e:	1b75      	subs	r5, r6, r5
 801f130:	6044      	str	r4, [r0, #4]
 801f132:	e75e      	b.n	801eff2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801f134:	3d800000 	.word	0x3d800000

0801f138 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801f138:	4b01      	ldr	r3, [pc, #4]	; (801f140 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801f13a:	6018      	str	r0, [r3, #0]
 801f13c:	4770      	bx	lr
 801f13e:	bf00      	nop
 801f140:	240262ec 	.word	0x240262ec

0801f144 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801f144:	4b06      	ldr	r3, [pc, #24]	; (801f160 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801f146:	881a      	ldrh	r2, [r3, #0]
 801f148:	4282      	cmp	r2, r0
 801f14a:	d807      	bhi.n	801f15c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801f14c:	4b05      	ldr	r3, [pc, #20]	; (801f164 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801f14e:	881b      	ldrh	r3, [r3, #0]
 801f150:	4413      	add	r3, r2
 801f152:	4298      	cmp	r0, r3
 801f154:	bfac      	ite	ge
 801f156:	2000      	movge	r0, #0
 801f158:	2001      	movlt	r0, #1
 801f15a:	4770      	bx	lr
 801f15c:	2000      	movs	r0, #0
 801f15e:	4770      	bx	lr
 801f160:	2402630c 	.word	0x2402630c
 801f164:	24026310 	.word	0x24026310

0801f168 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801f168:	b508      	push	{r3, lr}
 801f16a:	4601      	mov	r1, r0
 801f16c:	f7ff ffea 	bl	801f144 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f170:	b118      	cbz	r0, 801f17a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801f172:	4b02      	ldr	r3, [pc, #8]	; (801f17c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801f17a:	bd08      	pop	{r3, pc}
 801f17c:	240262f0 	.word	0x240262f0

0801f180 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801f180:	b538      	push	{r3, r4, r5, lr}
 801f182:	4604      	mov	r4, r0
 801f184:	f7ff ffde 	bl	801f144 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f188:	b188      	cbz	r0, 801f1ae <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801f18a:	4b09      	ldr	r3, [pc, #36]	; (801f1b0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801f18c:	881a      	ldrh	r2, [r3, #0]
 801f18e:	4b09      	ldr	r3, [pc, #36]	; (801f1b4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801f190:	1aa4      	subs	r4, r4, r2
 801f192:	220e      	movs	r2, #14
 801f194:	681d      	ldr	r5, [r3, #0]
 801f196:	4362      	muls	r2, r4
 801f198:	18ac      	adds	r4, r5, r2
 801f19a:	7b23      	ldrb	r3, [r4, #12]
 801f19c:	f013 0320 	ands.w	r3, r3, #32
 801f1a0:	bf17      	itett	ne
 801f1a2:	680b      	ldrne	r3, [r1, #0]
 801f1a4:	4618      	moveq	r0, r3
 801f1a6:	50ab      	strne	r3, [r5, r2]
 801f1a8:	684b      	ldrne	r3, [r1, #4]
 801f1aa:	bf18      	it	ne
 801f1ac:	6063      	strne	r3, [r4, #4]
 801f1ae:	bd38      	pop	{r3, r4, r5, pc}
 801f1b0:	2402630c 	.word	0x2402630c
 801f1b4:	240262f4 	.word	0x240262f4

0801f1b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801f1b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f1bc:	4606      	mov	r6, r0
 801f1be:	460c      	mov	r4, r1
 801f1c0:	f7ff ffc0 	bl	801f144 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f1c4:	b918      	cbnz	r0, 801f1ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801f1c6:	2000      	movs	r0, #0
 801f1c8:	b002      	add	sp, #8
 801f1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f1ce:	4608      	mov	r0, r1
 801f1d0:	f7fa fe95 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801f1d4:	2800      	cmp	r0, #0
 801f1d6:	d1f6      	bne.n	801f1c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f1d8:	4b3f      	ldr	r3, [pc, #252]	; (801f2d8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801f1da:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801f2dc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801f1de:	881d      	ldrh	r5, [r3, #0]
 801f1e0:	f8d9 a000 	ldr.w	sl, [r9]
 801f1e4:	46c8      	mov	r8, r9
 801f1e6:	1b73      	subs	r3, r6, r5
 801f1e8:	250e      	movs	r5, #14
 801f1ea:	435d      	muls	r5, r3
 801f1ec:	eb0a 0705 	add.w	r7, sl, r5
 801f1f0:	7b3b      	ldrb	r3, [r7, #12]
 801f1f2:	f013 0f20 	tst.w	r3, #32
 801f1f6:	d0e6      	beq.n	801f1c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f1f8:	4621      	mov	r1, r4
 801f1fa:	4638      	mov	r0, r7
 801f1fc:	f7fd fb76 	bl	801c8ec <_ZNK8touchgfx4Rect8includesERKS0_>
 801f200:	2800      	cmp	r0, #0
 801f202:	d1e1      	bne.n	801f1c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f204:	4639      	mov	r1, r7
 801f206:	4620      	mov	r0, r4
 801f208:	f7fd fb70 	bl	801c8ec <_ZNK8touchgfx4Rect8includesERKS0_>
 801f20c:	b108      	cbz	r0, 801f212 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801f20e:	4621      	mov	r1, r4
 801f210:	e020      	b.n	801f254 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801f212:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f216:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801f21a:	429a      	cmp	r2, r3
 801f21c:	d11e      	bne.n	801f25c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f21e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f222:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801f226:	429a      	cmp	r2, r3
 801f228:	d118      	bne.n	801f25c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f22a:	6820      	ldr	r0, [r4, #0]
 801f22c:	466b      	mov	r3, sp
 801f22e:	6861      	ldr	r1, [r4, #4]
 801f230:	c303      	stmia	r3!, {r0, r1}
 801f232:	4639      	mov	r1, r7
 801f234:	4668      	mov	r0, sp
 801f236:	f7fd fb7f 	bl	801c938 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f23a:	f8d9 3000 	ldr.w	r3, [r9]
 801f23e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801f242:	442b      	add	r3, r5
 801f244:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f248:	4413      	add	r3, r2
 801f24a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801f24e:	4293      	cmp	r3, r2
 801f250:	dc04      	bgt.n	801f25c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f252:	4669      	mov	r1, sp
 801f254:	4630      	mov	r0, r6
 801f256:	f7ff ff93 	bl	801f180 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801f25a:	e7b5      	b.n	801f1c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f25c:	f8d8 3000 	ldr.w	r3, [r8]
 801f260:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f264:	442b      	add	r3, r5
 801f266:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f26a:	4291      	cmp	r1, r2
 801f26c:	d119      	bne.n	801f2a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f26e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f272:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f276:	4291      	cmp	r1, r2
 801f278:	d113      	bne.n	801f2a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f27a:	6820      	ldr	r0, [r4, #0]
 801f27c:	466a      	mov	r2, sp
 801f27e:	6861      	ldr	r1, [r4, #4]
 801f280:	c203      	stmia	r2!, {r0, r1}
 801f282:	4619      	mov	r1, r3
 801f284:	4668      	mov	r0, sp
 801f286:	f7fd fb57 	bl	801c938 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f28a:	f8d8 3000 	ldr.w	r3, [r8]
 801f28e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f292:	442b      	add	r3, r5
 801f294:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f298:	4413      	add	r3, r2
 801f29a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f29e:	4293      	cmp	r3, r2
 801f2a0:	ddd7      	ble.n	801f252 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801f2a2:	4620      	mov	r0, r4
 801f2a4:	f7fa fe2b 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801f2a8:	b990      	cbnz	r0, 801f2d0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801f2aa:	88a7      	ldrh	r7, [r4, #4]
 801f2ac:	88e3      	ldrh	r3, [r4, #6]
 801f2ae:	fb17 f703 	smulbb	r7, r7, r3
 801f2b2:	f8d8 3000 	ldr.w	r3, [r8]
 801f2b6:	441d      	add	r5, r3
 801f2b8:	4628      	mov	r0, r5
 801f2ba:	f7fa fe20 	bl	8019efe <_ZNK8touchgfx4Rect7isEmptyEv>
 801f2be:	b948      	cbnz	r0, 801f2d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801f2c0:	88ab      	ldrh	r3, [r5, #4]
 801f2c2:	88ea      	ldrh	r2, [r5, #6]
 801f2c4:	fb13 f302 	smulbb	r3, r3, r2
 801f2c8:	42bb      	cmp	r3, r7
 801f2ca:	f6bf af7c 	bge.w	801f1c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f2ce:	e79e      	b.n	801f20e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801f2d0:	2700      	movs	r7, #0
 801f2d2:	e7ee      	b.n	801f2b2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801f2d4:	2300      	movs	r3, #0
 801f2d6:	e7f7      	b.n	801f2c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801f2d8:	2402630c 	.word	0x2402630c
 801f2dc:	240262f4 	.word	0x240262f4

0801f2e0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2e2:	4c24      	ldr	r4, [pc, #144]	; (801f374 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801f2e4:	6823      	ldr	r3, [r4, #0]
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d042      	beq.n	801f370 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f2ea:	4a23      	ldr	r2, [pc, #140]	; (801f378 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801f2ec:	4d23      	ldr	r5, [pc, #140]	; (801f37c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801f2ee:	8811      	ldrh	r1, [r2, #0]
 801f2f0:	f8b5 c000 	ldrh.w	ip, [r5]
 801f2f4:	4822      	ldr	r0, [pc, #136]	; (801f380 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801f2f6:	4461      	add	r1, ip
 801f2f8:	1c4a      	adds	r2, r1, #1
 801f2fa:	008f      	lsls	r7, r1, #2
 801f2fc:	f022 0201 	bic.w	r2, r2, #1
 801f300:	19de      	adds	r6, r3, r7
 801f302:	0412      	lsls	r2, r2, #16
 801f304:	6006      	str	r6, [r0, #0]
 801f306:	4e1f      	ldr	r6, [pc, #124]	; (801f384 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801f308:	0c12      	lsrs	r2, r2, #16
 801f30a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801f30e:	19da      	adds	r2, r3, r7
 801f310:	6032      	str	r2, [r6, #0]
 801f312:	220e      	movs	r2, #14
 801f314:	fb02 f20c 	mul.w	r2, r2, ip
 801f318:	3203      	adds	r2, #3
 801f31a:	f022 0203 	bic.w	r2, r2, #3
 801f31e:	443a      	add	r2, r7
 801f320:	4f19      	ldr	r7, [pc, #100]	; (801f388 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f322:	4413      	add	r3, r2
 801f324:	603b      	str	r3, [r7, #0]
 801f326:	2300      	movs	r3, #0
 801f328:	4f18      	ldr	r7, [pc, #96]	; (801f38c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f32a:	469c      	mov	ip, r3
 801f32c:	803b      	strh	r3, [r7, #0]
 801f32e:	4f18      	ldr	r7, [pc, #96]	; (801f390 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f330:	683f      	ldr	r7, [r7, #0]
 801f332:	1aba      	subs	r2, r7, r2
 801f334:	4f17      	ldr	r7, [pc, #92]	; (801f394 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f336:	603a      	str	r2, [r7, #0]
 801f338:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801f33c:	4a16      	ldr	r2, [pc, #88]	; (801f398 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f33e:	8013      	strh	r3, [r2, #0]
 801f340:	428b      	cmp	r3, r1
 801f342:	d10d      	bne.n	801f360 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801f344:	882d      	ldrh	r5, [r5, #0]
 801f346:	2300      	movs	r3, #0
 801f348:	6830      	ldr	r0, [r6, #0]
 801f34a:	240e      	movs	r4, #14
 801f34c:	429d      	cmp	r5, r3
 801f34e:	d90f      	bls.n	801f370 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f350:	fb04 0203 	mla	r2, r4, r3, r0
 801f354:	3301      	adds	r3, #1
 801f356:	7b11      	ldrb	r1, [r2, #12]
 801f358:	f36f 1145 	bfc	r1, #5, #1
 801f35c:	7311      	strb	r1, [r2, #12]
 801f35e:	e7f5      	b.n	801f34c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801f360:	6822      	ldr	r2, [r4, #0]
 801f362:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801f366:	6802      	ldr	r2, [r0, #0]
 801f368:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801f36c:	3301      	adds	r3, #1
 801f36e:	e7e7      	b.n	801f340 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801f370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f372:	bf00      	nop
 801f374:	240262f0 	.word	0x240262f0
 801f378:	2402630c 	.word	0x2402630c
 801f37c:	24026310 	.word	0x24026310
 801f380:	24026304 	.word	0x24026304
 801f384:	240262f4 	.word	0x240262f4
 801f388:	240262fc 	.word	0x240262fc
 801f38c:	2402630e 	.word	0x2402630e
 801f390:	240262f8 	.word	0x240262f8
 801f394:	24026308 	.word	0x24026308
 801f398:	24026300 	.word	0x24026300

0801f39c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801f39c:	4b06      	ldr	r3, [pc, #24]	; (801f3b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801f39e:	681b      	ldr	r3, [r3, #0]
 801f3a0:	b943      	cbnz	r3, 801f3b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f3a2:	b139      	cbz	r1, 801f3b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f3a4:	4b05      	ldr	r3, [pc, #20]	; (801f3bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801f3a6:	801a      	strh	r2, [r3, #0]
 801f3a8:	4b05      	ldr	r3, [pc, #20]	; (801f3c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801f3aa:	6019      	str	r1, [r3, #0]
 801f3ac:	4b05      	ldr	r3, [pc, #20]	; (801f3c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801f3ae:	6018      	str	r0, [r3, #0]
 801f3b0:	f7ff bf96 	b.w	801f2e0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801f3b4:	4770      	bx	lr
 801f3b6:	bf00      	nop
 801f3b8:	240262fc 	.word	0x240262fc
 801f3bc:	24026310 	.word	0x24026310
 801f3c0:	240262f8 	.word	0x240262f8
 801f3c4:	240262f0 	.word	0x240262f0

0801f3c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801f3c8:	b470      	push	{r4, r5, r6}
 801f3ca:	4c07      	ldr	r4, [pc, #28]	; (801f3e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801f3cc:	4605      	mov	r5, r0
 801f3ce:	4610      	mov	r0, r2
 801f3d0:	9a03      	ldr	r2, [sp, #12]
 801f3d2:	6826      	ldr	r6, [r4, #0]
 801f3d4:	b936      	cbnz	r6, 801f3e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801f3d6:	6025      	str	r5, [r4, #0]
 801f3d8:	4c04      	ldr	r4, [pc, #16]	; (801f3ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801f3da:	8021      	strh	r1, [r4, #0]
 801f3dc:	4619      	mov	r1, r3
 801f3de:	bc70      	pop	{r4, r5, r6}
 801f3e0:	f7ff bfdc 	b.w	801f39c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801f3e4:	bc70      	pop	{r4, r5, r6}
 801f3e6:	4770      	bx	lr
 801f3e8:	24026314 	.word	0x24026314
 801f3ec:	2402630c 	.word	0x2402630c

0801f3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801f3f0:	4a12      	ldr	r2, [pc, #72]	; (801f43c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801f3f2:	8803      	ldrh	r3, [r0, #0]
 801f3f4:	8812      	ldrh	r2, [r2, #0]
 801f3f6:	4293      	cmp	r3, r2
 801f3f8:	d207      	bcs.n	801f40a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801f3fa:	4a11      	ldr	r2, [pc, #68]	; (801f440 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801f3fc:	2114      	movs	r1, #20
 801f3fe:	6812      	ldr	r2, [r2, #0]
 801f400:	fb01 2303 	mla	r3, r1, r3, r2
 801f404:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801f408:	4770      	bx	lr
 801f40a:	490e      	ldr	r1, [pc, #56]	; (801f444 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801f40c:	8809      	ldrh	r1, [r1, #0]
 801f40e:	4411      	add	r1, r2
 801f410:	428b      	cmp	r3, r1
 801f412:	da04      	bge.n	801f41e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801f414:	1a9b      	subs	r3, r3, r2
 801f416:	4a0c      	ldr	r2, [pc, #48]	; (801f448 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801f418:	210e      	movs	r1, #14
 801f41a:	6812      	ldr	r2, [r2, #0]
 801f41c:	e7f0      	b.n	801f400 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801f41e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f422:	4293      	cmp	r3, r2
 801f424:	d108      	bne.n	801f438 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801f426:	4b09      	ldr	r3, [pc, #36]	; (801f44c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801f428:	781b      	ldrb	r3, [r3, #0]
 801f42a:	b91b      	cbnz	r3, 801f434 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801f42c:	4b08      	ldr	r3, [pc, #32]	; (801f450 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801f42e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f432:	4770      	bx	lr
 801f434:	4b07      	ldr	r3, [pc, #28]	; (801f454 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801f436:	e7fa      	b.n	801f42e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801f438:	2000      	movs	r0, #0
 801f43a:	4770      	bx	lr
 801f43c:	2402630c 	.word	0x2402630c
 801f440:	24026314 	.word	0x24026314
 801f444:	24026310 	.word	0x24026310
 801f448:	240262f4 	.word	0x240262f4
 801f44c:	24026284 	.word	0x24026284
 801f450:	24026286 	.word	0x24026286
 801f454:	24026288 	.word	0x24026288

0801f458 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801f458:	4a12      	ldr	r2, [pc, #72]	; (801f4a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801f45a:	8803      	ldrh	r3, [r0, #0]
 801f45c:	8812      	ldrh	r2, [r2, #0]
 801f45e:	4293      	cmp	r3, r2
 801f460:	d207      	bcs.n	801f472 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801f462:	4a11      	ldr	r2, [pc, #68]	; (801f4a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801f464:	2114      	movs	r1, #20
 801f466:	6812      	ldr	r2, [r2, #0]
 801f468:	fb01 2303 	mla	r3, r1, r3, r2
 801f46c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801f470:	4770      	bx	lr
 801f472:	490e      	ldr	r1, [pc, #56]	; (801f4ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801f474:	8809      	ldrh	r1, [r1, #0]
 801f476:	4411      	add	r1, r2
 801f478:	428b      	cmp	r3, r1
 801f47a:	da04      	bge.n	801f486 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801f47c:	1a9b      	subs	r3, r3, r2
 801f47e:	4a0c      	ldr	r2, [pc, #48]	; (801f4b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801f480:	210e      	movs	r1, #14
 801f482:	6812      	ldr	r2, [r2, #0]
 801f484:	e7f0      	b.n	801f468 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801f486:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f48a:	4293      	cmp	r3, r2
 801f48c:	d108      	bne.n	801f4a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801f48e:	4b09      	ldr	r3, [pc, #36]	; (801f4b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801f490:	781b      	ldrb	r3, [r3, #0]
 801f492:	b91b      	cbnz	r3, 801f49c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801f494:	4b08      	ldr	r3, [pc, #32]	; (801f4b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801f496:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f49a:	4770      	bx	lr
 801f49c:	4b07      	ldr	r3, [pc, #28]	; (801f4bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801f49e:	e7fa      	b.n	801f496 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801f4a0:	2000      	movs	r0, #0
 801f4a2:	4770      	bx	lr
 801f4a4:	2402630c 	.word	0x2402630c
 801f4a8:	24026314 	.word	0x24026314
 801f4ac:	24026310 	.word	0x24026310
 801f4b0:	240262f4 	.word	0x240262f4
 801f4b4:	24026284 	.word	0x24026284
 801f4b8:	24026288 	.word	0x24026288
 801f4bc:	24026286 	.word	0x24026286

0801f4c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801f4c0:	4a1f      	ldr	r2, [pc, #124]	; (801f540 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801f4c2:	b510      	push	{r4, lr}
 801f4c4:	880b      	ldrh	r3, [r1, #0]
 801f4c6:	8812      	ldrh	r2, [r2, #0]
 801f4c8:	4293      	cmp	r3, r2
 801f4ca:	d213      	bcs.n	801f4f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801f4cc:	4a1d      	ldr	r2, [pc, #116]	; (801f544 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801f4ce:	2114      	movs	r1, #20
 801f4d0:	6812      	ldr	r2, [r2, #0]
 801f4d2:	fb01 2303 	mla	r3, r1, r3, r2
 801f4d6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801f4da:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801f4de:	8a1a      	ldrh	r2, [r3, #16]
 801f4e0:	8a5b      	ldrh	r3, [r3, #18]
 801f4e2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f4e6:	8004      	strh	r4, [r0, #0]
 801f4e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f4ec:	8041      	strh	r1, [r0, #2]
 801f4ee:	8082      	strh	r2, [r0, #4]
 801f4f0:	80c3      	strh	r3, [r0, #6]
 801f4f2:	e00e      	b.n	801f512 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801f4f4:	4914      	ldr	r1, [pc, #80]	; (801f548 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801f4f6:	8809      	ldrh	r1, [r1, #0]
 801f4f8:	4411      	add	r1, r2
 801f4fa:	428b      	cmp	r3, r1
 801f4fc:	da0a      	bge.n	801f514 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801f4fe:	1a9b      	subs	r3, r3, r2
 801f500:	4a12      	ldr	r2, [pc, #72]	; (801f54c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801f502:	210e      	movs	r1, #14
 801f504:	6812      	ldr	r2, [r2, #0]
 801f506:	fb01 2303 	mla	r3, r1, r3, r2
 801f50a:	681a      	ldr	r2, [r3, #0]
 801f50c:	6002      	str	r2, [r0, #0]
 801f50e:	685a      	ldr	r2, [r3, #4]
 801f510:	6042      	str	r2, [r0, #4]
 801f512:	bd10      	pop	{r4, pc}
 801f514:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f518:	4293      	cmp	r3, r2
 801f51a:	d10b      	bne.n	801f534 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801f51c:	4b0c      	ldr	r3, [pc, #48]	; (801f550 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801f51e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f522:	4b0c      	ldr	r3, [pc, #48]	; (801f554 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801f524:	8081      	strh	r1, [r0, #4]
 801f526:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f52a:	2300      	movs	r3, #0
 801f52c:	80c2      	strh	r2, [r0, #6]
 801f52e:	8003      	strh	r3, [r0, #0]
 801f530:	8043      	strh	r3, [r0, #2]
 801f532:	e7ee      	b.n	801f512 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801f534:	2300      	movs	r3, #0
 801f536:	8003      	strh	r3, [r0, #0]
 801f538:	8043      	strh	r3, [r0, #2]
 801f53a:	8083      	strh	r3, [r0, #4]
 801f53c:	e7d8      	b.n	801f4f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801f53e:	bf00      	nop
 801f540:	2402630c 	.word	0x2402630c
 801f544:	24026314 	.word	0x24026314
 801f548:	24026310 	.word	0x24026310
 801f54c:	240262f4 	.word	0x240262f4
 801f550:	24026280 	.word	0x24026280
 801f554:	24026282 	.word	0x24026282

0801f558 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801f558:	4a17      	ldr	r2, [pc, #92]	; (801f5b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801f55a:	8803      	ldrh	r3, [r0, #0]
 801f55c:	8812      	ldrh	r2, [r2, #0]
 801f55e:	4293      	cmp	r3, r2
 801f560:	d213      	bcs.n	801f58a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801f562:	4a16      	ldr	r2, [pc, #88]	; (801f5bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801f564:	2114      	movs	r1, #20
 801f566:	6812      	ldr	r2, [r2, #0]
 801f568:	fb01 2303 	mla	r3, r1, r3, r2
 801f56c:	8a1a      	ldrh	r2, [r3, #16]
 801f56e:	8919      	ldrh	r1, [r3, #8]
 801f570:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f574:	428a      	cmp	r2, r1
 801f576:	db1d      	blt.n	801f5b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801f578:	8a58      	ldrh	r0, [r3, #18]
 801f57a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801f57e:	895b      	ldrh	r3, [r3, #10]
 801f580:	4298      	cmp	r0, r3
 801f582:	bfac      	ite	ge
 801f584:	2000      	movge	r0, #0
 801f586:	2001      	movlt	r0, #1
 801f588:	4770      	bx	lr
 801f58a:	490d      	ldr	r1, [pc, #52]	; (801f5c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801f58c:	8809      	ldrh	r1, [r1, #0]
 801f58e:	4411      	add	r1, r2
 801f590:	428b      	cmp	r3, r1
 801f592:	da0d      	bge.n	801f5b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801f594:	1a9b      	subs	r3, r3, r2
 801f596:	4a0b      	ldr	r2, [pc, #44]	; (801f5c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801f598:	210e      	movs	r1, #14
 801f59a:	6812      	ldr	r2, [r2, #0]
 801f59c:	fb01 2303 	mla	r3, r1, r3, r2
 801f5a0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801f5a4:	891a      	ldrh	r2, [r3, #8]
 801f5a6:	4291      	cmp	r1, r2
 801f5a8:	db04      	blt.n	801f5b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801f5aa:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801f5ae:	e7e6      	b.n	801f57e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801f5b0:	2000      	movs	r0, #0
 801f5b2:	4770      	bx	lr
 801f5b4:	2001      	movs	r0, #1
 801f5b6:	4770      	bx	lr
 801f5b8:	2402630c 	.word	0x2402630c
 801f5bc:	24026314 	.word	0x24026314
 801f5c0:	24026310 	.word	0x24026310
 801f5c4:	240262f4 	.word	0x240262f4

0801f5c8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801f5c8:	4a12      	ldr	r2, [pc, #72]	; (801f614 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801f5ca:	8803      	ldrh	r3, [r0, #0]
 801f5cc:	8811      	ldrh	r1, [r2, #0]
 801f5ce:	428b      	cmp	r3, r1
 801f5d0:	d20b      	bcs.n	801f5ea <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801f5d2:	4a11      	ldr	r2, [pc, #68]	; (801f618 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801f5d4:	6812      	ldr	r2, [r2, #0]
 801f5d6:	b112      	cbz	r2, 801f5de <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801f5d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f5dc:	b9c0      	cbnz	r0, 801f610 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801f5de:	4a0f      	ldr	r2, [pc, #60]	; (801f61c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801f5e0:	6811      	ldr	r1, [r2, #0]
 801f5e2:	2214      	movs	r2, #20
 801f5e4:	4353      	muls	r3, r2
 801f5e6:	58c8      	ldr	r0, [r1, r3]
 801f5e8:	4770      	bx	lr
 801f5ea:	4a0d      	ldr	r2, [pc, #52]	; (801f620 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801f5ec:	8812      	ldrh	r2, [r2, #0]
 801f5ee:	440a      	add	r2, r1
 801f5f0:	4293      	cmp	r3, r2
 801f5f2:	da04      	bge.n	801f5fe <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801f5f4:	4a08      	ldr	r2, [pc, #32]	; (801f618 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801f5f6:	6812      	ldr	r2, [r2, #0]
 801f5f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f5fc:	4770      	bx	lr
 801f5fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f602:	4293      	cmp	r3, r2
 801f604:	d103      	bne.n	801f60e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801f606:	4b07      	ldr	r3, [pc, #28]	; (801f624 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801f608:	681b      	ldr	r3, [r3, #0]
 801f60a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801f60c:	4770      	bx	lr
 801f60e:	2000      	movs	r0, #0
 801f610:	4770      	bx	lr
 801f612:	bf00      	nop
 801f614:	2402630c 	.word	0x2402630c
 801f618:	240262f0 	.word	0x240262f0
 801f61c:	24026314 	.word	0x24026314
 801f620:	24026310 	.word	0x24026310
 801f624:	2402628c 	.word	0x2402628c

0801f628 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801f628:	4b24      	ldr	r3, [pc, #144]	; (801f6bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801f62a:	8802      	ldrh	r2, [r0, #0]
 801f62c:	8818      	ldrh	r0, [r3, #0]
 801f62e:	4282      	cmp	r2, r0
 801f630:	d221      	bcs.n	801f676 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801f632:	4b23      	ldr	r3, [pc, #140]	; (801f6c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801f634:	6819      	ldr	r1, [r3, #0]
 801f636:	2314      	movs	r3, #20
 801f638:	fb03 1302 	mla	r3, r3, r2, r1
 801f63c:	6858      	ldr	r0, [r3, #4]
 801f63e:	2800      	cmp	r0, #0
 801f640:	d03a      	beq.n	801f6b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f642:	4920      	ldr	r1, [pc, #128]	; (801f6c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f644:	6809      	ldr	r1, [r1, #0]
 801f646:	2900      	cmp	r1, #0
 801f648:	d036      	beq.n	801f6b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f64a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f64e:	2900      	cmp	r1, #0
 801f650:	d032      	beq.n	801f6b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f652:	891a      	ldrh	r2, [r3, #8]
 801f654:	8958      	ldrh	r0, [r3, #10]
 801f656:	4350      	muls	r0, r2
 801f658:	7c5a      	ldrb	r2, [r3, #17]
 801f65a:	7cdb      	ldrb	r3, [r3, #19]
 801f65c:	0952      	lsrs	r2, r2, #5
 801f65e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801f662:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801f666:	2b0b      	cmp	r3, #11
 801f668:	bf18      	it	ne
 801f66a:	0040      	lslne	r0, r0, #1
 801f66c:	3003      	adds	r0, #3
 801f66e:	f020 0003 	bic.w	r0, r0, #3
 801f672:	4408      	add	r0, r1
 801f674:	4770      	bx	lr
 801f676:	4b14      	ldr	r3, [pc, #80]	; (801f6c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801f678:	881b      	ldrh	r3, [r3, #0]
 801f67a:	4403      	add	r3, r0
 801f67c:	429a      	cmp	r2, r3
 801f67e:	da1a      	bge.n	801f6b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f680:	4b12      	ldr	r3, [pc, #72]	; (801f6cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f682:	1a10      	subs	r0, r2, r0
 801f684:	210e      	movs	r1, #14
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	fb01 3000 	mla	r0, r1, r0, r3
 801f68c:	7b03      	ldrb	r3, [r0, #12]
 801f68e:	f003 031f 	and.w	r3, r3, #31
 801f692:	2b0b      	cmp	r3, #11
 801f694:	d10b      	bne.n	801f6ae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801f696:	8903      	ldrh	r3, [r0, #8]
 801f698:	8940      	ldrh	r0, [r0, #10]
 801f69a:	4358      	muls	r0, r3
 801f69c:	4b09      	ldr	r3, [pc, #36]	; (801f6c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f69e:	3003      	adds	r0, #3
 801f6a0:	6819      	ldr	r1, [r3, #0]
 801f6a2:	f020 0303 	bic.w	r3, r0, #3
 801f6a6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801f6aa:	4418      	add	r0, r3
 801f6ac:	4770      	bx	lr
 801f6ae:	2b0d      	cmp	r3, #13
 801f6b0:	d101      	bne.n	801f6b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f6b2:	300d      	adds	r0, #13
 801f6b4:	4770      	bx	lr
 801f6b6:	2000      	movs	r0, #0
 801f6b8:	4770      	bx	lr
 801f6ba:	bf00      	nop
 801f6bc:	2402630c 	.word	0x2402630c
 801f6c0:	24026314 	.word	0x24026314
 801f6c4:	240262f0 	.word	0x240262f0
 801f6c8:	24026310 	.word	0x24026310
 801f6cc:	240262f4 	.word	0x240262f4

0801f6d0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801f6d0:	4a17      	ldr	r2, [pc, #92]	; (801f730 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801f6d2:	b510      	push	{r4, lr}
 801f6d4:	8803      	ldrh	r3, [r0, #0]
 801f6d6:	8812      	ldrh	r2, [r2, #0]
 801f6d8:	4293      	cmp	r3, r2
 801f6da:	d20c      	bcs.n	801f6f6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801f6dc:	4a15      	ldr	r2, [pc, #84]	; (801f734 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801f6de:	2114      	movs	r1, #20
 801f6e0:	6812      	ldr	r2, [r2, #0]
 801f6e2:	fb01 2303 	mla	r3, r1, r3, r2
 801f6e6:	7c58      	ldrb	r0, [r3, #17]
 801f6e8:	0942      	lsrs	r2, r0, #5
 801f6ea:	7cd8      	ldrb	r0, [r3, #19]
 801f6ec:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801f6f0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801f6f4:	bd10      	pop	{r4, pc}
 801f6f6:	4910      	ldr	r1, [pc, #64]	; (801f738 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801f6f8:	8809      	ldrh	r1, [r1, #0]
 801f6fa:	4411      	add	r1, r2
 801f6fc:	428b      	cmp	r3, r1
 801f6fe:	da09      	bge.n	801f714 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801f700:	1a9b      	subs	r3, r3, r2
 801f702:	4a0e      	ldr	r2, [pc, #56]	; (801f73c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801f704:	210e      	movs	r1, #14
 801f706:	6812      	ldr	r2, [r2, #0]
 801f708:	fb01 2303 	mla	r3, r1, r3, r2
 801f70c:	7b18      	ldrb	r0, [r3, #12]
 801f70e:	f000 001f 	and.w	r0, r0, #31
 801f712:	e7ef      	b.n	801f6f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f714:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f718:	4293      	cmp	r3, r2
 801f71a:	d106      	bne.n	801f72a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801f71c:	f7e4 fbe4 	bl	8003ee8 <_ZN8touchgfx3HAL3lcdEv>
 801f720:	6803      	ldr	r3, [r0, #0]
 801f722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f728:	4718      	bx	r3
 801f72a:	2000      	movs	r0, #0
 801f72c:	e7e2      	b.n	801f6f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f72e:	bf00      	nop
 801f730:	2402630c 	.word	0x2402630c
 801f734:	24026314 	.word	0x24026314
 801f738:	24026310 	.word	0x24026310
 801f73c:	240262f4 	.word	0x240262f4

0801f740 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801f740:	2018      	movs	r0, #24
 801f742:	4770      	bx	lr

0801f744 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801f744:	2001      	movs	r0, #1
 801f746:	4770      	bx	lr

0801f748 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801f748:	4b02      	ldr	r3, [pc, #8]	; (801f754 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801f74a:	8818      	ldrh	r0, [r3, #0]
 801f74c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f750:	b280      	uxth	r0, r0
 801f752:	4770      	bx	lr
 801f754:	24026286 	.word	0x24026286

0801f758 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f758:	2bff      	cmp	r3, #255	; 0xff
 801f75a:	d040      	beq.n	801f7de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801f75c:	2a2c      	cmp	r2, #44	; 0x2c
 801f75e:	d02a      	beq.n	801f7b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801f760:	d80f      	bhi.n	801f782 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801f762:	2a08      	cmp	r2, #8
 801f764:	d037      	beq.n	801f7d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f766:	d805      	bhi.n	801f774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801f768:	2a04      	cmp	r2, #4
 801f76a:	d032      	beq.n	801f7d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801f76c:	2a05      	cmp	r2, #5
 801f76e:	d02e      	beq.n	801f7ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801f770:	2000      	movs	r0, #0
 801f772:	4770      	bx	lr
 801f774:	2a0a      	cmp	r2, #10
 801f776:	d02e      	beq.n	801f7d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f778:	d301      	bcc.n	801f77e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801f77a:	2a0b      	cmp	r2, #11
 801f77c:	d1f8      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f77e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f780:	4770      	bx	lr
 801f782:	2a30      	cmp	r2, #48	; 0x30
 801f784:	d029      	beq.n	801f7da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f786:	d808      	bhi.n	801f79a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801f788:	2a2e      	cmp	r2, #46	; 0x2e
 801f78a:	684b      	ldr	r3, [r1, #4]
 801f78c:	d01a      	beq.n	801f7c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801f78e:	d90b      	bls.n	801f7a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801f790:	781b      	ldrb	r3, [r3, #0]
 801f792:	2b00      	cmp	r3, #0
 801f794:	d1ec      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f796:	6a00      	ldr	r0, [r0, #32]
 801f798:	4770      	bx	lr
 801f79a:	2a32      	cmp	r2, #50	; 0x32
 801f79c:	d01d      	beq.n	801f7da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f79e:	d301      	bcc.n	801f7a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801f7a0:	2a33      	cmp	r2, #51	; 0x33
 801f7a2:	d1e5      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f7a4:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801f7a6:	4770      	bx	lr
 801f7a8:	781b      	ldrb	r3, [r3, #0]
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	d0f3      	beq.n	801f796 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801f7ae:	2b01      	cmp	r3, #1
 801f7b0:	d1de      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f7b2:	6900      	ldr	r0, [r0, #16]
 801f7b4:	4770      	bx	lr
 801f7b6:	684b      	ldr	r3, [r1, #4]
 801f7b8:	781b      	ldrb	r3, [r3, #0]
 801f7ba:	b133      	cbz	r3, 801f7ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801f7bc:	2b01      	cmp	r3, #1
 801f7be:	d1d7      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f7c0:	6880      	ldr	r0, [r0, #8]
 801f7c2:	4770      	bx	lr
 801f7c4:	781b      	ldrb	r3, [r3, #0]
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	d1d2      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f7ca:	6980      	ldr	r0, [r0, #24]
 801f7cc:	4770      	bx	lr
 801f7ce:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801f7d0:	4770      	bx	lr
 801f7d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801f7d4:	4770      	bx	lr
 801f7d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801f7d8:	4770      	bx	lr
 801f7da:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801f7dc:	4770      	bx	lr
 801f7de:	2a2c      	cmp	r2, #44	; 0x2c
 801f7e0:	d02a      	beq.n	801f838 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801f7e2:	d80f      	bhi.n	801f804 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801f7e4:	2a08      	cmp	r2, #8
 801f7e6:	d035      	beq.n	801f854 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801f7e8:	d805      	bhi.n	801f7f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f7ea:	2a04      	cmp	r2, #4
 801f7ec:	d030      	beq.n	801f850 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801f7ee:	2a05      	cmp	r2, #5
 801f7f0:	d1be      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f7f2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f7f4:	4770      	bx	lr
 801f7f6:	2a0a      	cmp	r2, #10
 801f7f8:	d02c      	beq.n	801f854 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801f7fa:	d301      	bcc.n	801f800 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801f7fc:	2a0b      	cmp	r2, #11
 801f7fe:	d1b7      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f800:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f802:	4770      	bx	lr
 801f804:	2a30      	cmp	r2, #48	; 0x30
 801f806:	d027      	beq.n	801f858 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f808:	d808      	bhi.n	801f81c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801f80a:	2a2e      	cmp	r2, #46	; 0x2e
 801f80c:	684b      	ldr	r3, [r1, #4]
 801f80e:	d01a      	beq.n	801f846 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801f810:	d90b      	bls.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801f812:	781b      	ldrb	r3, [r3, #0]
 801f814:	2b00      	cmp	r3, #0
 801f816:	d1ab      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f818:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f81a:	4770      	bx	lr
 801f81c:	2a32      	cmp	r2, #50	; 0x32
 801f81e:	d01b      	beq.n	801f858 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f820:	d301      	bcc.n	801f826 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801f822:	2a33      	cmp	r2, #51	; 0x33
 801f824:	d1a4      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f826:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f828:	4770      	bx	lr
 801f82a:	781b      	ldrb	r3, [r3, #0]
 801f82c:	2b00      	cmp	r3, #0
 801f82e:	d0f3      	beq.n	801f818 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801f830:	2b01      	cmp	r3, #1
 801f832:	d19d      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f834:	6940      	ldr	r0, [r0, #20]
 801f836:	4770      	bx	lr
 801f838:	684b      	ldr	r3, [r1, #4]
 801f83a:	781b      	ldrb	r3, [r3, #0]
 801f83c:	b133      	cbz	r3, 801f84c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801f83e:	2b01      	cmp	r3, #1
 801f840:	d196      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f842:	68c0      	ldr	r0, [r0, #12]
 801f844:	4770      	bx	lr
 801f846:	781b      	ldrb	r3, [r3, #0]
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d191      	bne.n	801f770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f84c:	69c0      	ldr	r0, [r0, #28]
 801f84e:	4770      	bx	lr
 801f850:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f852:	4770      	bx	lr
 801f854:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801f856:	4770      	bx	lr
 801f858:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801f85a:	4770      	bx	lr

0801f85c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f860:	b085      	sub	sp, #20
 801f862:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f864:	9203      	str	r2, [sp, #12]
 801f866:	6870      	ldr	r0, [r6, #4]
 801f868:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801f86c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801f870:	9101      	str	r1, [sp, #4]
 801f872:	fa1f f885 	uxth.w	r8, r5
 801f876:	43ed      	mvns	r5, r5
 801f878:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f87c:	b2ed      	uxtb	r5, r5
 801f87e:	fb00 2404 	mla	r4, r0, r4, r2
 801f882:	6832      	ldr	r2, [r6, #0]
 801f884:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f888:	4414      	add	r4, r2
 801f88a:	f8dc 2000 	ldr.w	r2, [ip]
 801f88e:	9202      	str	r2, [sp, #8]
 801f890:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f894:	f102 0e04 	add.w	lr, r2, #4
 801f898:	9a01      	ldr	r2, [sp, #4]
 801f89a:	2a00      	cmp	r2, #0
 801f89c:	dc03      	bgt.n	801f8a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f89e:	9a03      	ldr	r2, [sp, #12]
 801f8a0:	2a00      	cmp	r2, #0
 801f8a2:	f340 8116 	ble.w	801fad2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f8a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f8a8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801f8ac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f8b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f8b2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801f8b6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f8ba:	2b00      	cmp	r3, #0
 801f8bc:	dd0e      	ble.n	801f8dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f8be:	1406      	asrs	r6, r0, #16
 801f8c0:	d405      	bmi.n	801f8ce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f8c2:	4556      	cmp	r6, sl
 801f8c4:	da03      	bge.n	801f8ce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f8c6:	1416      	asrs	r6, r2, #16
 801f8c8:	d401      	bmi.n	801f8ce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f8ca:	454e      	cmp	r6, r9
 801f8cc:	db07      	blt.n	801f8de <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f8ce:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f8d0:	3b01      	subs	r3, #1
 801f8d2:	3403      	adds	r4, #3
 801f8d4:	4430      	add	r0, r6
 801f8d6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f8d8:	4432      	add	r2, r6
 801f8da:	e7ee      	b.n	801f8ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f8dc:	d063      	beq.n	801f9a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f8de:	1e5e      	subs	r6, r3, #1
 801f8e0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801f8e2:	fb07 0706 	mla	r7, r7, r6, r0
 801f8e6:	143f      	asrs	r7, r7, #16
 801f8e8:	d454      	bmi.n	801f994 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f8ea:	4557      	cmp	r7, sl
 801f8ec:	da52      	bge.n	801f994 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f8ee:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f8f0:	fb07 2606 	mla	r6, r7, r6, r2
 801f8f4:	1436      	asrs	r6, r6, #16
 801f8f6:	d44d      	bmi.n	801f994 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f8f8:	454e      	cmp	r6, r9
 801f8fa:	da4b      	bge.n	801f994 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f8fc:	1ce6      	adds	r6, r4, #3
 801f8fe:	4699      	mov	r9, r3
 801f900:	f1b9 0f00 	cmp.w	r9, #0
 801f904:	f106 0603 	add.w	r6, r6, #3
 801f908:	dd48      	ble.n	801f99c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801f90a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801f90e:	1417      	asrs	r7, r2, #16
 801f910:	9902      	ldr	r1, [sp, #8]
 801f912:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f916:	f109 39ff 	add.w	r9, r9, #4294967295
 801f91a:	fb0b 1707 	mla	r7, fp, r7, r1
 801f91e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f922:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f924:	f817 700a 	ldrb.w	r7, [r7, sl]
 801f928:	fb1b fb05 	smulbb	fp, fp, r5
 801f92c:	4408      	add	r0, r1
 801f92e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f930:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f934:	440a      	add	r2, r1
 801f936:	eb0e 0a07 	add.w	sl, lr, r7
 801f93a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801f93e:	fb07 b708 	mla	r7, r7, r8, fp
 801f942:	b2bf      	uxth	r7, r7
 801f944:	f107 0b01 	add.w	fp, r7, #1
 801f948:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f94c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f950:	fb1b fb05 	smulbb	fp, fp, r5
 801f954:	123f      	asrs	r7, r7, #8
 801f956:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f95a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f95e:	fb07 b708 	mla	r7, r7, r8, fp
 801f962:	b2bf      	uxth	r7, r7
 801f964:	f107 0b01 	add.w	fp, r7, #1
 801f968:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f96c:	123f      	asrs	r7, r7, #8
 801f96e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f972:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f976:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f97a:	fb1a fa05 	smulbb	sl, sl, r5
 801f97e:	fb07 a708 	mla	r7, r7, r8, sl
 801f982:	b2bf      	uxth	r7, r7
 801f984:	f107 0a01 	add.w	sl, r7, #1
 801f988:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f98c:	123f      	asrs	r7, r7, #8
 801f98e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f992:	e7b5      	b.n	801f900 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f994:	2700      	movs	r7, #0
 801f996:	1bde      	subs	r6, r3, r7
 801f998:	2e00      	cmp	r6, #0
 801f99a:	dc42      	bgt.n	801fa22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801f99c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f9a4:	441c      	add	r4, r3
 801f9a6:	9b01      	ldr	r3, [sp, #4]
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	f340 8092 	ble.w	801fad2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f9ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f9b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f9b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9bc:	eef0 6a62 	vmov.f32	s13, s5
 801f9c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f9c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9cc:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801f9d0:	eef0 6a43 	vmov.f32	s13, s6
 801f9d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9d8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801f9dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9f4:	ee12 2a90 	vmov	r2, s5
 801f9f8:	eef0 2a47 	vmov.f32	s5, s14
 801f9fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa00:	ee13 2a10 	vmov	r2, s6
 801fa04:	9311      	str	r3, [sp, #68]	; 0x44
 801fa06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa08:	eeb0 3a67 	vmov.f32	s6, s15
 801fa0c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa10:	9312      	str	r3, [sp, #72]	; 0x48
 801fa12:	9b01      	ldr	r3, [sp, #4]
 801fa14:	9a03      	ldr	r2, [sp, #12]
 801fa16:	3b01      	subs	r3, #1
 801fa18:	9301      	str	r3, [sp, #4]
 801fa1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa1c:	bf08      	it	eq
 801fa1e:	4613      	moveq	r3, r2
 801fa20:	e73a      	b.n	801f898 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fa22:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801fa26:	d44e      	bmi.n	801fac6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fa28:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801fa2c:	4556      	cmp	r6, sl
 801fa2e:	dd4a      	ble.n	801fac6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fa30:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801fa34:	d447      	bmi.n	801fac6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fa36:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801fa3a:	4559      	cmp	r1, fp
 801fa3c:	dd43      	ble.n	801fac6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fa3e:	fa0f f986 	sxth.w	r9, r6
 801fa42:	9902      	ldr	r1, [sp, #8]
 801fa44:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801fa48:	fb0b 1909 	mla	r9, fp, r9, r1
 801fa4c:	f814 b006 	ldrb.w	fp, [r4, r6]
 801fa50:	f819 900a 	ldrb.w	r9, [r9, sl]
 801fa54:	fb1b fb05 	smulbb	fp, fp, r5
 801fa58:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fa5c:	eb0e 0a09 	add.w	sl, lr, r9
 801fa60:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801fa64:	fb09 b908 	mla	r9, r9, r8, fp
 801fa68:	fa1f f989 	uxth.w	r9, r9
 801fa6c:	f109 0b01 	add.w	fp, r9, #1
 801fa70:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa74:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa78:	f804 9006 	strb.w	r9, [r4, r6]
 801fa7c:	4426      	add	r6, r4
 801fa7e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801fa82:	f896 b001 	ldrb.w	fp, [r6, #1]
 801fa86:	fb1b fb05 	smulbb	fp, fp, r5
 801fa8a:	fb09 b908 	mla	r9, r9, r8, fp
 801fa8e:	fa1f f989 	uxth.w	r9, r9
 801fa92:	f109 0b01 	add.w	fp, r9, #1
 801fa96:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa9e:	f886 9001 	strb.w	r9, [r6, #1]
 801faa2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801faa6:	f896 a002 	ldrb.w	sl, [r6, #2]
 801faaa:	fb1a fa05 	smulbb	sl, sl, r5
 801faae:	fb09 a908 	mla	r9, r9, r8, sl
 801fab2:	fa1f f989 	uxth.w	r9, r9
 801fab6:	f109 0a01 	add.w	sl, r9, #1
 801faba:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801fabe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fac2:	f886 9002 	strb.w	r9, [r6, #2]
 801fac6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fac8:	3701      	adds	r7, #1
 801faca:	4408      	add	r0, r1
 801facc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801face:	440a      	add	r2, r1
 801fad0:	e761      	b.n	801f996 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fad2:	b005      	add	sp, #20
 801fad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fad8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fadc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fade:	4693      	mov	fp, r2
 801fae0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801fae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fae6:	6868      	ldr	r0, [r5, #4]
 801fae8:	6877      	ldr	r7, [r6, #4]
 801faea:	9100      	str	r1, [sp, #0]
 801faec:	3704      	adds	r7, #4
 801faee:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801faf2:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801faf6:	fb00 2404 	mla	r4, r0, r4, r2
 801fafa:	682a      	ldr	r2, [r5, #0]
 801fafc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fb00:	4414      	add	r4, r2
 801fb02:	6832      	ldr	r2, [r6, #0]
 801fb04:	9201      	str	r2, [sp, #4]
 801fb06:	9a00      	ldr	r2, [sp, #0]
 801fb08:	2a00      	cmp	r2, #0
 801fb0a:	dc03      	bgt.n	801fb14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fb0c:	f1bb 0f00 	cmp.w	fp, #0
 801fb10:	f340 80bc 	ble.w	801fc8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801fb14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fb16:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801fb1a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fb1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fb20:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801fb24:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	dd0c      	ble.n	801fb46 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb2c:	1405      	asrs	r5, r0, #16
 801fb2e:	d405      	bmi.n	801fb3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fb30:	4555      	cmp	r5, sl
 801fb32:	da03      	bge.n	801fb3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fb34:	1415      	asrs	r5, r2, #16
 801fb36:	d401      	bmi.n	801fb3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fb38:	454d      	cmp	r5, r9
 801fb3a:	db05      	blt.n	801fb48 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fb3c:	4440      	add	r0, r8
 801fb3e:	4472      	add	r2, lr
 801fb40:	3b01      	subs	r3, #1
 801fb42:	3403      	adds	r4, #3
 801fb44:	e7f0      	b.n	801fb28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801fb46:	d03f      	beq.n	801fbc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801fb48:	1e5d      	subs	r5, r3, #1
 801fb4a:	fb08 0c05 	mla	ip, r8, r5, r0
 801fb4e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801fb52:	d42e      	bmi.n	801fbb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fb54:	45d4      	cmp	ip, sl
 801fb56:	da2c      	bge.n	801fbb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fb58:	fb0e 2505 	mla	r5, lr, r5, r2
 801fb5c:	142d      	asrs	r5, r5, #16
 801fb5e:	d428      	bmi.n	801fbb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fb60:	454d      	cmp	r5, r9
 801fb62:	da26      	bge.n	801fbb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fb64:	1ce5      	adds	r5, r4, #3
 801fb66:	469c      	mov	ip, r3
 801fb68:	f1bc 0f00 	cmp.w	ip, #0
 801fb6c:	f105 0503 	add.w	r5, r5, #3
 801fb70:	dd25      	ble.n	801fbbe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801fb72:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801fb76:	ea4f 4922 	mov.w	r9, r2, asr #16
 801fb7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fb7e:	4472      	add	r2, lr
 801fb80:	468a      	mov	sl, r1
 801fb82:	9901      	ldr	r1, [sp, #4]
 801fb84:	fb0a 1909 	mla	r9, sl, r9, r1
 801fb88:	1401      	asrs	r1, r0, #16
 801fb8a:	4440      	add	r0, r8
 801fb8c:	f819 9001 	ldrb.w	r9, [r9, r1]
 801fb90:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fb94:	eb07 0a09 	add.w	sl, r7, r9
 801fb98:	f817 9009 	ldrb.w	r9, [r7, r9]
 801fb9c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801fba0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801fba4:	f805 9c05 	strb.w	r9, [r5, #-5]
 801fba8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fbac:	f805 9c04 	strb.w	r9, [r5, #-4]
 801fbb0:	e7da      	b.n	801fb68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fbb2:	2500      	movs	r5, #0
 801fbb4:	eba3 0c05 	sub.w	ip, r3, r5
 801fbb8:	f1bc 0f00 	cmp.w	ip, #0
 801fbbc:	dc3b      	bgt.n	801fc36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801fbbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fbc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fbc6:	441c      	add	r4, r3
 801fbc8:	9b00      	ldr	r3, [sp, #0]
 801fbca:	2b00      	cmp	r3, #0
 801fbcc:	dd5e      	ble.n	801fc8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801fbce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fbd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fbd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fbd8:	eeb0 6a62 	vmov.f32	s12, s5
 801fbdc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fbe0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fbe4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fbe8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801fbec:	eeb0 6a43 	vmov.f32	s12, s6
 801fbf0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fbf4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801fbf8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fbfc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc00:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc10:	ee12 2a90 	vmov	r2, s5
 801fc14:	eef0 2a47 	vmov.f32	s5, s14
 801fc18:	fb92 f8f3 	sdiv	r8, r2, r3
 801fc1c:	ee13 2a10 	vmov	r2, s6
 801fc20:	eeb0 3a67 	vmov.f32	s6, s15
 801fc24:	fb92 fef3 	sdiv	lr, r2, r3
 801fc28:	9b00      	ldr	r3, [sp, #0]
 801fc2a:	3b01      	subs	r3, #1
 801fc2c:	9300      	str	r3, [sp, #0]
 801fc2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc30:	bf08      	it	eq
 801fc32:	465b      	moveq	r3, fp
 801fc34:	e767      	b.n	801fb06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fc36:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fc3a:	d423      	bmi.n	801fc84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fc3c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801fc40:	45cc      	cmp	ip, r9
 801fc42:	dd1f      	ble.n	801fc84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fc44:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801fc48:	d41c      	bmi.n	801fc84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fc4a:	68f1      	ldr	r1, [r6, #12]
 801fc4c:	4551      	cmp	r1, sl
 801fc4e:	dd19      	ble.n	801fc84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fc50:	fa0f fc8c 	sxth.w	ip, ip
 801fc54:	9901      	ldr	r1, [sp, #4]
 801fc56:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801fc5a:	f81c c009 	ldrb.w	ip, [ip, r9]
 801fc5e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fc62:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801fc66:	eb07 090c 	add.w	r9, r7, ip
 801fc6a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801fc6e:	f804 a00c 	strb.w	sl, [r4, ip]
 801fc72:	44a4      	add	ip, r4
 801fc74:	f899 a001 	ldrb.w	sl, [r9, #1]
 801fc78:	f88c a001 	strb.w	sl, [ip, #1]
 801fc7c:	f899 9002 	ldrb.w	r9, [r9, #2]
 801fc80:	f88c 9002 	strb.w	r9, [ip, #2]
 801fc84:	4440      	add	r0, r8
 801fc86:	4472      	add	r2, lr
 801fc88:	3501      	adds	r5, #1
 801fc8a:	e793      	b.n	801fbb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801fc8c:	b003      	add	sp, #12
 801fc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc92 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc96:	b085      	sub	sp, #20
 801fc98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fc9c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc9e:	9202      	str	r2, [sp, #8]
 801fca0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801fca4:	6860      	ldr	r0, [r4, #4]
 801fca6:	9203      	str	r2, [sp, #12]
 801fca8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801fcac:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801fcb0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801fcb4:	fb00 2505 	mla	r5, r0, r5, r2
 801fcb8:	6822      	ldr	r2, [r4, #0]
 801fcba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fcbe:	4415      	add	r5, r2
 801fcc0:	f8dc 2000 	ldr.w	r2, [ip]
 801fcc4:	9200      	str	r2, [sp, #0]
 801fcc6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fcca:	3204      	adds	r2, #4
 801fccc:	9201      	str	r2, [sp, #4]
 801fcce:	2900      	cmp	r1, #0
 801fcd0:	dc03      	bgt.n	801fcda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fcd2:	9a02      	ldr	r2, [sp, #8]
 801fcd4:	2a00      	cmp	r2, #0
 801fcd6:	f340 8127 	ble.w	801ff28 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fcda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fcdc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801fce0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801fce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fce6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801fcea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	dd0d      	ble.n	801fd0e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fcf2:	1422      	asrs	r2, r4, #16
 801fcf4:	d405      	bmi.n	801fd02 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fcf6:	4542      	cmp	r2, r8
 801fcf8:	da03      	bge.n	801fd02 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fcfa:	1402      	asrs	r2, r0, #16
 801fcfc:	d401      	bmi.n	801fd02 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fcfe:	42ba      	cmp	r2, r7
 801fd00:	db06      	blt.n	801fd10 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fd02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd04:	4474      	add	r4, lr
 801fd06:	3b01      	subs	r3, #1
 801fd08:	3503      	adds	r5, #3
 801fd0a:	4410      	add	r0, r2
 801fd0c:	e7ef      	b.n	801fcee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fd0e:	d075      	beq.n	801fdfc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801fd10:	1e5a      	subs	r2, r3, #1
 801fd12:	fb0e 4602 	mla	r6, lr, r2, r4
 801fd16:	1436      	asrs	r6, r6, #16
 801fd18:	d465      	bmi.n	801fde6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fd1a:	4546      	cmp	r6, r8
 801fd1c:	da63      	bge.n	801fde6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fd1e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fd20:	fb06 0202 	mla	r2, r6, r2, r0
 801fd24:	1412      	asrs	r2, r2, #16
 801fd26:	d45e      	bmi.n	801fde6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fd28:	42ba      	cmp	r2, r7
 801fd2a:	da5c      	bge.n	801fde6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fd2c:	1cef      	adds	r7, r5, #3
 801fd2e:	4699      	mov	r9, r3
 801fd30:	f1b9 0f00 	cmp.w	r9, #0
 801fd34:	dd5d      	ble.n	801fdf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801fd36:	1402      	asrs	r2, r0, #16
 801fd38:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801fd3c:	1426      	asrs	r6, r4, #16
 801fd3e:	4692      	mov	sl, r2
 801fd40:	9a00      	ldr	r2, [sp, #0]
 801fd42:	fb08 220a 	mla	r2, r8, sl, r2
 801fd46:	5d92      	ldrb	r2, [r2, r6]
 801fd48:	9e01      	ldr	r6, [sp, #4]
 801fd4a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801fd4e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801fd52:	d041      	beq.n	801fdd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801fd54:	9a03      	ldr	r2, [sp, #12]
 801fd56:	fa5f fb86 	uxtb.w	fp, r6
 801fd5a:	fb02 f808 	mul.w	r8, r2, r8
 801fd5e:	f108 0201 	add.w	r2, r8, #1
 801fd62:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801fd66:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801fd6a:	1212      	asrs	r2, r2, #8
 801fd6c:	fa1f fa82 	uxth.w	sl, r2
 801fd70:	43d2      	mvns	r2, r2
 801fd72:	fb1b fb0a 	smulbb	fp, fp, sl
 801fd76:	b2d2      	uxtb	r2, r2
 801fd78:	fb08 b802 	mla	r8, r8, r2, fp
 801fd7c:	fa1f f888 	uxth.w	r8, r8
 801fd80:	f108 0b01 	add.w	fp, r8, #1
 801fd84:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fd88:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801fd8c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801fd90:	fb1b fb0a 	smulbb	fp, fp, sl
 801fd94:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fd98:	fb16 fa0a 	smulbb	sl, r6, sl
 801fd9c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801fda0:	f807 8c03 	strb.w	r8, [r7, #-3]
 801fda4:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801fda8:	fb06 aa02 	mla	sl, r6, r2, sl
 801fdac:	fb08 b802 	mla	r8, r8, r2, fp
 801fdb0:	fa1f fa8a 	uxth.w	sl, sl
 801fdb4:	fa1f f888 	uxth.w	r8, r8
 801fdb8:	f10a 0601 	add.w	r6, sl, #1
 801fdbc:	f108 0b01 	add.w	fp, r8, #1
 801fdc0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801fdc4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fdc8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fdcc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fdd0:	f807 ac01 	strb.w	sl, [r7, #-1]
 801fdd4:	f807 8c02 	strb.w	r8, [r7, #-2]
 801fdd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdda:	4474      	add	r4, lr
 801fddc:	3703      	adds	r7, #3
 801fdde:	f109 39ff 	add.w	r9, r9, #4294967295
 801fde2:	4410      	add	r0, r2
 801fde4:	e7a4      	b.n	801fd30 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fde6:	f04f 0800 	mov.w	r8, #0
 801fdea:	eba3 0208 	sub.w	r2, r3, r8
 801fdee:	2a00      	cmp	r2, #0
 801fdf0:	dc3b      	bgt.n	801fe6a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801fdf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fdf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fdfa:	441d      	add	r5, r3
 801fdfc:	2900      	cmp	r1, #0
 801fdfe:	f340 8093 	ble.w	801ff28 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fe02:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe0c:	3901      	subs	r1, #1
 801fe0e:	eeb0 6a62 	vmov.f32	s12, s5
 801fe12:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe16:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe1e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fe22:	eeb0 6a43 	vmov.f32	s12, s6
 801fe26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe2a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fe2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe32:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe36:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe46:	ee12 2a90 	vmov	r2, s5
 801fe4a:	eef0 2a47 	vmov.f32	s5, s14
 801fe4e:	fb92 fef3 	sdiv	lr, r2, r3
 801fe52:	ee13 2a10 	vmov	r2, s6
 801fe56:	eeb0 3a67 	vmov.f32	s6, s15
 801fe5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe5e:	9a02      	ldr	r2, [sp, #8]
 801fe60:	9312      	str	r3, [sp, #72]	; 0x48
 801fe62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe64:	bf08      	it	eq
 801fe66:	4613      	moveq	r3, r2
 801fe68:	e731      	b.n	801fcce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fe6a:	1427      	asrs	r7, r4, #16
 801fe6c:	d456      	bmi.n	801ff1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801fe6e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801fe72:	42be      	cmp	r6, r7
 801fe74:	dd52      	ble.n	801ff1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801fe76:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fe7a:	d44f      	bmi.n	801ff1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801fe7c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fe80:	454a      	cmp	r2, r9
 801fe82:	dd4b      	ble.n	801ff1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801fe84:	9a00      	ldr	r2, [sp, #0]
 801fe86:	b236      	sxth	r6, r6
 801fe88:	fb09 2606 	mla	r6, r9, r6, r2
 801fe8c:	5df2      	ldrb	r2, [r6, r7]
 801fe8e:	9e01      	ldr	r6, [sp, #4]
 801fe90:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801fe94:	0e3a      	lsrs	r2, r7, #24
 801fe96:	d041      	beq.n	801ff1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801fe98:	9e03      	ldr	r6, [sp, #12]
 801fe9a:	fa5f fb87 	uxtb.w	fp, r7
 801fe9e:	4372      	muls	r2, r6
 801fea0:	1c56      	adds	r6, r2, #1
 801fea2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fea6:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801feaa:	1212      	asrs	r2, r2, #8
 801feac:	f815 9006 	ldrb.w	r9, [r5, r6]
 801feb0:	fa1f fa82 	uxth.w	sl, r2
 801feb4:	43d2      	mvns	r2, r2
 801feb6:	fb1b fb0a 	smulbb	fp, fp, sl
 801feba:	b2d2      	uxtb	r2, r2
 801febc:	fb09 b902 	mla	r9, r9, r2, fp
 801fec0:	fa1f f989 	uxth.w	r9, r9
 801fec4:	f109 0b01 	add.w	fp, r9, #1
 801fec8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fecc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801fed0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801fed4:	fb1b fb0a 	smulbb	fp, fp, sl
 801fed8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fedc:	fb17 fa0a 	smulbb	sl, r7, sl
 801fee0:	f805 9006 	strb.w	r9, [r5, r6]
 801fee4:	442e      	add	r6, r5
 801fee6:	78b7      	ldrb	r7, [r6, #2]
 801fee8:	f896 9001 	ldrb.w	r9, [r6, #1]
 801feec:	fb07 aa02 	mla	sl, r7, r2, sl
 801fef0:	fb09 b902 	mla	r9, r9, r2, fp
 801fef4:	fa1f fa8a 	uxth.w	sl, sl
 801fef8:	fa1f f989 	uxth.w	r9, r9
 801fefc:	f10a 0701 	add.w	r7, sl, #1
 801ff00:	f109 0b01 	add.w	fp, r9, #1
 801ff04:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff08:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ff0c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ff10:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff14:	f886 a002 	strb.w	sl, [r6, #2]
 801ff18:	f886 9001 	strb.w	r9, [r6, #1]
 801ff1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ff1e:	4474      	add	r4, lr
 801ff20:	f108 0801 	add.w	r8, r8, #1
 801ff24:	4410      	add	r0, r2
 801ff26:	e760      	b.n	801fdea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801ff28:	b005      	add	sp, #20
 801ff2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff2e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff32:	b085      	sub	sp, #20
 801ff34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ff38:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ff3a:	9203      	str	r2, [sp, #12]
 801ff3c:	6868      	ldr	r0, [r5, #4]
 801ff3e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801ff42:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801ff46:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ff4a:	fb00 2404 	mla	r4, r0, r4, r2
 801ff4e:	682a      	ldr	r2, [r5, #0]
 801ff50:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ff54:	4414      	add	r4, r2
 801ff56:	f8dc 2000 	ldr.w	r2, [ip]
 801ff5a:	9201      	str	r2, [sp, #4]
 801ff5c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ff60:	3204      	adds	r2, #4
 801ff62:	9202      	str	r2, [sp, #8]
 801ff64:	2900      	cmp	r1, #0
 801ff66:	dc03      	bgt.n	801ff70 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ff68:	9a03      	ldr	r2, [sp, #12]
 801ff6a:	2a00      	cmp	r2, #0
 801ff6c:	f340 8137 	ble.w	80201de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ff70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ff72:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ff76:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ff7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ff7c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ff80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	dd0d      	ble.n	801ffa4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ff88:	1405      	asrs	r5, r0, #16
 801ff8a:	d405      	bmi.n	801ff98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ff8c:	4545      	cmp	r5, r8
 801ff8e:	da03      	bge.n	801ff98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ff90:	1415      	asrs	r5, r2, #16
 801ff92:	d401      	bmi.n	801ff98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ff94:	42bd      	cmp	r5, r7
 801ff96:	db06      	blt.n	801ffa6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ff98:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ff9a:	4470      	add	r0, lr
 801ff9c:	3b01      	subs	r3, #1
 801ff9e:	3403      	adds	r4, #3
 801ffa0:	442a      	add	r2, r5
 801ffa2:	e7ef      	b.n	801ff84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ffa4:	d070      	beq.n	8020088 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801ffa6:	1e5d      	subs	r5, r3, #1
 801ffa8:	fb0e 0605 	mla	r6, lr, r5, r0
 801ffac:	1436      	asrs	r6, r6, #16
 801ffae:	d462      	bmi.n	8020076 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ffb0:	4546      	cmp	r6, r8
 801ffb2:	da60      	bge.n	8020076 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ffb4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ffb6:	fb06 2505 	mla	r5, r6, r5, r2
 801ffba:	142d      	asrs	r5, r5, #16
 801ffbc:	d45b      	bmi.n	8020076 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ffbe:	42bd      	cmp	r5, r7
 801ffc0:	da59      	bge.n	8020076 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ffc2:	1ce5      	adds	r5, r4, #3
 801ffc4:	469a      	mov	sl, r3
 801ffc6:	f1ba 0f00 	cmp.w	sl, #0
 801ffca:	dd58      	ble.n	802007e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801ffcc:	1416      	asrs	r6, r2, #16
 801ffce:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ffd2:	1407      	asrs	r7, r0, #16
 801ffd4:	46b1      	mov	r9, r6
 801ffd6:	9e01      	ldr	r6, [sp, #4]
 801ffd8:	fb08 6609 	mla	r6, r8, r9, r6
 801ffdc:	5df6      	ldrb	r6, [r6, r7]
 801ffde:	9f02      	ldr	r7, [sp, #8]
 801ffe0:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801ffe4:	0e37      	lsrs	r7, r6, #24
 801ffe6:	2fff      	cmp	r7, #255	; 0xff
 801ffe8:	f000 80f0 	beq.w	80201cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ffec:	fa5f f887 	uxtb.w	r8, r7
 801fff0:	b3d7      	cbz	r7, 8020068 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fff2:	fa1f f788 	uxth.w	r7, r8
 801fff6:	ea6f 0808 	mvn.w	r8, r8
 801fffa:	fa5f fb86 	uxtb.w	fp, r6
 801fffe:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8020002:	fa5f f888 	uxtb.w	r8, r8
 8020006:	fb1b fb07 	smulbb	fp, fp, r7
 802000a:	fb09 b908 	mla	r9, r9, r8, fp
 802000e:	fa1f f989 	uxth.w	r9, r9
 8020012:	f109 0b01 	add.w	fp, r9, #1
 8020016:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802001a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 802001e:	fb1b fb08 	smulbb	fp, fp, r8
 8020022:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020026:	f805 9c03 	strb.w	r9, [r5, #-3]
 802002a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 802002e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020032:	fb09 b907 	mla	r9, r9, r7, fp
 8020036:	fa1f f989 	uxth.w	r9, r9
 802003a:	f109 0b01 	add.w	fp, r9, #1
 802003e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020042:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020046:	f805 9c02 	strb.w	r9, [r5, #-2]
 802004a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 802004e:	fb19 f808 	smulbb	r8, r9, r8
 8020052:	fb06 8607 	mla	r6, r6, r7, r8
 8020056:	b2b6      	uxth	r6, r6
 8020058:	f106 0801 	add.w	r8, r6, #1
 802005c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8020060:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020064:	f805 8c01 	strb.w	r8, [r5, #-1]
 8020068:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802006a:	4470      	add	r0, lr
 802006c:	3503      	adds	r5, #3
 802006e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020072:	4432      	add	r2, r6
 8020074:	e7a7      	b.n	801ffc6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020076:	2600      	movs	r6, #0
 8020078:	1b9d      	subs	r5, r3, r6
 802007a:	2d00      	cmp	r5, #0
 802007c:	dc3b      	bgt.n	80200f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802007e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020082:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020086:	441c      	add	r4, r3
 8020088:	2900      	cmp	r1, #0
 802008a:	f340 80a8 	ble.w	80201de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802008e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020094:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020098:	3901      	subs	r1, #1
 802009a:	eeb0 6a62 	vmov.f32	s12, s5
 802009e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80200a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80200a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80200aa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80200ae:	eeb0 6a43 	vmov.f32	s12, s6
 80200b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80200b6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80200ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80200be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80200c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80200c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80200ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80200ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80200d2:	ee12 2a90 	vmov	r2, s5
 80200d6:	eef0 2a47 	vmov.f32	s5, s14
 80200da:	fb92 fef3 	sdiv	lr, r2, r3
 80200de:	ee13 2a10 	vmov	r2, s6
 80200e2:	eeb0 3a67 	vmov.f32	s6, s15
 80200e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80200ea:	9a03      	ldr	r2, [sp, #12]
 80200ec:	9312      	str	r3, [sp, #72]	; 0x48
 80200ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200f0:	bf08      	it	eq
 80200f2:	4613      	moveq	r3, r2
 80200f4:	e736      	b.n	801ff64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80200f6:	ea5f 4820 	movs.w	r8, r0, asr #16
 80200fa:	d457      	bmi.n	80201ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80200fc:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8020100:	4547      	cmp	r7, r8
 8020102:	dd53      	ble.n	80201ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020104:	ea5f 4922 	movs.w	r9, r2, asr #16
 8020108:	d450      	bmi.n	80201ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802010a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 802010e:	454d      	cmp	r5, r9
 8020110:	dd4c      	ble.n	80201ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020112:	9d01      	ldr	r5, [sp, #4]
 8020114:	b23f      	sxth	r7, r7
 8020116:	fb09 5707 	mla	r7, r9, r7, r5
 802011a:	f817 5008 	ldrb.w	r5, [r7, r8]
 802011e:	9f02      	ldr	r7, [sp, #8]
 8020120:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8020124:	0e2f      	lsrs	r7, r5, #24
 8020126:	2fff      	cmp	r7, #255	; 0xff
 8020128:	d045      	beq.n	80201b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802012a:	fa5f f987 	uxtb.w	r9, r7
 802012e:	b3ef      	cbz	r7, 80201ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020130:	fa1f f889 	uxth.w	r8, r9
 8020134:	ea6f 0909 	mvn.w	r9, r9
 8020138:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 802013c:	fa5f fb85 	uxtb.w	fp, r5
 8020140:	f814 a007 	ldrb.w	sl, [r4, r7]
 8020144:	fa5f f989 	uxtb.w	r9, r9
 8020148:	fb1b fb08 	smulbb	fp, fp, r8
 802014c:	fb0a ba09 	mla	sl, sl, r9, fp
 8020150:	fa1f fa8a 	uxth.w	sl, sl
 8020154:	f10a 0b01 	add.w	fp, sl, #1
 8020158:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 802015c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020160:	f804 a007 	strb.w	sl, [r4, r7]
 8020164:	4427      	add	r7, r4
 8020166:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802016a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 802016e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020172:	fb1b fb09 	smulbb	fp, fp, r9
 8020176:	fb0a ba08 	mla	sl, sl, r8, fp
 802017a:	fa1f fa8a 	uxth.w	sl, sl
 802017e:	f10a 0b01 	add.w	fp, sl, #1
 8020182:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8020186:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802018a:	f887 a001 	strb.w	sl, [r7, #1]
 802018e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020192:	fb1a f909 	smulbb	r9, sl, r9
 8020196:	fb05 9508 	mla	r5, r5, r8, r9
 802019a:	b2ad      	uxth	r5, r5
 802019c:	f105 0901 	add.w	r9, r5, #1
 80201a0:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80201a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80201a8:	f887 9002 	strb.w	r9, [r7, #2]
 80201ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80201ae:	4470      	add	r0, lr
 80201b0:	3601      	adds	r6, #1
 80201b2:	442a      	add	r2, r5
 80201b4:	e760      	b.n	8020078 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80201b6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80201ba:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80201be:	55e5      	strb	r5, [r4, r7]
 80201c0:	4427      	add	r7, r4
 80201c2:	0c2d      	lsrs	r5, r5, #16
 80201c4:	f887 8001 	strb.w	r8, [r7, #1]
 80201c8:	70bd      	strb	r5, [r7, #2]
 80201ca:	e7ef      	b.n	80201ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80201cc:	0a37      	lsrs	r7, r6, #8
 80201ce:	f805 6c03 	strb.w	r6, [r5, #-3]
 80201d2:	0c36      	lsrs	r6, r6, #16
 80201d4:	f805 7c02 	strb.w	r7, [r5, #-2]
 80201d8:	f805 6c01 	strb.w	r6, [r5, #-1]
 80201dc:	e744      	b.n	8020068 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80201de:	b005      	add	sp, #20
 80201e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201e4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201e8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80201ea:	9201      	str	r2, [sp, #4]
 80201ec:	6870      	ldr	r0, [r6, #4]
 80201ee:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80201f2:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80201f6:	fa1f fe85 	uxth.w	lr, r5
 80201fa:	43ed      	mvns	r5, r5
 80201fc:	f8dc 8000 	ldr.w	r8, [ip]
 8020200:	b2ed      	uxtb	r5, r5
 8020202:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8020206:	fb00 2404 	mla	r4, r0, r4, r2
 802020a:	6832      	ldr	r2, [r6, #0]
 802020c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020210:	4414      	add	r4, r2
 8020212:	2900      	cmp	r1, #0
 8020214:	dc03      	bgt.n	802021e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020216:	9a01      	ldr	r2, [sp, #4]
 8020218:	2a00      	cmp	r2, #0
 802021a:	f340 810d 	ble.w	8020438 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802021e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020220:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8020224:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802022a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 802022e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020232:	2b00      	cmp	r3, #0
 8020234:	dd0e      	ble.n	8020254 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020236:	1406      	asrs	r6, r0, #16
 8020238:	d405      	bmi.n	8020246 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802023a:	4556      	cmp	r6, sl
 802023c:	da03      	bge.n	8020246 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802023e:	1416      	asrs	r6, r2, #16
 8020240:	d401      	bmi.n	8020246 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020242:	454e      	cmp	r6, r9
 8020244:	db07      	blt.n	8020256 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020246:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020248:	3b01      	subs	r3, #1
 802024a:	3403      	adds	r4, #3
 802024c:	4430      	add	r0, r6
 802024e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020250:	4432      	add	r2, r6
 8020252:	e7ee      	b.n	8020232 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020254:	d060      	beq.n	8020318 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8020256:	1e5e      	subs	r6, r3, #1
 8020258:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802025a:	fb07 0706 	mla	r7, r7, r6, r0
 802025e:	143f      	asrs	r7, r7, #16
 8020260:	d451      	bmi.n	8020306 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020262:	4557      	cmp	r7, sl
 8020264:	da4f      	bge.n	8020306 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020266:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020268:	fb07 2606 	mla	r6, r7, r6, r2
 802026c:	1436      	asrs	r6, r6, #16
 802026e:	d44a      	bmi.n	8020306 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020270:	454e      	cmp	r6, r9
 8020272:	da48      	bge.n	8020306 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020274:	1ce6      	adds	r6, r4, #3
 8020276:	4699      	mov	r9, r3
 8020278:	f1b9 0f00 	cmp.w	r9, #0
 802027c:	f106 0603 	add.w	r6, r6, #3
 8020280:	dd45      	ble.n	802030e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8020282:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8020286:	ea4f 4a20 	mov.w	sl, r0, asr #16
 802028a:	1417      	asrs	r7, r2, #16
 802028c:	f109 39ff 	add.w	r9, r9, #4294967295
 8020290:	fb0b a707 	mla	r7, fp, r7, sl
 8020294:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8020298:	fb1b fb05 	smulbb	fp, fp, r5
 802029c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80202a0:	eb08 0a07 	add.w	sl, r8, r7
 80202a4:	f818 7007 	ldrb.w	r7, [r8, r7]
 80202a8:	fb07 b70e 	mla	r7, r7, lr, fp
 80202ac:	b2bf      	uxth	r7, r7
 80202ae:	f107 0b01 	add.w	fp, r7, #1
 80202b2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80202b6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80202ba:	fb1b fb05 	smulbb	fp, fp, r5
 80202be:	123f      	asrs	r7, r7, #8
 80202c0:	f806 7c06 	strb.w	r7, [r6, #-6]
 80202c4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80202c8:	fb07 b70e 	mla	r7, r7, lr, fp
 80202cc:	b2bf      	uxth	r7, r7
 80202ce:	f107 0b01 	add.w	fp, r7, #1
 80202d2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80202d6:	123f      	asrs	r7, r7, #8
 80202d8:	f806 7c05 	strb.w	r7, [r6, #-5]
 80202dc:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80202e0:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80202e4:	fb1a fa05 	smulbb	sl, sl, r5
 80202e8:	fb07 a70e 	mla	r7, r7, lr, sl
 80202ec:	b2bf      	uxth	r7, r7
 80202ee:	f107 0a01 	add.w	sl, r7, #1
 80202f2:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80202f6:	123f      	asrs	r7, r7, #8
 80202f8:	f806 7c04 	strb.w	r7, [r6, #-4]
 80202fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80202fe:	4438      	add	r0, r7
 8020300:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020302:	443a      	add	r2, r7
 8020304:	e7b8      	b.n	8020278 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020306:	2700      	movs	r7, #0
 8020308:	1bde      	subs	r6, r3, r7
 802030a:	2e00      	cmp	r6, #0
 802030c:	dc3f      	bgt.n	802038e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802030e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020312:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020316:	441c      	add	r4, r3
 8020318:	2900      	cmp	r1, #0
 802031a:	f340 808d 	ble.w	8020438 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802031e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020324:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020328:	3901      	subs	r1, #1
 802032a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802032e:	eef0 6a62 	vmov.f32	s13, s5
 8020332:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020336:	ee31 1a05 	vadd.f32	s2, s2, s10
 802033a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802033e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8020342:	eef0 6a43 	vmov.f32	s13, s6
 8020346:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802034a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 802034e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020352:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020356:	ee77 2a62 	vsub.f32	s5, s14, s5
 802035a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802035e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020362:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020366:	ee12 2a90 	vmov	r2, s5
 802036a:	eef0 2a47 	vmov.f32	s5, s14
 802036e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020372:	ee13 2a10 	vmov	r2, s6
 8020376:	930f      	str	r3, [sp, #60]	; 0x3c
 8020378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802037a:	eeb0 3a67 	vmov.f32	s6, s15
 802037e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020382:	9a01      	ldr	r2, [sp, #4]
 8020384:	9310      	str	r3, [sp, #64]	; 0x40
 8020386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020388:	bf08      	it	eq
 802038a:	4613      	moveq	r3, r2
 802038c:	e741      	b.n	8020212 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802038e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020392:	d44b      	bmi.n	802042c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020394:	f8dc b008 	ldr.w	fp, [ip, #8]
 8020398:	45cb      	cmp	fp, r9
 802039a:	dd47      	ble.n	802042c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802039c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80203a0:	d444      	bmi.n	802042c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80203a2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80203a6:	4556      	cmp	r6, sl
 80203a8:	dd40      	ble.n	802042c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80203aa:	fa0f f68b 	sxth.w	r6, fp
 80203ae:	fb0a 9906 	mla	r9, sl, r6, r9
 80203b2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80203b6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80203ba:	f814 b006 	ldrb.w	fp, [r4, r6]
 80203be:	fb1b fb05 	smulbb	fp, fp, r5
 80203c2:	eb08 0a09 	add.w	sl, r8, r9
 80203c6:	f818 9009 	ldrb.w	r9, [r8, r9]
 80203ca:	fb09 b90e 	mla	r9, r9, lr, fp
 80203ce:	fa1f f989 	uxth.w	r9, r9
 80203d2:	f109 0b01 	add.w	fp, r9, #1
 80203d6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80203da:	ea4f 2929 	mov.w	r9, r9, asr #8
 80203de:	f804 9006 	strb.w	r9, [r4, r6]
 80203e2:	4426      	add	r6, r4
 80203e4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80203e8:	f896 b001 	ldrb.w	fp, [r6, #1]
 80203ec:	fb1b fb05 	smulbb	fp, fp, r5
 80203f0:	fb09 b90e 	mla	r9, r9, lr, fp
 80203f4:	fa1f f989 	uxth.w	r9, r9
 80203f8:	f109 0b01 	add.w	fp, r9, #1
 80203fc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020400:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020404:	f886 9001 	strb.w	r9, [r6, #1]
 8020408:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802040c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8020410:	fb1a fa05 	smulbb	sl, sl, r5
 8020414:	fb09 a90e 	mla	r9, r9, lr, sl
 8020418:	fa1f f989 	uxth.w	r9, r9
 802041c:	f109 0a01 	add.w	sl, r9, #1
 8020420:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8020424:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020428:	f886 9002 	strb.w	r9, [r6, #2]
 802042c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802042e:	3701      	adds	r7, #1
 8020430:	4430      	add	r0, r6
 8020432:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020434:	4432      	add	r2, r6
 8020436:	e767      	b.n	8020308 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020438:	b003      	add	sp, #12
 802043a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802043e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802043e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020442:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020448:	9201      	str	r2, [sp, #4]
 802044a:	6868      	ldr	r0, [r5, #4]
 802044c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 802044e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8020452:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8020456:	fb00 2404 	mla	r4, r0, r4, r2
 802045a:	682a      	ldr	r2, [r5, #0]
 802045c:	f8d7 8000 	ldr.w	r8, [r7]
 8020460:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020464:	4414      	add	r4, r2
 8020466:	2900      	cmp	r1, #0
 8020468:	dc03      	bgt.n	8020472 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802046a:	9a01      	ldr	r2, [sp, #4]
 802046c:	2a00      	cmp	r2, #0
 802046e:	f340 80af 	ble.w	80205d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020472:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020474:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8020478:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802047c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802047e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8020482:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020486:	2b00      	cmp	r3, #0
 8020488:	dd0c      	ble.n	80204a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802048a:	1405      	asrs	r5, r0, #16
 802048c:	d405      	bmi.n	802049a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802048e:	4555      	cmp	r5, sl
 8020490:	da03      	bge.n	802049a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020492:	1415      	asrs	r5, r2, #16
 8020494:	d401      	bmi.n	802049a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020496:	454d      	cmp	r5, r9
 8020498:	db05      	blt.n	80204a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802049a:	4470      	add	r0, lr
 802049c:	4462      	add	r2, ip
 802049e:	3b01      	subs	r3, #1
 80204a0:	3403      	adds	r4, #3
 80204a2:	e7f0      	b.n	8020486 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80204a4:	d038      	beq.n	8020518 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80204a6:	1e5d      	subs	r5, r3, #1
 80204a8:	fb0e 0605 	mla	r6, lr, r5, r0
 80204ac:	1436      	asrs	r6, r6, #16
 80204ae:	d42a      	bmi.n	8020506 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80204b0:	4556      	cmp	r6, sl
 80204b2:	da28      	bge.n	8020506 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80204b4:	fb0c 2505 	mla	r5, ip, r5, r2
 80204b8:	142d      	asrs	r5, r5, #16
 80204ba:	d424      	bmi.n	8020506 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80204bc:	454d      	cmp	r5, r9
 80204be:	da22      	bge.n	8020506 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80204c0:	1ce6      	adds	r6, r4, #3
 80204c2:	4699      	mov	r9, r3
 80204c4:	f1b9 0f00 	cmp.w	r9, #0
 80204c8:	f106 0603 	add.w	r6, r6, #3
 80204cc:	dd1f      	ble.n	802050e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80204ce:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80204d2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80204d6:	1415      	asrs	r5, r2, #16
 80204d8:	4470      	add	r0, lr
 80204da:	4462      	add	r2, ip
 80204dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80204e0:	fb0b a505 	mla	r5, fp, r5, sl
 80204e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80204e8:	eb08 0a05 	add.w	sl, r8, r5
 80204ec:	f818 5005 	ldrb.w	r5, [r8, r5]
 80204f0:	f806 5c06 	strb.w	r5, [r6, #-6]
 80204f4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80204f8:	f806 5c05 	strb.w	r5, [r6, #-5]
 80204fc:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8020500:	f806 5c04 	strb.w	r5, [r6, #-4]
 8020504:	e7de      	b.n	80204c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020506:	2600      	movs	r6, #0
 8020508:	1b9d      	subs	r5, r3, r6
 802050a:	2d00      	cmp	r5, #0
 802050c:	dc38      	bgt.n	8020580 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802050e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020516:	441c      	add	r4, r3
 8020518:	2900      	cmp	r1, #0
 802051a:	dd59      	ble.n	80205d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 802051c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020522:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020526:	3901      	subs	r1, #1
 8020528:	eeb0 6a62 	vmov.f32	s12, s5
 802052c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020530:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020534:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020538:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 802053c:	eeb0 6a43 	vmov.f32	s12, s6
 8020540:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020544:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8020548:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802054c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020550:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020554:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020558:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802055c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020560:	ee12 2a90 	vmov	r2, s5
 8020564:	eef0 2a47 	vmov.f32	s5, s14
 8020568:	fb92 fef3 	sdiv	lr, r2, r3
 802056c:	ee13 2a10 	vmov	r2, s6
 8020570:	eeb0 3a67 	vmov.f32	s6, s15
 8020574:	fb92 fcf3 	sdiv	ip, r2, r3
 8020578:	9a01      	ldr	r2, [sp, #4]
 802057a:	bf08      	it	eq
 802057c:	4613      	moveq	r3, r2
 802057e:	e772      	b.n	8020466 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8020580:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020584:	d420      	bmi.n	80205c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020586:	f8d7 b008 	ldr.w	fp, [r7, #8]
 802058a:	45cb      	cmp	fp, r9
 802058c:	dd1c      	ble.n	80205c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802058e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020592:	d419      	bmi.n	80205c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020594:	68fd      	ldr	r5, [r7, #12]
 8020596:	4555      	cmp	r5, sl
 8020598:	dd16      	ble.n	80205c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802059a:	fa0f f58b 	sxth.w	r5, fp
 802059e:	fb0a 9505 	mla	r5, sl, r5, r9
 80205a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80205a6:	f818 9005 	ldrb.w	r9, [r8, r5]
 80205aa:	eb08 0b05 	add.w	fp, r8, r5
 80205ae:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80205b2:	f804 9005 	strb.w	r9, [r4, r5]
 80205b6:	4425      	add	r5, r4
 80205b8:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80205bc:	f885 9001 	strb.w	r9, [r5, #1]
 80205c0:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80205c4:	f885 9002 	strb.w	r9, [r5, #2]
 80205c8:	4470      	add	r0, lr
 80205ca:	4462      	add	r2, ip
 80205cc:	3601      	adds	r6, #1
 80205ce:	e79b      	b.n	8020508 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80205d0:	b003      	add	sp, #12
 80205d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080205d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80205d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205da:	b085      	sub	sp, #20
 80205dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80205e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80205e2:	9202      	str	r2, [sp, #8]
 80205e4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80205e8:	6860      	ldr	r0, [r4, #4]
 80205ea:	9203      	str	r2, [sp, #12]
 80205ec:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80205f0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80205f4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80205f8:	fb00 2505 	mla	r5, r0, r5, r2
 80205fc:	6822      	ldr	r2, [r4, #0]
 80205fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020602:	4415      	add	r5, r2
 8020604:	f8dc 2000 	ldr.w	r2, [ip]
 8020608:	9201      	str	r2, [sp, #4]
 802060a:	2900      	cmp	r1, #0
 802060c:	dc03      	bgt.n	8020616 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802060e:	9a02      	ldr	r2, [sp, #8]
 8020610:	2a00      	cmp	r2, #0
 8020612:	f340 8122 	ble.w	802085a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020618:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802061c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020620:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020622:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020626:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802062a:	2b00      	cmp	r3, #0
 802062c:	dd0d      	ble.n	802064a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802062e:	1422      	asrs	r2, r4, #16
 8020630:	d405      	bmi.n	802063e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020632:	4542      	cmp	r2, r8
 8020634:	da03      	bge.n	802063e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020636:	1402      	asrs	r2, r0, #16
 8020638:	d401      	bmi.n	802063e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802063a:	42ba      	cmp	r2, r7
 802063c:	db06      	blt.n	802064c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802063e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020640:	4474      	add	r4, lr
 8020642:	3b01      	subs	r3, #1
 8020644:	3503      	adds	r5, #3
 8020646:	4410      	add	r0, r2
 8020648:	e7ef      	b.n	802062a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802064a:	d072      	beq.n	8020732 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 802064c:	1e5a      	subs	r2, r3, #1
 802064e:	fb0e 4602 	mla	r6, lr, r2, r4
 8020652:	1436      	asrs	r6, r6, #16
 8020654:	d462      	bmi.n	802071c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020656:	4546      	cmp	r6, r8
 8020658:	da60      	bge.n	802071c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802065a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802065c:	fb06 0202 	mla	r2, r6, r2, r0
 8020660:	1412      	asrs	r2, r2, #16
 8020662:	d45b      	bmi.n	802071c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020664:	42ba      	cmp	r2, r7
 8020666:	da59      	bge.n	802071c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020668:	1cef      	adds	r7, r5, #3
 802066a:	4699      	mov	r9, r3
 802066c:	f1b9 0f00 	cmp.w	r9, #0
 8020670:	dd5a      	ble.n	8020728 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020672:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020676:	1426      	asrs	r6, r4, #16
 8020678:	1402      	asrs	r2, r0, #16
 802067a:	fb08 6202 	mla	r2, r8, r2, r6
 802067e:	9e01      	ldr	r6, [sp, #4]
 8020680:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8020684:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8020688:	d041      	beq.n	802070e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802068a:	9a03      	ldr	r2, [sp, #12]
 802068c:	fa5f fb86 	uxtb.w	fp, r6
 8020690:	fb02 f808 	mul.w	r8, r2, r8
 8020694:	f108 0201 	add.w	r2, r8, #1
 8020698:	eb02 2228 	add.w	r2, r2, r8, asr #8
 802069c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80206a0:	1212      	asrs	r2, r2, #8
 80206a2:	fa1f fa82 	uxth.w	sl, r2
 80206a6:	43d2      	mvns	r2, r2
 80206a8:	fb1b fb0a 	smulbb	fp, fp, sl
 80206ac:	b2d2      	uxtb	r2, r2
 80206ae:	fb08 b802 	mla	r8, r8, r2, fp
 80206b2:	fa1f f888 	uxth.w	r8, r8
 80206b6:	f108 0b01 	add.w	fp, r8, #1
 80206ba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80206be:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80206c2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80206c6:	fb1b fb0a 	smulbb	fp, fp, sl
 80206ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 80206ce:	fb16 fa0a 	smulbb	sl, r6, sl
 80206d2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80206d6:	f807 8c03 	strb.w	r8, [r7, #-3]
 80206da:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80206de:	fb06 aa02 	mla	sl, r6, r2, sl
 80206e2:	fb08 b802 	mla	r8, r8, r2, fp
 80206e6:	fa1f fa8a 	uxth.w	sl, sl
 80206ea:	fa1f f888 	uxth.w	r8, r8
 80206ee:	f10a 0601 	add.w	r6, sl, #1
 80206f2:	f108 0b01 	add.w	fp, r8, #1
 80206f6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80206fa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80206fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020702:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020706:	f807 ac01 	strb.w	sl, [r7, #-1]
 802070a:	f807 8c02 	strb.w	r8, [r7, #-2]
 802070e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020710:	4474      	add	r4, lr
 8020712:	3703      	adds	r7, #3
 8020714:	f109 39ff 	add.w	r9, r9, #4294967295
 8020718:	4410      	add	r0, r2
 802071a:	e7a7      	b.n	802066c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802071c:	f04f 0800 	mov.w	r8, #0
 8020720:	eba3 0208 	sub.w	r2, r3, r8
 8020724:	2a00      	cmp	r2, #0
 8020726:	dc3b      	bgt.n	80207a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020728:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802072c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020730:	441d      	add	r5, r3
 8020732:	2900      	cmp	r1, #0
 8020734:	f340 8091 	ble.w	802085a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020738:	ee30 0a04 	vadd.f32	s0, s0, s8
 802073c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802073e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020742:	3901      	subs	r1, #1
 8020744:	eeb0 6a62 	vmov.f32	s12, s5
 8020748:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802074c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020750:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020754:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020758:	eeb0 6a43 	vmov.f32	s12, s6
 802075c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020760:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020764:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020768:	ee61 7a27 	vmul.f32	s15, s2, s15
 802076c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020770:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020774:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020778:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802077c:	ee12 2a90 	vmov	r2, s5
 8020780:	eef0 2a47 	vmov.f32	s5, s14
 8020784:	fb92 fef3 	sdiv	lr, r2, r3
 8020788:	ee13 2a10 	vmov	r2, s6
 802078c:	eeb0 3a67 	vmov.f32	s6, s15
 8020790:	fb92 f3f3 	sdiv	r3, r2, r3
 8020794:	9a02      	ldr	r2, [sp, #8]
 8020796:	9312      	str	r3, [sp, #72]	; 0x48
 8020798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802079a:	bf08      	it	eq
 802079c:	4613      	moveq	r3, r2
 802079e:	e734      	b.n	802060a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80207a0:	1427      	asrs	r7, r4, #16
 80207a2:	d454      	bmi.n	802084e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80207a4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80207a8:	42be      	cmp	r6, r7
 80207aa:	dd50      	ble.n	802084e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80207ac:	ea5f 4920 	movs.w	r9, r0, asr #16
 80207b0:	d44d      	bmi.n	802084e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80207b2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80207b6:	454a      	cmp	r2, r9
 80207b8:	dd49      	ble.n	802084e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80207ba:	b236      	sxth	r6, r6
 80207bc:	9a01      	ldr	r2, [sp, #4]
 80207be:	fb09 7606 	mla	r6, r9, r6, r7
 80207c2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80207c6:	0e3a      	lsrs	r2, r7, #24
 80207c8:	d041      	beq.n	802084e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80207ca:	9e03      	ldr	r6, [sp, #12]
 80207cc:	fa5f fb87 	uxtb.w	fp, r7
 80207d0:	4372      	muls	r2, r6
 80207d2:	1c56      	adds	r6, r2, #1
 80207d4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80207d8:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80207dc:	1212      	asrs	r2, r2, #8
 80207de:	f815 9006 	ldrb.w	r9, [r5, r6]
 80207e2:	fa1f fa82 	uxth.w	sl, r2
 80207e6:	43d2      	mvns	r2, r2
 80207e8:	fb1b fb0a 	smulbb	fp, fp, sl
 80207ec:	b2d2      	uxtb	r2, r2
 80207ee:	fb09 b902 	mla	r9, r9, r2, fp
 80207f2:	fa1f f989 	uxth.w	r9, r9
 80207f6:	f109 0b01 	add.w	fp, r9, #1
 80207fa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80207fe:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020802:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020806:	fb1b fb0a 	smulbb	fp, fp, sl
 802080a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802080e:	fb17 fa0a 	smulbb	sl, r7, sl
 8020812:	f805 9006 	strb.w	r9, [r5, r6]
 8020816:	442e      	add	r6, r5
 8020818:	78b7      	ldrb	r7, [r6, #2]
 802081a:	f896 9001 	ldrb.w	r9, [r6, #1]
 802081e:	fb07 aa02 	mla	sl, r7, r2, sl
 8020822:	fb09 b902 	mla	r9, r9, r2, fp
 8020826:	fa1f fa8a 	uxth.w	sl, sl
 802082a:	fa1f f989 	uxth.w	r9, r9
 802082e:	f10a 0701 	add.w	r7, sl, #1
 8020832:	f109 0b01 	add.w	fp, r9, #1
 8020836:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802083a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802083e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020842:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020846:	f886 a002 	strb.w	sl, [r6, #2]
 802084a:	f886 9001 	strb.w	r9, [r6, #1]
 802084e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020850:	4474      	add	r4, lr
 8020852:	f108 0801 	add.w	r8, r8, #1
 8020856:	4410      	add	r0, r2
 8020858:	e762      	b.n	8020720 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802085a:	b005      	add	sp, #20
 802085c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020860 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020864:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802086a:	9201      	str	r2, [sp, #4]
 802086c:	6860      	ldr	r0, [r4, #4]
 802086e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8020872:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8020876:	fb00 2505 	mla	r5, r0, r5, r2
 802087a:	6822      	ldr	r2, [r4, #0]
 802087c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020880:	4415      	add	r5, r2
 8020882:	f8dc 2000 	ldr.w	r2, [ip]
 8020886:	9200      	str	r2, [sp, #0]
 8020888:	2900      	cmp	r1, #0
 802088a:	dc03      	bgt.n	8020894 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802088c:	9a01      	ldr	r2, [sp, #4]
 802088e:	2a00      	cmp	r2, #0
 8020890:	f340 812b 	ble.w	8020aea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020894:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020896:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 802089a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 802089e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80208a0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80208a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	dd0e      	ble.n	80208ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80208ac:	1422      	asrs	r2, r4, #16
 80208ae:	d405      	bmi.n	80208bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80208b0:	4572      	cmp	r2, lr
 80208b2:	da03      	bge.n	80208bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80208b4:	1402      	asrs	r2, r0, #16
 80208b6:	d401      	bmi.n	80208bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80208b8:	42ba      	cmp	r2, r7
 80208ba:	db07      	blt.n	80208cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80208bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80208be:	3b01      	subs	r3, #1
 80208c0:	3503      	adds	r5, #3
 80208c2:	4414      	add	r4, r2
 80208c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80208c6:	4410      	add	r0, r2
 80208c8:	e7ee      	b.n	80208a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80208ca:	d06f      	beq.n	80209ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80208cc:	1e5a      	subs	r2, r3, #1
 80208ce:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80208d0:	fb06 4602 	mla	r6, r6, r2, r4
 80208d4:	1436      	asrs	r6, r6, #16
 80208d6:	d45e      	bmi.n	8020996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80208d8:	4576      	cmp	r6, lr
 80208da:	da5c      	bge.n	8020996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80208dc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80208de:	fb06 0202 	mla	r2, r6, r2, r0
 80208e2:	1412      	asrs	r2, r2, #16
 80208e4:	d457      	bmi.n	8020996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80208e6:	42ba      	cmp	r2, r7
 80208e8:	da55      	bge.n	8020996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80208ea:	1cee      	adds	r6, r5, #3
 80208ec:	469a      	mov	sl, r3
 80208ee:	f1ba 0f00 	cmp.w	sl, #0
 80208f2:	dd56      	ble.n	80209a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80208f4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80208f8:	1427      	asrs	r7, r4, #16
 80208fa:	1402      	asrs	r2, r0, #16
 80208fc:	fb0e 7202 	mla	r2, lr, r2, r7
 8020900:	9f00      	ldr	r7, [sp, #0]
 8020902:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8020906:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 802090a:	d03c      	beq.n	8020986 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802090c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020910:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020914:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020918:	fa5f f28e 	uxtb.w	r2, lr
 802091c:	b2ff      	uxtb	r7, r7
 802091e:	f000 80dd 	beq.w	8020adc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020922:	fa1f f882 	uxth.w	r8, r2
 8020926:	43d2      	mvns	r2, r2
 8020928:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 802092c:	fb17 f708 	smulbb	r7, r7, r8
 8020930:	b2d2      	uxtb	r2, r2
 8020932:	fb19 f908 	smulbb	r9, r9, r8
 8020936:	fb0e 7702 	mla	r7, lr, r2, r7
 802093a:	fb1b f808 	smulbb	r8, fp, r8
 802093e:	b2bf      	uxth	r7, r7
 8020940:	f107 0e01 	add.w	lr, r7, #1
 8020944:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020948:	123f      	asrs	r7, r7, #8
 802094a:	f806 7c03 	strb.w	r7, [r6, #-3]
 802094e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8020952:	fb07 9902 	mla	r9, r7, r2, r9
 8020956:	fa1f f989 	uxth.w	r9, r9
 802095a:	f109 0701 	add.w	r7, r9, #1
 802095e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020962:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8020966:	fb07 8802 	mla	r8, r7, r2, r8
 802096a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802096e:	fa1f f888 	uxth.w	r8, r8
 8020972:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020976:	f108 0201 	add.w	r2, r8, #1
 802097a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802097e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020982:	f806 8c01 	strb.w	r8, [r6, #-1]
 8020986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020988:	3603      	adds	r6, #3
 802098a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802098e:	4414      	add	r4, r2
 8020990:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020992:	4410      	add	r0, r2
 8020994:	e7ab      	b.n	80208ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020996:	f04f 0e00 	mov.w	lr, #0
 802099a:	eba3 020e 	sub.w	r2, r3, lr
 802099e:	2a00      	cmp	r2, #0
 80209a0:	dc3d      	bgt.n	8020a1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80209a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80209a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80209aa:	441d      	add	r5, r3
 80209ac:	2900      	cmp	r1, #0
 80209ae:	f340 809c 	ble.w	8020aea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80209b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80209b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80209bc:	3901      	subs	r1, #1
 80209be:	eeb0 6a62 	vmov.f32	s12, s5
 80209c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80209c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80209ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80209ce:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80209d2:	eeb0 6a43 	vmov.f32	s12, s6
 80209d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80209da:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80209de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80209e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80209e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80209ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80209ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80209f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80209f6:	ee12 2a90 	vmov	r2, s5
 80209fa:	eef0 2a47 	vmov.f32	s5, s14
 80209fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a02:	ee13 2a10 	vmov	r2, s6
 8020a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8020a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a0a:	eeb0 3a67 	vmov.f32	s6, s15
 8020a0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a12:	9a01      	ldr	r2, [sp, #4]
 8020a14:	9310      	str	r3, [sp, #64]	; 0x40
 8020a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a18:	bf08      	it	eq
 8020a1a:	4613      	moveq	r3, r2
 8020a1c:	e734      	b.n	8020888 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8020a1e:	1427      	asrs	r7, r4, #16
 8020a20:	d44d      	bmi.n	8020abe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020a22:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020a26:	42be      	cmp	r6, r7
 8020a28:	dd49      	ble.n	8020abe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020a2a:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020a2e:	d446      	bmi.n	8020abe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020a30:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020a34:	4542      	cmp	r2, r8
 8020a36:	dd42      	ble.n	8020abe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020a38:	b236      	sxth	r6, r6
 8020a3a:	9a00      	ldr	r2, [sp, #0]
 8020a3c:	fb08 7606 	mla	r6, r8, r6, r7
 8020a40:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020a44:	0e3a      	lsrs	r2, r7, #24
 8020a46:	d03a      	beq.n	8020abe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020a48:	2aff      	cmp	r2, #255	; 0xff
 8020a4a:	b2d6      	uxtb	r6, r2
 8020a4c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020a50:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020a54:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8020a58:	b2ff      	uxtb	r7, r7
 8020a5a:	d037      	beq.n	8020acc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020a5c:	fa1f f986 	uxth.w	r9, r6
 8020a60:	4472      	add	r2, lr
 8020a62:	43f6      	mvns	r6, r6
 8020a64:	f815 8002 	ldrb.w	r8, [r5, r2]
 8020a68:	fb17 f709 	smulbb	r7, r7, r9
 8020a6c:	fb1a fa09 	smulbb	sl, sl, r9
 8020a70:	b2f6      	uxtb	r6, r6
 8020a72:	fb1b f909 	smulbb	r9, fp, r9
 8020a76:	fb08 7706 	mla	r7, r8, r6, r7
 8020a7a:	b2bf      	uxth	r7, r7
 8020a7c:	f107 0801 	add.w	r8, r7, #1
 8020a80:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8020a84:	123f      	asrs	r7, r7, #8
 8020a86:	54af      	strb	r7, [r5, r2]
 8020a88:	442a      	add	r2, r5
 8020a8a:	7857      	ldrb	r7, [r2, #1]
 8020a8c:	fb07 aa06 	mla	sl, r7, r6, sl
 8020a90:	fa1f fa8a 	uxth.w	sl, sl
 8020a94:	f10a 0701 	add.w	r7, sl, #1
 8020a98:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a9c:	7897      	ldrb	r7, [r2, #2]
 8020a9e:	fb07 9906 	mla	r9, r7, r6, r9
 8020aa2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020aa6:	fa1f f989 	uxth.w	r9, r9
 8020aaa:	f882 a001 	strb.w	sl, [r2, #1]
 8020aae:	f109 0601 	add.w	r6, r9, #1
 8020ab2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020ab6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020aba:	f882 9002 	strb.w	r9, [r2, #2]
 8020abe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020ac0:	f10e 0e01 	add.w	lr, lr, #1
 8020ac4:	4414      	add	r4, r2
 8020ac6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020ac8:	4410      	add	r0, r2
 8020aca:	e766      	b.n	802099a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020acc:	4472      	add	r2, lr
 8020ace:	54af      	strb	r7, [r5, r2]
 8020ad0:	442a      	add	r2, r5
 8020ad2:	f882 a001 	strb.w	sl, [r2, #1]
 8020ad6:	f882 b002 	strb.w	fp, [r2, #2]
 8020ada:	e7f0      	b.n	8020abe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020adc:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020ae0:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020ae4:	f806 bc01 	strb.w	fp, [r6, #-1]
 8020ae8:	e74d      	b.n	8020986 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020aea:	b003      	add	sp, #12
 8020aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020af0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020af4:	b087      	sub	sp, #28
 8020af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020afa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020afc:	9204      	str	r2, [sp, #16]
 8020afe:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020b02:	6860      	ldr	r0, [r4, #4]
 8020b04:	9205      	str	r2, [sp, #20]
 8020b06:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8020b0a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8020b0e:	9101      	str	r1, [sp, #4]
 8020b10:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020b14:	fb00 2505 	mla	r5, r0, r5, r2
 8020b18:	6822      	ldr	r2, [r4, #0]
 8020b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020b1e:	4415      	add	r5, r2
 8020b20:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020b24:	3201      	adds	r2, #1
 8020b26:	f022 0201 	bic.w	r2, r2, #1
 8020b2a:	9202      	str	r2, [sp, #8]
 8020b2c:	f8dc 2000 	ldr.w	r2, [ip]
 8020b30:	9203      	str	r2, [sp, #12]
 8020b32:	9a01      	ldr	r2, [sp, #4]
 8020b34:	2a00      	cmp	r2, #0
 8020b36:	dc03      	bgt.n	8020b40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8020b38:	9a04      	ldr	r2, [sp, #16]
 8020b3a:	2a00      	cmp	r2, #0
 8020b3c:	f340 8135 	ble.w	8020daa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020b40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020b42:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020b46:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020b4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020b4c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020b50:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	dd0d      	ble.n	8020b74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020b58:	1422      	asrs	r2, r4, #16
 8020b5a:	d405      	bmi.n	8020b68 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020b5c:	4542      	cmp	r2, r8
 8020b5e:	da03      	bge.n	8020b68 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020b60:	1402      	asrs	r2, r0, #16
 8020b62:	d401      	bmi.n	8020b68 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020b64:	42ba      	cmp	r2, r7
 8020b66:	db06      	blt.n	8020b76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020b68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020b6a:	4474      	add	r4, lr
 8020b6c:	3b01      	subs	r3, #1
 8020b6e:	3503      	adds	r5, #3
 8020b70:	4410      	add	r0, r2
 8020b72:	e7ef      	b.n	8020b54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020b74:	d077      	beq.n	8020c66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020b76:	1e5a      	subs	r2, r3, #1
 8020b78:	fb0e 4602 	mla	r6, lr, r2, r4
 8020b7c:	1436      	asrs	r6, r6, #16
 8020b7e:	d469      	bmi.n	8020c54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020b80:	4546      	cmp	r6, r8
 8020b82:	da67      	bge.n	8020c54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020b84:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8020b86:	fb06 0202 	mla	r2, r6, r2, r0
 8020b8a:	1412      	asrs	r2, r2, #16
 8020b8c:	d462      	bmi.n	8020c54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020b8e:	42ba      	cmp	r2, r7
 8020b90:	da60      	bge.n	8020c54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020b92:	1cee      	adds	r6, r5, #3
 8020b94:	4699      	mov	r9, r3
 8020b96:	f1b9 0f00 	cmp.w	r9, #0
 8020b9a:	dd5f      	ble.n	8020c5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020b9c:	1422      	asrs	r2, r4, #16
 8020b9e:	9902      	ldr	r1, [sp, #8]
 8020ba0:	1407      	asrs	r7, r0, #16
 8020ba2:	fb01 2707 	mla	r7, r1, r7, r2
 8020ba6:	9903      	ldr	r1, [sp, #12]
 8020ba8:	087a      	lsrs	r2, r7, #1
 8020baa:	5c8a      	ldrb	r2, [r1, r2]
 8020bac:	07f9      	lsls	r1, r7, #31
 8020bae:	bf54      	ite	pl
 8020bb0:	f002 020f 	andpl.w	r2, r2, #15
 8020bb4:	1112      	asrmi	r2, r2, #4
 8020bb6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020bba:	b2d2      	uxtb	r2, r2
 8020bbc:	2a00      	cmp	r2, #0
 8020bbe:	d042      	beq.n	8020c46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020bc0:	497b      	ldr	r1, [pc, #492]	; (8020db0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8020bc2:	680f      	ldr	r7, [r1, #0]
 8020bc4:	9905      	ldr	r1, [sp, #20]
 8020bc6:	fa5f fb87 	uxtb.w	fp, r7
 8020bca:	434a      	muls	r2, r1
 8020bcc:	f102 0801 	add.w	r8, r2, #1
 8020bd0:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8020bd4:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8020bd8:	1212      	asrs	r2, r2, #8
 8020bda:	fa1f fa82 	uxth.w	sl, r2
 8020bde:	43d2      	mvns	r2, r2
 8020be0:	fb1b fb0a 	smulbb	fp, fp, sl
 8020be4:	b2d2      	uxtb	r2, r2
 8020be6:	fb08 b802 	mla	r8, r8, r2, fp
 8020bea:	fa1f f888 	uxth.w	r8, r8
 8020bee:	f108 0b01 	add.w	fp, r8, #1
 8020bf2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020bf6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020bfa:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020bfe:	fb1b fb0a 	smulbb	fp, fp, sl
 8020c02:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020c06:	fb17 fa0a 	smulbb	sl, r7, sl
 8020c0a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8020c0e:	f806 8c03 	strb.w	r8, [r6, #-3]
 8020c12:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8020c16:	fb07 aa02 	mla	sl, r7, r2, sl
 8020c1a:	fb08 b802 	mla	r8, r8, r2, fp
 8020c1e:	fa1f fa8a 	uxth.w	sl, sl
 8020c22:	fa1f f888 	uxth.w	r8, r8
 8020c26:	f10a 0701 	add.w	r7, sl, #1
 8020c2a:	f108 0b01 	add.w	fp, r8, #1
 8020c2e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020c32:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020c36:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020c3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020c3e:	f806 ac01 	strb.w	sl, [r6, #-1]
 8020c42:	f806 8c02 	strb.w	r8, [r6, #-2]
 8020c46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020c48:	4474      	add	r4, lr
 8020c4a:	3603      	adds	r6, #3
 8020c4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8020c50:	4410      	add	r0, r2
 8020c52:	e7a0      	b.n	8020b96 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020c54:	2700      	movs	r7, #0
 8020c56:	1bda      	subs	r2, r3, r7
 8020c58:	2a00      	cmp	r2, #0
 8020c5a:	dc3e      	bgt.n	8020cda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020c5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020c60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c64:	441d      	add	r5, r3
 8020c66:	9b01      	ldr	r3, [sp, #4]
 8020c68:	2b00      	cmp	r3, #0
 8020c6a:	f340 809e 	ble.w	8020daa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020c6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c74:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c78:	eeb0 6a62 	vmov.f32	s12, s5
 8020c7c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020c80:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c84:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c88:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020c8c:	eeb0 6a43 	vmov.f32	s12, s6
 8020c90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c94:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020c98:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020ca0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020ca4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020ca8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020cac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020cb0:	ee12 2a90 	vmov	r2, s5
 8020cb4:	eef0 2a47 	vmov.f32	s5, s14
 8020cb8:	fb92 fef3 	sdiv	lr, r2, r3
 8020cbc:	ee13 2a10 	vmov	r2, s6
 8020cc0:	eeb0 3a67 	vmov.f32	s6, s15
 8020cc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cc8:	9314      	str	r3, [sp, #80]	; 0x50
 8020cca:	9b01      	ldr	r3, [sp, #4]
 8020ccc:	9a04      	ldr	r2, [sp, #16]
 8020cce:	3b01      	subs	r3, #1
 8020cd0:	9301      	str	r3, [sp, #4]
 8020cd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020cd4:	bf08      	it	eq
 8020cd6:	4613      	moveq	r3, r2
 8020cd8:	e72b      	b.n	8020b32 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8020cda:	1426      	asrs	r6, r4, #16
 8020cdc:	d460      	bmi.n	8020da0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020cde:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020ce2:	42b2      	cmp	r2, r6
 8020ce4:	dd5c      	ble.n	8020da0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020ce6:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020cea:	d459      	bmi.n	8020da0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020cec:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020cf0:	4542      	cmp	r2, r8
 8020cf2:	dd55      	ble.n	8020da0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020cf4:	9a02      	ldr	r2, [sp, #8]
 8020cf6:	9903      	ldr	r1, [sp, #12]
 8020cf8:	fb08 6602 	mla	r6, r8, r2, r6
 8020cfc:	0872      	lsrs	r2, r6, #1
 8020cfe:	07f6      	lsls	r6, r6, #31
 8020d00:	5c8a      	ldrb	r2, [r1, r2]
 8020d02:	bf54      	ite	pl
 8020d04:	f002 020f 	andpl.w	r2, r2, #15
 8020d08:	1112      	asrmi	r2, r2, #4
 8020d0a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020d0e:	b2d2      	uxtb	r2, r2
 8020d10:	2a00      	cmp	r2, #0
 8020d12:	d045      	beq.n	8020da0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020d14:	4926      	ldr	r1, [pc, #152]	; (8020db0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8020d16:	f8d1 8000 	ldr.w	r8, [r1]
 8020d1a:	9905      	ldr	r1, [sp, #20]
 8020d1c:	fa5f fb88 	uxtb.w	fp, r8
 8020d20:	434a      	muls	r2, r1
 8020d22:	1c56      	adds	r6, r2, #1
 8020d24:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020d28:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8020d2c:	1212      	asrs	r2, r2, #8
 8020d2e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020d32:	fa1f fa82 	uxth.w	sl, r2
 8020d36:	43d2      	mvns	r2, r2
 8020d38:	fb1b fb0a 	smulbb	fp, fp, sl
 8020d3c:	b2d2      	uxtb	r2, r2
 8020d3e:	fb09 b902 	mla	r9, r9, r2, fp
 8020d42:	fa1f f989 	uxth.w	r9, r9
 8020d46:	f109 0b01 	add.w	fp, r9, #1
 8020d4a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020d4e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8020d52:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8020d56:	fb1b fb0a 	smulbb	fp, fp, sl
 8020d5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020d5e:	fb18 fa0a 	smulbb	sl, r8, sl
 8020d62:	f805 9006 	strb.w	r9, [r5, r6]
 8020d66:	442e      	add	r6, r5
 8020d68:	f896 8002 	ldrb.w	r8, [r6, #2]
 8020d6c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020d70:	fb08 aa02 	mla	sl, r8, r2, sl
 8020d74:	fb09 b902 	mla	r9, r9, r2, fp
 8020d78:	fa1f fa8a 	uxth.w	sl, sl
 8020d7c:	fa1f f989 	uxth.w	r9, r9
 8020d80:	f10a 0801 	add.w	r8, sl, #1
 8020d84:	f109 0b01 	add.w	fp, r9, #1
 8020d88:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8020d8c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020d90:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020d94:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020d98:	f886 a002 	strb.w	sl, [r6, #2]
 8020d9c:	f886 9001 	strb.w	r9, [r6, #1]
 8020da0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020da2:	4474      	add	r4, lr
 8020da4:	3701      	adds	r7, #1
 8020da6:	4410      	add	r0, r2
 8020da8:	e755      	b.n	8020c56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8020daa:	b007      	add	sp, #28
 8020dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020db0:	24026294 	.word	0x24026294

08020db4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020db8:	b085      	sub	sp, #20
 8020dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020dbe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020dc0:	9203      	str	r2, [sp, #12]
 8020dc2:	6860      	ldr	r0, [r4, #4]
 8020dc4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8020dc8:	9100      	str	r1, [sp, #0]
 8020dca:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8020dce:	fb00 2606 	mla	r6, r0, r6, r2
 8020dd2:	6822      	ldr	r2, [r4, #0]
 8020dd4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020dd8:	4416      	add	r6, r2
 8020dda:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020dde:	3201      	adds	r2, #1
 8020de0:	f022 0201 	bic.w	r2, r2, #1
 8020de4:	9201      	str	r2, [sp, #4]
 8020de6:	f8dc 2000 	ldr.w	r2, [ip]
 8020dea:	9202      	str	r2, [sp, #8]
 8020dec:	9a00      	ldr	r2, [sp, #0]
 8020dee:	2a00      	cmp	r2, #0
 8020df0:	dc03      	bgt.n	8020dfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020df2:	9a03      	ldr	r2, [sp, #12]
 8020df4:	2a00      	cmp	r2, #0
 8020df6:	f340 8140 	ble.w	802107a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8020dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020dfc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020e00:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8020e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020e06:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020e0a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	dd0e      	ble.n	8020e30 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020e12:	142a      	asrs	r2, r5, #16
 8020e14:	d405      	bmi.n	8020e22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020e16:	4572      	cmp	r2, lr
 8020e18:	da03      	bge.n	8020e22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020e1a:	1422      	asrs	r2, r4, #16
 8020e1c:	d401      	bmi.n	8020e22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020e1e:	42ba      	cmp	r2, r7
 8020e20:	db07      	blt.n	8020e32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020e22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e24:	3b01      	subs	r3, #1
 8020e26:	3603      	adds	r6, #3
 8020e28:	4415      	add	r5, r2
 8020e2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020e2c:	4414      	add	r4, r2
 8020e2e:	e7ee      	b.n	8020e0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020e30:	d072      	beq.n	8020f18 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e32:	1e5a      	subs	r2, r3, #1
 8020e34:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020e36:	fb00 5002 	mla	r0, r0, r2, r5
 8020e3a:	1400      	asrs	r0, r0, #16
 8020e3c:	d463      	bmi.n	8020f06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020e3e:	4570      	cmp	r0, lr
 8020e40:	da61      	bge.n	8020f06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020e42:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020e44:	fb00 4202 	mla	r2, r0, r2, r4
 8020e48:	1412      	asrs	r2, r2, #16
 8020e4a:	d45c      	bmi.n	8020f06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020e4c:	42ba      	cmp	r2, r7
 8020e4e:	da5a      	bge.n	8020f06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020e50:	1cf0      	adds	r0, r6, #3
 8020e52:	469a      	mov	sl, r3
 8020e54:	f1ba 0f00 	cmp.w	sl, #0
 8020e58:	dd59      	ble.n	8020f0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8020e5a:	142a      	asrs	r2, r5, #16
 8020e5c:	9901      	ldr	r1, [sp, #4]
 8020e5e:	1427      	asrs	r7, r4, #16
 8020e60:	fb01 2707 	mla	r7, r1, r7, r2
 8020e64:	9902      	ldr	r1, [sp, #8]
 8020e66:	087a      	lsrs	r2, r7, #1
 8020e68:	5c8a      	ldrb	r2, [r1, r2]
 8020e6a:	07f9      	lsls	r1, r7, #31
 8020e6c:	bf54      	ite	pl
 8020e6e:	f002 020f 	andpl.w	r2, r2, #15
 8020e72:	1112      	asrmi	r2, r2, #4
 8020e74:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020e78:	b2d2      	uxtb	r2, r2
 8020e7a:	2a00      	cmp	r2, #0
 8020e7c:	d03b      	beq.n	8020ef6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020e7e:	4980      	ldr	r1, [pc, #512]	; (8021080 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8020e80:	2aff      	cmp	r2, #255	; 0xff
 8020e82:	680f      	ldr	r7, [r1, #0]
 8020e84:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020e88:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020e8c:	b2ff      	uxtb	r7, r7
 8020e8e:	f000 80ed 	beq.w	802106c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8020e92:	fa1f f882 	uxth.w	r8, r2
 8020e96:	43d2      	mvns	r2, r2
 8020e98:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8020e9c:	fb17 f708 	smulbb	r7, r7, r8
 8020ea0:	b2d2      	uxtb	r2, r2
 8020ea2:	fb19 f908 	smulbb	r9, r9, r8
 8020ea6:	fb0e 7702 	mla	r7, lr, r2, r7
 8020eaa:	fb1b f808 	smulbb	r8, fp, r8
 8020eae:	b2bf      	uxth	r7, r7
 8020eb0:	f107 0e01 	add.w	lr, r7, #1
 8020eb4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020eb8:	123f      	asrs	r7, r7, #8
 8020eba:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020ebe:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8020ec2:	fb07 9902 	mla	r9, r7, r2, r9
 8020ec6:	fa1f f989 	uxth.w	r9, r9
 8020eca:	f109 0701 	add.w	r7, r9, #1
 8020ece:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020ed2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8020ed6:	fb07 8802 	mla	r8, r7, r2, r8
 8020eda:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020ede:	fa1f f888 	uxth.w	r8, r8
 8020ee2:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020ee6:	f108 0201 	add.w	r2, r8, #1
 8020eea:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020eee:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020ef2:	f800 8c01 	strb.w	r8, [r0, #-1]
 8020ef6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ef8:	3003      	adds	r0, #3
 8020efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020efe:	4415      	add	r5, r2
 8020f00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020f02:	4414      	add	r4, r2
 8020f04:	e7a6      	b.n	8020e54 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020f06:	2700      	movs	r7, #0
 8020f08:	1bda      	subs	r2, r3, r7
 8020f0a:	2a00      	cmp	r2, #0
 8020f0c:	dc40      	bgt.n	8020f90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8020f0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020f12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f16:	441e      	add	r6, r3
 8020f18:	9b00      	ldr	r3, [sp, #0]
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	f340 80ad 	ble.w	802107a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8020f20:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020f24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f2a:	eeb0 6a62 	vmov.f32	s12, s5
 8020f2e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020f32:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020f36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f3a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020f3e:	eeb0 6a43 	vmov.f32	s12, s6
 8020f42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f46:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020f4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f52:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f5a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f62:	ee12 2a90 	vmov	r2, s5
 8020f66:	eef0 2a47 	vmov.f32	s5, s14
 8020f6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f6e:	ee13 2a10 	vmov	r2, s6
 8020f72:	9311      	str	r3, [sp, #68]	; 0x44
 8020f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f76:	eeb0 3a67 	vmov.f32	s6, s15
 8020f7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f7e:	9312      	str	r3, [sp, #72]	; 0x48
 8020f80:	9b00      	ldr	r3, [sp, #0]
 8020f82:	9a03      	ldr	r2, [sp, #12]
 8020f84:	3b01      	subs	r3, #1
 8020f86:	9300      	str	r3, [sp, #0]
 8020f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f8a:	bf08      	it	eq
 8020f8c:	4613      	moveq	r3, r2
 8020f8e:	e72d      	b.n	8020dec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020f90:	1428      	asrs	r0, r5, #16
 8020f92:	d45c      	bmi.n	802104e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020f94:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020f98:	4282      	cmp	r2, r0
 8020f9a:	dd58      	ble.n	802104e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020f9c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020fa0:	d455      	bmi.n	802104e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020fa2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020fa6:	4572      	cmp	r2, lr
 8020fa8:	dd51      	ble.n	802104e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020faa:	9a01      	ldr	r2, [sp, #4]
 8020fac:	9902      	ldr	r1, [sp, #8]
 8020fae:	fb0e 0002 	mla	r0, lr, r2, r0
 8020fb2:	0842      	lsrs	r2, r0, #1
 8020fb4:	07c0      	lsls	r0, r0, #31
 8020fb6:	5c8a      	ldrb	r2, [r1, r2]
 8020fb8:	bf54      	ite	pl
 8020fba:	f002 020f 	andpl.w	r2, r2, #15
 8020fbe:	1112      	asrmi	r2, r2, #4
 8020fc0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020fc4:	b2d2      	uxtb	r2, r2
 8020fc6:	2a00      	cmp	r2, #0
 8020fc8:	d041      	beq.n	802104e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020fca:	492d      	ldr	r1, [pc, #180]	; (8021080 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8020fcc:	2aff      	cmp	r2, #255	; 0xff
 8020fce:	6808      	ldr	r0, [r1, #0]
 8020fd0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8020fd4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020fd8:	fa5f fe80 	uxtb.w	lr, r0
 8020fdc:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8020fe0:	d03b      	beq.n	802105a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020fe2:	fa1f f982 	uxth.w	r9, r2
 8020fe6:	4438      	add	r0, r7
 8020fe8:	43d2      	mvns	r2, r2
 8020fea:	f816 8000 	ldrb.w	r8, [r6, r0]
 8020fee:	fb1e fe09 	smulbb	lr, lr, r9
 8020ff2:	fb1a fa09 	smulbb	sl, sl, r9
 8020ff6:	b2d2      	uxtb	r2, r2
 8020ff8:	fb1b f909 	smulbb	r9, fp, r9
 8020ffc:	fb08 ee02 	mla	lr, r8, r2, lr
 8021000:	fa1f fe8e 	uxth.w	lr, lr
 8021004:	f10e 0801 	add.w	r8, lr, #1
 8021008:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 802100c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021010:	f806 e000 	strb.w	lr, [r6, r0]
 8021014:	4430      	add	r0, r6
 8021016:	f890 e001 	ldrb.w	lr, [r0, #1]
 802101a:	fb0e aa02 	mla	sl, lr, r2, sl
 802101e:	fa1f fa8a 	uxth.w	sl, sl
 8021022:	f10a 0e01 	add.w	lr, sl, #1
 8021026:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 802102a:	f890 e002 	ldrb.w	lr, [r0, #2]
 802102e:	fb0e 9902 	mla	r9, lr, r2, r9
 8021032:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021036:	fa1f f989 	uxth.w	r9, r9
 802103a:	f880 a001 	strb.w	sl, [r0, #1]
 802103e:	f109 0201 	add.w	r2, r9, #1
 8021042:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021046:	ea4f 2929 	mov.w	r9, r9, asr #8
 802104a:	f880 9002 	strb.w	r9, [r0, #2]
 802104e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021050:	3701      	adds	r7, #1
 8021052:	4415      	add	r5, r2
 8021054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021056:	4414      	add	r4, r2
 8021058:	e756      	b.n	8020f08 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802105a:	4438      	add	r0, r7
 802105c:	f806 e000 	strb.w	lr, [r6, r0]
 8021060:	4430      	add	r0, r6
 8021062:	f880 a001 	strb.w	sl, [r0, #1]
 8021066:	f880 b002 	strb.w	fp, [r0, #2]
 802106a:	e7f0      	b.n	802104e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802106c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8021070:	f800 9c02 	strb.w	r9, [r0, #-2]
 8021074:	f800 bc01 	strb.w	fp, [r0, #-1]
 8021078:	e73d      	b.n	8020ef6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802107a:	b005      	add	sp, #20
 802107c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021080:	24026294 	.word	0x24026294

08021084 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8021084:	4770      	bx	lr

08021086 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8021086:	4770      	bx	lr

08021088 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8021088:	4770      	bx	lr

0802108a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802108a:	4770      	bx	lr

0802108c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802108c:	4770      	bx	lr

0802108e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802108e:	4770      	bx	lr

08021090 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021090:	4770      	bx	lr

08021092 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021092:	4770      	bx	lr

08021094 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021094:	4770      	bx	lr

08021096 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8021096:	4770      	bx	lr

08021098 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021098:	4770      	bx	lr

0802109a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802109a:	4770      	bx	lr

0802109c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802109c:	4770      	bx	lr

0802109e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802109e:	4770      	bx	lr

080210a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80210a0:	4770      	bx	lr

080210a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80210a2:	4770      	bx	lr

080210a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80210a4:	4770      	bx	lr

080210a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80210a6:	4770      	bx	lr

080210a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80210a8:	4770      	bx	lr

080210aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80210aa:	4770      	bx	lr

080210ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80210ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210ae:	4606      	mov	r6, r0
 80210b0:	b087      	sub	sp, #28
 80210b2:	4615      	mov	r5, r2
 80210b4:	461f      	mov	r7, r3
 80210b6:	b353      	cbz	r3, 802110e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80210b8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80210bc:	2b00      	cmp	r3, #0
 80210be:	dd26      	ble.n	802110e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80210c0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80210c4:	2b00      	cmp	r3, #0
 80210c6:	dd22      	ble.n	802110e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80210c8:	6808      	ldr	r0, [r1, #0]
 80210ca:	aa04      	add	r2, sp, #16
 80210cc:	6849      	ldr	r1, [r1, #4]
 80210ce:	4c1b      	ldr	r4, [pc, #108]	; (802113c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80210d0:	c203      	stmia	r2!, {r0, r1}
 80210d2:	a804      	add	r0, sp, #16
 80210d4:	f7fb fae4 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210d8:	6820      	ldr	r0, [r4, #0]
 80210da:	6803      	ldr	r3, [r0, #0]
 80210dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210de:	4798      	blx	r3
 80210e0:	2fff      	cmp	r7, #255	; 0xff
 80210e2:	d016      	beq.n	8021112 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80210e4:	f010 0f08 	tst.w	r0, #8
 80210e8:	6820      	ldr	r0, [r4, #0]
 80210ea:	d015      	beq.n	8021118 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80210ec:	2400      	movs	r4, #0
 80210ee:	6801      	ldr	r1, [r0, #0]
 80210f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80210f4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80210f8:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80210fc:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021100:	9401      	str	r4, [sp, #4]
 8021102:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021106:	9400      	str	r4, [sp, #0]
 8021108:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 802110a:	4629      	mov	r1, r5
 802110c:	47a0      	blx	r4
 802110e:	b007      	add	sp, #28
 8021110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021112:	f010 0f02 	tst.w	r0, #2
 8021116:	e7e7      	b.n	80210e8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8021118:	6803      	ldr	r3, [r0, #0]
 802111a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802111c:	4798      	blx	r3
 802111e:	4b08      	ldr	r3, [pc, #32]	; (8021140 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8021120:	4601      	mov	r1, r0
 8021122:	4630      	mov	r0, r6
 8021124:	881a      	ldrh	r2, [r3, #0]
 8021126:	6833      	ldr	r3, [r6, #0]
 8021128:	e9cd 5700 	strd	r5, r7, [sp]
 802112c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 802112e:	ab04      	add	r3, sp, #16
 8021130:	47a8      	blx	r5
 8021132:	6820      	ldr	r0, [r4, #0]
 8021134:	6803      	ldr	r3, [r0, #0]
 8021136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021138:	4798      	blx	r3
 802113a:	e7e8      	b.n	802110e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802113c:	2402628c 	.word	0x2402628c
 8021140:	24026286 	.word	0x24026286

08021144 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8021144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021148:	b08b      	sub	sp, #44	; 0x2c
 802114a:	460d      	mov	r5, r1
 802114c:	4616      	mov	r6, r2
 802114e:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8021152:	f1b8 0f00 	cmp.w	r8, #0
 8021156:	d047      	beq.n	80211e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8021158:	6810      	ldr	r0, [r2, #0]
 802115a:	ac06      	add	r4, sp, #24
 802115c:	6851      	ldr	r1, [r2, #4]
 802115e:	4f51      	ldr	r7, [pc, #324]	; (80212a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8021160:	c403      	stmia	r4!, {r0, r1}
 8021162:	6818      	ldr	r0, [r3, #0]
 8021164:	ac08      	add	r4, sp, #32
 8021166:	6859      	ldr	r1, [r3, #4]
 8021168:	c403      	stmia	r4!, {r0, r1}
 802116a:	a806      	add	r0, sp, #24
 802116c:	f7fb fa98 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021170:	4631      	mov	r1, r6
 8021172:	a808      	add	r0, sp, #32
 8021174:	f7fb fad8 	bl	801c728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021178:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802117c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021180:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021184:	6838      	ldr	r0, [r7, #0]
 8021186:	fb11 2103 	smlabb	r1, r1, r3, r2
 802118a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 802118e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8021192:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021196:	440d      	add	r5, r1
 8021198:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802119c:	440a      	add	r2, r1
 802119e:	f8ad 2020 	strh.w	r2, [sp, #32]
 80211a2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80211a6:	4413      	add	r3, r2
 80211a8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80211ac:	6803      	ldr	r3, [r0, #0]
 80211ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211b0:	4798      	blx	r3
 80211b2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80211b6:	d01a      	beq.n	80211ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80211b8:	f010 0f04 	tst.w	r0, #4
 80211bc:	6838      	ldr	r0, [r7, #0]
 80211be:	d019      	beq.n	80211f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80211c0:	2100      	movs	r1, #0
 80211c2:	6807      	ldr	r7, [r0, #0]
 80211c4:	b2a4      	uxth	r4, r4
 80211c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80211ca:	b2b6      	uxth	r6, r6
 80211cc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80211d0:	9401      	str	r4, [sp, #4]
 80211d2:	9600      	str	r6, [sp, #0]
 80211d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80211d8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80211dc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80211e0:	9102      	str	r1, [sp, #8]
 80211e2:	4629      	mov	r1, r5
 80211e4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80211e6:	47a0      	blx	r4
 80211e8:	b00b      	add	sp, #44	; 0x2c
 80211ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80211ee:	f010 0f01 	tst.w	r0, #1
 80211f2:	e7e3      	b.n	80211bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80211f4:	6803      	ldr	r3, [r0, #0]
 80211f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80211f8:	4798      	blx	r3
 80211fa:	4a2b      	ldr	r2, [pc, #172]	; (80212a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80211fc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8021200:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021204:	8813      	ldrh	r3, [r2, #0]
 8021206:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 802120a:	fb03 f404 	mul.w	r4, r3, r4
 802120e:	fb03 c101 	mla	r1, r3, r1, ip
 8021212:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021216:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802121a:	4408      	add	r0, r1
 802121c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8021220:	4404      	add	r4, r0
 8021222:	d02e      	beq.n	8021282 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8021224:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8021228:	1b9b      	subs	r3, r3, r6
 802122a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 802122e:	1b96      	subs	r6, r2, r6
 8021230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021234:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021238:	42a0      	cmp	r0, r4
 802123a:	d22d      	bcs.n	8021298 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 802123c:	eb00 0e01 	add.w	lr, r0, r1
 8021240:	4570      	cmp	r0, lr
 8021242:	d210      	bcs.n	8021266 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8021244:	f890 9000 	ldrb.w	r9, [r0]
 8021248:	f815 2b01 	ldrb.w	r2, [r5], #1
 802124c:	fb19 f90c 	smulbb	r9, r9, ip
 8021250:	fb02 9208 	mla	r2, r2, r8, r9
 8021254:	b292      	uxth	r2, r2
 8021256:	f102 0901 	add.w	r9, r2, #1
 802125a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 802125e:	1212      	asrs	r2, r2, #8
 8021260:	f800 2b01 	strb.w	r2, [r0], #1
 8021264:	e7ec      	b.n	8021240 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8021266:	4418      	add	r0, r3
 8021268:	4435      	add	r5, r6
 802126a:	e7e5      	b.n	8021238 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 802126c:	8813      	ldrh	r3, [r2, #0]
 802126e:	1b9b      	subs	r3, r3, r6
 8021270:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021274:	4418      	add	r0, r3
 8021276:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802127a:	1b9b      	subs	r3, r3, r6
 802127c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021280:	441d      	add	r5, r3
 8021282:	42a0      	cmp	r0, r4
 8021284:	d208      	bcs.n	8021298 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8021286:	eb00 0c01 	add.w	ip, r0, r1
 802128a:	4560      	cmp	r0, ip
 802128c:	d2ee      	bcs.n	802126c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 802128e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021292:	f800 3b01 	strb.w	r3, [r0], #1
 8021296:	e7f8      	b.n	802128a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8021298:	6838      	ldr	r0, [r7, #0]
 802129a:	6803      	ldr	r3, [r0, #0]
 802129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802129e:	4798      	blx	r3
 80212a0:	e7a2      	b.n	80211e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80212a2:	bf00      	nop
 80212a4:	2402628c 	.word	0x2402628c
 80212a8:	24026286 	.word	0x24026286

080212ac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80212ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80212ae:	2300      	movs	r3, #0
 80212b0:	b085      	sub	sp, #20
 80212b2:	9300      	str	r3, [sp, #0]
 80212b4:	4b41      	ldr	r3, [pc, #260]	; (80213bc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80212b6:	781b      	ldrb	r3, [r3, #0]
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	d136      	bne.n	802132a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80212bc:	4a40      	ldr	r2, [pc, #256]	; (80213c0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80212be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80212c2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	d131      	bne.n	802132e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80212ca:	4b3e      	ldr	r3, [pc, #248]	; (80213c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80212cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80212d0:	ac02      	add	r4, sp, #8
 80212d2:	6808      	ldr	r0, [r1, #0]
 80212d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80212d8:	ab02      	add	r3, sp, #8
 80212da:	6849      	ldr	r1, [r1, #4]
 80212dc:	4d3a      	ldr	r5, [pc, #232]	; (80213c8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80212de:	c303      	stmia	r3!, {r0, r1}
 80212e0:	4669      	mov	r1, sp
 80212e2:	4620      	mov	r0, r4
 80212e4:	f7fb fa20 	bl	801c728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80212e8:	4668      	mov	r0, sp
 80212ea:	f7fb f9d9 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80212ee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80212f2:	f8bd 2000 	ldrh.w	r2, [sp]
 80212f6:	462e      	mov	r6, r5
 80212f8:	6828      	ldr	r0, [r5, #0]
 80212fa:	4413      	add	r3, r2
 80212fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021300:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021304:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8021308:	4413      	add	r3, r2
 802130a:	f8ad 300a 	strh.w	r3, [sp, #10]
 802130e:	6803      	ldr	r3, [r0, #0]
 8021310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021312:	4798      	blx	r3
 8021314:	f010 0f01 	tst.w	r0, #1
 8021318:	d00b      	beq.n	8021332 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 802131a:	6828      	ldr	r0, [r5, #0]
 802131c:	6803      	ldr	r3, [r0, #0]
 802131e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8021322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021324:	4798      	blx	r3
 8021326:	b005      	add	sp, #20
 8021328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802132a:	4a26      	ldr	r2, [pc, #152]	; (80213c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 802132c:	e7c7      	b.n	80212be <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 802132e:	4b24      	ldr	r3, [pc, #144]	; (80213c0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8021330:	e7cc      	b.n	80212cc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8021332:	6830      	ldr	r0, [r6, #0]
 8021334:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8021338:	6803      	ldr	r3, [r0, #0]
 802133a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 802133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021340:	4798      	blx	r3
 8021342:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8021346:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802134a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 802134e:	fb14 3402 	smlabb	r4, r4, r2, r3
 8021352:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021356:	4404      	add	r4, r0
 8021358:	6830      	ldr	r0, [r6, #0]
 802135a:	6803      	ldr	r3, [r0, #0]
 802135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802135e:	4798      	blx	r3
 8021360:	4917      	ldr	r1, [pc, #92]	; (80213c0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8021362:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021366:	880b      	ldrh	r3, [r1, #0]
 8021368:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 802136c:	fb03 c202 	mla	r2, r3, r2, ip
 8021370:	437b      	muls	r3, r7
 8021372:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8021376:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802137a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802137e:	4410      	add	r0, r2
 8021380:	18c2      	adds	r2, r0, r3
 8021382:	4290      	cmp	r0, r2
 8021384:	d214      	bcs.n	80213b0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8021386:	eb00 0c07 	add.w	ip, r0, r7
 802138a:	4560      	cmp	r0, ip
 802138c:	d204      	bcs.n	8021398 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 802138e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021392:	f800 3b01 	strb.w	r3, [r0], #1
 8021396:	e7f8      	b.n	802138a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8021398:	880b      	ldrh	r3, [r1, #0]
 802139a:	1b5b      	subs	r3, r3, r5
 802139c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80213a0:	4418      	add	r0, r3
 80213a2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80213a6:	1b5b      	subs	r3, r3, r5
 80213a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80213ac:	441c      	add	r4, r3
 80213ae:	e7e8      	b.n	8021382 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80213b0:	6830      	ldr	r0, [r6, #0]
 80213b2:	6803      	ldr	r3, [r0, #0]
 80213b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80213b6:	4798      	blx	r3
 80213b8:	e7b5      	b.n	8021326 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80213ba:	bf00      	nop
 80213bc:	24026284 	.word	0x24026284
 80213c0:	24026286 	.word	0x24026286
 80213c4:	24026288 	.word	0x24026288
 80213c8:	2402628c 	.word	0x2402628c

080213cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80213cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213d0:	b089      	sub	sp, #36	; 0x24
 80213d2:	4607      	mov	r7, r0
 80213d4:	4689      	mov	r9, r1
 80213d6:	4692      	mov	sl, r2
 80213d8:	ac08      	add	r4, sp, #32
 80213da:	461e      	mov	r6, r3
 80213dc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80213e0:	4620      	mov	r0, r4
 80213e2:	f7fe f8f1 	bl	801f5c8 <_ZNK8touchgfx6Bitmap7getDataEv>
 80213e6:	683b      	ldr	r3, [r7, #0]
 80213e8:	4605      	mov	r5, r0
 80213ea:	4620      	mov	r0, r4
 80213ec:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80213f0:	f7fd fffe 	bl	801f3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80213f4:	4683      	mov	fp, r0
 80213f6:	4620      	mov	r0, r4
 80213f8:	f7fe f82e 	bl	801f458 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80213fc:	4653      	mov	r3, sl
 80213fe:	464a      	mov	r2, r9
 8021400:	4639      	mov	r1, r7
 8021402:	9500      	str	r5, [sp, #0]
 8021404:	e9cd b001 	strd	fp, r0, [sp, #4]
 8021408:	a806      	add	r0, sp, #24
 802140a:	47c0      	blx	r8
 802140c:	a906      	add	r1, sp, #24
 802140e:	4630      	mov	r0, r6
 8021410:	f7fd fed2 	bl	801f1b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8021414:	4628      	mov	r0, r5
 8021416:	b009      	add	sp, #36	; 0x24
 8021418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802141c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802141c:	b510      	push	{r4, lr}
 802141e:	4604      	mov	r4, r0
 8021420:	2104      	movs	r1, #4
 8021422:	f006 f8ee 	bl	8027602 <_ZdlPvj>
 8021426:	4620      	mov	r0, r4
 8021428:	bd10      	pop	{r4, pc}

0802142a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802142a:	b510      	push	{r4, lr}
 802142c:	4604      	mov	r4, r0
 802142e:	2104      	movs	r1, #4
 8021430:	f006 f8e7 	bl	8027602 <_ZdlPvj>
 8021434:	4620      	mov	r0, r4
 8021436:	bd10      	pop	{r4, pc}

08021438 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021438:	b510      	push	{r4, lr}
 802143a:	4604      	mov	r4, r0
 802143c:	2104      	movs	r1, #4
 802143e:	f006 f8e0 	bl	8027602 <_ZdlPvj>
 8021442:	4620      	mov	r0, r4
 8021444:	bd10      	pop	{r4, pc}

08021446 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021446:	b510      	push	{r4, lr}
 8021448:	4604      	mov	r4, r0
 802144a:	2104      	movs	r1, #4
 802144c:	f006 f8d9 	bl	8027602 <_ZdlPvj>
 8021450:	4620      	mov	r0, r4
 8021452:	bd10      	pop	{r4, pc}

08021454 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021454:	b510      	push	{r4, lr}
 8021456:	4604      	mov	r4, r0
 8021458:	2104      	movs	r1, #4
 802145a:	f006 f8d2 	bl	8027602 <_ZdlPvj>
 802145e:	4620      	mov	r0, r4
 8021460:	bd10      	pop	{r4, pc}

08021462 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021462:	b510      	push	{r4, lr}
 8021464:	4604      	mov	r4, r0
 8021466:	2104      	movs	r1, #4
 8021468:	f006 f8cb 	bl	8027602 <_ZdlPvj>
 802146c:	4620      	mov	r0, r4
 802146e:	bd10      	pop	{r4, pc}

08021470 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021470:	b510      	push	{r4, lr}
 8021472:	4604      	mov	r4, r0
 8021474:	2104      	movs	r1, #4
 8021476:	f006 f8c4 	bl	8027602 <_ZdlPvj>
 802147a:	4620      	mov	r0, r4
 802147c:	bd10      	pop	{r4, pc}

0802147e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802147e:	b510      	push	{r4, lr}
 8021480:	4604      	mov	r4, r0
 8021482:	2104      	movs	r1, #4
 8021484:	f006 f8bd 	bl	8027602 <_ZdlPvj>
 8021488:	4620      	mov	r0, r4
 802148a:	bd10      	pop	{r4, pc}

0802148c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802148c:	b510      	push	{r4, lr}
 802148e:	4604      	mov	r4, r0
 8021490:	2104      	movs	r1, #4
 8021492:	f006 f8b6 	bl	8027602 <_ZdlPvj>
 8021496:	4620      	mov	r0, r4
 8021498:	bd10      	pop	{r4, pc}

0802149a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802149a:	b510      	push	{r4, lr}
 802149c:	4604      	mov	r4, r0
 802149e:	2104      	movs	r1, #4
 80214a0:	f006 f8af 	bl	8027602 <_ZdlPvj>
 80214a4:	4620      	mov	r0, r4
 80214a6:	bd10      	pop	{r4, pc}

080214a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80214a8:	b510      	push	{r4, lr}
 80214aa:	4604      	mov	r4, r0
 80214ac:	2104      	movs	r1, #4
 80214ae:	f006 f8a8 	bl	8027602 <_ZdlPvj>
 80214b2:	4620      	mov	r0, r4
 80214b4:	bd10      	pop	{r4, pc}

080214b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80214b6:	b510      	push	{r4, lr}
 80214b8:	4604      	mov	r4, r0
 80214ba:	2104      	movs	r1, #4
 80214bc:	f006 f8a1 	bl	8027602 <_ZdlPvj>
 80214c0:	4620      	mov	r0, r4
 80214c2:	bd10      	pop	{r4, pc}

080214c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80214c4:	b510      	push	{r4, lr}
 80214c6:	4604      	mov	r4, r0
 80214c8:	2104      	movs	r1, #4
 80214ca:	f006 f89a 	bl	8027602 <_ZdlPvj>
 80214ce:	4620      	mov	r0, r4
 80214d0:	bd10      	pop	{r4, pc}

080214d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80214d2:	b510      	push	{r4, lr}
 80214d4:	4604      	mov	r4, r0
 80214d6:	2104      	movs	r1, #4
 80214d8:	f006 f893 	bl	8027602 <_ZdlPvj>
 80214dc:	4620      	mov	r0, r4
 80214de:	bd10      	pop	{r4, pc}

080214e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80214e0:	b510      	push	{r4, lr}
 80214e2:	4604      	mov	r4, r0
 80214e4:	2104      	movs	r1, #4
 80214e6:	f006 f88c 	bl	8027602 <_ZdlPvj>
 80214ea:	4620      	mov	r0, r4
 80214ec:	bd10      	pop	{r4, pc}

080214ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80214ee:	b510      	push	{r4, lr}
 80214f0:	4604      	mov	r4, r0
 80214f2:	2104      	movs	r1, #4
 80214f4:	f006 f885 	bl	8027602 <_ZdlPvj>
 80214f8:	4620      	mov	r0, r4
 80214fa:	bd10      	pop	{r4, pc}

080214fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80214fc:	b510      	push	{r4, lr}
 80214fe:	4604      	mov	r4, r0
 8021500:	2104      	movs	r1, #4
 8021502:	f006 f87e 	bl	8027602 <_ZdlPvj>
 8021506:	4620      	mov	r0, r4
 8021508:	bd10      	pop	{r4, pc}

0802150a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802150a:	b510      	push	{r4, lr}
 802150c:	4604      	mov	r4, r0
 802150e:	2104      	movs	r1, #4
 8021510:	f006 f877 	bl	8027602 <_ZdlPvj>
 8021514:	4620      	mov	r0, r4
 8021516:	bd10      	pop	{r4, pc}

08021518 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021518:	b510      	push	{r4, lr}
 802151a:	4604      	mov	r4, r0
 802151c:	2104      	movs	r1, #4
 802151e:	f006 f870 	bl	8027602 <_ZdlPvj>
 8021522:	4620      	mov	r0, r4
 8021524:	bd10      	pop	{r4, pc}

08021526 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021526:	b510      	push	{r4, lr}
 8021528:	4604      	mov	r4, r0
 802152a:	2104      	movs	r1, #4
 802152c:	f006 f869 	bl	8027602 <_ZdlPvj>
 8021530:	4620      	mov	r0, r4
 8021532:	bd10      	pop	{r4, pc}

08021534 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021538:	f89d 001c 	ldrb.w	r0, [sp, #28]
 802153c:	9c06      	ldr	r4, [sp, #24]
 802153e:	2800      	cmp	r0, #0
 8021540:	d06e      	beq.n	8021620 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021542:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8021546:	2d00      	cmp	r5, #0
 8021548:	dd6a      	ble.n	8021620 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802154a:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 802154e:	f1bc 0f00 	cmp.w	ip, #0
 8021552:	dd65      	ble.n	8021620 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021554:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8021558:	28ff      	cmp	r0, #255	; 0xff
 802155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802155e:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8021562:	fb02 3306 	mla	r3, r2, r6, r3
 8021566:	f3c4 4607 	ubfx	r6, r4, #16, #8
 802156a:	b2e4      	uxtb	r4, r4
 802156c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021570:	4419      	add	r1, r3
 8021572:	fb02 f30c 	mul.w	r3, r2, ip
 8021576:	eba2 0205 	sub.w	r2, r2, r5
 802157a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802157e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021582:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021586:	440b      	add	r3, r1
 8021588:	d03e      	beq.n	8021608 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 802158a:	fa1f fc80 	uxth.w	ip, r0
 802158e:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8021592:	fb06 f60c 	mul.w	r6, r6, ip
 8021596:	b280      	uxth	r0, r0
 8021598:	fb07 f70c 	mul.w	r7, r7, ip
 802159c:	fb04 f40c 	mul.w	r4, r4, ip
 80215a0:	4299      	cmp	r1, r3
 80215a2:	d23d      	bcs.n	8021620 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80215a4:	eb01 0c05 	add.w	ip, r1, r5
 80215a8:	458c      	cmp	ip, r1
 80215aa:	f101 0e03 	add.w	lr, r1, #3
 80215ae:	d928      	bls.n	8021602 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80215b0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80215b4:	fb11 f100 	smulbb	r1, r1, r0
 80215b8:	4421      	add	r1, r4
 80215ba:	b289      	uxth	r1, r1
 80215bc:	f101 0801 	add.w	r8, r1, #1
 80215c0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80215c4:	1209      	asrs	r1, r1, #8
 80215c6:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80215ca:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80215ce:	fb11 f100 	smulbb	r1, r1, r0
 80215d2:	4439      	add	r1, r7
 80215d4:	b289      	uxth	r1, r1
 80215d6:	f101 0801 	add.w	r8, r1, #1
 80215da:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80215de:	1209      	asrs	r1, r1, #8
 80215e0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80215e4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80215e8:	fb11 f100 	smulbb	r1, r1, r0
 80215ec:	4431      	add	r1, r6
 80215ee:	b289      	uxth	r1, r1
 80215f0:	f101 0801 	add.w	r8, r1, #1
 80215f4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80215f8:	1209      	asrs	r1, r1, #8
 80215fa:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80215fe:	4671      	mov	r1, lr
 8021600:	e7d2      	b.n	80215a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8021602:	4411      	add	r1, r2
 8021604:	e7cc      	b.n	80215a0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8021606:	4411      	add	r1, r2
 8021608:	4299      	cmp	r1, r3
 802160a:	d209      	bcs.n	8021620 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802160c:	1948      	adds	r0, r1, r5
 802160e:	4281      	cmp	r1, r0
 8021610:	d2f9      	bcs.n	8021606 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8021612:	700c      	strb	r4, [r1, #0]
 8021614:	3103      	adds	r1, #3
 8021616:	f801 7c02 	strb.w	r7, [r1, #-2]
 802161a:	f801 6c01 	strb.w	r6, [r1, #-1]
 802161e:	e7f6      	b.n	802160e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8021620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021624 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021628:	b093      	sub	sp, #76	; 0x4c
 802162a:	4699      	mov	r9, r3
 802162c:	4617      	mov	r7, r2
 802162e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021632:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8021636:	4604      	mov	r4, r0
 8021638:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802163c:	a80c      	add	r0, sp, #48	; 0x30
 802163e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8021642:	460d      	mov	r5, r1
 8021644:	4649      	mov	r1, r9
 8021646:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802164a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802164e:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8021652:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8021656:	f7f8 fc0f 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 802165a:	4639      	mov	r1, r7
 802165c:	a80c      	add	r0, sp, #48	; 0x30
 802165e:	f7f8 fc0b 	bl	8019e78 <_ZN8touchgfx4RectaNERKS0_>
 8021662:	4b78      	ldr	r3, [pc, #480]	; (8021844 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021664:	8818      	ldrh	r0, [r3, #0]
 8021666:	4b78      	ldr	r3, [pc, #480]	; (8021848 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8021668:	b202      	sxth	r2, r0
 802166a:	8819      	ldrh	r1, [r3, #0]
 802166c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8021670:	b20f      	sxth	r7, r1
 8021672:	2b00      	cmp	r3, #0
 8021674:	da07      	bge.n	8021686 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8021676:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 802167a:	4463      	add	r3, ip
 802167c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8021680:	2300      	movs	r3, #0
 8021682:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8021686:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802168a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 802168e:	1ad2      	subs	r2, r2, r3
 8021690:	4594      	cmp	ip, r2
 8021692:	bfc4      	itt	gt
 8021694:	1ac2      	subgt	r2, r0, r3
 8021696:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 802169a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802169e:	2a00      	cmp	r2, #0
 80216a0:	da07      	bge.n	80216b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 80216a2:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 80216a6:	4462      	add	r2, ip
 80216a8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80216ac:	2200      	movs	r2, #0
 80216ae:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80216b2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80216b6:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 80216ba:	1abf      	subs	r7, r7, r2
 80216bc:	45bc      	cmp	ip, r7
 80216be:	f8df c190 	ldr.w	ip, [pc, #400]	; 8021850 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80216c2:	bfc8      	it	gt
 80216c4:	1a8f      	subgt	r7, r1, r2
 80216c6:	f89c c000 	ldrb.w	ip, [ip]
 80216ca:	bfc8      	it	gt
 80216cc:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 80216d0:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80216d4:	f1bc 0f00 	cmp.w	ip, #0
 80216d8:	d176      	bne.n	80217c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80216da:	4287      	cmp	r7, r0
 80216dc:	bf14      	ite	ne
 80216de:	2100      	movne	r1, #0
 80216e0:	2101      	moveq	r1, #1
 80216e2:	2f00      	cmp	r7, #0
 80216e4:	9107      	str	r1, [sp, #28]
 80216e6:	dd73      	ble.n	80217d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80216e8:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80216ec:	2900      	cmp	r1, #0
 80216ee:	9104      	str	r1, [sp, #16]
 80216f0:	dd6e      	ble.n	80217d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80216f2:	f8b9 1000 	ldrh.w	r1, [r9]
 80216f6:	a80e      	add	r0, sp, #56	; 0x38
 80216f8:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 80216fc:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8021700:	1a5b      	subs	r3, r3, r1
 8021702:	a910      	add	r1, sp, #64	; 0x40
 8021704:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8021708:	b21b      	sxth	r3, r3
 802170a:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 802170e:	f8df a144 	ldr.w	sl, [pc, #324]	; 8021854 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8021712:	9305      	str	r3, [sp, #20]
 8021714:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8021718:	1ad2      	subs	r2, r2, r3
 802171a:	b213      	sxth	r3, r2
 802171c:	9306      	str	r3, [sp, #24]
 802171e:	9b05      	ldr	r3, [sp, #20]
 8021720:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8021724:	9b06      	ldr	r3, [sp, #24]
 8021726:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 802172a:	9b04      	ldr	r3, [sp, #16]
 802172c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8021730:	2300      	movs	r3, #0
 8021732:	9310      	str	r3, [sp, #64]	; 0x40
 8021734:	f7fa fff8 	bl	801c728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021738:	4640      	mov	r0, r8
 802173a:	f7fa ffb1 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802173e:	a810      	add	r0, sp, #64	; 0x40
 8021740:	f7fa ffae 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021744:	4b41      	ldr	r3, [pc, #260]	; (802184c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8021746:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 802174a:	4628      	mov	r0, r5
 802174c:	881b      	ldrh	r3, [r3, #0]
 802174e:	9308      	str	r3, [sp, #32]
 8021750:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8021754:	b21b      	sxth	r3, r3
 8021756:	9303      	str	r3, [sp, #12]
 8021758:	682b      	ldr	r3, [r5, #0]
 802175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802175c:	4798      	blx	r3
 802175e:	9a03      	ldr	r2, [sp, #12]
 8021760:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8021764:	4681      	mov	r9, r0
 8021766:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 802176a:	fb13 f302 	smulbb	r3, r3, r2
 802176e:	2203      	movs	r2, #3
 8021770:	f8da 0000 	ldr.w	r0, [sl]
 8021774:	fb15 3302 	smlabb	r3, r5, r2, r3
 8021778:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 802177a:	920b      	str	r2, [sp, #44]	; 0x2c
 802177c:	441d      	add	r5, r3
 802177e:	6803      	ldr	r3, [r0, #0]
 8021780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021782:	4798      	blx	r3
 8021784:	9009      	str	r0, [sp, #36]	; 0x24
 8021786:	f8da 0000 	ldr.w	r0, [sl]
 802178a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 802178e:	6803      	ldr	r3, [r0, #0]
 8021790:	910a      	str	r1, [sp, #40]	; 0x28
 8021792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021794:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8021798:	4798      	blx	r3
 802179a:	f010 0f01 	tst.w	r0, #1
 802179e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80217a2:	d01e      	beq.n	80217e2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 80217a4:	f8da 0000 	ldr.w	r0, [sl]
 80217a8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80217ac:	6803      	ldr	r3, [r0, #0]
 80217ae:	9200      	str	r2, [sp, #0]
 80217b0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80217b2:	462b      	mov	r3, r5
 80217b4:	e898 0006 	ldmia.w	r8, {r1, r2}
 80217b8:	47b0      	blx	r6
 80217ba:	9b05      	ldr	r3, [sp, #20]
 80217bc:	80a7      	strh	r7, [r4, #4]
 80217be:	8023      	strh	r3, [r4, #0]
 80217c0:	9b06      	ldr	r3, [sp, #24]
 80217c2:	8063      	strh	r3, [r4, #2]
 80217c4:	9b04      	ldr	r3, [sp, #16]
 80217c6:	e007      	b.n	80217d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 80217c8:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 80217cc:	4288      	cmp	r0, r1
 80217ce:	e785      	b.n	80216dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 80217d0:	2300      	movs	r3, #0
 80217d2:	8023      	strh	r3, [r4, #0]
 80217d4:	8063      	strh	r3, [r4, #2]
 80217d6:	80a3      	strh	r3, [r4, #4]
 80217d8:	4620      	mov	r0, r4
 80217da:	80e3      	strh	r3, [r4, #6]
 80217dc:	b013      	add	sp, #76	; 0x4c
 80217de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217e2:	fb09 f606 	mul.w	r6, r9, r6
 80217e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217e8:	fb11 6602 	smlabb	r6, r1, r2, r6
 80217ec:	9a07      	ldr	r2, [sp, #28]
 80217ee:	4433      	add	r3, r6
 80217f0:	461e      	mov	r6, r3
 80217f2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80217f6:	b16a      	cbz	r2, 8021814 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80217f8:	9a08      	ldr	r2, [sp, #32]
 80217fa:	4593      	cmp	fp, r2
 80217fc:	d10a      	bne.n	8021814 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80217fe:	f8da 0000 	ldr.w	r0, [sl]
 8021802:	fb09 f303 	mul.w	r3, r9, r3
 8021806:	4629      	mov	r1, r5
 8021808:	6802      	ldr	r2, [r0, #0]
 802180a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 802180e:	4632      	mov	r2, r6
 8021810:	47d0      	blx	sl
 8021812:	e7d2      	b.n	80217ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8021814:	9a03      	ldr	r2, [sp, #12]
 8021816:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8021854 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 802181a:	fb02 5803 	mla	r8, r2, r3, r5
 802181e:	4545      	cmp	r5, r8
 8021820:	d2cb      	bcs.n	80217ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8021822:	f8db 0000 	ldr.w	r0, [fp]
 8021826:	4629      	mov	r1, r5
 8021828:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 802182c:	6802      	ldr	r2, [r0, #0]
 802182e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021832:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8021836:	4632      	mov	r2, r6
 8021838:	47d0      	blx	sl
 802183a:	9b03      	ldr	r3, [sp, #12]
 802183c:	444e      	add	r6, r9
 802183e:	441d      	add	r5, r3
 8021840:	e7ed      	b.n	802181e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8021842:	bf00      	nop
 8021844:	24026280 	.word	0x24026280
 8021848:	24026282 	.word	0x24026282
 802184c:	24026286 	.word	0x24026286
 8021850:	24026284 	.word	0x24026284
 8021854:	2402628c 	.word	0x2402628c

08021858 <_ZN8touchgfx8LCD24bppC1Ev>:
 8021858:	2200      	movs	r2, #0
 802185a:	490c      	ldr	r1, [pc, #48]	; (802188c <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 802185c:	6042      	str	r2, [r0, #4]
 802185e:	6001      	str	r1, [r0, #0]
 8021860:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021864:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021868:	e9c0 2206 	strd	r2, r2, [r0, #24]
 802186c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021870:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8021874:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021878:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 802187c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8021880:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8021884:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021888:	4770      	bx	lr
 802188a:	bf00      	nop
 802188c:	0802c304 	.word	0x0802c304

08021890 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021894:	b091      	sub	sp, #68	; 0x44
 8021896:	4607      	mov	r7, r0
 8021898:	4688      	mov	r8, r1
 802189a:	6810      	ldr	r0, [r2, #0]
 802189c:	6851      	ldr	r1, [r2, #4]
 802189e:	ac0c      	add	r4, sp, #48	; 0x30
 80218a0:	4616      	mov	r6, r2
 80218a2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80218a6:	4d64      	ldr	r5, [pc, #400]	; (8021a38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80218a8:	f8df a190 	ldr.w	sl, [pc, #400]	; 8021a3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80218ac:	c403      	stmia	r4!, {r0, r1}
 80218ae:	6818      	ldr	r0, [r3, #0]
 80218b0:	ac0e      	add	r4, sp, #56	; 0x38
 80218b2:	6859      	ldr	r1, [r3, #4]
 80218b4:	c403      	stmia	r4!, {r0, r1}
 80218b6:	a80c      	add	r0, sp, #48	; 0x30
 80218b8:	f7fa fef2 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80218bc:	4631      	mov	r1, r6
 80218be:	a80e      	add	r0, sp, #56	; 0x38
 80218c0:	f7fa ff32 	bl	801c728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80218c4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80218c8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80218cc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80218d0:	6828      	ldr	r0, [r5, #0]
 80218d2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80218d6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 80218da:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 80218de:	440f      	add	r7, r1
 80218e0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80218e4:	440a      	add	r2, r1
 80218e6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80218ea:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80218ee:	4413      	add	r3, r2
 80218f0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80218f4:	6803      	ldr	r3, [r0, #0]
 80218f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80218f8:	4798      	blx	r3
 80218fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80218fe:	6828      	ldr	r0, [r5, #0]
 8021900:	d01f      	beq.n	8021942 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8021902:	2201      	movs	r2, #1
 8021904:	2500      	movs	r5, #0
 8021906:	6801      	ldr	r1, [r0, #0]
 8021908:	b2a4      	uxth	r4, r4
 802190a:	b2b6      	uxth	r6, r6
 802190c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021910:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8021914:	250b      	movs	r5, #11
 8021916:	9507      	str	r5, [sp, #28]
 8021918:	f8ba 5000 	ldrh.w	r5, [sl]
 802191c:	f8cd 9010 	str.w	r9, [sp, #16]
 8021920:	9602      	str	r6, [sp, #8]
 8021922:	9401      	str	r4, [sp, #4]
 8021924:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8021928:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802192c:	9203      	str	r2, [sp, #12]
 802192e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021932:	9200      	str	r2, [sp, #0]
 8021934:	4642      	mov	r2, r8
 8021936:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8021938:	4639      	mov	r1, r7
 802193a:	47a0      	blx	r4
 802193c:	b011      	add	sp, #68	; 0x44
 802193e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021942:	6803      	ldr	r3, [r0, #0]
 8021944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021946:	4798      	blx	r3
 8021948:	f8ba 5000 	ldrh.w	r5, [sl]
 802194c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021950:	f04f 0e04 	mov.w	lr, #4
 8021954:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021958:	436e      	muls	r6, r5
 802195a:	fb05 2303 	mla	r3, r5, r3, r2
 802195e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021962:	1b2d      	subs	r5, r5, r4
 8021964:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802196c:	4418      	add	r0, r3
 802196e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021972:	1982      	adds	r2, r0, r6
 8021974:	1b1b      	subs	r3, r3, r4
 8021976:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802197a:	930b      	str	r3, [sp, #44]	; 0x2c
 802197c:	4290      	cmp	r0, r2
 802197e:	d254      	bcs.n	8021a2a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8021980:	eb00 0a04 	add.w	sl, r0, r4
 8021984:	4550      	cmp	r0, sl
 8021986:	d24c      	bcs.n	8021a22 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8021988:	f817 1b01 	ldrb.w	r1, [r7], #1
 802198c:	fb1e e101 	smlabb	r1, lr, r1, lr
 8021990:	eb08 0c01 	add.w	ip, r8, r1
 8021994:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021998:	b173      	cbz	r3, 80219b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802199a:	2bff      	cmp	r3, #255	; 0xff
 802199c:	f818 b001 	ldrb.w	fp, [r8, r1]
 80219a0:	d10c      	bne.n	80219bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80219a2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80219a6:	d109      	bne.n	80219bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80219a8:	f880 b000 	strb.w	fp, [r0]
 80219ac:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80219b0:	7043      	strb	r3, [r0, #1]
 80219b2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80219b6:	7083      	strb	r3, [r0, #2]
 80219b8:	3003      	adds	r0, #3
 80219ba:	e7e3      	b.n	8021984 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 80219bc:	fb09 f103 	mul.w	r1, r9, r3
 80219c0:	1c4b      	adds	r3, r1, #1
 80219c2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80219c6:	7801      	ldrb	r1, [r0, #0]
 80219c8:	121b      	asrs	r3, r3, #8
 80219ca:	b29e      	uxth	r6, r3
 80219cc:	43db      	mvns	r3, r3
 80219ce:	fb1b fb06 	smulbb	fp, fp, r6
 80219d2:	b2db      	uxtb	r3, r3
 80219d4:	fb01 b103 	mla	r1, r1, r3, fp
 80219d8:	b289      	uxth	r1, r1
 80219da:	f101 0b01 	add.w	fp, r1, #1
 80219de:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80219e2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80219e6:	fb1b fb03 	smulbb	fp, fp, r3
 80219ea:	1209      	asrs	r1, r1, #8
 80219ec:	7001      	strb	r1, [r0, #0]
 80219ee:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80219f2:	fb01 b106 	mla	r1, r1, r6, fp
 80219f6:	b289      	uxth	r1, r1
 80219f8:	f101 0b01 	add.w	fp, r1, #1
 80219fc:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021a00:	1209      	asrs	r1, r1, #8
 8021a02:	7041      	strb	r1, [r0, #1]
 8021a04:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8021a08:	f890 c002 	ldrb.w	ip, [r0, #2]
 8021a0c:	fb1c f303 	smulbb	r3, ip, r3
 8021a10:	fb01 3606 	mla	r6, r1, r6, r3
 8021a14:	b2b6      	uxth	r6, r6
 8021a16:	1c73      	adds	r3, r6, #1
 8021a18:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021a1c:	1236      	asrs	r6, r6, #8
 8021a1e:	7086      	strb	r6, [r0, #2]
 8021a20:	e7ca      	b.n	80219b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8021a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a24:	4428      	add	r0, r5
 8021a26:	441f      	add	r7, r3
 8021a28:	e7a8      	b.n	802197c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8021a2a:	4b03      	ldr	r3, [pc, #12]	; (8021a38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021a2c:	6818      	ldr	r0, [r3, #0]
 8021a2e:	6803      	ldr	r3, [r0, #0]
 8021a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021a32:	4798      	blx	r3
 8021a34:	e782      	b.n	802193c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8021a36:	bf00      	nop
 8021a38:	2402628c 	.word	0x2402628c
 8021a3c:	24026286 	.word	0x24026286

08021a40 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a44:	b091      	sub	sp, #68	; 0x44
 8021a46:	4680      	mov	r8, r0
 8021a48:	460e      	mov	r6, r1
 8021a4a:	6810      	ldr	r0, [r2, #0]
 8021a4c:	6851      	ldr	r1, [r2, #4]
 8021a4e:	ad0c      	add	r5, sp, #48	; 0x30
 8021a50:	4614      	mov	r4, r2
 8021a52:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8021a56:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8021bf0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8021a5a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8021bf4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8021a5e:	c503      	stmia	r5!, {r0, r1}
 8021a60:	6818      	ldr	r0, [r3, #0]
 8021a62:	ad0e      	add	r5, sp, #56	; 0x38
 8021a64:	6859      	ldr	r1, [r3, #4]
 8021a66:	c503      	stmia	r5!, {r0, r1}
 8021a68:	a80c      	add	r0, sp, #48	; 0x30
 8021a6a:	f7fa fe19 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021a6e:	4621      	mov	r1, r4
 8021a70:	a80e      	add	r0, sp, #56	; 0x38
 8021a72:	f7fa fe59 	bl	801c728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021a76:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021a7a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021a7e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021a82:	f8d9 0000 	ldr.w	r0, [r9]
 8021a86:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021a8a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8021a8e:	eb08 0401 	add.w	r4, r8, r1
 8021a92:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021a96:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8021a9a:	440a      	add	r2, r1
 8021a9c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021aa0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021aa4:	4413      	add	r3, r2
 8021aa6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021aaa:	6803      	ldr	r3, [r0, #0]
 8021aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021aae:	4798      	blx	r3
 8021ab0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021ab4:	f8d9 0000 	ldr.w	r0, [r9]
 8021ab8:	d022      	beq.n	8021b00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8021aba:	2200      	movs	r2, #0
 8021abc:	f04f 0c01 	mov.w	ip, #1
 8021ac0:	6801      	ldr	r1, [r0, #0]
 8021ac2:	b2ad      	uxth	r5, r5
 8021ac4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021ac8:	e9cd c208 	strd	ip, r2, [sp, #32]
 8021acc:	f04f 0c0b 	mov.w	ip, #11
 8021ad0:	f8cd c01c 	str.w	ip, [sp, #28]
 8021ad4:	f8ba c000 	ldrh.w	ip, [sl]
 8021ad8:	9704      	str	r7, [sp, #16]
 8021ada:	9502      	str	r5, [sp, #8]
 8021adc:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8021ae0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021ae4:	9203      	str	r2, [sp, #12]
 8021ae6:	fa1f f288 	uxth.w	r2, r8
 8021aea:	9201      	str	r2, [sp, #4]
 8021aec:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021af0:	9200      	str	r2, [sp, #0]
 8021af2:	4632      	mov	r2, r6
 8021af4:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8021af6:	4621      	mov	r1, r4
 8021af8:	47a8      	blx	r5
 8021afa:	b011      	add	sp, #68	; 0x44
 8021afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b00:	6803      	ldr	r3, [r0, #0]
 8021b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b04:	4798      	blx	r3
 8021b06:	f8ba 2000 	ldrh.w	r2, [sl]
 8021b0a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021b0e:	f04f 0e03 	mov.w	lr, #3
 8021b12:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8021b16:	4355      	muls	r5, r2
 8021b18:	fa1f fc87 	uxth.w	ip, r7
 8021b1c:	fb02 1303 	mla	r3, r2, r3, r1
 8021b20:	eba2 0208 	sub.w	r2, r2, r8
 8021b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021b28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021b30:	4418      	add	r0, r3
 8021b32:	920b      	str	r2, [sp, #44]	; 0x2c
 8021b34:	1943      	adds	r3, r0, r5
 8021b36:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8021b3a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8021b3e:	eba2 0208 	sub.w	r2, r2, r8
 8021b42:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021b46:	b2ad      	uxth	r5, r5
 8021b48:	4298      	cmp	r0, r3
 8021b4a:	d24a      	bcs.n	8021be2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8021b4c:	eb00 0908 	add.w	r9, r0, r8
 8021b50:	4621      	mov	r1, r4
 8021b52:	4548      	cmp	r0, r9
 8021b54:	460c      	mov	r4, r1
 8021b56:	d240      	bcs.n	8021bda <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8021b58:	f04f 0a04 	mov.w	sl, #4
 8021b5c:	7824      	ldrb	r4, [r4, #0]
 8021b5e:	2fff      	cmp	r7, #255	; 0xff
 8021b60:	f101 0101 	add.w	r1, r1, #1
 8021b64:	fb1e a404 	smlabb	r4, lr, r4, sl
 8021b68:	eb06 0a04 	add.w	sl, r6, r4
 8021b6c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8021b70:	d02b      	beq.n	8021bca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8021b72:	7804      	ldrb	r4, [r0, #0]
 8021b74:	fb14 f405 	smulbb	r4, r4, r5
 8021b78:	fb0b 440c 	mla	r4, fp, ip, r4
 8021b7c:	b2a4      	uxth	r4, r4
 8021b7e:	f104 0b01 	add.w	fp, r4, #1
 8021b82:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021b86:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021b8a:	fb1b fb05 	smulbb	fp, fp, r5
 8021b8e:	1224      	asrs	r4, r4, #8
 8021b90:	7004      	strb	r4, [r0, #0]
 8021b92:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8021b96:	fb04 b40c 	mla	r4, r4, ip, fp
 8021b9a:	b2a4      	uxth	r4, r4
 8021b9c:	f104 0b01 	add.w	fp, r4, #1
 8021ba0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021ba4:	1224      	asrs	r4, r4, #8
 8021ba6:	7044      	strb	r4, [r0, #1]
 8021ba8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8021bac:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021bb0:	fb1a fa05 	smulbb	sl, sl, r5
 8021bb4:	fb04 a40c 	mla	r4, r4, ip, sl
 8021bb8:	b2a4      	uxth	r4, r4
 8021bba:	f104 0a01 	add.w	sl, r4, #1
 8021bbe:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021bc2:	1224      	asrs	r4, r4, #8
 8021bc4:	7084      	strb	r4, [r0, #2]
 8021bc6:	3003      	adds	r0, #3
 8021bc8:	e7c3      	b.n	8021b52 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8021bca:	f880 b000 	strb.w	fp, [r0]
 8021bce:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8021bd2:	7044      	strb	r4, [r0, #1]
 8021bd4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8021bd8:	e7f4      	b.n	8021bc4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8021bda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021bdc:	4420      	add	r0, r4
 8021bde:	188c      	adds	r4, r1, r2
 8021be0:	e7b2      	b.n	8021b48 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8021be2:	4b03      	ldr	r3, [pc, #12]	; (8021bf0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021be4:	6818      	ldr	r0, [r3, #0]
 8021be6:	6803      	ldr	r3, [r0, #0]
 8021be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021bea:	4798      	blx	r3
 8021bec:	e785      	b.n	8021afa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8021bee:	bf00      	nop
 8021bf0:	2402628c 	.word	0x2402628c
 8021bf4:	24026286 	.word	0x24026286

08021bf8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021bf8:	b430      	push	{r4, r5}
 8021bfa:	780d      	ldrb	r5, [r1, #0]
 8021bfc:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8021c00:	b11d      	cbz	r5, 8021c0a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8021c02:	2d01      	cmp	r5, #1
 8021c04:	d005      	beq.n	8021c12 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8021c06:	bc30      	pop	{r4, r5}
 8021c08:	4770      	bx	lr
 8021c0a:	9402      	str	r4, [sp, #8]
 8021c0c:	bc30      	pop	{r4, r5}
 8021c0e:	f7ff be3f 	b.w	8021890 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021c12:	9402      	str	r4, [sp, #8]
 8021c14:	bc30      	pop	{r4, r5}
 8021c16:	f7ff bf13 	b.w	8021a40 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08021c1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8021c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021c20:	4605      	mov	r5, r0
 8021c22:	b08f      	sub	sp, #60	; 0x3c
 8021c24:	460c      	mov	r4, r1
 8021c26:	461f      	mov	r7, r3
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	d052      	beq.n	8021cd2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8021c2c:	6808      	ldr	r0, [r1, #0]
 8021c2e:	ab0a      	add	r3, sp, #40	; 0x28
 8021c30:	6849      	ldr	r1, [r1, #4]
 8021c32:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8021dfc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8021c36:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8021e00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8021c3a:	c303      	stmia	r3!, {r0, r1}
 8021c3c:	6810      	ldr	r0, [r2, #0]
 8021c3e:	ab0c      	add	r3, sp, #48	; 0x30
 8021c40:	6851      	ldr	r1, [r2, #4]
 8021c42:	c303      	stmia	r3!, {r0, r1}
 8021c44:	a80a      	add	r0, sp, #40	; 0x28
 8021c46:	f7fa fd2b 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c4a:	4621      	mov	r1, r4
 8021c4c:	a80c      	add	r0, sp, #48	; 0x30
 8021c4e:	f7fa fd6b 	bl	801c728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021c52:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021c56:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021c5a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021c5e:	f8d8 0000 	ldr.w	r0, [r8]
 8021c62:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021c66:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8021c6a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8021c6e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8021c72:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021c76:	440a      	add	r2, r1
 8021c78:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8021c7c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8021c80:	4413      	add	r3, r2
 8021c82:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021c86:	6803      	ldr	r3, [r0, #0]
 8021c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021c8a:	4798      	blx	r3
 8021c8c:	2fff      	cmp	r7, #255	; 0xff
 8021c8e:	d023      	beq.n	8021cd8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8021c90:	f010 0f04 	tst.w	r0, #4
 8021c94:	f8d8 0000 	ldr.w	r0, [r8]
 8021c98:	d021      	beq.n	8021cde <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8021c9a:	2100      	movs	r1, #0
 8021c9c:	f04f 0e01 	mov.w	lr, #1
 8021ca0:	f8d0 c000 	ldr.w	ip, [r0]
 8021ca4:	b2a4      	uxth	r4, r4
 8021ca6:	9106      	str	r1, [sp, #24]
 8021ca8:	b2b6      	uxth	r6, r6
 8021caa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8021cae:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021cb2:	e9cd e107 	strd	lr, r1, [sp, #28]
 8021cb6:	f8b9 e000 	ldrh.w	lr, [r9]
 8021cba:	9703      	str	r7, [sp, #12]
 8021cbc:	9401      	str	r4, [sp, #4]
 8021cbe:	9600      	str	r6, [sp, #0]
 8021cc0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021cc4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021cc8:	9102      	str	r1, [sp, #8]
 8021cca:	4629      	mov	r1, r5
 8021ccc:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8021cd0:	47a0      	blx	r4
 8021cd2:	b00f      	add	sp, #60	; 0x3c
 8021cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021cd8:	f010 0f01 	tst.w	r0, #1
 8021cdc:	e7da      	b.n	8021c94 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8021cde:	6803      	ldr	r3, [r0, #0]
 8021ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ce2:	4798      	blx	r3
 8021ce4:	f8b9 1000 	ldrh.w	r1, [r9]
 8021ce8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021cec:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8021cf0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021cf4:	434c      	muls	r4, r1
 8021cf6:	2fff      	cmp	r7, #255	; 0xff
 8021cf8:	fb01 2303 	mla	r3, r1, r3, r2
 8021cfc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021d00:	eba1 0106 	sub.w	r1, r1, r6
 8021d04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021d0c:	4418      	add	r0, r3
 8021d0e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8021d12:	eba3 0606 	sub.w	r6, r3, r6
 8021d16:	4404      	add	r4, r0
 8021d18:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8021d1c:	d04a      	beq.n	8021db4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8021d1e:	43fa      	mvns	r2, r7
 8021d20:	b2bb      	uxth	r3, r7
 8021d22:	b2d7      	uxtb	r7, r2
 8021d24:	42a0      	cmp	r0, r4
 8021d26:	d263      	bcs.n	8021df0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8021d28:	eb00 0e0c 	add.w	lr, r0, ip
 8021d2c:	4586      	cmp	lr, r0
 8021d2e:	f100 0803 	add.w	r8, r0, #3
 8021d32:	d93a      	bls.n	8021daa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8021d34:	f835 2b02 	ldrh.w	r2, [r5], #2
 8021d38:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8021d3c:	00d0      	lsls	r0, r2, #3
 8021d3e:	fb19 f907 	smulbb	r9, r9, r7
 8021d42:	b2c0      	uxtb	r0, r0
 8021d44:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8021d48:	fb00 9003 	mla	r0, r0, r3, r9
 8021d4c:	b280      	uxth	r0, r0
 8021d4e:	f100 0901 	add.w	r9, r0, #1
 8021d52:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8021d56:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8021d5a:	fb19 f907 	smulbb	r9, r9, r7
 8021d5e:	1200      	asrs	r0, r0, #8
 8021d60:	f808 0c03 	strb.w	r0, [r8, #-3]
 8021d64:	10d0      	asrs	r0, r2, #3
 8021d66:	1212      	asrs	r2, r2, #8
 8021d68:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021d6c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021d70:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8021d74:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021d78:	fb00 9003 	mla	r0, r0, r3, r9
 8021d7c:	b280      	uxth	r0, r0
 8021d7e:	f100 0901 	add.w	r9, r0, #1
 8021d82:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8021d86:	1200      	asrs	r0, r0, #8
 8021d88:	f808 0c02 	strb.w	r0, [r8, #-2]
 8021d8c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8021d90:	fb10 f007 	smulbb	r0, r0, r7
 8021d94:	fb02 0203 	mla	r2, r2, r3, r0
 8021d98:	b292      	uxth	r2, r2
 8021d9a:	1c50      	adds	r0, r2, #1
 8021d9c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021da0:	4640      	mov	r0, r8
 8021da2:	1212      	asrs	r2, r2, #8
 8021da4:	f808 2c01 	strb.w	r2, [r8, #-1]
 8021da8:	e7c0      	b.n	8021d2c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8021daa:	4408      	add	r0, r1
 8021dac:	4435      	add	r5, r6
 8021dae:	e7b9      	b.n	8021d24 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8021db0:	4408      	add	r0, r1
 8021db2:	4435      	add	r5, r6
 8021db4:	42a0      	cmp	r0, r4
 8021db6:	d21b      	bcs.n	8021df0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8021db8:	eb00 070c 	add.w	r7, r0, ip
 8021dbc:	42b8      	cmp	r0, r7
 8021dbe:	d2f7      	bcs.n	8021db0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8021dc0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8021dc4:	3003      	adds	r0, #3
 8021dc6:	00da      	lsls	r2, r3, #3
 8021dc8:	b2d2      	uxtb	r2, r2
 8021dca:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021dce:	f800 2c03 	strb.w	r2, [r0, #-3]
 8021dd2:	10da      	asrs	r2, r3, #3
 8021dd4:	121b      	asrs	r3, r3, #8
 8021dd6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021dda:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021dde:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021de2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8021de6:	f800 2c02 	strb.w	r2, [r0, #-2]
 8021dea:	f800 3c01 	strb.w	r3, [r0, #-1]
 8021dee:	e7e5      	b.n	8021dbc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8021df0:	4b02      	ldr	r3, [pc, #8]	; (8021dfc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8021df2:	6818      	ldr	r0, [r3, #0]
 8021df4:	6803      	ldr	r3, [r0, #0]
 8021df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021df8:	4798      	blx	r3
 8021dfa:	e76a      	b.n	8021cd2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8021dfc:	2402628c 	.word	0x2402628c
 8021e00:	24026286 	.word	0x24026286

08021e04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e08:	b08a      	sub	sp, #40	; 0x28
 8021e0a:	460d      	mov	r5, r1
 8021e0c:	4604      	mov	r4, r0
 8021e0e:	461e      	mov	r6, r3
 8021e10:	6808      	ldr	r0, [r1, #0]
 8021e12:	ab06      	add	r3, sp, #24
 8021e14:	6849      	ldr	r1, [r1, #4]
 8021e16:	4f5d      	ldr	r7, [pc, #372]	; (8021f8c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8021e18:	c303      	stmia	r3!, {r0, r1}
 8021e1a:	6810      	ldr	r0, [r2, #0]
 8021e1c:	ab08      	add	r3, sp, #32
 8021e1e:	6851      	ldr	r1, [r2, #4]
 8021e20:	c303      	stmia	r3!, {r0, r1}
 8021e22:	a806      	add	r0, sp, #24
 8021e24:	f7fa fc3c 	bl	801c6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e28:	4629      	mov	r1, r5
 8021e2a:	a808      	add	r0, sp, #32
 8021e2c:	f7fa fc7c 	bl	801c728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021e30:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021e34:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021e38:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021e3c:	6838      	ldr	r0, [r7, #0]
 8021e3e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021e42:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8021e46:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8021e4a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021e4e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021e52:	440a      	add	r2, r1
 8021e54:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021e58:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021e5c:	4413      	add	r3, r2
 8021e5e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8021e62:	6803      	ldr	r3, [r0, #0]
 8021e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021e66:	4798      	blx	r3
 8021e68:	2eff      	cmp	r6, #255	; 0xff
 8021e6a:	d119      	bne.n	8021ea0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8021e6c:	f010 0f20 	tst.w	r0, #32
 8021e70:	6838      	ldr	r0, [r7, #0]
 8021e72:	d018      	beq.n	8021ea6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8021e74:	b2ad      	uxth	r5, r5
 8021e76:	2700      	movs	r7, #0
 8021e78:	6801      	ldr	r1, [r0, #0]
 8021e7a:	9501      	str	r5, [sp, #4]
 8021e7c:	fa1f f588 	uxth.w	r5, r8
 8021e80:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021e84:	9500      	str	r5, [sp, #0]
 8021e86:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021e8a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8021e8e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8021e92:	9602      	str	r6, [sp, #8]
 8021e94:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8021e96:	4621      	mov	r1, r4
 8021e98:	47a8      	blx	r5
 8021e9a:	b00a      	add	sp, #40	; 0x28
 8021e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ea0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021ea4:	e7e4      	b.n	8021e70 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8021ea6:	6803      	ldr	r3, [r0, #0]
 8021ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021eaa:	4798      	blx	r3
 8021eac:	4b38      	ldr	r3, [pc, #224]	; (8021f90 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8021eae:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021eb2:	f8b3 c000 	ldrh.w	ip, [r3]
 8021eb6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021eba:	fb0c f505 	mul.w	r5, ip, r5
 8021ebe:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8021ec2:	fb0c 2303 	mla	r3, ip, r3, r2
 8021ec6:	ebac 0c08 	sub.w	ip, ip, r8
 8021eca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021ece:	ebae 0e08 	sub.w	lr, lr, r8
 8021ed2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ed6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021eda:	4418      	add	r0, r3
 8021edc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8021ee0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8021ee4:	4405      	add	r5, r0
 8021ee6:	42a8      	cmp	r0, r5
 8021ee8:	d24a      	bcs.n	8021f80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8021eea:	eb00 0803 	add.w	r8, r0, r3
 8021eee:	4540      	cmp	r0, r8
 8021ef0:	d243      	bcs.n	8021f7a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8021ef2:	78e2      	ldrb	r2, [r4, #3]
 8021ef4:	b15a      	cbz	r2, 8021f0e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8021ef6:	2aff      	cmp	r2, #255	; 0xff
 8021ef8:	f894 9000 	ldrb.w	r9, [r4]
 8021efc:	d10a      	bne.n	8021f14 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8021efe:	2eff      	cmp	r6, #255	; 0xff
 8021f00:	d108      	bne.n	8021f14 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8021f02:	f880 9000 	strb.w	r9, [r0]
 8021f06:	7862      	ldrb	r2, [r4, #1]
 8021f08:	7042      	strb	r2, [r0, #1]
 8021f0a:	78a2      	ldrb	r2, [r4, #2]
 8021f0c:	7082      	strb	r2, [r0, #2]
 8021f0e:	3003      	adds	r0, #3
 8021f10:	3404      	adds	r4, #4
 8021f12:	e7ec      	b.n	8021eee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8021f14:	4372      	muls	r2, r6
 8021f16:	1c51      	adds	r1, r2, #1
 8021f18:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8021f1c:	1209      	asrs	r1, r1, #8
 8021f1e:	fa1f fa81 	uxth.w	sl, r1
 8021f22:	43c9      	mvns	r1, r1
 8021f24:	fb19 f90a 	smulbb	r9, r9, sl
 8021f28:	b2ca      	uxtb	r2, r1
 8021f2a:	7801      	ldrb	r1, [r0, #0]
 8021f2c:	fb01 9902 	mla	r9, r1, r2, r9
 8021f30:	fa1f f989 	uxth.w	r9, r9
 8021f34:	f109 0101 	add.w	r1, r9, #1
 8021f38:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8021f3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021f40:	f880 9000 	strb.w	r9, [r0]
 8021f44:	f890 9001 	ldrb.w	r9, [r0, #1]
 8021f48:	7861      	ldrb	r1, [r4, #1]
 8021f4a:	fb19 f902 	smulbb	r9, r9, r2
 8021f4e:	fb01 910a 	mla	r1, r1, sl, r9
 8021f52:	b289      	uxth	r1, r1
 8021f54:	f101 0901 	add.w	r9, r1, #1
 8021f58:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8021f5c:	1209      	asrs	r1, r1, #8
 8021f5e:	7041      	strb	r1, [r0, #1]
 8021f60:	7881      	ldrb	r1, [r0, #2]
 8021f62:	f894 9002 	ldrb.w	r9, [r4, #2]
 8021f66:	fb11 f202 	smulbb	r2, r1, r2
 8021f6a:	fb09 220a 	mla	r2, r9, sl, r2
 8021f6e:	b292      	uxth	r2, r2
 8021f70:	1c51      	adds	r1, r2, #1
 8021f72:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021f76:	1212      	asrs	r2, r2, #8
 8021f78:	e7c8      	b.n	8021f0c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8021f7a:	4460      	add	r0, ip
 8021f7c:	4474      	add	r4, lr
 8021f7e:	e7b2      	b.n	8021ee6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8021f80:	6838      	ldr	r0, [r7, #0]
 8021f82:	6803      	ldr	r3, [r0, #0]
 8021f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f86:	4798      	blx	r3
 8021f88:	e787      	b.n	8021e9a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8021f8a:	bf00      	nop
 8021f8c:	2402628c 	.word	0x2402628c
 8021f90:	24026286 	.word	0x24026286

08021f94 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021f98:	b085      	sub	sp, #20
 8021f9a:	4606      	mov	r6, r0
 8021f9c:	460c      	mov	r4, r1
 8021f9e:	4691      	mov	r9, r2
 8021fa0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8021fa4:	4698      	mov	r8, r3
 8021fa6:	b31d      	cbz	r5, 8021ff0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8021fa8:	4608      	mov	r0, r1
 8021faa:	f7fd fa21 	bl	801f3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021fae:	4607      	mov	r7, r0
 8021fb0:	4620      	mov	r0, r4
 8021fb2:	f7fd fa51 	bl	801f458 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021fb6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021fba:	4620      	mov	r0, r4
 8021fbc:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021fc0:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021fc4:	f8ad 700c 	strh.w	r7, [sp, #12]
 8021fc8:	f7fd fb82 	bl	801f6d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021fcc:	280b      	cmp	r0, #11
 8021fce:	d80f      	bhi.n	8021ff0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8021fd0:	e8df f000 	tbb	[pc, r0]
 8021fd4:	0e062920 	.word	0x0e062920
 8021fd8:	0e0e0e0e 	.word	0x0e0e0e0e
 8021fdc:	110e0e0e 	.word	0x110e0e0e
 8021fe0:	4620      	mov	r0, r4
 8021fe2:	f7fd faf1 	bl	801f5c8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021fe6:	462b      	mov	r3, r5
 8021fe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021fea:	a902      	add	r1, sp, #8
 8021fec:	f7ff ff0a 	bl	8021e04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021ff0:	b005      	add	sp, #20
 8021ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021ff6:	4620      	mov	r0, r4
 8021ff8:	f7fd fae6 	bl	801f5c8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021ffc:	4606      	mov	r6, r0
 8021ffe:	4620      	mov	r0, r4
 8022000:	f7fd fb12 	bl	801f628 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022004:	9500      	str	r5, [sp, #0]
 8022006:	4601      	mov	r1, r0
 8022008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802200a:	aa02      	add	r2, sp, #8
 802200c:	4630      	mov	r0, r6
 802200e:	f7ff fdf3 	bl	8021bf8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022012:	e7ed      	b.n	8021ff0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8022014:	4620      	mov	r0, r4
 8022016:	f7fd fad7 	bl	801f5c8 <_ZNK8touchgfx6Bitmap7getDataEv>
 802201a:	462b      	mov	r3, r5
 802201c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802201e:	a902      	add	r1, sp, #8
 8022020:	f7ff fdfc 	bl	8021c1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8022024:	e7e4      	b.n	8021ff0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8022026:	6833      	ldr	r3, [r6, #0]
 8022028:	4620      	mov	r0, r4
 802202a:	68df      	ldr	r7, [r3, #12]
 802202c:	f7fd facc 	bl	801f5c8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022030:	2300      	movs	r3, #0
 8022032:	4601      	mov	r1, r0
 8022034:	aa02      	add	r2, sp, #8
 8022036:	4630      	mov	r0, r6
 8022038:	e9cd 5300 	strd	r5, r3, [sp]
 802203c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802203e:	47b8      	blx	r7
 8022040:	e7d6      	b.n	8021ff0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08022042 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022042:	b4f0      	push	{r4, r5, r6, r7}
 8022044:	4616      	mov	r6, r2
 8022046:	461c      	mov	r4, r3
 8022048:	460d      	mov	r5, r1
 802204a:	9a04      	ldr	r2, [sp, #16]
 802204c:	2e01      	cmp	r6, #1
 802204e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022052:	d00e      	beq.n	8022072 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8022054:	d303      	bcc.n	802205e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8022056:	2e02      	cmp	r6, #2
 8022058:	d006      	beq.n	8022068 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 802205a:	bcf0      	pop	{r4, r5, r6, r7}
 802205c:	4770      	bx	lr
 802205e:	4621      	mov	r1, r4
 8022060:	4628      	mov	r0, r5
 8022062:	bcf0      	pop	{r4, r5, r6, r7}
 8022064:	f7ff bdda 	b.w	8021c1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8022068:	4621      	mov	r1, r4
 802206a:	4628      	mov	r0, r5
 802206c:	bcf0      	pop	{r4, r5, r6, r7}
 802206e:	f7ff bec9 	b.w	8021e04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022072:	6805      	ldr	r5, [r0, #0]
 8022074:	2600      	movs	r6, #0
 8022076:	e9cd 3604 	strd	r3, r6, [sp, #16]
 802207a:	68ed      	ldr	r5, [r5, #12]
 802207c:	4613      	mov	r3, r2
 802207e:	4622      	mov	r2, r4
 8022080:	46ac      	mov	ip, r5
 8022082:	bcf0      	pop	{r4, r5, r6, r7}
 8022084:	4760      	bx	ip
	...

08022088 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8022088:	b160      	cbz	r0, 80220a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 802208a:	2903      	cmp	r1, #3
 802208c:	d818      	bhi.n	80220c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 802208e:	e8df f001 	tbb	[pc, r1]
 8022092:	1902      	.short	0x1902
 8022094:	1b06      	.short	0x1b06
 8022096:	4b0e      	ldr	r3, [pc, #56]	; (80220d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8022098:	8818      	ldrh	r0, [r3, #0]
 802209a:	4240      	negs	r0, r0
 802209c:	4770      	bx	lr
 802209e:	4b0c      	ldr	r3, [pc, #48]	; (80220d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80220a0:	8818      	ldrh	r0, [r3, #0]
 80220a2:	4770      	bx	lr
 80220a4:	2903      	cmp	r1, #3
 80220a6:	d80b      	bhi.n	80220c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80220a8:	a301      	add	r3, pc, #4	; (adr r3, 80220b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80220aa:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80220ae:	bf00      	nop
 80220b0:	080220c5 	.word	0x080220c5
 80220b4:	0802209f 	.word	0x0802209f
 80220b8:	080220c9 	.word	0x080220c9
 80220bc:	08022097 	.word	0x08022097
 80220c0:	2000      	movs	r0, #0
 80220c2:	4770      	bx	lr
 80220c4:	2001      	movs	r0, #1
 80220c6:	4770      	bx	lr
 80220c8:	f04f 30ff 	mov.w	r0, #4294967295
 80220cc:	4770      	bx	lr
 80220ce:	bf00      	nop
 80220d0:	24026286 	.word	0x24026286

080220d4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80220d4:	b160      	cbz	r0, 80220f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 80220d6:	2903      	cmp	r1, #3
 80220d8:	d818      	bhi.n	802210c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80220da:	e8df f001 	tbb	[pc, r1]
 80220de:	0219      	.short	0x0219
 80220e0:	051b      	.short	0x051b
 80220e2:	4b0e      	ldr	r3, [pc, #56]	; (802211c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80220e4:	8818      	ldrh	r0, [r3, #0]
 80220e6:	4770      	bx	lr
 80220e8:	4b0c      	ldr	r3, [pc, #48]	; (802211c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80220ea:	8818      	ldrh	r0, [r3, #0]
 80220ec:	4240      	negs	r0, r0
 80220ee:	4770      	bx	lr
 80220f0:	2903      	cmp	r1, #3
 80220f2:	d80b      	bhi.n	802210c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80220f4:	a301      	add	r3, pc, #4	; (adr r3, 80220fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 80220f6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80220fa:	bf00      	nop
 80220fc:	080220e3 	.word	0x080220e3
 8022100:	08022115 	.word	0x08022115
 8022104:	080220e9 	.word	0x080220e9
 8022108:	08022111 	.word	0x08022111
 802210c:	2000      	movs	r0, #0
 802210e:	4770      	bx	lr
 8022110:	2001      	movs	r0, #1
 8022112:	4770      	bx	lr
 8022114:	f04f 30ff 	mov.w	r0, #4294967295
 8022118:	4770      	bx	lr
 802211a:	bf00      	nop
 802211c:	24026286 	.word	0x24026286

08022120 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022124:	b097      	sub	sp, #92	; 0x5c
 8022126:	910b      	str	r1, [sp, #44]	; 0x2c
 8022128:	a912      	add	r1, sp, #72	; 0x48
 802212a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 802212e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8022132:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8022136:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 802213a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 802213e:	e881 000c 	stmia.w	r1, {r2, r3}
 8022142:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8022146:	930a      	str	r3, [sp, #40]	; 0x28
 8022148:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 802214c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8022150:	9311      	str	r3, [sp, #68]	; 0x44
 8022152:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8022156:	798d      	ldrb	r5, [r1, #6]
 8022158:	930c      	str	r3, [sp, #48]	; 0x30
 802215a:	7b4b      	ldrb	r3, [r1, #13]
 802215c:	0158      	lsls	r0, r3, #5
 802215e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8022162:	4328      	orrs	r0, r5
 8022164:	9009      	str	r0, [sp, #36]	; 0x24
 8022166:	f000 817c 	beq.w	8022462 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802216a:	011b      	lsls	r3, r3, #4
 802216c:	79c8      	ldrb	r0, [r1, #7]
 802216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022172:	4303      	orrs	r3, r0
 8022174:	930e      	str	r3, [sp, #56]	; 0x38
 8022176:	f000 8174 	beq.w	8022462 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802217a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802217e:	b29b      	uxth	r3, r3
 8022180:	2f00      	cmp	r7, #0
 8022182:	f000 8116 	beq.w	80223b2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8022186:	1aff      	subs	r7, r7, r3
 8022188:	b2bf      	uxth	r7, r7
 802218a:	043b      	lsls	r3, r7, #16
 802218c:	d502      	bpl.n	8022194 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802218e:	1bf6      	subs	r6, r6, r7
 8022190:	2700      	movs	r7, #0
 8022192:	b236      	sxth	r6, r6
 8022194:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022198:	a812      	add	r0, sp, #72	; 0x48
 802219a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 802219e:	428e      	cmp	r6, r1
 80221a0:	b28b      	uxth	r3, r1
 80221a2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80221a6:	bfbf      	itttt	lt
 80221a8:	18ff      	addlt	r7, r7, r3
 80221aa:	1bbe      	sublt	r6, r7, r6
 80221ac:	b2b7      	uxthlt	r7, r6
 80221ae:	460e      	movlt	r6, r1
 80221b0:	8891      	ldrh	r1, [r2, #4]
 80221b2:	440b      	add	r3, r1
 80221b4:	4631      	mov	r1, r6
 80221b6:	b21b      	sxth	r3, r3
 80221b8:	9310      	str	r3, [sp, #64]	; 0x40
 80221ba:	88d3      	ldrh	r3, [r2, #6]
 80221bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80221be:	449a      	add	sl, r3
 80221c0:	fa0f f38a 	sxth.w	r3, sl
 80221c4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80221c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80221ca:	4bb5      	ldr	r3, [pc, #724]	; (80224a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80221cc:	f893 b000 	ldrb.w	fp, [r3]
 80221d0:	f10b 3cff 	add.w	ip, fp, #4294967295
 80221d4:	f1dc 0300 	rsbs	r3, ip, #0
 80221d8:	eb43 030c 	adc.w	r3, r3, ip
 80221dc:	930d      	str	r3, [sp, #52]	; 0x34
 80221de:	464b      	mov	r3, r9
 80221e0:	f7fa f8d8 	bl	801c394 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80221e4:	4631      	mov	r1, r6
 80221e6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80221ea:	464b      	mov	r3, r9
 80221ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80221ee:	a812      	add	r0, sp, #72	; 0x48
 80221f0:	f7fa f8ed 	bl	801c3ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80221f4:	a916      	add	r1, sp, #88	; 0x58
 80221f6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80221fa:	a815      	add	r0, sp, #84	; 0x54
 80221fc:	f7fa fa0e 	bl	801c61c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022200:	f1b9 0f00 	cmp.w	r9, #0
 8022204:	f040 80d8 	bne.w	80223b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8022208:	f1bb 0f01 	cmp.w	fp, #1
 802220c:	f040 80dc 	bne.w	80223c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8022210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022212:	b153      	cbz	r3, 802222a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8022214:	2508      	movs	r5, #8
 8022216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022218:	fb95 f3f8 	sdiv	r3, r5, r8
 802221c:	1e5d      	subs	r5, r3, #1
 802221e:	4415      	add	r5, r2
 8022220:	fb95 f5f3 	sdiv	r5, r5, r3
 8022224:	fb15 f503 	smulbb	r5, r5, r3
 8022228:	b2ad      	uxth	r5, r5
 802222a:	b907      	cbnz	r7, 802222e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 802222c:	b16c      	cbz	r4, 802224a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 802222e:	fb04 7305 	mla	r3, r4, r5, r7
 8022232:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022234:	ebaa 0a04 	sub.w	sl, sl, r4
 8022238:	fb08 f303 	mul.w	r3, r8, r3
 802223c:	fa1f fa8a 	uxth.w	sl, sl
 8022240:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8022244:	f003 0407 	and.w	r4, r3, #7
 8022248:	9226      	str	r2, [sp, #152]	; 0x98
 802224a:	4649      	mov	r1, r9
 802224c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802224e:	f7ff ff1b 	bl	8022088 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8022252:	4683      	mov	fp, r0
 8022254:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022256:	f7ff ff3d 	bl	80220d4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 802225a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802225c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802225e:	4681      	mov	r9, r0
 8022260:	1a9b      	subs	r3, r3, r2
 8022262:	459a      	cmp	sl, r3
 8022264:	bfa8      	it	ge
 8022266:	469a      	movge	sl, r3
 8022268:	f1ba 0f00 	cmp.w	sl, #0
 802226c:	f340 80f9 	ble.w	8022462 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022270:	1bf6      	subs	r6, r6, r7
 8022272:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022274:	1b9e      	subs	r6, r3, r6
 8022276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022278:	429e      	cmp	r6, r3
 802227a:	bfd4      	ite	le
 802227c:	ebc7 0706 	rsble	r7, r7, r6
 8022280:	ebc7 0703 	rsbgt	r7, r7, r3
 8022284:	2f00      	cmp	r7, #0
 8022286:	f340 80ec 	ble.w	8022462 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802228a:	1bed      	subs	r5, r5, r7
 802228c:	fb08 f305 	mul.w	r3, r8, r5
 8022290:	930d      	str	r3, [sp, #52]	; 0x34
 8022292:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022294:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8022298:	930e      	str	r3, [sp, #56]	; 0x38
 802229a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802229c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80222a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80222a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80222a4:	b2db      	uxtb	r3, r3
 80222a6:	9310      	str	r3, [sp, #64]	; 0x40
 80222a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80222aa:	2b00      	cmp	r3, #0
 80222ac:	f040 80de 	bne.w	802246c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80222b0:	4b7c      	ldr	r3, [pc, #496]	; (80224a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80222b2:	6818      	ldr	r0, [r3, #0]
 80222b4:	6803      	ldr	r3, [r0, #0]
 80222b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80222b8:	4798      	blx	r3
 80222ba:	2301      	movs	r3, #1
 80222bc:	4a7a      	ldr	r2, [pc, #488]	; (80224a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80222be:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80222c2:	fb07 9b1b 	mls	fp, r7, fp, r9
 80222c6:	fa03 f308 	lsl.w	r3, r3, r8
 80222ca:	8811      	ldrh	r1, [r2, #0]
 80222cc:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80222d0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80222d4:	3b01      	subs	r3, #1
 80222d6:	fb06 bb07 	mla	fp, r6, r7, fp
 80222da:	b2db      	uxtb	r3, r3
 80222dc:	930a      	str	r3, [sp, #40]	; 0x28
 80222de:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80222e2:	fb01 2303 	mla	r3, r1, r3, r2
 80222e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222ea:	18c3      	adds	r3, r0, r3
 80222ec:	9309      	str	r3, [sp, #36]	; 0x24
 80222ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80222f0:	781a      	ldrb	r2, [r3, #0]
 80222f2:	4122      	asrs	r2, r4
 80222f4:	b2d2      	uxtb	r2, r2
 80222f6:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80222fa:	f0c0 80d7 	bcc.w	80224ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 80222fe:	46be      	mov	lr, r7
 8022300:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022302:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022306:	f0c0 80ba 	bcc.w	802247e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 802230a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802230c:	4013      	ands	r3, r2
 802230e:	d041      	beq.n	8022394 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8022310:	20ff      	movs	r0, #255	; 0xff
 8022312:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022314:	fb90 f5f5 	sdiv	r5, r0, r5
 8022318:	436b      	muls	r3, r5
 802231a:	2bfe      	cmp	r3, #254	; 0xfe
 802231c:	dd03      	ble.n	8022326 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 802231e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022320:	4285      	cmp	r5, r0
 8022322:	f000 80a5 	beq.w	8022470 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8022326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022328:	9810      	ldr	r0, [sp, #64]	; 0x40
 802232a:	fb15 f303 	smulbb	r3, r5, r3
 802232e:	b29b      	uxth	r3, r3
 8022330:	1c5d      	adds	r5, r3, #1
 8022332:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8022336:	780d      	ldrb	r5, [r1, #0]
 8022338:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802233c:	fa1f fc83 	uxth.w	ip, r3
 8022340:	43db      	mvns	r3, r3
 8022342:	fb10 f90c 	smulbb	r9, r0, ip
 8022346:	b2db      	uxtb	r3, r3
 8022348:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802234a:	fb05 9503 	mla	r5, r5, r3, r9
 802234e:	b2ad      	uxth	r5, r5
 8022350:	f105 0901 	add.w	r9, r5, #1
 8022354:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8022358:	fb10 f90c 	smulbb	r9, r0, ip
 802235c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802235e:	122d      	asrs	r5, r5, #8
 8022360:	fb10 fc0c 	smulbb	ip, r0, ip
 8022364:	700d      	strb	r5, [r1, #0]
 8022366:	784d      	ldrb	r5, [r1, #1]
 8022368:	fb05 9503 	mla	r5, r5, r3, r9
 802236c:	b2ad      	uxth	r5, r5
 802236e:	f105 0901 	add.w	r9, r5, #1
 8022372:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8022376:	122d      	asrs	r5, r5, #8
 8022378:	704d      	strb	r5, [r1, #1]
 802237a:	788d      	ldrb	r5, [r1, #2]
 802237c:	fb05 cc03 	mla	ip, r5, r3, ip
 8022380:	fa1f fc8c 	uxth.w	ip, ip
 8022384:	f10c 0301 	add.w	r3, ip, #1
 8022388:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802238c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022390:	f881 c002 	strb.w	ip, [r1, #2]
 8022394:	4444      	add	r4, r8
 8022396:	4431      	add	r1, r6
 8022398:	b2a4      	uxth	r4, r4
 802239a:	2c07      	cmp	r4, #7
 802239c:	bf89      	itett	hi
 802239e:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80223a0:	fa42 f208 	asrls.w	r2, r2, r8
 80223a4:	2400      	movhi	r4, #0
 80223a6:	785a      	ldrbhi	r2, [r3, #1]
 80223a8:	bf8a      	itet	hi
 80223aa:	3301      	addhi	r3, #1
 80223ac:	b2d2      	uxtbls	r2, r2
 80223ae:	9326      	strhi	r3, [sp, #152]	; 0x98
 80223b0:	e7a7      	b.n	8022302 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80223b2:	441e      	add	r6, r3
 80223b4:	b236      	sxth	r6, r6
 80223b6:	e6ed      	b.n	8022194 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80223b8:	f1b9 0f01 	cmp.w	r9, #1
 80223bc:	f47f af28 	bne.w	8022210 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80223c0:	f1bb 0f01 	cmp.w	fp, #1
 80223c4:	f47f af24 	bne.w	8022210 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80223c8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80224a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80223cc:	f8db 0000 	ldr.w	r0, [fp]
 80223d0:	6803      	ldr	r3, [r0, #0]
 80223d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80223d4:	4798      	blx	r3
 80223d6:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80223da:	465a      	mov	r2, fp
 80223dc:	d006      	beq.n	80223ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80223de:	f1b8 0f04 	cmp.w	r8, #4
 80223e2:	d141      	bne.n	8022468 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 80223e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80223e6:	3300      	adds	r3, #0
 80223e8:	bf18      	it	ne
 80223ea:	2301      	movne	r3, #1
 80223ec:	0580      	lsls	r0, r0, #22
 80223ee:	d566      	bpl.n	80224be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80223f0:	f1b8 0f08 	cmp.w	r8, #8
 80223f4:	d163      	bne.n	80224be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80223f6:	2b00      	cmp	r3, #0
 80223f8:	bf0c      	ite	eq
 80223fa:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80223fe:	f44f 7180 	movne.w	r1, #256	; 0x100
 8022402:	2f00      	cmp	r7, #0
 8022404:	f47f af04 	bne.w	8022210 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022408:	2c00      	cmp	r4, #0
 802240a:	f47f af01 	bne.w	8022210 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802240e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022410:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022412:	18f3      	adds	r3, r6, r3
 8022414:	4283      	cmp	r3, r0
 8022416:	f73f aefb 	bgt.w	8022210 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802241a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802241c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802241e:	4403      	add	r3, r0
 8022420:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022422:	4283      	cmp	r3, r0
 8022424:	f73f aef4 	bgt.w	8022210 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022428:	f1b8 0f08 	cmp.w	r8, #8
 802242c:	6810      	ldr	r0, [r2, #0]
 802242e:	f04f 0600 	mov.w	r6, #0
 8022432:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8022436:	bf18      	it	ne
 8022438:	3501      	addne	r5, #1
 802243a:	6804      	ldr	r4, [r0, #0]
 802243c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8022440:	bf18      	it	ne
 8022442:	f025 0501 	bicne.w	r5, r5, #1
 8022446:	e9cd 1605 	strd	r1, r6, [sp, #20]
 802244a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802244c:	bf18      	it	ne
 802244e:	b2ad      	uxthne	r5, r5
 8022450:	9104      	str	r1, [sp, #16]
 8022452:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022454:	e9cd 5a00 	strd	r5, sl, [sp]
 8022458:	e9cd 5102 	strd	r5, r1, [sp, #8]
 802245c:	9926      	ldr	r1, [sp, #152]	; 0x98
 802245e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8022460:	47a0      	blx	r4
 8022462:	b017      	add	sp, #92	; 0x5c
 8022464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022468:	2300      	movs	r3, #0
 802246a:	e7bf      	b.n	80223ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 802246c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802246e:	e724      	b.n	80222ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8022470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022472:	700b      	strb	r3, [r1, #0]
 8022474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022476:	704b      	strb	r3, [r1, #1]
 8022478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802247a:	708b      	strb	r3, [r1, #2]
 802247c:	e78a      	b.n	8022394 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 802247e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022480:	b153      	cbz	r3, 8022498 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8022482:	441c      	add	r4, r3
 8022484:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022486:	b2a4      	uxth	r4, r4
 8022488:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 802248c:	f004 0407 	and.w	r4, r4, #7
 8022490:	781a      	ldrb	r2, [r3, #0]
 8022492:	9326      	str	r3, [sp, #152]	; 0x98
 8022494:	4122      	asrs	r2, r4
 8022496:	b2d2      	uxtb	r2, r2
 8022498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802249a:	445b      	add	r3, fp
 802249c:	9309      	str	r3, [sp, #36]	; 0x24
 802249e:	e72a      	b.n	80222f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80224a0:	24026284 	.word	0x24026284
 80224a4:	2402628c 	.word	0x2402628c
 80224a8:	24026286 	.word	0x24026286
 80224ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224ae:	2b00      	cmp	r3, #0
 80224b0:	d1d7      	bne.n	8022462 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80224b2:	4b06      	ldr	r3, [pc, #24]	; (80224cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80224b4:	6818      	ldr	r0, [r3, #0]
 80224b6:	6803      	ldr	r3, [r0, #0]
 80224b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80224ba:	4798      	blx	r3
 80224bc:	e7d1      	b.n	8022462 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80224be:	2b00      	cmp	r3, #0
 80224c0:	f43f aea6 	beq.w	8022210 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80224c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80224c8:	e79b      	b.n	8022402 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80224ca:	bf00      	nop
 80224cc:	2402628c 	.word	0x2402628c

080224d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80224d0:	b538      	push	{r3, r4, r5, lr}
 80224d2:	4c15      	ldr	r4, [pc, #84]	; (8022528 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80224d4:	4605      	mov	r5, r0
 80224d6:	7823      	ldrb	r3, [r4, #0]
 80224d8:	f3bf 8f5b 	dmb	ish
 80224dc:	07da      	lsls	r2, r3, #31
 80224de:	d40b      	bmi.n	80224f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80224e0:	4620      	mov	r0, r4
 80224e2:	f005 f890 	bl	8027606 <__cxa_guard_acquire>
 80224e6:	b138      	cbz	r0, 80224f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80224e8:	4620      	mov	r0, r4
 80224ea:	f005 f898 	bl	802761e <__cxa_guard_release>
 80224ee:	4a0f      	ldr	r2, [pc, #60]	; (802252c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80224f0:	490f      	ldr	r1, [pc, #60]	; (8022530 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80224f2:	4810      	ldr	r0, [pc, #64]	; (8022534 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80224f4:	f005 f880 	bl	80275f8 <__aeabi_atexit>
 80224f8:	4c0f      	ldr	r4, [pc, #60]	; (8022538 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80224fa:	7823      	ldrb	r3, [r4, #0]
 80224fc:	f3bf 8f5b 	dmb	ish
 8022500:	07db      	lsls	r3, r3, #31
 8022502:	d40b      	bmi.n	802251c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022504:	4620      	mov	r0, r4
 8022506:	f005 f87e 	bl	8027606 <__cxa_guard_acquire>
 802250a:	b138      	cbz	r0, 802251c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802250c:	4620      	mov	r0, r4
 802250e:	f005 f886 	bl	802761e <__cxa_guard_release>
 8022512:	4a06      	ldr	r2, [pc, #24]	; (802252c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022514:	4909      	ldr	r1, [pc, #36]	; (802253c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022516:	480a      	ldr	r0, [pc, #40]	; (8022540 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022518:	f005 f86e 	bl	80275f8 <__aeabi_atexit>
 802251c:	4b05      	ldr	r3, [pc, #20]	; (8022534 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802251e:	612b      	str	r3, [r5, #16]
 8022520:	4b07      	ldr	r3, [pc, #28]	; (8022540 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022522:	616b      	str	r3, [r5, #20]
 8022524:	bd38      	pop	{r3, r4, r5, pc}
 8022526:	bf00      	nop
 8022528:	24026358 	.word	0x24026358
 802252c:	24000000 	.word	0x24000000
 8022530:	080210a7 	.word	0x080210a7
 8022534:	240000ac 	.word	0x240000ac
 8022538:	2402635c 	.word	0x2402635c
 802253c:	080210a5 	.word	0x080210a5
 8022540:	240000b0 	.word	0x240000b0

08022544 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022544:	b538      	push	{r3, r4, r5, lr}
 8022546:	4c15      	ldr	r4, [pc, #84]	; (802259c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022548:	4605      	mov	r5, r0
 802254a:	7823      	ldrb	r3, [r4, #0]
 802254c:	f3bf 8f5b 	dmb	ish
 8022550:	07da      	lsls	r2, r3, #31
 8022552:	d40b      	bmi.n	802256c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022554:	4620      	mov	r0, r4
 8022556:	f005 f856 	bl	8027606 <__cxa_guard_acquire>
 802255a:	b138      	cbz	r0, 802256c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802255c:	4620      	mov	r0, r4
 802255e:	f005 f85e 	bl	802761e <__cxa_guard_release>
 8022562:	4a0f      	ldr	r2, [pc, #60]	; (80225a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022564:	490f      	ldr	r1, [pc, #60]	; (80225a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8022566:	4810      	ldr	r0, [pc, #64]	; (80225a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022568:	f005 f846 	bl	80275f8 <__aeabi_atexit>
 802256c:	4c0f      	ldr	r4, [pc, #60]	; (80225ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802256e:	7823      	ldrb	r3, [r4, #0]
 8022570:	f3bf 8f5b 	dmb	ish
 8022574:	07db      	lsls	r3, r3, #31
 8022576:	d40b      	bmi.n	8022590 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022578:	4620      	mov	r0, r4
 802257a:	f005 f844 	bl	8027606 <__cxa_guard_acquire>
 802257e:	b138      	cbz	r0, 8022590 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022580:	4620      	mov	r0, r4
 8022582:	f005 f84c 	bl	802761e <__cxa_guard_release>
 8022586:	4a06      	ldr	r2, [pc, #24]	; (80225a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022588:	4909      	ldr	r1, [pc, #36]	; (80225b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802258a:	480a      	ldr	r0, [pc, #40]	; (80225b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802258c:	f005 f834 	bl	80275f8 <__aeabi_atexit>
 8022590:	4b05      	ldr	r3, [pc, #20]	; (80225a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022592:	60ab      	str	r3, [r5, #8]
 8022594:	4b07      	ldr	r3, [pc, #28]	; (80225b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022596:	60eb      	str	r3, [r5, #12]
 8022598:	bd38      	pop	{r3, r4, r5, pc}
 802259a:	bf00      	nop
 802259c:	24026338 	.word	0x24026338
 80225a0:	24000000 	.word	0x24000000
 80225a4:	080210ab 	.word	0x080210ab
 80225a8:	2400008c 	.word	0x2400008c
 80225ac:	2402633c 	.word	0x2402633c
 80225b0:	080210a9 	.word	0x080210a9
 80225b4:	24000090 	.word	0x24000090

080225b8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80225b8:	b510      	push	{r4, lr}
 80225ba:	4604      	mov	r4, r0
 80225bc:	f7ff ff88 	bl	80224d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80225c0:	4620      	mov	r0, r4
 80225c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225c6:	f7ff bfbd 	b.w	8022544 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080225cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80225cc:	b538      	push	{r3, r4, r5, lr}
 80225ce:	4c15      	ldr	r4, [pc, #84]	; (8022624 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80225d0:	4605      	mov	r5, r0
 80225d2:	7823      	ldrb	r3, [r4, #0]
 80225d4:	f3bf 8f5b 	dmb	ish
 80225d8:	07da      	lsls	r2, r3, #31
 80225da:	d40b      	bmi.n	80225f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80225dc:	4620      	mov	r0, r4
 80225de:	f005 f812 	bl	8027606 <__cxa_guard_acquire>
 80225e2:	b138      	cbz	r0, 80225f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80225e4:	4620      	mov	r0, r4
 80225e6:	f005 f81a 	bl	802761e <__cxa_guard_release>
 80225ea:	4a0f      	ldr	r2, [pc, #60]	; (8022628 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80225ec:	490f      	ldr	r1, [pc, #60]	; (802262c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80225ee:	4810      	ldr	r0, [pc, #64]	; (8022630 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80225f0:	f005 f802 	bl	80275f8 <__aeabi_atexit>
 80225f4:	4c0f      	ldr	r4, [pc, #60]	; (8022634 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80225f6:	7823      	ldrb	r3, [r4, #0]
 80225f8:	f3bf 8f5b 	dmb	ish
 80225fc:	07db      	lsls	r3, r3, #31
 80225fe:	d40b      	bmi.n	8022618 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022600:	4620      	mov	r0, r4
 8022602:	f005 f800 	bl	8027606 <__cxa_guard_acquire>
 8022606:	b138      	cbz	r0, 8022618 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022608:	4620      	mov	r0, r4
 802260a:	f005 f808 	bl	802761e <__cxa_guard_release>
 802260e:	4a06      	ldr	r2, [pc, #24]	; (8022628 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022610:	4909      	ldr	r1, [pc, #36]	; (8022638 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8022612:	480a      	ldr	r0, [pc, #40]	; (802263c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022614:	f004 fff0 	bl	80275f8 <__aeabi_atexit>
 8022618:	4b05      	ldr	r3, [pc, #20]	; (8022630 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802261a:	622b      	str	r3, [r5, #32]
 802261c:	4b07      	ldr	r3, [pc, #28]	; (802263c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802261e:	626b      	str	r3, [r5, #36]	; 0x24
 8022620:	bd38      	pop	{r3, r4, r5, pc}
 8022622:	bf00      	nop
 8022624:	24026360 	.word	0x24026360
 8022628:	24000000 	.word	0x24000000
 802262c:	0802109f 	.word	0x0802109f
 8022630:	240000b4 	.word	0x240000b4
 8022634:	24026364 	.word	0x24026364
 8022638:	0802109d 	.word	0x0802109d
 802263c:	240000b8 	.word	0x240000b8

08022640 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022640:	b538      	push	{r3, r4, r5, lr}
 8022642:	4c15      	ldr	r4, [pc, #84]	; (8022698 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022644:	4605      	mov	r5, r0
 8022646:	7823      	ldrb	r3, [r4, #0]
 8022648:	f3bf 8f5b 	dmb	ish
 802264c:	07da      	lsls	r2, r3, #31
 802264e:	d40b      	bmi.n	8022668 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022650:	4620      	mov	r0, r4
 8022652:	f004 ffd8 	bl	8027606 <__cxa_guard_acquire>
 8022656:	b138      	cbz	r0, 8022668 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022658:	4620      	mov	r0, r4
 802265a:	f004 ffe0 	bl	802761e <__cxa_guard_release>
 802265e:	4a0f      	ldr	r2, [pc, #60]	; (802269c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022660:	490f      	ldr	r1, [pc, #60]	; (80226a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8022662:	4810      	ldr	r0, [pc, #64]	; (80226a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022664:	f004 ffc8 	bl	80275f8 <__aeabi_atexit>
 8022668:	4c0f      	ldr	r4, [pc, #60]	; (80226a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802266a:	7823      	ldrb	r3, [r4, #0]
 802266c:	f3bf 8f5b 	dmb	ish
 8022670:	07db      	lsls	r3, r3, #31
 8022672:	d40b      	bmi.n	802268c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022674:	4620      	mov	r0, r4
 8022676:	f004 ffc6 	bl	8027606 <__cxa_guard_acquire>
 802267a:	b138      	cbz	r0, 802268c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802267c:	4620      	mov	r0, r4
 802267e:	f004 ffce 	bl	802761e <__cxa_guard_release>
 8022682:	4a06      	ldr	r2, [pc, #24]	; (802269c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022684:	4909      	ldr	r1, [pc, #36]	; (80226ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8022686:	480a      	ldr	r0, [pc, #40]	; (80226b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022688:	f004 ffb6 	bl	80275f8 <__aeabi_atexit>
 802268c:	4b05      	ldr	r3, [pc, #20]	; (80226a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802268e:	61ab      	str	r3, [r5, #24]
 8022690:	4b07      	ldr	r3, [pc, #28]	; (80226b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022692:	61eb      	str	r3, [r5, #28]
 8022694:	bd38      	pop	{r3, r4, r5, pc}
 8022696:	bf00      	nop
 8022698:	24026340 	.word	0x24026340
 802269c:	24000000 	.word	0x24000000
 80226a0:	080210a3 	.word	0x080210a3
 80226a4:	24000094 	.word	0x24000094
 80226a8:	24026344 	.word	0x24026344
 80226ac:	080210a1 	.word	0x080210a1
 80226b0:	24000098 	.word	0x24000098

080226b4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80226b4:	b510      	push	{r4, lr}
 80226b6:	4604      	mov	r4, r0
 80226b8:	f7ff ff88 	bl	80225cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80226bc:	4620      	mov	r0, r4
 80226be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80226c2:	f7ff bfbd 	b.w	8022640 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080226c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80226c8:	b538      	push	{r3, r4, r5, lr}
 80226ca:	4c15      	ldr	r4, [pc, #84]	; (8022720 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80226cc:	4605      	mov	r5, r0
 80226ce:	7823      	ldrb	r3, [r4, #0]
 80226d0:	f3bf 8f5b 	dmb	ish
 80226d4:	07da      	lsls	r2, r3, #31
 80226d6:	d40b      	bmi.n	80226f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80226d8:	4620      	mov	r0, r4
 80226da:	f004 ff94 	bl	8027606 <__cxa_guard_acquire>
 80226de:	b138      	cbz	r0, 80226f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80226e0:	4620      	mov	r0, r4
 80226e2:	f004 ff9c 	bl	802761e <__cxa_guard_release>
 80226e6:	4a0f      	ldr	r2, [pc, #60]	; (8022724 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80226e8:	490f      	ldr	r1, [pc, #60]	; (8022728 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80226ea:	4810      	ldr	r0, [pc, #64]	; (802272c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80226ec:	f004 ff84 	bl	80275f8 <__aeabi_atexit>
 80226f0:	4c0f      	ldr	r4, [pc, #60]	; (8022730 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80226f2:	7823      	ldrb	r3, [r4, #0]
 80226f4:	f3bf 8f5b 	dmb	ish
 80226f8:	07db      	lsls	r3, r3, #31
 80226fa:	d40b      	bmi.n	8022714 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80226fc:	4620      	mov	r0, r4
 80226fe:	f004 ff82 	bl	8027606 <__cxa_guard_acquire>
 8022702:	b138      	cbz	r0, 8022714 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022704:	4620      	mov	r0, r4
 8022706:	f004 ff8a 	bl	802761e <__cxa_guard_release>
 802270a:	4a06      	ldr	r2, [pc, #24]	; (8022724 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802270c:	4909      	ldr	r1, [pc, #36]	; (8022734 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802270e:	480a      	ldr	r0, [pc, #40]	; (8022738 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022710:	f004 ff72 	bl	80275f8 <__aeabi_atexit>
 8022714:	4b05      	ldr	r3, [pc, #20]	; (802272c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8022716:	632b      	str	r3, [r5, #48]	; 0x30
 8022718:	4b07      	ldr	r3, [pc, #28]	; (8022738 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802271a:	636b      	str	r3, [r5, #52]	; 0x34
 802271c:	bd38      	pop	{r3, r4, r5, pc}
 802271e:	bf00      	nop
 8022720:	24026348 	.word	0x24026348
 8022724:	24000000 	.word	0x24000000
 8022728:	08021097 	.word	0x08021097
 802272c:	2400009c 	.word	0x2400009c
 8022730:	2402634c 	.word	0x2402634c
 8022734:	08021095 	.word	0x08021095
 8022738:	240000a0 	.word	0x240000a0

0802273c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 802273c:	b538      	push	{r3, r4, r5, lr}
 802273e:	4c15      	ldr	r4, [pc, #84]	; (8022794 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8022740:	4605      	mov	r5, r0
 8022742:	7823      	ldrb	r3, [r4, #0]
 8022744:	f3bf 8f5b 	dmb	ish
 8022748:	07da      	lsls	r2, r3, #31
 802274a:	d40b      	bmi.n	8022764 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 802274c:	4620      	mov	r0, r4
 802274e:	f004 ff5a 	bl	8027606 <__cxa_guard_acquire>
 8022752:	b138      	cbz	r0, 8022764 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022754:	4620      	mov	r0, r4
 8022756:	f004 ff62 	bl	802761e <__cxa_guard_release>
 802275a:	4a0f      	ldr	r2, [pc, #60]	; (8022798 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 802275c:	490f      	ldr	r1, [pc, #60]	; (802279c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 802275e:	4810      	ldr	r0, [pc, #64]	; (80227a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8022760:	f004 ff4a 	bl	80275f8 <__aeabi_atexit>
 8022764:	4c0f      	ldr	r4, [pc, #60]	; (80227a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8022766:	7823      	ldrb	r3, [r4, #0]
 8022768:	f3bf 8f5b 	dmb	ish
 802276c:	07db      	lsls	r3, r3, #31
 802276e:	d40b      	bmi.n	8022788 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8022770:	4620      	mov	r0, r4
 8022772:	f004 ff48 	bl	8027606 <__cxa_guard_acquire>
 8022776:	b138      	cbz	r0, 8022788 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8022778:	4620      	mov	r0, r4
 802277a:	f004 ff50 	bl	802761e <__cxa_guard_release>
 802277e:	4a06      	ldr	r2, [pc, #24]	; (8022798 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022780:	4909      	ldr	r1, [pc, #36]	; (80227a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8022782:	480a      	ldr	r0, [pc, #40]	; (80227ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022784:	f004 ff38 	bl	80275f8 <__aeabi_atexit>
 8022788:	4b05      	ldr	r3, [pc, #20]	; (80227a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802278a:	62ab      	str	r3, [r5, #40]	; 0x28
 802278c:	4b07      	ldr	r3, [pc, #28]	; (80227ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 802278e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8022790:	bd38      	pop	{r3, r4, r5, pc}
 8022792:	bf00      	nop
 8022794:	24026320 	.word	0x24026320
 8022798:	24000000 	.word	0x24000000
 802279c:	0802109b 	.word	0x0802109b
 80227a0:	24000074 	.word	0x24000074
 80227a4:	24026324 	.word	0x24026324
 80227a8:	08021099 	.word	0x08021099
 80227ac:	24000078 	.word	0x24000078

080227b0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80227b0:	b510      	push	{r4, lr}
 80227b2:	4604      	mov	r4, r0
 80227b4:	f7ff ff88 	bl	80226c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80227b8:	4620      	mov	r0, r4
 80227ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80227be:	f7ff bfbd 	b.w	802273c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080227c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80227c4:	b538      	push	{r3, r4, r5, lr}
 80227c6:	4c15      	ldr	r4, [pc, #84]	; (802281c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80227c8:	4605      	mov	r5, r0
 80227ca:	7823      	ldrb	r3, [r4, #0]
 80227cc:	f3bf 8f5b 	dmb	ish
 80227d0:	07da      	lsls	r2, r3, #31
 80227d2:	d40b      	bmi.n	80227ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80227d4:	4620      	mov	r0, r4
 80227d6:	f004 ff16 	bl	8027606 <__cxa_guard_acquire>
 80227da:	b138      	cbz	r0, 80227ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80227dc:	4620      	mov	r0, r4
 80227de:	f004 ff1e 	bl	802761e <__cxa_guard_release>
 80227e2:	4a0f      	ldr	r2, [pc, #60]	; (8022820 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80227e4:	490f      	ldr	r1, [pc, #60]	; (8022824 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80227e6:	4810      	ldr	r0, [pc, #64]	; (8022828 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80227e8:	f004 ff06 	bl	80275f8 <__aeabi_atexit>
 80227ec:	4c0f      	ldr	r4, [pc, #60]	; (802282c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80227ee:	7823      	ldrb	r3, [r4, #0]
 80227f0:	f3bf 8f5b 	dmb	ish
 80227f4:	07db      	lsls	r3, r3, #31
 80227f6:	d40b      	bmi.n	8022810 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80227f8:	4620      	mov	r0, r4
 80227fa:	f004 ff04 	bl	8027606 <__cxa_guard_acquire>
 80227fe:	b138      	cbz	r0, 8022810 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022800:	4620      	mov	r0, r4
 8022802:	f004 ff0c 	bl	802761e <__cxa_guard_release>
 8022806:	4a06      	ldr	r2, [pc, #24]	; (8022820 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022808:	4909      	ldr	r1, [pc, #36]	; (8022830 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802280a:	480a      	ldr	r0, [pc, #40]	; (8022834 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802280c:	f004 fef4 	bl	80275f8 <__aeabi_atexit>
 8022810:	4b05      	ldr	r3, [pc, #20]	; (8022828 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022812:	642b      	str	r3, [r5, #64]	; 0x40
 8022814:	4b07      	ldr	r3, [pc, #28]	; (8022834 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022816:	646b      	str	r3, [r5, #68]	; 0x44
 8022818:	bd38      	pop	{r3, r4, r5, pc}
 802281a:	bf00      	nop
 802281c:	24026350 	.word	0x24026350
 8022820:	24000000 	.word	0x24000000
 8022824:	0802108f 	.word	0x0802108f
 8022828:	240000a4 	.word	0x240000a4
 802282c:	24026354 	.word	0x24026354
 8022830:	0802108d 	.word	0x0802108d
 8022834:	240000a8 	.word	0x240000a8

08022838 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022838:	b538      	push	{r3, r4, r5, lr}
 802283a:	4c15      	ldr	r4, [pc, #84]	; (8022890 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802283c:	4605      	mov	r5, r0
 802283e:	7823      	ldrb	r3, [r4, #0]
 8022840:	f3bf 8f5b 	dmb	ish
 8022844:	07da      	lsls	r2, r3, #31
 8022846:	d40b      	bmi.n	8022860 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022848:	4620      	mov	r0, r4
 802284a:	f004 fedc 	bl	8027606 <__cxa_guard_acquire>
 802284e:	b138      	cbz	r0, 8022860 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022850:	4620      	mov	r0, r4
 8022852:	f004 fee4 	bl	802761e <__cxa_guard_release>
 8022856:	4a0f      	ldr	r2, [pc, #60]	; (8022894 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022858:	490f      	ldr	r1, [pc, #60]	; (8022898 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802285a:	4810      	ldr	r0, [pc, #64]	; (802289c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802285c:	f004 fecc 	bl	80275f8 <__aeabi_atexit>
 8022860:	4c0f      	ldr	r4, [pc, #60]	; (80228a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8022862:	7823      	ldrb	r3, [r4, #0]
 8022864:	f3bf 8f5b 	dmb	ish
 8022868:	07db      	lsls	r3, r3, #31
 802286a:	d40b      	bmi.n	8022884 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802286c:	4620      	mov	r0, r4
 802286e:	f004 feca 	bl	8027606 <__cxa_guard_acquire>
 8022872:	b138      	cbz	r0, 8022884 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022874:	4620      	mov	r0, r4
 8022876:	f004 fed2 	bl	802761e <__cxa_guard_release>
 802287a:	4a06      	ldr	r2, [pc, #24]	; (8022894 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802287c:	4909      	ldr	r1, [pc, #36]	; (80228a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802287e:	480a      	ldr	r0, [pc, #40]	; (80228a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022880:	f004 feba 	bl	80275f8 <__aeabi_atexit>
 8022884:	4b05      	ldr	r3, [pc, #20]	; (802289c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022886:	63ab      	str	r3, [r5, #56]	; 0x38
 8022888:	4b07      	ldr	r3, [pc, #28]	; (80228a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802288a:	63eb      	str	r3, [r5, #60]	; 0x3c
 802288c:	bd38      	pop	{r3, r4, r5, pc}
 802288e:	bf00      	nop
 8022890:	24026330 	.word	0x24026330
 8022894:	24000000 	.word	0x24000000
 8022898:	08021093 	.word	0x08021093
 802289c:	24000084 	.word	0x24000084
 80228a0:	24026334 	.word	0x24026334
 80228a4:	08021091 	.word	0x08021091
 80228a8:	24000088 	.word	0x24000088

080228ac <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80228ac:	b510      	push	{r4, lr}
 80228ae:	4604      	mov	r4, r0
 80228b0:	f7ff ff88 	bl	80227c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80228b4:	4620      	mov	r0, r4
 80228b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80228ba:	f7ff bfbd 	b.w	8022838 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080228c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80228c0:	b538      	push	{r3, r4, r5, lr}
 80228c2:	4c15      	ldr	r4, [pc, #84]	; (8022918 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80228c4:	4605      	mov	r5, r0
 80228c6:	7823      	ldrb	r3, [r4, #0]
 80228c8:	f3bf 8f5b 	dmb	ish
 80228cc:	07da      	lsls	r2, r3, #31
 80228ce:	d40b      	bmi.n	80228e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80228d0:	4620      	mov	r0, r4
 80228d2:	f004 fe98 	bl	8027606 <__cxa_guard_acquire>
 80228d6:	b138      	cbz	r0, 80228e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80228d8:	4620      	mov	r0, r4
 80228da:	f004 fea0 	bl	802761e <__cxa_guard_release>
 80228de:	4a0f      	ldr	r2, [pc, #60]	; (802291c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80228e0:	490f      	ldr	r1, [pc, #60]	; (8022920 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80228e2:	4810      	ldr	r0, [pc, #64]	; (8022924 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80228e4:	f004 fe88 	bl	80275f8 <__aeabi_atexit>
 80228e8:	4c0f      	ldr	r4, [pc, #60]	; (8022928 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80228ea:	7823      	ldrb	r3, [r4, #0]
 80228ec:	f3bf 8f5b 	dmb	ish
 80228f0:	07db      	lsls	r3, r3, #31
 80228f2:	d40b      	bmi.n	802290c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80228f4:	4620      	mov	r0, r4
 80228f6:	f004 fe86 	bl	8027606 <__cxa_guard_acquire>
 80228fa:	b138      	cbz	r0, 802290c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80228fc:	4620      	mov	r0, r4
 80228fe:	f004 fe8e 	bl	802761e <__cxa_guard_release>
 8022902:	4a06      	ldr	r2, [pc, #24]	; (802291c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022904:	4909      	ldr	r1, [pc, #36]	; (802292c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022906:	480a      	ldr	r0, [pc, #40]	; (8022930 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022908:	f004 fe76 	bl	80275f8 <__aeabi_atexit>
 802290c:	4b05      	ldr	r3, [pc, #20]	; (8022924 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802290e:	652b      	str	r3, [r5, #80]	; 0x50
 8022910:	4b07      	ldr	r3, [pc, #28]	; (8022930 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022912:	656b      	str	r3, [r5, #84]	; 0x54
 8022914:	bd38      	pop	{r3, r4, r5, pc}
 8022916:	bf00      	nop
 8022918:	24026328 	.word	0x24026328
 802291c:	24000000 	.word	0x24000000
 8022920:	08021087 	.word	0x08021087
 8022924:	2400007c 	.word	0x2400007c
 8022928:	2402632c 	.word	0x2402632c
 802292c:	08021085 	.word	0x08021085
 8022930:	24000080 	.word	0x24000080

08022934 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022934:	b538      	push	{r3, r4, r5, lr}
 8022936:	4c15      	ldr	r4, [pc, #84]	; (802298c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022938:	4605      	mov	r5, r0
 802293a:	7823      	ldrb	r3, [r4, #0]
 802293c:	f3bf 8f5b 	dmb	ish
 8022940:	07da      	lsls	r2, r3, #31
 8022942:	d40b      	bmi.n	802295c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022944:	4620      	mov	r0, r4
 8022946:	f004 fe5e 	bl	8027606 <__cxa_guard_acquire>
 802294a:	b138      	cbz	r0, 802295c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802294c:	4620      	mov	r0, r4
 802294e:	f004 fe66 	bl	802761e <__cxa_guard_release>
 8022952:	4a0f      	ldr	r2, [pc, #60]	; (8022990 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022954:	490f      	ldr	r1, [pc, #60]	; (8022994 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022956:	4810      	ldr	r0, [pc, #64]	; (8022998 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022958:	f004 fe4e 	bl	80275f8 <__aeabi_atexit>
 802295c:	4c0f      	ldr	r4, [pc, #60]	; (802299c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802295e:	7823      	ldrb	r3, [r4, #0]
 8022960:	f3bf 8f5b 	dmb	ish
 8022964:	07db      	lsls	r3, r3, #31
 8022966:	d40b      	bmi.n	8022980 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022968:	4620      	mov	r0, r4
 802296a:	f004 fe4c 	bl	8027606 <__cxa_guard_acquire>
 802296e:	b138      	cbz	r0, 8022980 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022970:	4620      	mov	r0, r4
 8022972:	f004 fe54 	bl	802761e <__cxa_guard_release>
 8022976:	4a06      	ldr	r2, [pc, #24]	; (8022990 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022978:	4909      	ldr	r1, [pc, #36]	; (80229a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802297a:	480a      	ldr	r0, [pc, #40]	; (80229a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802297c:	f004 fe3c 	bl	80275f8 <__aeabi_atexit>
 8022980:	4b05      	ldr	r3, [pc, #20]	; (8022998 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022982:	64ab      	str	r3, [r5, #72]	; 0x48
 8022984:	4b07      	ldr	r3, [pc, #28]	; (80229a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022986:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022988:	bd38      	pop	{r3, r4, r5, pc}
 802298a:	bf00      	nop
 802298c:	24026318 	.word	0x24026318
 8022990:	24000000 	.word	0x24000000
 8022994:	0802108b 	.word	0x0802108b
 8022998:	2400006c 	.word	0x2400006c
 802299c:	2402631c 	.word	0x2402631c
 80229a0:	08021089 	.word	0x08021089
 80229a4:	24000070 	.word	0x24000070

080229a8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80229a8:	b510      	push	{r4, lr}
 80229aa:	4604      	mov	r4, r0
 80229ac:	f7ff ff88 	bl	80228c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80229b0:	4620      	mov	r0, r4
 80229b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229b6:	f7ff bfbd 	b.w	8022934 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080229ba <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80229ba:	b510      	push	{r4, lr}
 80229bc:	4604      	mov	r4, r0
 80229be:	f7ff fff3 	bl	80229a8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80229c2:	4620      	mov	r0, r4
 80229c4:	f7ff ff72 	bl	80228ac <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80229c8:	4620      	mov	r0, r4
 80229ca:	f7ff fe73 	bl	80226b4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80229ce:	4620      	mov	r0, r4
 80229d0:	f7ff fdf2 	bl	80225b8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80229d4:	4620      	mov	r0, r4
 80229d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229da:	f7ff bee9 	b.w	80227b0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

080229de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80229de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229e2:	b087      	sub	sp, #28
 80229e4:	788d      	ldrb	r5, [r1, #2]
 80229e6:	f891 9000 	ldrb.w	r9, [r1]
 80229ea:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80229ee:	9501      	str	r5, [sp, #4]
 80229f0:	784d      	ldrb	r5, [r1, #1]
 80229f2:	9203      	str	r2, [sp, #12]
 80229f4:	9502      	str	r5, [sp, #8]
 80229f6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80229fa:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80229fe:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8022a02:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8022a06:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8022a0a:	fb06 0708 	mla	r7, r6, r8, r0
 8022a0e:	2e00      	cmp	r6, #0
 8022a10:	eb02 0a07 	add.w	sl, r2, r7
 8022a14:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8022a18:	9d01      	ldr	r5, [sp, #4]
 8022a1a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8022a1e:	ea45 0509 	orr.w	r5, r5, r9
 8022a22:	9505      	str	r5, [sp, #20]
 8022a24:	f2c0 80b2 	blt.w	8022b8c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8022a28:	45b3      	cmp	fp, r6
 8022a2a:	f340 80af 	ble.w	8022b8c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8022a2e:	2800      	cmp	r0, #0
 8022a30:	f2c0 80aa 	blt.w	8022b88 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8022a34:	4580      	cmp	r8, r0
 8022a36:	f340 80a7 	ble.w	8022b88 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8022a3a:	9a03      	ldr	r2, [sp, #12]
 8022a3c:	5dd7      	ldrb	r7, [r2, r7]
 8022a3e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022a42:	441f      	add	r7, r3
 8022a44:	1c42      	adds	r2, r0, #1
 8022a46:	f100 80a4 	bmi.w	8022b92 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022a4a:	4590      	cmp	r8, r2
 8022a4c:	f340 80a1 	ble.w	8022b92 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022a50:	2c00      	cmp	r4, #0
 8022a52:	f000 809e 	beq.w	8022b92 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022a56:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8022a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022a5e:	441d      	add	r5, r3
 8022a60:	3601      	adds	r6, #1
 8022a62:	f100 809a 	bmi.w	8022b9a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022a66:	45b3      	cmp	fp, r6
 8022a68:	f340 8097 	ble.w	8022b9a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022a6c:	f1bc 0f00 	cmp.w	ip, #0
 8022a70:	f000 8093 	beq.w	8022b9a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022a74:	2800      	cmp	r0, #0
 8022a76:	f2c0 808e 	blt.w	8022b96 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8022a7a:	4580      	cmp	r8, r0
 8022a7c:	f340 808b 	ble.w	8022b96 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8022a80:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8022a84:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022a88:	441e      	add	r6, r3
 8022a8a:	3001      	adds	r0, #1
 8022a8c:	f100 8088 	bmi.w	8022ba0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8022a90:	4580      	cmp	r8, r0
 8022a92:	f340 8085 	ble.w	8022ba0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8022a96:	2c00      	cmp	r4, #0
 8022a98:	f000 8082 	beq.w	8022ba0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8022a9c:	44d0      	add	r8, sl
 8022a9e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022aa2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022aa6:	4413      	add	r3, r2
 8022aa8:	b2a4      	uxth	r4, r4
 8022aaa:	f895 a000 	ldrb.w	sl, [r5]
 8022aae:	fa1f fc8c 	uxth.w	ip, ip
 8022ab2:	fb04 fb0c 	mul.w	fp, r4, ip
 8022ab6:	0124      	lsls	r4, r4, #4
 8022ab8:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8022abc:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8022ac0:	eba4 040b 	sub.w	r4, r4, fp
 8022ac4:	fa1f f08c 	uxth.w	r0, ip
 8022ac8:	b2a2      	uxth	r2, r4
 8022aca:	783c      	ldrb	r4, [r7, #0]
 8022acc:	eba8 0800 	sub.w	r8, r8, r0
 8022ad0:	fa1f fc8e 	uxth.w	ip, lr
 8022ad4:	fb02 fa0a 	mul.w	sl, r2, sl
 8022ad8:	ea6f 0e0e 	mvn.w	lr, lr
 8022adc:	fa1f f888 	uxth.w	r8, r8
 8022ae0:	fa5f fe8e 	uxtb.w	lr, lr
 8022ae4:	fb08 aa04 	mla	sl, r8, r4, sl
 8022ae8:	7834      	ldrb	r4, [r6, #0]
 8022aea:	fb19 f90e 	smulbb	r9, r9, lr
 8022aee:	fb00 aa04 	mla	sl, r0, r4, sl
 8022af2:	781c      	ldrb	r4, [r3, #0]
 8022af4:	fb0b a404 	mla	r4, fp, r4, sl
 8022af8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022afc:	fb04 990c 	mla	r9, r4, ip, r9
 8022b00:	fa1f f989 	uxth.w	r9, r9
 8022b04:	f109 0401 	add.w	r4, r9, #1
 8022b08:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022b0c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b10:	f881 9000 	strb.w	r9, [r1]
 8022b14:	f895 9001 	ldrb.w	r9, [r5, #1]
 8022b18:	787c      	ldrb	r4, [r7, #1]
 8022b1a:	fb02 f909 	mul.w	r9, r2, r9
 8022b1e:	fb08 9904 	mla	r9, r8, r4, r9
 8022b22:	7874      	ldrb	r4, [r6, #1]
 8022b24:	fb00 9904 	mla	r9, r0, r4, r9
 8022b28:	785c      	ldrb	r4, [r3, #1]
 8022b2a:	fb0b 9404 	mla	r4, fp, r4, r9
 8022b2e:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8022b32:	9c02      	ldr	r4, [sp, #8]
 8022b34:	fb14 f90e 	smulbb	r9, r4, lr
 8022b38:	fb0a 940c 	mla	r4, sl, ip, r9
 8022b3c:	b2a4      	uxth	r4, r4
 8022b3e:	f104 0901 	add.w	r9, r4, #1
 8022b42:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8022b46:	1224      	asrs	r4, r4, #8
 8022b48:	704c      	strb	r4, [r1, #1]
 8022b4a:	78ad      	ldrb	r5, [r5, #2]
 8022b4c:	78bc      	ldrb	r4, [r7, #2]
 8022b4e:	436a      	muls	r2, r5
 8022b50:	789b      	ldrb	r3, [r3, #2]
 8022b52:	fb08 2204 	mla	r2, r8, r4, r2
 8022b56:	78b4      	ldrb	r4, [r6, #2]
 8022b58:	fb00 2004 	mla	r0, r0, r4, r2
 8022b5c:	fb0b 0b03 	mla	fp, fp, r3, r0
 8022b60:	9b01      	ldr	r3, [sp, #4]
 8022b62:	fb13 fe0e 	smulbb	lr, r3, lr
 8022b66:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8022b6a:	fb0b ec0c 	mla	ip, fp, ip, lr
 8022b6e:	fa1f fc8c 	uxth.w	ip, ip
 8022b72:	f10c 0e01 	add.w	lr, ip, #1
 8022b76:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8022b7a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022b7e:	f881 c002 	strb.w	ip, [r1, #2]
 8022b82:	b007      	add	sp, #28
 8022b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b88:	af05      	add	r7, sp, #20
 8022b8a:	e75b      	b.n	8022a44 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8022b8c:	ad05      	add	r5, sp, #20
 8022b8e:	462f      	mov	r7, r5
 8022b90:	e766      	b.n	8022a60 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8022b92:	ad05      	add	r5, sp, #20
 8022b94:	e764      	b.n	8022a60 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8022b96:	ae05      	add	r6, sp, #20
 8022b98:	e777      	b.n	8022a8a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8022b9a:	ab05      	add	r3, sp, #20
 8022b9c:	461e      	mov	r6, r3
 8022b9e:	e783      	b.n	8022aa8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8022ba0:	ab05      	add	r3, sp, #20
 8022ba2:	e781      	b.n	8022aa8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08022ba4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ba8:	b093      	sub	sp, #76	; 0x4c
 8022baa:	9210      	str	r2, [sp, #64]	; 0x40
 8022bac:	9309      	str	r3, [sp, #36]	; 0x24
 8022bae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022bb0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8022bb4:	9011      	str	r0, [sp, #68]	; 0x44
 8022bb6:	930e      	str	r3, [sp, #56]	; 0x38
 8022bb8:	6850      	ldr	r0, [r2, #4]
 8022bba:	910d      	str	r1, [sp, #52]	; 0x34
 8022bbc:	6812      	ldr	r2, [r2, #0]
 8022bbe:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022bc2:	fb00 1303 	mla	r3, r0, r3, r1
 8022bc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022bca:	18d3      	adds	r3, r2, r3
 8022bcc:	930a      	str	r3, [sp, #40]	; 0x28
 8022bce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022bd0:	681b      	ldr	r3, [r3, #0]
 8022bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8022bd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022bd6:	685c      	ldr	r4, [r3, #4]
 8022bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022bda:	3404      	adds	r4, #4
 8022bdc:	43db      	mvns	r3, r3
 8022bde:	b2db      	uxtb	r3, r3
 8022be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8022be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022be4:	2b00      	cmp	r3, #0
 8022be6:	dc03      	bgt.n	8022bf0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022bea:	2b00      	cmp	r3, #0
 8022bec:	f340 8250 	ble.w	8023090 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8022bf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022bf2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022bf6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022bfa:	1e48      	subs	r0, r1, #1
 8022bfc:	1e55      	subs	r5, r2, #1
 8022bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c00:	2b00      	cmp	r3, #0
 8022c02:	f340 80ee 	ble.w	8022de2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8022c06:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8022c08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022c0a:	1436      	asrs	r6, r6, #16
 8022c0c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022c10:	d406      	bmi.n	8022c20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022c12:	4286      	cmp	r6, r0
 8022c14:	da04      	bge.n	8022c20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	db02      	blt.n	8022c20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022c1a:	42ab      	cmp	r3, r5
 8022c1c:	f2c0 80e2 	blt.w	8022de4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022c20:	3601      	adds	r6, #1
 8022c22:	f100 80cf 	bmi.w	8022dc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022c26:	42b1      	cmp	r1, r6
 8022c28:	f2c0 80cc 	blt.w	8022dc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022c2c:	3301      	adds	r3, #1
 8022c2e:	f100 80c9 	bmi.w	8022dc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022c32:	429a      	cmp	r2, r3
 8022c34:	f2c0 80c6 	blt.w	8022dc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022c38:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8022c3c:	f1bb 0f00 	cmp.w	fp, #0
 8022c40:	f340 80f1 	ble.w	8022e26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8022c44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022c46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022c48:	9824      	ldr	r0, [sp, #144]	; 0x90
 8022c4a:	141d      	asrs	r5, r3, #16
 8022c4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022c4e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022c52:	68c7      	ldr	r7, [r0, #12]
 8022c54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022c56:	1418      	asrs	r0, r3, #16
 8022c58:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8022c5c:	6892      	ldr	r2, [r2, #8]
 8022c5e:	f100 8137 	bmi.w	8022ed0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022c62:	f102 3cff 	add.w	ip, r2, #4294967295
 8022c66:	4560      	cmp	r0, ip
 8022c68:	f280 8132 	bge.w	8022ed0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022c6c:	2d00      	cmp	r5, #0
 8022c6e:	f2c0 812f 	blt.w	8022ed0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022c72:	f107 3cff 	add.w	ip, r7, #4294967295
 8022c76:	4565      	cmp	r5, ip
 8022c78:	f280 812a 	bge.w	8022ed0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022c7c:	b212      	sxth	r2, r2
 8022c7e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022c80:	fb05 0002 	mla	r0, r5, r2, r0
 8022c84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022c86:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022c8a:	4405      	add	r5, r0
 8022c8c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022c90:	eb04 0e0c 	add.w	lr, r4, ip
 8022c94:	f1b8 0f00 	cmp.w	r8, #0
 8022c98:	f000 810c 	beq.w	8022eb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8022c9c:	786f      	ldrb	r7, [r5, #1]
 8022c9e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022ca2:	4427      	add	r7, r4
 8022ca4:	2900      	cmp	r1, #0
 8022ca6:	f000 810d 	beq.w	8022ec4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8022caa:	18a8      	adds	r0, r5, r2
 8022cac:	5caa      	ldrb	r2, [r5, r2]
 8022cae:	7840      	ldrb	r0, [r0, #1]
 8022cb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022cb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022cb8:	4422      	add	r2, r4
 8022cba:	4420      	add	r0, r4
 8022cbc:	fa1f f388 	uxth.w	r3, r8
 8022cc0:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8022cc4:	b289      	uxth	r1, r1
 8022cc6:	f897 c000 	ldrb.w	ip, [r7]
 8022cca:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8022cce:	fb03 f901 	mul.w	r9, r3, r1
 8022cd2:	011b      	lsls	r3, r3, #4
 8022cd4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022cd8:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8022cdc:	eba3 0309 	sub.w	r3, r3, r9
 8022ce0:	b289      	uxth	r1, r1
 8022ce2:	b29b      	uxth	r3, r3
 8022ce4:	eba8 0801 	sub.w	r8, r8, r1
 8022ce8:	fb03 fc0c 	mul.w	ip, r3, ip
 8022cec:	fa1f f888 	uxth.w	r8, r8
 8022cf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8022cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022cf4:	fb08 cc0a 	mla	ip, r8, sl, ip
 8022cf8:	f892 a000 	ldrb.w	sl, [r2]
 8022cfc:	fb01 cc0a 	mla	ip, r1, sl, ip
 8022d00:	f890 a000 	ldrb.w	sl, [r0]
 8022d04:	fb09 cc0a 	mla	ip, r9, sl, ip
 8022d08:	f896 a000 	ldrb.w	sl, [r6]
 8022d0c:	fb1a fa03 	smulbb	sl, sl, r3
 8022d10:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d16:	fb0c ac05 	mla	ip, ip, r5, sl
 8022d1a:	fa1f fc8c 	uxth.w	ip, ip
 8022d1e:	f10c 0a01 	add.w	sl, ip, #1
 8022d22:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8022d26:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022d2a:	f886 a000 	strb.w	sl, [r6]
 8022d2e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8022d32:	f89e a001 	ldrb.w	sl, [lr, #1]
 8022d36:	fb03 fc0c 	mul.w	ip, r3, ip
 8022d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022d3c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8022d40:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022d44:	fb01 cc0a 	mla	ip, r1, sl, ip
 8022d48:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022d4c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8022d50:	f896 a001 	ldrb.w	sl, [r6, #1]
 8022d54:	fb1a fa03 	smulbb	sl, sl, r3
 8022d58:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d5e:	fb0c ac05 	mla	ip, ip, r5, sl
 8022d62:	fa1f fc8c 	uxth.w	ip, ip
 8022d66:	f10c 0a01 	add.w	sl, ip, #1
 8022d6a:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8022d6e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022d72:	f886 c001 	strb.w	ip, [r6, #1]
 8022d76:	78bf      	ldrb	r7, [r7, #2]
 8022d78:	f89e c002 	ldrb.w	ip, [lr, #2]
 8022d7c:	437b      	muls	r3, r7
 8022d7e:	fb08 330c 	mla	r3, r8, ip, r3
 8022d82:	f892 c002 	ldrb.w	ip, [r2, #2]
 8022d86:	7882      	ldrb	r2, [r0, #2]
 8022d88:	fb01 310c 	mla	r1, r1, ip, r3
 8022d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022d8e:	fb09 1902 	mla	r9, r9, r2, r1
 8022d92:	78b1      	ldrb	r1, [r6, #2]
 8022d94:	fb11 f103 	smulbb	r1, r1, r3
 8022d98:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022d9c:	fb09 1505 	mla	r5, r9, r5, r1
 8022da0:	b2ad      	uxth	r5, r5
 8022da2:	1c6b      	adds	r3, r5, #1
 8022da4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022da8:	122d      	asrs	r5, r5, #8
 8022daa:	70b5      	strb	r5, [r6, #2]
 8022dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022dae:	3603      	adds	r6, #3
 8022db0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022db2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022db6:	4413      	add	r3, r2
 8022db8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022dba:	931d      	str	r3, [sp, #116]	; 0x74
 8022dbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022dbe:	4413      	add	r3, r2
 8022dc0:	931e      	str	r3, [sp, #120]	; 0x78
 8022dc2:	e73b      	b.n	8022c3c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022dc6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8022dc8:	4433      	add	r3, r6
 8022dca:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8022dcc:	931d      	str	r3, [sp, #116]	; 0x74
 8022dce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022dd0:	4433      	add	r3, r6
 8022dd2:	931e      	str	r3, [sp, #120]	; 0x78
 8022dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dd6:	3b01      	subs	r3, #1
 8022dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8022dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ddc:	3303      	adds	r3, #3
 8022dde:	930a      	str	r3, [sp, #40]	; 0x28
 8022de0:	e70d      	b.n	8022bfe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022de2:	d028      	beq.n	8022e36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8022de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022de6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022de8:	3b01      	subs	r3, #1
 8022dea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022dec:	fb00 5003 	mla	r0, r0, r3, r5
 8022df0:	1400      	asrs	r0, r0, #16
 8022df2:	f53f af21 	bmi.w	8022c38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022df6:	3901      	subs	r1, #1
 8022df8:	4288      	cmp	r0, r1
 8022dfa:	f6bf af1d 	bge.w	8022c38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022dfe:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022e00:	981e      	ldr	r0, [sp, #120]	; 0x78
 8022e02:	fb01 0303 	mla	r3, r1, r3, r0
 8022e06:	141b      	asrs	r3, r3, #16
 8022e08:	f53f af16 	bmi.w	8022c38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022e0c:	3a01      	subs	r2, #1
 8022e0e:	4293      	cmp	r3, r2
 8022e10:	f6bf af12 	bge.w	8022c38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e16:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8022e1a:	1cdf      	adds	r7, r3, #3
 8022e1c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8022e20:	f1b9 0f00 	cmp.w	r9, #0
 8022e24:	dc73      	bgt.n	8022f0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8022e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022e2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e32:	441a      	add	r2, r3
 8022e34:	920a      	str	r2, [sp, #40]	; 0x28
 8022e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e38:	2b00      	cmp	r3, #0
 8022e3a:	f340 8129 	ble.w	8023090 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8022e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022e42:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e44:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e4c:	eef0 6a62 	vmov.f32	s13, s5
 8022e50:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e54:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022e58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e5c:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8022e60:	eef0 6a43 	vmov.f32	s13, s6
 8022e64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e68:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8022e6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022e70:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022e74:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022e78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022e7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022e80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022e84:	ee12 2a90 	vmov	r2, s5
 8022e88:	eef0 2a47 	vmov.f32	s5, s14
 8022e8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e90:	ee13 2a10 	vmov	r2, s6
 8022e94:	931f      	str	r3, [sp, #124]	; 0x7c
 8022e96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e98:	eeb0 3a67 	vmov.f32	s6, s15
 8022e9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ea0:	9320      	str	r3, [sp, #128]	; 0x80
 8022ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022ea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022ea6:	3b01      	subs	r3, #1
 8022ea8:	930d      	str	r3, [sp, #52]	; 0x34
 8022eaa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022eac:	bf08      	it	eq
 8022eae:	4613      	moveq	r3, r2
 8022eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8022eb2:	e696      	b.n	8022be2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022eb4:	b149      	cbz	r1, 8022eca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022eb6:	5caa      	ldrb	r2, [r5, r2]
 8022eb8:	4670      	mov	r0, lr
 8022eba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ebe:	4422      	add	r2, r4
 8022ec0:	4677      	mov	r7, lr
 8022ec2:	e6fb      	b.n	8022cbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8022ec4:	4670      	mov	r0, lr
 8022ec6:	4672      	mov	r2, lr
 8022ec8:	e6f8      	b.n	8022cbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8022eca:	4670      	mov	r0, lr
 8022ecc:	4672      	mov	r2, lr
 8022ece:	e7f7      	b.n	8022ec0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8022ed0:	f110 0c01 	adds.w	ip, r0, #1
 8022ed4:	f53f af6a 	bmi.w	8022dac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022ed8:	4562      	cmp	r2, ip
 8022eda:	f6ff af67 	blt.w	8022dac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022ede:	f115 0c01 	adds.w	ip, r5, #1
 8022ee2:	f53f af63 	bmi.w	8022dac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022ee6:	4567      	cmp	r7, ip
 8022ee8:	f6ff af60 	blt.w	8022dac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022eee:	b23f      	sxth	r7, r7
 8022ef0:	b212      	sxth	r2, r2
 8022ef2:	9002      	str	r0, [sp, #8]
 8022ef4:	9701      	str	r7, [sp, #4]
 8022ef6:	9200      	str	r2, [sp, #0]
 8022ef8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022efa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022efc:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8022f00:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8022f04:	4623      	mov	r3, r4
 8022f06:	4631      	mov	r1, r6
 8022f08:	f7ff fd69 	bl	80229de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8022f0c:	e74e      	b.n	8022dac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022f0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022f10:	981e      	ldr	r0, [sp, #120]	; 0x78
 8022f12:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022f16:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022f18:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022f1a:	1400      	asrs	r0, r0, #16
 8022f1c:	142d      	asrs	r5, r5, #16
 8022f1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022f20:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022f24:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022f28:	fb02 5000 	mla	r0, r2, r0, r5
 8022f2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022f2e:	f815 e000 	ldrb.w	lr, [r5, r0]
 8022f32:	eb05 0c00 	add.w	ip, r5, r0
 8022f36:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022f3a:	eb04 060e 	add.w	r6, r4, lr
 8022f3e:	2b00      	cmp	r3, #0
 8022f40:	f000 8097 	beq.w	8023072 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8022f44:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022f4c:	4425      	add	r5, r4
 8022f4e:	2900      	cmp	r1, #0
 8022f50:	f000 8098 	beq.w	8023084 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8022f54:	eb0c 0002 	add.w	r0, ip, r2
 8022f58:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022f5c:	7840      	ldrb	r0, [r0, #1]
 8022f5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022f62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022f66:	4422      	add	r2, r4
 8022f68:	4420      	add	r0, r4
 8022f6a:	b29b      	uxth	r3, r3
 8022f6c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8022f70:	b289      	uxth	r1, r1
 8022f72:	f895 e000 	ldrb.w	lr, [r5]
 8022f76:	3703      	adds	r7, #3
 8022f78:	f109 39ff 	add.w	r9, r9, #4294967295
 8022f7c:	fb03 f801 	mul.w	r8, r3, r1
 8022f80:	011b      	lsls	r3, r3, #4
 8022f82:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8022f86:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8022f8a:	eba3 0308 	sub.w	r3, r3, r8
 8022f8e:	b289      	uxth	r1, r1
 8022f90:	b29b      	uxth	r3, r3
 8022f92:	ebac 0c01 	sub.w	ip, ip, r1
 8022f96:	fb03 fe0e 	mul.w	lr, r3, lr
 8022f9a:	fa1f fc8c 	uxth.w	ip, ip
 8022f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022fa2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022fa6:	f892 b000 	ldrb.w	fp, [r2]
 8022faa:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022fae:	f890 b000 	ldrb.w	fp, [r0]
 8022fb2:	fb08 ee0b 	mla	lr, r8, fp, lr
 8022fb6:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8022fba:	fb1b fb03 	smulbb	fp, fp, r3
 8022fbe:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8022fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022fc4:	fb0e be0a 	mla	lr, lr, sl, fp
 8022fc8:	fa1f fe8e 	uxth.w	lr, lr
 8022fcc:	f10e 0b01 	add.w	fp, lr, #1
 8022fd0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8022fd4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022fd8:	f807 ec06 	strb.w	lr, [r7, #-6]
 8022fdc:	f895 e001 	ldrb.w	lr, [r5, #1]
 8022fe0:	f896 b001 	ldrb.w	fp, [r6, #1]
 8022fe4:	fb03 fe0e 	mul.w	lr, r3, lr
 8022fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022fea:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022fee:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022ff2:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022ff6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022ffa:	fb08 ee0b 	mla	lr, r8, fp, lr
 8022ffe:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8023002:	fb1b fb03 	smulbb	fp, fp, r3
 8023006:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802300a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802300c:	fb0e be0a 	mla	lr, lr, sl, fp
 8023010:	fa1f fe8e 	uxth.w	lr, lr
 8023014:	f10e 0b01 	add.w	fp, lr, #1
 8023018:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802301c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023020:	f807 ec05 	strb.w	lr, [r7, #-5]
 8023024:	78ad      	ldrb	r5, [r5, #2]
 8023026:	78b6      	ldrb	r6, [r6, #2]
 8023028:	436b      	muls	r3, r5
 802302a:	7895      	ldrb	r5, [r2, #2]
 802302c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802302e:	fb0c 3306 	mla	r3, ip, r6, r3
 8023032:	fb01 3305 	mla	r3, r1, r5, r3
 8023036:	7885      	ldrb	r5, [r0, #2]
 8023038:	fb08 3805 	mla	r8, r8, r5, r3
 802303c:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8023040:	fb13 f302 	smulbb	r3, r3, r2
 8023044:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8023048:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802304a:	fb08 380a 	mla	r8, r8, sl, r3
 802304e:	fa1f f888 	uxth.w	r8, r8
 8023052:	f108 0301 	add.w	r3, r8, #1
 8023056:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 802305a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802305c:	4413      	add	r3, r2
 802305e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023060:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023064:	931d      	str	r3, [sp, #116]	; 0x74
 8023066:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023068:	f807 8c04 	strb.w	r8, [r7, #-4]
 802306c:	4413      	add	r3, r2
 802306e:	931e      	str	r3, [sp, #120]	; 0x78
 8023070:	e6d6      	b.n	8022e20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023072:	b151      	cbz	r1, 802308a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8023074:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023078:	4630      	mov	r0, r6
 802307a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802307e:	4422      	add	r2, r4
 8023080:	4635      	mov	r5, r6
 8023082:	e772      	b.n	8022f6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023084:	4630      	mov	r0, r6
 8023086:	4632      	mov	r2, r6
 8023088:	e76f      	b.n	8022f6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802308a:	4630      	mov	r0, r6
 802308c:	4632      	mov	r2, r6
 802308e:	e7f7      	b.n	8023080 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023090:	b013      	add	sp, #76	; 0x4c
 8023092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023096 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8023096:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802309a:	784c      	ldrb	r4, [r1, #1]
 802309c:	f891 a002 	ldrb.w	sl, [r1, #2]
 80230a0:	0224      	lsls	r4, r4, #8
 80230a2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80230a6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80230aa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80230ae:	f891 a000 	ldrb.w	sl, [r1]
 80230b2:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80230b6:	ea44 040a 	orr.w	r4, r4, sl
 80230ba:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80230be:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 80230c2:	9401      	str	r4, [sp, #4]
 80230c4:	fb05 c70e 	mla	r7, r5, lr, ip
 80230c8:	2d00      	cmp	r5, #0
 80230ca:	eb02 0807 	add.w	r8, r2, r7
 80230ce:	db72      	blt.n	80231b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80230d0:	45a9      	cmp	r9, r5
 80230d2:	dd70      	ble.n	80231b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80230d4:	f1bc 0f00 	cmp.w	ip, #0
 80230d8:	db6b      	blt.n	80231b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80230da:	45e6      	cmp	lr, ip
 80230dc:	dd69      	ble.n	80231b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80230de:	5dd7      	ldrb	r7, [r2, r7]
 80230e0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80230e4:	441f      	add	r7, r3
 80230e6:	f11c 0201 	adds.w	r2, ip, #1
 80230ea:	d467      	bmi.n	80231bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80230ec:	4596      	cmp	lr, r2
 80230ee:	dd65      	ble.n	80231bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80230f0:	2800      	cmp	r0, #0
 80230f2:	d063      	beq.n	80231bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80230f4:	f898 4001 	ldrb.w	r4, [r8, #1]
 80230f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80230fc:	441c      	add	r4, r3
 80230fe:	3501      	adds	r5, #1
 8023100:	d460      	bmi.n	80231c4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023102:	45a9      	cmp	r9, r5
 8023104:	dd5e      	ble.n	80231c4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023106:	2e00      	cmp	r6, #0
 8023108:	d05c      	beq.n	80231c4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 802310a:	f1bc 0f00 	cmp.w	ip, #0
 802310e:	db57      	blt.n	80231c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8023110:	45e6      	cmp	lr, ip
 8023112:	dd55      	ble.n	80231c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8023114:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802311c:	441d      	add	r5, r3
 802311e:	f11c 0201 	adds.w	r2, ip, #1
 8023122:	d452      	bmi.n	80231ca <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023124:	4596      	cmp	lr, r2
 8023126:	dd50      	ble.n	80231ca <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023128:	2800      	cmp	r0, #0
 802312a:	d04e      	beq.n	80231ca <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802312c:	44c6      	add	lr, r8
 802312e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023132:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023136:	4413      	add	r3, r2
 8023138:	b280      	uxth	r0, r0
 802313a:	f897 8000 	ldrb.w	r8, [r7]
 802313e:	b2b2      	uxth	r2, r6
 8023140:	fb00 f602 	mul.w	r6, r0, r2
 8023144:	0100      	lsls	r0, r0, #4
 8023146:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802314a:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 802314e:	1b80      	subs	r0, r0, r6
 8023150:	fa1f fc82 	uxth.w	ip, r2
 8023154:	b282      	uxth	r2, r0
 8023156:	7820      	ldrb	r0, [r4, #0]
 8023158:	ebae 0e0c 	sub.w	lr, lr, ip
 802315c:	4350      	muls	r0, r2
 802315e:	fa1f fe8e 	uxth.w	lr, lr
 8023162:	fb0e 0808 	mla	r8, lr, r8, r0
 8023166:	7828      	ldrb	r0, [r5, #0]
 8023168:	fb0c 8800 	mla	r8, ip, r0, r8
 802316c:	7818      	ldrb	r0, [r3, #0]
 802316e:	fb06 8000 	mla	r0, r6, r0, r8
 8023172:	1200      	asrs	r0, r0, #8
 8023174:	7008      	strb	r0, [r1, #0]
 8023176:	7860      	ldrb	r0, [r4, #1]
 8023178:	f897 8001 	ldrb.w	r8, [r7, #1]
 802317c:	4350      	muls	r0, r2
 802317e:	fb0e 0808 	mla	r8, lr, r8, r0
 8023182:	7868      	ldrb	r0, [r5, #1]
 8023184:	fb0c 8800 	mla	r8, ip, r0, r8
 8023188:	7858      	ldrb	r0, [r3, #1]
 802318a:	fb06 8000 	mla	r0, r6, r0, r8
 802318e:	1200      	asrs	r0, r0, #8
 8023190:	7048      	strb	r0, [r1, #1]
 8023192:	78a0      	ldrb	r0, [r4, #2]
 8023194:	78bf      	ldrb	r7, [r7, #2]
 8023196:	4350      	muls	r0, r2
 8023198:	78aa      	ldrb	r2, [r5, #2]
 802319a:	fb0e 0007 	mla	r0, lr, r7, r0
 802319e:	fb0c 0c02 	mla	ip, ip, r2, r0
 80231a2:	789a      	ldrb	r2, [r3, #2]
 80231a4:	fb06 c202 	mla	r2, r6, r2, ip
 80231a8:	1212      	asrs	r2, r2, #8
 80231aa:	708a      	strb	r2, [r1, #2]
 80231ac:	b002      	add	sp, #8
 80231ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80231b2:	af01      	add	r7, sp, #4
 80231b4:	e797      	b.n	80230e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80231b6:	ac01      	add	r4, sp, #4
 80231b8:	4627      	mov	r7, r4
 80231ba:	e7a0      	b.n	80230fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80231bc:	ac01      	add	r4, sp, #4
 80231be:	e79e      	b.n	80230fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80231c0:	ad01      	add	r5, sp, #4
 80231c2:	e7ac      	b.n	802311e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80231c4:	ab01      	add	r3, sp, #4
 80231c6:	461d      	mov	r5, r3
 80231c8:	e7b6      	b.n	8023138 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80231ca:	ab01      	add	r3, sp, #4
 80231cc:	e7b4      	b.n	8023138 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080231ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231d2:	b08d      	sub	sp, #52	; 0x34
 80231d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80231d8:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80231dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80231de:	900b      	str	r0, [sp, #44]	; 0x2c
 80231e0:	9306      	str	r3, [sp, #24]
 80231e2:	6850      	ldr	r0, [r2, #4]
 80231e4:	6812      	ldr	r2, [r2, #0]
 80231e6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80231e8:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 80231ec:	fb00 1303 	mla	r3, r0, r3, r1
 80231f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80231f4:	18d3      	adds	r3, r2, r3
 80231f6:	9307      	str	r3, [sp, #28]
 80231f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80231fa:	681b      	ldr	r3, [r3, #0]
 80231fc:	9308      	str	r3, [sp, #32]
 80231fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023200:	685d      	ldr	r5, [r3, #4]
 8023202:	3504      	adds	r5, #4
 8023204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023206:	2b00      	cmp	r3, #0
 8023208:	dc03      	bgt.n	8023212 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802320a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802320c:	2b00      	cmp	r3, #0
 802320e:	f340 81e6 	ble.w	80235de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023212:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023214:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023218:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802321c:	1e48      	subs	r0, r1, #1
 802321e:	1e56      	subs	r6, r2, #1
 8023220:	9b06      	ldr	r3, [sp, #24]
 8023222:	2b00      	cmp	r3, #0
 8023224:	f340 80bd 	ble.w	80233a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8023228:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802322a:	1427      	asrs	r7, r4, #16
 802322c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023230:	d406      	bmi.n	8023240 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023232:	4287      	cmp	r7, r0
 8023234:	da04      	bge.n	8023240 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023236:	2b00      	cmp	r3, #0
 8023238:	db02      	blt.n	8023240 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802323a:	42b3      	cmp	r3, r6
 802323c:	f2c0 80b2 	blt.w	80233a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8023240:	3701      	adds	r7, #1
 8023242:	f100 80a1 	bmi.w	8023388 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023246:	42b9      	cmp	r1, r7
 8023248:	f2c0 809e 	blt.w	8023388 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802324c:	3301      	adds	r3, #1
 802324e:	f100 809b 	bmi.w	8023388 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023252:	429a      	cmp	r2, r3
 8023254:	f2c0 8098 	blt.w	8023388 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023258:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802325c:	f1bb 0f00 	cmp.w	fp, #0
 8023260:	f340 80bf 	ble.w	80233e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023264:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023266:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023268:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802326a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802326e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8023272:	1420      	asrs	r0, r4, #16
 8023274:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023276:	ea4f 4723 	mov.w	r7, r3, asr #16
 802327a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802327e:	6892      	ldr	r2, [r2, #8]
 8023280:	f100 8103 	bmi.w	802348a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023284:	f102 3eff 	add.w	lr, r2, #4294967295
 8023288:	4570      	cmp	r0, lr
 802328a:	f280 80fe 	bge.w	802348a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 802328e:	2f00      	cmp	r7, #0
 8023290:	f2c0 80fb 	blt.w	802348a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023294:	f10c 3eff 	add.w	lr, ip, #4294967295
 8023298:	4577      	cmp	r7, lr
 802329a:	f280 80f6 	bge.w	802348a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 802329e:	b212      	sxth	r2, r2
 80232a0:	fb07 0002 	mla	r0, r7, r2, r0
 80232a4:	9f08      	ldr	r7, [sp, #32]
 80232a6:	f817 8000 	ldrb.w	r8, [r7, r0]
 80232aa:	eb07 0e00 	add.w	lr, r7, r0
 80232ae:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80232b2:	eb05 0c08 	add.w	ip, r5, r8
 80232b6:	2b00      	cmp	r3, #0
 80232b8:	f000 80d8 	beq.w	802346c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80232bc:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80232c0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80232c4:	442f      	add	r7, r5
 80232c6:	2900      	cmp	r1, #0
 80232c8:	f000 80d9 	beq.w	802347e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80232cc:	eb0e 0002 	add.w	r0, lr, r2
 80232d0:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80232d4:	7840      	ldrb	r0, [r0, #1]
 80232d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80232da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80232de:	442a      	add	r2, r5
 80232e0:	4428      	add	r0, r5
 80232e2:	b29b      	uxth	r3, r3
 80232e4:	f815 a008 	ldrb.w	sl, [r5, r8]
 80232e8:	b289      	uxth	r1, r1
 80232ea:	f897 8000 	ldrb.w	r8, [r7]
 80232ee:	fb03 f901 	mul.w	r9, r3, r1
 80232f2:	011b      	lsls	r3, r3, #4
 80232f4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80232f8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80232fc:	eba3 0309 	sub.w	r3, r3, r9
 8023300:	b289      	uxth	r1, r1
 8023302:	b29b      	uxth	r3, r3
 8023304:	ebae 0e01 	sub.w	lr, lr, r1
 8023308:	fb03 f808 	mul.w	r8, r3, r8
 802330c:	fa1f fe8e 	uxth.w	lr, lr
 8023310:	fb0e 880a 	mla	r8, lr, sl, r8
 8023314:	f892 a000 	ldrb.w	sl, [r2]
 8023318:	fb01 880a 	mla	r8, r1, sl, r8
 802331c:	f890 a000 	ldrb.w	sl, [r0]
 8023320:	fb09 880a 	mla	r8, r9, sl, r8
 8023324:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023328:	f886 8000 	strb.w	r8, [r6]
 802332c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023330:	f89c a001 	ldrb.w	sl, [ip, #1]
 8023334:	fb03 f808 	mul.w	r8, r3, r8
 8023338:	fb0e 880a 	mla	r8, lr, sl, r8
 802333c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023340:	fb01 880a 	mla	r8, r1, sl, r8
 8023344:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023348:	fb09 880a 	mla	r8, r9, sl, r8
 802334c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023350:	f886 8001 	strb.w	r8, [r6, #1]
 8023354:	78bf      	ldrb	r7, [r7, #2]
 8023356:	f89c c002 	ldrb.w	ip, [ip, #2]
 802335a:	437b      	muls	r3, r7
 802335c:	7892      	ldrb	r2, [r2, #2]
 802335e:	fb0e 330c 	mla	r3, lr, ip, r3
 8023362:	fb01 3102 	mla	r1, r1, r2, r3
 8023366:	7882      	ldrb	r2, [r0, #2]
 8023368:	fb09 1902 	mla	r9, r9, r2, r1
 802336c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023370:	f886 9002 	strb.w	r9, [r6, #2]
 8023374:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023376:	3603      	adds	r6, #3
 8023378:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802337a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802337e:	441c      	add	r4, r3
 8023380:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023382:	4413      	add	r3, r2
 8023384:	9318      	str	r3, [sp, #96]	; 0x60
 8023386:	e769      	b.n	802325c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023388:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802338a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 802338c:	441c      	add	r4, r3
 802338e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023390:	443b      	add	r3, r7
 8023392:	9318      	str	r3, [sp, #96]	; 0x60
 8023394:	9b06      	ldr	r3, [sp, #24]
 8023396:	3b01      	subs	r3, #1
 8023398:	9306      	str	r3, [sp, #24]
 802339a:	9b07      	ldr	r3, [sp, #28]
 802339c:	3303      	adds	r3, #3
 802339e:	9307      	str	r3, [sp, #28]
 80233a0:	e73e      	b.n	8023220 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80233a2:	d026      	beq.n	80233f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80233a4:	9b06      	ldr	r3, [sp, #24]
 80233a6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80233a8:	3b01      	subs	r3, #1
 80233aa:	fb00 4003 	mla	r0, r0, r3, r4
 80233ae:	1400      	asrs	r0, r0, #16
 80233b0:	f53f af52 	bmi.w	8023258 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80233b4:	3901      	subs	r1, #1
 80233b6:	4288      	cmp	r0, r1
 80233b8:	f6bf af4e 	bge.w	8023258 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80233bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80233be:	9818      	ldr	r0, [sp, #96]	; 0x60
 80233c0:	fb01 0303 	mla	r3, r1, r3, r0
 80233c4:	141b      	asrs	r3, r3, #16
 80233c6:	f53f af47 	bmi.w	8023258 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80233ca:	3a01      	subs	r2, #1
 80233cc:	4293      	cmp	r3, r2
 80233ce:	f6bf af43 	bge.w	8023258 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80233d2:	9b07      	ldr	r3, [sp, #28]
 80233d4:	f8dd a018 	ldr.w	sl, [sp, #24]
 80233d8:	f103 0803 	add.w	r8, r3, #3
 80233dc:	f1ba 0f00 	cmp.w	sl, #0
 80233e0:	dc71      	bgt.n	80234c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80233e2:	9b06      	ldr	r3, [sp, #24]
 80233e4:	9a07      	ldr	r2, [sp, #28]
 80233e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80233ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80233ee:	441a      	add	r2, r3
 80233f0:	9207      	str	r2, [sp, #28]
 80233f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	f340 80f2 	ble.w	80235de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80233fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80233fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023400:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023404:	eeb0 6a62 	vmov.f32	s12, s5
 8023408:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802340c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023410:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023414:	ee16 4a10 	vmov	r4, s12
 8023418:	eeb0 6a43 	vmov.f32	s12, s6
 802341c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023420:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8023424:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023428:	ee61 7a27 	vmul.f32	s15, s2, s15
 802342c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023430:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023434:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023438:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802343c:	ee12 2a90 	vmov	r2, s5
 8023440:	eef0 2a47 	vmov.f32	s5, s14
 8023444:	fb92 f3f3 	sdiv	r3, r2, r3
 8023448:	ee13 2a10 	vmov	r2, s6
 802344c:	9319      	str	r3, [sp, #100]	; 0x64
 802344e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023450:	eeb0 3a67 	vmov.f32	s6, s15
 8023454:	fb92 f3f3 	sdiv	r3, r2, r3
 8023458:	931a      	str	r3, [sp, #104]	; 0x68
 802345a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802345c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802345e:	3b01      	subs	r3, #1
 8023460:	9309      	str	r3, [sp, #36]	; 0x24
 8023462:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023464:	bf08      	it	eq
 8023466:	4613      	moveq	r3, r2
 8023468:	9306      	str	r3, [sp, #24]
 802346a:	e6cb      	b.n	8023204 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802346c:	b151      	cbz	r1, 8023484 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802346e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023472:	4660      	mov	r0, ip
 8023474:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023478:	442a      	add	r2, r5
 802347a:	4667      	mov	r7, ip
 802347c:	e731      	b.n	80232e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 802347e:	4660      	mov	r0, ip
 8023480:	4662      	mov	r2, ip
 8023482:	e72e      	b.n	80232e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8023484:	4660      	mov	r0, ip
 8023486:	4662      	mov	r2, ip
 8023488:	e7f7      	b.n	802347a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802348a:	f110 0e01 	adds.w	lr, r0, #1
 802348e:	f53f af71 	bmi.w	8023374 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023492:	4572      	cmp	r2, lr
 8023494:	f6ff af6e 	blt.w	8023374 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023498:	f117 0e01 	adds.w	lr, r7, #1
 802349c:	f53f af6a 	bmi.w	8023374 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80234a0:	45f4      	cmp	ip, lr
 80234a2:	f6ff af67 	blt.w	8023374 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80234a6:	b212      	sxth	r2, r2
 80234a8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80234ac:	fa0f f38c 	sxth.w	r3, ip
 80234b0:	9200      	str	r2, [sp, #0]
 80234b2:	4631      	mov	r1, r6
 80234b4:	9a08      	ldr	r2, [sp, #32]
 80234b6:	9301      	str	r3, [sp, #4]
 80234b8:	462b      	mov	r3, r5
 80234ba:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80234be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80234c0:	f7ff fde9 	bl	8023096 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80234c4:	e756      	b.n	8023374 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80234c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80234c8:	1426      	asrs	r6, r4, #16
 80234ca:	9818      	ldr	r0, [sp, #96]	; 0x60
 80234cc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80234d0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80234d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80234d6:	1400      	asrs	r0, r0, #16
 80234d8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80234dc:	fb02 6000 	mla	r0, r2, r0, r6
 80234e0:	9e08      	ldr	r6, [sp, #32]
 80234e2:	f816 e000 	ldrb.w	lr, [r6, r0]
 80234e6:	eb06 0c00 	add.w	ip, r6, r0
 80234ea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80234ee:	eb05 070e 	add.w	r7, r5, lr
 80234f2:	2b00      	cmp	r3, #0
 80234f4:	d064      	beq.n	80235c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80234f6:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80234fa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80234fe:	442e      	add	r6, r5
 8023500:	2900      	cmp	r1, #0
 8023502:	d066      	beq.n	80235d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8023504:	eb0c 0002 	add.w	r0, ip, r2
 8023508:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802350c:	7840      	ldrb	r0, [r0, #1]
 802350e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023512:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023516:	442a      	add	r2, r5
 8023518:	4428      	add	r0, r5
 802351a:	b29b      	uxth	r3, r3
 802351c:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8023520:	b289      	uxth	r1, r1
 8023522:	f896 e000 	ldrb.w	lr, [r6]
 8023526:	f108 0803 	add.w	r8, r8, #3
 802352a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802352e:	fb03 f901 	mul.w	r9, r3, r1
 8023532:	011b      	lsls	r3, r3, #4
 8023534:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023538:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802353c:	eba3 0309 	sub.w	r3, r3, r9
 8023540:	b289      	uxth	r1, r1
 8023542:	b29b      	uxth	r3, r3
 8023544:	ebac 0c01 	sub.w	ip, ip, r1
 8023548:	fb03 fe0e 	mul.w	lr, r3, lr
 802354c:	fa1f fc8c 	uxth.w	ip, ip
 8023550:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023554:	f892 b000 	ldrb.w	fp, [r2]
 8023558:	fb01 ee0b 	mla	lr, r1, fp, lr
 802355c:	f890 b000 	ldrb.w	fp, [r0]
 8023560:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023564:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023568:	f808 ec06 	strb.w	lr, [r8, #-6]
 802356c:	f896 e001 	ldrb.w	lr, [r6, #1]
 8023570:	f897 b001 	ldrb.w	fp, [r7, #1]
 8023574:	fb03 fe0e 	mul.w	lr, r3, lr
 8023578:	fb0c ee0b 	mla	lr, ip, fp, lr
 802357c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023580:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023584:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023588:	fb09 ee0b 	mla	lr, r9, fp, lr
 802358c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023590:	f808 ec05 	strb.w	lr, [r8, #-5]
 8023594:	78b6      	ldrb	r6, [r6, #2]
 8023596:	78bf      	ldrb	r7, [r7, #2]
 8023598:	4373      	muls	r3, r6
 802359a:	7896      	ldrb	r6, [r2, #2]
 802359c:	7882      	ldrb	r2, [r0, #2]
 802359e:	fb0c 3307 	mla	r3, ip, r7, r3
 80235a2:	fb01 3306 	mla	r3, r1, r6, r3
 80235a6:	fb09 3902 	mla	r9, r9, r2, r3
 80235aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80235ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80235ae:	441c      	add	r4, r3
 80235b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80235b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80235b6:	4413      	add	r3, r2
 80235b8:	f808 9c04 	strb.w	r9, [r8, #-4]
 80235bc:	9318      	str	r3, [sp, #96]	; 0x60
 80235be:	e70d      	b.n	80233dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80235c0:	b151      	cbz	r1, 80235d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80235c2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80235c6:	4638      	mov	r0, r7
 80235c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80235cc:	442a      	add	r2, r5
 80235ce:	463e      	mov	r6, r7
 80235d0:	e7a3      	b.n	802351a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80235d2:	4638      	mov	r0, r7
 80235d4:	463a      	mov	r2, r7
 80235d6:	e7a0      	b.n	802351a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80235d8:	4638      	mov	r0, r7
 80235da:	463a      	mov	r2, r7
 80235dc:	e7f7      	b.n	80235ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80235de:	b00d      	add	sp, #52	; 0x34
 80235e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080235e4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80235e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235e8:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80235ec:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80235f0:	2d00      	cmp	r5, #0
 80235f2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80235f6:	fb05 700c 	mla	r0, r5, ip, r7
 80235fa:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80235fe:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8023602:	eb02 0800 	add.w	r8, r2, r0
 8023606:	f2c0 8118 	blt.w	802383a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 802360a:	45a9      	cmp	r9, r5
 802360c:	f340 8115 	ble.w	802383a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8023610:	2f00      	cmp	r7, #0
 8023612:	f2c0 8110 	blt.w	8023836 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8023616:	45bc      	cmp	ip, r7
 8023618:	f340 810d 	ble.w	8023836 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 802361c:	5c12      	ldrb	r2, [r2, r0]
 802361e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023622:	1c7a      	adds	r2, r7, #1
 8023624:	f100 810c 	bmi.w	8023840 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8023628:	4594      	cmp	ip, r2
 802362a:	f340 8109 	ble.w	8023840 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 802362e:	2c00      	cmp	r4, #0
 8023630:	f000 8108 	beq.w	8023844 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8023634:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023638:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802363c:	3501      	adds	r5, #1
 802363e:	f100 8105 	bmi.w	802384c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8023642:	45a9      	cmp	r9, r5
 8023644:	f340 8102 	ble.w	802384c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8023648:	f1be 0f00 	cmp.w	lr, #0
 802364c:	f000 8101 	beq.w	8023852 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8023650:	2f00      	cmp	r7, #0
 8023652:	f2c0 80f9 	blt.w	8023848 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8023656:	45bc      	cmp	ip, r7
 8023658:	f340 80f6 	ble.w	8023848 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 802365c:	f818 200c 	ldrb.w	r2, [r8, ip]
 8023660:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023664:	3701      	adds	r7, #1
 8023666:	f100 80f7 	bmi.w	8023858 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 802366a:	45bc      	cmp	ip, r7
 802366c:	f340 80f4 	ble.w	8023858 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8023670:	2c00      	cmp	r4, #0
 8023672:	f000 80f3 	beq.w	802385c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8023676:	44c4      	add	ip, r8
 8023678:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802367c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023680:	fa1f fc84 	uxth.w	ip, r4
 8023684:	fa1f f48e 	uxth.w	r4, lr
 8023688:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802368c:	fb04 fe0c 	mul.w	lr, r4, ip
 8023690:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8023694:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8023698:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 802369c:	ebac 070e 	sub.w	r7, ip, lr
 80236a0:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80236a4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80236a8:	b2a4      	uxth	r4, r4
 80236aa:	b2bf      	uxth	r7, r7
 80236ac:	1b1b      	subs	r3, r3, r4
 80236ae:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80236b2:	fb07 fc0a 	mul.w	ip, r7, sl
 80236b6:	b29b      	uxth	r3, r3
 80236b8:	fb03 cc0b 	mla	ip, r3, fp, ip
 80236bc:	9300      	str	r3, [sp, #0]
 80236be:	fb04 cc09 	mla	ip, r4, r9, ip
 80236c2:	fb0e cc08 	mla	ip, lr, r8, ip
 80236c6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80236ca:	9301      	str	r3, [sp, #4]
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	f000 80af 	beq.w	8023830 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80236d2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80236d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80236da:	fb0b fc0c 	mul.w	ip, fp, ip
 80236de:	fb0b f606 	mul.w	r6, fp, r6
 80236e2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80236e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80236ea:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80236ee:	44dc      	add	ip, fp
 80236f0:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80236f4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80236f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80236fc:	fb0a fb0b 	mul.w	fp, sl, fp
 8023700:	fb0a fa00 	mul.w	sl, sl, r0
 8023704:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8023708:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802370c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8023710:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8023714:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8023718:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802371c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8023720:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023724:	0a36      	lsrs	r6, r6, #8
 8023726:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802372a:	44dc      	add	ip, fp
 802372c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023730:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023734:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023738:	fb09 fb0b 	mul.w	fp, r9, fp
 802373c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023740:	fb09 f905 	mul.w	r9, r9, r5
 8023744:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8023748:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802374c:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8023750:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023754:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023758:	fb0c fc07 	mul.w	ip, ip, r7
 802375c:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8023760:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8023764:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023768:	4458      	add	r0, fp
 802376a:	fb08 f505 	mul.w	r5, r8, r5
 802376e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023772:	fb08 f802 	mul.w	r8, r8, r2
 8023776:	0a00      	lsrs	r0, r0, #8
 8023778:	0a2a      	lsrs	r2, r5, #8
 802377a:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802377e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023782:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023786:	4415      	add	r5, r2
 8023788:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802378c:	0a2d      	lsrs	r5, r5, #8
 802378e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023792:	9a00      	ldr	r2, [sp, #0]
 8023794:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023798:	fb03 cc02 	mla	ip, r3, r2, ip
 802379c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80237a0:	9b01      	ldr	r3, [sp, #4]
 80237a2:	fb05 c50e 	mla	r5, r5, lr, ip
 80237a6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80237aa:	fb00 5004 	mla	r0, r0, r4, r5
 80237ae:	0a00      	lsrs	r0, r0, #8
 80237b0:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80237b4:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80237b8:	4378      	muls	r0, r7
 80237ba:	fb02 0006 	mla	r0, r2, r6, r0
 80237be:	fb0e 0e08 	mla	lr, lr, r8, r0
 80237c2:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80237c6:	fb04 e000 	mla	r0, r4, r0, lr
 80237ca:	0a00      	lsrs	r0, r0, #8
 80237cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80237d0:	4328      	orrs	r0, r5
 80237d2:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80237d6:	b2ad      	uxth	r5, r5
 80237d8:	b2c4      	uxtb	r4, r0
 80237da:	436b      	muls	r3, r5
 80237dc:	fb14 f405 	smulbb	r4, r4, r5
 80237e0:	1c5a      	adds	r2, r3, #1
 80237e2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80237e6:	780b      	ldrb	r3, [r1, #0]
 80237e8:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80237ec:	b2d2      	uxtb	r2, r2
 80237ee:	fb03 4302 	mla	r3, r3, r2, r4
 80237f2:	b29b      	uxth	r3, r3
 80237f4:	1c5c      	adds	r4, r3, #1
 80237f6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80237fa:	784c      	ldrb	r4, [r1, #1]
 80237fc:	fb14 f402 	smulbb	r4, r4, r2
 8023800:	121b      	asrs	r3, r3, #8
 8023802:	700b      	strb	r3, [r1, #0]
 8023804:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8023808:	fb03 4305 	mla	r3, r3, r5, r4
 802380c:	b29b      	uxth	r3, r3
 802380e:	1c5c      	adds	r4, r3, #1
 8023810:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8023814:	0c04      	lsrs	r4, r0, #16
 8023816:	7888      	ldrb	r0, [r1, #2]
 8023818:	121b      	asrs	r3, r3, #8
 802381a:	fb10 f002 	smulbb	r0, r0, r2
 802381e:	704b      	strb	r3, [r1, #1]
 8023820:	fb04 0005 	mla	r0, r4, r5, r0
 8023824:	b280      	uxth	r0, r0
 8023826:	1c43      	adds	r3, r0, #1
 8023828:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802382c:	1200      	asrs	r0, r0, #8
 802382e:	7088      	strb	r0, [r1, #2]
 8023830:	b003      	add	sp, #12
 8023832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023836:	2600      	movs	r6, #0
 8023838:	e6f3      	b.n	8023622 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 802383a:	2000      	movs	r0, #0
 802383c:	4606      	mov	r6, r0
 802383e:	e6fd      	b.n	802363c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023840:	2000      	movs	r0, #0
 8023842:	e6fb      	b.n	802363c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023844:	4620      	mov	r0, r4
 8023846:	e6f9      	b.n	802363c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023848:	2500      	movs	r5, #0
 802384a:	e70b      	b.n	8023664 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 802384c:	2200      	movs	r2, #0
 802384e:	4615      	mov	r5, r2
 8023850:	e716      	b.n	8023680 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8023852:	4672      	mov	r2, lr
 8023854:	4675      	mov	r5, lr
 8023856:	e713      	b.n	8023680 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8023858:	2200      	movs	r2, #0
 802385a:	e711      	b.n	8023680 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802385c:	4622      	mov	r2, r4
 802385e:	e70f      	b.n	8023680 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08023860 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023864:	b09f      	sub	sp, #124	; 0x7c
 8023866:	921b      	str	r2, [sp, #108]	; 0x6c
 8023868:	9309      	str	r3, [sp, #36]	; 0x24
 802386a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802386c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8023870:	901d      	str	r0, [sp, #116]	; 0x74
 8023872:	931c      	str	r3, [sp, #112]	; 0x70
 8023874:	6850      	ldr	r0, [r2, #4]
 8023876:	9119      	str	r1, [sp, #100]	; 0x64
 8023878:	6812      	ldr	r2, [r2, #0]
 802387a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 802387c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023880:	fb00 1303 	mla	r3, r0, r3, r1
 8023884:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023888:	18d3      	adds	r3, r2, r3
 802388a:	930c      	str	r3, [sp, #48]	; 0x30
 802388c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802388e:	681b      	ldr	r3, [r3, #0]
 8023890:	9312      	str	r3, [sp, #72]	; 0x48
 8023892:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023894:	685e      	ldr	r6, [r3, #4]
 8023896:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802389a:	3604      	adds	r6, #4
 802389c:	930d      	str	r3, [sp, #52]	; 0x34
 802389e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80238a0:	2b00      	cmp	r3, #0
 80238a2:	dc03      	bgt.n	80238ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80238a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80238a6:	2b00      	cmp	r3, #0
 80238a8:	f340 8378 	ble.w	8023f9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80238ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80238ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80238b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80238b6:	1e48      	subs	r0, r1, #1
 80238b8:	1e57      	subs	r7, r2, #1
 80238ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238bc:	2b00      	cmp	r3, #0
 80238be:	f340 818c 	ble.w	8023bda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80238c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80238c4:	142b      	asrs	r3, r5, #16
 80238c6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80238ca:	d406      	bmi.n	80238da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80238cc:	4584      	cmp	ip, r0
 80238ce:	da04      	bge.n	80238da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	db02      	blt.n	80238da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80238d4:	42bb      	cmp	r3, r7
 80238d6:	f2c0 8181 	blt.w	8023bdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80238da:	f11c 0c01 	adds.w	ip, ip, #1
 80238de:	f100 816f 	bmi.w	8023bc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80238e2:	4561      	cmp	r1, ip
 80238e4:	f2c0 816c 	blt.w	8023bc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80238e8:	3301      	adds	r3, #1
 80238ea:	f100 8169 	bmi.w	8023bc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80238ee:	429a      	cmp	r2, r3
 80238f0:	f2c0 8166 	blt.w	8023bc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80238f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80238f8:	931a      	str	r3, [sp, #104]	; 0x68
 80238fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80238fc:	2b00      	cmp	r3, #0
 80238fe:	f340 818c 	ble.w	8023c1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8023902:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023904:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023908:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802390c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023910:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023912:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023916:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023918:	141b      	asrs	r3, r3, #16
 802391a:	f100 81d0 	bmi.w	8023cbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802391e:	f100 38ff 	add.w	r8, r0, #4294967295
 8023922:	4543      	cmp	r3, r8
 8023924:	f280 81cb 	bge.w	8023cbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023928:	f1bc 0f00 	cmp.w	ip, #0
 802392c:	f2c0 81c7 	blt.w	8023cbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023930:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023934:	45c4      	cmp	ip, r8
 8023936:	f280 81c2 	bge.w	8023cbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802393a:	b200      	sxth	r0, r0
 802393c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802393e:	fb0c 3300 	mla	r3, ip, r0, r3
 8023942:	eb04 0803 	add.w	r8, r4, r3
 8023946:	5ce3      	ldrb	r3, [r4, r3]
 8023948:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802394c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023950:	2a00      	cmp	r2, #0
 8023952:	f000 81a9 	beq.w	8023ca8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023956:	f898 c001 	ldrb.w	ip, [r8, #1]
 802395a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802395e:	940e      	str	r4, [sp, #56]	; 0x38
 8023960:	0e24      	lsrs	r4, r4, #24
 8023962:	9415      	str	r4, [sp, #84]	; 0x54
 8023964:	b179      	cbz	r1, 8023986 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023966:	eb08 0c00 	add.w	ip, r8, r0
 802396a:	f818 0000 	ldrb.w	r0, [r8, r0]
 802396e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023972:	900a      	str	r0, [sp, #40]	; 0x28
 8023974:	0e00      	lsrs	r0, r0, #24
 8023976:	9013      	str	r0, [sp, #76]	; 0x4c
 8023978:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802397c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023980:	900f      	str	r0, [sp, #60]	; 0x3c
 8023982:	0e00      	lsrs	r0, r0, #24
 8023984:	9016      	str	r0, [sp, #88]	; 0x58
 8023986:	b292      	uxth	r2, r2
 8023988:	9815      	ldr	r0, [sp, #84]	; 0x54
 802398a:	b289      	uxth	r1, r1
 802398c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802398e:	fb02 f901 	mul.w	r9, r2, r1
 8023992:	0112      	lsls	r2, r2, #4
 8023994:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023998:	eba2 0809 	sub.w	r8, r2, r9
 802399c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80239a0:	b289      	uxth	r1, r1
 80239a2:	fa1f f888 	uxth.w	r8, r8
 80239a6:	1a52      	subs	r2, r2, r1
 80239a8:	fb08 f000 	mul.w	r0, r8, r0
 80239ac:	b292      	uxth	r2, r2
 80239ae:	fb02 000e 	mla	r0, r2, lr, r0
 80239b2:	fb01 0004 	mla	r0, r1, r4, r0
 80239b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80239b8:	fb09 0004 	mla	r0, r9, r4, r0
 80239bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80239c0:	2800      	cmp	r0, #0
 80239c2:	f000 80f2 	beq.w	8023baa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80239c6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80239ca:	d01b      	beq.n	8023a04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80239cc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80239d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80239d4:	fb0e fa0a 	mul.w	sl, lr, sl
 80239d8:	fb0e fe03 	mul.w	lr, lr, r3
 80239dc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80239e0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80239e4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80239e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80239ec:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80239f0:	4453      	add	r3, sl
 80239f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239f6:	0a1b      	lsrs	r3, r3, #8
 80239f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80239fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023a00:	ea43 030c 	orr.w	r3, r3, ip
 8023a04:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023a06:	2cff      	cmp	r4, #255	; 0xff
 8023a08:	d021      	beq.n	8023a4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023a0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023a0c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023a10:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023a12:	fb04 fb0b 	mul.w	fp, r4, fp
 8023a16:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023a18:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023a1c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023a1e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023a22:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023a26:	fb04 fa0a 	mul.w	sl, r4, sl
 8023a2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a2e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023a32:	44de      	add	lr, fp
 8023a34:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023a38:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023a48:	ea4e 040a 	orr.w	r4, lr, sl
 8023a4c:	940e      	str	r4, [sp, #56]	; 0x38
 8023a4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023a50:	2cff      	cmp	r4, #255	; 0xff
 8023a52:	d021      	beq.n	8023a98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023a54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023a56:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023a5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023a5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8023a60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023a62:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023a66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023a68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023a6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023a70:	fb04 fa0a 	mul.w	sl, r4, sl
 8023a74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a78:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023a7c:	44de      	add	lr, fp
 8023a7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023a82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023a92:	ea4e 040a 	orr.w	r4, lr, sl
 8023a96:	940a      	str	r4, [sp, #40]	; 0x28
 8023a98:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023a9a:	2cff      	cmp	r4, #255	; 0xff
 8023a9c:	d021      	beq.n	8023ae2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8023a9e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023aa0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023aa4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023aa6:	fb04 fb0b 	mul.w	fp, r4, fp
 8023aaa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023aac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023ab0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023ab2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ab6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023aba:	fb04 fa0a 	mul.w	sl, r4, sl
 8023abe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ac2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023ac6:	44de      	add	lr, fp
 8023ac8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023acc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023ad0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ad4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ad8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023adc:	ea4e 040a 	orr.w	r4, lr, sl
 8023ae0:	940f      	str	r4, [sp, #60]	; 0x3c
 8023ae2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023ae4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023ae8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023aec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023af0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023af2:	fb08 fc0c 	mul.w	ip, r8, ip
 8023af6:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023afa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023afe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023b00:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023b04:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023b08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023b0a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023b0e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023b12:	fb08 f80e 	mul.w	r8, r8, lr
 8023b16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b1a:	fb02 8303 	mla	r3, r2, r3, r8
 8023b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023b20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023b24:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023b2a:	fb01 330a 	mla	r3, r1, sl, r3
 8023b2e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023b32:	fb09 3901 	mla	r9, r9, r1, r3
 8023b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023b38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023b3a:	4343      	muls	r3, r0
 8023b3c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023b40:	1c58      	adds	r0, r3, #1
 8023b42:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023b46:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023b4a:	ea4c 0c09 	orr.w	ip, ip, r9
 8023b4e:	783b      	ldrb	r3, [r7, #0]
 8023b50:	fa5f f28c 	uxtb.w	r2, ip
 8023b54:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023b58:	fb12 f201 	smulbb	r2, r2, r1
 8023b5c:	b2c0      	uxtb	r0, r0
 8023b5e:	fb03 2300 	mla	r3, r3, r0, r2
 8023b62:	b29b      	uxth	r3, r3
 8023b64:	1c5a      	adds	r2, r3, #1
 8023b66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023b6a:	787a      	ldrb	r2, [r7, #1]
 8023b6c:	fb12 f200 	smulbb	r2, r2, r0
 8023b70:	121b      	asrs	r3, r3, #8
 8023b72:	703b      	strb	r3, [r7, #0]
 8023b74:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023b78:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023b7c:	fb03 2301 	mla	r3, r3, r1, r2
 8023b80:	b29b      	uxth	r3, r3
 8023b82:	1c5a      	adds	r2, r3, #1
 8023b84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023b88:	121b      	asrs	r3, r3, #8
 8023b8a:	707b      	strb	r3, [r7, #1]
 8023b8c:	78bb      	ldrb	r3, [r7, #2]
 8023b8e:	fb13 f000 	smulbb	r0, r3, r0
 8023b92:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023b96:	fa1f fc8c 	uxth.w	ip, ip
 8023b9a:	f10c 0301 	add.w	r3, ip, #1
 8023b9e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023ba2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023ba6:	f887 c002 	strb.w	ip, [r7, #2]
 8023baa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023bac:	3703      	adds	r7, #3
 8023bae:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023bb0:	441a      	add	r2, r3
 8023bb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023bb4:	441d      	add	r5, r3
 8023bb6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023bb8:	9229      	str	r2, [sp, #164]	; 0xa4
 8023bba:	3b01      	subs	r3, #1
 8023bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8023bbe:	e69c      	b.n	80238fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023bc0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023bc2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023bc4:	441c      	add	r4, r3
 8023bc6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023bc8:	441d      	add	r5, r3
 8023bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bcc:	9429      	str	r4, [sp, #164]	; 0xa4
 8023bce:	3b01      	subs	r3, #1
 8023bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8023bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023bd4:	3303      	adds	r3, #3
 8023bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8023bd8:	e66f      	b.n	80238ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023bda:	d026      	beq.n	8023c2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bde:	982b      	ldr	r0, [sp, #172]	; 0xac
 8023be0:	3b01      	subs	r3, #1
 8023be2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023be4:	fb00 4003 	mla	r0, r0, r3, r4
 8023be8:	1400      	asrs	r0, r0, #16
 8023bea:	f53f ae83 	bmi.w	80238f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023bee:	3901      	subs	r1, #1
 8023bf0:	4288      	cmp	r0, r1
 8023bf2:	f6bf ae7f 	bge.w	80238f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023bf6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8023bf8:	fb01 5303 	mla	r3, r1, r3, r5
 8023bfc:	141b      	asrs	r3, r3, #16
 8023bfe:	f53f ae79 	bmi.w	80238f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023c02:	3a01      	subs	r2, #1
 8023c04:	4293      	cmp	r3, r2
 8023c06:	f6bf ae75 	bge.w	80238f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c0c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023c10:	f103 0e03 	add.w	lr, r3, #3
 8023c14:	f1bb 0f00 	cmp.w	fp, #0
 8023c18:	dc71      	bgt.n	8023cfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c1c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023c26:	4423      	add	r3, r4
 8023c28:	930c      	str	r3, [sp, #48]	; 0x30
 8023c2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023c2c:	2b00      	cmp	r3, #0
 8023c2e:	f340 81b5 	ble.w	8023f9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8023c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023c36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023c38:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023c3c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023c40:	eef0 6a62 	vmov.f32	s13, s5
 8023c44:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023c48:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023c4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c50:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023c54:	eef0 6a43 	vmov.f32	s13, s6
 8023c58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c5c:	ee16 5a90 	vmov	r5, s13
 8023c60:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023c64:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023c68:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023c6c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023c70:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023c74:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023c78:	ee12 2a90 	vmov	r2, s5
 8023c7c:	eef0 2a47 	vmov.f32	s5, s14
 8023c80:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c84:	ee13 2a10 	vmov	r2, s6
 8023c88:	932b      	str	r3, [sp, #172]	; 0xac
 8023c8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023c8c:	eeb0 3a67 	vmov.f32	s6, s15
 8023c90:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c94:	932c      	str	r3, [sp, #176]	; 0xb0
 8023c96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023c98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023c9a:	3b01      	subs	r3, #1
 8023c9c:	9319      	str	r3, [sp, #100]	; 0x64
 8023c9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023ca0:	bf08      	it	eq
 8023ca2:	4613      	moveq	r3, r2
 8023ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8023ca6:	e5fa      	b.n	802389e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023ca8:	2900      	cmp	r1, #0
 8023caa:	f43f ae6c 	beq.w	8023986 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023cae:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023cb2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023cb6:	900a      	str	r0, [sp, #40]	; 0x28
 8023cb8:	0e00      	lsrs	r0, r0, #24
 8023cba:	9013      	str	r0, [sp, #76]	; 0x4c
 8023cbc:	e663      	b.n	8023986 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023cbe:	f113 0801 	adds.w	r8, r3, #1
 8023cc2:	f53f af72 	bmi.w	8023baa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023cc6:	4540      	cmp	r0, r8
 8023cc8:	f6ff af6f 	blt.w	8023baa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023ccc:	f11c 0801 	adds.w	r8, ip, #1
 8023cd0:	f53f af6b 	bmi.w	8023baa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023cd4:	45c6      	cmp	lr, r8
 8023cd6:	f6ff af68 	blt.w	8023baa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023cda:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8023cdc:	b200      	sxth	r0, r0
 8023cde:	9302      	str	r3, [sp, #8]
 8023ce0:	fa0f f38e 	sxth.w	r3, lr
 8023ce4:	9000      	str	r0, [sp, #0]
 8023ce6:	9301      	str	r3, [sp, #4]
 8023ce8:	4633      	mov	r3, r6
 8023cea:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023cec:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023cf0:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023cf4:	4639      	mov	r1, r7
 8023cf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023cf8:	f7ff fc74 	bl	80235e4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8023cfc:	e755      	b.n	8023baa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023cfe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d00:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023d04:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023d06:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023d0a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023d0c:	1427      	asrs	r7, r4, #16
 8023d0e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023d10:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d14:	142b      	asrs	r3, r5, #16
 8023d16:	fb01 7303 	mla	r3, r1, r3, r7
 8023d1a:	18e7      	adds	r7, r4, r3
 8023d1c:	5ce3      	ldrb	r3, [r4, r3]
 8023d1e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023d22:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023d26:	2a00      	cmp	r2, #0
 8023d28:	f000 812e 	beq.w	8023f88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8023d2c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023d30:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8023d34:	9410      	str	r4, [sp, #64]	; 0x40
 8023d36:	0e24      	lsrs	r4, r4, #24
 8023d38:	9417      	str	r4, [sp, #92]	; 0x5c
 8023d3a:	b170      	cbz	r0, 8023d5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8023d3c:	eb07 0801 	add.w	r8, r7, r1
 8023d40:	5c79      	ldrb	r1, [r7, r1]
 8023d42:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023d46:	910b      	str	r1, [sp, #44]	; 0x2c
 8023d48:	0e09      	lsrs	r1, r1, #24
 8023d4a:	9114      	str	r1, [sp, #80]	; 0x50
 8023d4c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023d50:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023d54:	9111      	str	r1, [sp, #68]	; 0x44
 8023d56:	0e09      	lsrs	r1, r1, #24
 8023d58:	9118      	str	r1, [sp, #96]	; 0x60
 8023d5a:	b292      	uxth	r2, r2
 8023d5c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023d5e:	b280      	uxth	r0, r0
 8023d60:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023d62:	fb02 f900 	mul.w	r9, r2, r0
 8023d66:	0112      	lsls	r2, r2, #4
 8023d68:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023d6c:	eba2 0809 	sub.w	r8, r2, r9
 8023d70:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023d74:	b280      	uxth	r0, r0
 8023d76:	fa1f f888 	uxth.w	r8, r8
 8023d7a:	1a12      	subs	r2, r2, r0
 8023d7c:	fb08 f101 	mul.w	r1, r8, r1
 8023d80:	b292      	uxth	r2, r2
 8023d82:	fb02 110c 	mla	r1, r2, ip, r1
 8023d86:	fb00 1104 	mla	r1, r0, r4, r1
 8023d8a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023d8c:	fb09 1104 	mla	r1, r9, r4, r1
 8023d90:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023d94:	2900      	cmp	r1, #0
 8023d96:	f000 80ec 	beq.w	8023f72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8023d9a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023d9e:	d019      	beq.n	8023dd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8023da0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023da4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023da8:	fb0c fa0a 	mul.w	sl, ip, sl
 8023dac:	fb0c fc03 	mul.w	ip, ip, r3
 8023db0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023db4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023db8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023dbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023dc0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023dc4:	4453      	add	r3, sl
 8023dc6:	0a3f      	lsrs	r7, r7, #8
 8023dc8:	0a1b      	lsrs	r3, r3, #8
 8023dca:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023dce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023dd2:	433b      	orrs	r3, r7
 8023dd4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023dd6:	2cff      	cmp	r4, #255	; 0xff
 8023dd8:	d020      	beq.n	8023e1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8023dda:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023ddc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023de0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023de2:	4367      	muls	r7, r4
 8023de4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023de6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023dea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023dee:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023df0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023df4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023df8:	fb04 fa0a 	mul.w	sl, r4, sl
 8023dfc:	44bc      	add	ip, r7
 8023dfe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023e02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e06:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023e0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e16:	ea4c 040a 	orr.w	r4, ip, sl
 8023e1a:	9410      	str	r4, [sp, #64]	; 0x40
 8023e1c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e1e:	2cff      	cmp	r4, #255	; 0xff
 8023e20:	d020      	beq.n	8023e64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8023e22:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023e24:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023e28:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e2a:	4367      	muls	r7, r4
 8023e2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023e2e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023e32:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023e36:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e38:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023e3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e40:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e44:	44bc      	add	ip, r7
 8023e46:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023e4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e4e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023e52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e5a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e5e:	ea4c 040a 	orr.w	r4, ip, sl
 8023e62:	940b      	str	r4, [sp, #44]	; 0x2c
 8023e64:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023e66:	2cff      	cmp	r4, #255	; 0xff
 8023e68:	d020      	beq.n	8023eac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8023e6a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023e6c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023e70:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023e72:	4367      	muls	r7, r4
 8023e74:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023e76:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023e7a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023e7e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023e80:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023e84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e88:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e8c:	44bc      	add	ip, r7
 8023e8e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023e92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e96:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023e9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ea2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ea6:	ea4c 040a 	orr.w	r4, ip, sl
 8023eaa:	9411      	str	r4, [sp, #68]	; 0x44
 8023eac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023eae:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023eb6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023eba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023ebc:	fb08 f707 	mul.w	r7, r8, r7
 8023ec0:	fb02 770c 	mla	r7, r2, ip, r7
 8023ec4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023ec8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023eca:	fb00 770c 	mla	r7, r0, ip, r7
 8023ece:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023ed2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023ed4:	fb09 770c 	mla	r7, r9, ip, r7
 8023ed8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8023edc:	fb08 f80c 	mul.w	r8, r8, ip
 8023ee0:	0a3f      	lsrs	r7, r7, #8
 8023ee2:	fb02 8303 	mla	r3, r2, r3, r8
 8023ee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023ee8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023eec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023ef0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023ef2:	fb00 330a 	mla	r3, r0, sl, r3
 8023ef6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023efa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023efc:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023f02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f06:	434b      	muls	r3, r1
 8023f08:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023f0c:	1c59      	adds	r1, r3, #1
 8023f0e:	ea47 070c 	orr.w	r7, r7, ip
 8023f12:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023f16:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023f1a:	b2fa      	uxtb	r2, r7
 8023f1c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023f20:	fb12 f200 	smulbb	r2, r2, r0
 8023f24:	b2c9      	uxtb	r1, r1
 8023f26:	fb03 2301 	mla	r3, r3, r1, r2
 8023f2a:	b29b      	uxth	r3, r3
 8023f2c:	1c5a      	adds	r2, r3, #1
 8023f2e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023f32:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023f36:	fb12 f201 	smulbb	r2, r2, r1
 8023f3a:	121b      	asrs	r3, r3, #8
 8023f3c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023f40:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8023f44:	0c3f      	lsrs	r7, r7, #16
 8023f46:	fb03 2300 	mla	r3, r3, r0, r2
 8023f4a:	b29b      	uxth	r3, r3
 8023f4c:	1c5a      	adds	r2, r3, #1
 8023f4e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023f52:	121b      	asrs	r3, r3, #8
 8023f54:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8023f58:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8023f5c:	fb13 f101 	smulbb	r1, r3, r1
 8023f60:	fb07 1700 	mla	r7, r7, r0, r1
 8023f64:	b2bf      	uxth	r7, r7
 8023f66:	1c7b      	adds	r3, r7, #1
 8023f68:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023f6c:	123f      	asrs	r7, r7, #8
 8023f6e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8023f72:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023f74:	f10e 0e03 	add.w	lr, lr, #3
 8023f78:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023f7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023f7e:	441a      	add	r2, r3
 8023f80:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023f82:	9229      	str	r2, [sp, #164]	; 0xa4
 8023f84:	441d      	add	r5, r3
 8023f86:	e645      	b.n	8023c14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8023f88:	2800      	cmp	r0, #0
 8023f8a:	f43f aee6 	beq.w	8023d5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8023f8e:	5c79      	ldrb	r1, [r7, r1]
 8023f90:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f94:	910b      	str	r1, [sp, #44]	; 0x2c
 8023f96:	0e09      	lsrs	r1, r1, #24
 8023f98:	9114      	str	r1, [sp, #80]	; 0x50
 8023f9a:	e6de      	b.n	8023d5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8023f9c:	b01f      	add	sp, #124	; 0x7c
 8023f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023fa2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8023fa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fa6:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8023faa:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8023fae:	2d00      	cmp	r5, #0
 8023fb0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8023fb4:	fb05 700e 	mla	r0, r5, lr, r7
 8023fb8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8023fbc:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8023fc0:	eb02 0800 	add.w	r8, r2, r0
 8023fc4:	f2c0 8105 	blt.w	80241d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8023fc8:	45a9      	cmp	r9, r5
 8023fca:	f340 8102 	ble.w	80241d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8023fce:	2f00      	cmp	r7, #0
 8023fd0:	f2c0 80fd 	blt.w	80241ce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8023fd4:	45be      	cmp	lr, r7
 8023fd6:	f340 80fa 	ble.w	80241ce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8023fda:	5c12      	ldrb	r2, [r2, r0]
 8023fdc:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023fe0:	1c7a      	adds	r2, r7, #1
 8023fe2:	f100 80f9 	bmi.w	80241d8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8023fe6:	4596      	cmp	lr, r2
 8023fe8:	f340 80f6 	ble.w	80241d8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8023fec:	2c00      	cmp	r4, #0
 8023fee:	f000 80f5 	beq.w	80241dc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8023ff2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023ff6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023ffa:	3501      	adds	r5, #1
 8023ffc:	f100 80f2 	bmi.w	80241e4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8024000:	45a9      	cmp	r9, r5
 8024002:	f340 80ef 	ble.w	80241e4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8024006:	f1bc 0f00 	cmp.w	ip, #0
 802400a:	f000 80ee 	beq.w	80241ea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 802400e:	2f00      	cmp	r7, #0
 8024010:	f2c0 80e6 	blt.w	80241e0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8024014:	45be      	cmp	lr, r7
 8024016:	f340 80e3 	ble.w	80241e0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802401a:	f818 200e 	ldrb.w	r2, [r8, lr]
 802401e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024022:	3701      	adds	r7, #1
 8024024:	f100 80e4 	bmi.w	80241f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8024028:	45be      	cmp	lr, r7
 802402a:	f340 80e1 	ble.w	80241f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 802402e:	2c00      	cmp	r4, #0
 8024030:	f000 80e0 	beq.w	80241f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8024034:	44c6      	add	lr, r8
 8024036:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802403a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802403e:	b2a3      	uxth	r3, r4
 8024040:	fa1f fc8c 	uxth.w	ip, ip
 8024044:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024048:	fb0c fe03 	mul.w	lr, ip, r3
 802404c:	011b      	lsls	r3, r3, #4
 802404e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024052:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8024056:	eba3 070e 	sub.w	r7, r3, lr
 802405a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802405e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8024062:	fa1f f48c 	uxth.w	r4, ip
 8024066:	b2bf      	uxth	r7, r7
 8024068:	1b1b      	subs	r3, r3, r4
 802406a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802406e:	fb07 fc0a 	mul.w	ip, r7, sl
 8024072:	b29b      	uxth	r3, r3
 8024074:	fb03 cc0b 	mla	ip, r3, fp, ip
 8024078:	9300      	str	r3, [sp, #0]
 802407a:	fb04 cc09 	mla	ip, r4, r9, ip
 802407e:	fb0e cc08 	mla	ip, lr, r8, ip
 8024082:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024086:	9301      	str	r3, [sp, #4]
 8024088:	2b00      	cmp	r3, #0
 802408a:	f000 809d 	beq.w	80241c8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 802408e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8024092:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024096:	fb0b fc0c 	mul.w	ip, fp, ip
 802409a:	fb0b f606 	mul.w	r6, fp, r6
 802409e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80240a2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80240a6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80240aa:	44dc      	add	ip, fp
 80240ac:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80240b0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80240b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240b8:	fb0a fb0b 	mul.w	fp, sl, fp
 80240bc:	fb0a fa00 	mul.w	sl, sl, r0
 80240c0:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80240c4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80240c8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80240cc:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80240d0:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80240d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80240d8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80240dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240e0:	0a36      	lsrs	r6, r6, #8
 80240e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240e6:	44dc      	add	ip, fp
 80240e8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80240ec:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80240f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80240f4:	fb09 fb0b 	mul.w	fp, r9, fp
 80240f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240fc:	fb09 f905 	mul.w	r9, r9, r5
 8024100:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8024104:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024108:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802410c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024110:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024114:	fb0c fc07 	mul.w	ip, ip, r7
 8024118:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802411c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8024120:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024124:	4458      	add	r0, fp
 8024126:	fb08 f505 	mul.w	r5, r8, r5
 802412a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802412e:	fb08 f802 	mul.w	r8, r8, r2
 8024132:	0a00      	lsrs	r0, r0, #8
 8024134:	0a2a      	lsrs	r2, r5, #8
 8024136:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802413a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802413e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024142:	4415      	add	r5, r2
 8024144:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024148:	0a2d      	lsrs	r5, r5, #8
 802414a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802414e:	9a00      	ldr	r2, [sp, #0]
 8024150:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024154:	fb03 cc02 	mla	ip, r3, r2, ip
 8024158:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802415c:	9b01      	ldr	r3, [sp, #4]
 802415e:	fb05 c50e 	mla	r5, r5, lr, ip
 8024162:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024166:	43db      	mvns	r3, r3
 8024168:	fb00 5004 	mla	r0, r0, r4, r5
 802416c:	b2db      	uxtb	r3, r3
 802416e:	0a00      	lsrs	r0, r0, #8
 8024170:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8024174:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8024178:	4378      	muls	r0, r7
 802417a:	fb02 0006 	mla	r0, r2, r6, r0
 802417e:	780a      	ldrb	r2, [r1, #0]
 8024180:	fb0e 0e08 	mla	lr, lr, r8, r0
 8024184:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8024188:	fb04 e000 	mla	r0, r4, r0, lr
 802418c:	fb02 f403 	mul.w	r4, r2, r3
 8024190:	0a00      	lsrs	r0, r0, #8
 8024192:	1c62      	adds	r2, r4, #1
 8024194:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024198:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802419c:	4328      	orrs	r0, r5
 802419e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80241a2:	700a      	strb	r2, [r1, #0]
 80241a4:	784a      	ldrb	r2, [r1, #1]
 80241a6:	435a      	muls	r2, r3
 80241a8:	1c54      	adds	r4, r2, #1
 80241aa:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80241ae:	0a02      	lsrs	r2, r0, #8
 80241b0:	0c00      	lsrs	r0, r0, #16
 80241b2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80241b6:	704a      	strb	r2, [r1, #1]
 80241b8:	788a      	ldrb	r2, [r1, #2]
 80241ba:	4353      	muls	r3, r2
 80241bc:	1c5a      	adds	r2, r3, #1
 80241be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80241c2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80241c6:	7088      	strb	r0, [r1, #2]
 80241c8:	b003      	add	sp, #12
 80241ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241ce:	2600      	movs	r6, #0
 80241d0:	e706      	b.n	8023fe0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80241d2:	2000      	movs	r0, #0
 80241d4:	4606      	mov	r6, r0
 80241d6:	e710      	b.n	8023ffa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80241d8:	2000      	movs	r0, #0
 80241da:	e70e      	b.n	8023ffa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80241dc:	4620      	mov	r0, r4
 80241de:	e70c      	b.n	8023ffa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80241e0:	2500      	movs	r5, #0
 80241e2:	e71e      	b.n	8024022 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 80241e4:	2200      	movs	r2, #0
 80241e6:	4615      	mov	r5, r2
 80241e8:	e729      	b.n	802403e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80241ea:	4662      	mov	r2, ip
 80241ec:	4665      	mov	r5, ip
 80241ee:	e726      	b.n	802403e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80241f0:	2200      	movs	r2, #0
 80241f2:	e724      	b.n	802403e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80241f4:	4622      	mov	r2, r4
 80241f6:	e722      	b.n	802403e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080241f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80241f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241fc:	b09b      	sub	sp, #108	; 0x6c
 80241fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024202:	9218      	str	r2, [sp, #96]	; 0x60
 8024204:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024206:	9019      	str	r0, [sp, #100]	; 0x64
 8024208:	9116      	str	r1, [sp, #88]	; 0x58
 802420a:	6850      	ldr	r0, [r2, #4]
 802420c:	9307      	str	r3, [sp, #28]
 802420e:	6812      	ldr	r2, [r2, #0]
 8024210:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8024212:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024216:	fb00 1303 	mla	r3, r0, r3, r1
 802421a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802421e:	18d3      	adds	r3, r2, r3
 8024220:	930a      	str	r3, [sp, #40]	; 0x28
 8024222:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024224:	681b      	ldr	r3, [r3, #0]
 8024226:	930f      	str	r3, [sp, #60]	; 0x3c
 8024228:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802422a:	685e      	ldr	r6, [r3, #4]
 802422c:	3604      	adds	r6, #4
 802422e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024230:	2b00      	cmp	r3, #0
 8024232:	dc03      	bgt.n	802423c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8024234:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024236:	2b00      	cmp	r3, #0
 8024238:	f340 834f 	ble.w	80248da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802423c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802423e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024242:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024246:	1e48      	subs	r0, r1, #1
 8024248:	1e57      	subs	r7, r2, #1
 802424a:	9b07      	ldr	r3, [sp, #28]
 802424c:	2b00      	cmp	r3, #0
 802424e:	f340 8178 	ble.w	8024542 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024252:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024254:	142b      	asrs	r3, r5, #16
 8024256:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802425a:	d406      	bmi.n	802426a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802425c:	4584      	cmp	ip, r0
 802425e:	da04      	bge.n	802426a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024260:	2b00      	cmp	r3, #0
 8024262:	db02      	blt.n	802426a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024264:	42bb      	cmp	r3, r7
 8024266:	f2c0 816d 	blt.w	8024544 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802426a:	f11c 0c01 	adds.w	ip, ip, #1
 802426e:	f100 815b 	bmi.w	8024528 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024272:	4561      	cmp	r1, ip
 8024274:	f2c0 8158 	blt.w	8024528 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024278:	3301      	adds	r3, #1
 802427a:	f100 8155 	bmi.w	8024528 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802427e:	429a      	cmp	r2, r3
 8024280:	f2c0 8152 	blt.w	8024528 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024284:	9b07      	ldr	r3, [sp, #28]
 8024286:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024288:	9317      	str	r3, [sp, #92]	; 0x5c
 802428a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802428c:	2b00      	cmp	r3, #0
 802428e:	f340 8178 	ble.w	8024582 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024292:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024294:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024298:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802429c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80242a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80242a2:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80242a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80242a8:	141b      	asrs	r3, r3, #16
 80242aa:	f100 81ba 	bmi.w	8024622 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80242ae:	f101 38ff 	add.w	r8, r1, #4294967295
 80242b2:	4543      	cmp	r3, r8
 80242b4:	f280 81b5 	bge.w	8024622 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80242b8:	f1bc 0f00 	cmp.w	ip, #0
 80242bc:	f2c0 81b1 	blt.w	8024622 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80242c0:	f10e 38ff 	add.w	r8, lr, #4294967295
 80242c4:	45c4      	cmp	ip, r8
 80242c6:	f280 81ac 	bge.w	8024622 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80242ca:	b209      	sxth	r1, r1
 80242cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80242ce:	fb0c 3301 	mla	r3, ip, r1, r3
 80242d2:	eb04 0803 	add.w	r8, r4, r3
 80242d6:	5ce3      	ldrb	r3, [r4, r3]
 80242d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80242dc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80242e0:	2a00      	cmp	r2, #0
 80242e2:	f000 8193 	beq.w	802460c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80242e6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80242ea:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80242ee:	940b      	str	r4, [sp, #44]	; 0x2c
 80242f0:	0e24      	lsrs	r4, r4, #24
 80242f2:	9412      	str	r4, [sp, #72]	; 0x48
 80242f4:	b178      	cbz	r0, 8024316 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80242f6:	eb08 0c01 	add.w	ip, r8, r1
 80242fa:	f818 1001 	ldrb.w	r1, [r8, r1]
 80242fe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024302:	9108      	str	r1, [sp, #32]
 8024304:	0e09      	lsrs	r1, r1, #24
 8024306:	9110      	str	r1, [sp, #64]	; 0x40
 8024308:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802430c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024310:	910c      	str	r1, [sp, #48]	; 0x30
 8024312:	0e09      	lsrs	r1, r1, #24
 8024314:	9113      	str	r1, [sp, #76]	; 0x4c
 8024316:	b292      	uxth	r2, r2
 8024318:	9912      	ldr	r1, [sp, #72]	; 0x48
 802431a:	b280      	uxth	r0, r0
 802431c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802431e:	fb02 f900 	mul.w	r9, r2, r0
 8024322:	0112      	lsls	r2, r2, #4
 8024324:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024328:	eba2 0809 	sub.w	r8, r2, r9
 802432c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024330:	b280      	uxth	r0, r0
 8024332:	fa1f f888 	uxth.w	r8, r8
 8024336:	1a12      	subs	r2, r2, r0
 8024338:	fb08 f101 	mul.w	r1, r8, r1
 802433c:	b292      	uxth	r2, r2
 802433e:	fb02 110e 	mla	r1, r2, lr, r1
 8024342:	fb00 1104 	mla	r1, r0, r4, r1
 8024346:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024348:	fb09 1104 	mla	r1, r9, r4, r1
 802434c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024350:	2900      	cmp	r1, #0
 8024352:	f000 80de 	beq.w	8024512 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024356:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802435a:	d01b      	beq.n	8024394 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802435c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024360:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024364:	fb0e fa0a 	mul.w	sl, lr, sl
 8024368:	fb0e fe03 	mul.w	lr, lr, r3
 802436c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024370:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024374:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024378:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802437c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024380:	4453      	add	r3, sl
 8024382:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024386:	0a1b      	lsrs	r3, r3, #8
 8024388:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802438c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024390:	ea43 030c 	orr.w	r3, r3, ip
 8024394:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024396:	2cff      	cmp	r4, #255	; 0xff
 8024398:	d021      	beq.n	80243de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802439a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802439c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80243a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80243a2:	fb04 fb0b 	mul.w	fp, r4, fp
 80243a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80243a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80243ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80243ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80243b2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80243b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80243ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80243be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80243c2:	44de      	add	lr, fp
 80243c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80243c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80243cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80243d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80243d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80243d8:	ea4e 040a 	orr.w	r4, lr, sl
 80243dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80243de:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80243e0:	2cff      	cmp	r4, #255	; 0xff
 80243e2:	d021      	beq.n	8024428 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80243e4:	9c08      	ldr	r4, [sp, #32]
 80243e6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80243ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80243ec:	fb04 fb0b 	mul.w	fp, r4, fp
 80243f0:	9c08      	ldr	r4, [sp, #32]
 80243f2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80243f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80243f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80243fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024400:	fb04 fa0a 	mul.w	sl, r4, sl
 8024404:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024408:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802440c:	44de      	add	lr, fp
 802440e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024412:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024416:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802441a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802441e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024422:	ea4e 040a 	orr.w	r4, lr, sl
 8024426:	9408      	str	r4, [sp, #32]
 8024428:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802442a:	2cff      	cmp	r4, #255	; 0xff
 802442c:	d021      	beq.n	8024472 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802442e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024430:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024434:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024436:	fb04 fb0b 	mul.w	fp, r4, fp
 802443a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802443c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024440:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024442:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024446:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802444a:	fb04 fa0a 	mul.w	sl, r4, sl
 802444e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024452:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024456:	44de      	add	lr, fp
 8024458:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802445c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024460:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024464:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024468:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802446c:	ea4e 040a 	orr.w	r4, lr, sl
 8024470:	940c      	str	r4, [sp, #48]	; 0x30
 8024472:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024474:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024478:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802447c:	43c9      	mvns	r1, r1
 802447e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024482:	9c08      	ldr	r4, [sp, #32]
 8024484:	b2c9      	uxtb	r1, r1
 8024486:	fb08 fc0c 	mul.w	ip, r8, ip
 802448a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802448e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024492:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024494:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024498:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802449c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802449e:	fb09 cc0e 	mla	ip, r9, lr, ip
 80244a2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80244a6:	fb08 f80e 	mul.w	r8, r8, lr
 80244aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80244ae:	fb02 8303 	mla	r3, r2, r3, r8
 80244b2:	9a08      	ldr	r2, [sp, #32]
 80244b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80244b8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80244bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80244be:	fb00 330a 	mla	r3, r0, sl, r3
 80244c2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80244c6:	fb09 3900 	mla	r9, r9, r0, r3
 80244ca:	783b      	ldrb	r3, [r7, #0]
 80244cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80244d0:	fb03 f201 	mul.w	r2, r3, r1
 80244d4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80244d8:	1c53      	adds	r3, r2, #1
 80244da:	ea4c 0c09 	orr.w	ip, ip, r9
 80244de:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80244e2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80244e6:	703b      	strb	r3, [r7, #0]
 80244e8:	787b      	ldrb	r3, [r7, #1]
 80244ea:	434b      	muls	r3, r1
 80244ec:	1c5a      	adds	r2, r3, #1
 80244ee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80244f2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80244f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80244fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80244fe:	707b      	strb	r3, [r7, #1]
 8024500:	78bb      	ldrb	r3, [r7, #2]
 8024502:	4359      	muls	r1, r3
 8024504:	1c4b      	adds	r3, r1, #1
 8024506:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802450a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802450e:	f887 c002 	strb.w	ip, [r7, #2]
 8024512:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024514:	3703      	adds	r7, #3
 8024516:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024518:	441a      	add	r2, r3
 802451a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802451c:	441d      	add	r5, r3
 802451e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024520:	9225      	str	r2, [sp, #148]	; 0x94
 8024522:	3b01      	subs	r3, #1
 8024524:	9317      	str	r3, [sp, #92]	; 0x5c
 8024526:	e6b0      	b.n	802428a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024528:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802452a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802452c:	441c      	add	r4, r3
 802452e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024530:	441d      	add	r5, r3
 8024532:	9b07      	ldr	r3, [sp, #28]
 8024534:	9425      	str	r4, [sp, #148]	; 0x94
 8024536:	3b01      	subs	r3, #1
 8024538:	9307      	str	r3, [sp, #28]
 802453a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802453c:	3303      	adds	r3, #3
 802453e:	930a      	str	r3, [sp, #40]	; 0x28
 8024540:	e683      	b.n	802424a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024542:	d026      	beq.n	8024592 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8024544:	9b07      	ldr	r3, [sp, #28]
 8024546:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024548:	3b01      	subs	r3, #1
 802454a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802454c:	fb00 4003 	mla	r0, r0, r3, r4
 8024550:	1400      	asrs	r0, r0, #16
 8024552:	f53f ae97 	bmi.w	8024284 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024556:	3901      	subs	r1, #1
 8024558:	4288      	cmp	r0, r1
 802455a:	f6bf ae93 	bge.w	8024284 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802455e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024560:	fb01 5303 	mla	r3, r1, r3, r5
 8024564:	141b      	asrs	r3, r3, #16
 8024566:	f53f ae8d 	bmi.w	8024284 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802456a:	3a01      	subs	r2, #1
 802456c:	4293      	cmp	r3, r2
 802456e:	f6bf ae89 	bge.w	8024284 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024574:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024578:	f103 0e03 	add.w	lr, r3, #3
 802457c:	f1bb 0f00 	cmp.w	fp, #0
 8024580:	dc6d      	bgt.n	802465e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8024582:	9b07      	ldr	r3, [sp, #28]
 8024584:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802458a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802458e:	4423      	add	r3, r4
 8024590:	930a      	str	r3, [sp, #40]	; 0x28
 8024592:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024594:	2b00      	cmp	r3, #0
 8024596:	f340 81a0 	ble.w	80248da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802459a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802459e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80245a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80245a4:	eeb0 6a62 	vmov.f32	s12, s5
 80245a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80245ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 80245b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80245b4:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80245b8:	eeb0 6a43 	vmov.f32	s12, s6
 80245bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80245c0:	ee16 5a10 	vmov	r5, s12
 80245c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80245c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80245cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80245d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80245d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80245d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80245dc:	ee12 2a90 	vmov	r2, s5
 80245e0:	eef0 2a47 	vmov.f32	s5, s14
 80245e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80245e8:	ee13 2a10 	vmov	r2, s6
 80245ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80245ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80245f0:	eeb0 3a67 	vmov.f32	s6, s15
 80245f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80245f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80245fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80245fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80245fe:	3b01      	subs	r3, #1
 8024600:	9316      	str	r3, [sp, #88]	; 0x58
 8024602:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024604:	bf08      	it	eq
 8024606:	4613      	moveq	r3, r2
 8024608:	9307      	str	r3, [sp, #28]
 802460a:	e610      	b.n	802422e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802460c:	2800      	cmp	r0, #0
 802460e:	f43f ae82 	beq.w	8024316 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024612:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024616:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802461a:	9108      	str	r1, [sp, #32]
 802461c:	0e09      	lsrs	r1, r1, #24
 802461e:	9110      	str	r1, [sp, #64]	; 0x40
 8024620:	e679      	b.n	8024316 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024622:	f113 0801 	adds.w	r8, r3, #1
 8024626:	f53f af74 	bmi.w	8024512 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802462a:	4541      	cmp	r1, r8
 802462c:	f6ff af71 	blt.w	8024512 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024630:	f11c 0801 	adds.w	r8, ip, #1
 8024634:	f53f af6d 	bmi.w	8024512 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024638:	45c6      	cmp	lr, r8
 802463a:	f6ff af6a 	blt.w	8024512 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802463e:	b209      	sxth	r1, r1
 8024640:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024644:	fa0f f38e 	sxth.w	r3, lr
 8024648:	9100      	str	r1, [sp, #0]
 802464a:	4639      	mov	r1, r7
 802464c:	9301      	str	r3, [sp, #4]
 802464e:	4633      	mov	r3, r6
 8024650:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8024654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024656:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024658:	f7ff fca3 	bl	8023fa2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 802465c:	e759      	b.n	8024512 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802465e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024660:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024664:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024666:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802466a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802466c:	1427      	asrs	r7, r4, #16
 802466e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024670:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024674:	142b      	asrs	r3, r5, #16
 8024676:	fb01 7303 	mla	r3, r1, r3, r7
 802467a:	18e7      	adds	r7, r4, r3
 802467c:	5ce3      	ldrb	r3, [r4, r3]
 802467e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024682:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024686:	2a00      	cmp	r2, #0
 8024688:	f000 811d 	beq.w	80248c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 802468c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024690:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8024694:	940d      	str	r4, [sp, #52]	; 0x34
 8024696:	0e24      	lsrs	r4, r4, #24
 8024698:	9414      	str	r4, [sp, #80]	; 0x50
 802469a:	b170      	cbz	r0, 80246ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802469c:	eb07 0801 	add.w	r8, r7, r1
 80246a0:	5c79      	ldrb	r1, [r7, r1]
 80246a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80246a6:	9109      	str	r1, [sp, #36]	; 0x24
 80246a8:	0e09      	lsrs	r1, r1, #24
 80246aa:	9111      	str	r1, [sp, #68]	; 0x44
 80246ac:	f898 1001 	ldrb.w	r1, [r8, #1]
 80246b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80246b4:	910e      	str	r1, [sp, #56]	; 0x38
 80246b6:	0e09      	lsrs	r1, r1, #24
 80246b8:	9115      	str	r1, [sp, #84]	; 0x54
 80246ba:	b292      	uxth	r2, r2
 80246bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80246be:	b280      	uxth	r0, r0
 80246c0:	fb02 f900 	mul.w	r9, r2, r0
 80246c4:	0112      	lsls	r2, r2, #4
 80246c6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80246ca:	eba2 0809 	sub.w	r8, r2, r9
 80246ce:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80246d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80246d4:	b280      	uxth	r0, r0
 80246d6:	fa1f f888 	uxth.w	r8, r8
 80246da:	1a09      	subs	r1, r1, r0
 80246dc:	fb08 f202 	mul.w	r2, r8, r2
 80246e0:	b289      	uxth	r1, r1
 80246e2:	fb01 220c 	mla	r2, r1, ip, r2
 80246e6:	fb00 2204 	mla	r2, r0, r4, r2
 80246ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80246ec:	fb09 2204 	mla	r2, r9, r4, r2
 80246f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80246f4:	2a00      	cmp	r2, #0
 80246f6:	f000 80db 	beq.w	80248b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80246fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80246fe:	d019      	beq.n	8024734 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8024700:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024704:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024708:	fb0c fa0a 	mul.w	sl, ip, sl
 802470c:	fb0c fc03 	mul.w	ip, ip, r3
 8024710:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024714:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024718:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802471c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024720:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024724:	4453      	add	r3, sl
 8024726:	0a3f      	lsrs	r7, r7, #8
 8024728:	0a1b      	lsrs	r3, r3, #8
 802472a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802472e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024732:	433b      	orrs	r3, r7
 8024734:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024736:	2cff      	cmp	r4, #255	; 0xff
 8024738:	d020      	beq.n	802477c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 802473a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802473c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024740:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024742:	4367      	muls	r7, r4
 8024744:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024746:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802474a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802474e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024750:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024754:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024758:	fb04 fa0a 	mul.w	sl, r4, sl
 802475c:	44bc      	add	ip, r7
 802475e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024762:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024766:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802476a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802476e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024772:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024776:	ea4c 040a 	orr.w	r4, ip, sl
 802477a:	940d      	str	r4, [sp, #52]	; 0x34
 802477c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802477e:	2cff      	cmp	r4, #255	; 0xff
 8024780:	d020      	beq.n	80247c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8024782:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024784:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024788:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802478a:	4367      	muls	r7, r4
 802478c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802478e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024792:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024796:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024798:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802479c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80247a4:	44bc      	add	ip, r7
 80247a6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80247aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80247b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80247ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80247be:	ea4c 040a 	orr.w	r4, ip, sl
 80247c2:	9409      	str	r4, [sp, #36]	; 0x24
 80247c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80247c6:	2cff      	cmp	r4, #255	; 0xff
 80247c8:	d020      	beq.n	802480c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80247ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80247cc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80247d0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80247d2:	4367      	muls	r7, r4
 80247d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80247d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80247da:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80247de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80247e0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80247e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247e8:	fb04 fa0a 	mul.w	sl, r4, sl
 80247ec:	44bc      	add	ip, r7
 80247ee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80247f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247f6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80247fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024802:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024806:	ea4c 040a 	orr.w	r4, ip, sl
 802480a:	940e      	str	r4, [sp, #56]	; 0x38
 802480c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802480e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024812:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024816:	43d2      	mvns	r2, r2
 8024818:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802481c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802481e:	b2d2      	uxtb	r2, r2
 8024820:	fb08 f707 	mul.w	r7, r8, r7
 8024824:	fb01 770c 	mla	r7, r1, ip, r7
 8024828:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802482c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802482e:	fb00 770c 	mla	r7, r0, ip, r7
 8024832:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024836:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024838:	fb09 770c 	mla	r7, r9, ip, r7
 802483c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024840:	fb08 f80c 	mul.w	r8, r8, ip
 8024844:	0a3f      	lsrs	r7, r7, #8
 8024846:	fb01 8303 	mla	r3, r1, r3, r8
 802484a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802484c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024850:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024854:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024856:	fb00 330a 	mla	r3, r0, sl, r3
 802485a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802485e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024862:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8024866:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802486a:	fb03 f102 	mul.w	r1, r3, r2
 802486e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024872:	1c4b      	adds	r3, r1, #1
 8024874:	ea47 070c 	orr.w	r7, r7, ip
 8024878:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802487c:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8024880:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024884:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8024888:	4353      	muls	r3, r2
 802488a:	1c59      	adds	r1, r3, #1
 802488c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024890:	0a3b      	lsrs	r3, r7, #8
 8024892:	0c3f      	lsrs	r7, r7, #16
 8024894:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024898:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802489c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80248a0:	435a      	muls	r2, r3
 80248a2:	1c53      	adds	r3, r2, #1
 80248a4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80248a8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80248ac:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80248b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80248b2:	f10e 0e03 	add.w	lr, lr, #3
 80248b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80248b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80248bc:	441a      	add	r2, r3
 80248be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80248c0:	9225      	str	r2, [sp, #148]	; 0x94
 80248c2:	441d      	add	r5, r3
 80248c4:	e65a      	b.n	802457c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80248c6:	2800      	cmp	r0, #0
 80248c8:	f43f aef7 	beq.w	80246ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80248cc:	5c79      	ldrb	r1, [r7, r1]
 80248ce:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80248d2:	9109      	str	r1, [sp, #36]	; 0x24
 80248d4:	0e09      	lsrs	r1, r1, #24
 80248d6:	9111      	str	r1, [sp, #68]	; 0x44
 80248d8:	e6ef      	b.n	80246ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80248da:	b01b      	add	sp, #108	; 0x6c
 80248dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080248e0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80248e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248e4:	b08d      	sub	sp, #52	; 0x34
 80248e6:	468b      	mov	fp, r1
 80248e8:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 80248ec:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80248f0:	fb0c 5703 	mla	r7, ip, r3, r5
 80248f4:	f1bc 0f00 	cmp.w	ip, #0
 80248f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80248fa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80248fe:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8024902:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8024906:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 802490a:	eb02 0607 	add.w	r6, r2, r7
 802490e:	f89b 4000 	ldrb.w	r4, [fp]
 8024912:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8024916:	f89b 1002 	ldrb.w	r1, [fp, #2]
 802491a:	f2c0 80c1 	blt.w	8024aa0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 802491e:	45e6      	cmp	lr, ip
 8024920:	f340 80be 	ble.w	8024aa0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8024924:	2d00      	cmp	r5, #0
 8024926:	f2c0 80b7 	blt.w	8024a98 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802492a:	42ab      	cmp	r3, r5
 802492c:	f340 80b4 	ble.w	8024a98 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8024930:	5dd2      	ldrb	r2, [r2, r7]
 8024932:	9205      	str	r2, [sp, #20]
 8024934:	7872      	ldrb	r2, [r6, #1]
 8024936:	9206      	str	r2, [sp, #24]
 8024938:	78b2      	ldrb	r2, [r6, #2]
 802493a:	9207      	str	r2, [sp, #28]
 802493c:	1c6a      	adds	r2, r5, #1
 802493e:	f100 80b6 	bmi.w	8024aae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024942:	4293      	cmp	r3, r2
 8024944:	f340 80b3 	ble.w	8024aae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024948:	f1b8 0f00 	cmp.w	r8, #0
 802494c:	f000 80af 	beq.w	8024aae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024950:	78f2      	ldrb	r2, [r6, #3]
 8024952:	9201      	str	r2, [sp, #4]
 8024954:	7932      	ldrb	r2, [r6, #4]
 8024956:	9202      	str	r2, [sp, #8]
 8024958:	7972      	ldrb	r2, [r6, #5]
 802495a:	9203      	str	r2, [sp, #12]
 802495c:	f11c 0c01 	adds.w	ip, ip, #1
 8024960:	f100 80ad 	bmi.w	8024abe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8024964:	45e6      	cmp	lr, ip
 8024966:	f340 80aa 	ble.w	8024abe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802496a:	f1ba 0f00 	cmp.w	sl, #0
 802496e:	f000 80a6 	beq.w	8024abe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8024972:	2d00      	cmp	r5, #0
 8024974:	f2c0 809f 	blt.w	8024ab6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8024978:	42ab      	cmp	r3, r5
 802497a:	f340 809c 	ble.w	8024ab6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 802497e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8024982:	f816 9002 	ldrb.w	r9, [r6, r2]
 8024986:	2203      	movs	r2, #3
 8024988:	fb03 6c02 	mla	ip, r3, r2, r6
 802498c:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8024990:	f89c e002 	ldrb.w	lr, [ip, #2]
 8024994:	9704      	str	r7, [sp, #16]
 8024996:	3501      	adds	r5, #1
 8024998:	f100 8098 	bmi.w	8024acc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 802499c:	42ab      	cmp	r3, r5
 802499e:	f340 8095 	ble.w	8024acc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80249a2:	f1b8 0f00 	cmp.w	r8, #0
 80249a6:	f000 8091 	beq.w	8024acc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80249aa:	f04f 0c03 	mov.w	ip, #3
 80249ae:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80249b2:	5cb5      	ldrb	r5, [r6, r2]
 80249b4:	fb03 620c 	mla	r2, r3, ip, r6
 80249b8:	fb03 630c 	mla	r3, r3, ip, r6
 80249bc:	7912      	ldrb	r2, [r2, #4]
 80249be:	795e      	ldrb	r6, [r3, #5]
 80249c0:	fa1f f388 	uxth.w	r3, r8
 80249c4:	fa1f fc8a 	uxth.w	ip, sl
 80249c8:	fb03 f70c 	mul.w	r7, r3, ip
 80249cc:	011b      	lsls	r3, r3, #4
 80249ce:	9708      	str	r7, [sp, #32]
 80249d0:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80249d4:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 80249d8:	1bdb      	subs	r3, r3, r7
 80249da:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80249de:	fa1f fc8c 	uxth.w	ip, ip
 80249e2:	b29b      	uxth	r3, r3
 80249e4:	9709      	str	r7, [sp, #36]	; 0x24
 80249e6:	ebaa 0a0c 	sub.w	sl, sl, ip
 80249ea:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80249ec:	930a      	str	r3, [sp, #40]	; 0x28
 80249ee:	fa1f fa8a 	uxth.w	sl, sl
 80249f2:	ea6f 0807 	mvn.w	r8, r7
 80249f6:	9f01      	ldr	r7, [sp, #4]
 80249f8:	435f      	muls	r7, r3
 80249fa:	9b05      	ldr	r3, [sp, #20]
 80249fc:	fa5f f888 	uxtb.w	r8, r8
 8024a00:	fb0a 7703 	mla	r7, sl, r3, r7
 8024a04:	9b08      	ldr	r3, [sp, #32]
 8024a06:	fb14 f408 	smulbb	r4, r4, r8
 8024a0a:	fb0c 7709 	mla	r7, ip, r9, r7
 8024a0e:	fb10 f008 	smulbb	r0, r0, r8
 8024a12:	fb11 f108 	smulbb	r1, r1, r8
 8024a16:	fb03 7705 	mla	r7, r3, r5, r7
 8024a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a1c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024a20:	fb07 4703 	mla	r7, r7, r3, r4
 8024a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a26:	b2bf      	uxth	r7, r7
 8024a28:	1c7c      	adds	r4, r7, #1
 8024a2a:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8024a2e:	1224      	asrs	r4, r4, #8
 8024a30:	f88b 4000 	strb.w	r4, [fp]
 8024a34:	9c02      	ldr	r4, [sp, #8]
 8024a36:	435c      	muls	r4, r3
 8024a38:	9b06      	ldr	r3, [sp, #24]
 8024a3a:	fb0a 4403 	mla	r4, sl, r3, r4
 8024a3e:	9b04      	ldr	r3, [sp, #16]
 8024a40:	fb0c 4403 	mla	r4, ip, r3, r4
 8024a44:	9b08      	ldr	r3, [sp, #32]
 8024a46:	fb03 4402 	mla	r4, r3, r2, r4
 8024a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024a4e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024a52:	fb04 0403 	mla	r4, r4, r3, r0
 8024a56:	9b03      	ldr	r3, [sp, #12]
 8024a58:	435a      	muls	r2, r3
 8024a5a:	b2a4      	uxth	r4, r4
 8024a5c:	4613      	mov	r3, r2
 8024a5e:	9a07      	ldr	r2, [sp, #28]
 8024a60:	1c60      	adds	r0, r4, #1
 8024a62:	fb0a 3a02 	mla	sl, sl, r2, r3
 8024a66:	9b08      	ldr	r3, [sp, #32]
 8024a68:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8024a6c:	fb0c ac0e 	mla	ip, ip, lr, sl
 8024a70:	1224      	asrs	r4, r4, #8
 8024a72:	fb03 c606 	mla	r6, r3, r6, ip
 8024a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a78:	f88b 4001 	strb.w	r4, [fp, #1]
 8024a7c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024a80:	fb06 1103 	mla	r1, r6, r3, r1
 8024a84:	b289      	uxth	r1, r1
 8024a86:	1c4e      	adds	r6, r1, #1
 8024a88:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8024a8c:	1209      	asrs	r1, r1, #8
 8024a8e:	f88b 1002 	strb.w	r1, [fp, #2]
 8024a92:	b00d      	add	sp, #52	; 0x34
 8024a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024a9c:	9405      	str	r4, [sp, #20]
 8024a9e:	e74d      	b.n	802493c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8024aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024aa4:	9401      	str	r4, [sp, #4]
 8024aa6:	9405      	str	r4, [sp, #20]
 8024aa8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024aac:	e756      	b.n	802495c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8024aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024ab2:	9401      	str	r4, [sp, #4]
 8024ab4:	e752      	b.n	802495c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8024ab6:	468e      	mov	lr, r1
 8024ab8:	9004      	str	r0, [sp, #16]
 8024aba:	46a1      	mov	r9, r4
 8024abc:	e76b      	b.n	8024996 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8024abe:	460e      	mov	r6, r1
 8024ac0:	4602      	mov	r2, r0
 8024ac2:	4625      	mov	r5, r4
 8024ac4:	468e      	mov	lr, r1
 8024ac6:	9004      	str	r0, [sp, #16]
 8024ac8:	46a1      	mov	r9, r4
 8024aca:	e779      	b.n	80249c0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8024acc:	460e      	mov	r6, r1
 8024ace:	4602      	mov	r2, r0
 8024ad0:	4625      	mov	r5, r4
 8024ad2:	e775      	b.n	80249c0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08024ad4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ad8:	b09f      	sub	sp, #124	; 0x7c
 8024ada:	920e      	str	r2, [sp, #56]	; 0x38
 8024adc:	9307      	str	r3, [sp, #28]
 8024ade:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024ae0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024ae4:	901d      	str	r0, [sp, #116]	; 0x74
 8024ae6:	930c      	str	r3, [sp, #48]	; 0x30
 8024ae8:	6850      	ldr	r0, [r2, #4]
 8024aea:	910b      	str	r1, [sp, #44]	; 0x2c
 8024aec:	6812      	ldr	r2, [r2, #0]
 8024aee:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024af2:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8024af6:	fb00 1303 	mla	r3, r0, r3, r1
 8024afa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024afe:	18d3      	adds	r3, r2, r3
 8024b00:	9308      	str	r3, [sp, #32]
 8024b02:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024b04:	681b      	ldr	r3, [r3, #0]
 8024b06:	930a      	str	r3, [sp, #40]	; 0x28
 8024b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b0a:	43db      	mvns	r3, r3
 8024b0c:	b2db      	uxtb	r3, r3
 8024b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8024b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	dc03      	bgt.n	8024b1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024b18:	2b00      	cmp	r3, #0
 8024b1a:	f340 81f5 	ble.w	8024f08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024b1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024b20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024b24:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024b28:	1e48      	subs	r0, r1, #1
 8024b2a:	1e54      	subs	r4, r2, #1
 8024b2c:	9b07      	ldr	r3, [sp, #28]
 8024b2e:	2b00      	cmp	r3, #0
 8024b30:	f340 80d5 	ble.w	8024cde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8024b34:	ea5f 452a 	movs.w	r5, sl, asr #16
 8024b38:	ea4f 4328 	mov.w	r3, r8, asr #16
 8024b3c:	d406      	bmi.n	8024b4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024b3e:	4285      	cmp	r5, r0
 8024b40:	da04      	bge.n	8024b4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024b42:	2b00      	cmp	r3, #0
 8024b44:	db02      	blt.n	8024b4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024b46:	42a3      	cmp	r3, r4
 8024b48:	f2c0 80ca 	blt.w	8024ce0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024b4c:	3501      	adds	r5, #1
 8024b4e:	f100 80bb 	bmi.w	8024cc8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024b52:	42a9      	cmp	r1, r5
 8024b54:	f2c0 80b8 	blt.w	8024cc8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024b58:	3301      	adds	r3, #1
 8024b5a:	f100 80b5 	bmi.w	8024cc8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024b5e:	429a      	cmp	r2, r3
 8024b60:	f2c0 80b2 	blt.w	8024cc8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024b64:	9b07      	ldr	r3, [sp, #28]
 8024b66:	9d08      	ldr	r5, [sp, #32]
 8024b68:	930d      	str	r3, [sp, #52]	; 0x34
 8024b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024b6c:	2b00      	cmp	r3, #0
 8024b6e:	f340 80d6 	ble.w	8024d1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8024b72:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8024b74:	ea4f 4428 	mov.w	r4, r8, asr #16
 8024b78:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024b7a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8024b7e:	68c6      	ldr	r6, [r0, #12]
 8024b80:	ea5f 402a 	movs.w	r0, sl, asr #16
 8024b84:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8024b88:	689b      	ldr	r3, [r3, #8]
 8024b8a:	f100 810f 	bmi.w	8024dac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024b8e:	1e5f      	subs	r7, r3, #1
 8024b90:	42b8      	cmp	r0, r7
 8024b92:	f280 810b 	bge.w	8024dac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024b96:	2c00      	cmp	r4, #0
 8024b98:	f2c0 8108 	blt.w	8024dac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024b9c:	1e77      	subs	r7, r6, #1
 8024b9e:	42bc      	cmp	r4, r7
 8024ba0:	f280 8104 	bge.w	8024dac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024ba4:	b21b      	sxth	r3, r3
 8024ba6:	fb04 0003 	mla	r0, r4, r3, r0
 8024baa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024bac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024bb0:	1826      	adds	r6, r4, r0
 8024bb2:	5c24      	ldrb	r4, [r4, r0]
 8024bb4:	78b7      	ldrb	r7, [r6, #2]
 8024bb6:	7870      	ldrb	r0, [r6, #1]
 8024bb8:	970f      	str	r7, [sp, #60]	; 0x3c
 8024bba:	7977      	ldrb	r7, [r6, #5]
 8024bbc:	f896 e003 	ldrb.w	lr, [r6, #3]
 8024bc0:	f896 c004 	ldrb.w	ip, [r6, #4]
 8024bc4:	9710      	str	r7, [sp, #64]	; 0x40
 8024bc6:	b1c9      	cbz	r1, 8024bfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8024bc8:	f04f 0b03 	mov.w	fp, #3
 8024bcc:	f06f 0904 	mvn.w	r9, #4
 8024bd0:	3605      	adds	r6, #5
 8024bd2:	fb13 930b 	smlabb	r3, r3, fp, r9
 8024bd6:	eb06 0b03 	add.w	fp, r6, r3
 8024bda:	5cf3      	ldrb	r3, [r6, r3]
 8024bdc:	9311      	str	r3, [sp, #68]	; 0x44
 8024bde:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8024be2:	9313      	str	r3, [sp, #76]	; 0x4c
 8024be4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8024be8:	9315      	str	r3, [sp, #84]	; 0x54
 8024bea:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8024bee:	9312      	str	r3, [sp, #72]	; 0x48
 8024bf0:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8024bf4:	9314      	str	r3, [sp, #80]	; 0x50
 8024bf6:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8024bfa:	9316      	str	r3, [sp, #88]	; 0x58
 8024bfc:	b292      	uxth	r2, r2
 8024bfe:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8024c00:	b289      	uxth	r1, r1
 8024c02:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8024c06:	fb02 f601 	mul.w	r6, r2, r1
 8024c0a:	0112      	lsls	r2, r2, #4
 8024c0c:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8024c10:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8024c14:	1b92      	subs	r2, r2, r6
 8024c16:	b289      	uxth	r1, r1
 8024c18:	b292      	uxth	r2, r2
 8024c1a:	eba9 0901 	sub.w	r9, r9, r1
 8024c1e:	fb02 fe0e 	mul.w	lr, r2, lr
 8024c22:	fa1f f989 	uxth.w	r9, r9
 8024c26:	fb02 fc0c 	mul.w	ip, r2, ip
 8024c2a:	fb09 e404 	mla	r4, r9, r4, lr
 8024c2e:	f895 e000 	ldrb.w	lr, [r5]
 8024c32:	fb09 c000 	mla	r0, r9, r0, ip
 8024c36:	fb01 4407 	mla	r4, r1, r7, r4
 8024c3a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8024c3c:	fb06 4407 	mla	r4, r6, r7, r4
 8024c40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024c42:	fb1e fe07 	smulbb	lr, lr, r7
 8024c46:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024c4a:	fb04 e403 	mla	r4, r4, r3, lr
 8024c4e:	b2a4      	uxth	r4, r4
 8024c50:	f104 0e01 	add.w	lr, r4, #1
 8024c54:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8024c58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024c5a:	fb01 0004 	mla	r0, r1, r4, r0
 8024c5e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024c60:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024c64:	fb06 0004 	mla	r0, r6, r4, r0
 8024c68:	786c      	ldrb	r4, [r5, #1]
 8024c6a:	f885 e000 	strb.w	lr, [r5]
 8024c6e:	fb14 f407 	smulbb	r4, r4, r7
 8024c72:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024c76:	fb00 4003 	mla	r0, r0, r3, r4
 8024c7a:	b280      	uxth	r0, r0
 8024c7c:	1c44      	adds	r4, r0, #1
 8024c7e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8024c82:	1200      	asrs	r0, r0, #8
 8024c84:	7068      	strb	r0, [r5, #1]
 8024c86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024c88:	4342      	muls	r2, r0
 8024c8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024c8c:	fb09 2200 	mla	r2, r9, r0, r2
 8024c90:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024c92:	fb01 2100 	mla	r1, r1, r0, r2
 8024c96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024c98:	fb06 1602 	mla	r6, r6, r2, r1
 8024c9c:	78a9      	ldrb	r1, [r5, #2]
 8024c9e:	fb11 f107 	smulbb	r1, r1, r7
 8024ca2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024ca6:	fb06 1303 	mla	r3, r6, r3, r1
 8024caa:	b29b      	uxth	r3, r3
 8024cac:	1c5e      	adds	r6, r3, #1
 8024cae:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8024cb2:	121b      	asrs	r3, r3, #8
 8024cb4:	70ab      	strb	r3, [r5, #2]
 8024cb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024cb8:	3503      	adds	r5, #3
 8024cba:	449a      	add	sl, r3
 8024cbc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024cbe:	4498      	add	r8, r3
 8024cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024cc2:	3b01      	subs	r3, #1
 8024cc4:	930d      	str	r3, [sp, #52]	; 0x34
 8024cc6:	e750      	b.n	8024b6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024cc8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024cca:	449a      	add	sl, r3
 8024ccc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024cce:	4498      	add	r8, r3
 8024cd0:	9b07      	ldr	r3, [sp, #28]
 8024cd2:	3b01      	subs	r3, #1
 8024cd4:	9307      	str	r3, [sp, #28]
 8024cd6:	9b08      	ldr	r3, [sp, #32]
 8024cd8:	3303      	adds	r3, #3
 8024cda:	9308      	str	r3, [sp, #32]
 8024cdc:	e726      	b.n	8024b2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024cde:	d026      	beq.n	8024d2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8024ce0:	9b07      	ldr	r3, [sp, #28]
 8024ce2:	982b      	ldr	r0, [sp, #172]	; 0xac
 8024ce4:	3b01      	subs	r3, #1
 8024ce6:	fb00 a003 	mla	r0, r0, r3, sl
 8024cea:	1400      	asrs	r0, r0, #16
 8024cec:	f53f af3a 	bmi.w	8024b64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024cf0:	3901      	subs	r1, #1
 8024cf2:	4288      	cmp	r0, r1
 8024cf4:	f6bf af36 	bge.w	8024b64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024cf8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8024cfa:	fb01 8303 	mla	r3, r1, r3, r8
 8024cfe:	141b      	asrs	r3, r3, #16
 8024d00:	f53f af30 	bmi.w	8024b64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024d04:	3a01      	subs	r2, #1
 8024d06:	4293      	cmp	r3, r2
 8024d08:	f6bf af2c 	bge.w	8024b64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024d0c:	9b08      	ldr	r3, [sp, #32]
 8024d0e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8024d12:	1cdd      	adds	r5, r3, #3
 8024d14:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8024d18:	f1bc 0f00 	cmp.w	ip, #0
 8024d1c:	dc5f      	bgt.n	8024dde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8024d1e:	9b07      	ldr	r3, [sp, #28]
 8024d20:	9a08      	ldr	r2, [sp, #32]
 8024d22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024d26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024d2a:	441a      	add	r2, r3
 8024d2c:	9208      	str	r2, [sp, #32]
 8024d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d30:	2b00      	cmp	r3, #0
 8024d32:	f340 80e9 	ble.w	8024f08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024d3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024d3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024d40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024d44:	eef0 6a62 	vmov.f32	s13, s5
 8024d48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024d4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024d50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d54:	ee16 aa90 	vmov	sl, s13
 8024d58:	eef0 6a43 	vmov.f32	s13, s6
 8024d5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d60:	ee16 8a90 	vmov	r8, s13
 8024d64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024d68:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024d6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024d70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024d74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024d78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024d7c:	ee12 2a90 	vmov	r2, s5
 8024d80:	eef0 2a47 	vmov.f32	s5, s14
 8024d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d88:	ee13 2a10 	vmov	r2, s6
 8024d8c:	932b      	str	r3, [sp, #172]	; 0xac
 8024d8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024d90:	eeb0 3a67 	vmov.f32	s6, s15
 8024d94:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d98:	932c      	str	r3, [sp, #176]	; 0xb0
 8024d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024d9e:	3b01      	subs	r3, #1
 8024da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8024da2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024da4:	bf08      	it	eq
 8024da6:	4613      	moveq	r3, r2
 8024da8:	9307      	str	r3, [sp, #28]
 8024daa:	e6b1      	b.n	8024b10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024dac:	1c47      	adds	r7, r0, #1
 8024dae:	d482      	bmi.n	8024cb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024db0:	42bb      	cmp	r3, r7
 8024db2:	db80      	blt.n	8024cb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024db4:	1c67      	adds	r7, r4, #1
 8024db6:	f53f af7e 	bmi.w	8024cb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024dba:	42be      	cmp	r6, r7
 8024dbc:	f6ff af7b 	blt.w	8024cb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024dc0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024dc2:	b236      	sxth	r6, r6
 8024dc4:	9001      	str	r0, [sp, #4]
 8024dc6:	b21b      	sxth	r3, r3
 8024dc8:	9600      	str	r6, [sp, #0]
 8024dca:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024dcc:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8024dd0:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8024dd4:	4629      	mov	r1, r5
 8024dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024dd8:	f7ff fd82 	bl	80248e0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8024ddc:	e76b      	b.n	8024cb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024dde:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8024de0:	ea4f 402a 	mov.w	r0, sl, asr #16
 8024de4:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8024de8:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8024dec:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8024df0:	ea4f 4128 	mov.w	r1, r8, asr #16
 8024df4:	fb07 0101 	mla	r1, r7, r1, r0
 8024df8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024dfa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024dfe:	1844      	adds	r4, r0, r1
 8024e00:	5c40      	ldrb	r0, [r0, r1]
 8024e02:	78a6      	ldrb	r6, [r4, #2]
 8024e04:	7861      	ldrb	r1, [r4, #1]
 8024e06:	960f      	str	r6, [sp, #60]	; 0x3c
 8024e08:	78e6      	ldrb	r6, [r4, #3]
 8024e0a:	910d      	str	r1, [sp, #52]	; 0x34
 8024e0c:	9610      	str	r6, [sp, #64]	; 0x40
 8024e0e:	f894 9004 	ldrb.w	r9, [r4, #4]
 8024e12:	f894 b005 	ldrb.w	fp, [r4, #5]
 8024e16:	b192      	cbz	r2, 8024e3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8024e18:	f06f 0604 	mvn.w	r6, #4
 8024e1c:	2103      	movs	r1, #3
 8024e1e:	3405      	adds	r4, #5
 8024e20:	fb17 6701 	smlabb	r7, r7, r1, r6
 8024e24:	19e6      	adds	r6, r4, r7
 8024e26:	5de4      	ldrb	r4, [r4, r7]
 8024e28:	9417      	str	r4, [sp, #92]	; 0x5c
 8024e2a:	7874      	ldrb	r4, [r6, #1]
 8024e2c:	9419      	str	r4, [sp, #100]	; 0x64
 8024e2e:	78b4      	ldrb	r4, [r6, #2]
 8024e30:	941b      	str	r4, [sp, #108]	; 0x6c
 8024e32:	78f4      	ldrb	r4, [r6, #3]
 8024e34:	9418      	str	r4, [sp, #96]	; 0x60
 8024e36:	7934      	ldrb	r4, [r6, #4]
 8024e38:	941a      	str	r4, [sp, #104]	; 0x68
 8024e3a:	7974      	ldrb	r4, [r6, #5]
 8024e3c:	941c      	str	r4, [sp, #112]	; 0x70
 8024e3e:	b29b      	uxth	r3, r3
 8024e40:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024e42:	b292      	uxth	r2, r2
 8024e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024e46:	3503      	adds	r5, #3
 8024e48:	f10c 3cff 	add.w	ip, ip, #4294967295
 8024e4c:	fb03 f402 	mul.w	r4, r3, r2
 8024e50:	011b      	lsls	r3, r3, #4
 8024e52:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8024e56:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8024e5a:	1b1b      	subs	r3, r3, r4
 8024e5c:	b292      	uxth	r2, r2
 8024e5e:	b29b      	uxth	r3, r3
 8024e60:	1ab6      	subs	r6, r6, r2
 8024e62:	435f      	muls	r7, r3
 8024e64:	b2b6      	uxth	r6, r6
 8024e66:	fb03 f909 	mul.w	r9, r3, r9
 8024e6a:	fb03 fb0b 	mul.w	fp, r3, fp
 8024e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024e70:	fb06 7000 	mla	r0, r6, r0, r7
 8024e74:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8024e76:	fb06 bb03 	mla	fp, r6, r3, fp
 8024e7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024e7c:	fb02 0007 	mla	r0, r2, r7, r0
 8024e80:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8024e82:	fb02 bb03 	mla	fp, r2, r3, fp
 8024e86:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024e88:	fb04 0007 	mla	r0, r4, r7, r0
 8024e8c:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8024e90:	fb17 f701 	smulbb	r7, r7, r1
 8024e94:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024e98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024e9a:	fb00 700e 	mla	r0, r0, lr, r7
 8024e9e:	fb06 9101 	mla	r1, r6, r1, r9
 8024ea2:	b280      	uxth	r0, r0
 8024ea4:	1c47      	adds	r7, r0, #1
 8024ea6:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8024eaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024eac:	1200      	asrs	r0, r0, #8
 8024eae:	f805 0c06 	strb.w	r0, [r5, #-6]
 8024eb2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024eb4:	fb02 1100 	mla	r1, r2, r0, r1
 8024eb8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8024eba:	fb04 1100 	mla	r1, r4, r0, r1
 8024ebe:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8024ec2:	fb04 b403 	mla	r4, r4, r3, fp
 8024ec6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8024eca:	fb10 f007 	smulbb	r0, r0, r7
 8024ece:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024ed2:	fb13 f307 	smulbb	r3, r3, r7
 8024ed6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024eda:	fb01 010e 	mla	r1, r1, lr, r0
 8024ede:	fb04 340e 	mla	r4, r4, lr, r3
 8024ee2:	b289      	uxth	r1, r1
 8024ee4:	b2a4      	uxth	r4, r4
 8024ee6:	1c48      	adds	r0, r1, #1
 8024ee8:	1c63      	adds	r3, r4, #1
 8024eea:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024eee:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024ef2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024ef4:	1209      	asrs	r1, r1, #8
 8024ef6:	1224      	asrs	r4, r4, #8
 8024ef8:	449a      	add	sl, r3
 8024efa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024efc:	f805 1c05 	strb.w	r1, [r5, #-5]
 8024f00:	f805 4c04 	strb.w	r4, [r5, #-4]
 8024f04:	4498      	add	r8, r3
 8024f06:	e707      	b.n	8024d18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024f08:	b01f      	add	sp, #124	; 0x7c
 8024f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024f0e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8024f0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f12:	b087      	sub	sp, #28
 8024f14:	780d      	ldrb	r5, [r1, #0]
 8024f16:	784c      	ldrb	r4, [r1, #1]
 8024f18:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8024f1c:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8024f20:	9004      	str	r0, [sp, #16]
 8024f22:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8024f26:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8024f2a:	9005      	str	r0, [sp, #20]
 8024f2c:	fb06 bc03 	mla	ip, r6, r3, fp
 8024f30:	2e00      	cmp	r6, #0
 8024f32:	7888      	ldrb	r0, [r1, #2]
 8024f34:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024f38:	eb02 090c 	add.w	r9, r2, ip
 8024f3c:	f2c0 8084 	blt.w	8025048 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8024f40:	42b7      	cmp	r7, r6
 8024f42:	f340 8081 	ble.w	8025048 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8024f46:	f1bb 0f00 	cmp.w	fp, #0
 8024f4a:	db79      	blt.n	8025040 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8024f4c:	455b      	cmp	r3, fp
 8024f4e:	dd77      	ble.n	8025040 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8024f50:	f812 200c 	ldrb.w	r2, [r2, ip]
 8024f54:	9201      	str	r2, [sp, #4]
 8024f56:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024f5a:	9202      	str	r2, [sp, #8]
 8024f5c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8024f60:	9203      	str	r2, [sp, #12]
 8024f62:	f11b 0201 	adds.w	r2, fp, #1
 8024f66:	d476      	bmi.n	8025056 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8024f68:	4293      	cmp	r3, r2
 8024f6a:	dd74      	ble.n	8025056 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8024f6c:	9a04      	ldr	r2, [sp, #16]
 8024f6e:	2a00      	cmp	r2, #0
 8024f70:	d071      	beq.n	8025056 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8024f72:	f899 8003 	ldrb.w	r8, [r9, #3]
 8024f76:	f899 c004 	ldrb.w	ip, [r9, #4]
 8024f7a:	f899 a005 	ldrb.w	sl, [r9, #5]
 8024f7e:	3601      	adds	r6, #1
 8024f80:	d471      	bmi.n	8025066 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8024f82:	42b7      	cmp	r7, r6
 8024f84:	dd6f      	ble.n	8025066 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8024f86:	9a05      	ldr	r2, [sp, #20]
 8024f88:	2a00      	cmp	r2, #0
 8024f8a:	d06c      	beq.n	8025066 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8024f8c:	f1bb 0f00 	cmp.w	fp, #0
 8024f90:	db65      	blt.n	802505e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8024f92:	455b      	cmp	r3, fp
 8024f94:	dd63      	ble.n	802505e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8024f96:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8024f9a:	f819 e002 	ldrb.w	lr, [r9, r2]
 8024f9e:	2203      	movs	r2, #3
 8024fa0:	fb03 9602 	mla	r6, r3, r2, r9
 8024fa4:	7877      	ldrb	r7, [r6, #1]
 8024fa6:	78b6      	ldrb	r6, [r6, #2]
 8024fa8:	f11b 0b01 	adds.w	fp, fp, #1
 8024fac:	d40c      	bmi.n	8024fc8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8024fae:	455b      	cmp	r3, fp
 8024fb0:	dd0a      	ble.n	8024fc8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8024fb2:	9a04      	ldr	r2, [sp, #16]
 8024fb4:	b142      	cbz	r2, 8024fc8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8024fb6:	2203      	movs	r2, #3
 8024fb8:	fb13 2002 	smlabb	r0, r3, r2, r2
 8024fbc:	f819 5000 	ldrb.w	r5, [r9, r0]
 8024fc0:	fb03 9002 	mla	r0, r3, r2, r9
 8024fc4:	7904      	ldrb	r4, [r0, #4]
 8024fc6:	7940      	ldrb	r0, [r0, #5]
 8024fc8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8024fcc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8024fd0:	fb03 fb02 	mul.w	fp, r3, r2
 8024fd4:	011b      	lsls	r3, r3, #4
 8024fd6:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8024fda:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8024fde:	eba3 030b 	sub.w	r3, r3, fp
 8024fe2:	b292      	uxth	r2, r2
 8024fe4:	b29b      	uxth	r3, r3
 8024fe6:	eba9 0902 	sub.w	r9, r9, r2
 8024fea:	9304      	str	r3, [sp, #16]
 8024fec:	fa1f f989 	uxth.w	r9, r9
 8024ff0:	fb03 f808 	mul.w	r8, r3, r8
 8024ff4:	9b01      	ldr	r3, [sp, #4]
 8024ff6:	fb09 8803 	mla	r8, r9, r3, r8
 8024ffa:	9b04      	ldr	r3, [sp, #16]
 8024ffc:	fb03 fc0c 	mul.w	ip, r3, ip
 8025000:	9b02      	ldr	r3, [sp, #8]
 8025002:	fb02 880e 	mla	r8, r2, lr, r8
 8025006:	fb09 cc03 	mla	ip, r9, r3, ip
 802500a:	9b04      	ldr	r3, [sp, #16]
 802500c:	fb0b 8805 	mla	r8, fp, r5, r8
 8025010:	fb02 c707 	mla	r7, r2, r7, ip
 8025014:	fb03 f30a 	mul.w	r3, r3, sl
 8025018:	ea4f 2828 	mov.w	r8, r8, asr #8
 802501c:	fb0b 7404 	mla	r4, fp, r4, r7
 8025020:	f881 8000 	strb.w	r8, [r1]
 8025024:	1224      	asrs	r4, r4, #8
 8025026:	704c      	strb	r4, [r1, #1]
 8025028:	9c03      	ldr	r4, [sp, #12]
 802502a:	fb09 3904 	mla	r9, r9, r4, r3
 802502e:	fb02 9206 	mla	r2, r2, r6, r9
 8025032:	fb0b 2000 	mla	r0, fp, r0, r2
 8025036:	1200      	asrs	r0, r0, #8
 8025038:	7088      	strb	r0, [r1, #2]
 802503a:	b007      	add	sp, #28
 802503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025040:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8025044:	9501      	str	r5, [sp, #4]
 8025046:	e78c      	b.n	8024f62 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8025048:	4682      	mov	sl, r0
 802504a:	46a4      	mov	ip, r4
 802504c:	46a8      	mov	r8, r5
 802504e:	9501      	str	r5, [sp, #4]
 8025050:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8025054:	e793      	b.n	8024f7e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8025056:	4682      	mov	sl, r0
 8025058:	46a4      	mov	ip, r4
 802505a:	46a8      	mov	r8, r5
 802505c:	e78f      	b.n	8024f7e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 802505e:	4606      	mov	r6, r0
 8025060:	4627      	mov	r7, r4
 8025062:	46ae      	mov	lr, r5
 8025064:	e7a0      	b.n	8024fa8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8025066:	4606      	mov	r6, r0
 8025068:	4627      	mov	r7, r4
 802506a:	46ae      	mov	lr, r5
 802506c:	e7ac      	b.n	8024fc8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0802506e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802506e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025072:	b09b      	sub	sp, #108	; 0x6c
 8025074:	920b      	str	r2, [sp, #44]	; 0x2c
 8025076:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025078:	9019      	str	r0, [sp, #100]	; 0x64
 802507a:	9109      	str	r1, [sp, #36]	; 0x24
 802507c:	6850      	ldr	r0, [r2, #4]
 802507e:	9306      	str	r3, [sp, #24]
 8025080:	6812      	ldr	r2, [r2, #0]
 8025082:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025086:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 802508a:	fb00 1303 	mla	r3, r0, r3, r1
 802508e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025092:	18d3      	adds	r3, r2, r3
 8025094:	9307      	str	r3, [sp, #28]
 8025096:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025098:	681b      	ldr	r3, [r3, #0]
 802509a:	9308      	str	r3, [sp, #32]
 802509c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802509e:	2b00      	cmp	r3, #0
 80250a0:	dc03      	bgt.n	80250aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80250a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250a4:	2b00      	cmp	r3, #0
 80250a6:	f340 81ab 	ble.w	8025400 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80250aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80250ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80250b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80250b4:	1e48      	subs	r0, r1, #1
 80250b6:	1e55      	subs	r5, r2, #1
 80250b8:	9b06      	ldr	r3, [sp, #24]
 80250ba:	2b00      	cmp	r3, #0
 80250bc:	f340 80b1 	ble.w	8025222 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80250c0:	ea5f 462b 	movs.w	r6, fp, asr #16
 80250c4:	ea4f 4324 	mov.w	r3, r4, asr #16
 80250c8:	d406      	bmi.n	80250d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80250ca:	4286      	cmp	r6, r0
 80250cc:	da04      	bge.n	80250d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80250ce:	2b00      	cmp	r3, #0
 80250d0:	db02      	blt.n	80250d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80250d2:	42ab      	cmp	r3, r5
 80250d4:	f2c0 80a6 	blt.w	8025224 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80250d8:	3601      	adds	r6, #1
 80250da:	f100 8097 	bmi.w	802520c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80250de:	42b1      	cmp	r1, r6
 80250e0:	f2c0 8094 	blt.w	802520c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80250e4:	3301      	adds	r3, #1
 80250e6:	f100 8091 	bmi.w	802520c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80250ea:	429a      	cmp	r2, r3
 80250ec:	f2c0 808e 	blt.w	802520c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80250f0:	9b06      	ldr	r3, [sp, #24]
 80250f2:	9e07      	ldr	r6, [sp, #28]
 80250f4:	930a      	str	r3, [sp, #40]	; 0x28
 80250f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250f8:	2b00      	cmp	r3, #0
 80250fa:	f340 80b0 	ble.w	802525e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80250fe:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8025100:	1425      	asrs	r5, r4, #16
 8025102:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025104:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8025108:	68c7      	ldr	r7, [r0, #12]
 802510a:	ea5f 402b 	movs.w	r0, fp, asr #16
 802510e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8025112:	689b      	ldr	r3, [r3, #8]
 8025114:	f100 80ea 	bmi.w	80252ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025118:	f103 3cff 	add.w	ip, r3, #4294967295
 802511c:	4560      	cmp	r0, ip
 802511e:	f280 80e5 	bge.w	80252ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025122:	2d00      	cmp	r5, #0
 8025124:	f2c0 80e2 	blt.w	80252ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025128:	f107 3cff 	add.w	ip, r7, #4294967295
 802512c:	4565      	cmp	r5, ip
 802512e:	f280 80dd 	bge.w	80252ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025132:	b21b      	sxth	r3, r3
 8025134:	fb05 0003 	mla	r0, r5, r3, r0
 8025138:	9d08      	ldr	r5, [sp, #32]
 802513a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802513e:	182f      	adds	r7, r5, r0
 8025140:	5c2d      	ldrb	r5, [r5, r0]
 8025142:	7878      	ldrb	r0, [r7, #1]
 8025144:	f897 e002 	ldrb.w	lr, [r7, #2]
 8025148:	900c      	str	r0, [sp, #48]	; 0x30
 802514a:	f897 9003 	ldrb.w	r9, [r7, #3]
 802514e:	f897 8004 	ldrb.w	r8, [r7, #4]
 8025152:	f897 a005 	ldrb.w	sl, [r7, #5]
 8025156:	b1c9      	cbz	r1, 802518c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025158:	f04f 0c03 	mov.w	ip, #3
 802515c:	f06f 0004 	mvn.w	r0, #4
 8025160:	3705      	adds	r7, #5
 8025162:	fb13 030c 	smlabb	r3, r3, ip, r0
 8025166:	eb07 0c03 	add.w	ip, r7, r3
 802516a:	5cfb      	ldrb	r3, [r7, r3]
 802516c:	930d      	str	r3, [sp, #52]	; 0x34
 802516e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8025172:	930f      	str	r3, [sp, #60]	; 0x3c
 8025174:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8025178:	9311      	str	r3, [sp, #68]	; 0x44
 802517a:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802517e:	930e      	str	r3, [sp, #56]	; 0x38
 8025180:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8025184:	9310      	str	r3, [sp, #64]	; 0x40
 8025186:	f89c 3005 	ldrb.w	r3, [ip, #5]
 802518a:	9312      	str	r3, [sp, #72]	; 0x48
 802518c:	b292      	uxth	r2, r2
 802518e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025190:	b289      	uxth	r1, r1
 8025192:	fb02 f301 	mul.w	r3, r2, r1
 8025196:	0112      	lsls	r2, r2, #4
 8025198:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802519c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80251a0:	1ad2      	subs	r2, r2, r3
 80251a2:	b289      	uxth	r1, r1
 80251a4:	b292      	uxth	r2, r2
 80251a6:	1a7f      	subs	r7, r7, r1
 80251a8:	fb02 f909 	mul.w	r9, r2, r9
 80251ac:	b2bf      	uxth	r7, r7
 80251ae:	fb02 f808 	mul.w	r8, r2, r8
 80251b2:	fb02 fa0a 	mul.w	sl, r2, sl
 80251b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80251b8:	fb07 9905 	mla	r9, r7, r5, r9
 80251bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80251be:	fb07 8800 	mla	r8, r7, r0, r8
 80251c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80251c4:	fb07 aa0e 	mla	sl, r7, lr, sl
 80251c8:	fb01 9905 	mla	r9, r1, r5, r9
 80251cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80251ce:	fb01 8800 	mla	r8, r1, r0, r8
 80251d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80251d4:	fb01 a102 	mla	r1, r1, r2, sl
 80251d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80251da:	fb03 9905 	mla	r9, r3, r5, r9
 80251de:	fb03 8800 	mla	r8, r3, r0, r8
 80251e2:	fb03 1302 	mla	r3, r3, r2, r1
 80251e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80251ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 80251ee:	121b      	asrs	r3, r3, #8
 80251f0:	f886 9000 	strb.w	r9, [r6]
 80251f4:	f886 8001 	strb.w	r8, [r6, #1]
 80251f8:	70b3      	strb	r3, [r6, #2]
 80251fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80251fc:	3603      	adds	r6, #3
 80251fe:	449b      	add	fp, r3
 8025200:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025202:	441c      	add	r4, r3
 8025204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025206:	3b01      	subs	r3, #1
 8025208:	930a      	str	r3, [sp, #40]	; 0x28
 802520a:	e774      	b.n	80250f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802520c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802520e:	449b      	add	fp, r3
 8025210:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025212:	441c      	add	r4, r3
 8025214:	9b06      	ldr	r3, [sp, #24]
 8025216:	3b01      	subs	r3, #1
 8025218:	9306      	str	r3, [sp, #24]
 802521a:	9b07      	ldr	r3, [sp, #28]
 802521c:	3303      	adds	r3, #3
 802521e:	9307      	str	r3, [sp, #28]
 8025220:	e74a      	b.n	80250b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025222:	d024      	beq.n	802526e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025224:	9b06      	ldr	r3, [sp, #24]
 8025226:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025228:	3b01      	subs	r3, #1
 802522a:	fb00 b003 	mla	r0, r0, r3, fp
 802522e:	1400      	asrs	r0, r0, #16
 8025230:	f53f af5e 	bmi.w	80250f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025234:	3901      	subs	r1, #1
 8025236:	4288      	cmp	r0, r1
 8025238:	f6bf af5a 	bge.w	80250f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802523c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802523e:	fb01 4303 	mla	r3, r1, r3, r4
 8025242:	141b      	asrs	r3, r3, #16
 8025244:	f53f af54 	bmi.w	80250f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025248:	3a01      	subs	r2, #1
 802524a:	4293      	cmp	r3, r2
 802524c:	f6bf af50 	bge.w	80250f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025250:	9b07      	ldr	r3, [sp, #28]
 8025252:	f8dd e018 	ldr.w	lr, [sp, #24]
 8025256:	1cde      	adds	r6, r3, #3
 8025258:	f1be 0f00 	cmp.w	lr, #0
 802525c:	dc5f      	bgt.n	802531e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802525e:	9b06      	ldr	r3, [sp, #24]
 8025260:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025264:	9b07      	ldr	r3, [sp, #28]
 8025266:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802526a:	4423      	add	r3, r4
 802526c:	9307      	str	r3, [sp, #28]
 802526e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025270:	2b00      	cmp	r3, #0
 8025272:	f340 80c5 	ble.w	8025400 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802527a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802527c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025280:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025284:	eef0 6a62 	vmov.f32	s13, s5
 8025288:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802528c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025290:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025294:	ee16 ba90 	vmov	fp, s13
 8025298:	eef0 6a43 	vmov.f32	s13, s6
 802529c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252a0:	ee16 4a90 	vmov	r4, s13
 80252a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80252a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80252ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 80252b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80252b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80252b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80252bc:	ee12 2a90 	vmov	r2, s5
 80252c0:	eef0 2a47 	vmov.f32	s5, s14
 80252c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80252c8:	ee13 2a10 	vmov	r2, s6
 80252cc:	9327      	str	r3, [sp, #156]	; 0x9c
 80252ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80252d0:	eeb0 3a67 	vmov.f32	s6, s15
 80252d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80252d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80252da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80252de:	3b01      	subs	r3, #1
 80252e0:	9309      	str	r3, [sp, #36]	; 0x24
 80252e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80252e4:	bf08      	it	eq
 80252e6:	4613      	moveq	r3, r2
 80252e8:	9306      	str	r3, [sp, #24]
 80252ea:	e6d7      	b.n	802509c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80252ec:	f110 0c01 	adds.w	ip, r0, #1
 80252f0:	d483      	bmi.n	80251fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80252f2:	4563      	cmp	r3, ip
 80252f4:	db81      	blt.n	80251fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80252f6:	f115 0c01 	adds.w	ip, r5, #1
 80252fa:	f53f af7e 	bmi.w	80251fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80252fe:	4567      	cmp	r7, ip
 8025300:	f6ff af7b 	blt.w	80251fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025304:	b23f      	sxth	r7, r7
 8025306:	b21b      	sxth	r3, r3
 8025308:	9700      	str	r7, [sp, #0]
 802530a:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802530e:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8025312:	9a08      	ldr	r2, [sp, #32]
 8025314:	4631      	mov	r1, r6
 8025316:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025318:	f7ff fdf9 	bl	8024f0e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802531c:	e76d      	b.n	80251fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802531e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8025320:	ea4f 402b 	mov.w	r0, fp, asr #16
 8025324:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025328:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802532c:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8025330:	1421      	asrs	r1, r4, #16
 8025332:	930a      	str	r3, [sp, #40]	; 0x28
 8025334:	fb0c 0101 	mla	r1, ip, r1, r0
 8025338:	9808      	ldr	r0, [sp, #32]
 802533a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802533e:	1845      	adds	r5, r0, r1
 8025340:	5c40      	ldrb	r0, [r0, r1]
 8025342:	796f      	ldrb	r7, [r5, #5]
 8025344:	7869      	ldrb	r1, [r5, #1]
 8025346:	f895 8002 	ldrb.w	r8, [r5, #2]
 802534a:	f895 a003 	ldrb.w	sl, [r5, #3]
 802534e:	f895 9004 	ldrb.w	r9, [r5, #4]
 8025352:	970c      	str	r7, [sp, #48]	; 0x30
 8025354:	b1a2      	cbz	r2, 8025380 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8025356:	2703      	movs	r7, #3
 8025358:	f06f 0304 	mvn.w	r3, #4
 802535c:	3505      	adds	r5, #5
 802535e:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8025362:	eb05 070c 	add.w	r7, r5, ip
 8025366:	f815 500c 	ldrb.w	r5, [r5, ip]
 802536a:	9513      	str	r5, [sp, #76]	; 0x4c
 802536c:	787d      	ldrb	r5, [r7, #1]
 802536e:	9515      	str	r5, [sp, #84]	; 0x54
 8025370:	78bd      	ldrb	r5, [r7, #2]
 8025372:	9517      	str	r5, [sp, #92]	; 0x5c
 8025374:	78fd      	ldrb	r5, [r7, #3]
 8025376:	9514      	str	r5, [sp, #80]	; 0x50
 8025378:	793d      	ldrb	r5, [r7, #4]
 802537a:	9516      	str	r5, [sp, #88]	; 0x58
 802537c:	797d      	ldrb	r5, [r7, #5]
 802537e:	9518      	str	r5, [sp, #96]	; 0x60
 8025380:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8025384:	b292      	uxth	r2, r2
 8025386:	3603      	adds	r6, #3
 8025388:	f10e 3eff 	add.w	lr, lr, #4294967295
 802538c:	fb03 f502 	mul.w	r5, r3, r2
 8025390:	011b      	lsls	r3, r3, #4
 8025392:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8025396:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802539a:	1b5b      	subs	r3, r3, r5
 802539c:	b292      	uxth	r2, r2
 802539e:	b29b      	uxth	r3, r3
 80253a0:	1abf      	subs	r7, r7, r2
 80253a2:	fb03 f909 	mul.w	r9, r3, r9
 80253a6:	b2bf      	uxth	r7, r7
 80253a8:	fb03 fa0a 	mul.w	sl, r3, sl
 80253ac:	fb07 9901 	mla	r9, r7, r1, r9
 80253b0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80253b2:	fb07 aa00 	mla	sl, r7, r0, sl
 80253b6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80253b8:	fb02 9901 	mla	r9, r2, r1, r9
 80253bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80253be:	fb02 aa00 	mla	sl, r2, r0, sl
 80253c2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80253c4:	fb05 9901 	mla	r9, r5, r1, r9
 80253c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80253ca:	fb05 aa00 	mla	sl, r5, r0, sl
 80253ce:	434b      	muls	r3, r1
 80253d0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80253d2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80253d6:	fb07 3308 	mla	r3, r7, r8, r3
 80253da:	ea4f 2929 	mov.w	r9, r9, asr #8
 80253de:	f806 ac06 	strb.w	sl, [r6, #-6]
 80253e2:	fb02 3201 	mla	r2, r2, r1, r3
 80253e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80253e8:	f806 9c05 	strb.w	r9, [r6, #-5]
 80253ec:	fb05 2503 	mla	r5, r5, r3, r2
 80253f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80253f2:	122d      	asrs	r5, r5, #8
 80253f4:	449b      	add	fp, r3
 80253f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80253f8:	f806 5c04 	strb.w	r5, [r6, #-4]
 80253fc:	441c      	add	r4, r3
 80253fe:	e72b      	b.n	8025258 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025400:	b01b      	add	sp, #108	; 0x6c
 8025402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025406 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8025406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802540a:	b087      	sub	sp, #28
 802540c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8025410:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8025414:	fb05 7003 	mla	r0, r5, r3, r7
 8025418:	2d00      	cmp	r5, #0
 802541a:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802541e:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8025422:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8025426:	f2c0 811f 	blt.w	8025668 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802542a:	45a8      	cmp	r8, r5
 802542c:	f340 811c 	ble.w	8025668 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8025430:	2f00      	cmp	r7, #0
 8025432:	f2c0 8117 	blt.w	8025664 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8025436:	42bb      	cmp	r3, r7
 8025438:	f340 8114 	ble.w	8025664 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802543c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8025440:	1c7a      	adds	r2, r7, #1
 8025442:	f100 8114 	bmi.w	802566e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8025446:	4293      	cmp	r3, r2
 8025448:	f340 8111 	ble.w	802566e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802544c:	2c00      	cmp	r4, #0
 802544e:	f000 8110 	beq.w	8025672 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8025452:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8025456:	3501      	adds	r5, #1
 8025458:	f100 810f 	bmi.w	802567a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802545c:	45a8      	cmp	r8, r5
 802545e:	f340 810c 	ble.w	802567a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8025462:	f1be 0f00 	cmp.w	lr, #0
 8025466:	f000 810b 	beq.w	8025680 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 802546a:	2f00      	cmp	r7, #0
 802546c:	f2c0 8103 	blt.w	8025676 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8025470:	42bb      	cmp	r3, r7
 8025472:	f340 8100 	ble.w	8025676 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8025476:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802547a:	3701      	adds	r7, #1
 802547c:	f100 8103 	bmi.w	8025686 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8025480:	42bb      	cmp	r3, r7
 8025482:	f340 8100 	ble.w	8025686 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8025486:	2c00      	cmp	r4, #0
 8025488:	f000 80ff 	beq.w	802568a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 802548c:	3301      	adds	r3, #1
 802548e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8025492:	fa1f fc84 	uxth.w	ip, r4
 8025496:	fa1f fe8e 	uxth.w	lr, lr
 802549a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802549e:	fb0c f90e 	mul.w	r9, ip, lr
 80254a2:	0e13      	lsrs	r3, r2, #24
 80254a4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80254a8:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80254ac:	9302      	str	r3, [sp, #8]
 80254ae:	ebac 0709 	sub.w	r7, ip, r9
 80254b2:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80254b6:	fa1f f48e 	uxth.w	r4, lr
 80254ba:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80254be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80254c2:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80254c6:	fb0a fe0e 	mul.w	lr, sl, lr
 80254ca:	1b1b      	subs	r3, r3, r4
 80254cc:	fb0a f606 	mul.w	r6, sl, r6
 80254d0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80254d4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80254d8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80254dc:	b29b      	uxth	r3, r3
 80254de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80254e2:	b2bf      	uxth	r7, r7
 80254e4:	9301      	str	r3, [sp, #4]
 80254e6:	44e6      	add	lr, ip
 80254e8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80254ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80254f0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80254f4:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80254f8:	9303      	str	r3, [sp, #12]
 80254fa:	0a33      	lsrs	r3, r6, #8
 80254fc:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8025500:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025504:	9304      	str	r3, [sp, #16]
 8025506:	fb0b f606 	mul.w	r6, fp, r6
 802550a:	fb0b f000 	mul.w	r0, fp, r0
 802550e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8025512:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025516:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802551a:	44b6      	add	lr, r6
 802551c:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8025520:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8025524:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8025528:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802552c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025530:	fb08 f606 	mul.w	r6, r8, r6
 8025534:	0a03      	lsrs	r3, r0, #8
 8025536:	fb08 f505 	mul.w	r5, r8, r5
 802553a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802553e:	0a30      	lsrs	r0, r6, #8
 8025540:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025544:	9305      	str	r3, [sp, #20]
 8025546:	0e13      	lsrs	r3, r2, #24
 8025548:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802554c:	fb0e fe07 	mul.w	lr, lr, r7
 8025550:	4430      	add	r0, r6
 8025552:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8025556:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802555a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802555e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025562:	0a00      	lsrs	r0, r0, #8
 8025564:	435e      	muls	r6, r3
 8025566:	0a2d      	lsrs	r5, r5, #8
 8025568:	435a      	muls	r2, r3
 802556a:	9b03      	ldr	r3, [sp, #12]
 802556c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8025570:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025574:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025578:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802557c:	44b4      	add	ip, r6
 802557e:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8025582:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025586:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802558a:	9e01      	ldr	r6, [sp, #4]
 802558c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025590:	fb03 ee06 	mla	lr, r3, r6, lr
 8025594:	9b04      	ldr	r3, [sp, #16]
 8025596:	0a12      	lsrs	r2, r2, #8
 8025598:	fb0c ee09 	mla	lr, ip, r9, lr
 802559c:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80255a0:	9b05      	ldr	r3, [sp, #20]
 80255a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80255a6:	fb00 ee04 	mla	lr, r0, r4, lr
 80255aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80255ae:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80255b2:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80255b6:	9b01      	ldr	r3, [sp, #4]
 80255b8:	fb07 fe0e 	mul.w	lr, r7, lr
 80255bc:	fb07 f70b 	mul.w	r7, r7, fp
 80255c0:	fb03 ee06 	mla	lr, r3, r6, lr
 80255c4:	fb03 730a 	mla	r3, r3, sl, r7
 80255c8:	fb09 e202 	mla	r2, r9, r2, lr
 80255cc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80255d0:	fb04 2e0e 	mla	lr, r4, lr, r2
 80255d4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80255d8:	fb04 3408 	mla	r4, r4, r8, r3
 80255dc:	9b02      	ldr	r3, [sp, #8]
 80255de:	b292      	uxth	r2, r2
 80255e0:	fb09 4903 	mla	r9, r9, r3, r4
 80255e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80255e8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80255ec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80255f0:	fb09 f902 	mul.w	r9, r9, r2
 80255f4:	ea40 0e0e 	orr.w	lr, r0, lr
 80255f8:	f109 0301 	add.w	r3, r9, #1
 80255fc:	fa5f f08e 	uxtb.w	r0, lr
 8025600:	fb10 f002 	smulbb	r0, r0, r2
 8025604:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8025608:	780b      	ldrb	r3, [r1, #0]
 802560a:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 802560e:	fa5f f989 	uxtb.w	r9, r9
 8025612:	fb03 0309 	mla	r3, r3, r9, r0
 8025616:	b29b      	uxth	r3, r3
 8025618:	1c58      	adds	r0, r3, #1
 802561a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802561e:	7848      	ldrb	r0, [r1, #1]
 8025620:	fb10 f009 	smulbb	r0, r0, r9
 8025624:	121b      	asrs	r3, r3, #8
 8025626:	700b      	strb	r3, [r1, #0]
 8025628:	f3ce 2307 	ubfx	r3, lr, #8, #8
 802562c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8025630:	fb03 0302 	mla	r3, r3, r2, r0
 8025634:	b29b      	uxth	r3, r3
 8025636:	1c58      	adds	r0, r3, #1
 8025638:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802563c:	121b      	asrs	r3, r3, #8
 802563e:	704b      	strb	r3, [r1, #1]
 8025640:	788b      	ldrb	r3, [r1, #2]
 8025642:	fb13 f909 	smulbb	r9, r3, r9
 8025646:	fb0e 9e02 	mla	lr, lr, r2, r9
 802564a:	fa1f fe8e 	uxth.w	lr, lr
 802564e:	f10e 0301 	add.w	r3, lr, #1
 8025652:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8025656:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802565a:	f881 e002 	strb.w	lr, [r1, #2]
 802565e:	b007      	add	sp, #28
 8025660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025664:	2600      	movs	r6, #0
 8025666:	e6eb      	b.n	8025440 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8025668:	2000      	movs	r0, #0
 802566a:	4606      	mov	r6, r0
 802566c:	e6f3      	b.n	8025456 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802566e:	2000      	movs	r0, #0
 8025670:	e6f1      	b.n	8025456 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8025672:	4620      	mov	r0, r4
 8025674:	e6ef      	b.n	8025456 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8025676:	2500      	movs	r5, #0
 8025678:	e6ff      	b.n	802547a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 802567a:	2200      	movs	r2, #0
 802567c:	4615      	mov	r5, r2
 802567e:	e708      	b.n	8025492 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025680:	4672      	mov	r2, lr
 8025682:	4675      	mov	r5, lr
 8025684:	e705      	b.n	8025492 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025686:	2200      	movs	r2, #0
 8025688:	e703      	b.n	8025492 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802568a:	4622      	mov	r2, r4
 802568c:	e701      	b.n	8025492 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0802568e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802568e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025692:	b09d      	sub	sp, #116	; 0x74
 8025694:	9219      	str	r2, [sp, #100]	; 0x64
 8025696:	9307      	str	r3, [sp, #28]
 8025698:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802569a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802569e:	901b      	str	r0, [sp, #108]	; 0x6c
 80256a0:	931a      	str	r3, [sp, #104]	; 0x68
 80256a2:	6850      	ldr	r0, [r2, #4]
 80256a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80256a6:	6812      	ldr	r2, [r2, #0]
 80256a8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80256ac:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80256b0:	fb00 1303 	mla	r3, r0, r3, r1
 80256b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80256b8:	18d3      	adds	r3, r2, r3
 80256ba:	930a      	str	r3, [sp, #40]	; 0x28
 80256bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80256be:	681b      	ldr	r3, [r3, #0]
 80256c0:	9310      	str	r3, [sp, #64]	; 0x40
 80256c2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80256c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80256c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80256ca:	2b00      	cmp	r3, #0
 80256cc:	dc03      	bgt.n	80256d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80256ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	f340 8368 	ble.w	8025da6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80256d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80256d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80256dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80256e0:	1e48      	subs	r0, r1, #1
 80256e2:	1e57      	subs	r7, r2, #1
 80256e4:	9b07      	ldr	r3, [sp, #28]
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	f340 8187 	ble.w	80259fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80256ec:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80256f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80256f4:	d406      	bmi.n	8025704 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80256f6:	4584      	cmp	ip, r0
 80256f8:	da04      	bge.n	8025704 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80256fa:	2b00      	cmp	r3, #0
 80256fc:	db02      	blt.n	8025704 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80256fe:	42bb      	cmp	r3, r7
 8025700:	f2c0 817c 	blt.w	80259fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025704:	f11c 0c01 	adds.w	ip, ip, #1
 8025708:	f100 816c 	bmi.w	80259e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802570c:	4561      	cmp	r1, ip
 802570e:	f2c0 8169 	blt.w	80259e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025712:	3301      	adds	r3, #1
 8025714:	f100 8166 	bmi.w	80259e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025718:	429a      	cmp	r2, r3
 802571a:	f2c0 8163 	blt.w	80259e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802571e:	9b07      	ldr	r3, [sp, #28]
 8025720:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025722:	9318      	str	r3, [sp, #96]	; 0x60
 8025724:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025726:	2b00      	cmp	r3, #0
 8025728:	f340 8186 	ble.w	8025a38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802572c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802572e:	142a      	asrs	r2, r5, #16
 8025730:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025734:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025738:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802573c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025740:	f100 81cb 	bmi.w	8025ada <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025744:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025748:	4542      	cmp	r2, r8
 802574a:	f280 81c6 	bge.w	8025ada <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802574e:	2800      	cmp	r0, #0
 8025750:	f2c0 81c3 	blt.w	8025ada <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025754:	f103 38ff 	add.w	r8, r3, #4294967295
 8025758:	4540      	cmp	r0, r8
 802575a:	f280 81be 	bge.w	8025ada <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802575e:	fa0f f38e 	sxth.w	r3, lr
 8025762:	fb00 2203 	mla	r2, r0, r3, r2
 8025766:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025768:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 802576c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8025770:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025774:	2900      	cmp	r1, #0
 8025776:	f000 81a6 	beq.w	8025ac6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802577a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802577e:	900c      	str	r0, [sp, #48]	; 0x30
 8025780:	0e00      	lsrs	r0, r0, #24
 8025782:	9013      	str	r0, [sp, #76]	; 0x4c
 8025784:	f1bc 0f00 	cmp.w	ip, #0
 8025788:	d00f      	beq.n	80257aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802578a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802578e:	3b01      	subs	r3, #1
 8025790:	009b      	lsls	r3, r3, #2
 8025792:	3304      	adds	r3, #4
 8025794:	eb08 0003 	add.w	r0, r8, r3
 8025798:	f858 3003 	ldr.w	r3, [r8, r3]
 802579c:	9308      	str	r3, [sp, #32]
 802579e:	0e1b      	lsrs	r3, r3, #24
 80257a0:	9311      	str	r3, [sp, #68]	; 0x44
 80257a2:	6843      	ldr	r3, [r0, #4]
 80257a4:	930d      	str	r3, [sp, #52]	; 0x34
 80257a6:	0e1b      	lsrs	r3, r3, #24
 80257a8:	9314      	str	r3, [sp, #80]	; 0x50
 80257aa:	b289      	uxth	r1, r1
 80257ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80257ae:	fa1f fc8c 	uxth.w	ip, ip
 80257b2:	0108      	lsls	r0, r1, #4
 80257b4:	fb01 f90c 	mul.w	r9, r1, ip
 80257b8:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80257bc:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80257c0:	eba0 0809 	sub.w	r8, r0, r9
 80257c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80257c6:	fa1f f18c 	uxth.w	r1, ip
 80257ca:	fa1f f888 	uxth.w	r8, r8
 80257ce:	1a5b      	subs	r3, r3, r1
 80257d0:	fb08 f000 	mul.w	r0, r8, r0
 80257d4:	b29b      	uxth	r3, r3
 80257d6:	fb03 000e 	mla	r0, r3, lr, r0
 80257da:	fb01 0004 	mla	r0, r1, r4, r0
 80257de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80257e0:	fb09 0004 	mla	r0, r9, r4, r0
 80257e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80257e8:	2800      	cmp	r0, #0
 80257ea:	f000 80f2 	beq.w	80259d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80257ee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80257f2:	d01b      	beq.n	802582c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80257f4:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80257f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80257fc:	fb0e fa0a 	mul.w	sl, lr, sl
 8025800:	fb0e fe02 	mul.w	lr, lr, r2
 8025804:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8025808:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802580c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025810:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025814:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025818:	4452      	add	r2, sl
 802581a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802581e:	0a12      	lsrs	r2, r2, #8
 8025820:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025824:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025828:	ea42 020c 	orr.w	r2, r2, ip
 802582c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802582e:	2cff      	cmp	r4, #255	; 0xff
 8025830:	d021      	beq.n	8025876 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025832:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025834:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025838:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802583a:	fb04 fb0b 	mul.w	fp, r4, fp
 802583e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025840:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025844:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025846:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802584a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802584e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025852:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025856:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802585a:	44de      	add	lr, fp
 802585c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025860:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025864:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025868:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802586c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025870:	ea4e 040a 	orr.w	r4, lr, sl
 8025874:	940c      	str	r4, [sp, #48]	; 0x30
 8025876:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025878:	2cff      	cmp	r4, #255	; 0xff
 802587a:	d021      	beq.n	80258c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802587c:	9c08      	ldr	r4, [sp, #32]
 802587e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025882:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025884:	fb04 fb0b 	mul.w	fp, r4, fp
 8025888:	9c08      	ldr	r4, [sp, #32]
 802588a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802588e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025890:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025894:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025898:	fb04 fa0a 	mul.w	sl, r4, sl
 802589c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80258a0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80258a4:	44de      	add	lr, fp
 80258a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80258aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80258ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80258b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80258b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80258ba:	ea4e 040a 	orr.w	r4, lr, sl
 80258be:	9408      	str	r4, [sp, #32]
 80258c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80258c2:	2cff      	cmp	r4, #255	; 0xff
 80258c4:	d021      	beq.n	802590a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80258c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80258c8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80258cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80258ce:	fb04 fb0b 	mul.w	fp, r4, fp
 80258d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80258d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80258d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80258da:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80258de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80258e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80258e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80258ea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80258ee:	44de      	add	lr, fp
 80258f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80258f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80258f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80258fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025900:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025904:	ea4e 040a 	orr.w	r4, lr, sl
 8025908:	940d      	str	r4, [sp, #52]	; 0x34
 802590a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802590c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025910:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025914:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025918:	9c08      	ldr	r4, [sp, #32]
 802591a:	fb08 fc0c 	mul.w	ip, r8, ip
 802591e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8025922:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025926:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025928:	fb01 cc0e 	mla	ip, r1, lr, ip
 802592c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025930:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025932:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025936:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802593a:	fb08 f80e 	mul.w	r8, r8, lr
 802593e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025942:	fb03 8202 	mla	r2, r3, r2, r8
 8025946:	9b08      	ldr	r3, [sp, #32]
 8025948:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802594c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8025950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025952:	fb01 220a 	mla	r2, r1, sl, r2
 8025956:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802595a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802595c:	fb09 2901 	mla	r9, r9, r1, r2
 8025960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025962:	4343      	muls	r3, r0
 8025964:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025968:	1c58      	adds	r0, r3, #1
 802596a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802596e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025972:	783b      	ldrb	r3, [r7, #0]
 8025974:	ea4c 0c09 	orr.w	ip, ip, r9
 8025978:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802597c:	fa5f f28c 	uxtb.w	r2, ip
 8025980:	b2c0      	uxtb	r0, r0
 8025982:	fb12 f201 	smulbb	r2, r2, r1
 8025986:	fb03 2300 	mla	r3, r3, r0, r2
 802598a:	b29b      	uxth	r3, r3
 802598c:	1c5a      	adds	r2, r3, #1
 802598e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025992:	787a      	ldrb	r2, [r7, #1]
 8025994:	fb12 f200 	smulbb	r2, r2, r0
 8025998:	121b      	asrs	r3, r3, #8
 802599a:	703b      	strb	r3, [r7, #0]
 802599c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80259a0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80259a4:	fb03 2301 	mla	r3, r3, r1, r2
 80259a8:	b29b      	uxth	r3, r3
 80259aa:	1c5a      	adds	r2, r3, #1
 80259ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80259b0:	121b      	asrs	r3, r3, #8
 80259b2:	707b      	strb	r3, [r7, #1]
 80259b4:	78bb      	ldrb	r3, [r7, #2]
 80259b6:	fb13 f000 	smulbb	r0, r3, r0
 80259ba:	fb0c 0c01 	mla	ip, ip, r1, r0
 80259be:	fa1f fc8c 	uxth.w	ip, ip
 80259c2:	f10c 0301 	add.w	r3, ip, #1
 80259c6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80259ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80259ce:	f887 c002 	strb.w	ip, [r7, #2]
 80259d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80259d4:	3703      	adds	r7, #3
 80259d6:	441d      	add	r5, r3
 80259d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80259da:	441e      	add	r6, r3
 80259dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80259de:	3b01      	subs	r3, #1
 80259e0:	9318      	str	r3, [sp, #96]	; 0x60
 80259e2:	e69f      	b.n	8025724 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80259e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80259e6:	441d      	add	r5, r3
 80259e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80259ea:	441e      	add	r6, r3
 80259ec:	9b07      	ldr	r3, [sp, #28]
 80259ee:	3b01      	subs	r3, #1
 80259f0:	9307      	str	r3, [sp, #28]
 80259f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80259f4:	3303      	adds	r3, #3
 80259f6:	930a      	str	r3, [sp, #40]	; 0x28
 80259f8:	e674      	b.n	80256e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80259fa:	d025      	beq.n	8025a48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80259fc:	9b07      	ldr	r3, [sp, #28]
 80259fe:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025a00:	3b01      	subs	r3, #1
 8025a02:	fb00 5003 	mla	r0, r0, r3, r5
 8025a06:	1400      	asrs	r0, r0, #16
 8025a08:	f53f ae89 	bmi.w	802571e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025a0c:	3901      	subs	r1, #1
 8025a0e:	4288      	cmp	r0, r1
 8025a10:	f6bf ae85 	bge.w	802571e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025a14:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8025a16:	fb01 6303 	mla	r3, r1, r3, r6
 8025a1a:	141b      	asrs	r3, r3, #16
 8025a1c:	f53f ae7f 	bmi.w	802571e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025a20:	3a01      	subs	r2, #1
 8025a22:	4293      	cmp	r3, r2
 8025a24:	f6bf ae7b 	bge.w	802571e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a2a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025a2e:	f103 0e03 	add.w	lr, r3, #3
 8025a32:	f1bb 0f00 	cmp.w	fp, #0
 8025a36:	dc6e      	bgt.n	8025b16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025a38:	9b07      	ldr	r3, [sp, #28]
 8025a3a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025a44:	4423      	add	r3, r4
 8025a46:	930a      	str	r3, [sp, #40]	; 0x28
 8025a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025a4a:	2b00      	cmp	r3, #0
 8025a4c:	f340 81ab 	ble.w	8025da6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025a50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025a54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025a56:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025a5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025a5e:	eef0 6a62 	vmov.f32	s13, s5
 8025a62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025a66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025a6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a6e:	ee16 5a90 	vmov	r5, s13
 8025a72:	eef0 6a43 	vmov.f32	s13, s6
 8025a76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a7a:	ee16 6a90 	vmov	r6, s13
 8025a7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025a82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025a86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025a8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025a8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025a92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025a96:	ee12 2a90 	vmov	r2, s5
 8025a9a:	eef0 2a47 	vmov.f32	s5, s14
 8025a9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025aa2:	ee13 2a10 	vmov	r2, s6
 8025aa6:	9329      	str	r3, [sp, #164]	; 0xa4
 8025aa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025aaa:	eeb0 3a67 	vmov.f32	s6, s15
 8025aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8025ab2:	932a      	str	r3, [sp, #168]	; 0xa8
 8025ab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025ab6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025ab8:	3b01      	subs	r3, #1
 8025aba:	9317      	str	r3, [sp, #92]	; 0x5c
 8025abc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025abe:	bf08      	it	eq
 8025ac0:	4613      	moveq	r3, r2
 8025ac2:	9307      	str	r3, [sp, #28]
 8025ac4:	e600      	b.n	80256c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025ac6:	f1bc 0f00 	cmp.w	ip, #0
 8025aca:	f43f ae6e 	beq.w	80257aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025ace:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025ad2:	9308      	str	r3, [sp, #32]
 8025ad4:	0e1b      	lsrs	r3, r3, #24
 8025ad6:	9311      	str	r3, [sp, #68]	; 0x44
 8025ad8:	e667      	b.n	80257aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025ada:	f112 0801 	adds.w	r8, r2, #1
 8025ade:	f53f af78 	bmi.w	80259d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025ae2:	45c6      	cmp	lr, r8
 8025ae4:	f6ff af75 	blt.w	80259d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025ae8:	f110 0801 	adds.w	r8, r0, #1
 8025aec:	f53f af71 	bmi.w	80259d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025af0:	4543      	cmp	r3, r8
 8025af2:	f6ff af6e 	blt.w	80259d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025af6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8025af8:	b21b      	sxth	r3, r3
 8025afa:	9201      	str	r2, [sp, #4]
 8025afc:	9300      	str	r3, [sp, #0]
 8025afe:	fa0f f38e 	sxth.w	r3, lr
 8025b02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025b08:	e9cd c404 	strd	ip, r4, [sp, #16]
 8025b0c:	4639      	mov	r1, r7
 8025b0e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025b10:	f7ff fc79 	bl	8025406 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8025b14:	e75d      	b.n	80259d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025b16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025b18:	142f      	asrs	r7, r5, #16
 8025b1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025b1c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025b20:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8025b24:	1433      	asrs	r3, r6, #16
 8025b26:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025b2a:	fb02 7303 	mla	r3, r2, r3, r7
 8025b2e:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8025b32:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025b36:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025b3a:	2900      	cmp	r1, #0
 8025b3c:	f000 812a 	beq.w	8025d94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8025b40:	687c      	ldr	r4, [r7, #4]
 8025b42:	940e      	str	r4, [sp, #56]	; 0x38
 8025b44:	0e24      	lsrs	r4, r4, #24
 8025b46:	9415      	str	r4, [sp, #84]	; 0x54
 8025b48:	b178      	cbz	r0, 8025b6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8025b4a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8025b4e:	3a01      	subs	r2, #1
 8025b50:	0092      	lsls	r2, r2, #2
 8025b52:	3204      	adds	r2, #4
 8025b54:	eb07 0802 	add.w	r8, r7, r2
 8025b58:	58ba      	ldr	r2, [r7, r2]
 8025b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8025b5c:	0e12      	lsrs	r2, r2, #24
 8025b5e:	9212      	str	r2, [sp, #72]	; 0x48
 8025b60:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8025b64:	920f      	str	r2, [sp, #60]	; 0x3c
 8025b66:	0e12      	lsrs	r2, r2, #24
 8025b68:	9216      	str	r2, [sp, #88]	; 0x58
 8025b6a:	b289      	uxth	r1, r1
 8025b6c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025b6e:	b280      	uxth	r0, r0
 8025b70:	fb01 f900 	mul.w	r9, r1, r0
 8025b74:	0109      	lsls	r1, r1, #4
 8025b76:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025b7a:	eba1 0809 	sub.w	r8, r1, r9
 8025b7e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8025b82:	9915      	ldr	r1, [sp, #84]	; 0x54
 8025b84:	b280      	uxth	r0, r0
 8025b86:	fa1f f888 	uxth.w	r8, r8
 8025b8a:	1a12      	subs	r2, r2, r0
 8025b8c:	fb08 f101 	mul.w	r1, r8, r1
 8025b90:	b292      	uxth	r2, r2
 8025b92:	fb02 110c 	mla	r1, r2, ip, r1
 8025b96:	fb00 1104 	mla	r1, r0, r4, r1
 8025b9a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025b9c:	fb09 1104 	mla	r1, r9, r4, r1
 8025ba0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025ba4:	2900      	cmp	r1, #0
 8025ba6:	f000 80ec 	beq.w	8025d82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8025baa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025bae:	d019      	beq.n	8025be4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8025bb0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025bb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025bb8:	fb0c fa0a 	mul.w	sl, ip, sl
 8025bbc:	fb0c fc03 	mul.w	ip, ip, r3
 8025bc0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025bc4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025bc8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025bcc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025bd0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025bd4:	4453      	add	r3, sl
 8025bd6:	0a3f      	lsrs	r7, r7, #8
 8025bd8:	0a1b      	lsrs	r3, r3, #8
 8025bda:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025bde:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025be2:	433b      	orrs	r3, r7
 8025be4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025be6:	2cff      	cmp	r4, #255	; 0xff
 8025be8:	d020      	beq.n	8025c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8025bea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025bec:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025bf0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025bf2:	4367      	muls	r7, r4
 8025bf4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025bf6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025bfa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025bfe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025c00:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025c04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c08:	fb04 fa0a 	mul.w	sl, r4, sl
 8025c0c:	44bc      	add	ip, r7
 8025c0e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025c12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c16:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025c1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025c22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025c26:	ea4c 040a 	orr.w	r4, ip, sl
 8025c2a:	940e      	str	r4, [sp, #56]	; 0x38
 8025c2c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025c2e:	2cff      	cmp	r4, #255	; 0xff
 8025c30:	d020      	beq.n	8025c74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8025c32:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025c34:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025c38:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025c3a:	4367      	muls	r7, r4
 8025c3c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025c3e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025c42:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025c46:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025c48:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025c4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c50:	fb04 fa0a 	mul.w	sl, r4, sl
 8025c54:	44bc      	add	ip, r7
 8025c56:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025c5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025c62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025c6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025c6e:	ea4c 040a 	orr.w	r4, ip, sl
 8025c72:	9409      	str	r4, [sp, #36]	; 0x24
 8025c74:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025c76:	2cff      	cmp	r4, #255	; 0xff
 8025c78:	d020      	beq.n	8025cbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8025c7a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025c7c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025c80:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025c82:	4367      	muls	r7, r4
 8025c84:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025c86:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025c8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025c8e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025c90:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025c94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c98:	fb04 fa0a 	mul.w	sl, r4, sl
 8025c9c:	44bc      	add	ip, r7
 8025c9e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025ca2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ca6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025caa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025cae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025cb2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025cb6:	ea4c 040a 	orr.w	r4, ip, sl
 8025cba:	940f      	str	r4, [sp, #60]	; 0x3c
 8025cbc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025cbe:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025cc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025cc6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025cca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025ccc:	fb08 f707 	mul.w	r7, r8, r7
 8025cd0:	fb02 770c 	mla	r7, r2, ip, r7
 8025cd4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025cd8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025cda:	fb00 770c 	mla	r7, r0, ip, r7
 8025cde:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025ce2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025ce4:	fb09 770c 	mla	r7, r9, ip, r7
 8025ce8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025cec:	fb08 f80c 	mul.w	r8, r8, ip
 8025cf0:	0a3f      	lsrs	r7, r7, #8
 8025cf2:	fb02 8303 	mla	r3, r2, r3, r8
 8025cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025cf8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025cfc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025d02:	fb00 330a 	mla	r3, r0, sl, r3
 8025d06:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025d0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025d0c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025d12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d16:	434b      	muls	r3, r1
 8025d18:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025d1c:	1c59      	adds	r1, r3, #1
 8025d1e:	ea47 070c 	orr.w	r7, r7, ip
 8025d22:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025d26:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025d2a:	b2fa      	uxtb	r2, r7
 8025d2c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025d30:	fb12 f200 	smulbb	r2, r2, r0
 8025d34:	b2c9      	uxtb	r1, r1
 8025d36:	fb03 2301 	mla	r3, r3, r1, r2
 8025d3a:	b29b      	uxth	r3, r3
 8025d3c:	1c5a      	adds	r2, r3, #1
 8025d3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025d42:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025d46:	fb12 f201 	smulbb	r2, r2, r1
 8025d4a:	121b      	asrs	r3, r3, #8
 8025d4c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025d50:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8025d54:	0c3f      	lsrs	r7, r7, #16
 8025d56:	fb03 2300 	mla	r3, r3, r0, r2
 8025d5a:	b29b      	uxth	r3, r3
 8025d5c:	1c5a      	adds	r2, r3, #1
 8025d5e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025d62:	121b      	asrs	r3, r3, #8
 8025d64:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025d68:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025d6c:	fb13 f101 	smulbb	r1, r3, r1
 8025d70:	fb07 1700 	mla	r7, r7, r0, r1
 8025d74:	b2bf      	uxth	r7, r7
 8025d76:	1c79      	adds	r1, r7, #1
 8025d78:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8025d7c:	123f      	asrs	r7, r7, #8
 8025d7e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8025d82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025d84:	f10e 0e03 	add.w	lr, lr, #3
 8025d88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025d8c:	441d      	add	r5, r3
 8025d8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025d90:	441e      	add	r6, r3
 8025d92:	e64e      	b.n	8025a32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8025d94:	2800      	cmp	r0, #0
 8025d96:	f43f aee8 	beq.w	8025b6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8025d9a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8025d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8025da0:	0e12      	lsrs	r2, r2, #24
 8025da2:	9212      	str	r2, [sp, #72]	; 0x48
 8025da4:	e6e1      	b.n	8025b6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8025da6:	b01d      	add	sp, #116	; 0x74
 8025da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025dac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8025dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025db0:	b087      	sub	sp, #28
 8025db2:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8025db6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8025dba:	fb05 7003 	mla	r0, r5, r3, r7
 8025dbe:	2d00      	cmp	r5, #0
 8025dc0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8025dc4:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8025dc8:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8025dcc:	f2c0 810a 	blt.w	8025fe4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8025dd0:	45a8      	cmp	r8, r5
 8025dd2:	f340 8107 	ble.w	8025fe4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8025dd6:	2f00      	cmp	r7, #0
 8025dd8:	f2c0 8102 	blt.w	8025fe0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8025ddc:	42bb      	cmp	r3, r7
 8025dde:	f340 80ff 	ble.w	8025fe0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8025de2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8025de6:	1c7a      	adds	r2, r7, #1
 8025de8:	f100 80ff 	bmi.w	8025fea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8025dec:	4293      	cmp	r3, r2
 8025dee:	f340 80fc 	ble.w	8025fea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8025df2:	2c00      	cmp	r4, #0
 8025df4:	f000 80fb 	beq.w	8025fee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8025df8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8025dfc:	3501      	adds	r5, #1
 8025dfe:	f100 80fa 	bmi.w	8025ff6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8025e02:	45a8      	cmp	r8, r5
 8025e04:	f340 80f7 	ble.w	8025ff6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8025e08:	f1be 0f00 	cmp.w	lr, #0
 8025e0c:	f000 80f6 	beq.w	8025ffc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8025e10:	2f00      	cmp	r7, #0
 8025e12:	f2c0 80ee 	blt.w	8025ff2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8025e16:	42bb      	cmp	r3, r7
 8025e18:	f340 80eb 	ble.w	8025ff2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8025e1c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8025e20:	3701      	adds	r7, #1
 8025e22:	f100 80ee 	bmi.w	8026002 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8025e26:	42bb      	cmp	r3, r7
 8025e28:	f340 80eb 	ble.w	8026002 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8025e2c:	2c00      	cmp	r4, #0
 8025e2e:	f000 80ea 	beq.w	8026006 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8025e32:	3301      	adds	r3, #1
 8025e34:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8025e38:	fa1f fc84 	uxth.w	ip, r4
 8025e3c:	fa1f fe8e 	uxth.w	lr, lr
 8025e40:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025e44:	fb0c f90e 	mul.w	r9, ip, lr
 8025e48:	0e13      	lsrs	r3, r2, #24
 8025e4a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8025e4e:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8025e52:	9302      	str	r3, [sp, #8]
 8025e54:	ebac 0709 	sub.w	r7, ip, r9
 8025e58:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8025e5c:	fa1f f48e 	uxth.w	r4, lr
 8025e60:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8025e64:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025e68:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8025e6c:	fb0a fe0e 	mul.w	lr, sl, lr
 8025e70:	1b1b      	subs	r3, r3, r4
 8025e72:	fb0a f606 	mul.w	r6, sl, r6
 8025e76:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8025e7a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025e7e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025e82:	b29b      	uxth	r3, r3
 8025e84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e88:	b2bf      	uxth	r7, r7
 8025e8a:	9301      	str	r3, [sp, #4]
 8025e8c:	44e6      	add	lr, ip
 8025e8e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8025e92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025e96:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025e9a:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8025e9e:	9303      	str	r3, [sp, #12]
 8025ea0:	0a33      	lsrs	r3, r6, #8
 8025ea2:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8025ea6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025eaa:	9304      	str	r3, [sp, #16]
 8025eac:	fb0b f606 	mul.w	r6, fp, r6
 8025eb0:	fb0b f000 	mul.w	r0, fp, r0
 8025eb4:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8025eb8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025ebc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ec0:	44b6      	add	lr, r6
 8025ec2:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8025ec6:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8025eca:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8025ece:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025ed2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ed6:	fb08 f606 	mul.w	r6, r8, r6
 8025eda:	0a03      	lsrs	r3, r0, #8
 8025edc:	fb08 f505 	mul.w	r5, r8, r5
 8025ee0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ee4:	0a30      	lsrs	r0, r6, #8
 8025ee6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025eea:	9305      	str	r3, [sp, #20]
 8025eec:	0e13      	lsrs	r3, r2, #24
 8025eee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025ef2:	fb0e fe07 	mul.w	lr, lr, r7
 8025ef6:	4430      	add	r0, r6
 8025ef8:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8025efc:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8025f00:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8025f04:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025f08:	0a00      	lsrs	r0, r0, #8
 8025f0a:	435e      	muls	r6, r3
 8025f0c:	0a2d      	lsrs	r5, r5, #8
 8025f0e:	435a      	muls	r2, r3
 8025f10:	9b03      	ldr	r3, [sp, #12]
 8025f12:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8025f16:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025f1a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025f1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f22:	44b4      	add	ip, r6
 8025f24:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8025f28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f2c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8025f30:	9e01      	ldr	r6, [sp, #4]
 8025f32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f36:	fb03 ee06 	mla	lr, r3, r6, lr
 8025f3a:	9b04      	ldr	r3, [sp, #16]
 8025f3c:	0a12      	lsrs	r2, r2, #8
 8025f3e:	fb0c ee09 	mla	lr, ip, r9, lr
 8025f42:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8025f46:	9b05      	ldr	r3, [sp, #20]
 8025f48:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025f4c:	fb00 ee04 	mla	lr, r0, r4, lr
 8025f50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f54:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8025f58:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8025f5c:	9b01      	ldr	r3, [sp, #4]
 8025f5e:	fb07 fe0e 	mul.w	lr, r7, lr
 8025f62:	fb07 f70b 	mul.w	r7, r7, fp
 8025f66:	fb03 ee06 	mla	lr, r3, r6, lr
 8025f6a:	fb03 730a 	mla	r3, r3, sl, r7
 8025f6e:	fb09 e202 	mla	r2, r9, r2, lr
 8025f72:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025f76:	fb04 2e0e 	mla	lr, r4, lr, r2
 8025f7a:	fb04 3408 	mla	r4, r4, r8, r3
 8025f7e:	9b02      	ldr	r3, [sp, #8]
 8025f80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f84:	fb09 4903 	mla	r9, r9, r3, r4
 8025f88:	780b      	ldrb	r3, [r1, #0]
 8025f8a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025f8e:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8025f92:	ea40 0e0e 	orr.w	lr, r0, lr
 8025f96:	fa5f f989 	uxtb.w	r9, r9
 8025f9a:	fb03 f209 	mul.w	r2, r3, r9
 8025f9e:	1c53      	adds	r3, r2, #1
 8025fa0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025fa4:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8025fa8:	700b      	strb	r3, [r1, #0]
 8025faa:	784b      	ldrb	r3, [r1, #1]
 8025fac:	fb03 f309 	mul.w	r3, r3, r9
 8025fb0:	1c5a      	adds	r2, r3, #1
 8025fb2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025fb6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8025fba:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8025fbe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025fc2:	704b      	strb	r3, [r1, #1]
 8025fc4:	788b      	ldrb	r3, [r1, #2]
 8025fc6:	fb03 f909 	mul.w	r9, r3, r9
 8025fca:	f109 0301 	add.w	r3, r9, #1
 8025fce:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8025fd2:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8025fd6:	f881 e002 	strb.w	lr, [r1, #2]
 8025fda:	b007      	add	sp, #28
 8025fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025fe0:	2600      	movs	r6, #0
 8025fe2:	e700      	b.n	8025de6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8025fe4:	2000      	movs	r0, #0
 8025fe6:	4606      	mov	r6, r0
 8025fe8:	e708      	b.n	8025dfc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8025fea:	2000      	movs	r0, #0
 8025fec:	e706      	b.n	8025dfc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8025fee:	4620      	mov	r0, r4
 8025ff0:	e704      	b.n	8025dfc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8025ff2:	2500      	movs	r5, #0
 8025ff4:	e714      	b.n	8025e20 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8025ff6:	2200      	movs	r2, #0
 8025ff8:	4615      	mov	r5, r2
 8025ffa:	e71d      	b.n	8025e38 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025ffc:	4672      	mov	r2, lr
 8025ffe:	4675      	mov	r5, lr
 8026000:	e71a      	b.n	8025e38 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026002:	2200      	movs	r2, #0
 8026004:	e718      	b.n	8025e38 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026006:	4622      	mov	r2, r4
 8026008:	e716      	b.n	8025e38 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0802600a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802600a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802600e:	b099      	sub	sp, #100	; 0x64
 8026010:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8026014:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026016:	9017      	str	r0, [sp, #92]	; 0x5c
 8026018:	9306      	str	r3, [sp, #24]
 802601a:	6850      	ldr	r0, [r2, #4]
 802601c:	6812      	ldr	r2, [r2, #0]
 802601e:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8026022:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8026026:	fb00 1303 	mla	r3, r0, r3, r1
 802602a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802602e:	18d3      	adds	r3, r2, r3
 8026030:	9309      	str	r3, [sp, #36]	; 0x24
 8026032:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026034:	681b      	ldr	r3, [r3, #0]
 8026036:	930e      	str	r3, [sp, #56]	; 0x38
 8026038:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802603a:	2b00      	cmp	r3, #0
 802603c:	dc03      	bgt.n	8026046 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802603e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026040:	2b00      	cmp	r3, #0
 8026042:	f340 8360 	ble.w	8026706 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8026046:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026048:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802604c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026050:	1e48      	subs	r0, r1, #1
 8026052:	1e57      	subs	r7, r2, #1
 8026054:	9b06      	ldr	r3, [sp, #24]
 8026056:	2b00      	cmp	r3, #0
 8026058:	f340 817b 	ble.w	8026352 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 802605c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026060:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026064:	d406      	bmi.n	8026074 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026066:	4584      	cmp	ip, r0
 8026068:	da04      	bge.n	8026074 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802606a:	2b00      	cmp	r3, #0
 802606c:	db02      	blt.n	8026074 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802606e:	42bb      	cmp	r3, r7
 8026070:	f2c0 8170 	blt.w	8026354 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026074:	f11c 0c01 	adds.w	ip, ip, #1
 8026078:	f100 8160 	bmi.w	802633c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802607c:	4561      	cmp	r1, ip
 802607e:	f2c0 815d 	blt.w	802633c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026082:	3301      	adds	r3, #1
 8026084:	f100 815a 	bmi.w	802633c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026088:	429a      	cmp	r2, r3
 802608a:	f2c0 8157 	blt.w	802633c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802608e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026092:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026094:	f1b8 0f00 	cmp.w	r8, #0
 8026098:	f340 8179 	ble.w	802638e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802609c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802609e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80260a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80260a4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80260a8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80260ac:	142a      	asrs	r2, r5, #16
 80260ae:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80260b2:	689b      	ldr	r3, [r3, #8]
 80260b4:	f100 81be 	bmi.w	8026434 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80260b8:	f103 39ff 	add.w	r9, r3, #4294967295
 80260bc:	454a      	cmp	r2, r9
 80260be:	f280 81b9 	bge.w	8026434 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80260c2:	f1bc 0f00 	cmp.w	ip, #0
 80260c6:	f2c0 81b5 	blt.w	8026434 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80260ca:	f10e 39ff 	add.w	r9, lr, #4294967295
 80260ce:	45cc      	cmp	ip, r9
 80260d0:	f280 81b0 	bge.w	8026434 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80260d4:	b21b      	sxth	r3, r3
 80260d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80260d8:	fb0c 2203 	mla	r2, ip, r3, r2
 80260dc:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80260e0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80260e4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80260e8:	2900      	cmp	r1, #0
 80260ea:	f000 8197 	beq.w	802641c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80260ee:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80260f2:	940a      	str	r4, [sp, #40]	; 0x28
 80260f4:	0e24      	lsrs	r4, r4, #24
 80260f6:	9411      	str	r4, [sp, #68]	; 0x44
 80260f8:	b180      	cbz	r0, 802611c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80260fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80260fe:	3b01      	subs	r3, #1
 8026100:	009b      	lsls	r3, r3, #2
 8026102:	3304      	adds	r3, #4
 8026104:	eb09 0c03 	add.w	ip, r9, r3
 8026108:	f859 3003 	ldr.w	r3, [r9, r3]
 802610c:	9307      	str	r3, [sp, #28]
 802610e:	0e1b      	lsrs	r3, r3, #24
 8026110:	930f      	str	r3, [sp, #60]	; 0x3c
 8026112:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026116:	930b      	str	r3, [sp, #44]	; 0x2c
 8026118:	0e1b      	lsrs	r3, r3, #24
 802611a:	9312      	str	r3, [sp, #72]	; 0x48
 802611c:	b289      	uxth	r1, r1
 802611e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026120:	b280      	uxth	r0, r0
 8026122:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026124:	fb01 fa00 	mul.w	sl, r1, r0
 8026128:	0109      	lsls	r1, r1, #4
 802612a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802612e:	eba1 090a 	sub.w	r9, r1, sl
 8026132:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8026136:	b280      	uxth	r0, r0
 8026138:	fa1f f989 	uxth.w	r9, r9
 802613c:	1a09      	subs	r1, r1, r0
 802613e:	fb09 f303 	mul.w	r3, r9, r3
 8026142:	b289      	uxth	r1, r1
 8026144:	fb01 330e 	mla	r3, r1, lr, r3
 8026148:	fb00 3304 	mla	r3, r0, r4, r3
 802614c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802614e:	fb0a 3304 	mla	r3, sl, r4, r3
 8026152:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026156:	2b00      	cmp	r3, #0
 8026158:	f000 80e8 	beq.w	802632c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802615c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026160:	d01b      	beq.n	802619a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8026162:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8026166:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802616a:	fb0e fb0b 	mul.w	fp, lr, fp
 802616e:	fb0e fe02 	mul.w	lr, lr, r2
 8026172:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8026176:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802617a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802617e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026182:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026186:	445a      	add	r2, fp
 8026188:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802618c:	0a12      	lsrs	r2, r2, #8
 802618e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026192:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026196:	ea42 020c 	orr.w	r2, r2, ip
 802619a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802619c:	2cff      	cmp	r4, #255	; 0xff
 802619e:	d021      	beq.n	80261e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80261a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80261a2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80261a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80261a8:	fb04 fc0c 	mul.w	ip, r4, ip
 80261ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80261ae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80261b2:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80261b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80261b8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80261bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80261c0:	fb04 fb0b 	mul.w	fp, r4, fp
 80261c4:	44e6      	add	lr, ip
 80261c6:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80261ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80261ce:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80261d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80261d6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80261da:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80261de:	ea4e 040b 	orr.w	r4, lr, fp
 80261e2:	940a      	str	r4, [sp, #40]	; 0x28
 80261e4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80261e6:	2cff      	cmp	r4, #255	; 0xff
 80261e8:	d021      	beq.n	802622e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80261ea:	9c07      	ldr	r4, [sp, #28]
 80261ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80261f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80261f2:	fb04 fc0c 	mul.w	ip, r4, ip
 80261f6:	9c07      	ldr	r4, [sp, #28]
 80261f8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80261fc:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8026200:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026202:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026206:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802620a:	fb04 fb0b 	mul.w	fp, r4, fp
 802620e:	44e6      	add	lr, ip
 8026210:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8026214:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026218:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802621c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026220:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026224:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026228:	ea4e 040b 	orr.w	r4, lr, fp
 802622c:	9407      	str	r4, [sp, #28]
 802622e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026230:	2cff      	cmp	r4, #255	; 0xff
 8026232:	d021      	beq.n	8026278 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8026234:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026236:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802623a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802623c:	fb04 fc0c 	mul.w	ip, r4, ip
 8026240:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026242:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026246:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802624a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802624c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026250:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026254:	fb04 fb0b 	mul.w	fp, r4, fp
 8026258:	44e6      	add	lr, ip
 802625a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802625e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026262:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8026266:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802626a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802626e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026272:	ea4e 040b 	orr.w	r4, lr, fp
 8026276:	940b      	str	r4, [sp, #44]	; 0x2c
 8026278:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802627a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802627e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026282:	2bff      	cmp	r3, #255	; 0xff
 8026284:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026288:	9c07      	ldr	r4, [sp, #28]
 802628a:	fb09 fc0c 	mul.w	ip, r9, ip
 802628e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026292:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026296:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026298:	fb00 cc0e 	mla	ip, r0, lr, ip
 802629c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80262a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80262a2:	fb0a cc0e 	mla	ip, sl, lr, ip
 80262a6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80262aa:	fb09 f90e 	mul.w	r9, r9, lr
 80262ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262b2:	fb01 9202 	mla	r2, r1, r2, r9
 80262b6:	9907      	ldr	r1, [sp, #28]
 80262b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262bc:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80262c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80262c2:	fb00 220b 	mla	r2, r0, fp, r2
 80262c6:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80262ca:	fb0a 2a00 	mla	sl, sl, r0, r2
 80262ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80262d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80262d6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80262da:	fa5f f08c 	uxtb.w	r0, ip
 80262de:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80262e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80262e6:	f000 80a2 	beq.w	802642e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80262ea:	43db      	mvns	r3, r3
 80262ec:	783a      	ldrb	r2, [r7, #0]
 80262ee:	f897 a002 	ldrb.w	sl, [r7, #2]
 80262f2:	b2db      	uxtb	r3, r3
 80262f4:	fb02 fe03 	mul.w	lr, r2, r3
 80262f8:	fb0a fa03 	mul.w	sl, sl, r3
 80262fc:	f10e 0201 	add.w	r2, lr, #1
 8026300:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8026304:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026308:	703a      	strb	r2, [r7, #0]
 802630a:	787a      	ldrb	r2, [r7, #1]
 802630c:	fb02 f003 	mul.w	r0, r2, r3
 8026310:	f10a 0301 	add.w	r3, sl, #1
 8026314:	1c42      	adds	r2, r0, #1
 8026316:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802631a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802631e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8026322:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026326:	707a      	strb	r2, [r7, #1]
 8026328:	f887 c002 	strb.w	ip, [r7, #2]
 802632c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802632e:	3703      	adds	r7, #3
 8026330:	f108 38ff 	add.w	r8, r8, #4294967295
 8026334:	441d      	add	r5, r3
 8026336:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026338:	441e      	add	r6, r3
 802633a:	e6ab      	b.n	8026094 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802633c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802633e:	441d      	add	r5, r3
 8026340:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026342:	441e      	add	r6, r3
 8026344:	9b06      	ldr	r3, [sp, #24]
 8026346:	3b01      	subs	r3, #1
 8026348:	9306      	str	r3, [sp, #24]
 802634a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802634c:	3303      	adds	r3, #3
 802634e:	9309      	str	r3, [sp, #36]	; 0x24
 8026350:	e680      	b.n	8026054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026352:	d024      	beq.n	802639e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026354:	9b06      	ldr	r3, [sp, #24]
 8026356:	9825      	ldr	r0, [sp, #148]	; 0x94
 8026358:	3b01      	subs	r3, #1
 802635a:	fb00 5003 	mla	r0, r0, r3, r5
 802635e:	1400      	asrs	r0, r0, #16
 8026360:	f53f ae95 	bmi.w	802608e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026364:	3901      	subs	r1, #1
 8026366:	4288      	cmp	r0, r1
 8026368:	f6bf ae91 	bge.w	802608e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802636c:	9926      	ldr	r1, [sp, #152]	; 0x98
 802636e:	fb01 6303 	mla	r3, r1, r3, r6
 8026372:	141b      	asrs	r3, r3, #16
 8026374:	f53f ae8b 	bmi.w	802608e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026378:	3a01      	subs	r2, #1
 802637a:	4293      	cmp	r3, r2
 802637c:	f6bf ae87 	bge.w	802608e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026382:	f8dd b018 	ldr.w	fp, [sp, #24]
 8026386:	1cdf      	adds	r7, r3, #3
 8026388:	f1bb 0f00 	cmp.w	fp, #0
 802638c:	dc6e      	bgt.n	802646c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802638e:	9b06      	ldr	r3, [sp, #24]
 8026390:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026396:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802639a:	4423      	add	r3, r4
 802639c:	9309      	str	r3, [sp, #36]	; 0x24
 802639e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80263a0:	2b00      	cmp	r3, #0
 80263a2:	f340 81b0 	ble.w	8026706 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80263a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80263aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80263ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80263b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80263b4:	eef0 6a62 	vmov.f32	s13, s5
 80263b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80263bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80263c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80263c4:	ee16 5a90 	vmov	r5, s13
 80263c8:	eef0 6a43 	vmov.f32	s13, s6
 80263cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80263d0:	ee16 6a90 	vmov	r6, s13
 80263d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80263d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80263dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80263e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80263e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80263e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80263ec:	ee12 2a90 	vmov	r2, s5
 80263f0:	eef0 2a47 	vmov.f32	s5, s14
 80263f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80263f8:	ee13 2a10 	vmov	r2, s6
 80263fc:	9325      	str	r3, [sp, #148]	; 0x94
 80263fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026400:	eeb0 3a67 	vmov.f32	s6, s15
 8026404:	fb92 f3f3 	sdiv	r3, r2, r3
 8026408:	9326      	str	r3, [sp, #152]	; 0x98
 802640a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802640c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802640e:	3b01      	subs	r3, #1
 8026410:	9315      	str	r3, [sp, #84]	; 0x54
 8026412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026414:	bf08      	it	eq
 8026416:	4613      	moveq	r3, r2
 8026418:	9306      	str	r3, [sp, #24]
 802641a:	e60d      	b.n	8026038 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802641c:	2800      	cmp	r0, #0
 802641e:	f43f ae7d 	beq.w	802611c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8026422:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8026426:	9307      	str	r3, [sp, #28]
 8026428:	0e1b      	lsrs	r3, r3, #24
 802642a:	930f      	str	r3, [sp, #60]	; 0x3c
 802642c:	e676      	b.n	802611c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802642e:	7038      	strb	r0, [r7, #0]
 8026430:	7079      	strb	r1, [r7, #1]
 8026432:	e779      	b.n	8026328 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8026434:	f112 0901 	adds.w	r9, r2, #1
 8026438:	f53f af78 	bmi.w	802632c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802643c:	454b      	cmp	r3, r9
 802643e:	f6ff af75 	blt.w	802632c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026442:	f11c 0901 	adds.w	r9, ip, #1
 8026446:	f53f af71 	bmi.w	802632c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802644a:	45ce      	cmp	lr, r9
 802644c:	f6ff af6e 	blt.w	802632c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026450:	b21b      	sxth	r3, r3
 8026452:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8026456:	fa0f f28e 	sxth.w	r2, lr
 802645a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802645e:	9200      	str	r2, [sp, #0]
 8026460:	4639      	mov	r1, r7
 8026462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026464:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8026466:	f7ff fca1 	bl	8025dac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802646a:	e75f      	b.n	802632c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802646c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802646e:	1429      	asrs	r1, r5, #16
 8026470:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026472:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8026476:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802647a:	1433      	asrs	r3, r6, #16
 802647c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026480:	fb0c 1303 	mla	r3, ip, r3, r1
 8026484:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026486:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802648a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802648e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026492:	2a00      	cmp	r2, #0
 8026494:	f000 8129 	beq.w	80266ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8026498:	684c      	ldr	r4, [r1, #4]
 802649a:	940c      	str	r4, [sp, #48]	; 0x30
 802649c:	0e24      	lsrs	r4, r4, #24
 802649e:	9413      	str	r4, [sp, #76]	; 0x4c
 80264a0:	b198      	cbz	r0, 80264ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80264a2:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80264a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80264aa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80264ae:	f10c 0c04 	add.w	ip, ip, #4
 80264b2:	eb01 080c 	add.w	r8, r1, ip
 80264b6:	f851 100c 	ldr.w	r1, [r1, ip]
 80264ba:	9108      	str	r1, [sp, #32]
 80264bc:	0e09      	lsrs	r1, r1, #24
 80264be:	9110      	str	r1, [sp, #64]	; 0x40
 80264c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80264c4:	910d      	str	r1, [sp, #52]	; 0x34
 80264c6:	0e09      	lsrs	r1, r1, #24
 80264c8:	9114      	str	r1, [sp, #80]	; 0x50
 80264ca:	b292      	uxth	r2, r2
 80264cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80264ce:	b280      	uxth	r0, r0
 80264d0:	fb02 f900 	mul.w	r9, r2, r0
 80264d4:	0112      	lsls	r2, r2, #4
 80264d6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80264da:	eba2 0809 	sub.w	r8, r2, r9
 80264de:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80264e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80264e4:	b280      	uxth	r0, r0
 80264e6:	fa1f f888 	uxth.w	r8, r8
 80264ea:	1a09      	subs	r1, r1, r0
 80264ec:	fb08 f202 	mul.w	r2, r8, r2
 80264f0:	b289      	uxth	r1, r1
 80264f2:	fb01 220e 	mla	r2, r1, lr, r2
 80264f6:	fb00 2204 	mla	r2, r0, r4, r2
 80264fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80264fc:	fb09 2204 	mla	r2, r9, r4, r2
 8026500:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026504:	2a00      	cmp	r2, #0
 8026506:	f000 80e8 	beq.w	80266da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 802650a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802650e:	d01b      	beq.n	8026548 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8026510:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026514:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026518:	fb0e fa0a 	mul.w	sl, lr, sl
 802651c:	fb0e fe03 	mul.w	lr, lr, r3
 8026520:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026524:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026528:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802652c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026530:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026534:	4453      	add	r3, sl
 8026536:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802653a:	0a1b      	lsrs	r3, r3, #8
 802653c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026540:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026544:	ea43 030c 	orr.w	r3, r3, ip
 8026548:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802654a:	2cff      	cmp	r4, #255	; 0xff
 802654c:	d021      	beq.n	8026592 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 802654e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026550:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026554:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026556:	fb04 fc0c 	mul.w	ip, r4, ip
 802655a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802655c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026560:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026564:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026566:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802656a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802656e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026572:	44e6      	add	lr, ip
 8026574:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026578:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802657c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026580:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026584:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026588:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802658c:	ea4e 040a 	orr.w	r4, lr, sl
 8026590:	940c      	str	r4, [sp, #48]	; 0x30
 8026592:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026594:	2cff      	cmp	r4, #255	; 0xff
 8026596:	d021      	beq.n	80265dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8026598:	9c08      	ldr	r4, [sp, #32]
 802659a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802659e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80265a0:	fb04 fc0c 	mul.w	ip, r4, ip
 80265a4:	9c08      	ldr	r4, [sp, #32]
 80265a6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80265aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80265ac:	fb04 fa0e 	mul.w	sl, r4, lr
 80265b0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80265b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80265b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80265bc:	44e6      	add	lr, ip
 80265be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80265c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80265c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80265ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80265ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80265d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80265d6:	ea4e 040a 	orr.w	r4, lr, sl
 80265da:	9408      	str	r4, [sp, #32]
 80265dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80265de:	2cff      	cmp	r4, #255	; 0xff
 80265e0:	d021      	beq.n	8026626 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80265e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80265e4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80265e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80265ea:	fb04 fc0c 	mul.w	ip, r4, ip
 80265ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80265f0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80265f4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80265f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80265fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80265fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026602:	fb04 fa0a 	mul.w	sl, r4, sl
 8026606:	44e6      	add	lr, ip
 8026608:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802660c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026610:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026614:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026618:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802661c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026620:	ea4e 040a 	orr.w	r4, lr, sl
 8026624:	940d      	str	r4, [sp, #52]	; 0x34
 8026626:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026628:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802662c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026630:	2aff      	cmp	r2, #255	; 0xff
 8026632:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026636:	9c08      	ldr	r4, [sp, #32]
 8026638:	fb08 fc0c 	mul.w	ip, r8, ip
 802663c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026640:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026644:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026646:	fb00 cc0e 	mla	ip, r0, lr, ip
 802664a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802664e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026650:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026654:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026658:	fb08 f80e 	mul.w	r8, r8, lr
 802665c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026660:	fb01 8303 	mla	r3, r1, r3, r8
 8026664:	9908      	ldr	r1, [sp, #32]
 8026666:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802666a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802666e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026670:	fb00 330a 	mla	r3, r0, sl, r3
 8026674:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8026678:	fb09 3e0e 	mla	lr, r9, lr, r3
 802667c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026680:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026684:	ea4c 0c0e 	orr.w	ip, ip, lr
 8026688:	fa5f f08c 	uxtb.w	r0, ip
 802668c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8026690:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026694:	d032      	beq.n	80266fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8026696:	43d2      	mvns	r2, r2
 8026698:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802669c:	b2d2      	uxtb	r2, r2
 802669e:	fb0e fe02 	mul.w	lr, lr, r2
 80266a2:	f10e 0301 	add.w	r3, lr, #1
 80266a6:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80266aa:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80266ae:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80266b2:	4350      	muls	r0, r2
 80266b4:	f807 3c03 	strb.w	r3, [r7, #-3]
 80266b8:	1c43      	adds	r3, r0, #1
 80266ba:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80266be:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80266c2:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80266c6:	4353      	muls	r3, r2
 80266c8:	f807 1c02 	strb.w	r1, [r7, #-2]
 80266cc:	1c5a      	adds	r2, r3, #1
 80266ce:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80266d2:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80266d6:	f807 cc01 	strb.w	ip, [r7, #-1]
 80266da:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80266dc:	3703      	adds	r7, #3
 80266de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80266e2:	441d      	add	r5, r3
 80266e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80266e6:	441e      	add	r6, r3
 80266e8:	e64e      	b.n	8026388 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80266ea:	2800      	cmp	r0, #0
 80266ec:	f43f aeed 	beq.w	80264ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80266f0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80266f4:	9108      	str	r1, [sp, #32]
 80266f6:	0e09      	lsrs	r1, r1, #24
 80266f8:	9110      	str	r1, [sp, #64]	; 0x40
 80266fa:	e6e6      	b.n	80264ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80266fc:	f807 0c03 	strb.w	r0, [r7, #-3]
 8026700:	f807 1c02 	strb.w	r1, [r7, #-2]
 8026704:	e7e7      	b.n	80266d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8026706:	b019      	add	sp, #100	; 0x64
 8026708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802670c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026710:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8026714:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026718:	2c00      	cmp	r4, #0
 802671a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802671e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8026722:	fb00 4e03 	mla	lr, r0, r3, r4
 8026726:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 802672a:	f2c0 80b8 	blt.w	802689e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802672e:	45a1      	cmp	r9, r4
 8026730:	f340 80b5 	ble.w	802689e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026734:	2800      	cmp	r0, #0
 8026736:	f2c0 80b2 	blt.w	802689e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802673a:	4580      	cmp	r8, r0
 802673c:	f340 80af 	ble.w	802689e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026740:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8026744:	f01e 0f01 	tst.w	lr, #1
 8026748:	5d56      	ldrb	r6, [r2, r5]
 802674a:	bf0c      	ite	eq
 802674c:	f006 060f 	andeq.w	r6, r6, #15
 8026750:	1136      	asrne	r6, r6, #4
 8026752:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026756:	b2f6      	uxtb	r6, r6
 8026758:	f114 0a01 	adds.w	sl, r4, #1
 802675c:	f100 80a1 	bmi.w	80268a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026760:	45d1      	cmp	r9, sl
 8026762:	f340 809e 	ble.w	80268a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026766:	2800      	cmp	r0, #0
 8026768:	f2c0 809b 	blt.w	80268a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802676c:	4580      	cmp	r8, r0
 802676e:	f340 8098 	ble.w	80268a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026772:	2f00      	cmp	r7, #0
 8026774:	f000 8097 	beq.w	80268a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8026778:	f10e 0b01 	add.w	fp, lr, #1
 802677c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8026780:	f01b 0f01 	tst.w	fp, #1
 8026784:	5d55      	ldrb	r5, [r2, r5]
 8026786:	bf0c      	ite	eq
 8026788:	f005 050f 	andeq.w	r5, r5, #15
 802678c:	112d      	asrne	r5, r5, #4
 802678e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8026792:	b2ed      	uxtb	r5, r5
 8026794:	f1bc 0f00 	cmp.w	ip, #0
 8026798:	f000 8089 	beq.w	80268ae <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 802679c:	2c00      	cmp	r4, #0
 802679e:	f100 0001 	add.w	r0, r0, #1
 80267a2:	f2c0 8082 	blt.w	80268aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80267a6:	45a1      	cmp	r9, r4
 80267a8:	dd7f      	ble.n	80268aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80267aa:	2800      	cmp	r0, #0
 80267ac:	db7d      	blt.n	80268aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80267ae:	4580      	cmp	r8, r0
 80267b0:	dd7b      	ble.n	80268aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80267b2:	eb03 0b0e 	add.w	fp, r3, lr
 80267b6:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80267ba:	f01b 0f01 	tst.w	fp, #1
 80267be:	5d14      	ldrb	r4, [r2, r4]
 80267c0:	bf0c      	ite	eq
 80267c2:	f004 040f 	andeq.w	r4, r4, #15
 80267c6:	1124      	asrne	r4, r4, #4
 80267c8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80267cc:	b2e4      	uxtb	r4, r4
 80267ce:	f1ba 0f00 	cmp.w	sl, #0
 80267d2:	db6f      	blt.n	80268b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80267d4:	45d1      	cmp	r9, sl
 80267d6:	dd6d      	ble.n	80268b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80267d8:	2800      	cmp	r0, #0
 80267da:	db6b      	blt.n	80268b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80267dc:	4580      	cmp	r8, r0
 80267de:	dd69      	ble.n	80268b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80267e0:	2f00      	cmp	r7, #0
 80267e2:	d069      	beq.n	80268b8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80267e4:	3301      	adds	r3, #1
 80267e6:	449e      	add	lr, r3
 80267e8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80267ec:	f01e 0f01 	tst.w	lr, #1
 80267f0:	5cd0      	ldrb	r0, [r2, r3]
 80267f2:	bf0c      	ite	eq
 80267f4:	f000 000f 	andeq.w	r0, r0, #15
 80267f8:	1100      	asrne	r0, r0, #4
 80267fa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80267fe:	b2c3      	uxtb	r3, r0
 8026800:	b2ba      	uxth	r2, r7
 8026802:	fa1f fc8c 	uxth.w	ip, ip
 8026806:	fb02 f00c 	mul.w	r0, r2, ip
 802680a:	0112      	lsls	r2, r2, #4
 802680c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8026810:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8026814:	1a12      	subs	r2, r2, r0
 8026816:	fa1f fc8c 	uxth.w	ip, ip
 802681a:	b292      	uxth	r2, r2
 802681c:	eba7 070c 	sub.w	r7, r7, ip
 8026820:	436a      	muls	r2, r5
 8026822:	b2bf      	uxth	r7, r7
 8026824:	fb06 2207 	mla	r2, r6, r7, r2
 8026828:	fb0c 2404 	mla	r4, ip, r4, r2
 802682c:	fb00 4303 	mla	r3, r0, r3, r4
 8026830:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026834:	b38b      	cbz	r3, 802689a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8026836:	4a21      	ldr	r2, [pc, #132]	; (80268bc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8026838:	6814      	ldr	r4, [r2, #0]
 802683a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 802683e:	b2e5      	uxtb	r5, r4
 8026840:	4353      	muls	r3, r2
 8026842:	1c5a      	adds	r2, r3, #1
 8026844:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026848:	1212      	asrs	r2, r2, #8
 802684a:	b290      	uxth	r0, r2
 802684c:	43d2      	mvns	r2, r2
 802684e:	fb15 f500 	smulbb	r5, r5, r0
 8026852:	b2d3      	uxtb	r3, r2
 8026854:	780a      	ldrb	r2, [r1, #0]
 8026856:	fb02 5203 	mla	r2, r2, r3, r5
 802685a:	b292      	uxth	r2, r2
 802685c:	1c55      	adds	r5, r2, #1
 802685e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8026862:	784d      	ldrb	r5, [r1, #1]
 8026864:	fb15 f503 	smulbb	r5, r5, r3
 8026868:	1212      	asrs	r2, r2, #8
 802686a:	700a      	strb	r2, [r1, #0]
 802686c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8026870:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8026874:	fb02 5200 	mla	r2, r2, r0, r5
 8026878:	b292      	uxth	r2, r2
 802687a:	1c55      	adds	r5, r2, #1
 802687c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8026880:	1212      	asrs	r2, r2, #8
 8026882:	704a      	strb	r2, [r1, #1]
 8026884:	788a      	ldrb	r2, [r1, #2]
 8026886:	fb12 f303 	smulbb	r3, r2, r3
 802688a:	fb04 3300 	mla	r3, r4, r0, r3
 802688e:	b29b      	uxth	r3, r3
 8026890:	1c5a      	adds	r2, r3, #1
 8026892:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026896:	121b      	asrs	r3, r3, #8
 8026898:	708b      	strb	r3, [r1, #2]
 802689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802689e:	2600      	movs	r6, #0
 80268a0:	e75a      	b.n	8026758 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80268a2:	2500      	movs	r5, #0
 80268a4:	e776      	b.n	8026794 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80268a6:	463d      	mov	r5, r7
 80268a8:	e774      	b.n	8026794 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80268aa:	2400      	movs	r4, #0
 80268ac:	e78f      	b.n	80267ce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80268ae:	4663      	mov	r3, ip
 80268b0:	4664      	mov	r4, ip
 80268b2:	e7a5      	b.n	8026800 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80268b4:	2300      	movs	r3, #0
 80268b6:	e7a3      	b.n	8026800 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80268b8:	463b      	mov	r3, r7
 80268ba:	e7a1      	b.n	8026800 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80268bc:	24026294 	.word	0x24026294

080268c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80268c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268c4:	b097      	sub	sp, #92	; 0x5c
 80268c6:	9214      	str	r2, [sp, #80]	; 0x50
 80268c8:	9309      	str	r3, [sp, #36]	; 0x24
 80268ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80268cc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80268d0:	9015      	str	r0, [sp, #84]	; 0x54
 80268d2:	910c      	str	r1, [sp, #48]	; 0x30
 80268d4:	6850      	ldr	r0, [r2, #4]
 80268d6:	930e      	str	r3, [sp, #56]	; 0x38
 80268d8:	6812      	ldr	r2, [r2, #0]
 80268da:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80268de:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 80268e2:	fb00 1303 	mla	r3, r0, r3, r1
 80268e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80268ea:	eb02 0a03 	add.w	sl, r2, r3
 80268ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80268f0:	689b      	ldr	r3, [r3, #8]
 80268f2:	3301      	adds	r3, #1
 80268f4:	f023 0301 	bic.w	r3, r3, #1
 80268f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80268fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80268fc:	681f      	ldr	r7, [r3, #0]
 80268fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026900:	2b00      	cmp	r3, #0
 8026902:	dc03      	bgt.n	802690c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026904:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026906:	2b00      	cmp	r3, #0
 8026908:	f340 8247 	ble.w	8026d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802690c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802690e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026912:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026916:	1e48      	subs	r0, r1, #1
 8026918:	f102 3cff 	add.w	ip, r2, #4294967295
 802691c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802691e:	2b00      	cmp	r3, #0
 8026920:	f340 80e5 	ble.w	8026aee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026924:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8026928:	ea4f 4326 	mov.w	r3, r6, asr #16
 802692c:	d406      	bmi.n	802693c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802692e:	4586      	cmp	lr, r0
 8026930:	da04      	bge.n	802693c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026932:	2b00      	cmp	r3, #0
 8026934:	db02      	blt.n	802693c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026936:	4563      	cmp	r3, ip
 8026938:	f2c0 80da 	blt.w	8026af0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802693c:	f11e 0e01 	adds.w	lr, lr, #1
 8026940:	f100 80cb 	bmi.w	8026ada <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026944:	4571      	cmp	r1, lr
 8026946:	f2c0 80c8 	blt.w	8026ada <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802694a:	3301      	adds	r3, #1
 802694c:	f100 80c5 	bmi.w	8026ada <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026950:	429a      	cmp	r2, r3
 8026952:	f2c0 80c2 	blt.w	8026ada <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026958:	46d0      	mov	r8, sl
 802695a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802695e:	930d      	str	r3, [sp, #52]	; 0x34
 8026960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026962:	2b00      	cmp	r3, #0
 8026964:	f340 80e3 	ble.w	8026b2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8026968:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802696a:	1430      	asrs	r0, r6, #16
 802696c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8026970:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026974:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026978:	142b      	asrs	r3, r5, #16
 802697a:	f100 812e 	bmi.w	8026bda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802697e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026982:	455b      	cmp	r3, fp
 8026984:	f280 8129 	bge.w	8026bda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026988:	2800      	cmp	r0, #0
 802698a:	f2c0 8126 	blt.w	8026bda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802698e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026992:	4558      	cmp	r0, fp
 8026994:	f280 8121 	bge.w	8026bda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026998:	fb00 3309 	mla	r3, r0, r9, r3
 802699c:	0858      	lsrs	r0, r3, #1
 802699e:	07dc      	lsls	r4, r3, #31
 80269a0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80269a4:	bf54      	ite	pl
 80269a6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80269aa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80269ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80269b2:	fa5f fc8c 	uxtb.w	ip, ip
 80269b6:	2a00      	cmp	r2, #0
 80269b8:	f000 80fe 	beq.w	8026bb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80269bc:	1c58      	adds	r0, r3, #1
 80269be:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80269c2:	07c0      	lsls	r0, r0, #31
 80269c4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80269c8:	bf54      	ite	pl
 80269ca:	f00e 0e0f 	andpl.w	lr, lr, #15
 80269ce:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80269d2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80269d6:	fa5f f08e 	uxtb.w	r0, lr
 80269da:	9010      	str	r0, [sp, #64]	; 0x40
 80269dc:	b1d9      	cbz	r1, 8026a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80269de:	444b      	add	r3, r9
 80269e0:	0858      	lsrs	r0, r3, #1
 80269e2:	07dc      	lsls	r4, r3, #31
 80269e4:	f103 0301 	add.w	r3, r3, #1
 80269e8:	5c38      	ldrb	r0, [r7, r0]
 80269ea:	bf54      	ite	pl
 80269ec:	f000 000f 	andpl.w	r0, r0, #15
 80269f0:	1100      	asrmi	r0, r0, #4
 80269f2:	07dc      	lsls	r4, r3, #31
 80269f4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80269f8:	b2c0      	uxtb	r0, r0
 80269fa:	900a      	str	r0, [sp, #40]	; 0x28
 80269fc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8026a00:	f817 e000 	ldrb.w	lr, [r7, r0]
 8026a04:	bf54      	ite	pl
 8026a06:	f00e 030f 	andpl.w	r3, lr, #15
 8026a0a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8026a0e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026a12:	b2db      	uxtb	r3, r3
 8026a14:	9311      	str	r3, [sp, #68]	; 0x44
 8026a16:	b292      	uxth	r2, r2
 8026a18:	b289      	uxth	r1, r1
 8026a1a:	0113      	lsls	r3, r2, #4
 8026a1c:	fb02 f001 	mul.w	r0, r2, r1
 8026a20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026a22:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8026a26:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8026a2a:	1a1b      	subs	r3, r3, r0
 8026a2c:	b289      	uxth	r1, r1
 8026a2e:	b29b      	uxth	r3, r3
 8026a30:	ebae 0e01 	sub.w	lr, lr, r1
 8026a34:	4353      	muls	r3, r2
 8026a36:	fa1f fe8e 	uxth.w	lr, lr
 8026a3a:	fb0c 320e 	mla	r2, ip, lr, r3
 8026a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a40:	fb01 2203 	mla	r2, r1, r3, r2
 8026a44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026a46:	fb00 2203 	mla	r2, r0, r3, r2
 8026a4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026a4e:	2a00      	cmp	r2, #0
 8026a50:	d039      	beq.n	8026ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026a52:	4bc7      	ldr	r3, [pc, #796]	; (8026d70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8026a54:	6819      	ldr	r1, [r3, #0]
 8026a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a58:	fa5f fc81 	uxtb.w	ip, r1
 8026a5c:	435a      	muls	r2, r3
 8026a5e:	1c53      	adds	r3, r2, #1
 8026a60:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026a64:	1212      	asrs	r2, r2, #8
 8026a66:	b290      	uxth	r0, r2
 8026a68:	43d2      	mvns	r2, r2
 8026a6a:	fb1c fc00 	smulbb	ip, ip, r0
 8026a6e:	b2d3      	uxtb	r3, r2
 8026a70:	f898 2000 	ldrb.w	r2, [r8]
 8026a74:	fb02 c203 	mla	r2, r2, r3, ip
 8026a78:	b292      	uxth	r2, r2
 8026a7a:	f102 0c01 	add.w	ip, r2, #1
 8026a7e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026a82:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026a86:	fb1c fc03 	smulbb	ip, ip, r3
 8026a8a:	1212      	asrs	r2, r2, #8
 8026a8c:	f888 2000 	strb.w	r2, [r8]
 8026a90:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8026a94:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8026a98:	fb02 c200 	mla	r2, r2, r0, ip
 8026a9c:	b292      	uxth	r2, r2
 8026a9e:	f102 0c01 	add.w	ip, r2, #1
 8026aa2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026aa6:	1212      	asrs	r2, r2, #8
 8026aa8:	f888 2001 	strb.w	r2, [r8, #1]
 8026aac:	f898 2002 	ldrb.w	r2, [r8, #2]
 8026ab0:	fb12 f303 	smulbb	r3, r2, r3
 8026ab4:	fb01 3300 	mla	r3, r1, r0, r3
 8026ab8:	b29b      	uxth	r3, r3
 8026aba:	1c5a      	adds	r2, r3, #1
 8026abc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026ac0:	121b      	asrs	r3, r3, #8
 8026ac2:	f888 3002 	strb.w	r3, [r8, #2]
 8026ac6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026ac8:	f108 0803 	add.w	r8, r8, #3
 8026acc:	441d      	add	r5, r3
 8026ace:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ad0:	441e      	add	r6, r3
 8026ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026ad4:	3b01      	subs	r3, #1
 8026ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8026ad8:	e742      	b.n	8026960 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026ada:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026adc:	f10a 0a03 	add.w	sl, sl, #3
 8026ae0:	441d      	add	r5, r3
 8026ae2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ae4:	441e      	add	r6, r3
 8026ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ae8:	3b01      	subs	r3, #1
 8026aea:	9309      	str	r3, [sp, #36]	; 0x24
 8026aec:	e716      	b.n	802691c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8026aee:	d024      	beq.n	8026b3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8026af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026af2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8026af4:	3b01      	subs	r3, #1
 8026af6:	fb00 5003 	mla	r0, r0, r3, r5
 8026afa:	1400      	asrs	r0, r0, #16
 8026afc:	f53f af2b 	bmi.w	8026956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026b00:	3901      	subs	r1, #1
 8026b02:	4288      	cmp	r0, r1
 8026b04:	f6bf af27 	bge.w	8026956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026b08:	9924      	ldr	r1, [sp, #144]	; 0x90
 8026b0a:	fb01 6303 	mla	r3, r1, r3, r6
 8026b0e:	141b      	asrs	r3, r3, #16
 8026b10:	f53f af21 	bmi.w	8026956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026b14:	3a01      	subs	r2, #1
 8026b16:	4293      	cmp	r3, r2
 8026b18:	f6bf af1d 	bge.w	8026956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026b1c:	f10a 0e03 	add.w	lr, sl, #3
 8026b20:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8026b24:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8026b28:	f1b8 0f00 	cmp.w	r8, #0
 8026b2c:	dc76      	bgt.n	8026c1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8026b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b30:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026b34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026b38:	44a2      	add	sl, r4
 8026b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026b3c:	2b00      	cmp	r3, #0
 8026b3e:	f340 812c 	ble.w	8026d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8026b42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026b46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026b48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026b4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026b50:	eef0 6a62 	vmov.f32	s13, s5
 8026b54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026b58:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026b5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b60:	ee16 5a90 	vmov	r5, s13
 8026b64:	eef0 6a43 	vmov.f32	s13, s6
 8026b68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b6c:	ee16 6a90 	vmov	r6, s13
 8026b70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026b74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026b78:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026b7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026b80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026b84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026b88:	ee12 2a90 	vmov	r2, s5
 8026b8c:	eef0 2a47 	vmov.f32	s5, s14
 8026b90:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b94:	ee13 2a10 	vmov	r2, s6
 8026b98:	9323      	str	r3, [sp, #140]	; 0x8c
 8026b9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026b9c:	eeb0 3a67 	vmov.f32	s6, s15
 8026ba0:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ba4:	9324      	str	r3, [sp, #144]	; 0x90
 8026ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026ba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026baa:	3b01      	subs	r3, #1
 8026bac:	930c      	str	r3, [sp, #48]	; 0x30
 8026bae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026bb0:	bf08      	it	eq
 8026bb2:	4613      	moveq	r3, r2
 8026bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8026bb6:	e6a2      	b.n	80268fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8026bb8:	2900      	cmp	r1, #0
 8026bba:	f43f af2c 	beq.w	8026a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8026bbe:	eb09 0003 	add.w	r0, r9, r3
 8026bc2:	0843      	lsrs	r3, r0, #1
 8026bc4:	07c0      	lsls	r0, r0, #31
 8026bc6:	5cfb      	ldrb	r3, [r7, r3]
 8026bc8:	bf54      	ite	pl
 8026bca:	f003 030f 	andpl.w	r3, r3, #15
 8026bce:	111b      	asrmi	r3, r3, #4
 8026bd0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026bd4:	b2db      	uxtb	r3, r3
 8026bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8026bd8:	e71d      	b.n	8026a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8026bda:	f113 0b01 	adds.w	fp, r3, #1
 8026bde:	f53f af72 	bmi.w	8026ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026be2:	45dc      	cmp	ip, fp
 8026be4:	f6ff af6f 	blt.w	8026ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026be8:	f110 0b01 	adds.w	fp, r0, #1
 8026bec:	f53f af6b 	bmi.w	8026ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026bf0:	45de      	cmp	lr, fp
 8026bf2:	f6ff af68 	blt.w	8026ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026bf6:	9302      	str	r3, [sp, #8]
 8026bf8:	fa0f f38e 	sxth.w	r3, lr
 8026bfc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026bfe:	9301      	str	r3, [sp, #4]
 8026c00:	fa0f f38c 	sxth.w	r3, ip
 8026c04:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026c08:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026c0c:	9300      	str	r3, [sp, #0]
 8026c0e:	463a      	mov	r2, r7
 8026c10:	464b      	mov	r3, r9
 8026c12:	4641      	mov	r1, r8
 8026c14:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026c16:	f7ff fd79 	bl	802670c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8026c1a:	e754      	b.n	8026ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026c1c:	142a      	asrs	r2, r5, #16
 8026c1e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026c22:	1433      	asrs	r3, r6, #16
 8026c24:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026c28:	fb09 2303 	mla	r3, r9, r3, r2
 8026c2c:	085a      	lsrs	r2, r3, #1
 8026c2e:	07dc      	lsls	r4, r3, #31
 8026c30:	5cba      	ldrb	r2, [r7, r2]
 8026c32:	bf54      	ite	pl
 8026c34:	f002 020f 	andpl.w	r2, r2, #15
 8026c38:	1112      	asrmi	r2, r2, #4
 8026c3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026c3e:	b2d2      	uxtb	r2, r2
 8026c40:	2900      	cmp	r1, #0
 8026c42:	f000 8097 	beq.w	8026d74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026c46:	f103 0b01 	add.w	fp, r3, #1
 8026c4a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8026c4e:	f01b 0f01 	tst.w	fp, #1
 8026c52:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026c56:	bf0c      	ite	eq
 8026c58:	f00c 0c0f 	andeq.w	ip, ip, #15
 8026c5c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8026c60:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026c64:	fa5f f48c 	uxtb.w	r4, ip
 8026c68:	9412      	str	r4, [sp, #72]	; 0x48
 8026c6a:	b300      	cbz	r0, 8026cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026c6c:	444b      	add	r3, r9
 8026c6e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026c72:	07dc      	lsls	r4, r3, #31
 8026c74:	f103 0301 	add.w	r3, r3, #1
 8026c78:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026c7c:	bf54      	ite	pl
 8026c7e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026c82:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026c86:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026c8a:	fa5f f48c 	uxtb.w	r4, ip
 8026c8e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026c92:	940b      	str	r4, [sp, #44]	; 0x2c
 8026c94:	07dc      	lsls	r4, r3, #31
 8026c96:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026c9a:	bf54      	ite	pl
 8026c9c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026ca0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026ca4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026ca8:	fa5f f38c 	uxtb.w	r3, ip
 8026cac:	9313      	str	r3, [sp, #76]	; 0x4c
 8026cae:	b289      	uxth	r1, r1
 8026cb0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026cb2:	b280      	uxth	r0, r0
 8026cb4:	fb01 f300 	mul.w	r3, r1, r0
 8026cb8:	0109      	lsls	r1, r1, #4
 8026cba:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8026cbe:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8026cc2:	1ac9      	subs	r1, r1, r3
 8026cc4:	b280      	uxth	r0, r0
 8026cc6:	b289      	uxth	r1, r1
 8026cc8:	ebac 0c00 	sub.w	ip, ip, r0
 8026ccc:	4361      	muls	r1, r4
 8026cce:	fa1f fc8c 	uxth.w	ip, ip
 8026cd2:	fb02 120c 	mla	r2, r2, ip, r1
 8026cd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026cd8:	fb00 2001 	mla	r0, r0, r1, r2
 8026cdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026cde:	fb03 0302 	mla	r3, r3, r2, r0
 8026ce2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026ce6:	2b00      	cmp	r3, #0
 8026ce8:	d039      	beq.n	8026d5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026cea:	4a21      	ldr	r2, [pc, #132]	; (8026d70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8026cec:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8026cf0:	6810      	ldr	r0, [r2, #0]
 8026cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026cf4:	fa5f fc80 	uxtb.w	ip, r0
 8026cf8:	4353      	muls	r3, r2
 8026cfa:	1c5a      	adds	r2, r3, #1
 8026cfc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026d00:	121b      	asrs	r3, r3, #8
 8026d02:	b29a      	uxth	r2, r3
 8026d04:	43db      	mvns	r3, r3
 8026d06:	fb1c fc02 	smulbb	ip, ip, r2
 8026d0a:	b2db      	uxtb	r3, r3
 8026d0c:	fb01 c103 	mla	r1, r1, r3, ip
 8026d10:	b289      	uxth	r1, r1
 8026d12:	f101 0c01 	add.w	ip, r1, #1
 8026d16:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026d1a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8026d1e:	fb1c fc03 	smulbb	ip, ip, r3
 8026d22:	1209      	asrs	r1, r1, #8
 8026d24:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026d28:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8026d2c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8026d30:	fb01 c102 	mla	r1, r1, r2, ip
 8026d34:	b289      	uxth	r1, r1
 8026d36:	f101 0c01 	add.w	ip, r1, #1
 8026d3a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026d3e:	1209      	asrs	r1, r1, #8
 8026d40:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8026d44:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8026d48:	fb11 f303 	smulbb	r3, r1, r3
 8026d4c:	fb00 3002 	mla	r0, r0, r2, r3
 8026d50:	b280      	uxth	r0, r0
 8026d52:	1c42      	adds	r2, r0, #1
 8026d54:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026d58:	1200      	asrs	r0, r0, #8
 8026d5a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8026d5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026d60:	f10e 0e03 	add.w	lr, lr, #3
 8026d64:	f108 38ff 	add.w	r8, r8, #4294967295
 8026d68:	441d      	add	r5, r3
 8026d6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026d6c:	441e      	add	r6, r3
 8026d6e:	e6db      	b.n	8026b28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8026d70:	24026294 	.word	0x24026294
 8026d74:	2800      	cmp	r0, #0
 8026d76:	d09a      	beq.n	8026cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026d78:	444b      	add	r3, r9
 8026d7a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026d7e:	07db      	lsls	r3, r3, #31
 8026d80:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026d84:	bf54      	ite	pl
 8026d86:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026d8a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026d8e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026d92:	fa5f f38c 	uxtb.w	r3, ip
 8026d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8026d98:	e789      	b.n	8026cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026d9a:	b017      	add	sp, #92	; 0x5c
 8026d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026da0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8026da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026da4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8026da8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026dac:	2d00      	cmp	r5, #0
 8026dae:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8026db2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8026db6:	fb04 5e03 	mla	lr, r4, r3, r5
 8026dba:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8026dbe:	f2c0 80b1 	blt.w	8026f24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026dc2:	45a9      	cmp	r9, r5
 8026dc4:	f340 80ae 	ble.w	8026f24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026dc8:	2c00      	cmp	r4, #0
 8026dca:	f2c0 80ab 	blt.w	8026f24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026dce:	45a0      	cmp	r8, r4
 8026dd0:	f340 80a8 	ble.w	8026f24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026dd4:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8026dd8:	f01e 0f01 	tst.w	lr, #1
 8026ddc:	5d97      	ldrb	r7, [r2, r6]
 8026dde:	bf0c      	ite	eq
 8026de0:	f007 070f 	andeq.w	r7, r7, #15
 8026de4:	113f      	asrne	r7, r7, #4
 8026de6:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8026dea:	b2ff      	uxtb	r7, r7
 8026dec:	f115 0a01 	adds.w	sl, r5, #1
 8026df0:	f100 809a 	bmi.w	8026f28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026df4:	45d1      	cmp	r9, sl
 8026df6:	f340 8097 	ble.w	8026f28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026dfa:	2c00      	cmp	r4, #0
 8026dfc:	f2c0 8094 	blt.w	8026f28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026e00:	45a0      	cmp	r8, r4
 8026e02:	f340 8091 	ble.w	8026f28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026e06:	2800      	cmp	r0, #0
 8026e08:	f000 8090 	beq.w	8026f2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8026e0c:	f10e 0b01 	add.w	fp, lr, #1
 8026e10:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8026e14:	f01b 0f01 	tst.w	fp, #1
 8026e18:	5d96      	ldrb	r6, [r2, r6]
 8026e1a:	bf0c      	ite	eq
 8026e1c:	f006 060f 	andeq.w	r6, r6, #15
 8026e20:	1136      	asrne	r6, r6, #4
 8026e22:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026e26:	b2f6      	uxtb	r6, r6
 8026e28:	f1bc 0f00 	cmp.w	ip, #0
 8026e2c:	f000 8082 	beq.w	8026f34 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8026e30:	2d00      	cmp	r5, #0
 8026e32:	f104 0401 	add.w	r4, r4, #1
 8026e36:	db7b      	blt.n	8026f30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8026e38:	45a9      	cmp	r9, r5
 8026e3a:	dd79      	ble.n	8026f30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8026e3c:	2c00      	cmp	r4, #0
 8026e3e:	db77      	blt.n	8026f30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8026e40:	45a0      	cmp	r8, r4
 8026e42:	dd75      	ble.n	8026f30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8026e44:	eb03 0b0e 	add.w	fp, r3, lr
 8026e48:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8026e4c:	f01b 0f01 	tst.w	fp, #1
 8026e50:	5d55      	ldrb	r5, [r2, r5]
 8026e52:	bf0c      	ite	eq
 8026e54:	f005 050f 	andeq.w	r5, r5, #15
 8026e58:	112d      	asrne	r5, r5, #4
 8026e5a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8026e5e:	b2ed      	uxtb	r5, r5
 8026e60:	f1ba 0f00 	cmp.w	sl, #0
 8026e64:	db69      	blt.n	8026f3a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8026e66:	45d1      	cmp	r9, sl
 8026e68:	dd67      	ble.n	8026f3a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8026e6a:	2c00      	cmp	r4, #0
 8026e6c:	db65      	blt.n	8026f3a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8026e6e:	45a0      	cmp	r8, r4
 8026e70:	dd63      	ble.n	8026f3a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8026e72:	2800      	cmp	r0, #0
 8026e74:	d063      	beq.n	8026f3e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8026e76:	3301      	adds	r3, #1
 8026e78:	449e      	add	lr, r3
 8026e7a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026e7e:	f01e 0f01 	tst.w	lr, #1
 8026e82:	5cd4      	ldrb	r4, [r2, r3]
 8026e84:	bf0c      	ite	eq
 8026e86:	f004 040f 	andeq.w	r4, r4, #15
 8026e8a:	1124      	asrne	r4, r4, #4
 8026e8c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026e90:	b2e3      	uxtb	r3, r4
 8026e92:	b282      	uxth	r2, r0
 8026e94:	fa1f fc8c 	uxth.w	ip, ip
 8026e98:	fb02 f40c 	mul.w	r4, r2, ip
 8026e9c:	0112      	lsls	r2, r2, #4
 8026e9e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8026ea2:	fa1f f08c 	uxth.w	r0, ip
 8026ea6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8026eaa:	1b12      	subs	r2, r2, r4
 8026eac:	ebac 0c00 	sub.w	ip, ip, r0
 8026eb0:	b292      	uxth	r2, r2
 8026eb2:	fa1f fc8c 	uxth.w	ip, ip
 8026eb6:	4372      	muls	r2, r6
 8026eb8:	fb07 220c 	mla	r2, r7, ip, r2
 8026ebc:	fb00 2005 	mla	r0, r0, r5, r2
 8026ec0:	fb04 0303 	mla	r3, r4, r3, r0
 8026ec4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026ec8:	b353      	cbz	r3, 8026f20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8026eca:	4a1e      	ldr	r2, [pc, #120]	; (8026f44 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8026ecc:	7808      	ldrb	r0, [r1, #0]
 8026ece:	6814      	ldr	r4, [r2, #0]
 8026ed0:	b29a      	uxth	r2, r3
 8026ed2:	43db      	mvns	r3, r3
 8026ed4:	b2e5      	uxtb	r5, r4
 8026ed6:	b2db      	uxtb	r3, r3
 8026ed8:	fb15 f502 	smulbb	r5, r5, r2
 8026edc:	fb00 5003 	mla	r0, r0, r3, r5
 8026ee0:	b280      	uxth	r0, r0
 8026ee2:	1c45      	adds	r5, r0, #1
 8026ee4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026ee8:	784d      	ldrb	r5, [r1, #1]
 8026eea:	fb15 f503 	smulbb	r5, r5, r3
 8026eee:	1200      	asrs	r0, r0, #8
 8026ef0:	7008      	strb	r0, [r1, #0]
 8026ef2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8026ef6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8026efa:	fb00 5002 	mla	r0, r0, r2, r5
 8026efe:	b280      	uxth	r0, r0
 8026f00:	1c45      	adds	r5, r0, #1
 8026f02:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026f06:	1200      	asrs	r0, r0, #8
 8026f08:	7048      	strb	r0, [r1, #1]
 8026f0a:	7888      	ldrb	r0, [r1, #2]
 8026f0c:	fb10 f303 	smulbb	r3, r0, r3
 8026f10:	fb04 3202 	mla	r2, r4, r2, r3
 8026f14:	b292      	uxth	r2, r2
 8026f16:	1c53      	adds	r3, r2, #1
 8026f18:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026f1c:	1212      	asrs	r2, r2, #8
 8026f1e:	708a      	strb	r2, [r1, #2]
 8026f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f24:	2700      	movs	r7, #0
 8026f26:	e761      	b.n	8026dec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8026f28:	2600      	movs	r6, #0
 8026f2a:	e77d      	b.n	8026e28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8026f2c:	4606      	mov	r6, r0
 8026f2e:	e77b      	b.n	8026e28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8026f30:	2500      	movs	r5, #0
 8026f32:	e795      	b.n	8026e60 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8026f34:	4663      	mov	r3, ip
 8026f36:	4665      	mov	r5, ip
 8026f38:	e7ab      	b.n	8026e92 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8026f3a:	2300      	movs	r3, #0
 8026f3c:	e7a9      	b.n	8026e92 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8026f3e:	4603      	mov	r3, r0
 8026f40:	e7a7      	b.n	8026e92 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8026f42:	bf00      	nop
 8026f44:	24026294 	.word	0x24026294

08026f48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f4c:	b093      	sub	sp, #76	; 0x4c
 8026f4e:	461c      	mov	r4, r3
 8026f50:	920c      	str	r2, [sp, #48]	; 0x30
 8026f52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026f54:	9011      	str	r0, [sp, #68]	; 0x44
 8026f56:	9107      	str	r1, [sp, #28]
 8026f58:	6850      	ldr	r0, [r2, #4]
 8026f5a:	6812      	ldr	r2, [r2, #0]
 8026f5c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8026f60:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8026f64:	fb00 1303 	mla	r3, r0, r3, r1
 8026f68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026f6c:	eb02 0b03 	add.w	fp, r2, r3
 8026f70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026f72:	689b      	ldr	r3, [r3, #8]
 8026f74:	3301      	adds	r3, #1
 8026f76:	f023 0301 	bic.w	r3, r3, #1
 8026f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8026f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026f7e:	f8d3 8000 	ldr.w	r8, [r3]
 8026f82:	9b07      	ldr	r3, [sp, #28]
 8026f84:	2b00      	cmp	r3, #0
 8026f86:	dc03      	bgt.n	8026f90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026f8a:	2b00      	cmp	r3, #0
 8026f8c:	f340 822b 	ble.w	80273e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026f90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026f92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026f96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026f9a:	1e48      	subs	r0, r1, #1
 8026f9c:	1e57      	subs	r7, r2, #1
 8026f9e:	2c00      	cmp	r4, #0
 8026fa0:	f340 80d7 	ble.w	8027152 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8026fa4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026fa8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026fac:	d406      	bmi.n	8026fbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026fae:	4584      	cmp	ip, r0
 8026fb0:	da04      	bge.n	8026fbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026fb2:	2b00      	cmp	r3, #0
 8026fb4:	db02      	blt.n	8026fbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026fb6:	42bb      	cmp	r3, r7
 8026fb8:	f2c0 80cc 	blt.w	8027154 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8026fbc:	f11c 0c01 	adds.w	ip, ip, #1
 8026fc0:	f100 80bf 	bmi.w	8027142 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026fc4:	4561      	cmp	r1, ip
 8026fc6:	f2c0 80bc 	blt.w	8027142 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026fca:	3301      	adds	r3, #1
 8026fcc:	f100 80b9 	bmi.w	8027142 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026fd0:	429a      	cmp	r2, r3
 8026fd2:	f2c0 80b6 	blt.w	8027142 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026fd6:	46a2      	mov	sl, r4
 8026fd8:	465f      	mov	r7, fp
 8026fda:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026fde:	f1ba 0f00 	cmp.w	sl, #0
 8026fe2:	f340 80d4 	ble.w	802718e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8026fe6:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8026fea:	1430      	asrs	r0, r6, #16
 8026fec:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026ff0:	9308      	str	r3, [sp, #32]
 8026ff2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ff4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026ff8:	142b      	asrs	r3, r5, #16
 8026ffa:	f100 8124 	bmi.w	8027246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026ffe:	f10c 32ff 	add.w	r2, ip, #4294967295
 8027002:	4293      	cmp	r3, r2
 8027004:	f280 811f 	bge.w	8027246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027008:	2800      	cmp	r0, #0
 802700a:	f2c0 811c 	blt.w	8027246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802700e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8027012:	4290      	cmp	r0, r2
 8027014:	f280 8117 	bge.w	8027246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027018:	fb00 3309 	mla	r3, r0, r9, r3
 802701c:	0858      	lsrs	r0, r3, #1
 802701e:	07da      	lsls	r2, r3, #31
 8027020:	9a08      	ldr	r2, [sp, #32]
 8027022:	f818 c000 	ldrb.w	ip, [r8, r0]
 8027026:	bf54      	ite	pl
 8027028:	f00c 0c0f 	andpl.w	ip, ip, #15
 802702c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027030:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027034:	fa5f fc8c 	uxtb.w	ip, ip
 8027038:	2a00      	cmp	r2, #0
 802703a:	f000 80ed 	beq.w	8027218 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802703e:	1c58      	adds	r0, r3, #1
 8027040:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027044:	07c0      	lsls	r0, r0, #31
 8027046:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802704a:	bf54      	ite	pl
 802704c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027050:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027054:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027058:	fa5f fe8e 	uxtb.w	lr, lr
 802705c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8027060:	b1c9      	cbz	r1, 8027096 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027062:	444b      	add	r3, r9
 8027064:	0858      	lsrs	r0, r3, #1
 8027066:	07da      	lsls	r2, r3, #31
 8027068:	f818 0000 	ldrb.w	r0, [r8, r0]
 802706c:	bf54      	ite	pl
 802706e:	f000 000f 	andpl.w	r0, r0, #15
 8027072:	1100      	asrmi	r0, r0, #4
 8027074:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027078:	b2c0      	uxtb	r0, r0
 802707a:	900a      	str	r0, [sp, #40]	; 0x28
 802707c:	1c58      	adds	r0, r3, #1
 802707e:	0843      	lsrs	r3, r0, #1
 8027080:	07c2      	lsls	r2, r0, #31
 8027082:	f818 3003 	ldrb.w	r3, [r8, r3]
 8027086:	bf54      	ite	pl
 8027088:	f003 030f 	andpl.w	r3, r3, #15
 802708c:	111b      	asrmi	r3, r3, #4
 802708e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027092:	b2db      	uxtb	r3, r3
 8027094:	930e      	str	r3, [sp, #56]	; 0x38
 8027096:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802709a:	b289      	uxth	r1, r1
 802709c:	fb02 f301 	mul.w	r3, r2, r1
 80270a0:	0112      	lsls	r2, r2, #4
 80270a2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80270a6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80270aa:	1ad2      	subs	r2, r2, r3
 80270ac:	b289      	uxth	r1, r1
 80270ae:	b292      	uxth	r2, r2
 80270b0:	1a40      	subs	r0, r0, r1
 80270b2:	fa1f fe80 	uxth.w	lr, r0
 80270b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80270b8:	4342      	muls	r2, r0
 80270ba:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80270be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80270c0:	fb01 c102 	mla	r1, r1, r2, ip
 80270c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80270c6:	fb03 1302 	mla	r3, r3, r2, r1
 80270ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80270ce:	b383      	cbz	r3, 8027132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80270d0:	4ac6      	ldr	r2, [pc, #792]	; (80273ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80270d2:	2bff      	cmp	r3, #255	; 0xff
 80270d4:	6812      	ldr	r2, [r2, #0]
 80270d6:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80270da:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80270de:	b2d2      	uxtb	r2, r2
 80270e0:	f000 80ac 	beq.w	802723c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80270e4:	b299      	uxth	r1, r3
 80270e6:	43db      	mvns	r3, r3
 80270e8:	f897 c000 	ldrb.w	ip, [r7]
 80270ec:	fb12 f201 	smulbb	r2, r2, r1
 80270f0:	b2db      	uxtb	r3, r3
 80270f2:	fb10 f001 	smulbb	r0, r0, r1
 80270f6:	fb0c 2203 	mla	r2, ip, r3, r2
 80270fa:	fb1e f101 	smulbb	r1, lr, r1
 80270fe:	b292      	uxth	r2, r2
 8027100:	f102 0c01 	add.w	ip, r2, #1
 8027104:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027108:	1212      	asrs	r2, r2, #8
 802710a:	703a      	strb	r2, [r7, #0]
 802710c:	787a      	ldrb	r2, [r7, #1]
 802710e:	fb02 0003 	mla	r0, r2, r3, r0
 8027112:	b280      	uxth	r0, r0
 8027114:	1c42      	adds	r2, r0, #1
 8027116:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802711a:	78ba      	ldrb	r2, [r7, #2]
 802711c:	fb02 1303 	mla	r3, r2, r3, r1
 8027120:	1200      	asrs	r0, r0, #8
 8027122:	b29b      	uxth	r3, r3
 8027124:	7078      	strb	r0, [r7, #1]
 8027126:	f103 0e01 	add.w	lr, r3, #1
 802712a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802712e:	121b      	asrs	r3, r3, #8
 8027130:	70bb      	strb	r3, [r7, #2]
 8027132:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027134:	3703      	adds	r7, #3
 8027136:	f10a 3aff 	add.w	sl, sl, #4294967295
 802713a:	441d      	add	r5, r3
 802713c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802713e:	441e      	add	r6, r3
 8027140:	e74d      	b.n	8026fde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027142:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027144:	3c01      	subs	r4, #1
 8027146:	f10b 0b03 	add.w	fp, fp, #3
 802714a:	441d      	add	r5, r3
 802714c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802714e:	441e      	add	r6, r3
 8027150:	e725      	b.n	8026f9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027152:	d021      	beq.n	8027198 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8027154:	1e63      	subs	r3, r4, #1
 8027156:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027158:	fb00 5003 	mla	r0, r0, r3, r5
 802715c:	1400      	asrs	r0, r0, #16
 802715e:	f53f af3a 	bmi.w	8026fd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027162:	3901      	subs	r1, #1
 8027164:	4288      	cmp	r0, r1
 8027166:	f6bf af36 	bge.w	8026fd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802716a:	9920      	ldr	r1, [sp, #128]	; 0x80
 802716c:	fb01 6303 	mla	r3, r1, r3, r6
 8027170:	141b      	asrs	r3, r3, #16
 8027172:	f53f af30 	bmi.w	8026fd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027176:	3a01      	subs	r2, #1
 8027178:	4293      	cmp	r3, r2
 802717a:	f6bf af2c 	bge.w	8026fd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802717e:	f10b 0c03 	add.w	ip, fp, #3
 8027182:	46a6      	mov	lr, r4
 8027184:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027188:	f1be 0f00 	cmp.w	lr, #0
 802718c:	dc79      	bgt.n	8027282 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802718e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8027192:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027196:	44a3      	add	fp, r4
 8027198:	9b07      	ldr	r3, [sp, #28]
 802719a:	2b00      	cmp	r3, #0
 802719c:	f340 8123 	ble.w	80273e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80271a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80271a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80271a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80271aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80271ae:	eef0 6a62 	vmov.f32	s13, s5
 80271b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80271b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80271ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80271be:	ee16 5a90 	vmov	r5, s13
 80271c2:	eef0 6a43 	vmov.f32	s13, s6
 80271c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80271ca:	ee16 6a90 	vmov	r6, s13
 80271ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80271d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80271d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80271da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80271de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80271e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80271e6:	ee12 2a90 	vmov	r2, s5
 80271ea:	eef0 2a47 	vmov.f32	s5, s14
 80271ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80271f2:	ee13 2a10 	vmov	r2, s6
 80271f6:	931f      	str	r3, [sp, #124]	; 0x7c
 80271f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80271fa:	eeb0 3a67 	vmov.f32	s6, s15
 80271fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027202:	9320      	str	r3, [sp, #128]	; 0x80
 8027204:	9b07      	ldr	r3, [sp, #28]
 8027206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027208:	3b01      	subs	r3, #1
 802720a:	9307      	str	r3, [sp, #28]
 802720c:	bf08      	it	eq
 802720e:	4614      	moveq	r4, r2
 8027210:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027212:	bf18      	it	ne
 8027214:	461c      	movne	r4, r3
 8027216:	e6b4      	b.n	8026f82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027218:	2900      	cmp	r1, #0
 802721a:	f43f af3c 	beq.w	8027096 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802721e:	eb09 0003 	add.w	r0, r9, r3
 8027222:	0843      	lsrs	r3, r0, #1
 8027224:	07c0      	lsls	r0, r0, #31
 8027226:	f818 3003 	ldrb.w	r3, [r8, r3]
 802722a:	bf54      	ite	pl
 802722c:	f003 030f 	andpl.w	r3, r3, #15
 8027230:	111b      	asrmi	r3, r3, #4
 8027232:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027236:	b2db      	uxtb	r3, r3
 8027238:	930a      	str	r3, [sp, #40]	; 0x28
 802723a:	e72c      	b.n	8027096 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802723c:	703a      	strb	r2, [r7, #0]
 802723e:	7078      	strb	r0, [r7, #1]
 8027240:	f887 e002 	strb.w	lr, [r7, #2]
 8027244:	e775      	b.n	8027132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027246:	1c5a      	adds	r2, r3, #1
 8027248:	f53f af73 	bmi.w	8027132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802724c:	4594      	cmp	ip, r2
 802724e:	f6ff af70 	blt.w	8027132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027252:	1c42      	adds	r2, r0, #1
 8027254:	f53f af6d 	bmi.w	8027132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027258:	4596      	cmp	lr, r2
 802725a:	f6ff af6a 	blt.w	8027132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802725e:	9302      	str	r3, [sp, #8]
 8027260:	fa0f f38e 	sxth.w	r3, lr
 8027264:	9a08      	ldr	r2, [sp, #32]
 8027266:	9301      	str	r3, [sp, #4]
 8027268:	fa0f f38c 	sxth.w	r3, ip
 802726c:	9105      	str	r1, [sp, #20]
 802726e:	4639      	mov	r1, r7
 8027270:	9300      	str	r3, [sp, #0]
 8027272:	464b      	mov	r3, r9
 8027274:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027278:	4642      	mov	r2, r8
 802727a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802727c:	f7ff fd90 	bl	8026da0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8027280:	e757      	b.n	8027132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027282:	142a      	asrs	r2, r5, #16
 8027284:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027288:	1433      	asrs	r3, r6, #16
 802728a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802728e:	fb09 2303 	mla	r3, r9, r3, r2
 8027292:	085a      	lsrs	r2, r3, #1
 8027294:	07d9      	lsls	r1, r3, #31
 8027296:	f818 2002 	ldrb.w	r2, [r8, r2]
 802729a:	bf54      	ite	pl
 802729c:	f002 020f 	andpl.w	r2, r2, #15
 80272a0:	1112      	asrmi	r2, r2, #4
 80272a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80272a6:	b2d2      	uxtb	r2, r2
 80272a8:	2800      	cmp	r0, #0
 80272aa:	f000 8085 	beq.w	80273b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80272ae:	f103 0a01 	add.w	sl, r3, #1
 80272b2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80272b6:	f01a 0f01 	tst.w	sl, #1
 80272ba:	f818 1001 	ldrb.w	r1, [r8, r1]
 80272be:	bf0c      	ite	eq
 80272c0:	f001 010f 	andeq.w	r1, r1, #15
 80272c4:	1109      	asrne	r1, r1, #4
 80272c6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80272ca:	b2c9      	uxtb	r1, r1
 80272cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80272ce:	b1df      	cbz	r7, 8027308 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80272d0:	444b      	add	r3, r9
 80272d2:	0859      	lsrs	r1, r3, #1
 80272d4:	f013 0f01 	tst.w	r3, #1
 80272d8:	f103 0301 	add.w	r3, r3, #1
 80272dc:	f818 1001 	ldrb.w	r1, [r8, r1]
 80272e0:	bf0c      	ite	eq
 80272e2:	f001 010f 	andeq.w	r1, r1, #15
 80272e6:	1109      	asrne	r1, r1, #4
 80272e8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80272ec:	b2c9      	uxtb	r1, r1
 80272ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80272f0:	0859      	lsrs	r1, r3, #1
 80272f2:	07db      	lsls	r3, r3, #31
 80272f4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80272f8:	bf54      	ite	pl
 80272fa:	f001 010f 	andpl.w	r1, r1, #15
 80272fe:	1109      	asrmi	r1, r1, #4
 8027300:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027304:	b2c9      	uxtb	r1, r1
 8027306:	9110      	str	r1, [sp, #64]	; 0x40
 8027308:	b280      	uxth	r0, r0
 802730a:	b2bf      	uxth	r7, r7
 802730c:	fb00 f307 	mul.w	r3, r0, r7
 8027310:	0100      	lsls	r0, r0, #4
 8027312:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8027316:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802731a:	1ac0      	subs	r0, r0, r3
 802731c:	b2bf      	uxth	r7, r7
 802731e:	b280      	uxth	r0, r0
 8027320:	1bc9      	subs	r1, r1, r7
 8027322:	fa1f fa81 	uxth.w	sl, r1
 8027326:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027328:	4348      	muls	r0, r1
 802732a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802732c:	fb02 020a 	mla	r2, r2, sl, r0
 8027330:	fb07 2701 	mla	r7, r7, r1, r2
 8027334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027336:	fb03 7302 	mla	r3, r3, r2, r7
 802733a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802733e:	b393      	cbz	r3, 80273a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8027340:	4a2a      	ldr	r2, [pc, #168]	; (80273ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8027342:	2bff      	cmp	r3, #255	; 0xff
 8027344:	6811      	ldr	r1, [r2, #0]
 8027346:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802734a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802734e:	b2c9      	uxtb	r1, r1
 8027350:	d042      	beq.n	80273d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027352:	b298      	uxth	r0, r3
 8027354:	43db      	mvns	r3, r3
 8027356:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802735a:	fb11 f100 	smulbb	r1, r1, r0
 802735e:	b2db      	uxtb	r3, r3
 8027360:	fb17 f700 	smulbb	r7, r7, r0
 8027364:	fb02 1103 	mla	r1, r2, r3, r1
 8027368:	fb1a f000 	smulbb	r0, sl, r0
 802736c:	b289      	uxth	r1, r1
 802736e:	1c4a      	adds	r2, r1, #1
 8027370:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027374:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8027378:	fb02 7703 	mla	r7, r2, r3, r7
 802737c:	1209      	asrs	r1, r1, #8
 802737e:	b2bf      	uxth	r7, r7
 8027380:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8027384:	1c7a      	adds	r2, r7, #1
 8027386:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802738a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 802738e:	fb02 0303 	mla	r3, r2, r3, r0
 8027392:	123f      	asrs	r7, r7, #8
 8027394:	b29b      	uxth	r3, r3
 8027396:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802739a:	1c5a      	adds	r2, r3, #1
 802739c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80273a0:	121b      	asrs	r3, r3, #8
 80273a2:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80273a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80273a8:	f10c 0c03 	add.w	ip, ip, #3
 80273ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 80273b0:	441d      	add	r5, r3
 80273b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80273b4:	441e      	add	r6, r3
 80273b6:	e6e7      	b.n	8027188 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80273b8:	2f00      	cmp	r7, #0
 80273ba:	d0a5      	beq.n	8027308 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80273bc:	444b      	add	r3, r9
 80273be:	0859      	lsrs	r1, r3, #1
 80273c0:	07db      	lsls	r3, r3, #31
 80273c2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80273c6:	bf54      	ite	pl
 80273c8:	f001 010f 	andpl.w	r1, r1, #15
 80273cc:	1109      	asrmi	r1, r1, #4
 80273ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80273d2:	b2c9      	uxtb	r1, r1
 80273d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80273d6:	e797      	b.n	8027308 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80273d8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80273dc:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80273e0:	f80c ac01 	strb.w	sl, [ip, #-1]
 80273e4:	e7df      	b.n	80273a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80273e6:	b013      	add	sp, #76	; 0x4c
 80273e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273ec:	24026294 	.word	0x24026294

080273f0 <CRC_Lock>:
 80273f0:	4a20      	ldr	r2, [pc, #128]	; (8027474 <CRC_Lock+0x84>)
 80273f2:	b530      	push	{r4, r5, lr}
 80273f4:	6813      	ldr	r3, [r2, #0]
 80273f6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80273fa:	f24c 2540 	movw	r5, #49728	; 0xc240
 80273fe:	f023 0301 	bic.w	r3, r3, #1
 8027402:	6013      	str	r3, [r2, #0]
 8027404:	4b1c      	ldr	r3, [pc, #112]	; (8027478 <CRC_Lock+0x88>)
 8027406:	681a      	ldr	r2, [r3, #0]
 8027408:	4022      	ands	r2, r4
 802740a:	42aa      	cmp	r2, r5
 802740c:	d005      	beq.n	802741a <CRC_Lock+0x2a>
 802740e:	681b      	ldr	r3, [r3, #0]
 8027410:	f24c 2270 	movw	r2, #49776	; 0xc270
 8027414:	4023      	ands	r3, r4
 8027416:	4293      	cmp	r3, r2
 8027418:	d124      	bne.n	8027464 <CRC_Lock+0x74>
 802741a:	4b18      	ldr	r3, [pc, #96]	; (802747c <CRC_Lock+0x8c>)
 802741c:	681b      	ldr	r3, [r3, #0]
 802741e:	bb0b      	cbnz	r3, 8027464 <CRC_Lock+0x74>
 8027420:	4b17      	ldr	r3, [pc, #92]	; (8027480 <CRC_Lock+0x90>)
 8027422:	681a      	ldr	r2, [r3, #0]
 8027424:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027428:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802742c:	d00d      	beq.n	802744a <CRC_Lock+0x5a>
 802742e:	681a      	ldr	r2, [r3, #0]
 8027430:	f240 4483 	movw	r4, #1155	; 0x483
 8027434:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027438:	42a2      	cmp	r2, r4
 802743a:	d006      	beq.n	802744a <CRC_Lock+0x5a>
 802743c:	681b      	ldr	r3, [r3, #0]
 802743e:	f240 4285 	movw	r2, #1157	; 0x485
 8027442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027446:	4293      	cmp	r3, r2
 8027448:	d10c      	bne.n	8027464 <CRC_Lock+0x74>
 802744a:	4b0e      	ldr	r3, [pc, #56]	; (8027484 <CRC_Lock+0x94>)
 802744c:	2201      	movs	r2, #1
 802744e:	601a      	str	r2, [r3, #0]
 8027450:	681a      	ldr	r2, [r3, #0]
 8027452:	2a00      	cmp	r2, #0
 8027454:	d1fc      	bne.n	8027450 <CRC_Lock+0x60>
 8027456:	4b0c      	ldr	r3, [pc, #48]	; (8027488 <CRC_Lock+0x98>)
 8027458:	6018      	str	r0, [r3, #0]
 802745a:	6818      	ldr	r0, [r3, #0]
 802745c:	1a43      	subs	r3, r0, r1
 802745e:	4258      	negs	r0, r3
 8027460:	4158      	adcs	r0, r3
 8027462:	bd30      	pop	{r4, r5, pc}
 8027464:	4b09      	ldr	r3, [pc, #36]	; (802748c <CRC_Lock+0x9c>)
 8027466:	2201      	movs	r2, #1
 8027468:	601a      	str	r2, [r3, #0]
 802746a:	681a      	ldr	r2, [r3, #0]
 802746c:	2a00      	cmp	r2, #0
 802746e:	d1fc      	bne.n	802746a <CRC_Lock+0x7a>
 8027470:	4b07      	ldr	r3, [pc, #28]	; (8027490 <CRC_Lock+0xa0>)
 8027472:	e7f1      	b.n	8027458 <CRC_Lock+0x68>
 8027474:	e0002000 	.word	0xe0002000
 8027478:	e000ed00 	.word	0xe000ed00
 802747c:	e0042000 	.word	0xe0042000
 8027480:	5c001000 	.word	0x5c001000
 8027484:	58024c08 	.word	0x58024c08
 8027488:	58024c00 	.word	0x58024c00
 802748c:	40023008 	.word	0x40023008
 8027490:	40023000 	.word	0x40023000

08027494 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8027494:	6101      	str	r1, [r0, #16]
 8027496:	4770      	bx	lr

08027498 <_ZN8touchgfx8Gestures4tickEv>:
 8027498:	7b83      	ldrb	r3, [r0, #14]
 802749a:	b14b      	cbz	r3, 80274b0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802749c:	8903      	ldrh	r3, [r0, #8]
 802749e:	3301      	adds	r3, #1
 80274a0:	b29b      	uxth	r3, r3
 80274a2:	2b07      	cmp	r3, #7
 80274a4:	8103      	strh	r3, [r0, #8]
 80274a6:	bf81      	itttt	hi
 80274a8:	2300      	movhi	r3, #0
 80274aa:	8143      	strhhi	r3, [r0, #10]
 80274ac:	8183      	strhhi	r3, [r0, #12]
 80274ae:	7383      	strbhi	r3, [r0, #14]
 80274b0:	4770      	bx	lr
	...

080274b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80274b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80274b8:	4698      	mov	r8, r3
 80274ba:	8883      	ldrh	r3, [r0, #4]
 80274bc:	4604      	mov	r4, r0
 80274be:	4617      	mov	r7, r2
 80274c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80274c4:	eba8 0303 	sub.w	r3, r8, r3
 80274c8:	4a19      	ldr	r2, [pc, #100]	; (8027530 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80274ca:	460e      	mov	r6, r1
 80274cc:	b21b      	sxth	r3, r3
 80274ce:	88c1      	ldrh	r1, [r0, #6]
 80274d0:	9200      	str	r2, [sp, #0]
 80274d2:	2000      	movs	r0, #0
 80274d4:	2b00      	cmp	r3, #0
 80274d6:	8aa2      	ldrh	r2, [r4, #20]
 80274d8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80274dc:	bfb8      	it	lt
 80274de:	425b      	neglt	r3, r3
 80274e0:	f88d 0004 	strb.w	r0, [sp, #4]
 80274e4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80274e8:	b21b      	sxth	r3, r3
 80274ea:	f8ad 800a 	strh.w	r8, [sp, #10]
 80274ee:	f8ad 500c 	strh.w	r5, [sp, #12]
 80274f2:	4293      	cmp	r3, r2
 80274f4:	dc07      	bgt.n	8027506 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80274f6:	1a69      	subs	r1, r5, r1
 80274f8:	b209      	sxth	r1, r1
 80274fa:	2900      	cmp	r1, #0
 80274fc:	bfb8      	it	lt
 80274fe:	4249      	neglt	r1, r1
 8027500:	b209      	sxth	r1, r1
 8027502:	428a      	cmp	r2, r1
 8027504:	da10      	bge.n	8027528 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8027506:	6920      	ldr	r0, [r4, #16]
 8027508:	4669      	mov	r1, sp
 802750a:	eba8 0606 	sub.w	r6, r8, r6
 802750e:	1bef      	subs	r7, r5, r7
 8027510:	6803      	ldr	r3, [r0, #0]
 8027512:	685b      	ldr	r3, [r3, #4]
 8027514:	4798      	blx	r3
 8027516:	2300      	movs	r3, #0
 8027518:	2001      	movs	r0, #1
 802751a:	8166      	strh	r6, [r4, #10]
 802751c:	8123      	strh	r3, [r4, #8]
 802751e:	81a7      	strh	r7, [r4, #12]
 8027520:	f8a4 8004 	strh.w	r8, [r4, #4]
 8027524:	80e5      	strh	r5, [r4, #6]
 8027526:	73a0      	strb	r0, [r4, #14]
 8027528:	b004      	add	sp, #16
 802752a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802752e:	bf00      	nop
 8027530:	0802c118 	.word	0x0802c118

08027534 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8027534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027536:	461e      	mov	r6, r3
 8027538:	1e4b      	subs	r3, r1, #1
 802753a:	b085      	sub	sp, #20
 802753c:	4604      	mov	r4, r0
 802753e:	2b01      	cmp	r3, #1
 8027540:	460d      	mov	r5, r1
 8027542:	4617      	mov	r7, r2
 8027544:	d84b      	bhi.n	80275de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8027546:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802754a:	1cd3      	adds	r3, r2, #3
 802754c:	b29b      	uxth	r3, r3
 802754e:	2b06      	cmp	r3, #6
 8027550:	d916      	bls.n	8027580 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8027552:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80275f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8027556:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802755a:	f8cd c004 	str.w	ip, [sp, #4]
 802755e:	f04f 0c00 	mov.w	ip, #0
 8027562:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8027566:	6900      	ldr	r0, [r0, #16]
 8027568:	f8ad 100c 	strh.w	r1, [sp, #12]
 802756c:	a901      	add	r1, sp, #4
 802756e:	f88d c008 	strb.w	ip, [sp, #8]
 8027572:	f8ad 200a 	strh.w	r2, [sp, #10]
 8027576:	f8ad 300e 	strh.w	r3, [sp, #14]
 802757a:	6803      	ldr	r3, [r0, #0]
 802757c:	689b      	ldr	r3, [r3, #8]
 802757e:	4798      	blx	r3
 8027580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027584:	1cd3      	adds	r3, r2, #3
 8027586:	b29b      	uxth	r3, r3
 8027588:	2b06      	cmp	r3, #6
 802758a:	d916      	bls.n	80275ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802758c:	f8df c064 	ldr.w	ip, [pc, #100]	; 80275f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8027590:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8027594:	f8cd c004 	str.w	ip, [sp, #4]
 8027598:	f04f 0c01 	mov.w	ip, #1
 802759c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80275a0:	6920      	ldr	r0, [r4, #16]
 80275a2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80275a6:	a901      	add	r1, sp, #4
 80275a8:	f88d c008 	strb.w	ip, [sp, #8]
 80275ac:	f8ad 200a 	strh.w	r2, [sp, #10]
 80275b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80275b4:	6803      	ldr	r3, [r0, #0]
 80275b6:	689b      	ldr	r3, [r3, #8]
 80275b8:	4798      	blx	r3
 80275ba:	4b0d      	ldr	r3, [pc, #52]	; (80275f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80275bc:	a901      	add	r1, sp, #4
 80275be:	6920      	ldr	r0, [r4, #16]
 80275c0:	9301      	str	r3, [sp, #4]
 80275c2:	2300      	movs	r3, #0
 80275c4:	f88d 5008 	strb.w	r5, [sp, #8]
 80275c8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80275cc:	f8ad 600c 	strh.w	r6, [sp, #12]
 80275d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80275d4:	6803      	ldr	r3, [r0, #0]
 80275d6:	681b      	ldr	r3, [r3, #0]
 80275d8:	4798      	blx	r3
 80275da:	b005      	add	sp, #20
 80275dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80275de:	2900      	cmp	r1, #0
 80275e0:	d1eb      	bne.n	80275ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80275e2:	80a2      	strh	r2, [r4, #4]
 80275e4:	80c6      	strh	r6, [r0, #6]
 80275e6:	60a1      	str	r1, [r4, #8]
 80275e8:	81a1      	strh	r1, [r4, #12]
 80275ea:	73a1      	strb	r1, [r4, #14]
 80275ec:	e7e5      	b.n	80275ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80275ee:	bf00      	nop
 80275f0:	0802c104 	.word	0x0802c104
 80275f4:	0802c12c 	.word	0x0802c12c

080275f8 <__aeabi_atexit>:
 80275f8:	460b      	mov	r3, r1
 80275fa:	4601      	mov	r1, r0
 80275fc:	4618      	mov	r0, r3
 80275fe:	f000 b853 	b.w	80276a8 <__cxa_atexit>

08027602 <_ZdlPvj>:
 8027602:	f000 b812 	b.w	802762a <_ZdlPv>

08027606 <__cxa_guard_acquire>:
 8027606:	6803      	ldr	r3, [r0, #0]
 8027608:	07db      	lsls	r3, r3, #31
 802760a:	d406      	bmi.n	802761a <__cxa_guard_acquire+0x14>
 802760c:	7843      	ldrb	r3, [r0, #1]
 802760e:	b103      	cbz	r3, 8027612 <__cxa_guard_acquire+0xc>
 8027610:	deff      	udf	#255	; 0xff
 8027612:	2301      	movs	r3, #1
 8027614:	7043      	strb	r3, [r0, #1]
 8027616:	4618      	mov	r0, r3
 8027618:	4770      	bx	lr
 802761a:	2000      	movs	r0, #0
 802761c:	4770      	bx	lr

0802761e <__cxa_guard_release>:
 802761e:	2301      	movs	r3, #1
 8027620:	6003      	str	r3, [r0, #0]
 8027622:	4770      	bx	lr

08027624 <__cxa_pure_virtual>:
 8027624:	b508      	push	{r3, lr}
 8027626:	f000 f80f 	bl	8027648 <_ZSt9terminatev>

0802762a <_ZdlPv>:
 802762a:	f000 b893 	b.w	8027754 <free>

0802762e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802762e:	b508      	push	{r3, lr}
 8027630:	4780      	blx	r0
 8027632:	f000 f80e 	bl	8027652 <abort>
	...

08027638 <_ZSt13get_terminatev>:
 8027638:	4b02      	ldr	r3, [pc, #8]	; (8027644 <_ZSt13get_terminatev+0xc>)
 802763a:	6818      	ldr	r0, [r3, #0]
 802763c:	f3bf 8f5b 	dmb	ish
 8027640:	4770      	bx	lr
 8027642:	bf00      	nop
 8027644:	240000bc 	.word	0x240000bc

08027648 <_ZSt9terminatev>:
 8027648:	b508      	push	{r3, lr}
 802764a:	f7ff fff5 	bl	8027638 <_ZSt13get_terminatev>
 802764e:	f7ff ffee 	bl	802762e <_ZN10__cxxabiv111__terminateEPFvvE>

08027652 <abort>:
 8027652:	b508      	push	{r3, lr}
 8027654:	2006      	movs	r0, #6
 8027656:	f000 fca1 	bl	8027f9c <raise>
 802765a:	2001      	movs	r0, #1
 802765c:	f7df fea8 	bl	80073b0 <_exit>

08027660 <__assert_func>:
 8027660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027662:	4614      	mov	r4, r2
 8027664:	461a      	mov	r2, r3
 8027666:	4b09      	ldr	r3, [pc, #36]	; (802768c <__assert_func+0x2c>)
 8027668:	681b      	ldr	r3, [r3, #0]
 802766a:	4605      	mov	r5, r0
 802766c:	68d8      	ldr	r0, [r3, #12]
 802766e:	b14c      	cbz	r4, 8027684 <__assert_func+0x24>
 8027670:	4b07      	ldr	r3, [pc, #28]	; (8027690 <__assert_func+0x30>)
 8027672:	9100      	str	r1, [sp, #0]
 8027674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027678:	4906      	ldr	r1, [pc, #24]	; (8027694 <__assert_func+0x34>)
 802767a:	462b      	mov	r3, r5
 802767c:	f000 f828 	bl	80276d0 <fiprintf>
 8027680:	f7ff ffe7 	bl	8027652 <abort>
 8027684:	4b04      	ldr	r3, [pc, #16]	; (8027698 <__assert_func+0x38>)
 8027686:	461c      	mov	r4, r3
 8027688:	e7f3      	b.n	8027672 <__assert_func+0x12>
 802768a:	bf00      	nop
 802768c:	240000c0 	.word	0x240000c0
 8027690:	0802c354 	.word	0x0802c354
 8027694:	0802c361 	.word	0x0802c361
 8027698:	0802c38f 	.word	0x0802c38f

0802769c <atexit>:
 802769c:	2300      	movs	r3, #0
 802769e:	4601      	mov	r1, r0
 80276a0:	461a      	mov	r2, r3
 80276a2:	4618      	mov	r0, r3
 80276a4:	f000 bd6a 	b.w	802817c <__register_exitproc>

080276a8 <__cxa_atexit>:
 80276a8:	b510      	push	{r4, lr}
 80276aa:	4c05      	ldr	r4, [pc, #20]	; (80276c0 <__cxa_atexit+0x18>)
 80276ac:	4613      	mov	r3, r2
 80276ae:	b12c      	cbz	r4, 80276bc <__cxa_atexit+0x14>
 80276b0:	460a      	mov	r2, r1
 80276b2:	4601      	mov	r1, r0
 80276b4:	2002      	movs	r0, #2
 80276b6:	f000 fd61 	bl	802817c <__register_exitproc>
 80276ba:	bd10      	pop	{r4, pc}
 80276bc:	4620      	mov	r0, r4
 80276be:	e7fc      	b.n	80276ba <__cxa_atexit+0x12>
 80276c0:	0802817d 	.word	0x0802817d

080276c4 <__errno>:
 80276c4:	4b01      	ldr	r3, [pc, #4]	; (80276cc <__errno+0x8>)
 80276c6:	6818      	ldr	r0, [r3, #0]
 80276c8:	4770      	bx	lr
 80276ca:	bf00      	nop
 80276cc:	240000c0 	.word	0x240000c0

080276d0 <fiprintf>:
 80276d0:	b40e      	push	{r1, r2, r3}
 80276d2:	b503      	push	{r0, r1, lr}
 80276d4:	4601      	mov	r1, r0
 80276d6:	ab03      	add	r3, sp, #12
 80276d8:	4805      	ldr	r0, [pc, #20]	; (80276f0 <fiprintf+0x20>)
 80276da:	f853 2b04 	ldr.w	r2, [r3], #4
 80276de:	6800      	ldr	r0, [r0, #0]
 80276e0:	9301      	str	r3, [sp, #4]
 80276e2:	f000 f95f 	bl	80279a4 <_vfiprintf_r>
 80276e6:	b002      	add	sp, #8
 80276e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80276ec:	b003      	add	sp, #12
 80276ee:	4770      	bx	lr
 80276f0:	240000c0 	.word	0x240000c0

080276f4 <__libc_init_array>:
 80276f4:	b570      	push	{r4, r5, r6, lr}
 80276f6:	4d0d      	ldr	r5, [pc, #52]	; (802772c <__libc_init_array+0x38>)
 80276f8:	4c0d      	ldr	r4, [pc, #52]	; (8027730 <__libc_init_array+0x3c>)
 80276fa:	1b64      	subs	r4, r4, r5
 80276fc:	10a4      	asrs	r4, r4, #2
 80276fe:	2600      	movs	r6, #0
 8027700:	42a6      	cmp	r6, r4
 8027702:	d109      	bne.n	8027718 <__libc_init_array+0x24>
 8027704:	4d0b      	ldr	r5, [pc, #44]	; (8027734 <__libc_init_array+0x40>)
 8027706:	4c0c      	ldr	r4, [pc, #48]	; (8027738 <__libc_init_array+0x44>)
 8027708:	f001 f86e 	bl	80287e8 <_init>
 802770c:	1b64      	subs	r4, r4, r5
 802770e:	10a4      	asrs	r4, r4, #2
 8027710:	2600      	movs	r6, #0
 8027712:	42a6      	cmp	r6, r4
 8027714:	d105      	bne.n	8027722 <__libc_init_array+0x2e>
 8027716:	bd70      	pop	{r4, r5, r6, pc}
 8027718:	f855 3b04 	ldr.w	r3, [r5], #4
 802771c:	4798      	blx	r3
 802771e:	3601      	adds	r6, #1
 8027720:	e7ee      	b.n	8027700 <__libc_init_array+0xc>
 8027722:	f855 3b04 	ldr.w	r3, [r5], #4
 8027726:	4798      	blx	r3
 8027728:	3601      	adds	r6, #1
 802772a:	e7f2      	b.n	8027712 <__libc_init_array+0x1e>
 802772c:	0802c444 	.word	0x0802c444
 8027730:	0802c444 	.word	0x0802c444
 8027734:	0802c444 	.word	0x0802c444
 8027738:	0802c460 	.word	0x0802c460

0802773c <__retarget_lock_init_recursive>:
 802773c:	4770      	bx	lr

0802773e <__retarget_lock_acquire_recursive>:
 802773e:	4770      	bx	lr

08027740 <__retarget_lock_release>:
 8027740:	4770      	bx	lr

08027742 <__retarget_lock_release_recursive>:
 8027742:	4770      	bx	lr

08027744 <malloc>:
 8027744:	4b02      	ldr	r3, [pc, #8]	; (8027750 <malloc+0xc>)
 8027746:	4601      	mov	r1, r0
 8027748:	6818      	ldr	r0, [r3, #0]
 802774a:	f000 b88d 	b.w	8027868 <_malloc_r>
 802774e:	bf00      	nop
 8027750:	240000c0 	.word	0x240000c0

08027754 <free>:
 8027754:	4b02      	ldr	r3, [pc, #8]	; (8027760 <free+0xc>)
 8027756:	4601      	mov	r1, r0
 8027758:	6818      	ldr	r0, [r3, #0]
 802775a:	f000 b819 	b.w	8027790 <_free_r>
 802775e:	bf00      	nop
 8027760:	240000c0 	.word	0x240000c0

08027764 <memcpy>:
 8027764:	440a      	add	r2, r1
 8027766:	4291      	cmp	r1, r2
 8027768:	f100 33ff 	add.w	r3, r0, #4294967295
 802776c:	d100      	bne.n	8027770 <memcpy+0xc>
 802776e:	4770      	bx	lr
 8027770:	b510      	push	{r4, lr}
 8027772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027776:	f803 4f01 	strb.w	r4, [r3, #1]!
 802777a:	4291      	cmp	r1, r2
 802777c:	d1f9      	bne.n	8027772 <memcpy+0xe>
 802777e:	bd10      	pop	{r4, pc}

08027780 <memset>:
 8027780:	4402      	add	r2, r0
 8027782:	4603      	mov	r3, r0
 8027784:	4293      	cmp	r3, r2
 8027786:	d100      	bne.n	802778a <memset+0xa>
 8027788:	4770      	bx	lr
 802778a:	f803 1b01 	strb.w	r1, [r3], #1
 802778e:	e7f9      	b.n	8027784 <memset+0x4>

08027790 <_free_r>:
 8027790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027792:	2900      	cmp	r1, #0
 8027794:	d044      	beq.n	8027820 <_free_r+0x90>
 8027796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802779a:	9001      	str	r0, [sp, #4]
 802779c:	2b00      	cmp	r3, #0
 802779e:	f1a1 0404 	sub.w	r4, r1, #4
 80277a2:	bfb8      	it	lt
 80277a4:	18e4      	addlt	r4, r4, r3
 80277a6:	f000 ff67 	bl	8028678 <__malloc_lock>
 80277aa:	4a1e      	ldr	r2, [pc, #120]	; (8027824 <_free_r+0x94>)
 80277ac:	9801      	ldr	r0, [sp, #4]
 80277ae:	6813      	ldr	r3, [r2, #0]
 80277b0:	b933      	cbnz	r3, 80277c0 <_free_r+0x30>
 80277b2:	6063      	str	r3, [r4, #4]
 80277b4:	6014      	str	r4, [r2, #0]
 80277b6:	b003      	add	sp, #12
 80277b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80277bc:	f000 bf62 	b.w	8028684 <__malloc_unlock>
 80277c0:	42a3      	cmp	r3, r4
 80277c2:	d908      	bls.n	80277d6 <_free_r+0x46>
 80277c4:	6825      	ldr	r5, [r4, #0]
 80277c6:	1961      	adds	r1, r4, r5
 80277c8:	428b      	cmp	r3, r1
 80277ca:	bf01      	itttt	eq
 80277cc:	6819      	ldreq	r1, [r3, #0]
 80277ce:	685b      	ldreq	r3, [r3, #4]
 80277d0:	1949      	addeq	r1, r1, r5
 80277d2:	6021      	streq	r1, [r4, #0]
 80277d4:	e7ed      	b.n	80277b2 <_free_r+0x22>
 80277d6:	461a      	mov	r2, r3
 80277d8:	685b      	ldr	r3, [r3, #4]
 80277da:	b10b      	cbz	r3, 80277e0 <_free_r+0x50>
 80277dc:	42a3      	cmp	r3, r4
 80277de:	d9fa      	bls.n	80277d6 <_free_r+0x46>
 80277e0:	6811      	ldr	r1, [r2, #0]
 80277e2:	1855      	adds	r5, r2, r1
 80277e4:	42a5      	cmp	r5, r4
 80277e6:	d10b      	bne.n	8027800 <_free_r+0x70>
 80277e8:	6824      	ldr	r4, [r4, #0]
 80277ea:	4421      	add	r1, r4
 80277ec:	1854      	adds	r4, r2, r1
 80277ee:	42a3      	cmp	r3, r4
 80277f0:	6011      	str	r1, [r2, #0]
 80277f2:	d1e0      	bne.n	80277b6 <_free_r+0x26>
 80277f4:	681c      	ldr	r4, [r3, #0]
 80277f6:	685b      	ldr	r3, [r3, #4]
 80277f8:	6053      	str	r3, [r2, #4]
 80277fa:	4421      	add	r1, r4
 80277fc:	6011      	str	r1, [r2, #0]
 80277fe:	e7da      	b.n	80277b6 <_free_r+0x26>
 8027800:	d902      	bls.n	8027808 <_free_r+0x78>
 8027802:	230c      	movs	r3, #12
 8027804:	6003      	str	r3, [r0, #0]
 8027806:	e7d6      	b.n	80277b6 <_free_r+0x26>
 8027808:	6825      	ldr	r5, [r4, #0]
 802780a:	1961      	adds	r1, r4, r5
 802780c:	428b      	cmp	r3, r1
 802780e:	bf04      	itt	eq
 8027810:	6819      	ldreq	r1, [r3, #0]
 8027812:	685b      	ldreq	r3, [r3, #4]
 8027814:	6063      	str	r3, [r4, #4]
 8027816:	bf04      	itt	eq
 8027818:	1949      	addeq	r1, r1, r5
 802781a:	6021      	streq	r1, [r4, #0]
 802781c:	6054      	str	r4, [r2, #4]
 802781e:	e7ca      	b.n	80277b6 <_free_r+0x26>
 8027820:	b003      	add	sp, #12
 8027822:	bd30      	pop	{r4, r5, pc}
 8027824:	2402636c 	.word	0x2402636c

08027828 <sbrk_aligned>:
 8027828:	b570      	push	{r4, r5, r6, lr}
 802782a:	4e0e      	ldr	r6, [pc, #56]	; (8027864 <sbrk_aligned+0x3c>)
 802782c:	460c      	mov	r4, r1
 802782e:	6831      	ldr	r1, [r6, #0]
 8027830:	4605      	mov	r5, r0
 8027832:	b911      	cbnz	r1, 802783a <sbrk_aligned+0x12>
 8027834:	f000 fb7a 	bl	8027f2c <_sbrk_r>
 8027838:	6030      	str	r0, [r6, #0]
 802783a:	4621      	mov	r1, r4
 802783c:	4628      	mov	r0, r5
 802783e:	f000 fb75 	bl	8027f2c <_sbrk_r>
 8027842:	1c43      	adds	r3, r0, #1
 8027844:	d00a      	beq.n	802785c <sbrk_aligned+0x34>
 8027846:	1cc4      	adds	r4, r0, #3
 8027848:	f024 0403 	bic.w	r4, r4, #3
 802784c:	42a0      	cmp	r0, r4
 802784e:	d007      	beq.n	8027860 <sbrk_aligned+0x38>
 8027850:	1a21      	subs	r1, r4, r0
 8027852:	4628      	mov	r0, r5
 8027854:	f000 fb6a 	bl	8027f2c <_sbrk_r>
 8027858:	3001      	adds	r0, #1
 802785a:	d101      	bne.n	8027860 <sbrk_aligned+0x38>
 802785c:	f04f 34ff 	mov.w	r4, #4294967295
 8027860:	4620      	mov	r0, r4
 8027862:	bd70      	pop	{r4, r5, r6, pc}
 8027864:	24026370 	.word	0x24026370

08027868 <_malloc_r>:
 8027868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802786c:	1ccd      	adds	r5, r1, #3
 802786e:	f025 0503 	bic.w	r5, r5, #3
 8027872:	3508      	adds	r5, #8
 8027874:	2d0c      	cmp	r5, #12
 8027876:	bf38      	it	cc
 8027878:	250c      	movcc	r5, #12
 802787a:	2d00      	cmp	r5, #0
 802787c:	4607      	mov	r7, r0
 802787e:	db01      	blt.n	8027884 <_malloc_r+0x1c>
 8027880:	42a9      	cmp	r1, r5
 8027882:	d905      	bls.n	8027890 <_malloc_r+0x28>
 8027884:	230c      	movs	r3, #12
 8027886:	603b      	str	r3, [r7, #0]
 8027888:	2600      	movs	r6, #0
 802788a:	4630      	mov	r0, r6
 802788c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027890:	4e2e      	ldr	r6, [pc, #184]	; (802794c <_malloc_r+0xe4>)
 8027892:	f000 fef1 	bl	8028678 <__malloc_lock>
 8027896:	6833      	ldr	r3, [r6, #0]
 8027898:	461c      	mov	r4, r3
 802789a:	bb34      	cbnz	r4, 80278ea <_malloc_r+0x82>
 802789c:	4629      	mov	r1, r5
 802789e:	4638      	mov	r0, r7
 80278a0:	f7ff ffc2 	bl	8027828 <sbrk_aligned>
 80278a4:	1c43      	adds	r3, r0, #1
 80278a6:	4604      	mov	r4, r0
 80278a8:	d14d      	bne.n	8027946 <_malloc_r+0xde>
 80278aa:	6834      	ldr	r4, [r6, #0]
 80278ac:	4626      	mov	r6, r4
 80278ae:	2e00      	cmp	r6, #0
 80278b0:	d140      	bne.n	8027934 <_malloc_r+0xcc>
 80278b2:	6823      	ldr	r3, [r4, #0]
 80278b4:	4631      	mov	r1, r6
 80278b6:	4638      	mov	r0, r7
 80278b8:	eb04 0803 	add.w	r8, r4, r3
 80278bc:	f000 fb36 	bl	8027f2c <_sbrk_r>
 80278c0:	4580      	cmp	r8, r0
 80278c2:	d13a      	bne.n	802793a <_malloc_r+0xd2>
 80278c4:	6821      	ldr	r1, [r4, #0]
 80278c6:	3503      	adds	r5, #3
 80278c8:	1a6d      	subs	r5, r5, r1
 80278ca:	f025 0503 	bic.w	r5, r5, #3
 80278ce:	3508      	adds	r5, #8
 80278d0:	2d0c      	cmp	r5, #12
 80278d2:	bf38      	it	cc
 80278d4:	250c      	movcc	r5, #12
 80278d6:	4629      	mov	r1, r5
 80278d8:	4638      	mov	r0, r7
 80278da:	f7ff ffa5 	bl	8027828 <sbrk_aligned>
 80278de:	3001      	adds	r0, #1
 80278e0:	d02b      	beq.n	802793a <_malloc_r+0xd2>
 80278e2:	6823      	ldr	r3, [r4, #0]
 80278e4:	442b      	add	r3, r5
 80278e6:	6023      	str	r3, [r4, #0]
 80278e8:	e00e      	b.n	8027908 <_malloc_r+0xa0>
 80278ea:	6822      	ldr	r2, [r4, #0]
 80278ec:	1b52      	subs	r2, r2, r5
 80278ee:	d41e      	bmi.n	802792e <_malloc_r+0xc6>
 80278f0:	2a0b      	cmp	r2, #11
 80278f2:	d916      	bls.n	8027922 <_malloc_r+0xba>
 80278f4:	1961      	adds	r1, r4, r5
 80278f6:	42a3      	cmp	r3, r4
 80278f8:	6025      	str	r5, [r4, #0]
 80278fa:	bf18      	it	ne
 80278fc:	6059      	strne	r1, [r3, #4]
 80278fe:	6863      	ldr	r3, [r4, #4]
 8027900:	bf08      	it	eq
 8027902:	6031      	streq	r1, [r6, #0]
 8027904:	5162      	str	r2, [r4, r5]
 8027906:	604b      	str	r3, [r1, #4]
 8027908:	4638      	mov	r0, r7
 802790a:	f104 060b 	add.w	r6, r4, #11
 802790e:	f000 feb9 	bl	8028684 <__malloc_unlock>
 8027912:	f026 0607 	bic.w	r6, r6, #7
 8027916:	1d23      	adds	r3, r4, #4
 8027918:	1af2      	subs	r2, r6, r3
 802791a:	d0b6      	beq.n	802788a <_malloc_r+0x22>
 802791c:	1b9b      	subs	r3, r3, r6
 802791e:	50a3      	str	r3, [r4, r2]
 8027920:	e7b3      	b.n	802788a <_malloc_r+0x22>
 8027922:	6862      	ldr	r2, [r4, #4]
 8027924:	42a3      	cmp	r3, r4
 8027926:	bf0c      	ite	eq
 8027928:	6032      	streq	r2, [r6, #0]
 802792a:	605a      	strne	r2, [r3, #4]
 802792c:	e7ec      	b.n	8027908 <_malloc_r+0xa0>
 802792e:	4623      	mov	r3, r4
 8027930:	6864      	ldr	r4, [r4, #4]
 8027932:	e7b2      	b.n	802789a <_malloc_r+0x32>
 8027934:	4634      	mov	r4, r6
 8027936:	6876      	ldr	r6, [r6, #4]
 8027938:	e7b9      	b.n	80278ae <_malloc_r+0x46>
 802793a:	230c      	movs	r3, #12
 802793c:	603b      	str	r3, [r7, #0]
 802793e:	4638      	mov	r0, r7
 8027940:	f000 fea0 	bl	8028684 <__malloc_unlock>
 8027944:	e7a1      	b.n	802788a <_malloc_r+0x22>
 8027946:	6025      	str	r5, [r4, #0]
 8027948:	e7de      	b.n	8027908 <_malloc_r+0xa0>
 802794a:	bf00      	nop
 802794c:	2402636c 	.word	0x2402636c

08027950 <__sfputc_r>:
 8027950:	6893      	ldr	r3, [r2, #8]
 8027952:	3b01      	subs	r3, #1
 8027954:	2b00      	cmp	r3, #0
 8027956:	b410      	push	{r4}
 8027958:	6093      	str	r3, [r2, #8]
 802795a:	da08      	bge.n	802796e <__sfputc_r+0x1e>
 802795c:	6994      	ldr	r4, [r2, #24]
 802795e:	42a3      	cmp	r3, r4
 8027960:	db01      	blt.n	8027966 <__sfputc_r+0x16>
 8027962:	290a      	cmp	r1, #10
 8027964:	d103      	bne.n	802796e <__sfputc_r+0x1e>
 8027966:	f85d 4b04 	ldr.w	r4, [sp], #4
 802796a:	f000 bb47 	b.w	8027ffc <__swbuf_r>
 802796e:	6813      	ldr	r3, [r2, #0]
 8027970:	1c58      	adds	r0, r3, #1
 8027972:	6010      	str	r0, [r2, #0]
 8027974:	7019      	strb	r1, [r3, #0]
 8027976:	4608      	mov	r0, r1
 8027978:	f85d 4b04 	ldr.w	r4, [sp], #4
 802797c:	4770      	bx	lr

0802797e <__sfputs_r>:
 802797e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027980:	4606      	mov	r6, r0
 8027982:	460f      	mov	r7, r1
 8027984:	4614      	mov	r4, r2
 8027986:	18d5      	adds	r5, r2, r3
 8027988:	42ac      	cmp	r4, r5
 802798a:	d101      	bne.n	8027990 <__sfputs_r+0x12>
 802798c:	2000      	movs	r0, #0
 802798e:	e007      	b.n	80279a0 <__sfputs_r+0x22>
 8027990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027994:	463a      	mov	r2, r7
 8027996:	4630      	mov	r0, r6
 8027998:	f7ff ffda 	bl	8027950 <__sfputc_r>
 802799c:	1c43      	adds	r3, r0, #1
 802799e:	d1f3      	bne.n	8027988 <__sfputs_r+0xa>
 80279a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080279a4 <_vfiprintf_r>:
 80279a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279a8:	460d      	mov	r5, r1
 80279aa:	b09d      	sub	sp, #116	; 0x74
 80279ac:	4614      	mov	r4, r2
 80279ae:	4698      	mov	r8, r3
 80279b0:	4606      	mov	r6, r0
 80279b2:	b118      	cbz	r0, 80279bc <_vfiprintf_r+0x18>
 80279b4:	6983      	ldr	r3, [r0, #24]
 80279b6:	b90b      	cbnz	r3, 80279bc <_vfiprintf_r+0x18>
 80279b8:	f000 fd5c 	bl	8028474 <__sinit>
 80279bc:	4b89      	ldr	r3, [pc, #548]	; (8027be4 <_vfiprintf_r+0x240>)
 80279be:	429d      	cmp	r5, r3
 80279c0:	d11b      	bne.n	80279fa <_vfiprintf_r+0x56>
 80279c2:	6875      	ldr	r5, [r6, #4]
 80279c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80279c6:	07d9      	lsls	r1, r3, #31
 80279c8:	d405      	bmi.n	80279d6 <_vfiprintf_r+0x32>
 80279ca:	89ab      	ldrh	r3, [r5, #12]
 80279cc:	059a      	lsls	r2, r3, #22
 80279ce:	d402      	bmi.n	80279d6 <_vfiprintf_r+0x32>
 80279d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80279d2:	f7ff feb4 	bl	802773e <__retarget_lock_acquire_recursive>
 80279d6:	89ab      	ldrh	r3, [r5, #12]
 80279d8:	071b      	lsls	r3, r3, #28
 80279da:	d501      	bpl.n	80279e0 <_vfiprintf_r+0x3c>
 80279dc:	692b      	ldr	r3, [r5, #16]
 80279de:	b9eb      	cbnz	r3, 8027a1c <_vfiprintf_r+0x78>
 80279e0:	4629      	mov	r1, r5
 80279e2:	4630      	mov	r0, r6
 80279e4:	f000 fb5c 	bl	80280a0 <__swsetup_r>
 80279e8:	b1c0      	cbz	r0, 8027a1c <_vfiprintf_r+0x78>
 80279ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80279ec:	07dc      	lsls	r4, r3, #31
 80279ee:	d50e      	bpl.n	8027a0e <_vfiprintf_r+0x6a>
 80279f0:	f04f 30ff 	mov.w	r0, #4294967295
 80279f4:	b01d      	add	sp, #116	; 0x74
 80279f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279fa:	4b7b      	ldr	r3, [pc, #492]	; (8027be8 <_vfiprintf_r+0x244>)
 80279fc:	429d      	cmp	r5, r3
 80279fe:	d101      	bne.n	8027a04 <_vfiprintf_r+0x60>
 8027a00:	68b5      	ldr	r5, [r6, #8]
 8027a02:	e7df      	b.n	80279c4 <_vfiprintf_r+0x20>
 8027a04:	4b79      	ldr	r3, [pc, #484]	; (8027bec <_vfiprintf_r+0x248>)
 8027a06:	429d      	cmp	r5, r3
 8027a08:	bf08      	it	eq
 8027a0a:	68f5      	ldreq	r5, [r6, #12]
 8027a0c:	e7da      	b.n	80279c4 <_vfiprintf_r+0x20>
 8027a0e:	89ab      	ldrh	r3, [r5, #12]
 8027a10:	0598      	lsls	r0, r3, #22
 8027a12:	d4ed      	bmi.n	80279f0 <_vfiprintf_r+0x4c>
 8027a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027a16:	f7ff fe94 	bl	8027742 <__retarget_lock_release_recursive>
 8027a1a:	e7e9      	b.n	80279f0 <_vfiprintf_r+0x4c>
 8027a1c:	2300      	movs	r3, #0
 8027a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8027a20:	2320      	movs	r3, #32
 8027a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8027a2a:	2330      	movs	r3, #48	; 0x30
 8027a2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027bf0 <_vfiprintf_r+0x24c>
 8027a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027a34:	f04f 0901 	mov.w	r9, #1
 8027a38:	4623      	mov	r3, r4
 8027a3a:	469a      	mov	sl, r3
 8027a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027a40:	b10a      	cbz	r2, 8027a46 <_vfiprintf_r+0xa2>
 8027a42:	2a25      	cmp	r2, #37	; 0x25
 8027a44:	d1f9      	bne.n	8027a3a <_vfiprintf_r+0x96>
 8027a46:	ebba 0b04 	subs.w	fp, sl, r4
 8027a4a:	d00b      	beq.n	8027a64 <_vfiprintf_r+0xc0>
 8027a4c:	465b      	mov	r3, fp
 8027a4e:	4622      	mov	r2, r4
 8027a50:	4629      	mov	r1, r5
 8027a52:	4630      	mov	r0, r6
 8027a54:	f7ff ff93 	bl	802797e <__sfputs_r>
 8027a58:	3001      	adds	r0, #1
 8027a5a:	f000 80aa 	beq.w	8027bb2 <_vfiprintf_r+0x20e>
 8027a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027a60:	445a      	add	r2, fp
 8027a62:	9209      	str	r2, [sp, #36]	; 0x24
 8027a64:	f89a 3000 	ldrb.w	r3, [sl]
 8027a68:	2b00      	cmp	r3, #0
 8027a6a:	f000 80a2 	beq.w	8027bb2 <_vfiprintf_r+0x20e>
 8027a6e:	2300      	movs	r3, #0
 8027a70:	f04f 32ff 	mov.w	r2, #4294967295
 8027a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027a78:	f10a 0a01 	add.w	sl, sl, #1
 8027a7c:	9304      	str	r3, [sp, #16]
 8027a7e:	9307      	str	r3, [sp, #28]
 8027a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027a84:	931a      	str	r3, [sp, #104]	; 0x68
 8027a86:	4654      	mov	r4, sl
 8027a88:	2205      	movs	r2, #5
 8027a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027a8e:	4858      	ldr	r0, [pc, #352]	; (8027bf0 <_vfiprintf_r+0x24c>)
 8027a90:	f7d8 fc2e 	bl	80002f0 <memchr>
 8027a94:	9a04      	ldr	r2, [sp, #16]
 8027a96:	b9d8      	cbnz	r0, 8027ad0 <_vfiprintf_r+0x12c>
 8027a98:	06d1      	lsls	r1, r2, #27
 8027a9a:	bf44      	itt	mi
 8027a9c:	2320      	movmi	r3, #32
 8027a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027aa2:	0713      	lsls	r3, r2, #28
 8027aa4:	bf44      	itt	mi
 8027aa6:	232b      	movmi	r3, #43	; 0x2b
 8027aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027aac:	f89a 3000 	ldrb.w	r3, [sl]
 8027ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8027ab2:	d015      	beq.n	8027ae0 <_vfiprintf_r+0x13c>
 8027ab4:	9a07      	ldr	r2, [sp, #28]
 8027ab6:	4654      	mov	r4, sl
 8027ab8:	2000      	movs	r0, #0
 8027aba:	f04f 0c0a 	mov.w	ip, #10
 8027abe:	4621      	mov	r1, r4
 8027ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027ac4:	3b30      	subs	r3, #48	; 0x30
 8027ac6:	2b09      	cmp	r3, #9
 8027ac8:	d94e      	bls.n	8027b68 <_vfiprintf_r+0x1c4>
 8027aca:	b1b0      	cbz	r0, 8027afa <_vfiprintf_r+0x156>
 8027acc:	9207      	str	r2, [sp, #28]
 8027ace:	e014      	b.n	8027afa <_vfiprintf_r+0x156>
 8027ad0:	eba0 0308 	sub.w	r3, r0, r8
 8027ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8027ad8:	4313      	orrs	r3, r2
 8027ada:	9304      	str	r3, [sp, #16]
 8027adc:	46a2      	mov	sl, r4
 8027ade:	e7d2      	b.n	8027a86 <_vfiprintf_r+0xe2>
 8027ae0:	9b03      	ldr	r3, [sp, #12]
 8027ae2:	1d19      	adds	r1, r3, #4
 8027ae4:	681b      	ldr	r3, [r3, #0]
 8027ae6:	9103      	str	r1, [sp, #12]
 8027ae8:	2b00      	cmp	r3, #0
 8027aea:	bfbb      	ittet	lt
 8027aec:	425b      	neglt	r3, r3
 8027aee:	f042 0202 	orrlt.w	r2, r2, #2
 8027af2:	9307      	strge	r3, [sp, #28]
 8027af4:	9307      	strlt	r3, [sp, #28]
 8027af6:	bfb8      	it	lt
 8027af8:	9204      	strlt	r2, [sp, #16]
 8027afa:	7823      	ldrb	r3, [r4, #0]
 8027afc:	2b2e      	cmp	r3, #46	; 0x2e
 8027afe:	d10c      	bne.n	8027b1a <_vfiprintf_r+0x176>
 8027b00:	7863      	ldrb	r3, [r4, #1]
 8027b02:	2b2a      	cmp	r3, #42	; 0x2a
 8027b04:	d135      	bne.n	8027b72 <_vfiprintf_r+0x1ce>
 8027b06:	9b03      	ldr	r3, [sp, #12]
 8027b08:	1d1a      	adds	r2, r3, #4
 8027b0a:	681b      	ldr	r3, [r3, #0]
 8027b0c:	9203      	str	r2, [sp, #12]
 8027b0e:	2b00      	cmp	r3, #0
 8027b10:	bfb8      	it	lt
 8027b12:	f04f 33ff 	movlt.w	r3, #4294967295
 8027b16:	3402      	adds	r4, #2
 8027b18:	9305      	str	r3, [sp, #20]
 8027b1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027c00 <_vfiprintf_r+0x25c>
 8027b1e:	7821      	ldrb	r1, [r4, #0]
 8027b20:	2203      	movs	r2, #3
 8027b22:	4650      	mov	r0, sl
 8027b24:	f7d8 fbe4 	bl	80002f0 <memchr>
 8027b28:	b140      	cbz	r0, 8027b3c <_vfiprintf_r+0x198>
 8027b2a:	2340      	movs	r3, #64	; 0x40
 8027b2c:	eba0 000a 	sub.w	r0, r0, sl
 8027b30:	fa03 f000 	lsl.w	r0, r3, r0
 8027b34:	9b04      	ldr	r3, [sp, #16]
 8027b36:	4303      	orrs	r3, r0
 8027b38:	3401      	adds	r4, #1
 8027b3a:	9304      	str	r3, [sp, #16]
 8027b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027b40:	482c      	ldr	r0, [pc, #176]	; (8027bf4 <_vfiprintf_r+0x250>)
 8027b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027b46:	2206      	movs	r2, #6
 8027b48:	f7d8 fbd2 	bl	80002f0 <memchr>
 8027b4c:	2800      	cmp	r0, #0
 8027b4e:	d03f      	beq.n	8027bd0 <_vfiprintf_r+0x22c>
 8027b50:	4b29      	ldr	r3, [pc, #164]	; (8027bf8 <_vfiprintf_r+0x254>)
 8027b52:	bb1b      	cbnz	r3, 8027b9c <_vfiprintf_r+0x1f8>
 8027b54:	9b03      	ldr	r3, [sp, #12]
 8027b56:	3307      	adds	r3, #7
 8027b58:	f023 0307 	bic.w	r3, r3, #7
 8027b5c:	3308      	adds	r3, #8
 8027b5e:	9303      	str	r3, [sp, #12]
 8027b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b62:	443b      	add	r3, r7
 8027b64:	9309      	str	r3, [sp, #36]	; 0x24
 8027b66:	e767      	b.n	8027a38 <_vfiprintf_r+0x94>
 8027b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8027b6c:	460c      	mov	r4, r1
 8027b6e:	2001      	movs	r0, #1
 8027b70:	e7a5      	b.n	8027abe <_vfiprintf_r+0x11a>
 8027b72:	2300      	movs	r3, #0
 8027b74:	3401      	adds	r4, #1
 8027b76:	9305      	str	r3, [sp, #20]
 8027b78:	4619      	mov	r1, r3
 8027b7a:	f04f 0c0a 	mov.w	ip, #10
 8027b7e:	4620      	mov	r0, r4
 8027b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027b84:	3a30      	subs	r2, #48	; 0x30
 8027b86:	2a09      	cmp	r2, #9
 8027b88:	d903      	bls.n	8027b92 <_vfiprintf_r+0x1ee>
 8027b8a:	2b00      	cmp	r3, #0
 8027b8c:	d0c5      	beq.n	8027b1a <_vfiprintf_r+0x176>
 8027b8e:	9105      	str	r1, [sp, #20]
 8027b90:	e7c3      	b.n	8027b1a <_vfiprintf_r+0x176>
 8027b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8027b96:	4604      	mov	r4, r0
 8027b98:	2301      	movs	r3, #1
 8027b9a:	e7f0      	b.n	8027b7e <_vfiprintf_r+0x1da>
 8027b9c:	ab03      	add	r3, sp, #12
 8027b9e:	9300      	str	r3, [sp, #0]
 8027ba0:	462a      	mov	r2, r5
 8027ba2:	4b16      	ldr	r3, [pc, #88]	; (8027bfc <_vfiprintf_r+0x258>)
 8027ba4:	a904      	add	r1, sp, #16
 8027ba6:	4630      	mov	r0, r6
 8027ba8:	f3af 8000 	nop.w
 8027bac:	4607      	mov	r7, r0
 8027bae:	1c78      	adds	r0, r7, #1
 8027bb0:	d1d6      	bne.n	8027b60 <_vfiprintf_r+0x1bc>
 8027bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027bb4:	07d9      	lsls	r1, r3, #31
 8027bb6:	d405      	bmi.n	8027bc4 <_vfiprintf_r+0x220>
 8027bb8:	89ab      	ldrh	r3, [r5, #12]
 8027bba:	059a      	lsls	r2, r3, #22
 8027bbc:	d402      	bmi.n	8027bc4 <_vfiprintf_r+0x220>
 8027bbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027bc0:	f7ff fdbf 	bl	8027742 <__retarget_lock_release_recursive>
 8027bc4:	89ab      	ldrh	r3, [r5, #12]
 8027bc6:	065b      	lsls	r3, r3, #25
 8027bc8:	f53f af12 	bmi.w	80279f0 <_vfiprintf_r+0x4c>
 8027bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027bce:	e711      	b.n	80279f4 <_vfiprintf_r+0x50>
 8027bd0:	ab03      	add	r3, sp, #12
 8027bd2:	9300      	str	r3, [sp, #0]
 8027bd4:	462a      	mov	r2, r5
 8027bd6:	4b09      	ldr	r3, [pc, #36]	; (8027bfc <_vfiprintf_r+0x258>)
 8027bd8:	a904      	add	r1, sp, #16
 8027bda:	4630      	mov	r0, r6
 8027bdc:	f000 f880 	bl	8027ce0 <_printf_i>
 8027be0:	e7e4      	b.n	8027bac <_vfiprintf_r+0x208>
 8027be2:	bf00      	nop
 8027be4:	0802c3ec 	.word	0x0802c3ec
 8027be8:	0802c40c 	.word	0x0802c40c
 8027bec:	0802c3cc 	.word	0x0802c3cc
 8027bf0:	0802c394 	.word	0x0802c394
 8027bf4:	0802c39e 	.word	0x0802c39e
 8027bf8:	00000000 	.word	0x00000000
 8027bfc:	0802797f 	.word	0x0802797f
 8027c00:	0802c39a 	.word	0x0802c39a

08027c04 <_printf_common>:
 8027c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027c08:	4616      	mov	r6, r2
 8027c0a:	4699      	mov	r9, r3
 8027c0c:	688a      	ldr	r2, [r1, #8]
 8027c0e:	690b      	ldr	r3, [r1, #16]
 8027c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027c14:	4293      	cmp	r3, r2
 8027c16:	bfb8      	it	lt
 8027c18:	4613      	movlt	r3, r2
 8027c1a:	6033      	str	r3, [r6, #0]
 8027c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027c20:	4607      	mov	r7, r0
 8027c22:	460c      	mov	r4, r1
 8027c24:	b10a      	cbz	r2, 8027c2a <_printf_common+0x26>
 8027c26:	3301      	adds	r3, #1
 8027c28:	6033      	str	r3, [r6, #0]
 8027c2a:	6823      	ldr	r3, [r4, #0]
 8027c2c:	0699      	lsls	r1, r3, #26
 8027c2e:	bf42      	ittt	mi
 8027c30:	6833      	ldrmi	r3, [r6, #0]
 8027c32:	3302      	addmi	r3, #2
 8027c34:	6033      	strmi	r3, [r6, #0]
 8027c36:	6825      	ldr	r5, [r4, #0]
 8027c38:	f015 0506 	ands.w	r5, r5, #6
 8027c3c:	d106      	bne.n	8027c4c <_printf_common+0x48>
 8027c3e:	f104 0a19 	add.w	sl, r4, #25
 8027c42:	68e3      	ldr	r3, [r4, #12]
 8027c44:	6832      	ldr	r2, [r6, #0]
 8027c46:	1a9b      	subs	r3, r3, r2
 8027c48:	42ab      	cmp	r3, r5
 8027c4a:	dc26      	bgt.n	8027c9a <_printf_common+0x96>
 8027c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027c50:	1e13      	subs	r3, r2, #0
 8027c52:	6822      	ldr	r2, [r4, #0]
 8027c54:	bf18      	it	ne
 8027c56:	2301      	movne	r3, #1
 8027c58:	0692      	lsls	r2, r2, #26
 8027c5a:	d42b      	bmi.n	8027cb4 <_printf_common+0xb0>
 8027c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027c60:	4649      	mov	r1, r9
 8027c62:	4638      	mov	r0, r7
 8027c64:	47c0      	blx	r8
 8027c66:	3001      	adds	r0, #1
 8027c68:	d01e      	beq.n	8027ca8 <_printf_common+0xa4>
 8027c6a:	6823      	ldr	r3, [r4, #0]
 8027c6c:	68e5      	ldr	r5, [r4, #12]
 8027c6e:	6832      	ldr	r2, [r6, #0]
 8027c70:	f003 0306 	and.w	r3, r3, #6
 8027c74:	2b04      	cmp	r3, #4
 8027c76:	bf08      	it	eq
 8027c78:	1aad      	subeq	r5, r5, r2
 8027c7a:	68a3      	ldr	r3, [r4, #8]
 8027c7c:	6922      	ldr	r2, [r4, #16]
 8027c7e:	bf0c      	ite	eq
 8027c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027c84:	2500      	movne	r5, #0
 8027c86:	4293      	cmp	r3, r2
 8027c88:	bfc4      	itt	gt
 8027c8a:	1a9b      	subgt	r3, r3, r2
 8027c8c:	18ed      	addgt	r5, r5, r3
 8027c8e:	2600      	movs	r6, #0
 8027c90:	341a      	adds	r4, #26
 8027c92:	42b5      	cmp	r5, r6
 8027c94:	d11a      	bne.n	8027ccc <_printf_common+0xc8>
 8027c96:	2000      	movs	r0, #0
 8027c98:	e008      	b.n	8027cac <_printf_common+0xa8>
 8027c9a:	2301      	movs	r3, #1
 8027c9c:	4652      	mov	r2, sl
 8027c9e:	4649      	mov	r1, r9
 8027ca0:	4638      	mov	r0, r7
 8027ca2:	47c0      	blx	r8
 8027ca4:	3001      	adds	r0, #1
 8027ca6:	d103      	bne.n	8027cb0 <_printf_common+0xac>
 8027ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8027cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027cb0:	3501      	adds	r5, #1
 8027cb2:	e7c6      	b.n	8027c42 <_printf_common+0x3e>
 8027cb4:	18e1      	adds	r1, r4, r3
 8027cb6:	1c5a      	adds	r2, r3, #1
 8027cb8:	2030      	movs	r0, #48	; 0x30
 8027cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027cbe:	4422      	add	r2, r4
 8027cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027cc8:	3302      	adds	r3, #2
 8027cca:	e7c7      	b.n	8027c5c <_printf_common+0x58>
 8027ccc:	2301      	movs	r3, #1
 8027cce:	4622      	mov	r2, r4
 8027cd0:	4649      	mov	r1, r9
 8027cd2:	4638      	mov	r0, r7
 8027cd4:	47c0      	blx	r8
 8027cd6:	3001      	adds	r0, #1
 8027cd8:	d0e6      	beq.n	8027ca8 <_printf_common+0xa4>
 8027cda:	3601      	adds	r6, #1
 8027cdc:	e7d9      	b.n	8027c92 <_printf_common+0x8e>
	...

08027ce0 <_printf_i>:
 8027ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027ce4:	7e0f      	ldrb	r7, [r1, #24]
 8027ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027ce8:	2f78      	cmp	r7, #120	; 0x78
 8027cea:	4691      	mov	r9, r2
 8027cec:	4680      	mov	r8, r0
 8027cee:	460c      	mov	r4, r1
 8027cf0:	469a      	mov	sl, r3
 8027cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8027cf6:	d807      	bhi.n	8027d08 <_printf_i+0x28>
 8027cf8:	2f62      	cmp	r7, #98	; 0x62
 8027cfa:	d80a      	bhi.n	8027d12 <_printf_i+0x32>
 8027cfc:	2f00      	cmp	r7, #0
 8027cfe:	f000 80d8 	beq.w	8027eb2 <_printf_i+0x1d2>
 8027d02:	2f58      	cmp	r7, #88	; 0x58
 8027d04:	f000 80a3 	beq.w	8027e4e <_printf_i+0x16e>
 8027d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027d10:	e03a      	b.n	8027d88 <_printf_i+0xa8>
 8027d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027d16:	2b15      	cmp	r3, #21
 8027d18:	d8f6      	bhi.n	8027d08 <_printf_i+0x28>
 8027d1a:	a101      	add	r1, pc, #4	; (adr r1, 8027d20 <_printf_i+0x40>)
 8027d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027d20:	08027d79 	.word	0x08027d79
 8027d24:	08027d8d 	.word	0x08027d8d
 8027d28:	08027d09 	.word	0x08027d09
 8027d2c:	08027d09 	.word	0x08027d09
 8027d30:	08027d09 	.word	0x08027d09
 8027d34:	08027d09 	.word	0x08027d09
 8027d38:	08027d8d 	.word	0x08027d8d
 8027d3c:	08027d09 	.word	0x08027d09
 8027d40:	08027d09 	.word	0x08027d09
 8027d44:	08027d09 	.word	0x08027d09
 8027d48:	08027d09 	.word	0x08027d09
 8027d4c:	08027e99 	.word	0x08027e99
 8027d50:	08027dbd 	.word	0x08027dbd
 8027d54:	08027e7b 	.word	0x08027e7b
 8027d58:	08027d09 	.word	0x08027d09
 8027d5c:	08027d09 	.word	0x08027d09
 8027d60:	08027ebb 	.word	0x08027ebb
 8027d64:	08027d09 	.word	0x08027d09
 8027d68:	08027dbd 	.word	0x08027dbd
 8027d6c:	08027d09 	.word	0x08027d09
 8027d70:	08027d09 	.word	0x08027d09
 8027d74:	08027e83 	.word	0x08027e83
 8027d78:	682b      	ldr	r3, [r5, #0]
 8027d7a:	1d1a      	adds	r2, r3, #4
 8027d7c:	681b      	ldr	r3, [r3, #0]
 8027d7e:	602a      	str	r2, [r5, #0]
 8027d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027d88:	2301      	movs	r3, #1
 8027d8a:	e0a3      	b.n	8027ed4 <_printf_i+0x1f4>
 8027d8c:	6820      	ldr	r0, [r4, #0]
 8027d8e:	6829      	ldr	r1, [r5, #0]
 8027d90:	0606      	lsls	r6, r0, #24
 8027d92:	f101 0304 	add.w	r3, r1, #4
 8027d96:	d50a      	bpl.n	8027dae <_printf_i+0xce>
 8027d98:	680e      	ldr	r6, [r1, #0]
 8027d9a:	602b      	str	r3, [r5, #0]
 8027d9c:	2e00      	cmp	r6, #0
 8027d9e:	da03      	bge.n	8027da8 <_printf_i+0xc8>
 8027da0:	232d      	movs	r3, #45	; 0x2d
 8027da2:	4276      	negs	r6, r6
 8027da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027da8:	485e      	ldr	r0, [pc, #376]	; (8027f24 <_printf_i+0x244>)
 8027daa:	230a      	movs	r3, #10
 8027dac:	e019      	b.n	8027de2 <_printf_i+0x102>
 8027dae:	680e      	ldr	r6, [r1, #0]
 8027db0:	602b      	str	r3, [r5, #0]
 8027db2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027db6:	bf18      	it	ne
 8027db8:	b236      	sxthne	r6, r6
 8027dba:	e7ef      	b.n	8027d9c <_printf_i+0xbc>
 8027dbc:	682b      	ldr	r3, [r5, #0]
 8027dbe:	6820      	ldr	r0, [r4, #0]
 8027dc0:	1d19      	adds	r1, r3, #4
 8027dc2:	6029      	str	r1, [r5, #0]
 8027dc4:	0601      	lsls	r1, r0, #24
 8027dc6:	d501      	bpl.n	8027dcc <_printf_i+0xec>
 8027dc8:	681e      	ldr	r6, [r3, #0]
 8027dca:	e002      	b.n	8027dd2 <_printf_i+0xf2>
 8027dcc:	0646      	lsls	r6, r0, #25
 8027dce:	d5fb      	bpl.n	8027dc8 <_printf_i+0xe8>
 8027dd0:	881e      	ldrh	r6, [r3, #0]
 8027dd2:	4854      	ldr	r0, [pc, #336]	; (8027f24 <_printf_i+0x244>)
 8027dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8027dd6:	bf0c      	ite	eq
 8027dd8:	2308      	moveq	r3, #8
 8027dda:	230a      	movne	r3, #10
 8027ddc:	2100      	movs	r1, #0
 8027dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027de2:	6865      	ldr	r5, [r4, #4]
 8027de4:	60a5      	str	r5, [r4, #8]
 8027de6:	2d00      	cmp	r5, #0
 8027de8:	bfa2      	ittt	ge
 8027dea:	6821      	ldrge	r1, [r4, #0]
 8027dec:	f021 0104 	bicge.w	r1, r1, #4
 8027df0:	6021      	strge	r1, [r4, #0]
 8027df2:	b90e      	cbnz	r6, 8027df8 <_printf_i+0x118>
 8027df4:	2d00      	cmp	r5, #0
 8027df6:	d04d      	beq.n	8027e94 <_printf_i+0x1b4>
 8027df8:	4615      	mov	r5, r2
 8027dfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8027dfe:	fb03 6711 	mls	r7, r3, r1, r6
 8027e02:	5dc7      	ldrb	r7, [r0, r7]
 8027e04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027e08:	4637      	mov	r7, r6
 8027e0a:	42bb      	cmp	r3, r7
 8027e0c:	460e      	mov	r6, r1
 8027e0e:	d9f4      	bls.n	8027dfa <_printf_i+0x11a>
 8027e10:	2b08      	cmp	r3, #8
 8027e12:	d10b      	bne.n	8027e2c <_printf_i+0x14c>
 8027e14:	6823      	ldr	r3, [r4, #0]
 8027e16:	07de      	lsls	r6, r3, #31
 8027e18:	d508      	bpl.n	8027e2c <_printf_i+0x14c>
 8027e1a:	6923      	ldr	r3, [r4, #16]
 8027e1c:	6861      	ldr	r1, [r4, #4]
 8027e1e:	4299      	cmp	r1, r3
 8027e20:	bfde      	ittt	le
 8027e22:	2330      	movle	r3, #48	; 0x30
 8027e24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027e28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8027e2c:	1b52      	subs	r2, r2, r5
 8027e2e:	6122      	str	r2, [r4, #16]
 8027e30:	f8cd a000 	str.w	sl, [sp]
 8027e34:	464b      	mov	r3, r9
 8027e36:	aa03      	add	r2, sp, #12
 8027e38:	4621      	mov	r1, r4
 8027e3a:	4640      	mov	r0, r8
 8027e3c:	f7ff fee2 	bl	8027c04 <_printf_common>
 8027e40:	3001      	adds	r0, #1
 8027e42:	d14c      	bne.n	8027ede <_printf_i+0x1fe>
 8027e44:	f04f 30ff 	mov.w	r0, #4294967295
 8027e48:	b004      	add	sp, #16
 8027e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e4e:	4835      	ldr	r0, [pc, #212]	; (8027f24 <_printf_i+0x244>)
 8027e50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8027e54:	6829      	ldr	r1, [r5, #0]
 8027e56:	6823      	ldr	r3, [r4, #0]
 8027e58:	f851 6b04 	ldr.w	r6, [r1], #4
 8027e5c:	6029      	str	r1, [r5, #0]
 8027e5e:	061d      	lsls	r5, r3, #24
 8027e60:	d514      	bpl.n	8027e8c <_printf_i+0x1ac>
 8027e62:	07df      	lsls	r7, r3, #31
 8027e64:	bf44      	itt	mi
 8027e66:	f043 0320 	orrmi.w	r3, r3, #32
 8027e6a:	6023      	strmi	r3, [r4, #0]
 8027e6c:	b91e      	cbnz	r6, 8027e76 <_printf_i+0x196>
 8027e6e:	6823      	ldr	r3, [r4, #0]
 8027e70:	f023 0320 	bic.w	r3, r3, #32
 8027e74:	6023      	str	r3, [r4, #0]
 8027e76:	2310      	movs	r3, #16
 8027e78:	e7b0      	b.n	8027ddc <_printf_i+0xfc>
 8027e7a:	6823      	ldr	r3, [r4, #0]
 8027e7c:	f043 0320 	orr.w	r3, r3, #32
 8027e80:	6023      	str	r3, [r4, #0]
 8027e82:	2378      	movs	r3, #120	; 0x78
 8027e84:	4828      	ldr	r0, [pc, #160]	; (8027f28 <_printf_i+0x248>)
 8027e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027e8a:	e7e3      	b.n	8027e54 <_printf_i+0x174>
 8027e8c:	0659      	lsls	r1, r3, #25
 8027e8e:	bf48      	it	mi
 8027e90:	b2b6      	uxthmi	r6, r6
 8027e92:	e7e6      	b.n	8027e62 <_printf_i+0x182>
 8027e94:	4615      	mov	r5, r2
 8027e96:	e7bb      	b.n	8027e10 <_printf_i+0x130>
 8027e98:	682b      	ldr	r3, [r5, #0]
 8027e9a:	6826      	ldr	r6, [r4, #0]
 8027e9c:	6961      	ldr	r1, [r4, #20]
 8027e9e:	1d18      	adds	r0, r3, #4
 8027ea0:	6028      	str	r0, [r5, #0]
 8027ea2:	0635      	lsls	r5, r6, #24
 8027ea4:	681b      	ldr	r3, [r3, #0]
 8027ea6:	d501      	bpl.n	8027eac <_printf_i+0x1cc>
 8027ea8:	6019      	str	r1, [r3, #0]
 8027eaa:	e002      	b.n	8027eb2 <_printf_i+0x1d2>
 8027eac:	0670      	lsls	r0, r6, #25
 8027eae:	d5fb      	bpl.n	8027ea8 <_printf_i+0x1c8>
 8027eb0:	8019      	strh	r1, [r3, #0]
 8027eb2:	2300      	movs	r3, #0
 8027eb4:	6123      	str	r3, [r4, #16]
 8027eb6:	4615      	mov	r5, r2
 8027eb8:	e7ba      	b.n	8027e30 <_printf_i+0x150>
 8027eba:	682b      	ldr	r3, [r5, #0]
 8027ebc:	1d1a      	adds	r2, r3, #4
 8027ebe:	602a      	str	r2, [r5, #0]
 8027ec0:	681d      	ldr	r5, [r3, #0]
 8027ec2:	6862      	ldr	r2, [r4, #4]
 8027ec4:	2100      	movs	r1, #0
 8027ec6:	4628      	mov	r0, r5
 8027ec8:	f7d8 fa12 	bl	80002f0 <memchr>
 8027ecc:	b108      	cbz	r0, 8027ed2 <_printf_i+0x1f2>
 8027ece:	1b40      	subs	r0, r0, r5
 8027ed0:	6060      	str	r0, [r4, #4]
 8027ed2:	6863      	ldr	r3, [r4, #4]
 8027ed4:	6123      	str	r3, [r4, #16]
 8027ed6:	2300      	movs	r3, #0
 8027ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027edc:	e7a8      	b.n	8027e30 <_printf_i+0x150>
 8027ede:	6923      	ldr	r3, [r4, #16]
 8027ee0:	462a      	mov	r2, r5
 8027ee2:	4649      	mov	r1, r9
 8027ee4:	4640      	mov	r0, r8
 8027ee6:	47d0      	blx	sl
 8027ee8:	3001      	adds	r0, #1
 8027eea:	d0ab      	beq.n	8027e44 <_printf_i+0x164>
 8027eec:	6823      	ldr	r3, [r4, #0]
 8027eee:	079b      	lsls	r3, r3, #30
 8027ef0:	d413      	bmi.n	8027f1a <_printf_i+0x23a>
 8027ef2:	68e0      	ldr	r0, [r4, #12]
 8027ef4:	9b03      	ldr	r3, [sp, #12]
 8027ef6:	4298      	cmp	r0, r3
 8027ef8:	bfb8      	it	lt
 8027efa:	4618      	movlt	r0, r3
 8027efc:	e7a4      	b.n	8027e48 <_printf_i+0x168>
 8027efe:	2301      	movs	r3, #1
 8027f00:	4632      	mov	r2, r6
 8027f02:	4649      	mov	r1, r9
 8027f04:	4640      	mov	r0, r8
 8027f06:	47d0      	blx	sl
 8027f08:	3001      	adds	r0, #1
 8027f0a:	d09b      	beq.n	8027e44 <_printf_i+0x164>
 8027f0c:	3501      	adds	r5, #1
 8027f0e:	68e3      	ldr	r3, [r4, #12]
 8027f10:	9903      	ldr	r1, [sp, #12]
 8027f12:	1a5b      	subs	r3, r3, r1
 8027f14:	42ab      	cmp	r3, r5
 8027f16:	dcf2      	bgt.n	8027efe <_printf_i+0x21e>
 8027f18:	e7eb      	b.n	8027ef2 <_printf_i+0x212>
 8027f1a:	2500      	movs	r5, #0
 8027f1c:	f104 0619 	add.w	r6, r4, #25
 8027f20:	e7f5      	b.n	8027f0e <_printf_i+0x22e>
 8027f22:	bf00      	nop
 8027f24:	0802c3a5 	.word	0x0802c3a5
 8027f28:	0802c3b6 	.word	0x0802c3b6

08027f2c <_sbrk_r>:
 8027f2c:	b538      	push	{r3, r4, r5, lr}
 8027f2e:	4d06      	ldr	r5, [pc, #24]	; (8027f48 <_sbrk_r+0x1c>)
 8027f30:	2300      	movs	r3, #0
 8027f32:	4604      	mov	r4, r0
 8027f34:	4608      	mov	r0, r1
 8027f36:	602b      	str	r3, [r5, #0]
 8027f38:	f7df fab2 	bl	80074a0 <_sbrk>
 8027f3c:	1c43      	adds	r3, r0, #1
 8027f3e:	d102      	bne.n	8027f46 <_sbrk_r+0x1a>
 8027f40:	682b      	ldr	r3, [r5, #0]
 8027f42:	b103      	cbz	r3, 8027f46 <_sbrk_r+0x1a>
 8027f44:	6023      	str	r3, [r4, #0]
 8027f46:	bd38      	pop	{r3, r4, r5, pc}
 8027f48:	2402650c 	.word	0x2402650c

08027f4c <_raise_r>:
 8027f4c:	291f      	cmp	r1, #31
 8027f4e:	b538      	push	{r3, r4, r5, lr}
 8027f50:	4604      	mov	r4, r0
 8027f52:	460d      	mov	r5, r1
 8027f54:	d904      	bls.n	8027f60 <_raise_r+0x14>
 8027f56:	2316      	movs	r3, #22
 8027f58:	6003      	str	r3, [r0, #0]
 8027f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8027f5e:	bd38      	pop	{r3, r4, r5, pc}
 8027f60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027f62:	b112      	cbz	r2, 8027f6a <_raise_r+0x1e>
 8027f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027f68:	b94b      	cbnz	r3, 8027f7e <_raise_r+0x32>
 8027f6a:	4620      	mov	r0, r4
 8027f6c:	f000 f830 	bl	8027fd0 <_getpid_r>
 8027f70:	462a      	mov	r2, r5
 8027f72:	4601      	mov	r1, r0
 8027f74:	4620      	mov	r0, r4
 8027f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027f7a:	f000 b817 	b.w	8027fac <_kill_r>
 8027f7e:	2b01      	cmp	r3, #1
 8027f80:	d00a      	beq.n	8027f98 <_raise_r+0x4c>
 8027f82:	1c59      	adds	r1, r3, #1
 8027f84:	d103      	bne.n	8027f8e <_raise_r+0x42>
 8027f86:	2316      	movs	r3, #22
 8027f88:	6003      	str	r3, [r0, #0]
 8027f8a:	2001      	movs	r0, #1
 8027f8c:	e7e7      	b.n	8027f5e <_raise_r+0x12>
 8027f8e:	2400      	movs	r4, #0
 8027f90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027f94:	4628      	mov	r0, r5
 8027f96:	4798      	blx	r3
 8027f98:	2000      	movs	r0, #0
 8027f9a:	e7e0      	b.n	8027f5e <_raise_r+0x12>

08027f9c <raise>:
 8027f9c:	4b02      	ldr	r3, [pc, #8]	; (8027fa8 <raise+0xc>)
 8027f9e:	4601      	mov	r1, r0
 8027fa0:	6818      	ldr	r0, [r3, #0]
 8027fa2:	f7ff bfd3 	b.w	8027f4c <_raise_r>
 8027fa6:	bf00      	nop
 8027fa8:	240000c0 	.word	0x240000c0

08027fac <_kill_r>:
 8027fac:	b538      	push	{r3, r4, r5, lr}
 8027fae:	4d07      	ldr	r5, [pc, #28]	; (8027fcc <_kill_r+0x20>)
 8027fb0:	2300      	movs	r3, #0
 8027fb2:	4604      	mov	r4, r0
 8027fb4:	4608      	mov	r0, r1
 8027fb6:	4611      	mov	r1, r2
 8027fb8:	602b      	str	r3, [r5, #0]
 8027fba:	f7df f9e9 	bl	8007390 <_kill>
 8027fbe:	1c43      	adds	r3, r0, #1
 8027fc0:	d102      	bne.n	8027fc8 <_kill_r+0x1c>
 8027fc2:	682b      	ldr	r3, [r5, #0]
 8027fc4:	b103      	cbz	r3, 8027fc8 <_kill_r+0x1c>
 8027fc6:	6023      	str	r3, [r4, #0]
 8027fc8:	bd38      	pop	{r3, r4, r5, pc}
 8027fca:	bf00      	nop
 8027fcc:	2402650c 	.word	0x2402650c

08027fd0 <_getpid_r>:
 8027fd0:	f7df b9d6 	b.w	8007380 <_getpid>

08027fd4 <strncmp>:
 8027fd4:	b510      	push	{r4, lr}
 8027fd6:	b17a      	cbz	r2, 8027ff8 <strncmp+0x24>
 8027fd8:	4603      	mov	r3, r0
 8027fda:	3901      	subs	r1, #1
 8027fdc:	1884      	adds	r4, r0, r2
 8027fde:	f813 0b01 	ldrb.w	r0, [r3], #1
 8027fe2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8027fe6:	4290      	cmp	r0, r2
 8027fe8:	d101      	bne.n	8027fee <strncmp+0x1a>
 8027fea:	42a3      	cmp	r3, r4
 8027fec:	d101      	bne.n	8027ff2 <strncmp+0x1e>
 8027fee:	1a80      	subs	r0, r0, r2
 8027ff0:	bd10      	pop	{r4, pc}
 8027ff2:	2800      	cmp	r0, #0
 8027ff4:	d1f3      	bne.n	8027fde <strncmp+0xa>
 8027ff6:	e7fa      	b.n	8027fee <strncmp+0x1a>
 8027ff8:	4610      	mov	r0, r2
 8027ffa:	e7f9      	b.n	8027ff0 <strncmp+0x1c>

08027ffc <__swbuf_r>:
 8027ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027ffe:	460e      	mov	r6, r1
 8028000:	4614      	mov	r4, r2
 8028002:	4605      	mov	r5, r0
 8028004:	b118      	cbz	r0, 802800e <__swbuf_r+0x12>
 8028006:	6983      	ldr	r3, [r0, #24]
 8028008:	b90b      	cbnz	r3, 802800e <__swbuf_r+0x12>
 802800a:	f000 fa33 	bl	8028474 <__sinit>
 802800e:	4b21      	ldr	r3, [pc, #132]	; (8028094 <__swbuf_r+0x98>)
 8028010:	429c      	cmp	r4, r3
 8028012:	d12b      	bne.n	802806c <__swbuf_r+0x70>
 8028014:	686c      	ldr	r4, [r5, #4]
 8028016:	69a3      	ldr	r3, [r4, #24]
 8028018:	60a3      	str	r3, [r4, #8]
 802801a:	89a3      	ldrh	r3, [r4, #12]
 802801c:	071a      	lsls	r2, r3, #28
 802801e:	d52f      	bpl.n	8028080 <__swbuf_r+0x84>
 8028020:	6923      	ldr	r3, [r4, #16]
 8028022:	b36b      	cbz	r3, 8028080 <__swbuf_r+0x84>
 8028024:	6923      	ldr	r3, [r4, #16]
 8028026:	6820      	ldr	r0, [r4, #0]
 8028028:	1ac0      	subs	r0, r0, r3
 802802a:	6963      	ldr	r3, [r4, #20]
 802802c:	b2f6      	uxtb	r6, r6
 802802e:	4283      	cmp	r3, r0
 8028030:	4637      	mov	r7, r6
 8028032:	dc04      	bgt.n	802803e <__swbuf_r+0x42>
 8028034:	4621      	mov	r1, r4
 8028036:	4628      	mov	r0, r5
 8028038:	f000 f988 	bl	802834c <_fflush_r>
 802803c:	bb30      	cbnz	r0, 802808c <__swbuf_r+0x90>
 802803e:	68a3      	ldr	r3, [r4, #8]
 8028040:	3b01      	subs	r3, #1
 8028042:	60a3      	str	r3, [r4, #8]
 8028044:	6823      	ldr	r3, [r4, #0]
 8028046:	1c5a      	adds	r2, r3, #1
 8028048:	6022      	str	r2, [r4, #0]
 802804a:	701e      	strb	r6, [r3, #0]
 802804c:	6963      	ldr	r3, [r4, #20]
 802804e:	3001      	adds	r0, #1
 8028050:	4283      	cmp	r3, r0
 8028052:	d004      	beq.n	802805e <__swbuf_r+0x62>
 8028054:	89a3      	ldrh	r3, [r4, #12]
 8028056:	07db      	lsls	r3, r3, #31
 8028058:	d506      	bpl.n	8028068 <__swbuf_r+0x6c>
 802805a:	2e0a      	cmp	r6, #10
 802805c:	d104      	bne.n	8028068 <__swbuf_r+0x6c>
 802805e:	4621      	mov	r1, r4
 8028060:	4628      	mov	r0, r5
 8028062:	f000 f973 	bl	802834c <_fflush_r>
 8028066:	b988      	cbnz	r0, 802808c <__swbuf_r+0x90>
 8028068:	4638      	mov	r0, r7
 802806a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802806c:	4b0a      	ldr	r3, [pc, #40]	; (8028098 <__swbuf_r+0x9c>)
 802806e:	429c      	cmp	r4, r3
 8028070:	d101      	bne.n	8028076 <__swbuf_r+0x7a>
 8028072:	68ac      	ldr	r4, [r5, #8]
 8028074:	e7cf      	b.n	8028016 <__swbuf_r+0x1a>
 8028076:	4b09      	ldr	r3, [pc, #36]	; (802809c <__swbuf_r+0xa0>)
 8028078:	429c      	cmp	r4, r3
 802807a:	bf08      	it	eq
 802807c:	68ec      	ldreq	r4, [r5, #12]
 802807e:	e7ca      	b.n	8028016 <__swbuf_r+0x1a>
 8028080:	4621      	mov	r1, r4
 8028082:	4628      	mov	r0, r5
 8028084:	f000 f80c 	bl	80280a0 <__swsetup_r>
 8028088:	2800      	cmp	r0, #0
 802808a:	d0cb      	beq.n	8028024 <__swbuf_r+0x28>
 802808c:	f04f 37ff 	mov.w	r7, #4294967295
 8028090:	e7ea      	b.n	8028068 <__swbuf_r+0x6c>
 8028092:	bf00      	nop
 8028094:	0802c3ec 	.word	0x0802c3ec
 8028098:	0802c40c 	.word	0x0802c40c
 802809c:	0802c3cc 	.word	0x0802c3cc

080280a0 <__swsetup_r>:
 80280a0:	4b32      	ldr	r3, [pc, #200]	; (802816c <__swsetup_r+0xcc>)
 80280a2:	b570      	push	{r4, r5, r6, lr}
 80280a4:	681d      	ldr	r5, [r3, #0]
 80280a6:	4606      	mov	r6, r0
 80280a8:	460c      	mov	r4, r1
 80280aa:	b125      	cbz	r5, 80280b6 <__swsetup_r+0x16>
 80280ac:	69ab      	ldr	r3, [r5, #24]
 80280ae:	b913      	cbnz	r3, 80280b6 <__swsetup_r+0x16>
 80280b0:	4628      	mov	r0, r5
 80280b2:	f000 f9df 	bl	8028474 <__sinit>
 80280b6:	4b2e      	ldr	r3, [pc, #184]	; (8028170 <__swsetup_r+0xd0>)
 80280b8:	429c      	cmp	r4, r3
 80280ba:	d10f      	bne.n	80280dc <__swsetup_r+0x3c>
 80280bc:	686c      	ldr	r4, [r5, #4]
 80280be:	89a3      	ldrh	r3, [r4, #12]
 80280c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80280c4:	0719      	lsls	r1, r3, #28
 80280c6:	d42c      	bmi.n	8028122 <__swsetup_r+0x82>
 80280c8:	06dd      	lsls	r5, r3, #27
 80280ca:	d411      	bmi.n	80280f0 <__swsetup_r+0x50>
 80280cc:	2309      	movs	r3, #9
 80280ce:	6033      	str	r3, [r6, #0]
 80280d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80280d4:	81a3      	strh	r3, [r4, #12]
 80280d6:	f04f 30ff 	mov.w	r0, #4294967295
 80280da:	e03e      	b.n	802815a <__swsetup_r+0xba>
 80280dc:	4b25      	ldr	r3, [pc, #148]	; (8028174 <__swsetup_r+0xd4>)
 80280de:	429c      	cmp	r4, r3
 80280e0:	d101      	bne.n	80280e6 <__swsetup_r+0x46>
 80280e2:	68ac      	ldr	r4, [r5, #8]
 80280e4:	e7eb      	b.n	80280be <__swsetup_r+0x1e>
 80280e6:	4b24      	ldr	r3, [pc, #144]	; (8028178 <__swsetup_r+0xd8>)
 80280e8:	429c      	cmp	r4, r3
 80280ea:	bf08      	it	eq
 80280ec:	68ec      	ldreq	r4, [r5, #12]
 80280ee:	e7e6      	b.n	80280be <__swsetup_r+0x1e>
 80280f0:	0758      	lsls	r0, r3, #29
 80280f2:	d512      	bpl.n	802811a <__swsetup_r+0x7a>
 80280f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80280f6:	b141      	cbz	r1, 802810a <__swsetup_r+0x6a>
 80280f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80280fc:	4299      	cmp	r1, r3
 80280fe:	d002      	beq.n	8028106 <__swsetup_r+0x66>
 8028100:	4630      	mov	r0, r6
 8028102:	f7ff fb45 	bl	8027790 <_free_r>
 8028106:	2300      	movs	r3, #0
 8028108:	6363      	str	r3, [r4, #52]	; 0x34
 802810a:	89a3      	ldrh	r3, [r4, #12]
 802810c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028110:	81a3      	strh	r3, [r4, #12]
 8028112:	2300      	movs	r3, #0
 8028114:	6063      	str	r3, [r4, #4]
 8028116:	6923      	ldr	r3, [r4, #16]
 8028118:	6023      	str	r3, [r4, #0]
 802811a:	89a3      	ldrh	r3, [r4, #12]
 802811c:	f043 0308 	orr.w	r3, r3, #8
 8028120:	81a3      	strh	r3, [r4, #12]
 8028122:	6923      	ldr	r3, [r4, #16]
 8028124:	b94b      	cbnz	r3, 802813a <__swsetup_r+0x9a>
 8028126:	89a3      	ldrh	r3, [r4, #12]
 8028128:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802812c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028130:	d003      	beq.n	802813a <__swsetup_r+0x9a>
 8028132:	4621      	mov	r1, r4
 8028134:	4630      	mov	r0, r6
 8028136:	f000 fa5f 	bl	80285f8 <__smakebuf_r>
 802813a:	89a0      	ldrh	r0, [r4, #12]
 802813c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028140:	f010 0301 	ands.w	r3, r0, #1
 8028144:	d00a      	beq.n	802815c <__swsetup_r+0xbc>
 8028146:	2300      	movs	r3, #0
 8028148:	60a3      	str	r3, [r4, #8]
 802814a:	6963      	ldr	r3, [r4, #20]
 802814c:	425b      	negs	r3, r3
 802814e:	61a3      	str	r3, [r4, #24]
 8028150:	6923      	ldr	r3, [r4, #16]
 8028152:	b943      	cbnz	r3, 8028166 <__swsetup_r+0xc6>
 8028154:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8028158:	d1ba      	bne.n	80280d0 <__swsetup_r+0x30>
 802815a:	bd70      	pop	{r4, r5, r6, pc}
 802815c:	0781      	lsls	r1, r0, #30
 802815e:	bf58      	it	pl
 8028160:	6963      	ldrpl	r3, [r4, #20]
 8028162:	60a3      	str	r3, [r4, #8]
 8028164:	e7f4      	b.n	8028150 <__swsetup_r+0xb0>
 8028166:	2000      	movs	r0, #0
 8028168:	e7f7      	b.n	802815a <__swsetup_r+0xba>
 802816a:	bf00      	nop
 802816c:	240000c0 	.word	0x240000c0
 8028170:	0802c3ec 	.word	0x0802c3ec
 8028174:	0802c40c 	.word	0x0802c40c
 8028178:	0802c3cc 	.word	0x0802c3cc

0802817c <__register_exitproc>:
 802817c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028180:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802823c <__register_exitproc+0xc0>
 8028184:	4606      	mov	r6, r0
 8028186:	f8d8 0000 	ldr.w	r0, [r8]
 802818a:	461f      	mov	r7, r3
 802818c:	460d      	mov	r5, r1
 802818e:	4691      	mov	r9, r2
 8028190:	f7ff fad5 	bl	802773e <__retarget_lock_acquire_recursive>
 8028194:	4b25      	ldr	r3, [pc, #148]	; (802822c <__register_exitproc+0xb0>)
 8028196:	681c      	ldr	r4, [r3, #0]
 8028198:	b934      	cbnz	r4, 80281a8 <__register_exitproc+0x2c>
 802819a:	4c25      	ldr	r4, [pc, #148]	; (8028230 <__register_exitproc+0xb4>)
 802819c:	601c      	str	r4, [r3, #0]
 802819e:	4b25      	ldr	r3, [pc, #148]	; (8028234 <__register_exitproc+0xb8>)
 80281a0:	b113      	cbz	r3, 80281a8 <__register_exitproc+0x2c>
 80281a2:	681b      	ldr	r3, [r3, #0]
 80281a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80281a8:	6863      	ldr	r3, [r4, #4]
 80281aa:	2b1f      	cmp	r3, #31
 80281ac:	dd07      	ble.n	80281be <__register_exitproc+0x42>
 80281ae:	f8d8 0000 	ldr.w	r0, [r8]
 80281b2:	f7ff fac6 	bl	8027742 <__retarget_lock_release_recursive>
 80281b6:	f04f 30ff 	mov.w	r0, #4294967295
 80281ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80281be:	b34e      	cbz	r6, 8028214 <__register_exitproc+0x98>
 80281c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80281c4:	b988      	cbnz	r0, 80281ea <__register_exitproc+0x6e>
 80281c6:	4b1c      	ldr	r3, [pc, #112]	; (8028238 <__register_exitproc+0xbc>)
 80281c8:	b923      	cbnz	r3, 80281d4 <__register_exitproc+0x58>
 80281ca:	f8d8 0000 	ldr.w	r0, [r8]
 80281ce:	f7ff fab7 	bl	8027740 <__retarget_lock_release>
 80281d2:	e7f0      	b.n	80281b6 <__register_exitproc+0x3a>
 80281d4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80281d8:	f7ff fab4 	bl	8027744 <malloc>
 80281dc:	2800      	cmp	r0, #0
 80281de:	d0f4      	beq.n	80281ca <__register_exitproc+0x4e>
 80281e0:	2300      	movs	r3, #0
 80281e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80281e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80281ea:	6863      	ldr	r3, [r4, #4]
 80281ec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80281f0:	2201      	movs	r2, #1
 80281f2:	409a      	lsls	r2, r3
 80281f4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80281f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80281fc:	4313      	orrs	r3, r2
 80281fe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028202:	2e02      	cmp	r6, #2
 8028204:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028208:	bf02      	ittt	eq
 802820a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802820e:	4313      	orreq	r3, r2
 8028210:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8028214:	6863      	ldr	r3, [r4, #4]
 8028216:	f8d8 0000 	ldr.w	r0, [r8]
 802821a:	1c5a      	adds	r2, r3, #1
 802821c:	3302      	adds	r3, #2
 802821e:	6062      	str	r2, [r4, #4]
 8028220:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028224:	f7ff fa8d 	bl	8027742 <__retarget_lock_release_recursive>
 8028228:	2000      	movs	r0, #0
 802822a:	e7c6      	b.n	80281ba <__register_exitproc+0x3e>
 802822c:	24026508 	.word	0x24026508
 8028230:	2402647c 	.word	0x2402647c
 8028234:	0802c3c8 	.word	0x0802c3c8
 8028238:	08027745 	.word	0x08027745
 802823c:	24000124 	.word	0x24000124

08028240 <__sflush_r>:
 8028240:	898a      	ldrh	r2, [r1, #12]
 8028242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028246:	4605      	mov	r5, r0
 8028248:	0710      	lsls	r0, r2, #28
 802824a:	460c      	mov	r4, r1
 802824c:	d458      	bmi.n	8028300 <__sflush_r+0xc0>
 802824e:	684b      	ldr	r3, [r1, #4]
 8028250:	2b00      	cmp	r3, #0
 8028252:	dc05      	bgt.n	8028260 <__sflush_r+0x20>
 8028254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028256:	2b00      	cmp	r3, #0
 8028258:	dc02      	bgt.n	8028260 <__sflush_r+0x20>
 802825a:	2000      	movs	r0, #0
 802825c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028262:	2e00      	cmp	r6, #0
 8028264:	d0f9      	beq.n	802825a <__sflush_r+0x1a>
 8028266:	2300      	movs	r3, #0
 8028268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802826c:	682f      	ldr	r7, [r5, #0]
 802826e:	602b      	str	r3, [r5, #0]
 8028270:	d032      	beq.n	80282d8 <__sflush_r+0x98>
 8028272:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028274:	89a3      	ldrh	r3, [r4, #12]
 8028276:	075a      	lsls	r2, r3, #29
 8028278:	d505      	bpl.n	8028286 <__sflush_r+0x46>
 802827a:	6863      	ldr	r3, [r4, #4]
 802827c:	1ac0      	subs	r0, r0, r3
 802827e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028280:	b10b      	cbz	r3, 8028286 <__sflush_r+0x46>
 8028282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028284:	1ac0      	subs	r0, r0, r3
 8028286:	2300      	movs	r3, #0
 8028288:	4602      	mov	r2, r0
 802828a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802828c:	6a21      	ldr	r1, [r4, #32]
 802828e:	4628      	mov	r0, r5
 8028290:	47b0      	blx	r6
 8028292:	1c43      	adds	r3, r0, #1
 8028294:	89a3      	ldrh	r3, [r4, #12]
 8028296:	d106      	bne.n	80282a6 <__sflush_r+0x66>
 8028298:	6829      	ldr	r1, [r5, #0]
 802829a:	291d      	cmp	r1, #29
 802829c:	d82c      	bhi.n	80282f8 <__sflush_r+0xb8>
 802829e:	4a2a      	ldr	r2, [pc, #168]	; (8028348 <__sflush_r+0x108>)
 80282a0:	40ca      	lsrs	r2, r1
 80282a2:	07d6      	lsls	r6, r2, #31
 80282a4:	d528      	bpl.n	80282f8 <__sflush_r+0xb8>
 80282a6:	2200      	movs	r2, #0
 80282a8:	6062      	str	r2, [r4, #4]
 80282aa:	04d9      	lsls	r1, r3, #19
 80282ac:	6922      	ldr	r2, [r4, #16]
 80282ae:	6022      	str	r2, [r4, #0]
 80282b0:	d504      	bpl.n	80282bc <__sflush_r+0x7c>
 80282b2:	1c42      	adds	r2, r0, #1
 80282b4:	d101      	bne.n	80282ba <__sflush_r+0x7a>
 80282b6:	682b      	ldr	r3, [r5, #0]
 80282b8:	b903      	cbnz	r3, 80282bc <__sflush_r+0x7c>
 80282ba:	6560      	str	r0, [r4, #84]	; 0x54
 80282bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80282be:	602f      	str	r7, [r5, #0]
 80282c0:	2900      	cmp	r1, #0
 80282c2:	d0ca      	beq.n	802825a <__sflush_r+0x1a>
 80282c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80282c8:	4299      	cmp	r1, r3
 80282ca:	d002      	beq.n	80282d2 <__sflush_r+0x92>
 80282cc:	4628      	mov	r0, r5
 80282ce:	f7ff fa5f 	bl	8027790 <_free_r>
 80282d2:	2000      	movs	r0, #0
 80282d4:	6360      	str	r0, [r4, #52]	; 0x34
 80282d6:	e7c1      	b.n	802825c <__sflush_r+0x1c>
 80282d8:	6a21      	ldr	r1, [r4, #32]
 80282da:	2301      	movs	r3, #1
 80282dc:	4628      	mov	r0, r5
 80282de:	47b0      	blx	r6
 80282e0:	1c41      	adds	r1, r0, #1
 80282e2:	d1c7      	bne.n	8028274 <__sflush_r+0x34>
 80282e4:	682b      	ldr	r3, [r5, #0]
 80282e6:	2b00      	cmp	r3, #0
 80282e8:	d0c4      	beq.n	8028274 <__sflush_r+0x34>
 80282ea:	2b1d      	cmp	r3, #29
 80282ec:	d001      	beq.n	80282f2 <__sflush_r+0xb2>
 80282ee:	2b16      	cmp	r3, #22
 80282f0:	d101      	bne.n	80282f6 <__sflush_r+0xb6>
 80282f2:	602f      	str	r7, [r5, #0]
 80282f4:	e7b1      	b.n	802825a <__sflush_r+0x1a>
 80282f6:	89a3      	ldrh	r3, [r4, #12]
 80282f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80282fc:	81a3      	strh	r3, [r4, #12]
 80282fe:	e7ad      	b.n	802825c <__sflush_r+0x1c>
 8028300:	690f      	ldr	r7, [r1, #16]
 8028302:	2f00      	cmp	r7, #0
 8028304:	d0a9      	beq.n	802825a <__sflush_r+0x1a>
 8028306:	0793      	lsls	r3, r2, #30
 8028308:	680e      	ldr	r6, [r1, #0]
 802830a:	bf08      	it	eq
 802830c:	694b      	ldreq	r3, [r1, #20]
 802830e:	600f      	str	r7, [r1, #0]
 8028310:	bf18      	it	ne
 8028312:	2300      	movne	r3, #0
 8028314:	eba6 0807 	sub.w	r8, r6, r7
 8028318:	608b      	str	r3, [r1, #8]
 802831a:	f1b8 0f00 	cmp.w	r8, #0
 802831e:	dd9c      	ble.n	802825a <__sflush_r+0x1a>
 8028320:	6a21      	ldr	r1, [r4, #32]
 8028322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028324:	4643      	mov	r3, r8
 8028326:	463a      	mov	r2, r7
 8028328:	4628      	mov	r0, r5
 802832a:	47b0      	blx	r6
 802832c:	2800      	cmp	r0, #0
 802832e:	dc06      	bgt.n	802833e <__sflush_r+0xfe>
 8028330:	89a3      	ldrh	r3, [r4, #12]
 8028332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028336:	81a3      	strh	r3, [r4, #12]
 8028338:	f04f 30ff 	mov.w	r0, #4294967295
 802833c:	e78e      	b.n	802825c <__sflush_r+0x1c>
 802833e:	4407      	add	r7, r0
 8028340:	eba8 0800 	sub.w	r8, r8, r0
 8028344:	e7e9      	b.n	802831a <__sflush_r+0xda>
 8028346:	bf00      	nop
 8028348:	20400001 	.word	0x20400001

0802834c <_fflush_r>:
 802834c:	b538      	push	{r3, r4, r5, lr}
 802834e:	690b      	ldr	r3, [r1, #16]
 8028350:	4605      	mov	r5, r0
 8028352:	460c      	mov	r4, r1
 8028354:	b913      	cbnz	r3, 802835c <_fflush_r+0x10>
 8028356:	2500      	movs	r5, #0
 8028358:	4628      	mov	r0, r5
 802835a:	bd38      	pop	{r3, r4, r5, pc}
 802835c:	b118      	cbz	r0, 8028366 <_fflush_r+0x1a>
 802835e:	6983      	ldr	r3, [r0, #24]
 8028360:	b90b      	cbnz	r3, 8028366 <_fflush_r+0x1a>
 8028362:	f000 f887 	bl	8028474 <__sinit>
 8028366:	4b14      	ldr	r3, [pc, #80]	; (80283b8 <_fflush_r+0x6c>)
 8028368:	429c      	cmp	r4, r3
 802836a:	d11b      	bne.n	80283a4 <_fflush_r+0x58>
 802836c:	686c      	ldr	r4, [r5, #4]
 802836e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028372:	2b00      	cmp	r3, #0
 8028374:	d0ef      	beq.n	8028356 <_fflush_r+0xa>
 8028376:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028378:	07d0      	lsls	r0, r2, #31
 802837a:	d404      	bmi.n	8028386 <_fflush_r+0x3a>
 802837c:	0599      	lsls	r1, r3, #22
 802837e:	d402      	bmi.n	8028386 <_fflush_r+0x3a>
 8028380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028382:	f7ff f9dc 	bl	802773e <__retarget_lock_acquire_recursive>
 8028386:	4628      	mov	r0, r5
 8028388:	4621      	mov	r1, r4
 802838a:	f7ff ff59 	bl	8028240 <__sflush_r>
 802838e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028390:	07da      	lsls	r2, r3, #31
 8028392:	4605      	mov	r5, r0
 8028394:	d4e0      	bmi.n	8028358 <_fflush_r+0xc>
 8028396:	89a3      	ldrh	r3, [r4, #12]
 8028398:	059b      	lsls	r3, r3, #22
 802839a:	d4dd      	bmi.n	8028358 <_fflush_r+0xc>
 802839c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802839e:	f7ff f9d0 	bl	8027742 <__retarget_lock_release_recursive>
 80283a2:	e7d9      	b.n	8028358 <_fflush_r+0xc>
 80283a4:	4b05      	ldr	r3, [pc, #20]	; (80283bc <_fflush_r+0x70>)
 80283a6:	429c      	cmp	r4, r3
 80283a8:	d101      	bne.n	80283ae <_fflush_r+0x62>
 80283aa:	68ac      	ldr	r4, [r5, #8]
 80283ac:	e7df      	b.n	802836e <_fflush_r+0x22>
 80283ae:	4b04      	ldr	r3, [pc, #16]	; (80283c0 <_fflush_r+0x74>)
 80283b0:	429c      	cmp	r4, r3
 80283b2:	bf08      	it	eq
 80283b4:	68ec      	ldreq	r4, [r5, #12]
 80283b6:	e7da      	b.n	802836e <_fflush_r+0x22>
 80283b8:	0802c3ec 	.word	0x0802c3ec
 80283bc:	0802c40c 	.word	0x0802c40c
 80283c0:	0802c3cc 	.word	0x0802c3cc

080283c4 <std>:
 80283c4:	2300      	movs	r3, #0
 80283c6:	b510      	push	{r4, lr}
 80283c8:	4604      	mov	r4, r0
 80283ca:	e9c0 3300 	strd	r3, r3, [r0]
 80283ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80283d2:	6083      	str	r3, [r0, #8]
 80283d4:	8181      	strh	r1, [r0, #12]
 80283d6:	6643      	str	r3, [r0, #100]	; 0x64
 80283d8:	81c2      	strh	r2, [r0, #14]
 80283da:	6183      	str	r3, [r0, #24]
 80283dc:	4619      	mov	r1, r3
 80283de:	2208      	movs	r2, #8
 80283e0:	305c      	adds	r0, #92	; 0x5c
 80283e2:	f7ff f9cd 	bl	8027780 <memset>
 80283e6:	4b05      	ldr	r3, [pc, #20]	; (80283fc <std+0x38>)
 80283e8:	6263      	str	r3, [r4, #36]	; 0x24
 80283ea:	4b05      	ldr	r3, [pc, #20]	; (8028400 <std+0x3c>)
 80283ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80283ee:	4b05      	ldr	r3, [pc, #20]	; (8028404 <std+0x40>)
 80283f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80283f2:	4b05      	ldr	r3, [pc, #20]	; (8028408 <std+0x44>)
 80283f4:	6224      	str	r4, [r4, #32]
 80283f6:	6323      	str	r3, [r4, #48]	; 0x30
 80283f8:	bd10      	pop	{r4, pc}
 80283fa:	bf00      	nop
 80283fc:	08028691 	.word	0x08028691
 8028400:	080286b3 	.word	0x080286b3
 8028404:	080286eb 	.word	0x080286eb
 8028408:	0802870f 	.word	0x0802870f

0802840c <_cleanup_r>:
 802840c:	4901      	ldr	r1, [pc, #4]	; (8028414 <_cleanup_r+0x8>)
 802840e:	f000 b8af 	b.w	8028570 <_fwalk_reent>
 8028412:	bf00      	nop
 8028414:	0802834d 	.word	0x0802834d

08028418 <__sfmoreglue>:
 8028418:	b570      	push	{r4, r5, r6, lr}
 802841a:	2268      	movs	r2, #104	; 0x68
 802841c:	1e4d      	subs	r5, r1, #1
 802841e:	4355      	muls	r5, r2
 8028420:	460e      	mov	r6, r1
 8028422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028426:	f7ff fa1f 	bl	8027868 <_malloc_r>
 802842a:	4604      	mov	r4, r0
 802842c:	b140      	cbz	r0, 8028440 <__sfmoreglue+0x28>
 802842e:	2100      	movs	r1, #0
 8028430:	e9c0 1600 	strd	r1, r6, [r0]
 8028434:	300c      	adds	r0, #12
 8028436:	60a0      	str	r0, [r4, #8]
 8028438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802843c:	f7ff f9a0 	bl	8027780 <memset>
 8028440:	4620      	mov	r0, r4
 8028442:	bd70      	pop	{r4, r5, r6, pc}

08028444 <__sfp_lock_acquire>:
 8028444:	4801      	ldr	r0, [pc, #4]	; (802844c <__sfp_lock_acquire+0x8>)
 8028446:	f7ff b97a 	b.w	802773e <__retarget_lock_acquire_recursive>
 802844a:	bf00      	nop
 802844c:	2402636a 	.word	0x2402636a

08028450 <__sfp_lock_release>:
 8028450:	4801      	ldr	r0, [pc, #4]	; (8028458 <__sfp_lock_release+0x8>)
 8028452:	f7ff b976 	b.w	8027742 <__retarget_lock_release_recursive>
 8028456:	bf00      	nop
 8028458:	2402636a 	.word	0x2402636a

0802845c <__sinit_lock_acquire>:
 802845c:	4801      	ldr	r0, [pc, #4]	; (8028464 <__sinit_lock_acquire+0x8>)
 802845e:	f7ff b96e 	b.w	802773e <__retarget_lock_acquire_recursive>
 8028462:	bf00      	nop
 8028464:	2402636b 	.word	0x2402636b

08028468 <__sinit_lock_release>:
 8028468:	4801      	ldr	r0, [pc, #4]	; (8028470 <__sinit_lock_release+0x8>)
 802846a:	f7ff b96a 	b.w	8027742 <__retarget_lock_release_recursive>
 802846e:	bf00      	nop
 8028470:	2402636b 	.word	0x2402636b

08028474 <__sinit>:
 8028474:	b510      	push	{r4, lr}
 8028476:	4604      	mov	r4, r0
 8028478:	f7ff fff0 	bl	802845c <__sinit_lock_acquire>
 802847c:	69a3      	ldr	r3, [r4, #24]
 802847e:	b11b      	cbz	r3, 8028488 <__sinit+0x14>
 8028480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028484:	f7ff bff0 	b.w	8028468 <__sinit_lock_release>
 8028488:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802848c:	6523      	str	r3, [r4, #80]	; 0x50
 802848e:	4b13      	ldr	r3, [pc, #76]	; (80284dc <__sinit+0x68>)
 8028490:	4a13      	ldr	r2, [pc, #76]	; (80284e0 <__sinit+0x6c>)
 8028492:	681b      	ldr	r3, [r3, #0]
 8028494:	62a2      	str	r2, [r4, #40]	; 0x28
 8028496:	42a3      	cmp	r3, r4
 8028498:	bf04      	itt	eq
 802849a:	2301      	moveq	r3, #1
 802849c:	61a3      	streq	r3, [r4, #24]
 802849e:	4620      	mov	r0, r4
 80284a0:	f000 f820 	bl	80284e4 <__sfp>
 80284a4:	6060      	str	r0, [r4, #4]
 80284a6:	4620      	mov	r0, r4
 80284a8:	f000 f81c 	bl	80284e4 <__sfp>
 80284ac:	60a0      	str	r0, [r4, #8]
 80284ae:	4620      	mov	r0, r4
 80284b0:	f000 f818 	bl	80284e4 <__sfp>
 80284b4:	2200      	movs	r2, #0
 80284b6:	60e0      	str	r0, [r4, #12]
 80284b8:	2104      	movs	r1, #4
 80284ba:	6860      	ldr	r0, [r4, #4]
 80284bc:	f7ff ff82 	bl	80283c4 <std>
 80284c0:	68a0      	ldr	r0, [r4, #8]
 80284c2:	2201      	movs	r2, #1
 80284c4:	2109      	movs	r1, #9
 80284c6:	f7ff ff7d 	bl	80283c4 <std>
 80284ca:	68e0      	ldr	r0, [r4, #12]
 80284cc:	2202      	movs	r2, #2
 80284ce:	2112      	movs	r1, #18
 80284d0:	f7ff ff78 	bl	80283c4 <std>
 80284d4:	2301      	movs	r3, #1
 80284d6:	61a3      	str	r3, [r4, #24]
 80284d8:	e7d2      	b.n	8028480 <__sinit+0xc>
 80284da:	bf00      	nop
 80284dc:	0802c390 	.word	0x0802c390
 80284e0:	0802840d 	.word	0x0802840d

080284e4 <__sfp>:
 80284e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80284e6:	4607      	mov	r7, r0
 80284e8:	f7ff ffac 	bl	8028444 <__sfp_lock_acquire>
 80284ec:	4b1e      	ldr	r3, [pc, #120]	; (8028568 <__sfp+0x84>)
 80284ee:	681e      	ldr	r6, [r3, #0]
 80284f0:	69b3      	ldr	r3, [r6, #24]
 80284f2:	b913      	cbnz	r3, 80284fa <__sfp+0x16>
 80284f4:	4630      	mov	r0, r6
 80284f6:	f7ff ffbd 	bl	8028474 <__sinit>
 80284fa:	3648      	adds	r6, #72	; 0x48
 80284fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028500:	3b01      	subs	r3, #1
 8028502:	d503      	bpl.n	802850c <__sfp+0x28>
 8028504:	6833      	ldr	r3, [r6, #0]
 8028506:	b30b      	cbz	r3, 802854c <__sfp+0x68>
 8028508:	6836      	ldr	r6, [r6, #0]
 802850a:	e7f7      	b.n	80284fc <__sfp+0x18>
 802850c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028510:	b9d5      	cbnz	r5, 8028548 <__sfp+0x64>
 8028512:	4b16      	ldr	r3, [pc, #88]	; (802856c <__sfp+0x88>)
 8028514:	60e3      	str	r3, [r4, #12]
 8028516:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802851a:	6665      	str	r5, [r4, #100]	; 0x64
 802851c:	f7ff f90e 	bl	802773c <__retarget_lock_init_recursive>
 8028520:	f7ff ff96 	bl	8028450 <__sfp_lock_release>
 8028524:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8028528:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802852c:	6025      	str	r5, [r4, #0]
 802852e:	61a5      	str	r5, [r4, #24]
 8028530:	2208      	movs	r2, #8
 8028532:	4629      	mov	r1, r5
 8028534:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8028538:	f7ff f922 	bl	8027780 <memset>
 802853c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8028540:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8028544:	4620      	mov	r0, r4
 8028546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028548:	3468      	adds	r4, #104	; 0x68
 802854a:	e7d9      	b.n	8028500 <__sfp+0x1c>
 802854c:	2104      	movs	r1, #4
 802854e:	4638      	mov	r0, r7
 8028550:	f7ff ff62 	bl	8028418 <__sfmoreglue>
 8028554:	4604      	mov	r4, r0
 8028556:	6030      	str	r0, [r6, #0]
 8028558:	2800      	cmp	r0, #0
 802855a:	d1d5      	bne.n	8028508 <__sfp+0x24>
 802855c:	f7ff ff78 	bl	8028450 <__sfp_lock_release>
 8028560:	230c      	movs	r3, #12
 8028562:	603b      	str	r3, [r7, #0]
 8028564:	e7ee      	b.n	8028544 <__sfp+0x60>
 8028566:	bf00      	nop
 8028568:	0802c390 	.word	0x0802c390
 802856c:	ffff0001 	.word	0xffff0001

08028570 <_fwalk_reent>:
 8028570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028574:	4606      	mov	r6, r0
 8028576:	4688      	mov	r8, r1
 8028578:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802857c:	2700      	movs	r7, #0
 802857e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8028582:	f1b9 0901 	subs.w	r9, r9, #1
 8028586:	d505      	bpl.n	8028594 <_fwalk_reent+0x24>
 8028588:	6824      	ldr	r4, [r4, #0]
 802858a:	2c00      	cmp	r4, #0
 802858c:	d1f7      	bne.n	802857e <_fwalk_reent+0xe>
 802858e:	4638      	mov	r0, r7
 8028590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028594:	89ab      	ldrh	r3, [r5, #12]
 8028596:	2b01      	cmp	r3, #1
 8028598:	d907      	bls.n	80285aa <_fwalk_reent+0x3a>
 802859a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802859e:	3301      	adds	r3, #1
 80285a0:	d003      	beq.n	80285aa <_fwalk_reent+0x3a>
 80285a2:	4629      	mov	r1, r5
 80285a4:	4630      	mov	r0, r6
 80285a6:	47c0      	blx	r8
 80285a8:	4307      	orrs	r7, r0
 80285aa:	3568      	adds	r5, #104	; 0x68
 80285ac:	e7e9      	b.n	8028582 <_fwalk_reent+0x12>

080285ae <__swhatbuf_r>:
 80285ae:	b570      	push	{r4, r5, r6, lr}
 80285b0:	460e      	mov	r6, r1
 80285b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80285b6:	2900      	cmp	r1, #0
 80285b8:	b096      	sub	sp, #88	; 0x58
 80285ba:	4614      	mov	r4, r2
 80285bc:	461d      	mov	r5, r3
 80285be:	da08      	bge.n	80285d2 <__swhatbuf_r+0x24>
 80285c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80285c4:	2200      	movs	r2, #0
 80285c6:	602a      	str	r2, [r5, #0]
 80285c8:	061a      	lsls	r2, r3, #24
 80285ca:	d410      	bmi.n	80285ee <__swhatbuf_r+0x40>
 80285cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80285d0:	e00e      	b.n	80285f0 <__swhatbuf_r+0x42>
 80285d2:	466a      	mov	r2, sp
 80285d4:	f000 f8c2 	bl	802875c <_fstat_r>
 80285d8:	2800      	cmp	r0, #0
 80285da:	dbf1      	blt.n	80285c0 <__swhatbuf_r+0x12>
 80285dc:	9a01      	ldr	r2, [sp, #4]
 80285de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80285e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80285e6:	425a      	negs	r2, r3
 80285e8:	415a      	adcs	r2, r3
 80285ea:	602a      	str	r2, [r5, #0]
 80285ec:	e7ee      	b.n	80285cc <__swhatbuf_r+0x1e>
 80285ee:	2340      	movs	r3, #64	; 0x40
 80285f0:	2000      	movs	r0, #0
 80285f2:	6023      	str	r3, [r4, #0]
 80285f4:	b016      	add	sp, #88	; 0x58
 80285f6:	bd70      	pop	{r4, r5, r6, pc}

080285f8 <__smakebuf_r>:
 80285f8:	898b      	ldrh	r3, [r1, #12]
 80285fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80285fc:	079d      	lsls	r5, r3, #30
 80285fe:	4606      	mov	r6, r0
 8028600:	460c      	mov	r4, r1
 8028602:	d507      	bpl.n	8028614 <__smakebuf_r+0x1c>
 8028604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028608:	6023      	str	r3, [r4, #0]
 802860a:	6123      	str	r3, [r4, #16]
 802860c:	2301      	movs	r3, #1
 802860e:	6163      	str	r3, [r4, #20]
 8028610:	b002      	add	sp, #8
 8028612:	bd70      	pop	{r4, r5, r6, pc}
 8028614:	ab01      	add	r3, sp, #4
 8028616:	466a      	mov	r2, sp
 8028618:	f7ff ffc9 	bl	80285ae <__swhatbuf_r>
 802861c:	9900      	ldr	r1, [sp, #0]
 802861e:	4605      	mov	r5, r0
 8028620:	4630      	mov	r0, r6
 8028622:	f7ff f921 	bl	8027868 <_malloc_r>
 8028626:	b948      	cbnz	r0, 802863c <__smakebuf_r+0x44>
 8028628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802862c:	059a      	lsls	r2, r3, #22
 802862e:	d4ef      	bmi.n	8028610 <__smakebuf_r+0x18>
 8028630:	f023 0303 	bic.w	r3, r3, #3
 8028634:	f043 0302 	orr.w	r3, r3, #2
 8028638:	81a3      	strh	r3, [r4, #12]
 802863a:	e7e3      	b.n	8028604 <__smakebuf_r+0xc>
 802863c:	4b0d      	ldr	r3, [pc, #52]	; (8028674 <__smakebuf_r+0x7c>)
 802863e:	62b3      	str	r3, [r6, #40]	; 0x28
 8028640:	89a3      	ldrh	r3, [r4, #12]
 8028642:	6020      	str	r0, [r4, #0]
 8028644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028648:	81a3      	strh	r3, [r4, #12]
 802864a:	9b00      	ldr	r3, [sp, #0]
 802864c:	6163      	str	r3, [r4, #20]
 802864e:	9b01      	ldr	r3, [sp, #4]
 8028650:	6120      	str	r0, [r4, #16]
 8028652:	b15b      	cbz	r3, 802866c <__smakebuf_r+0x74>
 8028654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028658:	4630      	mov	r0, r6
 802865a:	f000 f891 	bl	8028780 <_isatty_r>
 802865e:	b128      	cbz	r0, 802866c <__smakebuf_r+0x74>
 8028660:	89a3      	ldrh	r3, [r4, #12]
 8028662:	f023 0303 	bic.w	r3, r3, #3
 8028666:	f043 0301 	orr.w	r3, r3, #1
 802866a:	81a3      	strh	r3, [r4, #12]
 802866c:	89a0      	ldrh	r0, [r4, #12]
 802866e:	4305      	orrs	r5, r0
 8028670:	81a5      	strh	r5, [r4, #12]
 8028672:	e7cd      	b.n	8028610 <__smakebuf_r+0x18>
 8028674:	0802840d 	.word	0x0802840d

08028678 <__malloc_lock>:
 8028678:	4801      	ldr	r0, [pc, #4]	; (8028680 <__malloc_lock+0x8>)
 802867a:	f7ff b860 	b.w	802773e <__retarget_lock_acquire_recursive>
 802867e:	bf00      	nop
 8028680:	24026369 	.word	0x24026369

08028684 <__malloc_unlock>:
 8028684:	4801      	ldr	r0, [pc, #4]	; (802868c <__malloc_unlock+0x8>)
 8028686:	f7ff b85c 	b.w	8027742 <__retarget_lock_release_recursive>
 802868a:	bf00      	nop
 802868c:	24026369 	.word	0x24026369

08028690 <__sread>:
 8028690:	b510      	push	{r4, lr}
 8028692:	460c      	mov	r4, r1
 8028694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028698:	f000 f894 	bl	80287c4 <_read_r>
 802869c:	2800      	cmp	r0, #0
 802869e:	bfab      	itete	ge
 80286a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80286a2:	89a3      	ldrhlt	r3, [r4, #12]
 80286a4:	181b      	addge	r3, r3, r0
 80286a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80286aa:	bfac      	ite	ge
 80286ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80286ae:	81a3      	strhlt	r3, [r4, #12]
 80286b0:	bd10      	pop	{r4, pc}

080286b2 <__swrite>:
 80286b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80286b6:	461f      	mov	r7, r3
 80286b8:	898b      	ldrh	r3, [r1, #12]
 80286ba:	05db      	lsls	r3, r3, #23
 80286bc:	4605      	mov	r5, r0
 80286be:	460c      	mov	r4, r1
 80286c0:	4616      	mov	r6, r2
 80286c2:	d505      	bpl.n	80286d0 <__swrite+0x1e>
 80286c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80286c8:	2302      	movs	r3, #2
 80286ca:	2200      	movs	r2, #0
 80286cc:	f000 f868 	bl	80287a0 <_lseek_r>
 80286d0:	89a3      	ldrh	r3, [r4, #12]
 80286d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80286d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80286da:	81a3      	strh	r3, [r4, #12]
 80286dc:	4632      	mov	r2, r6
 80286de:	463b      	mov	r3, r7
 80286e0:	4628      	mov	r0, r5
 80286e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80286e6:	f000 b817 	b.w	8028718 <_write_r>

080286ea <__sseek>:
 80286ea:	b510      	push	{r4, lr}
 80286ec:	460c      	mov	r4, r1
 80286ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80286f2:	f000 f855 	bl	80287a0 <_lseek_r>
 80286f6:	1c43      	adds	r3, r0, #1
 80286f8:	89a3      	ldrh	r3, [r4, #12]
 80286fa:	bf15      	itete	ne
 80286fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80286fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8028702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8028706:	81a3      	strheq	r3, [r4, #12]
 8028708:	bf18      	it	ne
 802870a:	81a3      	strhne	r3, [r4, #12]
 802870c:	bd10      	pop	{r4, pc}

0802870e <__sclose>:
 802870e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028712:	f000 b813 	b.w	802873c <_close_r>
	...

08028718 <_write_r>:
 8028718:	b538      	push	{r3, r4, r5, lr}
 802871a:	4d07      	ldr	r5, [pc, #28]	; (8028738 <_write_r+0x20>)
 802871c:	4604      	mov	r4, r0
 802871e:	4608      	mov	r0, r1
 8028720:	4611      	mov	r1, r2
 8028722:	2200      	movs	r2, #0
 8028724:	602a      	str	r2, [r5, #0]
 8028726:	461a      	mov	r2, r3
 8028728:	f7de fe69 	bl	80073fe <_write>
 802872c:	1c43      	adds	r3, r0, #1
 802872e:	d102      	bne.n	8028736 <_write_r+0x1e>
 8028730:	682b      	ldr	r3, [r5, #0]
 8028732:	b103      	cbz	r3, 8028736 <_write_r+0x1e>
 8028734:	6023      	str	r3, [r4, #0]
 8028736:	bd38      	pop	{r3, r4, r5, pc}
 8028738:	2402650c 	.word	0x2402650c

0802873c <_close_r>:
 802873c:	b538      	push	{r3, r4, r5, lr}
 802873e:	4d06      	ldr	r5, [pc, #24]	; (8028758 <_close_r+0x1c>)
 8028740:	2300      	movs	r3, #0
 8028742:	4604      	mov	r4, r0
 8028744:	4608      	mov	r0, r1
 8028746:	602b      	str	r3, [r5, #0]
 8028748:	f7de fe75 	bl	8007436 <_close>
 802874c:	1c43      	adds	r3, r0, #1
 802874e:	d102      	bne.n	8028756 <_close_r+0x1a>
 8028750:	682b      	ldr	r3, [r5, #0]
 8028752:	b103      	cbz	r3, 8028756 <_close_r+0x1a>
 8028754:	6023      	str	r3, [r4, #0]
 8028756:	bd38      	pop	{r3, r4, r5, pc}
 8028758:	2402650c 	.word	0x2402650c

0802875c <_fstat_r>:
 802875c:	b538      	push	{r3, r4, r5, lr}
 802875e:	4d07      	ldr	r5, [pc, #28]	; (802877c <_fstat_r+0x20>)
 8028760:	2300      	movs	r3, #0
 8028762:	4604      	mov	r4, r0
 8028764:	4608      	mov	r0, r1
 8028766:	4611      	mov	r1, r2
 8028768:	602b      	str	r3, [r5, #0]
 802876a:	f7de fe70 	bl	800744e <_fstat>
 802876e:	1c43      	adds	r3, r0, #1
 8028770:	d102      	bne.n	8028778 <_fstat_r+0x1c>
 8028772:	682b      	ldr	r3, [r5, #0]
 8028774:	b103      	cbz	r3, 8028778 <_fstat_r+0x1c>
 8028776:	6023      	str	r3, [r4, #0]
 8028778:	bd38      	pop	{r3, r4, r5, pc}
 802877a:	bf00      	nop
 802877c:	2402650c 	.word	0x2402650c

08028780 <_isatty_r>:
 8028780:	b538      	push	{r3, r4, r5, lr}
 8028782:	4d06      	ldr	r5, [pc, #24]	; (802879c <_isatty_r+0x1c>)
 8028784:	2300      	movs	r3, #0
 8028786:	4604      	mov	r4, r0
 8028788:	4608      	mov	r0, r1
 802878a:	602b      	str	r3, [r5, #0]
 802878c:	f7de fe6f 	bl	800746e <_isatty>
 8028790:	1c43      	adds	r3, r0, #1
 8028792:	d102      	bne.n	802879a <_isatty_r+0x1a>
 8028794:	682b      	ldr	r3, [r5, #0]
 8028796:	b103      	cbz	r3, 802879a <_isatty_r+0x1a>
 8028798:	6023      	str	r3, [r4, #0]
 802879a:	bd38      	pop	{r3, r4, r5, pc}
 802879c:	2402650c 	.word	0x2402650c

080287a0 <_lseek_r>:
 80287a0:	b538      	push	{r3, r4, r5, lr}
 80287a2:	4d07      	ldr	r5, [pc, #28]	; (80287c0 <_lseek_r+0x20>)
 80287a4:	4604      	mov	r4, r0
 80287a6:	4608      	mov	r0, r1
 80287a8:	4611      	mov	r1, r2
 80287aa:	2200      	movs	r2, #0
 80287ac:	602a      	str	r2, [r5, #0]
 80287ae:	461a      	mov	r2, r3
 80287b0:	f7de fe68 	bl	8007484 <_lseek>
 80287b4:	1c43      	adds	r3, r0, #1
 80287b6:	d102      	bne.n	80287be <_lseek_r+0x1e>
 80287b8:	682b      	ldr	r3, [r5, #0]
 80287ba:	b103      	cbz	r3, 80287be <_lseek_r+0x1e>
 80287bc:	6023      	str	r3, [r4, #0]
 80287be:	bd38      	pop	{r3, r4, r5, pc}
 80287c0:	2402650c 	.word	0x2402650c

080287c4 <_read_r>:
 80287c4:	b538      	push	{r3, r4, r5, lr}
 80287c6:	4d07      	ldr	r5, [pc, #28]	; (80287e4 <_read_r+0x20>)
 80287c8:	4604      	mov	r4, r0
 80287ca:	4608      	mov	r0, r1
 80287cc:	4611      	mov	r1, r2
 80287ce:	2200      	movs	r2, #0
 80287d0:	602a      	str	r2, [r5, #0]
 80287d2:	461a      	mov	r2, r3
 80287d4:	f7de fdf6 	bl	80073c4 <_read>
 80287d8:	1c43      	adds	r3, r0, #1
 80287da:	d102      	bne.n	80287e2 <_read_r+0x1e>
 80287dc:	682b      	ldr	r3, [r5, #0]
 80287de:	b103      	cbz	r3, 80287e2 <_read_r+0x1e>
 80287e0:	6023      	str	r3, [r4, #0]
 80287e2:	bd38      	pop	{r3, r4, r5, pc}
 80287e4:	2402650c 	.word	0x2402650c

080287e8 <_init>:
 80287e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80287ea:	bf00      	nop
 80287ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80287ee:	bc08      	pop	{r3}
 80287f0:	469e      	mov	lr, r3
 80287f2:	4770      	bx	lr

080287f4 <_fini>:
 80287f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80287f6:	bf00      	nop
 80287f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80287fa:	bc08      	pop	{r3}
 80287fc:	469e      	mov	lr, r3
 80287fe:	4770      	bx	lr
