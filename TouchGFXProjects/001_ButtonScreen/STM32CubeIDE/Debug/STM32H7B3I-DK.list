
STM32H7B3I-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000286b4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000411c  08028964  08028964  00038964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802ca80  0802ca80  0003ca80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802ca98  0802ca98  0012bad8  2**0
                  CONTENTS
  5 .ARM          00000000  0802ca98  0802ca98  0012bad8  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802ca98  0802ca98  0012bad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802ca98  0802ca98  0003ca98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000000c  0802cab4  0802cab4  0003cab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000128  24000000  0802cac0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00005a00  24000128  0802cbe8  00040128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00020918  24005b28  080325e8  00045b28  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  24026440  080325e8  00046440  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0012bad8  2**0
                  CONTENTS, READONLY
 14 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  ALLOC
 15 FontFlashSection 000001a8  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000010  900001a8  900001a8  000501a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 000db920  900001b8  900001b8  000501b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 Video_RGB_Buffer 0005fa00  d0000000  d0000000  00130000  2**2
                  ALLOC
 19 .debug_line   00056e60  00000000  00000000  0012bb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_info   000d2350  00000000  00000000  00182966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00015071  00000000  00000000  00254cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 00004818  00000000  00000000  00269d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017e905  00000000  00000000  0026e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000042b0  00000000  00000000  003ece48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00044166  00000000  00000000  003f10f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000d2  00000000  00000000  0043525e  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00013ad0  00000000  00000000  00435330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24005b28 	.word	0x24005b28
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0802894c 	.word	0x0802894c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24005b2c 	.word	0x24005b2c
 80002ec:	0802894c 	.word	0x0802894c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
  ldr  r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ba:	f00c fbad 	bl	800cb18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f027 fa83 	bl	80278c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f005 fd55 	bl	8005e70 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003cc:	0802cac0 	.word	0x0802cac0
  ldr  r0, =_sdata
 80003d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003d4:	24000128 	.word	0x24000128
  ldr  r2, =_sbss
 80003d8:	24005b28 	.word	0x24005b28
  ldr  r3, = _ebss
 80003dc:	24026440 	.word	0x24026440

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>

080003e2 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8000402:	f003 f9d1 	bl	80037a8 <touchgfx_components_init>
  touchgfx_init();
 8000406:	f003 f9a5 	bl	8003754 <touchgfx_init>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}

0800040e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8000416:	f003 f9cf 	bl	80037b8 <touchgfx_taskEntry>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>:

    /** Initialize. */
    virtual void init() = 0;

    /** Finalizes an instance of the MCUInstrumentation class. */
    virtual ~MCUInstrumentation()
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    {
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	601a      	str	r2, [r3, #0]
    }
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4618      	mov	r0, r3
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	0802ad1c 	.word	0x0802ad1c

08000444 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
    virtual ~MCUInstrumentation()
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    }
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ffe9 	bl	8000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8000452:	210c      	movs	r1, #12
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f027 f9be 	bl	80277d6 <_ZdlPvj>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
    /**
     * Sets MCU activity high.
     *
     * @param  active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	460b      	mov	r3, r1
 800046e:	70fb      	strb	r3, [r7, #3]
    {
        if (active) // Idle task sched out
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d011      	beq.n	800049a <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3310      	adds	r3, #16
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	4798      	blx	r3
 8000482:	4602      	mov	r2, r0
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	441a      	add	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	605a      	str	r2, [r3, #4]
        }
        else // Idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8000498:	e008      	b.n	80004ac <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3310      	adds	r3, #16
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	4798      	blx	r3
 80004a6:	4602      	mov	r2, r0
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	609a      	str	r2, [r3, #8]
    }
 80004ac:	bf00      	nop
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
    /**
     * Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
    }
 80004c0:	4618      	mov	r0, r3
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
    /**
     * Sets number of consumed clock cycles.
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	605a      	str	r2, [r3, #4]
    }
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void CortexMMCUInstrumentation::init()
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 80004f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fa:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4908      	ldr	r1, [pc, #32]	; (8000524 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x40>)
 8000504:	4313      	orrs	r3, r2
 8000506:	600b      	str	r3, [r1, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000edfc 	.word	0xe000edfc
 8000524:	e0001fb0 	.word	0xe0001fb0
 8000528:	c5acce55 	.word	0xc5acce55
 800052c:	e0001000 	.word	0xe0001000

08000530 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	1ad2      	subs	r2, r2, r3
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	085b      	lsrs	r3, r3, #1
 8000548:	441a      	add	r2, r3
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    return *((volatile unsigned int*)0xE0001004);
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x18>)
 8000566:	681b      	ldr	r3, [r3, #0]
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e0001004 	.word	0xe0001004

08000578 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d011      	beq.n	80005ae <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x36>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3310      	adds	r3, #16
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	4798      	blx	r3
 8000596:	4602      	mov	r2, r0
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	60fb      	str	r3, [r7, #12]
        cc_consumed += cc_temp;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	441a      	add	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80005ac:	e008      	b.n	80005c0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x48>
        cc_in = getCPUCycles();
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3310      	adds	r3, #16
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	4798      	blx	r3
 80005ba:	4602      	mov	r2, r0
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	609a      	str	r2, [r3, #8]
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev+0x20>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff23 	bl	8000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	0802acf4 	.word	0x0802acf4

080005ec <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ffe7 	bl	80005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 80005fa:	210c      	movs	r1, #12
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f027 f8ea 	bl	80277d6 <_ZdlPvj>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    {
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	601a      	str	r2, [r3, #0]
    }
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	0802ad5c 	.word	0x0802ad5c

0800062c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    }
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ffe9 	bl	800060c <_ZN8touchgfx15TouchControllerD1Ev>
 800063a:	2104      	movs	r1, #4
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f027 f8ca 	bl	80277d6 <_ZdlPvj>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 8000654:	2308      	movs	r3, #8
 8000656:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <_ZN20STM32TouchController4initEv+0x30>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <_ZN20STM32TouchController4initEv+0x34>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4619      	mov	r1, r3
 800066e:	2000      	movs	r0, #0
 8000670:	f00c f834 	bl	800c6dc <BSP_TS_Init>
}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	24025d02 	.word	0x24025d02
 8000680:	24025d04 	.word	0x24025d04

08000684 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	2000      	movs	r0, #0
 80006a4:	f00c f8c0 	bl	800c828 <BSP_TS_GetState>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2301      	movne	r3, #1
 80006b0:	2300      	moveq	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00a      	beq.n	80006ce <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 80006b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006bc:	f383 8811 	msr	BASEPRI, r3
 80006c0:	f3bf 8f6f 	isb	sy
 80006c4:	f3bf 8f4f 	dsb	sy
 80006c8:	61fb      	str	r3, [r7, #28]
}
 80006ca:	bf00      	nop
    {
        configASSERT(0);
 80006cc:	e7fe      	b.n	80006cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d009      	beq.n	80006e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]

        return true;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e000      	b.n	80006ea <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff81 	bl	800060c <_ZN8touchgfx15TouchControllerD1Ev>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	0802ad44 	.word	0x0802ad44

08000718 <_ZN20STM32TouchControllerD0Ev>:
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ffe7 	bl	80006f4 <_ZN20STM32TouchControllerD1Ev>
 8000726:	2104      	movs	r1, #4
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f027 f854 	bl	80277d6 <_ZdlPvj>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
    for (int id = 0; id <= 4; id++)
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b04      	cmp	r3, #4
 8000746:	dc16      	bgt.n	8000776 <_ZN8touchgfx4GPIO4initEv+0x3e>
    {
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f909 	bl	8000964 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <_ZN8touchgfx4GPIO4initEv+0x36>
        {
            if (GPIO_InvertedLevels[id] != 1)
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <_ZN8touchgfx4GPIO4initEv+0x48>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d004      	beq.n	800076e <_ZN8touchgfx4GPIO4initEv+0x36>
            {
                GPIO_InvertedLevels[id] = 1;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <_ZN8touchgfx4GPIO4initEv+0x48>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2101      	movs	r1, #1
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int id = 0; id <= 4; id++)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	e7e5      	b.n	8000742 <_ZN8touchgfx4GPIO4initEv+0xa>
            }
        }
    }
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	24005b44 	.word	0x24005b44

08000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b03      	cmp	r3, #3
 8000792:	d84b      	bhi.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	080007cd 	.word	0x080007cd
 80007a4:	080007ed 	.word	0x080007ed
 80007a8:	0800080d 	.word	0x0800080d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf0c      	ite	eq
 80007b8:	2301      	moveq	r3, #1
 80007ba:	2300      	movne	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 80007c6:	f00d fa03 	bl	800dbd0 <HAL_GPIO_WritePin>
#endif
        break;
 80007ca:	e02f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf0c      	ite	eq
 80007d8:	2301      	moveq	r3, #1
 80007da:	2300      	movne	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	4814      	ldr	r0, [pc, #80]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 80007e6:	f00d f9f3 	bl	800dbd0 <HAL_GPIO_WritePin>
#endif
        break;
 80007ea:	e01f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4a11      	ldr	r2, [pc, #68]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb8>)
 8000806:	f00d f9e3 	bl	800dbd0 <HAL_GPIO_WritePin>
#endif
        break;
 800080a:	e00f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8000826:	f00d f9d3 	bl	800dbd0 <HAL_GPIO_WritePin>
#endif
        break;
 800082a:	bf00      	nop
    }
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	24005b44 	.word	0x24005b44
 8000838:	58021c00 	.word	0x58021c00
 800083c:	58022000 	.word	0x58022000

08000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d84b      	bhi.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
 8000850:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8000852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000856:	bf00      	nop
 8000858:	08000869 	.word	0x08000869
 800085c:	08000889 	.word	0x08000889
 8000860:	080008a9 	.word	0x080008a9
 8000864:	080008c9 	.word	0x080008c9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 800086c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 8000874:	2301      	movs	r3, #1
 8000876:	e000      	b.n	800087a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 8000878:	2300      	movs	r3, #0
 800087a:	461a      	mov	r2, r3
 800087c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8000882:	f00d f9a5 	bl	800dbd0 <HAL_GPIO_WritePin>
#endif
        break;
 8000886:	e02f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 800088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 8000894:	2301      	movs	r3, #1
 8000896:	e000      	b.n	800089a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5a>
 8000898:	2300      	movs	r3, #0
 800089a:	461a      	mov	r2, r3
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 80008a2:	f00d f995 	bl	800dbd0 <HAL_GPIO_WritePin>
#endif
        break;
 80008a6:	e01f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 80008ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>
 80008b4:	2301      	movs	r3, #1
 80008b6:	e000      	b.n	80008ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7a>
 80008b8:	2300      	movs	r3, #0
 80008ba:	461a      	mov	r2, r3
 80008bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb8>)
 80008c2:	f00d f985 	bl	800dbd0 <HAL_GPIO_WritePin>
#endif
        break;
 80008c6:	e00f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 80008cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x98>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x9a>
 80008d8:	2300      	movs	r3, #0
 80008da:	461a      	mov	r2, r3
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 80008e2:	f00d f975 	bl	800dbd0 <HAL_GPIO_WritePin>
#endif
        break;
 80008e6:	bf00      	nop
    }
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	24005b44 	.word	0x24005b44
 80008f4:	58021c00 	.word	0x58021c00
 80008f8:	58022000 	.word	0x58022000

080008fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d823      	bhi.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 800090c:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	08000925 	.word	0x08000925
 8000918:	08000931 	.word	0x08000931
 800091c:	0800093d 	.word	0x0800093d
 8000920:	08000949 	.word	0x08000949
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800092a:	f00d f96a 	bl	800dc02 <HAL_GPIO_TogglePin>
#endif
        break;
 800092e:	e011      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8000936:	f00d f964 	bl	800dc02 <HAL_GPIO_TogglePin>
#endif
        break;
 800093a:	e00b      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8000942:	f00d f95e 	bl	800dc02 <HAL_GPIO_TogglePin>
#endif
        break;
 8000946:	e005      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800094e:	f00d f958 	bl	800dc02 <HAL_GPIO_TogglePin>
#endif
        break;
 8000952:	bf00      	nop
    }
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58021c00 	.word	0x58021c00
 8000960:	58022000 	.word	0x58022000

08000964 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
    switch (id)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b03      	cmp	r3, #3
 8000976:	d82b      	bhi.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	08000991 	.word	0x08000991
 8000984:	080009a1 	.word	0x080009a1
 8000988:	080009b1 	.word	0x080009b1
 800098c:	080009c1 	.word	0x080009c1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 8000996:	f00d f903 	bl	800dba0 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 800099e:	e017      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 80009a6:	f00d f8fb 	bl	800dba0 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009ae:	e00f      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x84>)
 80009b6:	f00d f8f3 	bl	800dba0 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009be:	e007      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80009c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c4:	4807      	ldr	r0, [pc, #28]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 80009c6:	f00d f8eb 	bl	800dba0 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009ce:	bf00      	nop
    }
    return (bitstatus == GPIO_PIN_SET);
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	bf0c      	ite	eq
 80009d6:	2301      	moveq	r3, #1
 80009d8:	2300      	movne	r3, #0
 80009da:	b2db      	uxtb	r3, r3
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58021c00 	.word	0x58021c00
 80009e8:	58022000 	.word	0x58022000

080009ec <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    {
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
    }
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	0802c18c 	.word	0x0802c18c

08000a0c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    }
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffe9 	bl	80009ec <_ZN8touchgfx3HALD1Ev>
 8000a1a:	217c      	movs	r1, #124	; 0x7c
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f026 feda 	bl	80277d6 <_ZdlPvj>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
    {
        return instance;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
    }
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	24025d08 	.word	0x24025d08

08000a44 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	78fa      	ldrb	r2, [r7, #3]
 8000a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	887a      	ldrh	r2, [r7, #2]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d304      	bcc.n	8000a90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	883a      	ldrh	r2, [r7, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d205      	bcs.n	8000a9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8000a94:	219e      	movs	r1, #158	; 0x9e
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8000a98:	f026 fecc 	bl	8027834 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8000aa4:	883b      	ldrh	r3, [r7, #0]
 8000aa6:	8013      	strh	r3, [r2, #0]
    }
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	24025cfc 	.word	0x24025cfc
 8000ab4:	24025cfe 	.word	0x24025cfe
 8000ab8:	08028964 	.word	0x08028964
 8000abc:	080289c8 	.word	0x080289c8
 8000ac0:	08028a0c 	.word	0x08028a0c
 8000ac4:	24025d02 	.word	0x24025d02
 8000ac8:	24025d04 	.word	0x24025d04

08000acc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d009      	beq.n	8000af2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4610      	mov	r0, r2
 8000aec:	4798      	blx	r3
 8000aee:	4603      	mov	r3, r0
 8000af0:	e000      	b.n	8000af4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8000af2:	2300      	movs	r3, #0
    }
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f01a f94d 	bl	801ada4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	33ac      	adds	r3, #172	; 0xac
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
    }
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8000b28:	2300      	movs	r3, #0
    }
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8000b50:	f240 21d2 	movw	r1, #722	; 0x2d2
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8000b56:	f026 fe6d 	bl	8027834 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf14      	ite	ne
 8000b6c:	2301      	movne	r3, #1
 8000b6e:	2300      	moveq	r3, #0
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8000b74:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	338c      	adds	r3, #140	; 0x8c
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6839      	ldr	r1, [r7, #0]
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	4798      	blx	r3
    }
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08028a54 	.word	0x08028a54
 8000b90:	08028a8c 	.word	0x08028a8c
 8000b94:	08028a0c 	.word	0x08028a0c
 8000b98:	24025d06 	.word	0x24025d06

08000b9c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2301      	movne	r3, #1
 8000bb4:	2300      	moveq	r3, #0
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8000bba:	701a      	strb	r2, [r3, #0]
    }
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	24025d07 	.word	0x24025d07

08000bcc <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
    /**
     * Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	611a      	str	r2, [r3, #16]
    }
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     * This method sets a flag that determines if generic HAL should calculate MCU load
     * based on concrete MCU instrumentation.
     *
     * @param  enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8000c10:	2300      	movs	r3, #0
    }
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4798      	blx	r3
        }
    }
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8000c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3318      	adds	r3, #24
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4610      	mov	r0, r2
 8000c74:	4798      	blx	r3
 8000c76:	4603      	mov	r3, r0
    }
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d011      	beq.n	8000cbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d11e      	bne.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cac:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000cb0:	89bb      	ldrh	r3, [r7, #12]
 8000cb2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8000cba:	e010      	b.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00c      	beq.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cd0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000cd4:	89fb      	ldrh	r3, [r7, #14]
 8000cd6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
    }
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	24025d00 	.word	0x24025d00
 8000cf0:	24025cfe 	.word	0x24025cfe
 8000cf4:	24025cfc 	.word	0x24025cfc

08000cf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f019 fab2 	bl	801a26c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe63 	bl	80009ec <_ZN8touchgfx3HALD1Ev>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	0802b24c 	.word	0x0802b24c

08000d34 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ffe7 	bl	8000d10 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000d42:	217c      	movs	r1, #124	; 0x7c
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f026 fd46 	bl	80277d6 <_ZdlPvj>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffca 	bl	8000cf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fa10 	bl	800419c <_ZN20TouchGFXGeneratedHAL10initializeEv>
    instrumentation.init();
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	337c      	adds	r3, #124	; 0x7c
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbb1 	bl	80004e8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
    setMCUInstrumentation(&instrumentation);
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	337c      	adds	r3, #124	; 0x7c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f7ff ff1c 	bl	8000bcc <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    enableMCULoadCalculation(true);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2101      	movs	r1, #1
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff25 	bl	8000be8 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3380      	adds	r3, #128	; 0x80
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
    enableInterrupts();
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3378      	adds	r3, #120	; 0x78
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8000dc8:	f001 fadc 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3370      	adds	r3, #112	; 0x70
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8000de0:	f00c fef6 	bl	800dbd0 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2104      	movs	r1, #4
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000dea:	f00c fef1 	bl	800dbd0 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2102      	movs	r1, #2
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000df4:	f00c feec 	bl	800dbd0 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000df8:	f001 fac4 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3370      	adds	r3, #112	; 0x70
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4610      	mov	r0, r2
 8000e08:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8000e0a:	e7f5      	b.n	8000df8 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8000e0c:	58022800 	.word	0x58022800
 8000e10:	58020000 	.word	0x58020000

08000e14 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fa7c 	bl	800431c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fa7b 	bl	8004338 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 fa82 	bl	8004364 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e68:	f3bf 8f4f 	dsb	sy
}
 8000e6c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e74:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	0b5b      	lsrs	r3, r3, #13
 8000e7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e7e:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e88:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	015a      	lsls	r2, r3, #5
 8000e8e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e92:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e98:	4912      	ldr	r1, [pc, #72]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	60fa      	str	r2, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	bf14      	ite	ne
 8000eaa:	2301      	movne	r3, #1
 8000eac:	2300      	moveq	r3, #0
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d000      	beq.n	8000eb6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8000eb4:	e7e9      	b.n	8000e8a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	613a      	str	r2, [r7, #16]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf14      	ite	ne
 8000ec0:	2301      	movne	r3, #1
 8000ec2:	2300      	moveq	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d000      	beq.n	8000ecc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8000eca:	e7d9      	b.n	8000e80 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ecc:	f3bf 8f4f 	dsb	sy
}
 8000ed0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ed2:	f3bf 8f6f 	isb	sy
}
 8000ed6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000ed8:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 f98e 	bl	8004214 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 f992 	bl	8004234 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f994 	bl	8004250 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 f996 	bl	800426c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <IdleTaskHook>:

/* USER CODE BEGIN extern C functions */
extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
        if ((int)p) //idle task sched out
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <IdleTaskHook+0x1e>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8000f56:	f7ff fd69 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f019 ff3a 	bl	801add8 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8000f64:	e006      	b.n	8000f74 <IdleTaskHook+0x2c>
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8000f66:	f7ff fd61 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f019 ff32 	bl	801add8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
 8000f74:	2301      	movs	r3, #1
    }
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <_ZN11TouchGFXHALD1Ev+0x2c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	337c      	adds	r3, #124	; 0x7c
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb18 	bl	80005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff feb8 	bl	8000d10 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	0802ad74 	.word	0x0802ad74

08000fb0 <_ZN11TouchGFXHALD0Ev>:
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe1 	bl	8000f80 <_ZN11TouchGFXHALD1Ev>
 8000fbe:	2188      	movs	r1, #136	; 0x88
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f026 fc08 	bl	80277d6 <_ZdlPvj>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    {
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <_ZN12MJPEGDecoderD1Ev+0x1c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]
    }
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	0802ae90 	.word	0x0802ae90

08000ff0 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    }
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffe9 	bl	8000fd0 <_ZN12MJPEGDecoderD1Ev>
 8000ffe:	2104      	movs	r1, #4
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f026 fbe8 	bl	80277d6 <_ZdlPvj>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    {
        return frameNumber;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
    }
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    void setAVIFileBuffer(uint8_t* buffer, uint32_t size)
    {
        aviBuffer = buffer, aviBufferLength = size;
    }

    virtual AVIErrors getLastError()
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    {
        return lastError;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    }
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	0802ae90 	.word	0x0802ae90

08001064 <_ZN20HardwareMJPEGDecoderC1Ev>:
    uint32_t LastLineHeight;
    uint32_t MCU_pr_line;
    uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ffe8 	bl	8001044 <_ZN12MJPEGDecoderC1Ev>
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 80010dc:	f004 fd24 	bl	8005b28 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2001      	movs	r0, #1
 80010e6:	f014 fcea 	bl	8015abe <osSemaphoreNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0802ae4c 	.word	0x0802ae4c
 8001100:	24005b8c 	.word	0x24005b8c

08001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	1acb      	subs	r3, r1, r3
 8001126:	4413      	add	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e004      	b.n	8001136 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f026 fffe 	bl	802813c <strncmp>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3301      	adds	r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	ea41 0203 	orr.w	r2, r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3302      	adds	r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3303      	adds	r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	061b      	lsls	r3, r3, #24
 80011a2:	4313      	orrs	r3, r2
 80011a4:	e016      	b.n	80011d4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	431a      	orrs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3302      	adds	r3, #2
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	431a      	orrs	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3303      	adds	r3, #3
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	4313      	orrs	r3, r2
    }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d013      	beq.n	800121a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3301      	adds	r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	430b      	orrs	r3, r1
 8001218:	e00c      	b.n	8001234 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	4413      	add	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	4313      	orrs	r3, r2
    }
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	2b00      	cmp	r3, #0
 8001252:	d033      	beq.n	80012bc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d909      	bls.n	8001272 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2209      	movs	r2, #9
 8001262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 800126a:	21a7      	movs	r1, #167	; 0xa7
 800126c:	4819      	ldr	r0, [pc, #100]	; (80012d4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 800126e:	f026 fae1 	bl	8027834 <__assert_func>
        }

        reader->seek(offset);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	330c      	adds	r3, #12
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	4610      	mov	r0, r2
 8001284:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3310      	adds	r3, #16
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4798      	blx	r3
 800129c:	4603      	mov	r3, r0
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	220d      	movs	r2, #13
 80012ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ba:	e003      	b.n	80012c4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4413      	add	r3, r2
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	08028adc 	.word	0x08028adc
 80012d0:	08028af0 	.word	0x08028af0
 80012d4:	08028b34 	.word	0x08028b34

080012d8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af04      	add	r7, sp, #16
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	460b      	mov	r3, r1
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	4613      	mov	r3, r2
 80012ec:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 80012f6:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 80012f8:	4a4e      	ldr	r2, [pc, #312]	; (8001434 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 80012fa:	21b9      	movs	r1, #185	; 0xb9
 80012fc:	484e      	ldr	r0, [pc, #312]	; (8001438 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 80012fe:	f026 fa99 	bl	8027834 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2208      	movs	r2, #8
 8001308:	4619      	mov	r1, r3
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff ff98 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4619      	mov	r1, r3
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff ff62 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800131c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	3302      	adds	r3, #2
 8001324:	4619      	mov	r1, r3
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f7ff ff5a 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800132c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	3304      	adds	r3, #4
 8001334:	4619      	mov	r1, r3
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7ff ff07 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800133c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 800133e:	f243 0330 	movw	r3, #12336	; 0x3030
 8001342:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8001344:	f246 3364 	movw	r3, #25444	; 0x6364
 8001348:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4413      	add	r3, r2
 8001352:	f103 0208 	add.w	r2, r3, #8
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	429a      	cmp	r2, r3
 800135c:	d255      	bcs.n	800140a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	f243 0230 	movw	r2, #12336	; 0x3030
 8001364:	4293      	cmp	r3, r2
 8001366:	d126      	bne.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f246 3264 	movw	r2, #25444	; 0x6364
 800136e:	4293      	cmp	r3, r2
 8001370:	d121      	bne.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01e      	beq.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f103 0208 	add.w	r2, r3, #8
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4619      	mov	r1, r3
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff ff57 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001392:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	6939      	ldr	r1, [r7, #16]
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 fa8e 	bl	80018c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	441a      	add	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
            currentMovieOffset += 8;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f103 0208 	add.w	r2, r3, #8
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	3301      	adds	r3, #1
 80013e0:	f023 0201 	bic.w	r2, r3, #1
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	699a      	ldr	r2, [r3, #24]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d114      	bne.n	800141e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001408:	e009      	b.n	800141e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8001418:	2301      	movs	r3, #1
 800141a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 800141e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	08028ba0 	.word	0x08028ba0
 8001434:	08028bec 	.word	0x08028bec
 8001438:	08028b34 	.word	0x08028b34

0800143c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 800144c:	4b37      	ldr	r3, [pc, #220]	; (800152c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 800144e:	4a38      	ldr	r2, [pc, #224]	; (8001530 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8001450:	21ed      	movs	r1, #237	; 0xed
 8001452:	4838      	ldr	r0, [pc, #224]	; (8001534 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8001454:	f026 f9ee 	bl	8027834 <__assert_func>

    readData(currentMovieOffset, 8);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2208      	movs	r2, #8
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff feed 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	3304      	adds	r3, #4
 800146c:	4619      	mov	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe6b 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001474:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	4413      	add	r3, r2
 800147e:	f103 0208 	add.w	r2, r3, #8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	429a      	cmp	r2, r3
 8001488:	d243      	bcs.n	8001512 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4413      	add	r3, r2
 8001492:	f103 0208 	add.w	r2, r3, #8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	3301      	adds	r3, #1
 80014a0:	f023 0201 	bic.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
        frameNumber++;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2208      	movs	r2, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fec0 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fe8a 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80014cc:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	3302      	adds	r3, #2
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fe82 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80014dc:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	3304      	adds	r3, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fe2f 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80014ec:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 80014ee:	f243 0330 	movw	r3, #12336	; 0x3030
 80014f2:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 80014f4:	f246 3364 	movw	r3, #25444	; 0x6364
 80014f8:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f243 0230 	movw	r2, #12336	; 0x3030
 8001500:	4293      	cmp	r3, r2
 8001502:	d1b8      	bne.n	8001476 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f246 3264 	movw	r2, #25444	; 0x6364
 800150a:	4293      	cmp	r3, r2
 800150c:	d1b3      	bne.n	8001476 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 800150e:	2301      	movs	r3, #1
 8001510:	e007      	b.n	8001522 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
    return false;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	08028ba0 	.word	0x08028ba0
 8001530:	08028c48 	.word	0x08028c48
 8001534:	08028b34 	.word	0x08028b34

08001538 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f834 	bl	80015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3308      	adds	r3, #8
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	4798      	blx	r3
 8001586:	4602      	mov	r2, r0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f819 	bl	80015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 80015da:	2248      	movs	r2, #72	; 0x48
 80015dc:	2100      	movs	r1, #0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fe2e 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6999      	ldr	r1, [r3, #24]
 80015e8:	2304      	movs	r3, #4
 80015ea:	4aa9      	ldr	r2, [pc, #676]	; (8001890 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fd89 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf14      	ite	ne
 80015f8:	2301      	movne	r3, #1
 80015fa:	2300      	moveq	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00a      	beq.n	8001618 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 800160a:	4ba2      	ldr	r3, [pc, #648]	; (8001894 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 800160c:	4aa2      	ldr	r2, [pc, #648]	; (8001898 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 800160e:	f240 1135 	movw	r1, #309	; 0x135
 8001612:	48a2      	ldr	r0, [pc, #648]	; (800189c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 8001614:	f026 f90e 	bl	8027834 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f103 0208 	add.w	r2, r3, #8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6999      	ldr	r1, [r3, #24]
 8001628:	2304      	movs	r3, #4
 800162a:	4a9d      	ldr	r2, [pc, #628]	; (80018a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fd69 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2204      	movs	r2, #4
 8001646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 800164a:	4b96      	ldr	r3, [pc, #600]	; (80018a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 800164c:	4a92      	ldr	r2, [pc, #584]	; (8001898 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 800164e:	f240 113d 	movw	r1, #317	; 0x13d
 8001652:	4892      	ldr	r0, [pc, #584]	; (800189c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 8001654:	f026 f8ee 	bl	8027834 <__assert_func>
    }

    currentMovieOffset += 4;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	1d1a      	adds	r2, r3, #4
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6999      	ldr	r1, [r3, #24]
 8001666:	2304      	movs	r3, #4
 8001668:	4a8f      	ldr	r2, [pc, #572]	; (80018a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fd4a 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2205      	movs	r2, #5
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 8001688:	4b88      	ldr	r3, [pc, #544]	; (80018ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 800168a:	4a83      	ldr	r2, [pc, #524]	; (8001898 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 800168c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001690:	4882      	ldr	r0, [pc, #520]	; (800189c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 8001692:	f026 f8cf 	bl	8027834 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	3304      	adds	r3, #4
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd53 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80016a4:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 80016b2:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 80016b4:	4a78      	ldr	r2, [pc, #480]	; (8001898 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 80016b6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80016ba:	4878      	ldr	r0, [pc, #480]	; (800189c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 80016bc:	f026 f8ba 	bl	8027834 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	3308      	adds	r3, #8
 80016cc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 80016ce:	2304      	movs	r3, #4
 80016d0:	4a78      	ldr	r2, [pc, #480]	; (80018b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 80016d2:	6979      	ldr	r1, [r7, #20]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fd15 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2206      	movs	r2, #6
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3304      	adds	r3, #4
 80016fc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 80016fe:	2304      	movs	r3, #4
 8001700:	4a6d      	ldr	r2, [pc, #436]	; (80018b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>)
 8001702:	6979      	ldr	r1, [r7, #20]
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fcfd 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2207      	movs	r2, #7
 800171e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8001728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800172c:	2b00      	cmp	r3, #0
 800172e:	d028      	beq.n	8001782 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3308      	adds	r3, #8
 8001734:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fd06 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800173e:	4603      	mov	r3, r0
 8001740:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f8>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	099a      	lsrs	r2, r3, #6
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3310      	adds	r3, #16
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fcf9 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001758:	4602      	mov	r2, r0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3320      	adds	r3, #32
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fcf0 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800176a:	4602      	mov	r2, r0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3324      	adds	r3, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fce7 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800177c:	4602      	mov	r2, r0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	3308      	adds	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 800178c:	220c      	movs	r2, #12
 800178e:	6a39      	ldr	r1, [r7, #32]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fd55 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f103 0108 	add.w	r1, r3, #8
 800179c:	2304      	movs	r3, #4
 800179e:	4a48      	ldr	r2, [pc, #288]	; (80018c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fc>)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fcaf 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00b      	beq.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	6a3a      	ldr	r2, [r7, #32]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d201      	bcs.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d012      	beq.n	80017f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	3304      	adds	r3, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fcba 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80017d6:	4603      	mov	r3, r0
 80017d8:	3308      	adds	r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 80017e4:	220c      	movs	r2, #12
 80017e6:	6a39      	ldr	r1, [r7, #32]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fd29 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80017ee:	e7d2      	b.n	8001796 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	220a      	movs	r2, #10
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8001802:	e041      	b.n	8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f103 020c 	add.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	3304      	adds	r3, #4
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fc98 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800181a:	4602      	mov	r2, r0
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	4413      	add	r3, r2
 8001820:	f103 0208 	add.w	r2, r3, #8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	3304      	adds	r3, #4
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fc8b 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001834:	4603      	mov	r3, r0
 8001836:	3308      	adds	r3, #8
 8001838:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 800183a:	6a3a      	ldr	r2, [r7, #32]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4413      	add	r3, r2
 8001840:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8001842:	2204      	movs	r2, #4
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fcfa 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800184c:	2304      	movs	r3, #4
 800184e:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x300>)
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fc56 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00a      	beq.n	800187e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ba>
    {
        indexOffset = listOffset;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a3a      	ldr	r2, [r7, #32]
 800186c:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699a      	ldr	r2, [r3, #24]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	621a      	str	r2, [r3, #32]
 800187c:	e004      	b.n	8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	220b      	movs	r2, #11
 8001882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8001886:	bf00      	nop
}
 8001888:	3728      	adds	r7, #40	; 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	08028c7c 	.word	0x08028c7c
 8001894:	08028c84 	.word	0x08028c84
 8001898:	08028ca0 	.word	0x08028ca0
 800189c:	08028b34 	.word	0x08028b34
 80018a0:	08028cd0 	.word	0x08028cd0
 80018a4:	08028cd8 	.word	0x08028cd8
 80018a8:	08028cf0 	.word	0x08028cf0
 80018ac:	08028cf8 	.word	0x08028cf8
 80018b0:	08028d10 	.word	0x08028d10
 80018b4:	08028d1c 	.word	0x08028d1c
 80018b8:	08028d24 	.word	0x08028d24
 80018bc:	10624dd3 	.word	0x10624dd3
 80018c0:	08028d2c 	.word	0x08028d2c
 80018c4:	08028d34 	.word	0x08028d34

080018c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
    if (length == 0)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d05f      	beq.n	800199c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd4>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d05d      	beq.n	800199e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
    {
        // Update JPEG conversion parameters
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018e4:	2203      	movs	r2, #3
 80018e6:	611a      	str	r2, [r3, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a2d      	ldr	r2, [pc, #180]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018ee:	6013      	str	r3, [r2, #0]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
        {
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	3310      	adds	r3, #16
 8001906:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001908:	6013      	str	r3, [r2, #0]
        }
        JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	015b      	lsls	r3, r3, #5
 8001916:	461a      	mov	r2, r3
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800191a:	605a      	str	r2, [r3, #4]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001924:	60d3      	str	r3, [r2, #12]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	f1c3 0310 	rsb	r3, r3, #16
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001934:	6093      	str	r3, [r2, #8]

        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	481a      	ldr	r0, [pc, #104]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800193e:	f000 f901 	bl	8001b44 <JPEG_Decode_DMA>
        do
        {
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4619      	mov	r1, r3
 8001948:	4817      	ldr	r0, [pc, #92]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800194a:	f000 fab5 	bl	8001eb8 <JPEG_OutputHandler>
 800194e:	4603      	mov	r3, r0
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001952:	6013      	str	r3, [r2, #0]

            //If nothing to do, allow other tasks
            if (JpegProcessing_End == 2)
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xac>
            {
                SEM_WAIT(semDecodingDone);
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f04f 31ff 	mov.w	r1, #4294967295
 800196e:	4618      	mov	r0, r3
 8001970:	f014 f92e 	bl	8015bd0 <osSemaphoreAcquire>
            }
        } while (JpegProcessing_End != 1);
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d000      	beq.n	8001988 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>
        do
 8001986:	e7dc      	b.n	8001942 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7a>

        // reset job queue and flags after frame is decoded
        external_queue.reset();
 8001988:	480a      	ldr	r0, [pc, #40]	; (80019b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xec>)
 800198a:	f000 fc07 	bl	800219c <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>
        Jpeg_HWDecodingEnd = 0;
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf0>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
        DMA2D_CopyBufferEnd = 0;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf4>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e000      	b.n	800199e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
        return;
 800199c:	bf00      	nop
    }
}
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	24005bb0 	.word	0x24005bb0
 80019a8:	240260f0 	.word	0x240260f0
 80019ac:	24005b7c 	.word	0x24005b7c
 80019b0:	24005b8c 	.word	0x24005b8c
 80019b4:	24005b90 	.word	0x24005b90
 80019b8:	24005b64 	.word	0x24005b64
 80019bc:	24005b74 	.word	0x24005b74

080019c0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
    // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2208      	movs	r2, #8
 80019d4:	4619      	mov	r1, r3
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fc32 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	3304      	adds	r3, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fbb0 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80019ea:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	3308      	adds	r3, #8
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fc22 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80019fc:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d018      	beq.n	8001a36 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
    {
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	6939      	ldr	r1, [r7, #16]
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8001a0c:	f000 f89a 	bl	8001b44 <JPEG_Decode_DMA>

        do
        {
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	4619      	mov	r1, r3
 8001a16:	480a      	ldr	r0, [pc, #40]	; (8001a40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8001a18:	f000 fa4e 	bl	8001eb8 <JPEG_OutputHandler>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8001a20:	6013      	str	r3, [r2, #0]
        } while (JpegProcessing_End == 0);
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d000      	beq.n	8001a36 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
        do
 8001a34:	e7ec      	b.n	8001a10 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	240260f0 	.word	0x240260f0
 8001a44:	24005b7c 	.word	0x24005b7c

08001a48 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	807b      	strh	r3, [r7, #2]
    assert(0);
 8001a56:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8001a5a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 8001a60:	f025 fee8 	bl	8027834 <__assert_func>
 8001a64:	08028d3c 	.word	0x08028d3c
 8001a68:	08028d40 	.word	0x08028d40
 8001a6c:	08028b34 	.word	0x08028b34

08001a70 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    if (frameNumber == 0)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	332c      	adds	r3, #44	; 0x2c
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
 8001a90:	4602      	mov	r2, r0
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	4293      	cmp	r3, r2
 8001a96:	bf8c      	ite	hi
 8001a98:	2301      	movhi	r3, #1
 8001a9a:	2300      	movls	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	332c      	adds	r3, #44	; 0x2c
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
 8001aae:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	3308      	adds	r3, #8
 8001abe:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fbbb 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3308      	adds	r3, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fb3a 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4413      	add	r3, r2
 8001ade:	1f1a      	subs	r2, r3, #4
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	615a      	str	r2, [r3, #20]
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]

}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 8001b22:	b490      	push	{r4, r7}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4614      	mov	r4, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc90      	pop	{r4, r7}
 8001b42:	4770      	bx	lr

08001b44 <JPEG_Decode_DMA>:
      * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
      * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
      * @retval None
      */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
        FrameBufferAddress = output;
 8001b52:	4a2a      	ldr	r2, [pc, #168]	; (8001bfc <JPEG_Decode_DMA+0xb8>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6013      	str	r3, [r2, #0]
        Output_Is_Paused = 0;
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <JPEG_Decode_DMA+0xbc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <JPEG_Decode_DMA+0xc0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
        JPEG_OUT_Write_BufferIndex = 0;
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <JPEG_Decode_DMA+0xc4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
        JPEG_InputImageIndex = 0;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <JPEG_Decode_DMA+0xc8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <JPEG_Decode_DMA+0xcc>)
 8001b74:	6013      	str	r3, [r2, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8001b76:	4a27      	ldr	r2, [pc, #156]	; (8001c14 <JPEG_Decode_DMA+0xd0>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6013      	str	r3, [r2, #0]
        MCU_BlockIndex = 0;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <JPEG_Decode_DMA+0xd4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
        DMA2D_output_Is_Paused = 1;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <JPEG_Decode_DMA+0xd8>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

        //Init buffers
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d816      	bhi.n	8001bc0 <JPEG_Decode_DMA+0x7c>
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001b92:	4923      	ldr	r1, [pc, #140]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001ba4:	491e      	ldr	r1, [pc, #120]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e7e5      	b.n	8001b8c <JPEG_Decode_DMA+0x48>
        }

        //Do not return from this function until done with decoding all chunks.
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <JPEG_Decode_DMA+0xc4>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4916      	ldr	r1, [pc, #88]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <JPEG_Decode_DMA+0xe0>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	01db      	lsls	r3, r3, #7
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	460b      	mov	r3, r1
 8001be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f00c ffb7 	bl	800eb5e <HAL_JPEG_Decode_DMA>

        return 0;
 8001bf0:	2300      	movs	r3, #0
    }
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	24005b54 	.word	0x24005b54
 8001c00:	24005b70 	.word	0x24005b70
 8001c04:	24005b68 	.word	0x24005b68
 8001c08:	24005b6c 	.word	0x24005b6c
 8001c0c:	24005b58 	.word	0x24005b58
 8001c10:	24005b60 	.word	0x24005b60
 8001c14:	24005b5c 	.word	0x24005b5c
 8001c18:	24005b88 	.word	0x24005b88
 8001c1c:	24005b78 	.word	0x24005b78
 8001c20:	24000004 	.word	0x24000004
 8001c24:	24005bb0 	.word	0x24005bb0

08001c28 <HAL_JPEG_InfoReadyCallback>:
      * @param hjpeg: JPEG handle pointer
      * @param pInfo: JPEG Info Struct pointer
      * @retval None
      */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d12f      	bne.n	8001c9a <HAL_JPEG_InfoReadyCallback+0x72>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_JPEG_InfoReadyCallback+0x2e>
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f023 030f 	bic.w	r3, r3, #15
 8001c4e:	f103 0210 	add.w	r2, r3, #16
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	60da      	str	r2, [r3, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_JPEG_InfoReadyCallback+0x4a>
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f023 030f 	bic.w	r3, r3, #15
 8001c6a:	f103 0210 	add.w	r2, r3, #16
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	609a      	str	r2, [r3, #8]
            }

            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_JPEG_InfoReadyCallback+0x124>)
 8001c74:	4936      	ldr	r1, [pc, #216]	; (8001d50 <HAL_JPEG_InfoReadyCallback+0x128>)
 8001c76:	6838      	ldr	r0, [r7, #0]
 8001c78:	f003 fdfc 	bl	8005874 <TGFX_JPEG_GetDecodeColorConvertFunc>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73bb      	strb	r3, [r7, #14]
            if (status != HAL_OK)
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d05d      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
            {
                assert(status == HAL_OK);
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d05a      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8001c8e:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <HAL_JPEG_InfoReadyCallback+0x130>)
 8001c90:	f240 2131 	movw	r1, #561	; 0x231
 8001c94:	4831      	ldr	r0, [pc, #196]	; (8001d5c <HAL_JPEG_InfoReadyCallback+0x134>)
 8001c96:	f025 fdcd 	bl	8027834 <__assert_func>
            }
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d11b      	bne.n	8001cda <HAL_JPEG_InfoReadyCallback+0xb2>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_JPEG_InfoReadyCallback+0x96>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f023 030f 	bic.w	r3, r3, #15
 8001cb6:	f103 0210 	add.w	r2, r3, #16
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	60da      	str	r2, [r3, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_JPEG_InfoReadyCallback+0xb2>
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	f103 0208 	add.w	r2, r3, #8
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	609a      	str	r2, [r3, #8]
                }
            }

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d11b      	bne.n	8001d1a <HAL_JPEG_InfoReadyCallback+0xf2>
            {
                if ((pInfo->ImageWidth % 8) != 0)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_JPEG_InfoReadyCallback+0xd6>
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f023 0307 	bic.w	r3, r3, #7
 8001cf6:	f103 0208 	add.w	r2, r3, #8
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	60da      	str	r2, [r3, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_JPEG_InfoReadyCallback+0xf2>
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	f103 0208 	add.w	r2, r3, #8
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	609a      	str	r2, [r3, #8]
                }
            }

            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_JPEG_InfoReadyCallback+0x124>)
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <HAL_JPEG_InfoReadyCallback+0x128>)
 8001d1e:	6838      	ldr	r0, [r7, #0]
 8001d20:	f017 fed0 	bl	8019ac4 <JPEG_GetDecodeColorConvertFunc>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]
            if (status != HAL_OK)
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
            {
                assert(status == HAL_OK);
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_JPEG_InfoReadyCallback+0x130>)
 8001d38:	f240 2153 	movw	r1, #595	; 0x253
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <HAL_JPEG_InfoReadyCallback+0x134>)
 8001d3e:	f025 fd79 	bl	8027834 <__assert_func>
            }
        }
    }
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	24005b80 	.word	0x24005b80
 8001d50:	24005b84 	.word	0x24005b84
 8001d54:	08028d9c 	.word	0x08028d9c
 8001d58:	08028db0 	.word	0x08028db0
 8001d5c:	08028b34 	.word	0x08028b34

08001d60 <HAL_JPEG_GetDataCallback>:
      * @param hjpeg: JPEG handle pointer
      * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
      * @retval None
      */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
        //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
        JPEG_InputImageIndex += NbDecodedData;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d74:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_JPEG_GetDataCallback+0x60>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d218      	bcs.n	8001db4 <HAL_JPEG_GetDataCallback+0x54>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d8c:	6013      	str	r3, [r2, #0]
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_JPEG_GetDataCallback+0x60>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	60fb      	str	r3, [r7, #12]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da6:	bf28      	it	cs
 8001da8:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8001dac:	461a      	mov	r2, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f00d f87b 	bl	800eeaa <HAL_JPEG_ConfigInputBuffer>
        }
    }
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	24005b58 	.word	0x24005b58
 8001dc0:	24005b5c 	.word	0x24005b5c
 8001dc4:	24005b60 	.word	0x24005b60

08001dc8 <HAL_JPEG_DataReadyCallback>:
      * @param pDataOut: pointer to the output data buffer
      * @param OutDataLength: length of output buffer in bytes
      * @retval None
      */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4927      	ldr	r1, [pc, #156]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4922      	ldr	r1, [pc, #136]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	3308      	adds	r3, #8
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e06:	6013      	str	r3, [r2, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d902      	bls.n	8001e16 <HAL_JPEG_DataReadyCallback+0x4e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
        }

        //if the other buffer is full, then ui thread might be converting it
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4917      	ldr	r1, [pc, #92]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_JPEG_DataReadyCallback+0x72>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f00c fef8 	bl	800ec24 <HAL_JPEG_Pause>
            Output_Is_Paused = 1;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_JPEG_DataReadyCallback+0xb4>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_JPEG_DataReadyCallback+0xb8>)
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	01db      	lsls	r3, r3, #7
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f00d f836 	bl	800eece <HAL_JPEG_ConfigOutputBuffer>

        // Signal Hardware Decoding to wake up
        SEM_POST(semDecodingDone);
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_JPEG_DataReadyCallback+0xbc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f013 ff04 	bl	8015c74 <osSemaphoreRelease>
    }
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	24005b6c 	.word	0x24005b6c
 8001e78:	24000004 	.word	0x24000004
 8001e7c:	24005b70 	.word	0x24005b70
 8001e80:	24005bb0 	.word	0x24005bb0
 8001e84:	24005b8c 	.word	0x24005b8c

08001e88 <HAL_JPEG_ErrorCallback>:
      * @brief  JPEG Error callback
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
        __disable_irq();
        while (1)
 8001e94:	e7fe      	b.n	8001e94 <HAL_JPEG_ErrorCallback+0xc>
	...

08001e98 <HAL_JPEG_DecodeCpltCallback>:
      * @brief  JPEG Decode complete callback
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
        Jpeg_HWDecodingEnd = 1;
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
    }
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	24005b64 	.word	0x24005b64

08001eb8 <JPEG_OutputHandler>:
  * @param hjpeg: JPEG handle pointer
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg, touchgfx::DMA_Interface& dma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <JPEG_OutputHandler+0x120>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <JPEG_OutputHandler+0x1e>
 8001eca:	4b44      	ldr	r3, [pc, #272]	; (8001fdc <JPEG_OutputHandler+0x124>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <JPEG_OutputHandler+0x1e>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <JPEG_OutputHandler+0x20>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <JPEG_OutputHandler+0x28>
    {
        return 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e077      	b.n	8001fd0 <JPEG_OutputHandler+0x118>
    }

    // Add job to DMA2D if ready and JPEG buffer is full
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	493f      	ldr	r1, [pc, #252]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <JPEG_OutputHandler+0x4a>
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <JPEG_OutputHandler+0x4a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <JPEG_OutputHandler+0x4c>
 8001f02:	2300      	movs	r3, #0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02d      	beq.n	8001f64 <JPEG_OutputHandler+0xac>
    {
        External_DMA2D_JobTypeDef new_job =
        {
            MCU_BlockIndex,
            &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
        };
 8001f08:	4b38      	ldr	r3, [pc, #224]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60bb      	str	r3, [r7, #8]
            &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
 8001f0e:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f1c:	4413      	add	r3, r2
        };
 8001f1e:	60fb      	str	r3, [r7, #12]

        external_queue.push(new_job);
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4619      	mov	r1, r3
 8001f26:	4832      	ldr	r0, [pc, #200]	; (8001ff0 <JPEG_OutputHandler+0x138>)
 8001f28:	f000 f94d 	bl	80021c6 <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <JPEG_OutputHandler+0x13c>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a2d      	ldr	r2, [pc, #180]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f38:	6013      	str	r3, [r2, #0]

        JPEG_OUT_Read_BufferIndex++;
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f42:	6013      	str	r3, [r2, #0]
        if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001f44:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d902      	bls.n	8001f52 <JPEG_OutputHandler+0x9a>
        {
            JPEG_OUT_Read_BufferIndex = 0;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
        }

        DMA2D_output_Is_Paused = 0;
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        // Try to start DMA2D
        dma.start();
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3310      	adds	r3, #16
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	4798      	blx	r3
    }

    // Start JPEG IP if paused and next buffer is empty
    if ((Output_Is_Paused == 1) && \
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001f66:	681b      	ldr	r3, [r3, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d117      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <JPEG_OutputHandler+0x144>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	491c      	ldr	r1, [pc, #112]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	781b      	ldrb	r3, [r3, #0]
    if ((Output_Is_Paused == 1) && \
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	781b      	ldrb	r3, [r3, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <JPEG_OutputHandler+0xe6>
 8001f9c:	2300      	movs	r3, #0
    if ((Output_Is_Paused == 1) && \
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <JPEG_OutputHandler+0xf8>
    {
        Output_Is_Paused = 0;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001fa8:	2102      	movs	r1, #2
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f00c fe92 	bl	800ecd4 <HAL_JPEG_Resume>
    }

    if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <JPEG_OutputHandler+0x10c>
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <JPEG_OutputHandler+0x10c>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <JPEG_OutputHandler+0x10e>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <JPEG_OutputHandler+0x116>
    {
        return 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e000      	b.n	8001fd0 <JPEG_OutputHandler+0x118>
    }

    return 0;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24005b64 	.word	0x24005b64
 8001fdc:	24005b74 	.word	0x24005b74
 8001fe0:	24005b68 	.word	0x24005b68
 8001fe4:	24000004 	.word	0x24000004
 8001fe8:	24005b78 	.word	0x24005b78
 8001fec:	24005b88 	.word	0x24005b88
 8001ff0:	24005b90 	.word	0x24005b90
 8001ff4:	24005bb0 	.word	0x24005bb0
 8001ff8:	24005b70 	.word	0x24005b70
 8001ffc:	24005b6c 	.word	0x24005b6c

08002000 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    uint32_t xRef, yRef, refline;

    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	011a      	lsls	r2, r3, #4
 800200e:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	617b      	str	r3, [r7, #20]
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	fbb3 f1f2 	udiv	r1, r3, r2
 8002028:	fb02 f201 	mul.w	r2, r2, r1
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	fb02 f203 	mul.w	r2, r2, r3
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	6939      	ldr	r1, [r7, #16]
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800204a:	2201      	movs	r2, #1
 800204c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <DMA2D_CopyBuffer+0xd0>)
 8002054:	6819      	ldr	r1, [r3, #0]
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	1acb      	subs	r3, r1, r3
 800205c:	429a      	cmp	r2, r3
 800205e:	d309      	bcc.n	8002074 <DMA2D_CopyBuffer+0x74>
    {
        WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	4917      	ldr	r1, [pc, #92]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	644b      	str	r3, [r1, #68]	; 0x44
 8002072:	e007      	b.n	8002084 <DMA2D_CopyBuffer+0x84>
    }
    else
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	6453      	str	r3, [r2, #68]	; 0x44
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <DMA2D_CopyBuffer+0xd4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	440b      	add	r3, r1
 8002090:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f1c3 031e 	rsb	r3, r3, #30
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	6413      	str	r3, [r2, #64]	; 0x40

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, 0);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <DMA2D_CopyBuffer+0xd8>)
 80020aa:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020b4:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <DMA2D_CopyBuffer+0xdc>)
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	24005bb0 	.word	0x24005bb0
 80020cc:	52001000 	.word	0x52001000
 80020d0:	24005b80 	.word	0x24005b80
 80020d4:	24005b54 	.word	0x24005b54
 80020d8:	ff09000b 	.word	0xff09000b
 80020dc:	00010201 	.word	0x00010201

080020e0 <DMA2D_ExternalJobCompleted>:
  * @brief  External DMA2D job complete callback
  * @param job: External job reference
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    // Mark ycbcr empty
    job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
    job.jpeg_buffer->DataBufferSize = 0;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]

    // Mark dma paused if queue is empty
    if (external_queue.is_empty())
 80020f8:	480e      	ldr	r0, [pc, #56]	; (8002134 <DMA2D_ExternalJobCompleted+0x54>)
 80020fa:	f000 f827 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <DMA2D_ExternalJobCompleted+0x2a>
    {
        DMA2D_output_Is_Paused = 1;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <DMA2D_ExternalJobCompleted+0x58>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
    }

    // Check if last line
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <DMA2D_ExternalJobCompleted+0x5c>)
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <DMA2D_ExternalJobCompleted+0x60>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	1acb      	subs	r3, r1, r3
 8002118:	429a      	cmp	r2, r3
 800211a:	d302      	bcc.n	8002122 <DMA2D_ExternalJobCompleted+0x42>
    {
        DMA2D_CopyBufferEnd = 1;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <DMA2D_ExternalJobCompleted+0x64>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    }

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <DMA2D_ExternalJobCompleted+0x68>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f013 fda4 	bl	8015c74 <osSemaphoreRelease>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	24005b90 	.word	0x24005b90
 8002138:	24005b78 	.word	0x24005b78
 800213c:	24005b80 	.word	0x24005b80
 8002140:	24005bb0 	.word	0x24005bb0
 8002144:	24005b74 	.word	0x24005b74
 8002148:	24005b8c 	.word	0x24005b8c

0800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>:
    }
    External_DMA2D_JobTypeDef& front()
    {
        return buffer_[head_];
    }
    bool is_empty()
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    {
        return count_ == 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
    }
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>:
    ExternalDMAJob_Queue()
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
        : max_size_(Size), head_(0), tail_(0), count_(0)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
    {}
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>:
    bool is_full()
    {
        return count_ == max_size_;
    }
    void reset()
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    {
        head_ = tail_ = count_ = 0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	605a      	str	r2, [r3, #4]
    }
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>:
    void push(const External_DMA2D_JobTypeDef& job)
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
        buffer_[tail_] = job;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	3302      	adds	r3, #2
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	460a      	mov	r2, r1
 80021e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e4:	e883 0003 	stmia.w	r3, {r0, r1}
        tail_ = (tail_ + 1) % max_size_;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	3301      	adds	r3, #1
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80021f6:	fb02 f201 	mul.w	r2, r2, r1
 80021fa:	1a9a      	subs	r2, r3, r2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
        count_++;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60da      	str	r2, [r3, #12]
    }
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fed1 	bl	8000fd0 <_ZN12MJPEGDecoderD1Ev>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	0802ae4c 	.word	0x0802ae4c

0800223c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffe7 	bl	8002218 <_ZN20HardwareMJPEGDecoderD1Ev>
 800224a:	2148      	movs	r1, #72	; 0x48
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f025 fac2 	bl	80277d6 <_ZdlPvj>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_Z41__static_initialization_and_destruction_0ii>:
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002272:	4293      	cmp	r3, r2
 8002274:	d102      	bne.n	800227c <_Z41__static_initialization_and_destruction_0ii+0x20>
ExternalDMAJob_Queue<EXT_DMA2D_QUEUE_SIZE> external_queue;
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002278:	f7ff ff79 	bl	800216e <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	24005b90 	.word	0x24005b90

08002288 <_GLOBAL__sub_I_FrameBufferAddress>:
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
 800228c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff ffe3 	bl	800225c <_Z41__static_initialization_and_destruction_0ii>
 8002296:	bd80      	pop	{r7, pc}

08002298 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800229c:	2200      	movs	r2, #0
 800229e:	2101      	movs	r1, #1
 80022a0:	2001      	movs	r0, #1
 80022a2:	f013 fc0c 	bl	8015abe <osSemaphoreNew>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80022aa:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80022b8:	2128      	movs	r1, #40	; 0x28
 80022ba:	480e      	ldr	r0, [pc, #56]	; (80022f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80022bc:	f025 faba 	bl	8027834 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2104      	movs	r1, #4
 80022c4:	2001      	movs	r0, #1
 80022c6:	f013 fd19 	bl	8015cfc <osMessageQueueNew>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80022ce:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80022e0:	f025 faa8 	bl	8027834 <__assert_func>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	24005bc4 	.word	0x24005bc4
 80022ec:	08028df8 	.word	0x08028df8
 80022f0:	08028e44 	.word	0x08028e44
 80022f4:	08028e74 	.word	0x08028e74
 80022f8:	24005bc8 	.word	0x24005bc8
 80022fc:	08028ed8 	.word	0x08028ed8

08002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	4618      	mov	r0, r3
 800230e:	f013 fc5f 	bl	8015bd0 <osSemaphoreAcquire>
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	24005bc4 	.word	0x24005bc4

0800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f013 fca5 	bl	8015c74 <osSemaphoreRelease>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	24005bc4 	.word	0x24005bc4

08002334 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f013 fc46 	bl	8015bd0 <osSemaphoreAcquire>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	24005bc4 	.word	0x24005bc4

0800234c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f013 fc8d 	bl	8015c74 <osSemaphoreRelease>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	24005bc4 	.word	0x24005bc4

08002364 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	2300      	movs	r3, #0
 800236e:	2200      	movs	r2, #0
 8002370:	4903      	ldr	r1, [pc, #12]	; (8002380 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8002372:	f013 fd37 	bl	8015de4 <osMessageQueuePut>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	24005bc8 	.word	0x24005bc8
 8002380:	2400001c 	.word	0x2400001c

08002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	1d39      	adds	r1, r7, #4
 8002390:	2300      	movs	r3, #0
 8002392:	2200      	movs	r2, #0
 8002394:	f013 fd86 	bl	8015ea4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	1d39      	adds	r1, r7, #4
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	2200      	movs	r2, #0
 80023a4:	f013 fd7e 	bl	8015ea4 <osMessageQueueGet>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	24005bc8 	.word	0x24005bc8

080023b4 <__NVIC_EnableIRQ>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_DisableIRQ>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db12      	blt.n	8002428 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	490a      	ldr	r1, [pc, #40]	; (8002434 <__NVIC_DisableIRQ+0x44>)
 800240a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	3320      	adds	r3, #32
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800241c:	f3bf 8f4f 	dsb	sy
}
 8002420:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002422:	f3bf 8f6f 	isb	sy
}
 8002426:	bf00      	nop
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100

08002438 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
        : color(0)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    {
    }
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    {
        return color;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
    }
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    {
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	601a      	str	r2, [r3, #0]
    }
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	0802af20 	.word	0x0802af20

0800248c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    }
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe9 	bl	800246c <_ZN8touchgfx9DMA_QueueD1Ev>
 800249a:	2104      	movs	r1, #4
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f025 f99a 	bl	80277d6 <_ZdlPvj>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3344      	adds	r3, #68	; 0x44
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
    }
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
    {
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
    }
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	0802c264 	.word	0x0802c264

080024e8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    }
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffe9 	bl	80024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80024f6:	210c      	movs	r1, #12
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f025 f96c 	bl	80277d6 <_ZdlPvj>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	721a      	strb	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	725a      	strb	r2, [r3, #9]
    {
    }
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	0802c264 	.word	0x0802c264

0800253c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002544:	2301      	movs	r3, #1
    }
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    {
        if (started_by_external_job)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3da0 	ldrb.w	r3, [r3, #3488]	; 0xda0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
        {
            externalJobCompleted();
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f88a 	bl	8002680 <_ZN8STM32DMA20externalJobCompletedEv>
            {
                started_by_external_job = true;
                externalJobExecute();
            }
        }
    }
 800256c:	e022      	b.n	80025b4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
            executeCompleted();
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3328      	adds	r3, #40	; 0x28
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4610      	mov	r0, r2
 800257a:	4798      	blx	r3
            if (!external_queue.is_empty() && !isRunning)
 800257c:	480f      	ldr	r0, [pc, #60]	; (80025bc <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
 800257e:	f7ff fde5 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8002582:	4603      	mov	r3, r0
 8002584:	f083 0301 	eor.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7a1b      	ldrb	r3, [r3, #8]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <_ZN8STM32DMA18signalDMAInterruptEv+0x4e>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
                started_by_external_job = true;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
                externalJobExecute();
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f890 	bl	80026d4 <_ZN8STM32DMA18externalJobExecuteEv>
    }
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	24005b90 	.word	0x24005b90

080025c0 <_ZN8STM32DMA5startEv>:

    virtual void start()
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    {
        MUTEX_LOCK(mutexIsRunning);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 80025ce:	f04f 31ff 	mov.w	r1, #4294967295
 80025d2:	4618      	mov	r0, r3
 80025d4:	f013 f9eb 	bl	80159ae <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4610      	mov	r0, r2
 80025e6:	4798      	blx	r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7a5b      	ldrb	r3, [r3, #9]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7a1b      	ldrb	r3, [r3, #8]
 8002602:	f083 0301 	eor.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <_ZN8STM32DMA5startEv+0x52>
 8002610:	2300      	movs	r3, #0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <_ZN8STM32DMA5startEv+0x6e>
        {
            started_by_external_job = false;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            execute();
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3324      	adds	r3, #36	; 0x24
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4610      	mov	r0, r2
 800262a:	4798      	blx	r3
 800262c:	e01b      	b.n	8002666 <_ZN8STM32DMA5startEv+0xa6>
        }
        else if (!external_queue.is_empty() && !isRunning)
 800262e:	4813      	ldr	r0, [pc, #76]	; (800267c <_ZN8STM32DMA5startEv+0xbc>)
 8002630:	f7ff fd8c 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8002634:	4603      	mov	r3, r0
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <_ZN8STM32DMA5startEv+0x92>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7a1b      	ldrb	r3, [r3, #8]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <_ZN8STM32DMA5startEv+0x92>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <_ZN8STM32DMA5startEv+0x94>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <_ZN8STM32DMA5startEv+0xa6>
        {
            started_by_external_job = true;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            externalJobExecute();
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f837 	bl	80026d4 <_ZN8STM32DMA18externalJobExecuteEv>
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 800266c:	4618      	mov	r0, r3
 800266e:	f013 f9e9 	bl	8015a44 <osMutexRelease>
    }
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24005b90 	.word	0x24005b90

08002680 <_ZN8STM32DMA20externalJobCompletedEv>:
     *
     * @brief Handle DMA2D when an external job has been executed
     *
     * @param None
     */
    void externalJobCompleted()
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    {
        if (!external_queue.is_empty() && isRunning)
 8002688:	4811      	ldr	r0, [pc, #68]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 800268a:	f7ff fd5f 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 800268e:	4603      	mov	r3, r0
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7a1b      	ldrb	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <_ZN8STM32DMA20externalJobCompletedEv+0x28>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00c      	beq.n	80026c6 <_ZN8STM32DMA20externalJobCompletedEv+0x46>
        {
            isRunning = false;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	721a      	strb	r2, [r3, #8]
            External_DMA2D_JobTypeDef& completed_job = external_queue.front();
 80026b2:	4807      	ldr	r0, [pc, #28]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 80026b4:	f000 fb4a 	bl	8002d4c <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 80026b8:	60f8      	str	r0, [r7, #12]
            external_queue.pop();
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 80026bc:	f000 fb56 	bl	8002d6c <_ZN20ExternalDMAJob_QueueILm2EE3popEv>
            DMA2D_ExternalJobCompleted(completed_job);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff fd0d 	bl	80020e0 <DMA2D_ExternalJobCompleted>
        }
    }
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	24005b90 	.word	0x24005b90

080026d4 <_ZN8STM32DMA18externalJobExecuteEv>:
     *
     * @brief Executes an external DMA2D job
     *
     * @param None
     */
    void externalJobExecute()
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    {
        isRunning = true;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	721a      	strb	r2, [r3, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <_ZN8STM32DMA18externalJobExecuteEv+0x24>)
 80026e4:	f000 fb32 	bl	8002d4c <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 80026e8:	60f8      	str	r0, [r7, #12]
        DMA2D_CopyBuffer(job);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff fc88 	bl	8002000 <DMA2D_CopyBuffer>
    }
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	24005b90 	.word	0x24005b90

080026fc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3314      	adds	r3, #20
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4610      	mov	r0, r2
 8002714:	4798      	blx	r3
    }
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002726:	f7fe f981 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800272a:	4603      	mov	r3, r0
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ffe5 	bl	80026fc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	330c      	adds	r3, #12
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fe76 	bl	8002438 <_ZN8touchgfx9colortypeC1Ev>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	330c      	adds	r3, #12
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f7ff fecd 	bl	8002508 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800276e:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <_ZN8STM32DMAC1Ev+0x70>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 000c 	add.w	r0, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3320      	adds	r3, #32
 800277e:	2260      	movs	r2, #96	; 0x60
 8002780:	4619      	mov	r1, r3
 8002782:	f018 fc61 	bl	801b048 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3320      	adds	r3, #32
 800278a:	245f      	movs	r4, #95	; 0x5f
 800278c:	461d      	mov	r5, r3
 800278e:	2c00      	cmp	r4, #0
 8002790:	db05      	blt.n	800279e <_ZN8STM32DMAC1Ev+0x46>
 8002792:	4628      	mov	r0, r5
 8002794:	f7ff ffd1 	bl	800273a <_ZN8touchgfx6BlitOpC1Ev>
 8002798:	3524      	adds	r5, #36	; 0x24
 800279a:	3c01      	subs	r4, #1
 800279c:	e7f7      	b.n	800278e <_ZN8STM32DMAC1Ev+0x36>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
{
    mutexIsRunning = MUTEX_CREATE();
 80027ae:	2000      	movs	r0, #0
 80027b0:	f013 f877 	bl	80158a2 <osMutexNew>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
}
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bdb0      	pop	{r4, r5, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	0802aed0 	.word	0x0802aed0

080027cc <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	4a09      	ldr	r2, [pc, #36]	; (80027fc <_ZN8STM32DMAD1Ev+0x30>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80027da:	205a      	movs	r0, #90	; 0x5a
 80027dc:	f7ff fe08 	bl	80023f0 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	330c      	adds	r3, #12
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fadd 	bl	8002da4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe6b 	bl	80024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	0802aed0 	.word	0x0802aed0

08002800 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
}
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ffdf 	bl	80027cc <_ZN8STM32DMAD1Ev>
 800280e:	f640 51a8 	movw	r1, #3496	; 0xda8
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f024 ffdf 	bl	80277d6 <_ZdlPvj>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800282e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800283e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002850:	f043 0310 	orr.w	r3, r3, #16
 8002854:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800285c:	f023 0310 	bic.w	r3, r3, #16
 8002860:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <_ZN8STM32DMA10initializeEv+0x58>)
 8002864:	4a06      	ldr	r2, [pc, #24]	; (8002880 <_ZN8STM32DMA10initializeEv+0x5c>)
 8002866:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002868:	205a      	movs	r0, #90	; 0x5a
 800286a:	f7ff fda3 	bl	80023b4 <__NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	58024400 	.word	0x58024400
 800287c:	24026088 	.word	0x24026088
 8002880:	0800271f 	.word	0x0800271f

08002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	2b0b      	cmp	r3, #11
 8002898:	d826      	bhi.n	80028e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800289a:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	080028dd 	.word	0x080028dd
 80028a4:	080028d7 	.word	0x080028d7
 80028a8:	080028d1 	.word	0x080028d1
 80028ac:	080028e9 	.word	0x080028e9
 80028b0:	080028e9 	.word	0x080028e9
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	080028e9 	.word	0x080028e9
 80028bc:	080028e3 	.word	0x080028e3
 80028c0:	080028e3 	.word	0x080028e3
 80028c4:	080028e3 	.word	0x080028e3
 80028c8:	080028e3 	.word	0x080028e3
 80028cc:	080028e3 	.word	0x080028e3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
        break;
 80028d4:	e00e      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80028d6:	2301      	movs	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
        break;
 80028da:	e00b      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80028dc:	2302      	movs	r3, #2
 80028de:	60fb      	str	r3, [r7, #12]
        break;
 80028e0:	e008      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80028e2:	2305      	movs	r3, #5
 80028e4:	60fb      	str	r3, [r7, #12]
        break;
 80028e6:	e005      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80028ea:	4a06      	ldr	r2, [pc, #24]	; (8002904 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80028ec:	2167      	movs	r1, #103	; 0x67
 80028ee:	4806      	ldr	r0, [pc, #24]	; (8002908 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80028f0:	f024 ffa0 	bl	8027834 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	08028f1c 	.word	0x08028f1c
 8002904:	08028f38 	.word	0x08028f38
 8002908:	08028f84 	.word	0x08028f84

0800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	2b0a      	cmp	r3, #10
 8002920:	d821      	bhi.n	8002966 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	08002961 	.word	0x08002961
 800292c:	0800295b 	.word	0x0800295b
 8002930:	08002955 	.word	0x08002955
 8002934:	08002967 	.word	0x08002967
 8002938:	08002967 	.word	0x08002967
 800293c:	08002967 	.word	0x08002967
 8002940:	08002967 	.word	0x08002967
 8002944:	0800295b 	.word	0x0800295b
 8002948:	0800295b 	.word	0x0800295b
 800294c:	0800295b 	.word	0x0800295b
 8002950:	0800295b 	.word	0x0800295b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
        break;
 8002958:	e00b      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800295a:	2301      	movs	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
        break;
 800295e:	e008      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002960:	2302      	movs	r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
        break;
 8002964:	e005      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800296a:	2188      	movs	r1, #136	; 0x88
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800296e:	f024 ff61 	bl	8027834 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	08028f1c 	.word	0x08028f1c
 8002980:	08028fe4 	.word	0x08028fe4
 8002984:	08028f84 	.word	0x08028f84

08002988 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002990:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	7f5b      	ldrb	r3, [r3, #29]
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff67 	bl	8002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029b6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	7f9b      	ldrb	r3, [r3, #30]
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ff60 	bl	8002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029c4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7f9b      	ldrb	r3, [r3, #30]
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff9d 	bl	800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029d2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	8b5b      	ldrh	r3, [r3, #26]
 80029d8:	461a      	mov	r2, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	8a9b      	ldrh	r3, [r3, #20]
 80029de:	1ad2      	subs	r2, r2, r3
 80029e0:	4b97      	ldr	r3, [pc, #604]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	8b5b      	ldrh	r3, [r3, #26]
 80029e8:	461a      	mov	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	8a9b      	ldrh	r3, [r3, #20]
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	4b93      	ldr	r3, [pc, #588]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80029f2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	8b1b      	ldrh	r3, [r3, #24]
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	8a9b      	ldrh	r3, [r3, #20]
 80029fe:	1ad2      	subs	r2, r2, r3
 8002a00:	4b8f      	ldr	r3, [pc, #572]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002a02:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002a04:	4a8e      	ldr	r2, [pc, #568]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	8adb      	ldrh	r3, [r3, #22]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	8a9b      	ldrh	r3, [r3, #20]
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	4b89      	ldr	r3, [pc, #548]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	4b87      	ldr	r3, [pc, #540]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4b85      	ldr	r3, [pc, #532]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002a2a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a34:	d037      	beq.n	8002aa6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3a:	f200 80e3 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a42:	d015      	beq.n	8002a70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a48:	f200 80dc 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a4c:	2b80      	cmp	r3, #128	; 0x80
 8002a4e:	d045      	beq.n	8002adc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	f200 80d7 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	f000 80bf 	beq.w	8002bda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	f200 80d1 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	f000 80a4 	beq.w	8002bb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f000 80b6 	beq.w	8002bda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002a6e:	e0c9      	b.n	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	7f1b      	ldrb	r3, [r3, #28]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	4619      	mov	r1, r3
 8002a78:	4a71      	ldr	r2, [pc, #452]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	4c6e      	ldr	r4, [pc, #440]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fce4 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002a90:	4a6b      	ldr	r2, [pc, #428]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	4b69      	ldr	r3, [pc, #420]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002a9c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002a9e:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002aa0:	4a69      	ldr	r2, [pc, #420]	; (8002c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002aa2:	601a      	str	r2, [r3, #0]
        break;
 8002aa4:	e0c7      	b.n	8002c36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	7f1b      	ldrb	r3, [r3, #28]
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	4619      	mov	r1, r3
 8002aae:	4a64      	ldr	r2, [pc, #400]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ab0:	4b66      	ldr	r3, [pc, #408]	; (8002c4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	4c61      	ldr	r4, [pc, #388]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fcc9 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ac6:	4a5e      	ldr	r2, [pc, #376]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	4b5b      	ldr	r3, [pc, #364]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ad2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002ad4:	4b5a      	ldr	r3, [pc, #360]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ad6:	4a5c      	ldr	r2, [pc, #368]	; (8002c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002ad8:	601a      	str	r2, [r3, #0]
        break;
 8002ada:	e0ac      	b.n	8002c36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	461a      	mov	r2, r3
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	4a53      	ldr	r2, [pc, #332]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002afa:	4a51      	ldr	r2, [pc, #324]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b06:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1d1a      	adds	r2, r3, #4
 8002b0c:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d00d      	beq.n	8002b3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8002b1e:	e020      	b.n	8002b62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002b20:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	4b4a      	ldr	r3, [pc, #296]	; (8002c50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	8852      	ldrh	r2, [r2, #2]
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	0212      	lsls	r2, r2, #8
 8002b30:	4611      	mov	r1, r2
 8002b32:	4a43      	ldr	r2, [pc, #268]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b34:	430b      	orrs	r3, r1
 8002b36:	61d3      	str	r3, [r2, #28]
                break;
 8002b38:	e01a      	b.n	8002b70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7f1b      	ldrb	r3, [r3, #28]
 8002b3e:	2bff      	cmp	r3, #255	; 0xff
 8002b40:	d101      	bne.n	8002b46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 8002b42:	2300      	movs	r3, #0
 8002b44:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002b46:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	8852      	ldrh	r2, [r2, #2]
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0212      	lsls	r2, r2, #8
 8002b56:	4313      	orrs	r3, r2
 8002b58:	4a39      	ldr	r2, [pc, #228]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	61d3      	str	r3, [r2, #28]
                break;
 8002b60:	e006      	b.n	8002b70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002b62:	4b3c      	ldr	r3, [pc, #240]	; (8002c54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8002b64:	4a3c      	ldr	r2, [pc, #240]	; (8002c58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8002b66:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002b6a:	483c      	ldr	r0, [pc, #240]	; (8002c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8002b6c:	f024 fe62 	bl	8027834 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002b70:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d000      	beq.n	8002b94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 8002b92:	e7f3      	b.n	8002b7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b96:	2210      	movs	r2, #16
 8002b98:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002ba0:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ba2:	4a29      	ldr	r2, [pc, #164]	; (8002c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002ba4:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8002ba6:	e046      	b.n	8002c36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002ba8:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002baa:	4a2d      	ldr	r2, [pc, #180]	; (8002c60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8002bac:	601a      	str	r2, [r3, #0]
        break;
 8002bae:	e042      	b.n	8002c36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	7f1b      	ldrb	r3, [r3, #28]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	4a20      	ldr	r2, [pc, #128]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bc4:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bd0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bd4:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002bd6:	601a      	str	r2, [r3, #0]
        break;
 8002bd8:	e02d      	b.n	8002c36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	7f1b      	ldrb	r3, [r3, #28]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	461a      	mov	r2, r3
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bee:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bfa:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002c00:	601a      	str	r2, [r3, #0]
        break;
 8002c02:	e018      	b.n	8002c36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	7f1b      	ldrb	r3, [r3, #28]
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c16:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	7f5a      	ldrb	r2, [r3, #29]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7f9b      	ldrb	r3, [r3, #30]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d003      	beq.n	8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c26:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8002c28:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8002c2a:	e003      	b.n	8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c2e:	f240 2201 	movw	r2, #513	; 0x201
 8002c32:	601a      	str	r2, [r3, #0]
        break;
 8002c34:	bf00      	nop
    }
}
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd90      	pop	{r4, r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	52001000 	.word	0x52001000
 8002c44:	0002000a 	.word	0x0002000a
 8002c48:	00020201 	.word	0x00020201
 8002c4c:	00020009 	.word	0x00020009
 8002c50:	ffff00ef 	.word	0xffff00ef
 8002c54:	08029030 	.word	0x08029030
 8002c58:	0802904c 	.word	0x0802904c
 8002c5c:	08028f84 	.word	0x08028f84
 8002c60:	00010201 	.word	0x00010201

08002c64 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	7f9b      	ldrb	r3, [r3, #30]
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fe49 	bl	800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002c7a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c7c:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	8adb      	ldrh	r3, [r3, #22]
 8002c86:	461a      	mov	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	8a9b      	ldrh	r3, [r3, #20]
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	8b5b      	ldrh	r3, [r3, #26]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	8a9b      	ldrh	r3, [r3, #20]
 8002ca6:	1ad2      	subs	r2, r2, r3
 8002ca8:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d12e      	bne.n	8002d12 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	8b5b      	ldrh	r3, [r3, #26]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	8a9b      	ldrh	r3, [r3, #20]
 8002cbe:	1ad2      	subs	r2, r2, r3
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cc2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	8b5b      	ldrh	r3, [r3, #26]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	8a9b      	ldrh	r3, [r3, #20]
 8002cce:	1ad2      	subs	r2, r2, r3
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cd2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	7f1b      	ldrb	r3, [r3, #28]
 8002cde:	061b      	lsls	r3, r3, #24
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	4c13      	ldr	r4, [pc, #76]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fbaf 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d00:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d08:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8002d0e:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8002d10:	e010      	b.n	8002d34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	330c      	adds	r3, #12
 8002d22:	4c06      	ldr	r4, [pc, #24]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fb95 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002d2e:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d30:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8002d32:	601a      	str	r2, [r3, #0]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	52001000 	.word	0x52001000
 8002d40:	00010009 	.word	0x00010009
 8002d44:	00020201 	.word	0x00020201
 8002d48:	00030201 	.word	0x00030201

08002d4c <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>:
    External_DMA2D_JobTypeDef& front()
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
        return buffer_[head_];
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
    }
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <_ZN20ExternalDMAJob_QueueILm2EE3popEv>:
    void pop()
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
        head_ = (head_ + 1) % max_size_;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d82:	fb02 f201 	mul.w	r2, r2, r1
 8002d86:	1a9a      	subs	r2, r3, r2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	605a      	str	r2, [r3, #4]
        count_--;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	1e5a      	subs	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]
    }
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fb59 	bl	800246c <_ZN8touchgfx9DMA_QueueD1Ev>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	0802c2b4 	.word	0x0802c2b4

08002dc8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffe7 	bl	8002da4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002dd6:	2114      	movs	r1, #20
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f024 fcfc 	bl	80277d6 <_ZdlPvj>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	801a      	strh	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	805a      	strh	r2, [r3, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	809a      	strh	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	80da      	strh	r2, [r3, #6]
    {
    }
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
    }
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	24025d64 	.word	0x24025d64

08002e38 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
    {
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
    }
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	0802b154 	.word	0x0802b154

08002e58 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
    }
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ffe9 	bl	8002e38 <_ZN8touchgfx12FontProviderD1Ev>
 8002e66:	2104      	movs	r1, #4
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f024 fcb4 	bl	80277d6 <_ZdlPvj>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002e86:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	611a      	str	r2, [r3, #16]
    {
    }
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	0802b144 	.word	0x0802b144

08002eb8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    {
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
    }
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	0802b144 	.word	0x0802b144

08002ed8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
    }
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ffe9 	bl	8002eb8 <_ZN8touchgfx7MVPHeapD1Ev>
 8002ee6:	2114      	movs	r1, #20
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f024 fc74 	bl	80277d6 <_ZdlPvj>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
    {
    }
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
    {
    }
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    {
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
    }
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	0802b11c 	.word	0x0802b11c

08002f9c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    }
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ffe9 	bl	8002f7c <_ZN8touchgfx15UIEventListenerD1Ev>
 8002faa:	2104      	movs	r1, #4
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f024 fc12 	bl	80277d6 <_ZdlPvj>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
    {
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]
    }
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	0802c5ec 	.word	0x0802c5ec

08002fdc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
    }
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ffe9 	bl	8002fbc <_ZN8touchgfx3LCDD1Ev>
 8002fea:	2108      	movs	r1, #8
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f024 fbf2 	bl	80277d6 <_ZdlPvj>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
    {
    }
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800303a:	6810      	ldr	r0, [r2, #0]
 800303c:	6851      	ldr	r1, [r2, #4]
 800303e:	c303      	stmia	r3!, {r0, r1}
    }
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    {
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
    }
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	0802b104 	.word	0x0802b104

0800306c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
    }
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffe9 	bl	800304c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800307a:	2104      	movs	r1, #4
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f024 fbaa 	bl	80277d6 <_ZdlPvj>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <_ZN8touchgfx18MCUInstrumentationC1Ev>:
    MCUInstrumentation()
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
          cc_in(0)
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
    }
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	0802ad1c 	.word	0x0802ad1c

080030b8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	801a      	strh	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	805a      	strh	r2, [r3, #2]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	809a      	strh	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	80da      	strh	r2, [r3, #6]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	811a      	strh	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	815a      	strh	r2, [r3, #10]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	819a      	strh	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	739a      	strb	r2, [r3, #14]
        {
        }
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ffd5 	bl	80030b8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	611a      	str	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	829a      	strh	r2, [r3, #20]
    {
    }
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8003132:	4a55      	ldr	r2, [pc, #340]	; (8003288 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	615a      	str	r2, [r3, #20]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	619a      	str	r2, [r3, #24]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	331c      	adds	r3, #28
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ffcc 	bl	80030fe <_ZN8touchgfx8GesturesC1Ev>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	; 0x44
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3350      	adds	r3, #80	; 0x50
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fe19 	bl	8002de8 <_ZN8touchgfx4RectC1Ev>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	659a      	str	r2, [r3, #88]	; 0x58
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	661a      	str	r2, [r3, #96]	; 0x60
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	671a      	str	r2, [r3, #112]	; 0x70
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8003244:	4a12      	ldr	r2, [pc, #72]	; (8003290 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003246:	8b3b      	ldrh	r3, [r7, #24]
 8003248:	8013      	strh	r3, [r2, #0]
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800324c:	881a      	ldrh	r2, [r3, #0]
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003250:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8003252:	4a11      	ldr	r2, [pc, #68]	; (8003298 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8003254:	8bbb      	ldrh	r3, [r7, #28]
 8003256:	8013      	strh	r3, [r2, #0]
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800325a:	881a      	ldrh	r2, [r3, #0]
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800325e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8003266:	8b3a      	ldrh	r2, [r7, #24]
 8003268:	8bbb      	ldrh	r3, [r7, #28]
 800326a:	429a      	cmp	r2, r3
 800326c:	bf34      	ite	cc
 800326e:	2301      	movcc	r3, #1
 8003270:	2300      	movcs	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	0802c18c 	.word	0x0802c18c
 800328c:	24025d08 	.word	0x24025d08
 8003290:	24025cfc 	.word	0x24025cfc
 8003294:	24025d02 	.word	0x24025d02
 8003298:	24025cfe 	.word	0x24025cfe
 800329c:	24025d04 	.word	0x24025d04
 80032a0:	24025d00 	.word	0x24025d00

080032a4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fe61 	bl	8002f7c <_ZN8touchgfx15UIEventListenerD1Ev>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	0802c644 	.word	0x0802c644

080032c8 <_ZN8touchgfx11ApplicationD0Ev>:
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ffe7 	bl	80032a4 <_ZN8touchgfx11ApplicationD1Ev>
 80032d6:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f024 fa7b 	bl	80277d6 <_ZdlPvj>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f804 	bl	8003300 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00f      	beq.n	8003332 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4610      	mov	r0, r2
 8003326:	4798      	blx	r3
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00e      	beq.n	8003356 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3308      	adds	r3, #8
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4610      	mov	r0, r2
 800334c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	4a05      	ldr	r2, [pc, #20]	; (8003380 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ff97 	bl	80032a4 <_ZN8touchgfx11ApplicationD1Ev>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	0802b0b8 	.word	0x0802b0b8

08003384 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ffe7 	bl	8003360 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003392:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f024 fa1d 	bl	80277d6 <_ZdlPvj>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fb0f 	bl	80039e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ffcb 	bl	8003360 <_ZN8touchgfx14MVPApplicationD1Ev>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	0802b054 	.word	0x0802b054

080033d8 <_ZN23FrontendApplicationBaseD0Ev>:
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ffe1 	bl	80033a8 <_ZN23FrontendApplicationBaseD1Ev>
 80033e6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f024 f9f3 	bl	80277d6 <_ZdlPvj>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f004 fac0 	bl	8007988 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	4a05      	ldr	r2, [pc, #20]	; (8003430 <_ZN19FrontendApplicationD1Ev+0x20>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ffc1 	bl	80033a8 <_ZN23FrontendApplicationBaseD1Ev>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	0802b008 	.word	0x0802b008

08003434 <_ZN19FrontendApplicationD0Ev>:
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ffe7 	bl	8003410 <_ZN19FrontendApplicationD1Ev>
 8003442:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f024 f9c5 	bl	80277d6 <_ZdlPvj>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003464:	4618      	mov	r0, r3
 8003466:	f006 fc75 	bl	8009d54 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4618      	mov	r0, r3
 800346e:	f019 fbe3 	bl	801cc38 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f004 fa7e 	bl	8007988 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	f7ff fce3 	bl	8002e78 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80034b2:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]
    {

    }
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	0802aff4 	.word	0x0802aff4

080034c8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <__tcf_0+0xc>)
 80034ce:	f000 f97d 	bl	80037cc <_ZN12FrontendHeapD1Ev>
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	24005bcc 	.word	0x24005bcc

080034d8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f3bf 8f5b 	dmb	ish
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80034f8:	480b      	ldr	r0, [pc, #44]	; (8003528 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80034fa:	f024 f96e 	bl	80277da <__cxa_guard_acquire>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800350e:	4807      	ldr	r0, [pc, #28]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003510:	f000 f868 	bl	80035e4 <_ZN12FrontendHeapC1Ev>
 8003514:	4804      	ldr	r0, [pc, #16]	; (8003528 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003516:	f024 f96c 	bl	80277f2 <__cxa_guard_release>
 800351a:	4805      	ldr	r0, [pc, #20]	; (8003530 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800351c:	f024 f9a8 	bl	8027870 <atexit>
        return instance;
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8003522:	4618      	mov	r0, r3
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	24005e8c 	.word	0x24005e8c
 800352c:	24005bcc 	.word	0x24005bcc
 8003530:	080034c9 	.word	0x080034c9

08003534 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	4a05      	ldr	r2, [pc, #20]	; (8003554 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fcb7 	bl	8002eb8 <_ZN8touchgfx7MVPHeapD1Ev>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	0802aff4 	.word	0x0802aff4

08003558 <_ZN16FrontendHeapBaseD0Ev>:
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ffe7 	bl	8003534 <_ZN16FrontendHeapBaseD1Ev>
 8003566:	2114      	movs	r1, #20
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f024 f934 	bl	80277d6 <_ZdlPvj>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4618      	mov	r0, r3
 8003584:	f016 fbd0 	bl	8019d28 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003588:	4a03      	ldr	r2, [pc, #12]	; (8003598 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	0802afc0 	.word	0x0802afc0

0800359c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f016 fbbe 	bl	8019d28 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80035ac:	4a03      	ldr	r2, [pc, #12]	; (80035bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	0802af8c 	.word	0x0802af8c

080035c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f016 fbac 	bl	8019d28 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80035d0:	4a03      	ldr	r2, [pc, #12]	; (80035e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	0802af58 	.word	0x0802af58

080035e4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f103 0114 	add.w	r1, r3, #20
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f503 748c 	add.w	r4, r3, #280	; 0x118
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f503 73b2 	add.w	r3, r3, #356	; 0x164
                     app(model, *this)
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	4623      	mov	r3, r4
 800360a:	f7ff ff43 	bl	8003494 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800360e:	4a18      	ldr	r2, [pc, #96]	; (8003670 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3314      	adds	r3, #20
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ffad 	bl	8003578 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	332c      	adds	r3, #44	; 0x2c
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ffba 	bl	800359c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ffc6 	bl	80035c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800363a:	4618      	mov	r0, r3
 800363c:	f006 fb7c 	bl	8009d38 <_ZN5ModelC1Ev>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	4619      	mov	r1, r3
 8003650:	f006 fb5c 	bl	8009d0c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f7ff ff0b 	bl	800347a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bd90      	pop	{r4, r7, pc}
 800366e:	bf00      	nop
 8003670:	0802af44 	.word	0x0802af44

08003674 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	8bbb      	ldrh	r3, [r7, #28]
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	8b3b      	ldrh	r3, [r7, #24]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	f7ff fd47 	bl	8003124 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]
    }
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	0802b24c 	.word	0x0802b24c

080036ac <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>:
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fce8 	bl	800308c <_ZN8touchgfx18MCUInstrumentationC1Ev>
 80036bc:	4a03      	ldr	r2, [pc, #12]	; (80036cc <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev+0x20>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	0802acf4 	.word	0x0802acf4

080036d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	8bbb      	ldrh	r3, [r7, #28]
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	8b3b      	ldrh	r3, [r7, #24]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	f7ff ffc1 	bl	8003674 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80036f2:	4a06      	ldr	r2, [pc, #24]	; (800370c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x3c>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	337c      	adds	r3, #124	; 0x7c
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ffd5 	bl	80036ac <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>
    }
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	0802ad74 	.word	0x0802ad74

08003710 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	4a04      	ldr	r2, [pc, #16]	; (800372c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	0802ad5c 	.word	0x0802ad5c

08003730 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ffe8 	bl	8003710 <_ZN8touchgfx15TouchControllerC1Ev>
 8003740:	4a03      	ldr	r2, [pc, #12]	; (8003750 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	0802ad44 	.word	0x0802ad44

08003754 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b085      	sub	sp, #20
 8003758:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800375a:	f003 fe29 	bl	80073b0 <_ZN14BitmapDatabase11getInstanceEv>
 800375e:	4604      	mov	r4, r0
 8003760:	f003 fe30 	bl	80073c4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003764:	4603      	mov	r3, r0
 8003766:	4619      	mov	r1, r3
 8003768:	2300      	movs	r3, #0
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2300      	movs	r3, #0
 800376e:	2200      	movs	r2, #0
 8003770:	4620      	mov	r0, r4
 8003772:	f01b ff13 	bl	801f59c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003776:	4809      	ldr	r0, [pc, #36]	; (800379c <touchgfx_init+0x48>)
 8003778:	f7ff fb4e 	bl	8002e18 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800377c:	2000      	movs	r0, #0
 800377e:	f006 fa33 	bl	8009be8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003782:	4807      	ldr	r0, [pc, #28]	; (80037a0 <touchgfx_init+0x4c>)
 8003784:	f01b fdc2 	bl	801f30c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003788:	f7ff fea6 	bl	80034d8 <_ZN12FrontendHeap11getInstanceEv>
 800378c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800378e:	4805      	ldr	r0, [pc, #20]	; (80037a4 <touchgfx_init+0x50>)
 8003790:	f7fd faec 	bl	8000d6c <_ZN11TouchGFXHAL10initializeEv>
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bd90      	pop	{r4, r7, pc}
 800379c:	24006c94 	.word	0x24006c94
 80037a0:	24000020 	.word	0x24000020
 80037a4:	24006c98 	.word	0x24006c98

080037a8 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80037bc:	4802      	ldr	r0, [pc, #8]	; (80037c8 <touchgfx_taskEntry+0x10>)
 80037be:	f7fd faf3 	bl	8000da8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	24006c98 	.word	0x24006c98

080037cc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	4a10      	ldr	r2, [pc, #64]	; (8003818 <_ZN12FrontendHeapD1Ev+0x4c>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fe15 	bl	8003410 <_ZN19FrontendApplicationD1Ev>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f827 	bl	8003840 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	332c      	adds	r3, #44	; 0x2c
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f844 	bl	8003884 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3314      	adds	r3, #20
 8003800:	4618      	mov	r0, r3
 8003802:	f000 f861 	bl	80038c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fe93 	bl	8003534 <_ZN16FrontendHeapBaseD1Ev>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	0802af44 	.word	0x0802af44

0800381c <_ZN12FrontendHeapD0Ev>:
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ffd1 	bl	80037cc <_ZN12FrontendHeapD1Ev>
 800382a:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f023 ffd1 	bl	80277d6 <_ZdlPvj>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	4a05      	ldr	r2, [pc, #20]	; (8003860 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4618      	mov	r0, r3
 8003852:	f016 fa68 	bl	8019d26 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	0802af58 	.word	0x0802af58

08003864 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ffe7 	bl	8003840 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003872:	2148      	movs	r1, #72	; 0x48
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f023 ffae 	bl	80277d6 <_ZdlPvj>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4618      	mov	r0, r3
 8003896:	f016 fa46 	bl	8019d26 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	0802af8c 	.word	0x0802af8c

080038a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ffe7 	bl	8003884 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80038b6:	21ec      	movs	r1, #236	; 0xec
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f023 ff8c 	bl	80277d6 <_ZdlPvj>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4618      	mov	r0, r3
 80038da:	f016 fa24 	bl	8019d26 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	0802afc0 	.word	0x0802afc0

080038ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ffe7 	bl	80038c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80038fa:	2118      	movs	r1, #24
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f023 ff6a 	bl	80277d6 <_ZdlPvj>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	4a05      	ldr	r2, [pc, #20]	; (800392c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fb4d 	bl	8002fbc <_ZN8touchgfx3LCDD1Ev>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	0802c958 	.word	0x0802c958

08003930 <_ZN8touchgfx8LCD24bppD0Ev>:
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ffe7 	bl	800390c <_ZN8touchgfx8LCD24bppD1Ev>
 800393e:	2158      	movs	r1, #88	; 0x58
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f023 ff48 	bl	80277d6 <_ZdlPvj>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <_Z41__static_initialization_and_destruction_0ii>:
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af02      	add	r7, sp, #8
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d119      	bne.n	8003994 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003966:	4293      	cmp	r3, r2
 8003968:	d114      	bne.n	8003994 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800396a:	4818      	ldr	r0, [pc, #96]	; (80039cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800396c:	f7ff fee0 	bl	8003730 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003970:	4817      	ldr	r0, [pc, #92]	; (80039d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003972:	f7fe fef1 	bl	8002758 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003976:	4817      	ldr	r0, [pc, #92]	; (80039d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003978:	f01e f858 	bl	8021a2c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800397c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800398c:	4910      	ldr	r1, [pc, #64]	; (80039d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800398e:	4812      	ldr	r0, [pc, #72]	; (80039d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003990:	f7ff fe9e 	bl	80036d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d113      	bne.n	80039c2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d10e      	bne.n	80039c2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80039a4:	480c      	ldr	r0, [pc, #48]	; (80039d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80039a6:	f7fd faeb 	bl	8000f80 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80039aa:	480c      	ldr	r0, [pc, #48]	; (80039dc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80039ac:	f000 f83a 	bl	8003a24 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80039b0:	4808      	ldr	r0, [pc, #32]	; (80039d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80039b2:	f7ff ffab 	bl	800390c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 80039b6:	4806      	ldr	r0, [pc, #24]	; (80039d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80039b8:	f7fe ff08 	bl	80027cc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80039bc:	4803      	ldr	r0, [pc, #12]	; (80039cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80039be:	f7fc fe99 	bl	80006f4 <_ZN20STM32TouchControllerD1Ev>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	24005e90 	.word	0x24005e90
 80039d0:	24005e94 	.word	0x24005e94
 80039d4:	24006c3c 	.word	0x24006c3c
 80039d8:	24006c98 	.word	0x24006c98
 80039dc:	24000020 	.word	0x24000020

080039e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	4a05      	ldr	r2, [pc, #20]	; (8003a00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fb2b 	bl	800304c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	0802b0a0 	.word	0x0802b0a0

08003a04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ffe7 	bl	80039e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003a12:	2110      	movs	r1, #16
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f023 fede 	bl	80277d6 <_ZdlPvj>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff f9ff 	bl	8002e38 <_ZN8touchgfx12FontProviderD1Ev>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	0802b690 	.word	0x0802b690

08003a48 <_ZN23ApplicationFontProviderD0Ev>:
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ffe7 	bl	8003a24 <_ZN23ApplicationFontProviderD1Ev>
 8003a56:	2104      	movs	r1, #4
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f023 febc 	bl	80277d6 <_ZdlPvj>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003a70:	2301      	movs	r3, #1
    }
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003a86:	2340      	movs	r3, #64	; 0x40
    }
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	019b      	lsls	r3, r3, #6
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
    }
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4413      	add	r3, r2
    }
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003ae0:	2301      	movs	r3, #1
    }
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003af6:	23e4      	movs	r3, #228	; 0xe4
    }
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003b10:	887b      	ldrh	r3, [r7, #2]
 8003b12:	22e4      	movs	r2, #228	; 0xe4
 8003b14:	fb02 f303 	mul.w	r3, r2, r3
 8003b18:	3308      	adds	r3, #8
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
    }
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	22e4      	movs	r2, #228	; 0xe4
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	3308      	adds	r3, #8
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
    }
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003b58:	2301      	movs	r3, #1
    }
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003b6e:	2310      	movs	r3, #16
    }
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4413      	add	r3, r2
    }
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	3308      	adds	r3, #8
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4413      	add	r3, r2
    }
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68d2      	ldr	r2, [r2, #12]
 8003bd0:	1052      	asrs	r2, r2, #1
 8003bd2:	1899      	adds	r1, r3, r2
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	e00a      	b.n	8003bfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68d2      	ldr	r2, [r2, #12]
 8003bee:	1052      	asrs	r2, r2, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6892      	ldr	r2, [r2, #8]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4798      	blx	r3
    }
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d107      	bne.n	8003c30 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d001      	beq.n	8003c3a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003c3a:	2300      	movs	r3, #0
    }
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <_GLOBAL__sub_I_touchgfx_init>:
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7ff fe7d 	bl	8003950 <_Z41__static_initialization_and_destruction_0ii>
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <_GLOBAL__sub_D_touchgfx_init>:
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c60:	2000      	movs	r0, #0
 8003c62:	f7ff fe75 	bl	8003950 <_Z41__static_initialization_and_destruction_0ii>
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
        : color(col)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	601a      	str	r2, [r3, #0]
    }
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	4608      	mov	r0, r1
 8003c90:	4611      	mov	r1, r2
 8003c92:	461a      	mov	r2, r3
 8003c94:	4603      	mov	r3, r0
 8003c96:	817b      	strh	r3, [r7, #10]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	813b      	strh	r3, [r7, #8]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	897a      	ldrh	r2, [r7, #10]
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	893a      	ldrh	r2, [r7, #8]
 8003caa:	805a      	strh	r2, [r3, #2]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	809a      	strh	r2, [r3, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8b3a      	ldrh	r2, [r7, #24]
 8003cb6:	80da      	strh	r2, [r3, #6]
    {
    }
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
    {
 8003cd0:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
    }
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	0802c690 	.word	0x0802c690

08003ce8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
    }
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ffe9 	bl	8003cc8 <_ZN8touchgfx8DrawableD1Ev>
 8003cf6:	2128      	movs	r1, #40	; 0x28
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f023 fd6c 	bl	80277d6 <_ZdlPvj>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3314      	adds	r3, #20
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
        }
    }
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003d36:	2300      	movs	r3, #0
    }
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	809a      	strh	r2, [r3, #4]
    }
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	887a      	ldrh	r2, [r7, #2]
 8003d72:	80da      	strh	r2, [r3, #6]
    }
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	811a      	strh	r2, [r3, #8]
    }
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	887a      	ldrh	r2, [r7, #2]
 8003dae:	815a      	strh	r2, [r3, #10]
    }
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
    {
    }
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
    {
    }
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	807b      	strh	r3, [r7, #2]
 8003e66:	4613      	mov	r3, r2
 8003e68:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3354      	adds	r3, #84	; 0x54
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	8879      	ldrh	r1, [r7, #2]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003e7a:	b292      	uxth	r2, r2
 8003e7c:	1a8a      	subs	r2, r1, r2
 8003e7e:	b292      	uxth	r2, r2
 8003e80:	b210      	sxth	r0, r2
 8003e82:	8839      	ldrh	r1, [r7, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	1a8a      	subs	r2, r1, r2
 8003e8e:	b292      	uxth	r2, r2
 8003e90:	b212      	sxth	r2, r2
 8003e92:	4601      	mov	r1, r0
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
    }
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eae:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb6:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ebe:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff ffe1 	bl	8003ea0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	601a      	str	r2, [r3, #0]
    }
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3320      	adds	r3, #32
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
    }
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003f20:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f30:	e002      	b.n	8003f38 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003f32:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
    }
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	24025d08 	.word	0x24025d08

08003f48 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003f70:	3301      	adds	r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	817b      	strh	r3, [r7, #10]
 8003f94:	4613      	mov	r3, r2
 8003f96:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff ff43 	bl	8003e26 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff49 	bl	8003e40 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	601a      	str	r2, [r3, #0]
        }
    }
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	4a05      	ldr	r2, [pc, #20]	; (8003fec <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fe73 	bl	8003cc8 <_ZN8touchgfx8DrawableD1Ev>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	0802b1e4 	.word	0x0802b1e4

08003ff0 <_ZN8touchgfx6WidgetD0Ev>:
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ffe7 	bl	8003fcc <_ZN8touchgfx6WidgetD1Ev>
 8003ffe:	2128      	movs	r1, #40	; 0x28
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f023 fbe8 	bl	80277d6 <_ZdlPvj>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    {
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
    }
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	0802b1a8 	.word	0x0802b1a8

08004030 <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
    }
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ffe9 	bl	8004010 <_ZN8touchgfx15VideoControllerD1Ev>
 800403e:	2104      	movs	r1, #4
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f023 fbc8 	bl	80277d6 <_ZdlPvj>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>:
    void addDMA(touchgfx::DMA_Interface& dma)
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
    {
        pDma = &dma;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	4608      	mov	r0, r1
 8004092:	4611      	mov	r1, r2
 8004094:	461a      	mov	r2, r3
 8004096:	4603      	mov	r3, r0
 8004098:	72fb      	strb	r3, [r7, #11]
 800409a:	460b      	mov	r3, r1
 800409c:	813b      	strh	r3, [r7, #8]
 800409e:	4613      	mov	r3, r2
 80040a0:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	7afa      	ldrb	r2, [r7, #11]
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	893a      	ldrh	r2, [r7, #8]
 80040ae:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <__NVIC_EnableIRQ>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	db0b      	blt.n	80040ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	f003 021f 	and.w	r2, r3, #31
 80040dc:	4907      	ldr	r1, [pc, #28]	; (80040fc <__NVIC_EnableIRQ+0x38>)
 80040de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2001      	movs	r0, #1
 80040e6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	e000e100 	.word	0xe000e100

08004100 <__NVIC_DisableIRQ>:
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800410a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800410e:	2b00      	cmp	r3, #0
 8004110:	db12      	blt.n	8004138 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	f003 021f 	and.w	r2, r3, #31
 8004118:	490a      	ldr	r1, [pc, #40]	; (8004144 <__NVIC_DisableIRQ+0x44>)
 800411a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2001      	movs	r0, #1
 8004122:	fa00 f202 	lsl.w	r2, r0, r2
 8004126:	3320      	adds	r3, #32
 8004128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800412c:	f3bf 8f4f 	dsb	sy
}
 8004130:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004132:	f3bf 8f6f 	isb	sy
}
 8004136:	bf00      	nop
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000e100 	.word	0xe000e100

08004148 <__NVIC_SetPriority>:
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	6039      	str	r1, [r7, #0]
 8004152:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004158:	2b00      	cmp	r3, #0
 800415a:	db0a      	blt.n	8004172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	490c      	ldr	r1, [pc, #48]	; (8004194 <__NVIC_SetPriority+0x4c>)
 8004162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004166:	0112      	lsls	r2, r2, #4
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	440b      	add	r3, r1
 800416c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004170:	e00a      	b.n	8004188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4908      	ldr	r1, [pc, #32]	; (8004198 <__NVIC_SetPriority+0x50>)
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	3b04      	subs	r3, #4
 8004180:	0112      	lsls	r2, r2, #4
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	440b      	add	r3, r1
 8004186:	761a      	strb	r2, [r3, #24]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000e100 	.word	0xe000e100
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800419c:	b5b0      	push	{r4, r5, r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f016 f8b5 	bl	801a316 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80041ac:	687d      	ldr	r5, [r7, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3364      	adds	r3, #100	; 0x64
 80041b4:	681c      	ldr	r4, [r3, #0]
 80041b6:	f018 fc95 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 80041ba:	4603      	mov	r3, r0
 80041bc:	4619      	mov	r1, r3
 80041be:	4628      	mov	r0, r5
 80041c0:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3388      	adds	r3, #136	; 0x88
 80041ca:	681c      	ldr	r4, [r3, #0]
 80041cc:	4a0b      	ldr	r2, [pc, #44]	; (80041fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80041ce:	2300      	movs	r3, #0
 80041d0:	490b      	ldr	r1, [pc, #44]	; (8004200 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 80041d2:	47a0      	blx	r4

    /*
     * Add DMA2D to hardware decoder
     */
    mjpegdecoder1.addDMA(dma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4619      	mov	r1, r3
 80041da:	480a      	ldr	r0, [pc, #40]	; (8004204 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80041dc:	f7ff ff38 	bl	8004050 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>

    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	4908      	ldr	r1, [pc, #32]	; (8004204 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80041e4:	4808      	ldr	r0, [pc, #32]	; (8004208 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 80041e6:	f000 fa45 	bl	8004674 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 80041ea:	4a08      	ldr	r2, [pc, #32]	; (800420c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 80041ec:	4908      	ldr	r1, [pc, #32]	; (8004210 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 80041ee:	4806      	ldr	r0, [pc, #24]	; (8004208 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 80041f0:	f000 fa60 	bl	80046b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bdb0      	pop	{r4, r5, r7, pc}
 80041fc:	2409fa00 	.word	0x2409fa00
 8004200:	24040000 	.word	0x24040000
 8004204:	24006d20 	.word	0x24006d20
 8004208:	24006d68 	.word	0x24006d68
 800420c:	0005fa00 	.word	0x0005fa00
 8004210:	d0000000 	.word	0xd0000000

08004214 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800421c:	2109      	movs	r1, #9
 800421e:	205a      	movs	r0, #90	; 0x5a
 8004220:	f7ff ff92 	bl	8004148 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8004224:	2109      	movs	r1, #9
 8004226:	2058      	movs	r0, #88	; 0x58
 8004228:	f7ff ff8e 	bl	8004148 <__NVIC_SetPriority>
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800423c:	205a      	movs	r0, #90	; 0x5a
 800423e:	f7ff ff41 	bl	80040c4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8004242:	2058      	movs	r0, #88	; 0x58
 8004244:	f7ff ff3e 	bl	80040c4 <__NVIC_EnableIRQ>
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8004258:	205a      	movs	r0, #90	; 0x5a
 800425a:	f7ff ff51 	bl	8004100 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800425e:	2058      	movs	r0, #88	; 0x58
 8004260:	f7ff ff4e 	bl	8004100 <__NVIC_DisableIRQ>
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004286:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800429a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	6353      	str	r3, [r2, #52]	; 0x34
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	50001000 	.word	0x50001000
 80042c0:	24006db2 	.word	0x24006db2
 80042c4:	24006db4 	.word	0x24006db4

080042c8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f016 f806 	bl	801a2e4 <_ZN8touchgfx3HAL10beginFrameEv>
 80042d8:	4603      	mov	r3, r0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4618      	mov	r0, r3
 8004300:	f015 fffc 	bl	801a2fc <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 8004304:	4804      	ldr	r0, [pc, #16]	; (8004318 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 8004306:	f000 f9eb 	bl	80046e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	24006db0 	.word	0x24006db0
 8004318:	24006d68 	.word	0x24006d68

0800431c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	50001084 	.word	0x50001084

08004338 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8004342:	4a06      	ldr	r2, [pc, #24]	; (800435c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800434a:	2201      	movs	r2, #1
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	50001084 	.word	0x50001084
 8004360:	50001000 	.word	0x50001000

08004364 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6839      	ldr	r1, [r7, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f015 ff80 	bl	801a278 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	f016 f8da 	bl	801a54e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800439a:	4603      	mov	r3, r0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80043ac:	4b26      	ldr	r3, [pc, #152]	; (8004448 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d03c      	beq.n	800443c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80043c2:	4b21      	ldr	r3, [pc, #132]	; (8004448 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80043ca:	f3bf 8f4f 	dsb	sy
}
 80043ce:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80043d0:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d6:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	0b5b      	lsrs	r3, r3, #13
 80043dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80043e0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	08db      	lsrs	r3, r3, #3
 80043e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ea:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80043f4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80043fa:	4913      	ldr	r1, [pc, #76]	; (8004448 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1e5a      	subs	r2, r3, #1
 8004406:	60fa      	str	r2, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d000      	beq.n	8004418 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8004416:	e7e9      	b.n	80043ec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1e5a      	subs	r2, r3, #1
 800441c:	613a      	str	r2, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf14      	ite	ne
 8004422:	2301      	movne	r3, #1
 8004424:	2300      	moveq	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d000      	beq.n	800442e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 800442c:	e7d9      	b.n	80043e2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800442e:	f3bf 8f4f 	dsb	sy
}
 8004432:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004434:	f3bf 8f6f 	isb	sy
}
 8004438:	bf00      	nop
}
 800443a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445c:	2b00      	cmp	r3, #0
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d03c      	beq.n	80044e4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800446a:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800446c:	2200      	movs	r2, #0
 800446e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004472:	f3bf 8f4f 	dsb	sy
}
 8004476:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004478:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800447a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800447e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	0b5b      	lsrs	r3, r3, #13
 8004484:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004488:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	08db      	lsrs	r3, r3, #3
 800448e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004492:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800449c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80044a2:	4913      	ldr	r1, [pc, #76]	; (80044f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1e5a      	subs	r2, r3, #1
 80044ae:	60fa      	str	r2, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d000      	beq.n	80044c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 80044be:	e7e9      	b.n	8004494 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1e5a      	subs	r2, r3, #1
 80044c4:	613a      	str	r2, [r7, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf14      	ite	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	2300      	moveq	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d000      	beq.n	80044d6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 80044d4:	e7d9      	b.n	800448a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80044d6:	f3bf 8f4f 	dsb	sy
}
 80044da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044dc:	f3bf 8f6f 	isb	sy
}
 80044e0:	bf00      	nop
}
 80044e2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	e000ed00 	.word	0xe000ed00

080044f4 <videoTaskFunc>:

extern "C" void videoTaskFunc(void* argument)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
    videoController.decoderTaskEntry();
 80044fc:	4803      	ldr	r0, [pc, #12]	; (800450c <videoTaskFunc+0x18>)
 80044fe:	f000 f934 	bl	800476a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	24006d68 	.word	0x24006d68

08004510 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8004518:	f7fc fa88 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d132      	bne.n	8004592 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <HAL_LTDC_LineEventCallback+0x8c>)
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <HAL_LTDC_LineEventCallback+0x90>)
 8004532:	8812      	ldrh	r2, [r2, #0]
 8004534:	4293      	cmp	r3, r2
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d017      	beq.n	8004572 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8004542:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <HAL_LTDC_LineEventCallback+0x94>)
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	4619      	mov	r1, r3
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f00c fad9 	bl	8010b00 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800454e:	f7fc fa6d 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004552:	4603      	mov	r3, r0
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fd04 	bl	8003f62 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800455a:	f7fd ff03 	bl	8002364 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800455e:	f7fc fa65 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004562:	4603      	mov	r3, r0
 8004564:	4618      	mov	r0, r3
 8004566:	f016 fc1d 	bl	801ada4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800456a:	2000      	movs	r0, #0
 800456c:	f7fc f90a 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8004570:	e010      	b.n	8004594 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_LTDC_LineEventCallback+0x90>)
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f00c fac1 	bl	8010b00 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 800457e:	f7fc fa55 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004582:	4603      	mov	r3, r0
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fcb5 	bl	8003ef4 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800458a:	2000      	movs	r0, #0
 800458c:	f7fc f958 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8004590:	e000      	b.n	8004594 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8004592:	bf00      	nop
        }
    }
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	50001000 	.word	0x50001000
 80045a0:	24006db2 	.word	0x24006db2
 80045a4:	24006db4 	.word	0x24006db4

080045a8 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	0802b1a8 	.word	0x0802b1a8

080045c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 80045c8:	b5b0      	push	{r4, r5, r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ffe8 	bl	80045a8 <_ZN8touchgfx15VideoControllerC1Ev>
 80045d8:	4a25      	ldr	r2, [pc, #148]	; (8004670 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0xa8>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	330c      	adds	r3, #12
 80045e2:	2400      	movs	r4, #0
 80045e4:	461d      	mov	r5, r3
 80045e6:	2c00      	cmp	r4, #0
 80045e8:	db05      	blt.n	80045f6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x2e>
 80045ea:	4628      	mov	r0, r5
 80045ec:	f000 f971 	bl	80048d2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 80045f0:	3524      	adds	r5, #36	; 0x24
 80045f2:	3c01      	subs	r4, #1
 80045f4:	e7f7      	b.n	80045e6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x1e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	635a      	str	r2, [r3, #52]	; 0x34
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	641a      	str	r2, [r3, #64]	; 0x40
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3308      	adds	r3, #8
 8004630:	2204      	movs	r2, #4
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f023 f98d 	bl	8027954 <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	2204      	movs	r2, #4
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f023 f986 	bl	8027954 <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8004648:	2200      	movs	r2, #0
 800464a:	2100      	movs	r1, #0
 800464c:	2001      	movs	r0, #1
 800464e:	f011 fa36 	bl	8015abe <osSemaphoreNew>
 8004652:	4602      	mov	r2, r0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8004658:	2000      	movs	r0, #0
 800465a:	f011 f922 	bl	80158a2 <osMutexNew>
 800465e:	4602      	mov	r2, r0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bdb0      	pop	{r4, r5, r7, pc}
 800466e:	bf00      	nop
 8004670:	0802b168 	.word	0x0802b168

08004674 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d006      	beq.n	8004694 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x20>
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x34>)
 8004688:	4a08      	ldr	r2, [pc, #32]	; (80046ac <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x38>)
 800468a:	f240 1103 	movw	r1, #259	; 0x103
 800468e:	4808      	ldr	r0, [pc, #32]	; (80046b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x3c>)
 8004690:	f023 f8d0 	bl	8027834 <__assert_func>
        mjpegDecoders[index] = &decoder;
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	605a      	str	r2, [r3, #4]
    }
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	08029304 	.word	0x08029304
 80046ac:	08029318 	.word	0x08029318
 80046b0:	08029480 	.word	0x08029480

080046b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>:

    void endFrame()
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d120      	bne.n	8004734 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4613      	mov	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	3308      	adds	r3, #8
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	3304      	adds	r3, #4
 8004704:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	7f5b      	ldrb	r3, [r3, #29]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x36>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	7f9b      	ldrb	r3, [r3, #30]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f912 	bl	8004942 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	e7db      	b.n	80046ec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	4618      	mov	r0, r3
 8004742:	f011 fa97 	bl	8015c74 <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	4618      	mov	r0, r3
 8004756:	f011 f975 	bl	8015a44 <osMutexRelease>
            uiHasMutex = false;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:

    void decoderTaskEntry()
 800476a:	b590      	push	{r4, r7, lr}
 800476c:	b08b      	sub	sp, #44	; 0x2c
 800476e:	af02      	add	r7, sp, #8
 8004770:	6078      	str	r0, [r7, #4]
        // Running in Decoder thread!!

        while (1)
        {
            // Wait for synchronisation signal from UI thread
            SEM_WAIT(semDecode);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f04f 31ff 	mov.w	r1, #4294967295
 800477a:	4618      	mov	r0, r3
 800477c:	f011 fa28 	bl	8015bd0 <osSemaphoreAcquire>

            // Lock out the UI by taking the mutex
            MUTEX_LOCK(mutexBuffers);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	f04f 31ff 	mov.w	r1, #4294967295
 8004788:	4618      	mov	r0, r3
 800478a:	f011 f910 	bl	80159ae <osMutexAcquire>

            // Update stream flags
            for (uint32_t i = 0; i < no_streams; i++)
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d115      	bne.n	80047c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5a>
            {
                Stream& stream = streams[i];
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	4613      	mov	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	3308      	adds	r3, #8
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	4413      	add	r3, r2
 80047a8:	3304      	adds	r3, #4
 80047aa:	617b      	str	r3, [r7, #20]
                if (stream.doDecode)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x52>
                {
                    stream.doInvalidateOnNextTick = true;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2201      	movs	r2, #1
 80047ba:	77da      	strb	r2, [r3, #31]
            for (uint32_t i = 0; i < no_streams; i++)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	e7e6      	b.n	8004792 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x28>
                }
            }

            // Now decode all streams marked for invalidation in next tick
            for (uint32_t i = 0; i < no_streams; i++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d17b      	bne.n	80048c6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x15c>
            {
                Stream& stream = streams[i];
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	3308      	adds	r3, #8
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	3304      	adds	r3, #4
 80047e0:	613b      	str	r3, [r7, #16]
                if (stream.doDecode)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d068      	beq.n	80048be <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x154>
                {
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	60fb      	str	r3, [r7, #12]
                    // Seek or increment video frame
                    if (stream.seek_to_frame > 0)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xb0>
                    {
                        decoder->gotoFrame(stream.seek_to_frame);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3324      	adds	r3, #36	; 0x24
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	6952      	ldr	r2, [r2, #20]
 800480c:	4611      	mov	r1, r2
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2200      	movs	r2, #0
 8004816:	615a      	str	r2, [r3, #20]
 8004818:	e01e      	b.n	8004858 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                    }
                    else
                    {
                        if (stream.skip_frames > 0)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01a      	beq.n	8004858 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                        {
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3324      	adds	r3, #36	; 0x24
 8004828:	681c      	ldr	r4, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3328      	adds	r3, #40	; 0x28
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	4798      	blx	r3
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	4413      	add	r3, r2
 800483e:	4619      	mov	r1, r3
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	47a0      	blx	r4
                            stream.frameCount += stream.skip_frames;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	441a      	add	r2, r3
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	605a      	str	r2, [r3, #4]
                            stream.skip_frames = 0;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2200      	movs	r2, #0
 8004856:	619a      	str	r2, [r3, #24]
                        }
                    }

                    // Decode frame
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3314      	adds	r3, #20
 800485e:	681c      	ldr	r4, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	3202      	adds	r2, #2
 8004866:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800486a:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004874:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	47a0      	blx	r4
 800487c:	4603      	mov	r3, r0
 800487e:	461a      	mov	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f883 2020 	strb.w	r2, [r3, #32]
                    stream.frameCount++;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	605a      	str	r2, [r3, #4]

                    // Update frame number
                    if (stream.hasMoreFrames)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x146>
                    {
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3328      	adds	r3, #40	; 0x28
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	4798      	blx	r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	1e5a      	subs	r2, r3, #1
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e002      	b.n	80048b6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x14c>
                    }
                    else
                    {
                        stream.frameNumber = 1;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
                    }
                    stream.doDecode = false;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            for (uint32_t i = 0; i < no_streams; i++)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	3301      	adds	r3, #1
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	e780      	b.n	80047c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5e>
                }
            }

            // Release the stream and decode buffer and let UI continue
            MUTEX_UNLOCK(mutexBuffers);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	4618      	mov	r0, r3
 80048cc:	f011 f8ba 	bl	8015a44 <osMutexRelease>
        while (1)
 80048d0:	e74f      	b.n	8004772 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x8>

080048d2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
            seek_to_frame(0), skip_frames(0),
            isActive(false), isPlaying(false), isShowingOneFrame(false),
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	611a      	str	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	615a      	str	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	619a      	str	r2, [r3, #24]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	771a      	strb	r2, [r3, #28]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	775a      	strb	r2, [r3, #29]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	779a      	strb	r2, [r3, #30]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	77da      	strb	r2, [r3, #31]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2020 	strb.w	r2, [r3, #32]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	68d2      	ldr	r2, [r2, #12]
 8004954:	fb02 f203 	mul.w	r2, r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	6849      	ldr	r1, [r1, #4]
 8004960:	fb01 f303 	mul.w	r3, r1, r3
 8004964:	429a      	cmp	r2, r3
 8004966:	d322      	bcc.n	80049ae <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01b      	beq.n	80049aa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	68d2      	ldr	r2, [r2, #12]
 800497a:	fb02 f203 	mul.w	r2, r2, r3
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	6839      	ldr	r1, [r7, #0]
 8004984:	6849      	ldr	r1, [r1, #4]
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	fbb2 f2f3 	udiv	r2, r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	1e5a      	subs	r2, r3, #1
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 80049ae:	2300      	movs	r3, #0
    }
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	4a05      	ldr	r2, [pc, #20]	; (80049dc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev+0x20>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fb1f 	bl	8004010 <_ZN8touchgfx15VideoControllerD1Ev>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	0802b168 	.word	0x0802b168

080049e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ffe7 	bl	80049bc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
 80049ee:	2148      	movs	r1, #72	; 0x48
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f022 fef0 	bl	80277d6 <_ZdlPvj>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d10a      	bne.n	8004a26 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d105      	bne.n	8004a26 <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 8004a1a:	480c      	ldr	r0, [pc, #48]	; (8004a4c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004a1c:	f7fc fb22 	bl	8001064 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 480, 272, 480 * 3U, Bitmap::RGB888> videoController;
 8004a20:	480b      	ldr	r0, [pc, #44]	; (8004a50 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004a22:	f7ff fdd1 	bl	80045c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d105      	bne.n	8004a42 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004a36:	4806      	ldr	r0, [pc, #24]	; (8004a50 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004a38:	f7ff ffc0 	bl	80049bc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8004a3c:	4803      	ldr	r0, [pc, #12]	; (8004a4c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004a3e:	f7fd fbeb 	bl	8002218 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	24006d20 	.word	0x24006d20
 8004a50:	24006d68 	.word	0x24006d68

08004a54 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 8004a5e:	4b1f      	ldr	r3, [pc, #124]	; (8004adc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004a60:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa82 	bl	8004f6c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>
 8004a68:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	3328      	adds	r3, #40	; 0x28
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004a84:	4413      	add	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a8e:	440a      	add	r2, r1
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d905      	bls.n	8004aa0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4c>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8004a94:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 8004a96:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 8004a98:	2152      	movs	r1, #82	; 0x52
 8004a9a:	4813      	ldr	r0, [pc, #76]	; (8004ae8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x94>)
 8004a9c:	f022 feca 	bl	8027834 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	3202      	adds	r2, #2
 8004aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004ab4:	4413      	add	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6393      	str	r3, [r2, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8004aba:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004abe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	6838      	ldr	r0, [r7, #0]
 8004ac6:	f7ff fadf 	bl	8004088 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8004aca:	2100      	movs	r1, #0
 8004acc:	6838      	ldr	r0, [r7, #0]
 8004ace:	f7ff facd 	bl	800406c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
    }
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	0005fa00 	.word	0x0005fa00
 8004ae0:	080294c4 	.word	0x080294c4
 8004ae4:	08029500 	.word	0x08029500
 8004ae8:	08029480 	.word	0x08029480

08004aec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	f04f 31ff 	mov.w	r1, #4294967295
 8004afe:	4618      	mov	r0, r3
 8004b00:	f010 ff55 	bl	80159ae <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f010 ff9b 	bl	8015a44 <osMutexRelease>
        streams[handle].isActive = false;
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	3328      	adds	r3, #40	; 0x28
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8004b26:	2300      	movs	r3, #0
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d114      	bne.n	8004b5a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	4613      	mov	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3328      	adds	r3, #40	; 0x28
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	3301      	adds	r3, #1
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	e7e7      	b.n	8004b2a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x54>)
 8004b86:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x58>)
 8004b88:	2182      	movs	r1, #130	; 0x82
 8004b8a:	4810      	ldr	r0, [pc, #64]	; (8004bcc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x5c>)
 8004b8c:	f022 fe52 	bl	8027834 <__assert_func>
        Stream& stream = streams[handle];
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	60da      	str	r2, [r3, #12]
    }
 8004bbc:	bf00      	nop
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	080296a4 	.word	0x080296a4
 8004bc8:	080296b8 	.word	0x080296b8
 8004bcc:	08029480 	.word	0x08029480

08004bd0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8004be2:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8004be4:	4a29      	ldr	r2, [pc, #164]	; (8004c8c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 8004be6:	21d0      	movs	r1, #208	; 0xd0
 8004be8:	4829      	ldr	r0, [pc, #164]	; (8004c90 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8004bea:	f022 fe23 	bl	8027834 <__assert_func>
        Stream& stream = streams[handle];
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3304      	adds	r3, #4
 8004c00:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	7f5b      	ldrb	r3, [r3, #29]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00b      	beq.n	8004c22 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8004c0a:	f7fb ff0f 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff f999 	bl	8003f48 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 8004c16:	4602      	mov	r2, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	441a      	add	r2, r3
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	7fdb      	ldrb	r3, [r3, #31]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d029      	beq.n	8004c7e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	3202      	adds	r2, #2
 8004c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff fa18 	bl	800406c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4610      	mov	r0, r2
 8004c48:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c56:	f083 0301 	eor.w	r3, r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c66:	f083 0301 	eor.w	r3, r3, #1
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2200      	movs	r2, #0
 8004c74:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c7c:	e000      	b.n	8004c80 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 8004c7e:	2301      	movs	r3, #1
    }
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	080296a4 	.word	0x080296a4
 8004c8c:	08029874 	.word	0x08029874
 8004c90:	08029480 	.word	0x08029480

08004c94 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00e      	beq.n	8004cca <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f010 fe7a 	bl	80159ae <osMutexAcquire>
            firstDrawThisFrame = false;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x20>
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x64>)
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x68>)
 8004cec:	2190      	movs	r1, #144	; 0x90
 8004cee:	4814      	ldr	r0, [pc, #80]	; (8004d40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x6c>)
 8004cf0:	f022 fda0 	bl	8027834 <__assert_func>
        Stream& stream = streams[handle];
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	3308      	adds	r3, #8
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	3304      	adds	r3, #4
 8004d06:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	6858      	ldr	r0, [r3, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3308      	adds	r3, #8
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4798      	blx	r3
    }
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	080296a4 	.word	0x080296a4
 8004d3c:	08029a18 	.word	0x08029a18
 8004d40:	08029480 	.word	0x08029480

08004d44 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	6858      	ldr	r0, [r3, #4]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	330c      	adds	r3, #12
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4798      	blx	r3
    }
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 8004d8e:	4b3a      	ldr	r3, [pc, #232]	; (8004e78 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8004d90:	4a3a      	ldr	r2, [pc, #232]	; (8004e7c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8004d92:	21a2      	movs	r1, #162	; 0xa2
 8004d94:	483a      	ldr	r0, [pc, #232]	; (8004e80 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8004d96:	f022 fd4d 	bl	8027834 <__assert_func>
        Stream& stream = streams[handle];
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	3308      	adds	r3, #8
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	3304      	adds	r3, #4
 8004dac:	617b      	str	r3, [r7, #20]
        switch (cmd)
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d85c      	bhi.n	8004e6e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004dd5 	.word	0x08004dd5
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004e4b 	.word	0x08004e4b
 8004dd0:	08004e59 	.word	0x08004e59
            if (mjpegDecoders[handle]->hasVideo())
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	6859      	ldr	r1, [r3, #4]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3310      	adds	r3, #16
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4608      	mov	r0, r1
 8004df0:	4798      	blx	r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d039      	beq.n	8004e6c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
            break;
 8004e12:	e02b      	b.n	8004e6c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2200      	movs	r2, #0
 8004e18:	775a      	strb	r2, [r3, #29]
            break;
 8004e1a:	e028      	b.n	8004e6e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	609a      	str	r2, [r3, #8]
            break;
 8004e2e:	e01e      	b.n	8004e6e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2200      	movs	r2, #0
 8004e46:	609a      	str	r2, [r3, #8]
            break;
 8004e48:	e011      	b.n	8004e6e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2201      	movs	r2, #1
 8004e54:	615a      	str	r2, [r3, #20]
            break;
 8004e56:	e00a      	b.n	8004e6e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bf14      	ite	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	2300      	moveq	r3, #0
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8004e6a:	e000      	b.n	8004e6e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 8004e6c:	bf00      	nop
    }
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	080296a4 	.word	0x080296a4
 8004e7c:	08029bf4 	.word	0x08029bf4
 8004e80:	08029480 	.word	0x08029480

08004e84 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>
 8004e94:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x3c>)
 8004e96:	4a0b      	ldr	r2, [pc, #44]	; (8004ec4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x40>)
 8004e98:	2179      	movs	r1, #121	; 0x79
 8004e9a:	480b      	ldr	r0, [pc, #44]	; (8004ec8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x44>)
 8004e9c:	f022 fcca 	bl	8027834 <__assert_func>
        const Stream& stream = streams[handle];
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	3308      	adds	r3, #8
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	4413      	add	r3, r2
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
    }
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	080296a4 	.word	0x080296a4
 8004ec4:	08029dc8 	.word	0x08029dc8
 8004ec8:	08029480 	.word	0x08029480

08004ecc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d006      	beq.n	8004eec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8004ee0:	4a0d      	ldr	r2, [pc, #52]	; (8004f18 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8004ee2:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8004ee6:	480d      	ldr	r0, [pc, #52]	; (8004f1c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 8004ee8:	f022 fca4 	bl	8027834 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	6858      	ldr	r0, [r3, #4]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3330      	adds	r3, #48	; 0x30
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4798      	blx	r3
    }
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	080296a4 	.word	0x080296a4
 8004f18:	08029f80 	.word	0x08029f80
 8004f1c:	08029480 	.word	0x08029480

08004f20 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d006      	beq.n	8004f3e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1e>
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x40>)
 8004f32:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x44>)
 8004f34:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8004f38:	480b      	ldr	r0, [pc, #44]	; (8004f68 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x48>)
 8004f3a:	f022 fc7b 	bl	8027834 <__assert_func>
        Stream& stream = streams[handle];
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	3308      	adds	r3, #8
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3304      	adds	r3, #4
 8004f50:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	7f5b      	ldrb	r3, [r3, #29]
    }
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	080296a4 	.word	0x080296a4
 8004f64:	0802a130 	.word	0x0802a130
 8004f68:	08029480 	.word	0x08029480

08004f6c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>:

    Handle getFreeHandle()
 8004f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6e:	b08d      	sub	sp, #52	; 0x34
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d135      	bne.n	8004fea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f82:	4613      	mov	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3328      	adds	r3, #40	; 0x28
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d126      	bne.n	8004fe2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8004f94:	f107 0308 	add.w	r3, r7, #8
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fc9a 	bl	80048d2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 8004f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	3308      	adds	r3, #8
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	3304      	adds	r3, #4
 8004fb0:	f107 0408 	add.w	r4, r7, #8
 8004fb4:	469c      	mov	ip, r3
 8004fb6:	f104 0e20 	add.w	lr, r4, #32
 8004fba:	4665      	mov	r5, ip
 8004fbc:	4626      	mov	r6, r4
 8004fbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004fc0:	6028      	str	r0, [r5, #0]
 8004fc2:	6069      	str	r1, [r5, #4]
 8004fc4:	60aa      	str	r2, [r5, #8]
 8004fc6:	60eb      	str	r3, [r5, #12]
 8004fc8:	3410      	adds	r4, #16
 8004fca:	f10c 0c10 	add.w	ip, ip, #16
 8004fce:	4574      	cmp	r4, lr
 8004fd0:	d1f3      	bne.n	8004fba <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x4e>
 8004fd2:	4663      	mov	r3, ip
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	8811      	ldrh	r1, [r2, #0]
 8004fd8:	7892      	ldrb	r2, [r2, #2]
 8004fda:	8019      	strh	r1, [r3, #0]
 8004fdc:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	e00a      	b.n	8004ff8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe8:	e7c6      	b.n	8004f78 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8004fea:	4b05      	ldr	r3, [pc, #20]	; (8005000 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x94>)
 8004fec:	4a05      	ldr	r2, [pc, #20]	; (8005004 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x98>)
 8004fee:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004ff2:	4805      	ldr	r0, [pc, #20]	; (8005008 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x9c>)
 8004ff4:	f022 fc1e 	bl	8027834 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3734      	adds	r7, #52	; 0x34
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005000:	0802a2bc 	.word	0x0802a2bc
 8005004:	0802a2ec 	.word	0x0802a2ec
 8005008:	08029480 	.word	0x08029480

0800500c <_GLOBAL__sub_I_mjpegdecoder1>:
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
 8005010:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005014:	2001      	movs	r0, #1
 8005016:	f7ff fcf3 	bl	8004a00 <_Z41__static_initialization_and_destruction_0ii>
 800501a:	bd80      	pop	{r7, pc}

0800501c <_GLOBAL__sub_D_mjpegdecoder1>:
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
 8005020:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005024:	2000      	movs	r0, #0
 8005026:	f7ff fceb 	bl	8004a00 <_Z41__static_initialization_and_destruction_0ii>
 800502a:	bd80      	pop	{r7, pc}

0800502c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800502c:	b480      	push	{r7}
 800502e:	b097      	sub	sp, #92	; 0x5c
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	4a9e      	ldr	r2, [pc, #632]	; (80052b8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 800504a:	e127      	b.n	800529c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x270>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800504c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504e:	011a      	lsls	r2, r3, #4
 8005050:	4b9a      	ldr	r3, [pc, #616]	; (80052bc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	fbb2 f3f3 	udiv	r3, r2, r3
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800505c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	4a96      	ldr	r2, [pc, #600]	; (80052bc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005062:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005064:	fbb3 f1f2 	udiv	r1, r3, r2
 8005068:	fb02 f201 	mul.w	r2, r2, r1
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28

    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 3;
 8005070:	4b92      	ldr	r3, [pc, #584]	; (80052bc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005072:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8005076:	629a      	str	r2, [r3, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005078:	4b90      	ldr	r3, [pc, #576]	; (80052bc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800507e:	fb02 f103 	mul.w	r1, r2, r3
 8005082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005084:	4613      	mov	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4413      	add	r3, r2
 800508a:	440b      	add	r3, r1
 800508c:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 800508e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005090:	3301      	adds	r3, #1
 8005092:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800509a:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  16; i+=2)
 80050a0:	2300      	movs	r3, #0
 80050a2:	657b      	str	r3, [r7, #84]	; 0x54
 80050a4:	e0f2      	b.n	800528c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x260>
    {
      if(i == 8)
 80050a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d102      	bne.n	80050b2 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
      {
        pLum = pInBuffer + 128;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3380      	adds	r3, #128	; 0x80
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 272)
 80050b2:	4b82      	ldr	r3, [pc, #520]	; (80052bc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80050b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050b6:	4613      	mov	r3, r2
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	4413      	add	r3, r2
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	461a      	mov	r2, r3
 80050c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c2:	4293      	cmp	r3, r2
 80050c4:	f080 80df 	bcs.w	8005286 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25a>
      {
        pOutAddr = pOutBuffer + refline;
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050cc:	4413      	add	r3, r2
 80050ce:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80050d0:	4b7a      	ldr	r3, [pc, #488]	; (80052bc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050d6:	4413      	add	r3, r2
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(k= 0; k<2; k++)
 80050da:	2300      	movs	r3, #0
 80050dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050de:	e0c5      	b.n	800526c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x240>
        {
          for(j=0; j < 8; j+=2)
 80050e0:	2300      	movs	r3, #0
 80050e2:	653b      	str	r3, [r7, #80]	; 0x50
 80050e4:	e0b8      	b.n	8005258 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22c>
          {
            cbcomp = (int32_t)(*(pChrom));
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4a73      	ldr	r2, [pc, #460]	; (80052c0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80050f2:	4413      	add	r3, r2
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	3340      	adds	r3, #64	; 0x40
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4a6f      	ldr	r2, [pc, #444]	; (80052c4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x298>)
 8005106:	4413      	add	r3, r2
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4a6d      	ldr	r2, [pc, #436]	; (80052c8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>)
 8005112:	4413      	add	r3, r2
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	496c      	ldr	r1, [pc, #432]	; (80052cc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a0>)
 800511c:	440b      	add	r3, r1
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4413      	add	r3, r2
 8005122:	141b      	asrs	r3, r3, #16
 8005124:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 8005126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800512a:	4413      	add	r3, r2
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	4413      	add	r3, r2
 8005136:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800513a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513c:	3302      	adds	r3, #2
 800513e:	4964      	ldr	r1, [pc, #400]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005140:	5c8a      	ldrb	r2, [r1, r2]
 8005142:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800514e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005150:	3301      	adds	r3, #1
 8005152:	495f      	ldr	r1, [pc, #380]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005154:	5c8a      	ldrb	r2, [r1, r2]
 8005156:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	4413      	add	r3, r2
 800515e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005162:	4a5b      	ldr	r2, [pc, #364]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005164:	5cd2      	ldrb	r2, [r2, r3]
 8005166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005168:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 800516a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516c:	3301      	adds	r3, #1
 800516e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005170:	4413      	add	r3, r2
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	4413      	add	r3, r2
 800517c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005182:	3305      	adds	r3, #5
 8005184:	4952      	ldr	r1, [pc, #328]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005186:	5c8a      	ldrb	r2, [r1, r2]
 8005188:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	4413      	add	r3, r2
 8005190:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005196:	3304      	adds	r3, #4
 8005198:	494d      	ldr	r1, [pc, #308]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800519a:	5c8a      	ldrb	r2, [r1, r2]
 800519c:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051aa:	3303      	adds	r3, #3
 80051ac:	4948      	ldr	r1, [pc, #288]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051ae:	5c8a      	ldrb	r2, [r1, r2]
 80051b0:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 80051b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b4:	3308      	adds	r3, #8
 80051b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051b8:	4413      	add	r3, r2
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ca:	3302      	adds	r3, #2
 80051cc:	4940      	ldr	r1, [pc, #256]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051ce:	5c8a      	ldrb	r2, [r1, r2]
 80051d0:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051de:	3301      	adds	r3, #1
 80051e0:	493b      	ldr	r1, [pc, #236]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051e2:	5c8a      	ldrb	r2, [r1, r2]
 80051e4:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80051f0:	4a37      	ldr	r2, [pc, #220]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051f2:	5cd2      	ldrb	r2, [r2, r3]
 80051f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f6:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 80051f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fa:	3309      	adds	r3, #9
 80051fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051fe:	4413      	add	r3, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	613b      	str	r3, [r7, #16]

            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	4413      	add	r3, r2
 800520a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800520e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005210:	3305      	adds	r3, #5
 8005212:	492f      	ldr	r1, [pc, #188]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005214:	5c8a      	ldrb	r2, [r1, r2]
 8005216:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4413      	add	r3, r2
 800521e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005224:	3304      	adds	r3, #4
 8005226:	492a      	ldr	r1, [pc, #168]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005228:	5c8a      	ldrb	r2, [r1, r2]
 800522a:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	4413      	add	r3, r2
 8005232:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005238:	3303      	adds	r3, #3
 800523a:	4925      	ldr	r1, [pc, #148]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800523c:	5c8a      	ldrb	r2, [r1, r2]
 800523e:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8005240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005242:	3306      	adds	r3, #6
 8005244:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8005246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005248:	3306      	adds	r3, #6
 800524a:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	3301      	adds	r3, #1
 8005250:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8005252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005254:	3302      	adds	r3, #2
 8005256:	653b      	str	r3, [r7, #80]	; 0x50
 8005258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525a:	2b07      	cmp	r3, #7
 800525c:	f67f af43 	bls.w	80050e6 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xba>
          }
          pLum += 64;
 8005260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005262:	3340      	adds	r3, #64	; 0x40
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 8005266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005268:	3301      	adds	r3, #1
 800526a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800526c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526e:	2b01      	cmp	r3, #1
 8005270:	f67f af36 	bls.w	80050e0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb4>
        }

        pLum = pLum - 128 + 16;
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005276:	3b70      	subs	r3, #112	; 0x70
 8005278:	637b      	str	r3, [r7, #52]	; 0x34

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 800527a:	4b10      	ldr	r3, [pc, #64]	; (80052bc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005282:	4413      	add	r3, r2
 8005284:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 8005286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005288:	3302      	adds	r3, #2
 800528a:	657b      	str	r3, [r7, #84]	; 0x54
 800528c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528e:	2b0f      	cmp	r3, #15
 8005290:	f67f af09 	bls.w	80050a6 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800529a:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800529c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4413      	add	r3, r2
 80052a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a4:	429a      	cmp	r2, r3
 80052a6:	f4ff aed1 	bcc.w	800504c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	375c      	adds	r7, #92	; 0x5c
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	aaaaaaab 	.word	0xaaaaaaab
 80052bc:	24006db8 	.word	0x24006db8
 80052c0:	240071f8 	.word	0x240071f8
 80052c4:	24006df8 	.word	0x24006df8
 80052c8:	240075f8 	.word	0x240075f8
 80052cc:	240079f8 	.word	0x240079f8
 80052d0:	0802b31c 	.word	0x0802b31c

080052d4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b097      	sub	sp, #92	; 0x5c
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	0a1b      	lsrs	r3, r3, #8
 80052e6:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 80052ec:	e0c5      	b.n	800547a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80052ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f0:	011a      	lsls	r2, r3, #4
 80052f2:	4b69      	ldr	r3, [pc, #420]	; (8005498 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	633b      	str	r3, [r7, #48]	; 0x30

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80052fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	4a65      	ldr	r2, [pc, #404]	; (8005498 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005306:	fbb3 f1f2 	udiv	r1, r3, r2
 800530a:	fb02 f201 	mul.w	r2, r2, r1
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	62fb      	str	r3, [r7, #44]	; 0x2c

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005312:	4b61      	ldr	r3, [pc, #388]	; (8005498 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005318:	fb02 f103 	mul.w	r1, r2, r3
 800531c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800531e:	4613      	mov	r3, r2
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	4413      	add	r3, r2
 8005324:	440b      	add	r3, r1
 8005326:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8005328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532a:	3301      	adds	r3, #1
 800532c:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3380      	adds	r3, #128	; 0x80
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c

    pLum = pInBuffer;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	63bb      	str	r3, [r7, #56]	; 0x38

    for(i= 0; i <  8; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	657b      	str	r3, [r7, #84]	; 0x54
 800533c:	e095      	b.n	800546a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800533e:	4b56      	ldr	r3, [pc, #344]	; (8005498 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005344:	429a      	cmp	r2, r3
 8005346:	f080 808d 	bcs.w	8005464 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800534e:	4413      	add	r3, r2
 8005350:	643b      	str	r3, [r7, #64]	; 0x40

        for(k= 0; k<2; k++)
 8005352:	2300      	movs	r3, #0
 8005354:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005356:	e07a      	b.n	800544e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 8005358:	2300      	movs	r3, #0
 800535a:	653b      	str	r3, [r7, #80]	; 0x50
 800535c:	e06e      	b.n	800543c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {
            cbcomp = (int32_t)(*(pChrom));
 800535e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4a4c      	ldr	r2, [pc, #304]	; (800549c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 800536a:	4413      	add	r3, r2
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	627b      	str	r3, [r7, #36]	; 0x24

            crcomp = (int32_t)(*(pChrom + 64));
 8005370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005372:	3340      	adds	r3, #64	; 0x40
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4a48      	ldr	r2, [pc, #288]	; (80054a0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 800537e:	4413      	add	r3, r2
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	61fb      	str	r3, [r7, #28]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4a46      	ldr	r2, [pc, #280]	; (80054a4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 800538a:	4413      	add	r3, r2
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4945      	ldr	r1, [pc, #276]	; (80054a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 8005394:	440b      	add	r3, r1
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4413      	add	r3, r2
 800539a:	141b      	asrs	r3, r3, #16
 800539c:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 800539e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a2:	4413      	add	r3, r2
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	617b      	str	r3, [r7, #20]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b4:	3302      	adds	r3, #2
 80053b6:	493d      	ldr	r1, [pc, #244]	; (80054ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053b8:	5c8a      	ldrb	r2, [r1, r2]
 80053ba:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c8:	3301      	adds	r3, #1
 80053ca:	4938      	ldr	r1, [pc, #224]	; (80054ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053cc:	5c8a      	ldrb	r2, [r1, r2]
 80053ce:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053da:	4a34      	ldr	r2, [pc, #208]	; (80054ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053dc:	5cd2      	ldrb	r2, [r2, r3]
 80053de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e0:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80053e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e4:	3301      	adds	r3, #1
 80053e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e8:	4413      	add	r3, r2
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fa:	3305      	adds	r3, #5
 80053fc:	492b      	ldr	r1, [pc, #172]	; (80054ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053fe:	5c8a      	ldrb	r2, [r1, r2]
 8005400:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	4413      	add	r3, r2
 8005408:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800540c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800540e:	3304      	adds	r3, #4
 8005410:	4926      	ldr	r1, [pc, #152]	; (80054ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8005412:	5c8a      	ldrb	r2, [r1, r2]
 8005414:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	4413      	add	r3, r2
 800541c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005422:	3303      	adds	r3, #3
 8005424:	4921      	ldr	r1, [pc, #132]	; (80054ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8005426:	5c8a      	ldrb	r2, [r1, r2]
 8005428:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT*/

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800542a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542c:	3306      	adds	r3, #6
 800542e:	643b      	str	r3, [r7, #64]	; 0x40

            pChrom++;
 8005430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005432:	3301      	adds	r3, #1
 8005434:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8005436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005438:	3302      	adds	r3, #2
 800543a:	653b      	str	r3, [r7, #80]	; 0x50
 800543c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800543e:	2b07      	cmp	r3, #7
 8005440:	d98d      	bls.n	800535e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	3340      	adds	r3, #64	; 0x40
 8005446:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8005448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544a:	3301      	adds	r3, #1
 800544c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800544e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d981      	bls.n	8005358 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }

        pLum = pLum - 128 + 8;
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	3b78      	subs	r3, #120	; 0x78
 8005458:	63bb      	str	r3, [r7, #56]	; 0x38

        refline += JPEG_ConvertorParams.ScaledWidth;
 800545a:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005460:	4413      	add	r3, r2
 8005462:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8005464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005466:	3301      	adds	r3, #1
 8005468:	657b      	str	r3, [r7, #84]	; 0x54
 800546a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546c:	2b07      	cmp	r3, #7
 800546e:	f67f af66 	bls.w	800533e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005478:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800547a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4413      	add	r3, r2
 8005480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005482:	429a      	cmp	r2, r3
 8005484:	f4ff af33 	bcc.w	80052ee <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8005488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800548a:	4618      	mov	r0, r3
 800548c:	375c      	adds	r7, #92	; 0x5c
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	24006db8 	.word	0x24006db8
 800549c:	240071f8 	.word	0x240071f8
 80054a0:	24006df8 	.word	0x24006df8
 80054a4:	240075f8 	.word	0x240075f8
 80054a8:	240079f8 	.word	0x240079f8
 80054ac:	0802b31c 	.word	0x0802b31c

080054b0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b095      	sub	sp, #84	; 0x54
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	4a54      	ldr	r2, [pc, #336]	; (8005614 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	09db      	lsrs	r3, r3, #7
 80054c8:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44

  while(currentMCU < (numberMCU + BlockIndex))
 80054ce:	e092      	b.n	80055f6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80054d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d2:	00da      	lsls	r2, r3, #3
 80054d4:	4b50      	ldr	r3, [pc, #320]	; (8005618 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80054e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4a4c      	ldr	r2, [pc, #304]	; (8005618 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80054ec:	fb02 f201 	mul.w	r2, r2, r1
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	62bb      	str	r3, [r7, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80054f4:	4b48      	ldr	r3, [pc, #288]	; (8005618 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fa:	fb02 f103 	mul.w	r1, r2, r3
 80054fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005500:	4613      	mov	r3, r2
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4413      	add	r3, r2
 8005506:	440b      	add	r3, r1
 8005508:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;
 800550a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550c:	3301      	adds	r3, #1
 800550e:	647b      	str	r3, [r7, #68]	; 0x44

    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3340      	adds	r3, #64	; 0x40
 8005514:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  8; i++)
 800551a:	2300      	movs	r3, #0
 800551c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551e:	e064      	b.n	80055ea <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005520:	4b3d      	ldr	r3, [pc, #244]	; (8005618 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005526:	429a      	cmp	r2, r3
 8005528:	d25c      	bcs.n	80055e4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552e:	4413      	add	r3, r2
 8005530:	63fb      	str	r3, [r7, #60]	; 0x3c

          for(j=0; j < 8; j++)
 8005532:	2300      	movs	r3, #0
 8005534:	64bb      	str	r3, [r7, #72]	; 0x48
 8005536:	e04a      	b.n	80055ce <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {
            cbcomp = (int32_t)(*pChrom);
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4a36      	ldr	r2, [pc, #216]	; (800561c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 8005544:	4413      	add	r3, r2
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	3340      	adds	r3, #64	; 0x40
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4a32      	ldr	r2, [pc, #200]	; (8005620 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 8005558:	4413      	add	r3, r2
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4a30      	ldr	r2, [pc, #192]	; (8005624 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 8005564:	4413      	add	r3, r2
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	492e      	ldr	r1, [pc, #184]	; (8005628 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800556e:	440b      	add	r3, r1
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4413      	add	r3, r2
 8005574:	141b      	asrs	r3, r3, #16
 8005576:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

            ycomp = (int32_t)(*(pLum +j));
 8005578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800557c:	4413      	add	r3, r2
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	4413      	add	r3, r2
 8005588:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800558c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558e:	3302      	adds	r3, #2
 8005590:	4926      	ldr	r1, [pc, #152]	; (800562c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8005592:	5c8a      	ldrb	r2, [r1, r2]
 8005594:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	4413      	add	r3, r2
 800559c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80055a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a2:	3301      	adds	r3, #1
 80055a4:	4921      	ldr	r1, [pc, #132]	; (800562c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80055a6:	5c8a      	ldrb	r2, [r1, r2]
 80055a8:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80055b4:	4a1d      	ldr	r2, [pc, #116]	; (800562c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80055b6:	5cd2      	ldrb	r2, [r2, r3]
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80055bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055be:	3303      	adds	r3, #3
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	3301      	adds	r3, #1
 80055c6:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 80055c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ca:	3301      	adds	r3, #1
 80055cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d0:	2b07      	cmp	r3, #7
 80055d2:	d9b1      	bls.n	8005538 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	3308      	adds	r3, #8
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;
 80055da:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055e0:	4413      	add	r3, r2
 80055e2:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 80055e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e6:	3301      	adds	r3, #1
 80055e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ec:	2b07      	cmp	r3, #7
 80055ee:	d997      	bls.n	8005520 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	33c0      	adds	r3, #192	; 0xc0
 80055f4:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80055f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4413      	add	r3, r2
 80055fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055fe:	429a      	cmp	r2, r3
 8005600:	f4ff af66 	bcc.w	80054d0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005606:	4618      	mov	r0, r3
 8005608:	3754      	adds	r7, #84	; 0x54
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	aaaaaaab 	.word	0xaaaaaaab
 8005618:	24006db8 	.word	0x24006db8
 800561c:	240071f8 	.word	0x240071f8
 8005620:	24006df8 	.word	0x24006df8
 8005624:	240075f8 	.word	0x240075f8
 8005628:	240079f8 	.word	0x240079f8
 800562c:	0802b31c 	.word	0x0802b31c

08005630 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005630:	b480      	push	{r7}
 8005632:	b08f      	sub	sp, #60	; 0x3c
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	099b      	lsrs	r3, r3, #6
 8005642:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	637b      	str	r3, [r7, #52]	; 0x34

  while(currentMCU < (numberMCU + BlockIndex))
 8005648:	e05b      	b.n	8005702 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800564a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564c:	00da      	lsls	r2, r3, #3
 800564e:	4b33      	ldr	r3, [pc, #204]	; (800571c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	fbb2 f3f3 	udiv	r3, r2, r3
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	61bb      	str	r3, [r7, #24]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4a2f      	ldr	r2, [pc, #188]	; (800571c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005662:	fbb3 f1f2 	udiv	r1, r3, r2
 8005666:	fb02 f201 	mul.w	r2, r2, r1
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	617b      	str	r3, [r7, #20]

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800566e:	4b2b      	ldr	r3, [pc, #172]	; (800571c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	fb02 f103 	mul.w	r1, r2, r3
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4613      	mov	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4413      	add	r3, r2
 8005680:	440b      	add	r3, r1
 8005682:	633b      	str	r3, [r7, #48]	; 0x30

    currentMCU++;
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	3301      	adds	r3, #1
 8005688:	637b      	str	r3, [r7, #52]	; 0x34

    pLum = pInBuffer;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	623b      	str	r3, [r7, #32]

    for(i= 0; i <  8; i++)
 800568e:	2300      	movs	r3, #0
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005692:	e030      	b.n	80056f6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    {
      pOutAddr = pOutBuffer + refline;
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	4413      	add	r3, r2
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800569c:	4b1f      	ldr	r3, [pc, #124]	; (800571c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d224      	bcs.n	80056f0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {
        for(j=0; j < 8; j++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056aa:	e019      	b.n	80056e0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        {
          ySample =   (uint32_t)(*pLum);
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	613b      	str	r3, [r7, #16]

          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[0] =  ySample;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	3301      	adds	r3, #1
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	3302      	adds	r3, #2
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);

#endif /* JPEG_RGB_FORMAT */

          pOutAddr += JPEG_BYTES_PER_PIXEL;
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	3303      	adds	r3, #3
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	3301      	adds	r3, #1
 80056d8:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	3301      	adds	r3, #1
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	2b07      	cmp	r3, #7
 80056e4:	d9e2      	bls.n	80056ac <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;
 80056e6:	4b0d      	ldr	r3, [pc, #52]	; (800571c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ec:	4413      	add	r3, r2
 80056ee:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	3301      	adds	r3, #1
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	2b07      	cmp	r3, #7
 80056fa:	d9cb      	bls.n	8005694 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3340      	adds	r3, #64	; 0x40
 8005700:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4413      	add	r3, r2
 8005708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800570a:	429a      	cmp	r2, r3
 800570c:	d39d      	bcc.n	800564a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 800570e:	69fb      	ldr	r3, [r7, #28]
}
 8005710:	4618      	mov	r0, r3
 8005712:	373c      	adds	r7, #60	; 0x3c
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	24006db8 	.word	0x24006db8

08005720 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005720:	b480      	push	{r7}
 8005722:	b093      	sub	sp, #76	; 0x4c
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	0a1b      	lsrs	r3, r3, #8
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c

  while(currentMCU < (numberMCU + BlockIndex))
 8005738:	e089      	b.n	800584e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800573a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573c:	00da      	lsls	r2, r3, #3
 800573e:	4b4b      	ldr	r3, [pc, #300]	; (800586c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	fbb2 f3f3 	udiv	r3, r2, r3
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800574a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	4a47      	ldr	r2, [pc, #284]	; (800586c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005752:	fbb3 f1f2 	udiv	r1, r3, r2
 8005756:	fb02 f201 	mul.w	r2, r2, r1
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	627b      	str	r3, [r7, #36]	; 0x24

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800575e:	4b43      	ldr	r3, [pc, #268]	; (800586c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005764:	fb02 f103 	mul.w	r1, r2, r3
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	4613      	mov	r3, r2
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	4413      	add	r3, r2
 8005770:	440b      	add	r3, r1
 8005772:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8005774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005776:	3301      	adds	r3, #1
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c

    pChrom = pInBuffer;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	633b      	str	r3, [r7, #48]	; 0x30

    for(i= 0; i <  8; i++)
 800577e:	2300      	movs	r3, #0
 8005780:	647b      	str	r3, [r7, #68]	; 0x44
 8005782:	e05d      	b.n	8005840 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005784:	4b39      	ldr	r3, [pc, #228]	; (800586c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800578a:	429a      	cmp	r2, r3
 800578c:	d255      	bcs.n	800583a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005792:	4413      	add	r3, r2
 8005794:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8005796:	2300      	movs	r3, #0
 8005798:	643b      	str	r3, [r7, #64]	; 0x40
 800579a:	e046      	b.n	800582a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {
            color_k = (int32_t)(*(pChrom + 192));
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	33c0      	adds	r3, #192	; 0xc0
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	fb03 f302 	mul.w	r3, r3, r2
 80057b0:	4a2f      	ldr	r2, [pc, #188]	; (8005870 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80057b2:	fb82 1203 	smull	r1, r2, r2, r3
 80057b6:	441a      	add	r2, r3
 80057b8:	11d2      	asrs	r2, r2, #7
 80057ba:	17db      	asrs	r3, r3, #31
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	61fb      	str	r3, [r7, #28]

            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	3340      	adds	r3, #64	; 0x40
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	fb03 f302 	mul.w	r3, r3, r2
 80057ce:	4a28      	ldr	r2, [pc, #160]	; (8005870 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80057d0:	fb82 1203 	smull	r1, r2, r2, r3
 80057d4:	441a      	add	r2, r3
 80057d6:	11d2      	asrs	r2, r2, #7
 80057d8:	17db      	asrs	r3, r3, #31
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	61bb      	str	r3, [r7, #24]

            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	3380      	adds	r3, #128	; 0x80
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	fb03 f302 	mul.w	r3, r3, r2
 80057ec:	4a20      	ldr	r2, [pc, #128]	; (8005870 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80057ee:	fb82 1203 	smull	r1, r2, r2, r3
 80057f2:	441a      	add	r2, r3
 80057f4:	11d2      	asrs	r2, r2, #7
 80057f6:	17db      	asrs	r3, r3, #31
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fe:	3302      	adds	r3, #2
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	3301      	adds	r3, #1
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005816:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8005818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581a:	3303      	adds	r3, #3
 800581c:	637b      	str	r3, [r7, #52]	; 0x34

            pChrom++;
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	3301      	adds	r3, #1
 8005822:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8005824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005826:	3301      	adds	r3, #1
 8005828:	643b      	str	r3, [r7, #64]	; 0x40
 800582a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582c:	2b07      	cmp	r3, #7
 800582e:	d9b5      	bls.n	800579c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8005830:	4b0e      	ldr	r3, [pc, #56]	; (800586c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005836:	4413      	add	r3, r2
 8005838:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 800583a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800583c:	3301      	adds	r3, #1
 800583e:	647b      	str	r3, [r7, #68]	; 0x44
 8005840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005842:	2b07      	cmp	r3, #7
 8005844:	d99e      	bls.n	8005784 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800584c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800584e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005856:	429a      	cmp	r2, r3
 8005858:	f4ff af6f 	bcc.w	800573a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800585e:	4618      	mov	r0, r3
 8005860:	374c      	adds	r7, #76	; 0x4c
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	24006db8 	.word	0x24006db8
 8005870:	80808081 	.word	0x80808081

08005874 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a7c      	ldr	r2, [pc, #496]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005886:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	4a7a      	ldr	r2, [pc, #488]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800588e:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4a78      	ldr	r2, [pc, #480]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005896:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	6892      	ldr	r2, [r2, #8]
 80058a0:	fb02 f203 	mul.w	r2, r2, r3
 80058a4:	4613      	mov	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	4a73      	ldr	r2, [pc, #460]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ac:	6113      	str	r3, [r2, #16]

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4a71      	ldr	r2, [pc, #452]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058b4:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80058b6:	4b70      	ldr	r3, [pc, #448]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d155      	bne.n	800596a <TGFX_JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80058be:	4b6e      	ldr	r3, [pc, #440]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d119      	bne.n	80058fa <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4a6c      	ldr	r2, [pc, #432]	; (8005a7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x208>)
 80058ca:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80058cc:	4b6a      	ldr	r3, [pc, #424]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	4a68      	ldr	r2, [pc, #416]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058d6:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 80058d8:	4b67      	ldr	r3, [pc, #412]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <TGFX_JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 80058e0:	4b65      	ldr	r3, [pc, #404]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f1c3 0310 	rsb	r3, r3, #16
 80058e8:	4a63      	ldr	r2, [pc, #396]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ea:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 80058ec:	4b62      	ldr	r3, [pc, #392]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ee:	2210      	movs	r2, #16
 80058f0:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 80058f2:	4b61      	ldr	r3, [pc, #388]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058f4:	2210      	movs	r2, #16
 80058f6:	621a      	str	r2, [r3, #32]
 80058f8:	e075      	b.n	80059e6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80058fa:	4b5f      	ldr	r3, [pc, #380]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d119      	bne.n	8005936 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4a5e      	ldr	r2, [pc, #376]	; (8005a80 <TGFX_JPEG_GetDecodeColorConvertFunc+0x20c>)
 8005906:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8005908:	4b5b      	ldr	r3, [pc, #364]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	4a59      	ldr	r2, [pc, #356]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005912:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8005914:	4b58      	ldr	r3, [pc, #352]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 800591c:	4b56      	ldr	r3, [pc, #344]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f1c3 0310 	rsb	r3, r3, #16
 8005924:	4a54      	ldr	r2, [pc, #336]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005926:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8005928:	4b53      	ldr	r3, [pc, #332]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800592a:	2210      	movs	r2, #16
 800592c:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800592e:	4b52      	ldr	r3, [pc, #328]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005930:	2208      	movs	r2, #8
 8005932:	621a      	str	r2, [r3, #32]
 8005934:	e057      	b.n	80059e6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4a52      	ldr	r2, [pc, #328]	; (8005a84 <TGFX_JPEG_GetDecodeColorConvertFunc+0x210>)
 800593a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800593c:	4b4e      	ldr	r3, [pc, #312]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4a4c      	ldr	r2, [pc, #304]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005946:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8005948:	4b4b      	ldr	r3, [pc, #300]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <TGFX_JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8005950:	4b49      	ldr	r3, [pc, #292]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f1c3 0308 	rsb	r3, r3, #8
 8005958:	4a47      	ldr	r2, [pc, #284]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800595a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 800595c:	4b46      	ldr	r3, [pc, #280]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800595e:	2208      	movs	r2, #8
 8005960:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8005962:	4b45      	ldr	r3, [pc, #276]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005964:	2208      	movs	r2, #8
 8005966:	621a      	str	r2, [r3, #32]
 8005968:	e03d      	b.n	80059e6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800596a:	4b43      	ldr	r3, [pc, #268]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d119      	bne.n	80059a6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	4a44      	ldr	r2, [pc, #272]	; (8005a88 <TGFX_JPEG_GetDecodeColorConvertFunc+0x214>)
 8005976:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8005978:	4b3f      	ldr	r3, [pc, #252]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4a3d      	ldr	r2, [pc, #244]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005982:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8005984:	4b3c      	ldr	r3, [pc, #240]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <TGFX_JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 800598c:	4b3a      	ldr	r3, [pc, #232]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f1c3 0308 	rsb	r3, r3, #8
 8005994:	4a38      	ldr	r2, [pc, #224]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005996:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8005998:	4b37      	ldr	r3, [pc, #220]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800599a:	2208      	movs	r2, #8
 800599c:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800599e:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059a0:	2208      	movs	r2, #8
 80059a2:	621a      	str	r2, [r3, #32]
 80059a4:	e01f      	b.n	80059e6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 80059a6:	4b34      	ldr	r3, [pc, #208]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b30      	cmp	r3, #48	; 0x30
 80059ac:	d119      	bne.n	80059e2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4a36      	ldr	r2, [pc, #216]	; (8005a8c <TGFX_JPEG_GetDecodeColorConvertFunc+0x218>)
 80059b2:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80059b4:	4b30      	ldr	r3, [pc, #192]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	4a2e      	ldr	r2, [pc, #184]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059be:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 80059c0:	4b2d      	ldr	r3, [pc, #180]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 80059c8:	4b2b      	ldr	r3, [pc, #172]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f1c3 0308 	rsb	r3, r3, #8
 80059d0:	4a29      	ldr	r2, [pc, #164]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059d2:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 80059d4:	4b28      	ldr	r3, [pc, #160]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059d6:	2208      	movs	r2, #8
 80059d8:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 80059da:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059dc:	2208      	movs	r2, #8
 80059de:	621a      	str	r2, [r3, #32]
 80059e0:	e001      	b.n	80059e6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
 80059e2:	2301      	movs	r3, #1
 80059e4:	e042      	b.n	8005a6c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1f8>
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 80059e6:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	4b23      	ldr	r3, [pc, #140]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	4413      	add	r3, r2
 80059f0:	4a21      	ldr	r2, [pc, #132]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059f2:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 80059f4:	4b20      	ldr	r3, [pc, #128]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a00:	6293      	str	r3, [r2, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8005a02:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	4b1c      	ldr	r3, [pc, #112]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8005a10:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a16:	69d2      	ldr	r2, [r2, #28]
 8005a18:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a1c:	fb02 f201 	mul.w	r2, r2, r1
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8005a2c:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8005a3a:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	4a0e      	ldr	r2, [pc, #56]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a40:	6a12      	ldr	r2, [r2, #32]
 8005a42:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a46:	fb02 f201 	mul.w	r2, r2, r1
 8005a4a:	1a9b      	subs	r3, r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	3301      	adds	r3, #1
 8005a54:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	4a06      	ldr	r2, [pc, #24]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a60:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	24006db8 	.word	0x24006db8
 8005a7c:	0800502d 	.word	0x0800502d
 8005a80:	080052d5 	.word	0x080052d5
 8005a84:	080054b1 	.word	0x080054b1
 8005a88:	08005631 	.word	0x08005631
 8005a8c:	08005721 	.word	0x08005721

08005a90 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	607b      	str	r3, [r7, #4]
 8005a9a:	e02e      	b.n	8005afa <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3b80      	subs	r3, #128	; 0x80
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	f24b 3274 	movw	r2, #45940	; 0xb374
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005ab2:	141a      	asrs	r2, r3, #16
 8005ab4:	4916      	ldr	r1, [pc, #88]	; (8005b10 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005aca:	141a      	asrs	r2, r3, #16
 8005acc:	4911      	ldr	r1, [pc, #68]	; (8005b14 <TGFX_JPEG_InitPostProcColorTables+0x84>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	4a10      	ldr	r2, [pc, #64]	; (8005b18 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8005ad8:	fb02 f203 	mul.w	r2, r2, r3
 8005adc:	490f      	ldr	r1, [pc, #60]	; (8005b1c <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	4a0e      	ldr	r2, [pc, #56]	; (8005b20 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8005ae8:	fb02 f203 	mul.w	r2, r2, r3
 8005aec:	490d      	ldr	r1, [pc, #52]	; (8005b24 <TGFX_JPEG_InitPostProcColorTables+0x94>)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3301      	adds	r3, #1
 8005af8:	607b      	str	r3, [r7, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2bff      	cmp	r3, #255	; 0xff
 8005afe:	ddcd      	ble.n	8005a9c <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	24006df8 	.word	0x24006df8
 8005b14:	240071f8 	.word	0x240071f8
 8005b18:	ffffa498 	.word	0xffffa498
 8005b1c:	240075f8 	.word	0x240075f8
 8005b20:	ffffd3f4 	.word	0xffffd3f4
 8005b24:	240079f8 	.word	0x240079f8

08005b28 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8005b2c:	f000 f806 	bl	8005b3c <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8005b30:	f000 f888 	bl	8005c44 <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8005b34:	f7ff ffac 	bl	8005a90 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8005b38:	bf00      	nop
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	e05a      	b.n	8005bfe <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8005b4e:	fb02 f303 	mul.w	r3, r2, r3
 8005b52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b56:	141a      	asrs	r2, r3, #16
 8005b58:	492e      	ldr	r1, [pc, #184]	; (8005c14 <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f249 6245 	movw	r2, #38469	; 0x9645
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b6e:	141a      	asrs	r2, r3, #16
 8005b70:	4929      	ldr	r1, [pc, #164]	; (8005c18 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b86:	141a      	asrs	r2, r3, #16
 8005b88:	4924      	ldr	r1, [pc, #144]	; (8005c1c <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a23      	ldr	r2, [pc, #140]	; (8005c20 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b9c:	141a      	asrs	r2, r3, #16
 8005b9e:	4921      	ldr	r1, [pc, #132]	; (8005c24 <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1f      	ldr	r2, [pc, #124]	; (8005c28 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bb2:	141a      	asrs	r2, r3, #16
 8005bb4:	491d      	ldr	r1, [pc, #116]	; (8005c2c <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	03db      	lsls	r3, r3, #15
 8005bc2:	141a      	asrs	r2, r3, #16
 8005bc4:	491a      	ldr	r1, [pc, #104]	; (8005c30 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a19      	ldr	r2, [pc, #100]	; (8005c34 <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8005bd0:	fb02 f303 	mul.w	r3, r2, r3
 8005bd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bd8:	141a      	asrs	r2, r3, #16
 8005bda:	4917      	ldr	r1, [pc, #92]	; (8005c38 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a15      	ldr	r2, [pc, #84]	; (8005c3c <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8005be6:	fb02 f303 	mul.w	r3, r2, r3
 8005bea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bee:	141a      	asrs	r2, r3, #16
 8005bf0:	4913      	ldr	r1, [pc, #76]	; (8005c40 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	607b      	str	r3, [r7, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2bff      	cmp	r3, #255	; 0xff
 8005c02:	dda1      	ble.n	8005b48 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	24007df8 	.word	0x24007df8
 8005c18:	240089f8 	.word	0x240089f8
 8005c1c:	240095f8 	.word	0x240095f8
 8005c20:	ffffd4d1 	.word	0xffffd4d1
 8005c24:	240081f8 	.word	0x240081f8
 8005c28:	ffffab30 	.word	0xffffab30
 8005c2c:	240091f8 	.word	0x240091f8
 8005c30:	240085f8 	.word	0x240085f8
 8005c34:	ffff94d1 	.word	0xffff94d1
 8005c38:	24008df8 	.word	0x24008df8
 8005c3c:	ffffeb30 	.word	0xffffeb30
 8005c40:	240099f8 	.word	0x240099f8

08005c44 <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	e036      	b.n	8005cbe <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8005c50:	2300      	movs	r3, #0
 8005c52:	60bb      	str	r3, [r7, #8]
 8005c54:	e02d      	b.n	8005cb2 <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b07      	cmp	r3, #7
 8005c64:	d906      	bls.n	8005c74 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	d903      	bls.n	8005c74 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3378      	adds	r3, #120	; 0x78
 8005c70:	607b      	str	r3, [r7, #4]
 8005c72:	e012      	b.n	8005c9a <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b07      	cmp	r3, #7
 8005c78:	d906      	bls.n	8005c88 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b07      	cmp	r3, #7
 8005c7e:	d803      	bhi.n	8005c88 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3338      	adds	r3, #56	; 0x38
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	e008      	b.n	8005c9a <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b07      	cmp	r3, #7
 8005c8c:	d805      	bhi.n	8005c9a <TGFX_JPEG_Init_MCU_LUT+0x56>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b07      	cmp	r3, #7
 8005c92:	d902      	bls.n	8005c9a <TGFX_JPEG_Init_MCU_LUT+0x56>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3340      	adds	r3, #64	; 0x40
 8005c98:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	b291      	uxth	r1, r2
 8005ca6:	4a62      	ldr	r2, [pc, #392]	; (8005e30 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8005ca8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b0f      	cmp	r3, #15
 8005cb6:	d9ce      	bls.n	8005c56 <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b0f      	cmp	r3, #15
 8005cc2:	d9c5      	bls.n	8005c50 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e072      	b.n	8005db0 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
 8005cce:	e069      	b.n	8005da4 <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	4413      	add	r3, r2
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005cf2:	b299      	uxth	r1, r3
 8005cf4:	4a4f      	ldr	r2, [pc, #316]	; (8005e34 <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3380      	adds	r3, #128	; 0x80
 8005d10:	b299      	uxth	r1, r3
 8005d12:	4a49      	ldr	r2, [pc, #292]	; (8005e38 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d32:	b299      	uxth	r1, r3
 8005d34:	4a41      	ldr	r2, [pc, #260]	; (8005e3c <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	33c0      	adds	r3, #192	; 0xc0
 8005d50:	b299      	uxth	r1, r3
 8005d52:	4a3b      	ldr	r2, [pc, #236]	; (8005e40 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005d72:	b299      	uxth	r1, r3
 8005d74:	4a33      	ldr	r2, [pc, #204]	; (8005e44 <TGFX_JPEG_Init_MCU_LUT+0x200>)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d94:	b299      	uxth	r1, r3
 8005d96:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60bb      	str	r3, [r7, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b0f      	cmp	r3, #15
 8005da8:	d992      	bls.n	8005cd0 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3301      	adds	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b0f      	cmp	r3, #15
 8005db4:	d989      	bls.n	8005cca <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e02e      	b.n	8005e1a <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]
 8005dc0:	e025      	b.n	8005e0e <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4413      	add	r3, r2
 8005dca:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	b299      	uxth	r1, r3
 8005dd0:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <TGFX_JPEG_Init_MCU_LUT+0x208>)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3340      	adds	r3, #64	; 0x40
 8005dde:	b299      	uxth	r1, r3
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3380      	adds	r3, #128	; 0x80
 8005dee:	b299      	uxth	r1, r3
 8005df0:	4a18      	ldr	r2, [pc, #96]	; (8005e54 <TGFX_JPEG_Init_MCU_LUT+0x210>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	33c0      	adds	r3, #192	; 0xc0
 8005dfe:	b299      	uxth	r1, r3
 8005e00:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b07      	cmp	r3, #7
 8005e12:	d9d6      	bls.n	8005dc2 <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b07      	cmp	r3, #7
 8005e1e:	d9cd      	bls.n	8005dbc <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	24009df8 	.word	0x24009df8
 8005e34:	2400a078 	.word	0x2400a078
 8005e38:	2400a278 	.word	0x2400a278
 8005e3c:	2400a4f8 	.word	0x2400a4f8
 8005e40:	2400a6f8 	.word	0x2400a6f8
 8005e44:	2400a978 	.word	0x2400a978
 8005e48:	2400ab78 	.word	0x2400ab78
 8005e4c:	24009ff8 	.word	0x24009ff8
 8005e50:	2400a478 	.word	0x2400a478
 8005e54:	2400a8f8 	.word	0x2400a8f8
 8005e58:	2400ad78 	.word	0x2400ad78

08005e5c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
    vTaskDelete() API function (as this demo application does) then it is also
    important that vApplicationIdleHook() is permitted to return to its calling
    function, because it is the responsibility of the idle task to clean up
    memory allocated by the kernel to any task that has since been deleted. */

    vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8005e60:	4902      	ldr	r1, [pc, #8]	; (8005e6c <vApplicationIdleHook+0x10>)
 8005e62:	2000      	movs	r0, #0
 8005e64:	f012 fa20 	bl	80182a8 <vTaskSetApplicationTaskTag>
}
 8005e68:	bf00      	nop
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	08000f49 	.word	0x08000f49

08005e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8005e76:	f000 fcb1 	bl	80067dc <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005e7a:	4b52      	ldr	r3, [pc, #328]	; (8005fc4 <main+0x154>)
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d11b      	bne.n	8005ebe <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e86:	f3bf 8f4f 	dsb	sy
}
 8005e8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e8c:	f3bf 8f6f 	isb	sy
}
 8005e90:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005e92:	4b4c      	ldr	r3, [pc, #304]	; (8005fc4 <main+0x154>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005e9a:	f3bf 8f4f 	dsb	sy
}
 8005e9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ea0:	f3bf 8f6f 	isb	sy
}
 8005ea4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005ea6:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <main+0x154>)
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	4a46      	ldr	r2, [pc, #280]	; (8005fc4 <main+0x154>)
 8005eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eb0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005eb2:	f3bf 8f4f 	dsb	sy
}
 8005eb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005eb8:	f3bf 8f6f 	isb	sy
}
 8005ebc:	e000      	b.n	8005ec0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005ebe:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005ec0:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <main+0x154>)
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d138      	bne.n	8005f3e <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005ecc:	4b3d      	ldr	r3, [pc, #244]	; (8005fc4 <main+0x154>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005ed4:	f3bf 8f4f 	dsb	sy
}
 8005ed8:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8005eda:	4b3a      	ldr	r3, [pc, #232]	; (8005fc4 <main+0x154>)
 8005edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee0:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	0b5b      	lsrs	r3, r3, #13
 8005ee6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005eea:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	08db      	lsrs	r3, r3, #3
 8005ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef4:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005efe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f04:	492f      	ldr	r1, [pc, #188]	; (8005fc4 <main+0x154>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	1e5a      	subs	r2, r3, #1
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1ef      	bne.n	8005ef6 <main+0x86>
    } while(sets-- != 0U);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	1e5a      	subs	r2, r3, #1
 8005f1a:	60ba      	str	r2, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e5      	bne.n	8005eec <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8005f20:	f3bf 8f4f 	dsb	sy
}
 8005f24:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005f26:	4b27      	ldr	r3, [pc, #156]	; (8005fc4 <main+0x154>)
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	4a26      	ldr	r2, [pc, #152]	; (8005fc4 <main+0x154>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f32:	f3bf 8f4f 	dsb	sy
}
 8005f36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f38:	f3bf 8f6f 	isb	sy
}
 8005f3c:	e000      	b.n	8005f40 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005f3e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f40:	f006 fe4c 	bl	800cbdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f44:	f000 f858 	bl	8005ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f48:	f000 facc 	bl	80064e4 <MX_GPIO_Init>
  MX_MDMA_Init();
 8005f4c:	f000 fa58 	bl	8006400 <MX_MDMA_Init>
  MX_DMA2D_Init();
 8005f50:	f000 f8e8 	bl	8006124 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8005f54:	f000 f974 	bl	8006240 <MX_LTDC_Init>
  MX_I2C4_Init();
 8005f58:	f000 f91e 	bl	8006198 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8005f5c:	f000 f9f2 	bl	8006344 <MX_OCTOSPI1_Init>
  MX_FMC_Init();
 8005f60:	f000 fa6e 	bl	8006440 <MX_FMC_Init>
  MX_CRC_Init();
 8005f64:	f000 f8bc 	bl	80060e0 <MX_CRC_Init>
  MX_JPEG_Init();
 8005f68:	f000 f956 	bl	8006218 <MX_JPEG_Init>
  MX_LIBJPEG_Init();
 8005f6c:	f7fa fa39 	bl	80003e2 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 8005f70:	f7fa fa45 	bl	80003fe <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8005f74:	f7fa fa3c 	bl	80003f0 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 8005f78:	4913      	ldr	r1, [pc, #76]	; (8005fc8 <main+0x158>)
 8005f7a:	4814      	ldr	r0, [pc, #80]	; (8005fcc <main+0x15c>)
 8005f7c:	f000 fbc8 	bl	8006710 <SDRAM_Initialization_Sequence>
  
  *(__IO uint32_t*)(0xD0000000) = 0x11111122;
 8005f80:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8005f84:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <main+0x160>)
 8005f86:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005f88:	f00f fb94 	bl	80156b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005f8c:	4a11      	ldr	r2, [pc, #68]	; (8005fd4 <main+0x164>)
 8005f8e:	2100      	movs	r1, #0
 8005f90:	4811      	ldr	r0, [pc, #68]	; (8005fd8 <main+0x168>)
 8005f92:	f00f fbd9 	bl	8015748 <osThreadNew>
 8005f96:	4603      	mov	r3, r0
 8005f98:	4a10      	ldr	r2, [pc, #64]	; (8005fdc <main+0x16c>)
 8005f9a:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8005f9c:	4a10      	ldr	r2, [pc, #64]	; (8005fe0 <main+0x170>)
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	4810      	ldr	r0, [pc, #64]	; (8005fe4 <main+0x174>)
 8005fa2:	f00f fbd1 	bl	8015748 <osThreadNew>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4a0f      	ldr	r2, [pc, #60]	; (8005fe8 <main+0x178>)
 8005faa:	6013      	str	r3, [r2, #0]

  /* creation of videoTask */
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8005fac:	4a0f      	ldr	r2, [pc, #60]	; (8005fec <main+0x17c>)
 8005fae:	2100      	movs	r1, #0
 8005fb0:	480f      	ldr	r0, [pc, #60]	; (8005ff0 <main+0x180>)
 8005fb2:	f00f fbc9 	bl	8015748 <osThreadNew>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4a0e      	ldr	r2, [pc, #56]	; (8005ff4 <main+0x184>)
 8005fba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8005fbc:	f00f fb9e 	bl	80156fc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005fc0:	e7fe      	b.n	8005fc0 <main+0x150>
 8005fc2:	bf00      	nop
 8005fc4:	e000ed00 	.word	0xe000ed00
 8005fc8:	240262d4 	.word	0x240262d4
 8005fcc:	2402629c 	.word	0x2402629c
 8005fd0:	11111122 	.word	0x11111122
 8005fd4:	0802b61c 	.word	0x0802b61c
 8005fd8:	080067cd 	.word	0x080067cd
 8005fdc:	240262e4 	.word	0x240262e4
 8005fe0:	0802b640 	.word	0x0802b640
 8005fe4:	0800040f 	.word	0x0800040f
 8005fe8:	240262d0 	.word	0x240262d0
 8005fec:	0802b664 	.word	0x0802b664
 8005ff0:	080044f5 	.word	0x080044f5
 8005ff4:	24026148 	.word	0x24026148

08005ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b09c      	sub	sp, #112	; 0x70
 8005ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006002:	224c      	movs	r2, #76	; 0x4c
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f021 fca4 	bl	8027954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	2220      	movs	r2, #32
 8006010:	2100      	movs	r1, #0
 8006012:	4618      	mov	r0, r3
 8006014:	f021 fc9e 	bl	8027954 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8006018:	4b2f      	ldr	r3, [pc, #188]	; (80060d8 <SystemClock_Config+0xe0>)
 800601a:	f04f 32ff 	mov.w	r2, #4294967295
 800601e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8006022:	2004      	movs	r0, #4
 8006024:	f00c fa9e 	bl	8012564 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006028:	2300      	movs	r3, #0
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4b2b      	ldr	r3, [pc, #172]	; (80060dc <SystemClock_Config+0xe4>)
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	4a2a      	ldr	r2, [pc, #168]	; (80060dc <SystemClock_Config+0xe4>)
 8006032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006036:	6193      	str	r3, [r2, #24]
 8006038:	4b28      	ldr	r3, [pc, #160]	; (80060dc <SystemClock_Config+0xe4>)
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006040:	603b      	str	r3, [r7, #0]
 8006042:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006044:	bf00      	nop
 8006046:	4b25      	ldr	r3, [pc, #148]	; (80060dc <SystemClock_Config+0xe4>)
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800604e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006052:	d1f8      	bne.n	8006046 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006054:	2301      	movs	r3, #1
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800605e:	2302      	movs	r3, #2
 8006060:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006062:	2302      	movs	r3, #2
 8006064:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006066:	230c      	movs	r3, #12
 8006068:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 800606a:	f44f 738c 	mov.w	r3, #280	; 0x118
 800606e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006070:	2302      	movs	r3, #2
 8006072:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006074:	2302      	movs	r3, #2
 8006076:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006078:	2302      	movs	r3, #2
 800607a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800607c:	2304      	movs	r3, #4
 800607e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006080:	2300      	movs	r3, #0
 8006082:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800608c:	4618      	mov	r0, r3
 800608e:	f00c fac3 	bl	8012618 <HAL_RCC_OscConfig>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8006098:	f000 fc00 	bl	800689c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800609c:	233f      	movs	r3, #63	; 0x3f
 800609e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060a0:	2303      	movs	r3, #3
 80060a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80060a8:	2308      	movs	r3, #8
 80060aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80060b4:	2300      	movs	r3, #0
 80060b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80060b8:	2300      	movs	r3, #0
 80060ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	2103      	movs	r1, #3
 80060c0:	4618      	mov	r0, r3
 80060c2:	f00c fedb 	bl	8012e7c <HAL_RCC_ClockConfig>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80060cc:	f000 fbe6 	bl	800689c <Error_Handler>
  }
}
 80060d0:	bf00      	nop
 80060d2:	3770      	adds	r7, #112	; 0x70
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	58024400 	.word	0x58024400
 80060dc:	58024800 	.word	0x58024800

080060e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80060e4:	4b0d      	ldr	r3, [pc, #52]	; (800611c <MX_CRC_Init+0x3c>)
 80060e6:	4a0e      	ldr	r2, [pc, #56]	; (8006120 <MX_CRC_Init+0x40>)
 80060e8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80060ea:	4b0c      	ldr	r3, [pc, #48]	; (800611c <MX_CRC_Init+0x3c>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <MX_CRC_Init+0x3c>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80060f6:	4b09      	ldr	r3, [pc, #36]	; (800611c <MX_CRC_Init+0x3c>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <MX_CRC_Init+0x3c>)
 80060fe:	2200      	movs	r2, #0
 8006100:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006102:	4b06      	ldr	r3, [pc, #24]	; (800611c <MX_CRC_Init+0x3c>)
 8006104:	2201      	movs	r2, #1
 8006106:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006108:	4804      	ldr	r0, [pc, #16]	; (800611c <MX_CRC_Init+0x3c>)
 800610a:	f006 ff75 	bl	800cff8 <HAL_CRC_Init>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8006114:	f000 fbc2 	bl	800689c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8006118:	bf00      	nop
 800611a:	bd80      	pop	{r7, pc}
 800611c:	24026278 	.word	0x24026278
 8006120:	40023000 	.word	0x40023000

08006124 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8006128:	4b19      	ldr	r3, [pc, #100]	; (8006190 <MX_DMA2D_Init+0x6c>)
 800612a:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <MX_DMA2D_Init+0x70>)
 800612c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800612e:	4b18      	ldr	r3, [pc, #96]	; (8006190 <MX_DMA2D_Init+0x6c>)
 8006130:	2200      	movs	r2, #0
 8006132:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8006134:	4b16      	ldr	r3, [pc, #88]	; (8006190 <MX_DMA2D_Init+0x6c>)
 8006136:	2202      	movs	r2, #2
 8006138:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800613a:	4b15      	ldr	r3, [pc, #84]	; (8006190 <MX_DMA2D_Init+0x6c>)
 800613c:	2200      	movs	r2, #0
 800613e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006140:	4b13      	ldr	r3, [pc, #76]	; (8006190 <MX_DMA2D_Init+0x6c>)
 8006142:	2200      	movs	r2, #0
 8006144:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <MX_DMA2D_Init+0x6c>)
 8006148:	2202      	movs	r2, #2
 800614a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800614c:	4b10      	ldr	r3, [pc, #64]	; (8006190 <MX_DMA2D_Init+0x6c>)
 800614e:	2200      	movs	r2, #0
 8006150:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006152:	4b0f      	ldr	r3, [pc, #60]	; (8006190 <MX_DMA2D_Init+0x6c>)
 8006154:	2200      	movs	r2, #0
 8006156:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8006158:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <MX_DMA2D_Init+0x6c>)
 800615a:	2200      	movs	r2, #0
 800615c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <MX_DMA2D_Init+0x6c>)
 8006160:	2200      	movs	r2, #0
 8006162:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8006164:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <MX_DMA2D_Init+0x6c>)
 8006166:	2200      	movs	r2, #0
 8006168:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800616a:	4809      	ldr	r0, [pc, #36]	; (8006190 <MX_DMA2D_Init+0x6c>)
 800616c:	f007 f836 	bl	800d1dc <HAL_DMA2D_Init>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8006176:	f000 fb91 	bl	800689c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800617a:	2101      	movs	r1, #1
 800617c:	4804      	ldr	r0, [pc, #16]	; (8006190 <MX_DMA2D_Init+0x6c>)
 800617e:	f007 f9a1 	bl	800d4c4 <HAL_DMA2D_ConfigLayer>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8006188:	f000 fb88 	bl	800689c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800618c:	bf00      	nop
 800618e:	bd80      	pop	{r7, pc}
 8006190:	24026088 	.word	0x24026088
 8006194:	52001000 	.word	0x52001000

08006198 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800619c:	4b1b      	ldr	r3, [pc, #108]	; (800620c <MX_I2C4_Init+0x74>)
 800619e:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <MX_I2C4_Init+0x78>)
 80061a0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 80061a2:	4b1a      	ldr	r3, [pc, #104]	; (800620c <MX_I2C4_Init+0x74>)
 80061a4:	4a1b      	ldr	r2, [pc, #108]	; (8006214 <MX_I2C4_Init+0x7c>)
 80061a6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80061a8:	4b18      	ldr	r3, [pc, #96]	; (800620c <MX_I2C4_Init+0x74>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80061ae:	4b17      	ldr	r3, [pc, #92]	; (800620c <MX_I2C4_Init+0x74>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061b4:	4b15      	ldr	r3, [pc, #84]	; (800620c <MX_I2C4_Init+0x74>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80061ba:	4b14      	ldr	r3, [pc, #80]	; (800620c <MX_I2C4_Init+0x74>)
 80061bc:	2200      	movs	r2, #0
 80061be:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80061c0:	4b12      	ldr	r3, [pc, #72]	; (800620c <MX_I2C4_Init+0x74>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061c6:	4b11      	ldr	r3, [pc, #68]	; (800620c <MX_I2C4_Init+0x74>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <MX_I2C4_Init+0x74>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80061d2:	480e      	ldr	r0, [pc, #56]	; (800620c <MX_I2C4_Init+0x74>)
 80061d4:	f007 fd54 	bl	800dc80 <HAL_I2C_Init>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80061de:	f000 fb5d 	bl	800689c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80061e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061e6:	4809      	ldr	r0, [pc, #36]	; (800620c <MX_I2C4_Init+0x74>)
 80061e8:	f008 fb0a 	bl	800e800 <HAL_I2CEx_ConfigAnalogFilter>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80061f2:	f000 fb53 	bl	800689c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80061f6:	2100      	movs	r1, #0
 80061f8:	4804      	ldr	r0, [pc, #16]	; (800620c <MX_I2C4_Init+0x74>)
 80061fa:	f008 fb4c 	bl	800e896 <HAL_I2CEx_ConfigDigitalFilter>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8006204:	f000 fb4a 	bl	800689c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8006208:	bf00      	nop
 800620a:	bd80      	pop	{r7, pc}
 800620c:	2402614c 	.word	0x2402614c
 8006210:	58001c00 	.word	0x58001c00
 8006214:	30808bd0 	.word	0x30808bd0

08006218 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <MX_JPEG_Init+0x20>)
 800621e:	4a07      	ldr	r2, [pc, #28]	; (800623c <MX_JPEG_Init+0x24>)
 8006220:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8006222:	4805      	ldr	r0, [pc, #20]	; (8006238 <MX_JPEG_Init+0x20>)
 8006224:	f008 fb84 	bl	800e930 <HAL_JPEG_Init>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 800622e:	f000 fb35 	bl	800689c <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8006232:	bf00      	nop
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	240260f0 	.word	0x240260f0
 800623c:	52003000 	.word	0x52003000

08006240 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08e      	sub	sp, #56	; 0x38
 8006244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	2234      	movs	r2, #52	; 0x34
 800624a:	2100      	movs	r1, #0
 800624c:	4618      	mov	r0, r3
 800624e:	f021 fb81 	bl	8027954 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8006252:	4b3a      	ldr	r3, [pc, #232]	; (800633c <MX_LTDC_Init+0xfc>)
 8006254:	4a3a      	ldr	r2, [pc, #232]	; (8006340 <MX_LTDC_Init+0x100>)
 8006256:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006258:	4b38      	ldr	r3, [pc, #224]	; (800633c <MX_LTDC_Init+0xfc>)
 800625a:	2200      	movs	r2, #0
 800625c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800625e:	4b37      	ldr	r3, [pc, #220]	; (800633c <MX_LTDC_Init+0xfc>)
 8006260:	2200      	movs	r2, #0
 8006262:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006264:	4b35      	ldr	r3, [pc, #212]	; (800633c <MX_LTDC_Init+0xfc>)
 8006266:	2200      	movs	r2, #0
 8006268:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800626a:	4b34      	ldr	r3, [pc, #208]	; (800633c <MX_LTDC_Init+0xfc>)
 800626c:	2200      	movs	r2, #0
 800626e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8006270:	4b32      	ldr	r3, [pc, #200]	; (800633c <MX_LTDC_Init+0xfc>)
 8006272:	2228      	movs	r2, #40	; 0x28
 8006274:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8006276:	4b31      	ldr	r3, [pc, #196]	; (800633c <MX_LTDC_Init+0xfc>)
 8006278:	2209      	movs	r2, #9
 800627a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 800627c:	4b2f      	ldr	r3, [pc, #188]	; (800633c <MX_LTDC_Init+0xfc>)
 800627e:	222a      	movs	r2, #42	; 0x2a
 8006280:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8006282:	4b2e      	ldr	r3, [pc, #184]	; (800633c <MX_LTDC_Init+0xfc>)
 8006284:	220b      	movs	r2, #11
 8006286:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8006288:	4b2c      	ldr	r3, [pc, #176]	; (800633c <MX_LTDC_Init+0xfc>)
 800628a:	f240 220a 	movw	r2, #522	; 0x20a
 800628e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8006290:	4b2a      	ldr	r3, [pc, #168]	; (800633c <MX_LTDC_Init+0xfc>)
 8006292:	f240 121b 	movw	r2, #283	; 0x11b
 8006296:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8006298:	4b28      	ldr	r3, [pc, #160]	; (800633c <MX_LTDC_Init+0xfc>)
 800629a:	f240 222a 	movw	r2, #554	; 0x22a
 800629e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80062a0:	4b26      	ldr	r3, [pc, #152]	; (800633c <MX_LTDC_Init+0xfc>)
 80062a2:	f240 121d 	movw	r2, #285	; 0x11d
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80062a8:	4b24      	ldr	r3, [pc, #144]	; (800633c <MX_LTDC_Init+0xfc>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80062b0:	4b22      	ldr	r3, [pc, #136]	; (800633c <MX_LTDC_Init+0xfc>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80062b8:	4b20      	ldr	r3, [pc, #128]	; (800633c <MX_LTDC_Init+0xfc>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80062c0:	481e      	ldr	r0, [pc, #120]	; (800633c <MX_LTDC_Init+0xfc>)
 80062c2:	f00a fa57 	bl	8010774 <HAL_LTDC_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80062cc:	f000 fae6 	bl	800689c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80062d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80062d8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80062de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062e2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80062e4:	2301      	movs	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80062e8:	23ff      	movs	r3, #255	; 0xff
 80062ea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80062f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80062f6:	2305      	movs	r3, #5
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80062fa:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80062fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8006300:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8006306:	f44f 7388 	mov.w	r3, #272	; 0x110
 800630a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 800630c:	23ff      	movs	r3, #255	; 0xff
 800630e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800631e:	1d3b      	adds	r3, r7, #4
 8006320:	2200      	movs	r2, #0
 8006322:	4619      	mov	r1, r3
 8006324:	4805      	ldr	r0, [pc, #20]	; (800633c <MX_LTDC_Init+0xfc>)
 8006326:	f00a fbad 	bl	8010a84 <HAL_LTDC_ConfigLayer>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8006330:	f000 fab4 	bl	800689c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006334:	bf00      	nop
 8006336:	3738      	adds	r7, #56	; 0x38
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	24025fe0 	.word	0x24025fe0
 8006340:	50001000 	.word	0x50001000

08006344 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800634a:	4b2b      	ldr	r3, [pc, #172]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 800634c:	4a2b      	ldr	r2, [pc, #172]	; (80063fc <MX_OCTOSPI1_Init+0xb8>)
 800634e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8006350:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 8006352:	2201      	movs	r2, #1
 8006354:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8006356:	4b28      	ldr	r3, [pc, #160]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 8006358:	2200      	movs	r2, #0
 800635a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800635c:	4b26      	ldr	r3, [pc, #152]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 800635e:	2200      	movs	r2, #0
 8006360:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8006362:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 8006364:	221a      	movs	r2, #26
 8006366:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8006368:	4b23      	ldr	r3, [pc, #140]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 800636a:	2202      	movs	r2, #2
 800636c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800636e:	4b22      	ldr	r3, [pc, #136]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 8006370:	2200      	movs	r2, #0
 8006372:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8006374:	4b20      	ldr	r3, [pc, #128]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 8006376:	2200      	movs	r2, #0
 8006378:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800637a:	4b1f      	ldr	r3, [pc, #124]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 800637c:	2200      	movs	r2, #0
 800637e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8006380:	4b1d      	ldr	r3, [pc, #116]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 8006382:	2203      	movs	r2, #3
 8006384:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8006386:	4b1c      	ldr	r3, [pc, #112]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 8006388:	2200      	movs	r2, #0
 800638a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 800638e:	2200      	movs	r2, #0
 8006390:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8006392:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8006398:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 800639a:	2208      	movs	r2, #8
 800639c:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 800639e:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 80063a4:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80063aa:	4813      	ldr	r0, [pc, #76]	; (80063f8 <MX_OCTOSPI1_Init+0xb4>)
 80063ac:	f00b f97a 	bl	80116a4 <HAL_OSPI_Init>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 80063b6:	f000 fa71 	bl	800689c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 80063ba:	2301      	movs	r3, #1
 80063bc:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 80063be:	2301      	movs	r3, #1
 80063c0:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 80063c2:	2000      	movs	r0, #0
 80063c4:	f005 fb96 	bl	800baf4 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 80063c8:	463b      	mov	r3, r7
 80063ca:	4619      	mov	r1, r3
 80063cc:	2000      	movs	r0, #0
 80063ce:	f005 fb07 	bl	800b9e0 <BSP_OSPI_NOR_Init>
 80063d2:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80063da:	f000 fa5f 	bl	800689c <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 80063de:	2000      	movs	r0, #0
 80063e0:	f005 fc24 	bl	800bc2c <BSP_OSPI_NOR_EnableMemoryMappedMode>
 80063e4:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 80063ec:	f000 fa56 	bl	800689c <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	24025f84 	.word	0x24025f84
 80063fc:	52005000 	.word	0x52005000

08006400 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <MX_MDMA_Init+0x3c>)
 8006408:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800640c:	4a0b      	ldr	r2, [pc, #44]	; (800643c <MX_MDMA_Init+0x3c>)
 800640e:	f043 0301 	orr.w	r3, r3, #1
 8006412:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006416:	4b09      	ldr	r3, [pc, #36]	; (800643c <MX_MDMA_Init+0x3c>)
 8006418:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	607b      	str	r3, [r7, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8006424:	2200      	movs	r2, #0
 8006426:	2105      	movs	r1, #5
 8006428:	207a      	movs	r0, #122	; 0x7a
 800642a:	f006 fd33 	bl	800ce94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800642e:	207a      	movs	r0, #122	; 0x7a
 8006430:	f006 fd4a 	bl	800cec8 <HAL_NVIC_EnableIRQ>

}
 8006434:	bf00      	nop
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	58024400 	.word	0x58024400

08006440 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8006446:	1d3b      	adds	r3, r7, #4
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	605a      	str	r2, [r3, #4]
 800644e:	609a      	str	r2, [r3, #8]
 8006450:	60da      	str	r2, [r3, #12]
 8006452:	611a      	str	r2, [r3, #16]
 8006454:	615a      	str	r2, [r3, #20]
 8006456:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006458:	4b20      	ldr	r3, [pc, #128]	; (80064dc <MX_FMC_Init+0x9c>)
 800645a:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <MX_FMC_Init+0xa0>)
 800645c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800645e:	4b1f      	ldr	r3, [pc, #124]	; (80064dc <MX_FMC_Init+0x9c>)
 8006460:	2201      	movs	r2, #1
 8006462:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8006464:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <MX_FMC_Init+0x9c>)
 8006466:	2201      	movs	r2, #1
 8006468:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800646a:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <MX_FMC_Init+0x9c>)
 800646c:	2204      	movs	r2, #4
 800646e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006470:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <MX_FMC_Init+0x9c>)
 8006472:	2210      	movs	r2, #16
 8006474:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006476:	4b19      	ldr	r3, [pc, #100]	; (80064dc <MX_FMC_Init+0x9c>)
 8006478:	2240      	movs	r2, #64	; 0x40
 800647a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800647c:	4b17      	ldr	r3, [pc, #92]	; (80064dc <MX_FMC_Init+0x9c>)
 800647e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006482:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006484:	4b15      	ldr	r3, [pc, #84]	; (80064dc <MX_FMC_Init+0x9c>)
 8006486:	2200      	movs	r2, #0
 8006488:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800648a:	4b14      	ldr	r3, [pc, #80]	; (80064dc <MX_FMC_Init+0x9c>)
 800648c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006490:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <MX_FMC_Init+0x9c>)
 8006494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006498:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800649a:	4b10      	ldr	r3, [pc, #64]	; (80064dc <MX_FMC_Init+0x9c>)
 800649c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064a0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80064a2:	2302      	movs	r3, #2
 80064a4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80064a6:	2307      	movs	r3, #7
 80064a8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80064aa:	2304      	movs	r3, #4
 80064ac:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80064ae:	2307      	movs	r3, #7
 80064b0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80064b2:	2303      	movs	r3, #3
 80064b4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80064b6:	2302      	movs	r3, #2
 80064b8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80064ba:	2302      	movs	r3, #2
 80064bc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80064be:	1d3b      	adds	r3, r7, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4806      	ldr	r0, [pc, #24]	; (80064dc <MX_FMC_Init+0x9c>)
 80064c4:	f00e fc3e 	bl	8014d44 <HAL_SDRAM_Init>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80064ce:	f000 f9e5 	bl	800689c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80064d2:	bf00      	nop
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	2402629c 	.word	0x2402629c
 80064e0:	52004140 	.word	0x52004140

080064e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08e      	sub	sp, #56	; 0x38
 80064e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	605a      	str	r2, [r3, #4]
 80064f4:	609a      	str	r2, [r3, #8]
 80064f6:	60da      	str	r2, [r3, #12]
 80064f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80064fa:	4b80      	ldr	r3, [pc, #512]	; (80066fc <MX_GPIO_Init+0x218>)
 80064fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006500:	4a7e      	ldr	r2, [pc, #504]	; (80066fc <MX_GPIO_Init+0x218>)
 8006502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006506:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800650a:	4b7c      	ldr	r3, [pc, #496]	; (80066fc <MX_GPIO_Init+0x218>)
 800650c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	623b      	str	r3, [r7, #32]
 8006516:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006518:	4b78      	ldr	r3, [pc, #480]	; (80066fc <MX_GPIO_Init+0x218>)
 800651a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800651e:	4a77      	ldr	r2, [pc, #476]	; (80066fc <MX_GPIO_Init+0x218>)
 8006520:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006524:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006528:	4b74      	ldr	r3, [pc, #464]	; (80066fc <MX_GPIO_Init+0x218>)
 800652a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800652e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006536:	4b71      	ldr	r3, [pc, #452]	; (80066fc <MX_GPIO_Init+0x218>)
 8006538:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800653c:	4a6f      	ldr	r2, [pc, #444]	; (80066fc <MX_GPIO_Init+0x218>)
 800653e:	f043 0308 	orr.w	r3, r3, #8
 8006542:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006546:	4b6d      	ldr	r3, [pc, #436]	; (80066fc <MX_GPIO_Init+0x218>)
 8006548:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	61bb      	str	r3, [r7, #24]
 8006552:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006554:	4b69      	ldr	r3, [pc, #420]	; (80066fc <MX_GPIO_Init+0x218>)
 8006556:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800655a:	4a68      	ldr	r2, [pc, #416]	; (80066fc <MX_GPIO_Init+0x218>)
 800655c:	f043 0310 	orr.w	r3, r3, #16
 8006560:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006564:	4b65      	ldr	r3, [pc, #404]	; (80066fc <MX_GPIO_Init+0x218>)
 8006566:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800656a:	f003 0310 	and.w	r3, r3, #16
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006572:	4b62      	ldr	r3, [pc, #392]	; (80066fc <MX_GPIO_Init+0x218>)
 8006574:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006578:	4a60      	ldr	r2, [pc, #384]	; (80066fc <MX_GPIO_Init+0x218>)
 800657a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800657e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006582:	4b5e      	ldr	r3, [pc, #376]	; (80066fc <MX_GPIO_Init+0x218>)
 8006584:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006590:	4b5a      	ldr	r3, [pc, #360]	; (80066fc <MX_GPIO_Init+0x218>)
 8006592:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006596:	4a59      	ldr	r2, [pc, #356]	; (80066fc <MX_GPIO_Init+0x218>)
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065a0:	4b56      	ldr	r3, [pc, #344]	; (80066fc <MX_GPIO_Init+0x218>)
 80065a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80065ae:	4b53      	ldr	r3, [pc, #332]	; (80066fc <MX_GPIO_Init+0x218>)
 80065b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065b4:	4a51      	ldr	r2, [pc, #324]	; (80066fc <MX_GPIO_Init+0x218>)
 80065b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065be:	4b4f      	ldr	r3, [pc, #316]	; (80066fc <MX_GPIO_Init+0x218>)
 80065c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c8:	60bb      	str	r3, [r7, #8]
 80065ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80065cc:	4b4b      	ldr	r3, [pc, #300]	; (80066fc <MX_GPIO_Init+0x218>)
 80065ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065d2:	4a4a      	ldr	r2, [pc, #296]	; (80066fc <MX_GPIO_Init+0x218>)
 80065d4:	f043 0320 	orr.w	r3, r3, #32
 80065d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065dc:	4b47      	ldr	r3, [pc, #284]	; (80066fc <MX_GPIO_Init+0x218>)
 80065de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	607b      	str	r3, [r7, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ea:	4b44      	ldr	r3, [pc, #272]	; (80066fc <MX_GPIO_Init+0x218>)
 80065ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065f0:	4a42      	ldr	r2, [pc, #264]	; (80066fc <MX_GPIO_Init+0x218>)
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065fa:	4b40      	ldr	r3, [pc, #256]	; (80066fc <MX_GPIO_Init+0x218>)
 80065fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 8006608:	2201      	movs	r2, #1
 800660a:	f640 0104 	movw	r1, #2052	; 0x804
 800660e:	483c      	ldr	r0, [pc, #240]	; (8006700 <MX_GPIO_Init+0x21c>)
 8006610:	f007 fade 	bl	800dbd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8006614:	2200      	movs	r2, #0
 8006616:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 800661a:	483a      	ldr	r0, [pc, #232]	; (8006704 <MX_GPIO_Init+0x220>)
 800661c:	f007 fad8 	bl	800dbd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006626:	4838      	ldr	r0, [pc, #224]	; (8006708 <MX_GPIO_Init+0x224>)
 8006628:	f007 fad2 	bl	800dbd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 800662c:	2200      	movs	r2, #0
 800662e:	2106      	movs	r1, #6
 8006630:	4836      	ldr	r0, [pc, #216]	; (800670c <MX_GPIO_Init+0x228>)
 8006632:	f007 facd 	bl	800dbd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8006636:	f640 0304 	movw	r3, #2052	; 0x804
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800663c:	2301      	movs	r3, #1
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006640:	2300      	movs	r3, #0
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006644:	2300      	movs	r3, #0
 8006646:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800664c:	4619      	mov	r1, r3
 800664e:	482c      	ldr	r0, [pc, #176]	; (8006700 <MX_GPIO_Init+0x21c>)
 8006650:	f006 ffec 	bl	800d62c <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8006654:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800665a:	2301      	movs	r3, #1
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665e:	2300      	movs	r3, #0
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006662:	2303      	movs	r3, #3
 8006664:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800666a:	4619      	mov	r1, r3
 800666c:	4825      	ldr	r0, [pc, #148]	; (8006704 <MX_GPIO_Init+0x220>)
 800666e:	f006 ffdd 	bl	800d62c <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8006672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006678:	2301      	movs	r3, #1
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667c:	2300      	movs	r3, #0
 800667e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006680:	2303      	movs	r3, #3
 8006682:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8006684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006688:	4619      	mov	r1, r3
 800668a:	481f      	ldr	r0, [pc, #124]	; (8006708 <MX_GPIO_Init+0x224>)
 800668c:	f006 ffce 	bl	800d62c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8006690:	2304      	movs	r3, #4
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006694:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800669a:	2301      	movs	r3, #1
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800669e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a2:	4619      	mov	r1, r3
 80066a4:	4817      	ldr	r0, [pc, #92]	; (8006704 <MX_GPIO_Init+0x220>)
 80066a6:	f006 ffc1 	bl	800d62c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80066aa:	2302      	movs	r3, #2
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066ae:	2301      	movs	r3, #1
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066b6:	2300      	movs	r3, #0
 80066b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80066ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066be:	4619      	mov	r1, r3
 80066c0:	4812      	ldr	r0, [pc, #72]	; (800670c <MX_GPIO_Init+0x228>)
 80066c2:	f006 ffb3 	bl	800d62c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 80066c6:	2304      	movs	r3, #4
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066ca:	2301      	movs	r3, #1
 80066cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066ce:	2301      	movs	r3, #1
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d2:	2300      	movs	r3, #0
 80066d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 80066d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066da:	4619      	mov	r1, r3
 80066dc:	480b      	ldr	r0, [pc, #44]	; (800670c <MX_GPIO_Init+0x228>)
 80066de:	f006 ffa5 	bl	800d62c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80066e2:	2200      	movs	r2, #0
 80066e4:	2105      	movs	r1, #5
 80066e6:	2008      	movs	r0, #8
 80066e8:	f006 fbd4 	bl	800ce94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80066ec:	2008      	movs	r0, #8
 80066ee:	f006 fbeb 	bl	800cec8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80066f2:	bf00      	nop
 80066f4:	3738      	adds	r7, #56	; 0x38
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	58024400 	.word	0x58024400
 8006700:	58021800 	.word	0x58021800
 8006704:	58021c00 	.word	0x58021c00
 8006708:	58022000 	.word	0x58022000
 800670c:	58020000 	.word	0x58020000

08006710 <SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2208      	movs	r2, #8
 8006728:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2201      	movs	r2, #1
 800672e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2200      	movs	r2, #0
 8006734:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f00e fb3d 	bl	8014dbc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006742:	2001      	movs	r0, #1
 8006744:	f006 faa6 	bl	800cc94 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2202      	movs	r2, #2
 800674c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2208      	movs	r2, #8
 8006752:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2201      	movs	r2, #1
 8006758:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f00e fb28 	bl	8014dbc <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2203      	movs	r2, #3
 8006770:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2208      	movs	r2, #8
 8006776:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2208      	movs	r2, #8
 800677c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2200      	movs	r2, #0
 8006782:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f00e fb16 	bl	8014dbc <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8006790:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006794:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2204      	movs	r2, #4
 800679a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2208      	movs	r2, #8
 80067a0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2201      	movs	r2, #1
 80067a6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80067ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f00e fb01 	bl	8014dbc <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT); 
 80067ba:	f240 6103 	movw	r1, #1539	; 0x603
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f00e fb31 	bl	8014e26 <HAL_SDRAM_ProgramRefreshRate>

}
 80067c4:	bf00      	nop
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80067d4:	2064      	movs	r0, #100	; 0x64
 80067d6:	f00f f849 	bl	801586c <osDelay>
 80067da:	e7fb      	b.n	80067d4 <StartDefaultTask+0x8>

080067dc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80067e2:	463b      	mov	r3, r7
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	605a      	str	r2, [r3, #4]
 80067ea:	609a      	str	r2, [r3, #8]
 80067ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80067ee:	f006 fb87 	bl	800cf00 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80067f2:	2301      	movs	r3, #1
 80067f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80067fa:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80067fe:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8006800:	231b      	movs	r3, #27
 8006802:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8006804:	2300      	movs	r3, #0
 8006806:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8006808:	2300      	movs	r3, #0
 800680a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800680c:	2300      	movs	r3, #0
 800680e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8006810:	2301      	movs	r3, #1
 8006812:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8006814:	2300      	movs	r3, #0
 8006816:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8006818:	2300      	movs	r3, #0
 800681a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006820:	463b      	mov	r3, r7
 8006822:	4618      	mov	r0, r3
 8006824:	f006 fba4 	bl	800cf70 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8006828:	2301      	movs	r3, #1
 800682a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800682c:	2319      	movs	r3, #25
 800682e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8006830:	2303      	movs	r3, #3
 8006832:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8006834:	2301      	movs	r3, #1
 8006836:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006838:	463b      	mov	r3, r7
 800683a:	4618      	mov	r0, r3
 800683c:	f006 fb98 	bl	800cf70 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8006840:	2302      	movs	r3, #2
 8006842:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8006844:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8006848:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800684a:	2313      	movs	r3, #19
 800684c:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800684e:	463b      	mov	r3, r7
 8006850:	4618      	mov	r0, r3
 8006852:	f006 fb8d 	bl	800cf70 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8006856:	2303      	movs	r3, #3
 8006858:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800685a:	2311      	movs	r3, #17
 800685c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800685e:	2301      	movs	r3, #1
 8006860:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006862:	463b      	mov	r3, r7
 8006864:	4618      	mov	r0, r3
 8006866:	f006 fb83 	bl	800cf70 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800686a:	2004      	movs	r0, #4
 800686c:	f006 fb60 	bl	800cf30 <HAL_MPU_Enable>

}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a04      	ldr	r2, [pc, #16]	; (8006898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d101      	bne.n	800688e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800688a:	f006 f9e3 	bl	800cc54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40001000 	.word	0x40001000

0800689c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80068a0:	bf00      	nop
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
	...

080068ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068b2:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <HAL_MspInit+0x38>)
 80068b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80068b8:	4a0a      	ldr	r2, [pc, #40]	; (80068e4 <HAL_MspInit+0x38>)
 80068ba:	f043 0302 	orr.w	r3, r3, #2
 80068be:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80068c2:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <HAL_MspInit+0x38>)
 80068c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	607b      	str	r3, [r7, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80068d0:	2200      	movs	r2, #0
 80068d2:	210f      	movs	r1, #15
 80068d4:	f06f 0001 	mvn.w	r0, #1
 80068d8:	f006 fadc 	bl	800ce94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	58024400 	.word	0x58024400

080068e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a0b      	ldr	r2, [pc, #44]	; (8006924 <HAL_CRC_MspInit+0x3c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d10e      	bne.n	8006918 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80068fa:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <HAL_CRC_MspInit+0x40>)
 80068fc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006900:	4a09      	ldr	r2, [pc, #36]	; (8006928 <HAL_CRC_MspInit+0x40>)
 8006902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006906:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800690a:	4b07      	ldr	r3, [pc, #28]	; (8006928 <HAL_CRC_MspInit+0x40>)
 800690c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006918:	bf00      	nop
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	40023000 	.word	0x40023000
 8006928:	58024400 	.word	0x58024400

0800692c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a0e      	ldr	r2, [pc, #56]	; (8006974 <HAL_DMA2D_MspInit+0x48>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d116      	bne.n	800696c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800693e:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <HAL_DMA2D_MspInit+0x4c>)
 8006940:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006944:	4a0c      	ldr	r2, [pc, #48]	; (8006978 <HAL_DMA2D_MspInit+0x4c>)
 8006946:	f043 0310 	orr.w	r3, r3, #16
 800694a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800694e:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <HAL_DMA2D_MspInit+0x4c>)
 8006950:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800695c:	2200      	movs	r2, #0
 800695e:	2105      	movs	r1, #5
 8006960:	205a      	movs	r0, #90	; 0x5a
 8006962:	f006 fa97 	bl	800ce94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006966:	205a      	movs	r0, #90	; 0x5a
 8006968:	f006 faae 	bl	800cec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	52001000 	.word	0x52001000
 8006978:	58024400 	.word	0x58024400

0800697c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b0ba      	sub	sp, #232	; 0xe8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006984:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	605a      	str	r2, [r3, #4]
 800698e:	609a      	str	r2, [r3, #8]
 8006990:	60da      	str	r2, [r3, #12]
 8006992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006994:	f107 0310 	add.w	r3, r7, #16
 8006998:	22c0      	movs	r2, #192	; 0xc0
 800699a:	2100      	movs	r1, #0
 800699c:	4618      	mov	r0, r3
 800699e:	f020 ffd9 	bl	8027954 <memset>
  if(hi2c->Instance==I2C4)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a27      	ldr	r2, [pc, #156]	; (8006a44 <HAL_I2C_MspInit+0xc8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d146      	bne.n	8006a3a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80069ac:	f04f 0210 	mov.w	r2, #16
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80069b8:	2300      	movs	r3, #0
 80069ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069be:	f107 0310 	add.w	r3, r7, #16
 80069c2:	4618      	mov	r0, r3
 80069c4:	f00c fe28 	bl	8013618 <HAL_RCCEx_PeriphCLKConfig>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80069ce:	f7ff ff65 	bl	800689c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069d2:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <HAL_I2C_MspInit+0xcc>)
 80069d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80069d8:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <HAL_I2C_MspInit+0xcc>)
 80069da:	f043 0308 	orr.w	r3, r3, #8
 80069de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80069e2:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <HAL_I2C_MspInit+0xcc>)
 80069e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80069f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80069f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069f8:	2312      	movs	r3, #18
 80069fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a04:	2302      	movs	r3, #2
 8006a06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006a0a:	2304      	movs	r3, #4
 8006a0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006a14:	4619      	mov	r1, r3
 8006a16:	480d      	ldr	r0, [pc, #52]	; (8006a4c <HAL_I2C_MspInit+0xd0>)
 8006a18:	f006 fe08 	bl	800d62c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <HAL_I2C_MspInit+0xcc>)
 8006a1e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006a22:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <HAL_I2C_MspInit+0xcc>)
 8006a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a28:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <HAL_I2C_MspInit+0xcc>)
 8006a2e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a36:	60bb      	str	r3, [r7, #8]
 8006a38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006a3a:	bf00      	nop
 8006a3c:	37e8      	adds	r7, #232	; 0xe8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	58001c00 	.word	0x58001c00
 8006a48:	58024400 	.word	0x58024400
 8006a4c:	58020c00 	.word	0x58020c00

08006a50 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a0c      	ldr	r2, [pc, #48]	; (8006a90 <HAL_I2C_MspDeInit+0x40>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d111      	bne.n	8006a86 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8006a62:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <HAL_I2C_MspDeInit+0x44>)
 8006a64:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006a68:	4a0a      	ldr	r2, [pc, #40]	; (8006a94 <HAL_I2C_MspDeInit+0x44>)
 8006a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8006a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a76:	4808      	ldr	r0, [pc, #32]	; (8006a98 <HAL_I2C_MspDeInit+0x48>)
 8006a78:	f006 ff88 	bl	800d98c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8006a7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a80:	4805      	ldr	r0, [pc, #20]	; (8006a98 <HAL_I2C_MspDeInit+0x48>)
 8006a82:	f006 ff83 	bl	800d98c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8006a86:	bf00      	nop
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	58001c00 	.word	0x58001c00
 8006a94:	58024400 	.word	0x58024400
 8006a98:	58020c00 	.word	0x58020c00

08006a9c <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a57      	ldr	r2, [pc, #348]	; (8006c08 <HAL_JPEG_MspInit+0x16c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	f040 80a7 	bne.w	8006bfe <HAL_JPEG_MspInit+0x162>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8006ab0:	4b56      	ldr	r3, [pc, #344]	; (8006c0c <HAL_JPEG_MspInit+0x170>)
 8006ab2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006ab6:	4a55      	ldr	r2, [pc, #340]	; (8006c0c <HAL_JPEG_MspInit+0x170>)
 8006ab8:	f043 0320 	orr.w	r3, r3, #32
 8006abc:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006ac0:	4b52      	ldr	r3, [pc, #328]	; (8006c0c <HAL_JPEG_MspInit+0x170>)
 8006ac2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8006ace:	4b50      	ldr	r3, [pc, #320]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006ad0:	4a50      	ldr	r2, [pc, #320]	; (8006c14 <HAL_JPEG_MspInit+0x178>)
 8006ad2:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8006ad4:	4b4e      	ldr	r3, [pc, #312]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006ad6:	2211      	movs	r2, #17
 8006ad8:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8006ada:	4b4d      	ldr	r3, [pc, #308]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8006ae0:	4b4b      	ldr	r3, [pc, #300]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006ae2:	2280      	movs	r2, #128	; 0x80
 8006ae4:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006ae6:	4b4a      	ldr	r3, [pc, #296]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8006aec:	4b48      	ldr	r3, [pc, #288]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006aee:	2202      	movs	r2, #2
 8006af0:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8006af2:	4b47      	ldr	r3, [pc, #284]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8006af8:	4b45      	ldr	r3, [pc, #276]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8006afe:	4b44      	ldr	r3, [pc, #272]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b00:	2280      	movs	r2, #128	; 0x80
 8006b02:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8006b04:	4b42      	ldr	r3, [pc, #264]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8006b0c:	4b40      	ldr	r3, [pc, #256]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b0e:	2220      	movs	r2, #32
 8006b10:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 8006b12:	4b3f      	ldr	r3, [pc, #252]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b14:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8006b18:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8006b1a:	4b3d      	ldr	r3, [pc, #244]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8006b22:	4b3b      	ldr	r3, [pc, #236]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8006b28:	4b39      	ldr	r3, [pc, #228]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8006b2e:	4838      	ldr	r0, [pc, #224]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b30:	f00a f9b8 	bl	8010ea4 <HAL_MDMA_Init>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_JPEG_MspInit+0xa2>
    {
      Error_Handler();
 8006b3a:	f7ff feaf 	bl	800689c <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2100      	movs	r1, #0
 8006b42:	4833      	ldr	r0, [pc, #204]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b44:	f00a f9fa 	bl	8010f3c <HAL_MDMA_ConfigPostRequestMask>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <HAL_JPEG_MspInit+0xb6>
    {
      Error_Handler();
 8006b4e:	f7ff fea5 	bl	800689c <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a2e      	ldr	r2, [pc, #184]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
 8006b58:	4a2d      	ldr	r2, [pc, #180]	; (8006c10 <HAL_JPEG_MspInit+0x174>)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 8006b5e:	4b2e      	ldr	r3, [pc, #184]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b60:	4a2e      	ldr	r2, [pc, #184]	; (8006c1c <HAL_JPEG_MspInit+0x180>)
 8006b62:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8006b64:	4b2c      	ldr	r3, [pc, #176]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b66:	2213      	movs	r2, #19
 8006b68:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8006b6a:	4b2b      	ldr	r3, [pc, #172]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8006b70:	4b29      	ldr	r3, [pc, #164]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b72:	22c0      	movs	r2, #192	; 0xc0
 8006b74:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006b76:	4b28      	ldr	r3, [pc, #160]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8006b7c:	4b26      	ldr	r3, [pc, #152]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8006b82:	4b25      	ldr	r3, [pc, #148]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b84:	2208      	movs	r2, #8
 8006b86:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8006b88:	4b23      	ldr	r3, [pc, #140]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8006b8e:	4b22      	ldr	r3, [pc, #136]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8006b94:	4b20      	ldr	r3, [pc, #128]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8006b9c:	4b1e      	ldr	r3, [pc, #120]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 8006ba2:	4b1d      	ldr	r3, [pc, #116]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006ba4:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8006ba8:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8006baa:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006bac:	f44f 3220 	mov.w	r2, #163840	; 0x28000
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
 8006bb2:	4b19      	ldr	r3, [pc, #100]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8006bb8:	4b17      	ldr	r3, [pc, #92]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8006bbe:	4816      	ldr	r0, [pc, #88]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006bc0:	f00a f970 	bl	8010ea4 <HAL_MDMA_Init>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <HAL_JPEG_MspInit+0x132>
    {
      Error_Handler();
 8006bca:	f7ff fe67 	bl	800689c <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4811      	ldr	r0, [pc, #68]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006bd4:	f00a f9b2 	bl	8010f3c <HAL_MDMA_ConfigPostRequestMask>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <HAL_JPEG_MspInit+0x146>
    {
      Error_Handler();
 8006bde:	f7ff fe5d 	bl	800689c <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a0c      	ldr	r2, [pc, #48]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006be6:	635a      	str	r2, [r3, #52]	; 0x34
 8006be8:	4a0b      	ldr	r2, [pc, #44]	; (8006c18 <HAL_JPEG_MspInit+0x17c>)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2105      	movs	r1, #5
 8006bf2:	2079      	movs	r0, #121	; 0x79
 8006bf4:	f006 f94e 	bl	800ce94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8006bf8:	2079      	movs	r0, #121	; 0x79
 8006bfa:	f006 f965 	bl	800cec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	52003000 	.word	0x52003000
 8006c0c:	58024400 	.word	0x58024400
 8006c10:	2402620c 	.word	0x2402620c
 8006c14:	52000200 	.word	0x52000200
 8006c18:	240261a0 	.word	0x240261a0
 8006c1c:	520001c0 	.word	0x520001c0

08006c20 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b0bc      	sub	sp, #240	; 0xf0
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	605a      	str	r2, [r3, #4]
 8006c32:	609a      	str	r2, [r3, #8]
 8006c34:	60da      	str	r2, [r3, #12]
 8006c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c38:	f107 0318 	add.w	r3, r7, #24
 8006c3c:	22c0      	movs	r2, #192	; 0xc0
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f020 fe87 	bl	8027954 <memset>
  if(hltdc->Instance==LTDC)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a57      	ldr	r2, [pc, #348]	; (8006da8 <HAL_LTDC_MspInit+0x188>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	f040 80a6 	bne.w	8006d9e <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006c52:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8006c5e:	2318      	movs	r3, #24
 8006c60:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8006c62:	23c9      	movs	r3, #201	; 0xc9
 8006c64:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8006c66:	2302      	movs	r3, #2
 8006c68:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8006c6e:	2315      	movs	r3, #21
 8006c70:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8006c76:	2300      	movs	r3, #0
 8006c78:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8006c7a:	f241 5356 	movw	r3, #5462	; 0x1556
 8006c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c80:	f107 0318 	add.w	r3, r7, #24
 8006c84:	4618      	mov	r0, r3
 8006c86:	f00c fcc7 	bl	8013618 <HAL_RCCEx_PeriphCLKConfig>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8006c90:	f7ff fe04 	bl	800689c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006c94:	4b45      	ldr	r3, [pc, #276]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006c96:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006c9a:	4a44      	ldr	r2, [pc, #272]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006c9c:	f043 0308 	orr.w	r3, r3, #8
 8006ca0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8006ca4:	4b41      	ldr	r3, [pc, #260]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006ca6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8006cb2:	4b3e      	ldr	r3, [pc, #248]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006cb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006cb8:	4a3c      	ldr	r2, [pc, #240]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cbe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006cc2:	4b3a      	ldr	r3, [pc, #232]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006cc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ccc:	613b      	str	r3, [r7, #16]
 8006cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006cd0:	4b36      	ldr	r3, [pc, #216]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006cd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006cd6:	4a35      	ldr	r2, [pc, #212]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cdc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006ce0:	4b32      	ldr	r3, [pc, #200]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006ce2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006cee:	4b2f      	ldr	r3, [pc, #188]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006cf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006cf4:	4a2d      	ldr	r2, [pc, #180]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cfa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006cfe:	4b2b      	ldr	r3, [pc, #172]	; (8006dac <HAL_LTDC_MspInit+0x18c>)
 8006d00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8006d0c:	23ff      	movs	r3, #255	; 0xff
 8006d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d12:	2302      	movs	r3, #2
 8006d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d24:	230e      	movs	r3, #14
 8006d26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8006d2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006d2e:	4619      	mov	r1, r3
 8006d30:	481f      	ldr	r0, [pc, #124]	; (8006db0 <HAL_LTDC_MspInit+0x190>)
 8006d32:	f006 fc7b 	bl	800d62c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8006d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d44:	2300      	movs	r3, #0
 8006d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d50:	230e      	movs	r3, #14
 8006d52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8006d56:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4815      	ldr	r0, [pc, #84]	; (8006db4 <HAL_LTDC_MspInit+0x194>)
 8006d5e:	f006 fc65 	bl	800d62c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8006d62:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d70:	2300      	movs	r3, #0
 8006d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d76:	2300      	movs	r3, #0
 8006d78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d7c:	230e      	movs	r3, #14
 8006d7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006d82:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006d86:	4619      	mov	r1, r3
 8006d88:	480b      	ldr	r0, [pc, #44]	; (8006db8 <HAL_LTDC_MspInit+0x198>)
 8006d8a:	f006 fc4f 	bl	800d62c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2105      	movs	r1, #5
 8006d92:	2058      	movs	r0, #88	; 0x58
 8006d94:	f006 f87e 	bl	800ce94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006d98:	2058      	movs	r0, #88	; 0x58
 8006d9a:	f006 f895 	bl	800cec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006d9e:	bf00      	nop
 8006da0:	37f0      	adds	r7, #240	; 0xf0
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	50001000 	.word	0x50001000
 8006dac:	58024400 	.word	0x58024400
 8006db0:	58022800 	.word	0x58022800
 8006db4:	58022400 	.word	0x58022400
 8006db8:	58022000 	.word	0x58022000

08006dbc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b0b4      	sub	sp, #208	; 0xd0
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006dc4:	f107 0310 	add.w	r3, r7, #16
 8006dc8:	22c0      	movs	r2, #192	; 0xc0
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f020 fdc1 	bl	8027954 <memset>
  if(hospi->Instance==OCTOSPI1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a28      	ldr	r2, [pc, #160]	; (8006e78 <HAL_OSPI_MspInit+0xbc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d148      	bne.n	8006e6e <HAL_OSPI_MspInit+0xb2>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8006ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8006de8:	2318      	movs	r3, #24
 8006dea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 8006dec:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8006df0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8006df2:	2302      	movs	r3, #2
 8006df4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8006df6:	2302      	movs	r3, #2
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8006e0a:	2320      	movs	r3, #32
 8006e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006e0e:	f107 0310 	add.w	r3, r7, #16
 8006e12:	4618      	mov	r0, r3
 8006e14:	f00c fc00 	bl	8013618 <HAL_RCCEx_PeriphCLKConfig>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <HAL_OSPI_MspInit+0x66>
    {
      Error_Handler();
 8006e1e:	f7ff fd3d 	bl	800689c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8006e22:	4b16      	ldr	r3, [pc, #88]	; (8006e7c <HAL_OSPI_MspInit+0xc0>)
 8006e24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e28:	4a14      	ldr	r2, [pc, #80]	; (8006e7c <HAL_OSPI_MspInit+0xc0>)
 8006e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e2e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006e32:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <HAL_OSPI_MspInit+0xc0>)
 8006e34:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8006e40:	4b0e      	ldr	r3, [pc, #56]	; (8006e7c <HAL_OSPI_MspInit+0xc0>)
 8006e42:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e46:	4a0d      	ldr	r2, [pc, #52]	; (8006e7c <HAL_OSPI_MspInit+0xc0>)
 8006e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e4c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006e50:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <HAL_OSPI_MspInit+0xc0>)
 8006e52:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e5a:	60bb      	str	r3, [r7, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2105      	movs	r1, #5
 8006e62:	205c      	movs	r0, #92	; 0x5c
 8006e64:	f006 f816 	bl	800ce94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8006e68:	205c      	movs	r0, #92	; 0x5c
 8006e6a:	f006 f82d 	bl	800cec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8006e6e:	bf00      	nop
 8006e70:	37d0      	adds	r7, #208	; 0xd0
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	52005000 	.word	0x52005000
 8006e7c:	58024400 	.word	0x58024400

08006e80 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a0c      	ldr	r2, [pc, #48]	; (8006ec0 <HAL_OSPI_MspDeInit+0x40>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d112      	bne.n	8006eb8 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8006e92:	4b0c      	ldr	r3, [pc, #48]	; (8006ec4 <HAL_OSPI_MspDeInit+0x44>)
 8006e94:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e98:	4a0a      	ldr	r2, [pc, #40]	; (8006ec4 <HAL_OSPI_MspDeInit+0x44>)
 8006e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e9e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8006ea2:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <HAL_OSPI_MspDeInit+0x44>)
 8006ea4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006ea8:	4a06      	ldr	r2, [pc, #24]	; (8006ec4 <HAL_OSPI_MspDeInit+0x44>)
 8006eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eae:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8006eb2:	205c      	movs	r0, #92	; 0x5c
 8006eb4:	f006 f816 	bl	800cee4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	52005000 	.word	0x52005000
 8006ec4:	58024400 	.word	0x58024400

08006ec8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b0b8      	sub	sp, #224	; 0xe0
 8006ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006ece:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	605a      	str	r2, [r3, #4]
 8006ed8:	609a      	str	r2, [r3, #8]
 8006eda:	60da      	str	r2, [r3, #12]
 8006edc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006ede:	4b51      	ldr	r3, [pc, #324]	; (8007024 <HAL_FMC_MspInit+0x15c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f040 8099 	bne.w	800701a <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8006ee8:	4b4e      	ldr	r3, [pc, #312]	; (8007024 <HAL_FMC_MspInit+0x15c>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006eee:	f107 0308 	add.w	r3, r7, #8
 8006ef2:	22c0      	movs	r2, #192	; 0xc0
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f020 fd2c 	bl	8027954 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8006efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f0c:	f107 0308 	add.w	r3, r7, #8
 8006f10:	4618      	mov	r0, r3
 8006f12:	f00c fb81 	bl	8013618 <HAL_RCCEx_PeriphCLKConfig>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8006f1c:	f7ff fcbe 	bl	800689c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006f20:	4b41      	ldr	r3, [pc, #260]	; (8007028 <HAL_FMC_MspInit+0x160>)
 8006f22:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006f26:	4a40      	ldr	r2, [pc, #256]	; (8007028 <HAL_FMC_MspInit+0x160>)
 8006f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f2c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006f30:	4b3d      	ldr	r3, [pc, #244]	; (8007028 <HAL_FMC_MspInit+0x160>)
 8006f32:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f3a:	607b      	str	r3, [r7, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8006f3e:	f248 1333 	movw	r3, #33075	; 0x8133
 8006f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f46:	2302      	movs	r3, #2
 8006f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f52:	2303      	movs	r3, #3
 8006f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f58:	230c      	movs	r3, #12
 8006f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f62:	4619      	mov	r1, r3
 8006f64:	4831      	ldr	r0, [pc, #196]	; (800702c <HAL_FMC_MspInit+0x164>)
 8006f66:	f006 fb61 	bl	800d62c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 8006f6a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f72:	2302      	movs	r3, #2
 8006f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f84:	230c      	movs	r3, #12
 8006f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4827      	ldr	r0, [pc, #156]	; (8007030 <HAL_FMC_MspInit+0x168>)
 8006f92:	f006 fb4b 	bl	800d62c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_7
 8006f96:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006f9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006faa:	2303      	movs	r3, #3
 8006fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006fb0:	230c      	movs	r3, #12
 8006fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006fba:	4619      	mov	r1, r3
 8006fbc:	481d      	ldr	r0, [pc, #116]	; (8007034 <HAL_FMC_MspInit+0x16c>)
 8006fbe:	f006 fb35 	bl	800d62c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8006fc2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006fc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fca:	2302      	movs	r3, #2
 8006fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006fdc:	230c      	movs	r3, #12
 8006fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006fe2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4813      	ldr	r0, [pc, #76]	; (8007038 <HAL_FMC_MspInit+0x170>)
 8006fea:	f006 fb1f 	bl	800d62c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8006fee:	23e0      	movs	r3, #224	; 0xe0
 8006ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007000:	2303      	movs	r3, #3
 8007002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007006:	230c      	movs	r3, #12
 8007008:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800700c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007010:	4619      	mov	r1, r3
 8007012:	480a      	ldr	r0, [pc, #40]	; (800703c <HAL_FMC_MspInit+0x174>)
 8007014:	f006 fb0a 	bl	800d62c <HAL_GPIO_Init>
 8007018:	e000      	b.n	800701c <HAL_FMC_MspInit+0x154>
    return;
 800701a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800701c:	37e0      	adds	r7, #224	; 0xe0
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	2400adf8 	.word	0x2400adf8
 8007028:	58024400 	.word	0x58024400
 800702c:	58021800 	.word	0x58021800
 8007030:	58020c00 	.word	0x58020c00
 8007034:	58021000 	.word	0x58021000
 8007038:	58021400 	.word	0x58021400
 800703c:	58021c00 	.word	0x58021c00

08007040 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007048:	f7ff ff3e 	bl	8006ec8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b090      	sub	sp, #64	; 0x40
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b0f      	cmp	r3, #15
 8007060:	d827      	bhi.n	80070b2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8007062:	2200      	movs	r2, #0
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	2036      	movs	r0, #54	; 0x36
 8007068:	f005 ff14 	bl	800ce94 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800706c:	2036      	movs	r0, #54	; 0x36
 800706e:	f005 ff2b 	bl	800cec8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8007072:	4a29      	ldr	r2, [pc, #164]	; (8007118 <HAL_InitTick+0xc4>)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007078:	4b28      	ldr	r3, [pc, #160]	; (800711c <HAL_InitTick+0xc8>)
 800707a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800707e:	4a27      	ldr	r2, [pc, #156]	; (800711c <HAL_InitTick+0xc8>)
 8007080:	f043 0310 	orr.w	r3, r3, #16
 8007084:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8007088:	4b24      	ldr	r3, [pc, #144]	; (800711c <HAL_InitTick+0xc8>)
 800708a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800708e:	f003 0310 	and.w	r3, r3, #16
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007096:	f107 0210 	add.w	r2, r7, #16
 800709a:	f107 0314 	add.w	r3, r7, #20
 800709e:	4611      	mov	r1, r2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f00c fa77 	bl	8013594 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <HAL_InitTick+0x6a>
 80070b0:	e001      	b.n	80070b6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e02b      	b.n	800710e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80070b6:	f00c fa41 	bl	801353c <HAL_RCC_GetPCLK1Freq>
 80070ba:	63f8      	str	r0, [r7, #60]	; 0x3c
 80070bc:	e004      	b.n	80070c8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80070be:	f00c fa3d 	bl	801353c <HAL_RCC_GetPCLK1Freq>
 80070c2:	4603      	mov	r3, r0
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80070c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ca:	4a15      	ldr	r2, [pc, #84]	; (8007120 <HAL_InitTick+0xcc>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	0c9b      	lsrs	r3, r3, #18
 80070d2:	3b01      	subs	r3, #1
 80070d4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80070d6:	4b13      	ldr	r3, [pc, #76]	; (8007124 <HAL_InitTick+0xd0>)
 80070d8:	4a13      	ldr	r2, [pc, #76]	; (8007128 <HAL_InitTick+0xd4>)
 80070da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80070dc:	4b11      	ldr	r3, [pc, #68]	; (8007124 <HAL_InitTick+0xd0>)
 80070de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80070e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80070e4:	4a0f      	ldr	r2, [pc, #60]	; (8007124 <HAL_InitTick+0xd0>)
 80070e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80070ea:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <HAL_InitTick+0xd0>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070f0:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <HAL_InitTick+0xd0>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80070f6:	480b      	ldr	r0, [pc, #44]	; (8007124 <HAL_InitTick+0xd0>)
 80070f8:	f00d febd 	bl	8014e76 <HAL_TIM_Base_Init>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007102:	4808      	ldr	r0, [pc, #32]	; (8007124 <HAL_InitTick+0xd0>)
 8007104:	f00d ff18 	bl	8014f38 <HAL_TIM_Base_Start_IT>
 8007108:	4603      	mov	r3, r0
 800710a:	e000      	b.n	800710e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
}
 800710e:	4618      	mov	r0, r3
 8007110:	3740      	adds	r7, #64	; 0x40
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	2400005c 	.word	0x2400005c
 800711c:	58024400 	.word	0x58024400
 8007120:	431bde83 	.word	0x431bde83
 8007124:	240262e8 	.word	0x240262e8
 8007128:	40001000 	.word	0x40001000

0800712c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007130:	bf00      	nop
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800713a:	b480      	push	{r7}
 800713c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800713e:	e7fe      	b.n	800713e <HardFault_Handler+0x4>

08007140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007144:	e7fe      	b.n	8007144 <MemManage_Handler+0x4>

08007146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007146:	b480      	push	{r7}
 8007148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800714a:	e7fe      	b.n	800714a <BusFault_Handler+0x4>

0800714c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007150:	e7fe      	b.n	8007150 <UsageFault_Handler+0x4>

08007152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007152:	b480      	push	{r7}
 8007154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007156:	bf00      	nop
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8007164:	2004      	movs	r0, #4
 8007166:	f006 fd66 	bl	800dc36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800716a:	bf00      	nop
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007174:	4802      	ldr	r0, [pc, #8]	; (8007180 <TIM6_DAC_IRQHandler+0x10>)
 8007176:	f00d ff57 	bl	8015028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800717a:	bf00      	nop
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	240262e8 	.word	0x240262e8

08007184 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8007188:	4802      	ldr	r0, [pc, #8]	; (8007194 <LTDC_IRQHandler+0x10>)
 800718a:	f009 fbc3 	bl	8010914 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800718e:	bf00      	nop
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	24025fe0 	.word	0x24025fe0

08007198 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800719c:	4802      	ldr	r0, [pc, #8]	; (80071a8 <DMA2D_IRQHandler+0x10>)
 800719e:	f006 f881 	bl	800d2a4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80071a2:	bf00      	nop
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	24026088 	.word	0x24026088

080071ac <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80071b0:	4802      	ldr	r0, [pc, #8]	; (80071bc <OCTOSPI1_IRQHandler+0x10>)
 80071b2:	f00a fb5b 	bl	801186c <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80071b6:	bf00      	nop
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	24025f84 	.word	0x24025f84

080071c0 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80071c4:	4802      	ldr	r0, [pc, #8]	; (80071d0 <JPEG_IRQHandler+0x10>)
 80071c6:	f007 fe9e 	bl	800ef06 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 80071ca:	bf00      	nop
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	240260f0 	.word	0x240260f0

080071d4 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80071d8:	4803      	ldr	r0, [pc, #12]	; (80071e8 <MDMA_IRQHandler+0x14>)
 80071da:	f00a f805 	bl	80111e8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80071de:	4803      	ldr	r0, [pc, #12]	; (80071ec <MDMA_IRQHandler+0x18>)
 80071e0:	f00a f802 	bl	80111e8 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80071e4:	bf00      	nop
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	240261a0 	.word	0x240261a0
 80071ec:	2402620c 	.word	0x2402620c

080071f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
	return 1;
 80071f4:	2301      	movs	r3, #1
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <_kill>:

int _kill(int pid, int sig)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800720a:	f020 fb45 	bl	8027898 <__errno>
 800720e:	4603      	mov	r3, r0
 8007210:	2216      	movs	r2, #22
 8007212:	601a      	str	r2, [r3, #0]
	return -1;
 8007214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <_exit>:

void _exit (int status)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007228:	f04f 31ff 	mov.w	r1, #4294967295
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff ffe7 	bl	8007200 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007232:	e7fe      	b.n	8007232 <_exit+0x12>

08007234 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	e00a      	b.n	800725c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007246:	f3af 8000 	nop.w
 800724a:	4601      	mov	r1, r0
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	60ba      	str	r2, [r7, #8]
 8007252:	b2ca      	uxtb	r2, r1
 8007254:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	3301      	adds	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	dbf0      	blt.n	8007246 <_read+0x12>
	}

return len;
 8007264:	687b      	ldr	r3, [r7, #4]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b086      	sub	sp, #24
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	e009      	b.n	8007294 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	60ba      	str	r2, [r7, #8]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	4618      	mov	r0, r3
 800728a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	3301      	adds	r3, #1
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	429a      	cmp	r2, r3
 800729a:	dbf1      	blt.n	8007280 <_write+0x12>
	}
	return len;
 800729c:	687b      	ldr	r3, [r7, #4]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <_close>:

int _close(int file)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
	return -1;
 80072ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072ce:	605a      	str	r2, [r3, #4]
	return 0;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <_isatty>:

int _isatty(int file)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
	return 1;
 80072e6:	2301      	movs	r3, #1
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
	return 0;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007318:	4b11      	ldr	r3, [pc, #68]	; (8007360 <_sbrk+0x50>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <_sbrk+0x16>
		heap_end = &end;
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <_sbrk+0x50>)
 8007322:	4a10      	ldr	r2, [pc, #64]	; (8007364 <_sbrk+0x54>)
 8007324:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <_sbrk+0x50>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800732c:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <_sbrk+0x50>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4413      	add	r3, r2
 8007334:	466a      	mov	r2, sp
 8007336:	4293      	cmp	r3, r2
 8007338:	d907      	bls.n	800734a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800733a:	f020 faad 	bl	8027898 <__errno>
 800733e:	4603      	mov	r3, r0
 8007340:	220c      	movs	r2, #12
 8007342:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007344:	f04f 33ff 	mov.w	r3, #4294967295
 8007348:	e006      	b.n	8007358 <_sbrk+0x48>
	}

	heap_end += incr;
 800734a:	4b05      	ldr	r3, [pc, #20]	; (8007360 <_sbrk+0x50>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4413      	add	r3, r2
 8007352:	4a03      	ldr	r2, [pc, #12]	; (8007360 <_sbrk+0x50>)
 8007354:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007356:	68fb      	ldr	r3, [r7, #12]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	2400adfc 	.word	0x2400adfc
 8007364:	24026440 	.word	0x24026440

08007368 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8007374:	887b      	ldrh	r3, [r7, #2]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d010      	beq.n	800739c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800737a:	2b02      	cmp	r3, #2
 800737c:	dc13      	bgt.n	80073a6 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8007382:	2b01      	cmp	r3, #1
 8007384:	d005      	beq.n	8007392 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8007386:	e00e      	b.n	80073a6 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8007388:	f002 fc8c 	bl	8009ca4 <_ZN17TypedTextDatabase8getFontsEv>
 800738c:	4603      	mov	r3, r0
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	e00a      	b.n	80073a8 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8007392:	f002 fc87 	bl	8009ca4 <_ZN17TypedTextDatabase8getFontsEv>
 8007396:	4603      	mov	r3, r0
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	e005      	b.n	80073a8 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800739c:	f002 fc82 	bl	8009ca4 <_ZN17TypedTextDatabase8getFontsEv>
 80073a0:	4603      	mov	r3, r0
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	e000      	b.n	80073a8 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 80073a6:	2300      	movs	r3, #0
    }
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
    return bitmap_database;
 80073b4:	4b02      	ldr	r3, [pc, #8]	; (80073c0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	0802b69c 	.word	0x0802b69c

080073c4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80073c8:	2306      	movs	r3, #6
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
    {
 80073dc:	4a04      	ldr	r2, [pc, #16]	; (80073f0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	601a      	str	r2, [r3, #0]
    }
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	0802b98c 	.word	0x0802b98c

080073f4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
    }
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff ffe9 	bl	80073d4 <_ZN8touchgfx4FontD1Ev>
 8007402:	2114      	movs	r1, #20
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f020 f9e6 	bl	80277d6 <_ZdlPvj>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8007414:	b590      	push	{r4, r7, lr}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8007420:	887b      	ldrh	r3, [r7, #2]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8007426:	2300      	movs	r3, #0
 8007428:	e010      	b.n	800744c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	681c      	ldr	r4, [r3, #0]
 800743a:	f107 030f 	add.w	r3, r7, #15
 800743e:	f107 0210 	add.w	r2, r7, #16
 8007442:	8879      	ldrh	r1, [r7, #2]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	47a0      	blx	r4
 8007448:	6178      	str	r0, [r7, #20]
        return glyph;
 800744a:	697b      	ldr	r3, [r7, #20]
    }
 800744c:	4618      	mov	r0, r3
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	bd90      	pop	{r4, r7, pc}

08007454 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	89db      	ldrh	r3, [r3, #14]
    }
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8a1b      	ldrh	r3, [r3, #16]
    }
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	88db      	ldrh	r3, [r3, #6]
    }
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	889b      	ldrh	r3, [r3, #4]
    }
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7a9b      	ldrb	r3, [r3, #10]
 80074c0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80074c4:	b2db      	uxtb	r3, r3
    }
 80074c6:	4618      	mov	r0, r3
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7a9b      	ldrb	r3, [r3, #10]
 80074de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80074e2:	b2db      	uxtb	r3, r3
    }
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	4a05      	ldr	r2, [pc, #20]	; (8007510 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff ff67 	bl	80073d4 <_ZN8touchgfx4FontD1Ev>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	0802c6f8 	.word	0x0802c6f8

08007514 <_ZN8touchgfx9ConstFontD0Ev>:
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff ffe7 	bl	80074f0 <_ZN8touchgfx9ConstFontD1Ev>
 8007522:	211c      	movs	r1, #28
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f020 f956 	bl	80277d6 <_ZdlPvj>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	4a05      	ldr	r2, [pc, #20]	; (8007554 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff ffd3 	bl	80074f0 <_ZN8touchgfx9ConstFontD1Ev>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	0802b814 	.word	0x0802b814

08007558 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff ffe7 	bl	8007534 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007566:	212c      	movs	r1, #44	; 0x2c
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f020 f934 	bl	80277d6 <_ZdlPvj>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
          visible(true)
 8007598:	4a14      	ldr	r2, [pc, #80]	; (80075ec <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fb fc20 	bl	8002de8 <_ZN8touchgfx4RectC1Ev>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	330c      	adds	r3, #12
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fb fc1b 	bl	8002de8 <_ZN8touchgfx4RectC1Ev>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	615a      	str	r2, [r3, #20]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	619a      	str	r2, [r3, #24]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	61da      	str	r2, [r3, #28]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	841a      	strh	r2, [r3, #32]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	845a      	strh	r2, [r3, #34]	; 0x22
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	0802c690 	.word	0x0802c690

080075f0 <_ZN8touchgfx8Drawable14getNextSiblingEv>:
    Drawable* getNextSibling()
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
        return nextSibling;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
    }
 80075fc:	4618      	mov	r0, r3
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	4603      	mov	r3, r0
 8007618:	817b      	strh	r3, [r7, #10]
 800761a:	460b      	mov	r3, r1
 800761c:	813b      	strh	r3, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 8007622:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007626:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800762a:	4619      	mov	r1, r3
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 f819 	bl	8007664 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8007632:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800763a:	4619      	mov	r1, r3
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f82f 	bl	80076a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8007642:	bf00      	nop
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <_ZNK8touchgfx8Drawable4getXEv>:
    int16_t getX() const
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
        return rect.x;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]
 8007670:	4613      	mov	r3, r2
 8007672:	803b      	strh	r3, [r7, #0]
        setX(x);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3330      	adds	r3, #48	; 0x30
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007680:	4611      	mov	r1, r2
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
        setY(y);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3334      	adds	r3, #52	; 0x34
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007692:	4611      	mov	r1, r2
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
    }
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	807b      	strh	r3, [r7, #2]
 80076ac:	4613      	mov	r3, r2
 80076ae:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3338      	adds	r3, #56	; 0x38
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80076bc:	4611      	mov	r1, r2
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	4798      	blx	r3
        setHeight(height);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	333c      	adds	r3, #60	; 0x3c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80076ce:	4611      	mov	r1, r2
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	4798      	blx	r3
    }
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	4618      	mov	r0, r3
 80076ea:	f015 fa48 	bl	801cb7e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8007700:	4a07      	ldr	r2, [pc, #28]	; (8007720 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	605a      	str	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	721a      	strb	r2, [r3, #8]
    {
    }
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	0802b788 	.word	0x0802b788

08007724 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
    {
 800772c:	4a04      	ldr	r2, [pc, #16]	; (8007740 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	601a      	str	r2, [r3, #0]
    }
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	0802b788 	.word	0x0802b788

08007744 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
    }
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff ffe9 	bl	8007724 <_ZN8touchgfx10TransitionD1Ev>
 8007752:	210c      	movs	r1, #12
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f020 f83e 	bl	80277d6 <_ZdlPvj>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
    {
    }
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
    {
    }
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
    {
    }
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 80077a8:	f015 f99c 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 80077ac:	4603      	mov	r3, r0
 80077ae:	4618      	mov	r0, r3
 80077b0:	f015 fe0a 	bl	801d3c8 <_ZN8touchgfx11Application10invalidateEv>
    }
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	605a      	str	r2, [r3, #4]
    }
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af02      	add	r7, sp, #8
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
        {
            return Rect(0, 0, rect.width, rect.height);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	4613      	mov	r3, r2
 80077f2:	2200      	movs	r2, #0
 80077f4:	2100      	movs	r1, #0
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fc fa45 	bl	8003c86 <_ZN8touchgfx4RectC1Essss>
        }
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
        {
        }
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4618      	mov	r0, r3
 8007828:	f015 fa4a 	bl	801ccc0 <_ZN8touchgfx11ApplicationC1Ev>
 800782c:	4a09      	ldr	r2, [pc, #36]	; (8007854 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a04      	ldr	r2, [pc, #16]	; (8007858 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8007846:	6013      	str	r3, [r2, #0]
    }
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	0802b0b8 	.word	0x0802b0b8
 8007858:	24025d54 	.word	0x24025d54

0800785c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	601a      	str	r2, [r3, #0]
    }
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	721a      	strb	r2, [r3, #8]
    }
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	605a      	str	r2, [r3, #4]
    }
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
	...

080078b0 <_ZN8touchgfx6WidgetC1Ev>:
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff fe68 	bl	8007590 <_ZN8touchgfx8DrawableC1Ev>
 80078c0:	4a03      	ldr	r2, [pc, #12]	; (80078d0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	0802b1e4 	.word	0x0802b1e4

080078d4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7ff ff9a 	bl	800781c <_ZN8touchgfx14MVPApplicationC1Ev>
 80078e8:	4a12      	ldr	r2, [pc, #72]	; (8007934 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 f929 	bl	8007b4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800790a:	f7f9 f88f 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800790e:	4603      	mov	r3, r0
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	3208      	adds	r2, #8
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	2100      	movs	r1, #0
 8007918:	4618      	mov	r0, r3
 800791a:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800791c:	f7fc faf8 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 8007920:	4603      	mov	r3, r0
 8007922:	4618      	mov	r0, r3
 8007924:	f01b f933 	bl	8022b8e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	0802b054 	.word	0x0802b054

08007938 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	4611      	mov	r1, r2
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff ffe9 	bl	8007938 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	605a      	str	r2, [r3, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	3308      	adds	r3, #8
 8007974:	3208      	adds	r2, #8
 8007976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800797a:	e883 0003 	stmia.w	r3, {r0, r1}
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8007988:	b590      	push	{r4, r7, lr}
 800798a:	b089      	sub	sp, #36	; 0x24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8007996:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8007998:	61bb      	str	r3, [r7, #24]
 800799a:	2300      	movs	r3, #0
 800799c:	61fb      	str	r3, [r7, #28]
 800799e:	f107 0008 	add.w	r0, r7, #8
 80079a2:	f107 0318 	add.w	r3, r7, #24
 80079a6:	cb0c      	ldmia	r3, {r2, r3}
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	f000 f8eb 	bl	8007b84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80079ae:	f107 0308 	add.w	r3, r7, #8
 80079b2:	4619      	mov	r1, r3
 80079b4:	4620      	mov	r0, r4
 80079b6:	f7ff ffcb 	bl	8007950 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80079ba:	f107 0308 	add.w	r3, r7, #8
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fc f80e 	bl	80039e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80079d0:	bf00      	nop
 80079d2:	3724      	adds	r7, #36	; 0x24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd90      	pop	{r4, r7, pc}
 80079d8:	080079dd 	.word	0x080079dd

080079dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80079f0:	461a      	mov	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80079fc:	4804      	ldr	r0, [pc, #16]	; (8007a10 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80079fe:	f000 f8f3 	bl	8007be8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	24025d48 	.word	0x24025d48
 8007a10:	24025d44 	.word	0x24025d44

08007a14 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv>:

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionWest()
{
 8007a14:	b590      	push	{r4, r7, lr}
 8007a16:	b089      	sub	sp, #36	; 0x24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenWipeTransitionWestImpl);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8007a22:	4b10      	ldr	r3, [pc, #64]	; (8007a64 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv+0x50>)
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	2300      	movs	r3, #0
 8007a28:	61fb      	str	r3, [r7, #28]
 8007a2a:	f107 0008 	add.w	r0, r7, #8
 8007a2e:	f107 0318 	add.w	r3, r7, #24
 8007a32:	cb0c      	ldmia	r3, {r2, r3}
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	f000 f8a5 	bl	8007b84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8007a3a:	f107 0308 	add.w	r3, r7, #8
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4620      	mov	r0, r4
 8007a42:	f7ff ff85 	bl	8007950 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8007a46:	f107 0308 	add.w	r3, r7, #8
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fb ffc8 	bl	80039e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8007a5c:	bf00      	nop
 8007a5e:	3724      	adds	r7, #36	; 0x24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd90      	pop	{r4, r7, pc}
 8007a64:	08007a69 	.word	0x08007a69

08007a68 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionWestImpl()
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	4b04      	ldr	r3, [pc, #16]	; (8007a98 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv+0x30>)
 8007a88:	4804      	ldr	r0, [pc, #16]	; (8007a9c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv+0x34>)
 8007a8a:	f000 f9c7 	bl	8007e1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	24025d48 	.word	0x24025d48
 8007a9c:	24025d44 	.word	0x24025d44

08007aa0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEast()
{
 8007aa0:	b590      	push	{r4, r7, lr}
 8007aa2:	b089      	sub	sp, #36	; 0x24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8007aae:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x50>)
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	f107 0008 	add.w	r0, r7, #8
 8007aba:	f107 0318 	add.w	r3, r7, #24
 8007abe:	cb0c      	ldmia	r3, {r2, r3}
 8007ac0:	6879      	ldr	r1, [r7, #4]
 8007ac2:	f000 f85f 	bl	8007b84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8007ac6:	f107 0308 	add.w	r3, r7, #8
 8007aca:	4619      	mov	r1, r3
 8007acc:	4620      	mov	r0, r4
 8007ace:	f7ff ff3f 	bl	8007950 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8007ad2:	f107 0308 	add.w	r3, r7, #8
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fb ff82 	bl	80039e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8007ae8:	bf00      	nop
 8007aea:	3724      	adds	r7, #36	; 0x24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd90      	pop	{r4, r7, pc}
 8007af0:	08007af5 	.word	0x08007af5

08007af4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x30>)
 8007b14:	4804      	ldr	r0, [pc, #16]	; (8007b28 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x34>)
 8007b16:	f000 fa9d 	bl	8008054 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	24025d48 	.word	0x24025d48
 8007b28:	24025d44 	.word	0x24025d44

08007b2c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	0802b104 	.word	0x0802b104

08007b4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff ffe8 	bl	8007b2c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8007b5c:	4a08      	ldr	r2, [pc, #32]	; (8007b80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	605a      	str	r2, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	609a      	str	r2, [r3, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	60da      	str	r2, [r3, #12]
    }
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	0802b0a0 	.word	0x0802b0a0

08007b84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4639      	mov	r1, r7
 8007b90:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff ffc8 	bl	8007b2c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8007b9c:	4a08      	ldr	r2, [pc, #32]	; (8007bc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	605a      	str	r2, [r3, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3308      	adds	r3, #8
 8007bac:	463a      	mov	r2, r7
 8007bae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bb2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	0802b0a0 	.word	0x0802b0a0

08007bc4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff fd92 	bl	80076f8 <_ZN8touchgfx10TransitionC1Ev>
 8007bd4:	4a03      	ldr	r2, [pc, #12]	; (8007be4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	0802b764 	.word	0x0802b764

08007be8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8007be8:	b590      	push	{r4, r7, lr}
 8007bea:	b08f      	sub	sp, #60	; 0x3c
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3320      	adds	r3, #32
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2be3      	cmp	r3, #227	; 0xe3
 8007c0c:	d805      	bhi.n	8007c1a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8007c0e:	4b7e      	ldr	r3, [pc, #504]	; (8007e08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8007c10:	4a7e      	ldr	r2, [pc, #504]	; (8007e0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8007c12:	21a3      	movs	r1, #163	; 0xa3
 8007c14:	487e      	ldr	r0, [pc, #504]	; (8007e10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007c16:	f01f fe0d 	bl	8027834 <__assert_func>
 8007c1a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3320      	adds	r3, #32
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	4798      	blx	r3
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b0f      	cmp	r3, #15
 8007c32:	d805      	bhi.n	8007c40 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8007c34:	4b77      	ldr	r3, [pc, #476]	; (8007e14 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8007c36:	4a75      	ldr	r2, [pc, #468]	; (8007e0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8007c38:	21a4      	movs	r1, #164	; 0xa4
 8007c3a:	4875      	ldr	r0, [pc, #468]	; (8007e10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007c3c:	f01f fdfa 	bl	8027834 <__assert_func>
 8007c40:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3320      	adds	r3, #32
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b0b      	cmp	r3, #11
 8007c58:	d805      	bhi.n	8007c66 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8007c5a:	4b6f      	ldr	r3, [pc, #444]	; (8007e18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8007c5c:	4a6b      	ldr	r2, [pc, #428]	; (8007e0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8007c5e:	21a5      	movs	r1, #165	; 0xa5
 8007c60:	486b      	ldr	r0, [pc, #428]	; (8007e10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007c62:	f01f fde7 	bl	8027834 <__assert_func>
 8007c66:	bf00      	nop
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8007c74:	f014 ff36 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fd2e 	bl	80076dc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d008      	beq.n	8007c9a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	330c      	adds	r3, #12
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4610      	mov	r0, r2
 8007c98:	4798      	blx	r3
    if (*currentTrans)
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4610      	mov	r0, r2
 8007cb0:	4798      	blx	r3
    if (*currentScreen)
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
    if (*currentPresenter)
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d008      	beq.n	8007ce6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4798      	blx	r3
    if (*currentScreen)
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d007      	beq.n	8007cfe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4798      	blx	r3
    if (*currentPresenter)
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d008      	beq.n	8007d18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3308      	adds	r3, #8
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
}
 8007d18:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fab3 	bl	800828c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8007d26:	4603      	mov	r3, r0
 8007d28:	4619      	mov	r1, r3
 8007d2a:	200c      	movs	r0, #12
 8007d2c:	f7ff fc24 	bl	8007578 <_ZnwjPv>
 8007d30:	4604      	mov	r4, r0
 8007d32:	4620      	mov	r0, r4
 8007d34:	f7ff ff46 	bl	8007bc4 <_ZN8touchgfx12NoTransitionC1Ev>
 8007d38:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	2100      	movs	r1, #0
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 fab6 	bl	80082b2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8007d46:	4603      	mov	r3, r0
 8007d48:	4619      	mov	r1, r3
 8007d4a:	20e4      	movs	r0, #228	; 0xe4
 8007d4c:	f7ff fc14 	bl	8007578 <_ZnwjPv>
 8007d50:	4604      	mov	r4, r0
 8007d52:	4620      	mov	r0, r4
 8007d54:	f002 f90a 	bl	8009f6c <_ZN11Screen1ViewC1Ev>
 8007d58:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fab9 	bl	80082d8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8007d66:	4603      	mov	r3, r0
 8007d68:	4619      	mov	r1, r3
 8007d6a:	2010      	movs	r0, #16
 8007d6c:	f7ff fc04 	bl	8007578 <_ZnwjPv>
 8007d70:	4604      	mov	r4, r0
 8007d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d74:	4620      	mov	r0, r4
 8007d76:	f002 f8a3 	bl	8009ec0 <_ZN16Screen1PresenterC1ER11Screen1View>
 8007d7a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d80:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d86:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d8c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	3304      	adds	r3, #4
 8007d98:	e000      	b.n	8007d9c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007da0:	f7ff fd5c 	bl	800785c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8007da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da6:	3304      	adds	r3, #4
 8007da8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff fd71 	bl	8007892 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 faa2 	bl	80082fe <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	61bb      	str	r3, [r7, #24]
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	330c      	adds	r3, #12
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69f8      	ldr	r0, [r7, #28]
 8007dd0:	4798      	blx	r3
    newPresenter->activate();
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69b8      	ldr	r0, [r7, #24]
 8007dda:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007ddc:	6979      	ldr	r1, [r7, #20]
 8007dde:	69f8      	ldr	r0, [r7, #28]
 8007de0:	f016 fb5a 	bl	801e498 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3310      	adds	r3, #16
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6978      	ldr	r0, [r7, #20]
 8007dee:	4798      	blx	r3
    newTransition->invalidate();
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3314      	adds	r3, #20
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6978      	ldr	r0, [r7, #20]
 8007dfa:	4798      	blx	r3
}
 8007dfc:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	373c      	adds	r7, #60	; 0x3c
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd90      	pop	{r4, r7, pc}
 8007e08:	0802a498 	.word	0x0802a498
 8007e0c:	0802a528 	.word	0x0802a528
 8007e10:	0802a62c 	.word	0x0802a62c
 8007e14:	0802a674 	.word	0x0802a674
 8007e18:	0802a718 	.word	0x0802a718

08007e1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b08f      	sub	sp, #60	; 0x3c
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3320      	adds	r3, #32
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2be3      	cmp	r3, #227	; 0xe3
 8007e40:	d805      	bhi.n	8007e4e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8007e42:	4b7f      	ldr	r3, [pc, #508]	; (8008040 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8007e44:	4a7f      	ldr	r2, [pc, #508]	; (8008044 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007e46:	21a3      	movs	r1, #163	; 0xa3
 8007e48:	487f      	ldr	r0, [pc, #508]	; (8008048 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8007e4a:	f01f fcf3 	bl	8027834 <__assert_func>
 8007e4e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3320      	adds	r3, #32
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4610      	mov	r0, r2
 8007e60:	4798      	blx	r3
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b0f      	cmp	r3, #15
 8007e66:	d805      	bhi.n	8007e74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8007e68:	4b78      	ldr	r3, [pc, #480]	; (800804c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8007e6a:	4a76      	ldr	r2, [pc, #472]	; (8008044 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007e6c:	21a4      	movs	r1, #164	; 0xa4
 8007e6e:	4876      	ldr	r0, [pc, #472]	; (8008048 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8007e70:	f01f fce0 	bl	8027834 <__assert_func>
 8007e74:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3320      	adds	r3, #32
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b37      	cmp	r3, #55	; 0x37
 8007e8c:	d805      	bhi.n	8007e9a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8007e8e:	4b70      	ldr	r3, [pc, #448]	; (8008050 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8007e90:	4a6c      	ldr	r2, [pc, #432]	; (8008044 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007e92:	21a5      	movs	r1, #165	; 0xa5
 8007e94:	486c      	ldr	r0, [pc, #432]	; (8008048 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8007e96:	f01f fccd 	bl	8027834 <__assert_func>
 8007e9a:	bf00      	nop
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8007ea8:	f014 fe1c 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 8007eac:	4603      	mov	r3, r0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff fc14 	bl	80076dc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	330c      	adds	r3, #12
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4798      	blx	r3
    if (*currentTrans)
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4798      	blx	r3
    if (*currentScreen)
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d008      	beq.n	8007f00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3314      	adds	r3, #20
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
    if (*currentPresenter)
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d008      	beq.n	8007f1a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3304      	adds	r3, #4
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4610      	mov	r0, r2
 8007f18:	4798      	blx	r3
    if (*currentScreen)
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4798      	blx	r3
    if (*currentPresenter)
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d008      	beq.n	8007f4c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3308      	adds	r3, #8
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4798      	blx	r3
}
 8007f4c:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	2100      	movs	r1, #0
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 f9e0 	bl	800831a <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	2038      	movs	r0, #56	; 0x38
 8007f60:	f7ff fb0a 	bl	8007578 <_ZnwjPv>
 8007f64:	4604      	mov	r4, r0
 8007f66:	2114      	movs	r1, #20
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fa1d 	bl	80083a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>
 8007f6e:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f99b 	bl	80082b2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	4619      	mov	r1, r3
 8007f80:	20e4      	movs	r0, #228	; 0xe4
 8007f82:	f7ff faf9 	bl	8007578 <_ZnwjPv>
 8007f86:	4604      	mov	r4, r0
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f001 ffef 	bl	8009f6c <_ZN11Screen1ViewC1Ev>
 8007f8e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f99e 	bl	80082d8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	2010      	movs	r0, #16
 8007fa2:	f7ff fae9 	bl	8007578 <_ZnwjPv>
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007faa:	4620      	mov	r0, r4
 8007fac:	f001 ff88 	bl	8009ec0 <_ZN16Screen1PresenterC1ER11Screen1View>
 8007fb0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fbc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	3304      	adds	r3, #4
 8007fce:	e000      	b.n	8007fd2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007fd6:	f7ff fc41 	bl	800785c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	3304      	adds	r3, #4
 8007fde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff fc56 	bl	8007892 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 f987 	bl	80082fe <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	61bb      	str	r3, [r7, #24]
 8007ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffa:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	330c      	adds	r3, #12
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69f8      	ldr	r0, [r7, #28]
 8008006:	4798      	blx	r3
    newPresenter->activate();
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69b8      	ldr	r0, [r7, #24]
 8008010:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8008012:	6979      	ldr	r1, [r7, #20]
 8008014:	69f8      	ldr	r0, [r7, #28]
 8008016:	f016 fa3f 	bl	801e498 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3310      	adds	r3, #16
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6978      	ldr	r0, [r7, #20]
 8008024:	4798      	blx	r3
    newTransition->invalidate();
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3314      	adds	r3, #20
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6978      	ldr	r0, [r7, #20]
 8008030:	4798      	blx	r3
}
 8008032:	bf00      	nop
    return newPresenter;
 8008034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008036:	4618      	mov	r0, r3
 8008038:	373c      	adds	r7, #60	; 0x3c
 800803a:	46bd      	mov	sp, r7
 800803c:	bd90      	pop	{r4, r7, pc}
 800803e:	bf00      	nop
 8008040:	0802a498 	.word	0x0802a498
 8008044:	0802a7bc 	.word	0x0802a7bc
 8008048:	0802a62c 	.word	0x0802a62c
 800804c:	0802a674 	.word	0x0802a674
 8008050:	0802a718 	.word	0x0802a718

08008054 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8008054:	b590      	push	{r4, r7, lr}
 8008056:	b08f      	sub	sp, #60	; 0x3c
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3320      	adds	r3, #32
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4610      	mov	r0, r2
 8008072:	4798      	blx	r3
 8008074:	4603      	mov	r3, r0
 8008076:	2be3      	cmp	r3, #227	; 0xe3
 8008078:	d805      	bhi.n	8008086 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800807a:	4b7f      	ldr	r3, [pc, #508]	; (8008278 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800807c:	4a7f      	ldr	r2, [pc, #508]	; (800827c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800807e:	21a3      	movs	r1, #163	; 0xa3
 8008080:	487f      	ldr	r0, [pc, #508]	; (8008280 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8008082:	f01f fbd7 	bl	8027834 <__assert_func>
 8008086:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3320      	adds	r3, #32
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4610      	mov	r0, r2
 8008098:	4798      	blx	r3
 800809a:	4603      	mov	r3, r0
 800809c:	2b0f      	cmp	r3, #15
 800809e:	d805      	bhi.n	80080ac <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 80080a0:	4b78      	ldr	r3, [pc, #480]	; (8008284 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80080a2:	4a76      	ldr	r2, [pc, #472]	; (800827c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80080a4:	21a4      	movs	r1, #164	; 0xa4
 80080a6:	4876      	ldr	r0, [pc, #472]	; (8008280 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80080a8:	f01f fbc4 	bl	8027834 <__assert_func>
 80080ac:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3320      	adds	r3, #32
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4610      	mov	r0, r2
 80080be:	4798      	blx	r3
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b3f      	cmp	r3, #63	; 0x3f
 80080c4:	d805      	bhi.n	80080d2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 80080c6:	4b70      	ldr	r3, [pc, #448]	; (8008288 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80080c8:	4a6c      	ldr	r2, [pc, #432]	; (800827c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80080ca:	21a5      	movs	r1, #165	; 0xa5
 80080cc:	486c      	ldr	r0, [pc, #432]	; (8008280 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80080ce:	f01f fbb1 	bl	8027834 <__assert_func>
 80080d2:	bf00      	nop
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80080e0:	f014 fd00 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 80080e4:	4603      	mov	r3, r0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff faf8 	bl	80076dc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d008      	beq.n	8008106 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	330c      	adds	r3, #12
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4610      	mov	r0, r2
 8008104:	4798      	blx	r3
    if (*currentTrans)
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4610      	mov	r0, r2
 800811c:	4798      	blx	r3
    if (*currentScreen)
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d008      	beq.n	8008138 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3314      	adds	r3, #20
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4610      	mov	r0, r2
 8008136:	4798      	blx	r3
    if (*currentPresenter)
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d008      	beq.n	8008152 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3304      	adds	r3, #4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4610      	mov	r0, r2
 8008150:	4798      	blx	r3
    if (*currentScreen)
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d007      	beq.n	800816a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4610      	mov	r0, r2
 8008168:	4798      	blx	r3
    if (*currentPresenter)
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d008      	beq.n	8008184 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3308      	adds	r3, #8
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4610      	mov	r0, r2
 8008182:	4798      	blx	r3
}
 8008184:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	2100      	movs	r1, #0
 800818c:	4618      	mov	r0, r3
 800818e:	f000 f94d 	bl	800842c <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 8008192:	4603      	mov	r3, r0
 8008194:	4619      	mov	r1, r3
 8008196:	2040      	movs	r0, #64	; 0x40
 8008198:	f7ff f9ee 	bl	8007578 <_ZnwjPv>
 800819c:	4604      	mov	r4, r0
 800819e:	2114      	movs	r1, #20
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 f979 	bl	8008498 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 80081a6:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f9c4 	bl	800853c <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 80081b4:	4603      	mov	r3, r0
 80081b6:	4619      	mov	r1, r3
 80081b8:	20e4      	movs	r0, #228	; 0xe4
 80081ba:	f7ff f9dd 	bl	8007578 <_ZnwjPv>
 80081be:	4604      	mov	r4, r0
 80081c0:	4620      	mov	r0, r4
 80081c2:	f001 ff87 	bl	800a0d4 <_ZN11Screen2ViewC1Ev>
 80081c6:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 f9c7 	bl	8008562 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 80081d4:	4603      	mov	r3, r0
 80081d6:	4619      	mov	r1, r3
 80081d8:	2010      	movs	r0, #16
 80081da:	f7ff f9cd 	bl	8007578 <_ZnwjPv>
 80081de:	4604      	mov	r4, r0
 80081e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081e2:	4620      	mov	r0, r4
 80081e4:	f001 ff20 	bl	800a028 <_ZN16Screen2PresenterC1ER11Screen2View>
 80081e8:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ee:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fa:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	3304      	adds	r3, #4
 8008206:	e000      	b.n	800820a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8008208:	2300      	movs	r3, #0
 800820a:	4619      	mov	r1, r3
 800820c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800820e:	f7ff fb25 	bl	800785c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	3304      	adds	r3, #4
 8008216:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fb3a 	bl	8007892 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008222:	4618      	mov	r0, r3
 8008224:	f000 f9b0 	bl	8008588 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	61fb      	str	r3, [r7, #28]
 800822c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822e:	61bb      	str	r3, [r7, #24]
 8008230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008232:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	330c      	adds	r3, #12
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	69f8      	ldr	r0, [r7, #28]
 800823e:	4798      	blx	r3
    newPresenter->activate();
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69b8      	ldr	r0, [r7, #24]
 8008248:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800824a:	6979      	ldr	r1, [r7, #20]
 800824c:	69f8      	ldr	r0, [r7, #28]
 800824e:	f016 f923 	bl	801e498 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3310      	adds	r3, #16
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6978      	ldr	r0, [r7, #20]
 800825c:	4798      	blx	r3
    newTransition->invalidate();
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3314      	adds	r3, #20
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6978      	ldr	r0, [r7, #20]
 8008268:	4798      	blx	r3
}
 800826a:	bf00      	nop
    return newPresenter;
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800826e:	4618      	mov	r0, r3
 8008270:	373c      	adds	r7, #60	; 0x3c
 8008272:	46bd      	mov	sp, r7
 8008274:	bd90      	pop	{r4, r7, pc}
 8008276:	bf00      	nop
 8008278:	0802a498 	.word	0x0802a498
 800827c:	0802a8d4 	.word	0x0802a8d4
 8008280:	0802a62c 	.word	0x0802a62c
 8008284:	0802a674 	.word	0x0802a674
 8008288:	0802a718 	.word	0x0802a718

0800828c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3324      	adds	r3, #36	; 0x24
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	887a      	ldrh	r2, [r7, #2]
 80082a2:	4611      	mov	r1, r2
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
 80082a8:	4603      	mov	r3, r0
    }
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3324      	adds	r3, #36	; 0x24
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	887a      	ldrh	r2, [r7, #2]
 80082c8:	4611      	mov	r1, r2
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	4798      	blx	r3
 80082ce:	4603      	mov	r3, r0
    }
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3324      	adds	r3, #36	; 0x24
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	887a      	ldrh	r2, [r7, #2]
 80082ee:	4611      	mov	r1, r2
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
 80082f4:	4603      	mov	r3, r0
    }
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3324      	adds	r3, #36	; 0x24
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	887a      	ldrh	r2, [r7, #2]
 8008330:	4611      	mov	r1, r2
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	4798      	blx	r3
 8008336:	4603      	mov	r3, r0
    }
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff fab0 	bl	80078b0 <_ZN8touchgfx6WidgetC1Ev>
 8008350:	4a03      	ldr	r2, [pc, #12]	; (8008360 <_ZN8touchgfx10Transition13FullSolidRectC1Ev+0x20>)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	0802b7ac 	.word	0x0802b7ac

08008364 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	4a05      	ldr	r2, [pc, #20]	; (8008384 <_ZN8touchgfx10Transition13FullSolidRectD1Ev+0x20>)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4618      	mov	r0, r3
 8008376:	f7fb fe29 	bl	8003fcc <_ZN8touchgfx6WidgetD1Ev>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	0802b7ac 	.word	0x0802b7ac

08008388 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7ff ffe7 	bl	8008364 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 8008396:	2128      	movs	r1, #40	; 0x28
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f01f fa1c 	bl	80277d6 <_ZdlPvj>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff f99e 	bl	80076f8 <_ZN8touchgfx10TransitionC1Ev>
 80083bc:	4a18      	ldr	r2, [pc, #96]	; (8008420 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x78>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	725a      	strb	r2, [r3, #9]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	729a      	strb	r2, [r3, #10]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	81da      	strh	r2, [r3, #14]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3310      	adds	r3, #16
 80083d8:	2228      	movs	r2, #40	; 0x28
 80083da:	2100      	movs	r1, #0
 80083dc:	4618      	mov	r0, r3
 80083de:	f01f fab9 	bl	8027954 <memset>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	3310      	adds	r3, #16
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff ffaa 	bl	8008340 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 80083ec:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b21a      	sxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	819a      	strh	r2, [r3, #12]
            break;
 80083f6:	bf00      	nop
            targetValue = HAL::DISPLAY_HEIGHT;
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f103 0010 	add.w	r0, r3, #16
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	b21a      	sxth	r2, r3
 8008404:	4b08      	ldr	r3, [pc, #32]	; (8008428 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x80>)
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b21b      	sxth	r3, r3
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	4613      	mov	r3, r2
 800840e:	2200      	movs	r2, #0
 8008410:	2100      	movs	r1, #0
 8008412:	f7ff f8f9 	bl	8007608 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	0802b71c 	.word	0x0802b71c
 8008424:	24025cfc 	.word	0x24025cfc
 8008428:	24025cfe 	.word	0x24025cfe

0800842c <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3324      	adds	r3, #36	; 0x24
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	887a      	ldrh	r2, [r7, #2]
 8008442:	4611      	mov	r1, r2
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	4798      	blx	r3
 8008448:	4603      	mov	r3, r0
    }
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	4a05      	ldr	r2, [pc, #20]	; (8008474 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4618      	mov	r0, r3
 8008466:	f7fb fdb1 	bl	8003fcc <_ZN8touchgfx6WidgetD1Ev>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	0802c348 	.word	0x0802c348

08008478 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff ffe7 	bl	8008454 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8008486:	212c      	movs	r1, #44	; 0x2c
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f01f f9a4 	bl	80277d6 <_ZdlPvj>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af02      	add	r7, sp, #8
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          snapshot(),
          animationSteps(transitionSteps),
          animationCounter(0),
          relativeValue(0)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff f926 	bl	80076f8 <_ZN8touchgfx10TransitionC1Ev>
 80084ac:	4a1f      	ldr	r2, [pc, #124]	; (800852c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x94>)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	330c      	adds	r3, #12
 80084b6:	4618      	mov	r0, r3
 80084b8:	f012 fe8c 	bl	801b1d4 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	78fa      	ldrb	r2, [r7, #3]
 80084c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	879a      	strh	r2, [r3, #60]	; 0x3c
    {
        if (!HAL::USE_ANIMATION_STORAGE)
 80084d2:	4b17      	ldr	r3, [pc, #92]	; (8008530 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x98>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	f083 0301 	eor.w	r3, r3, #1
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x50>
        {
            // No animation storage, don't slide
            done = true;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	721a      	strb	r2, [r3, #8]
            return;
 80084e6:	e01b      	b.n	8008520 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x88>
        }

        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f103 000c 	add.w	r0, r3, #12
 80084ee:	4b11      	ldr	r3, [pc, #68]	; (8008534 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x9c>)
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	b21a      	sxth	r2, r3
 80084f4:	4b10      	ldr	r3, [pc, #64]	; (8008538 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xa0>)
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b21b      	sxth	r3, r3
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	2100      	movs	r1, #0
 8008502:	f7ff f881 	bl	8007608 <_ZN8touchgfx8Drawable11setPositionEssss>
        snapshot.makeSnapshot();
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	330c      	adds	r3, #12
 800850a:	4618      	mov	r0, r3
 800850c:	f012 fde5 	bl	801b0da <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

        switch (templateDirection)
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 8008510:	4b08      	ldr	r3, [pc, #32]	; (8008534 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x9c>)
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	425b      	negs	r3, r3
 8008516:	b29b      	uxth	r3, r3
 8008518:	b21a      	sxth	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	875a      	strh	r2, [r3, #58]	; 0x3a
            break;
 800851e:	bf00      	nop
            break;
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
            break;
        }
    }
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	0802b740 	.word	0x0802b740
 8008530:	24025d07 	.word	0x24025d07
 8008534:	24025cfc 	.word	0x24025cfc
 8008538:	24025cfe 	.word	0x24025cfe

0800853c <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3324      	adds	r3, #36	; 0x24
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	887a      	ldrh	r2, [r7, #2]
 8008552:	4611      	mov	r1, r2
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
 8008558:	4603      	mov	r3, r0
    }
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3324      	adds	r3, #36	; 0x24
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	887a      	ldrh	r2, [r7, #2]
 8008578:	4611      	mov	r1, r2
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
 800857e:	4603      	mov	r3, r0
    }
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>:
class WipeTransition : public Transition
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	4a08      	ldr	r2, [pc, #32]	; (80085d0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev+0x2c>)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3310      	adds	r3, #16
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff fed4 	bl	8008364 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff f8b0 	bl	8007724 <_ZN8touchgfx10TransitionD1Ev>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	0802b71c 	.word	0x0802b71c

080085d4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED0Ev>:
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff ffe1 	bl	80085a4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>
 80085e2:	2138      	movs	r1, #56	; 0x38
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f01f f8f6 	bl	80277d6 <_ZdlPvj>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	4a08      	ldr	r2, [pc, #32]	; (8008620 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	330c      	adds	r3, #12
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff ff24 	bl	8008454 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff f888 	bl	8007724 <_ZN8touchgfx10TransitionD1Ev>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	0802b740 	.word	0x0802b740

08008624 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff ffe1 	bl	80085f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8008632:	2140      	movs	r1, #64	; 0x40
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f01f f8ce 	bl	80277d6 <_ZdlPvj>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <_ZN8touchgfx12NoTransitionD1Ev>:
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	4a05      	ldr	r2, [pc, #20]	; (8008664 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	601a      	str	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff f865 	bl	8007724 <_ZN8touchgfx10TransitionD1Ev>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	0802b764 	.word	0x0802b764

08008668 <_ZN8touchgfx12NoTransitionD0Ev>:
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff ffe7 	bl	8008644 <_ZN8touchgfx12NoTransitionD1Ev>
 8008676:	210c      	movs	r1, #12
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f01f f8ac 	bl	80277d6 <_ZdlPvj>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 8008688:	b580      	push	{r7, lr}
 800868a:	b08e      	sub	sp, #56	; 0x38
 800868c:	af02      	add	r7, sp, #8
 800868e:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4618      	mov	r0, r3
 8008694:	f7ff f866 	bl	8007764 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	7a9b      	ldrb	r3, [r3, #10]
 800869c:	3301      	adds	r3, #1
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter > animationSteps)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	7a9a      	ldrb	r2, [r3, #10]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	7a5b      	ldrb	r3, [r3, #9]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d906      	bls.n	80086be <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x36>
        {
            // Final step: stop the animation
            done = true;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	729a      	strb	r2, [r3, #10]
            return;
 80086bc:	e07a      	b.n	80087b4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x12c>
        }

        // Calculate value in [0;targetValue]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	7a9b      	ldrb	r3, [r3, #10]
 80086c2:	b298      	uxth	r0, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	7a5b      	ldrb	r3, [r3, #9]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	2100      	movs	r1, #0
 80086d2:	f015 fee7 	bl	801e4a4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80086d6:	4603      	mov	r3, r0
 80086d8:	461a      	mov	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	81da      	strh	r2, [r3, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d011      	beq.n	8008714 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8c>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80086fe:	2a00      	cmp	r2, #0
 8008700:	dd01      	ble.n	8008706 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x7e>
 8008702:	2201      	movs	r2, #1
 8008704:	e001      	b.n	800870a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x82>
 8008706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800870a:	4413      	add	r3, r2
 800870c:	b29b      	uxth	r3, r3
 800870e:	b21a      	sxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	81da      	strh	r2, [r3, #14]
                break;
            }
        case WEST:
            {
                // Cover must have width of remaining part and start after uncovered
                const uint16_t prevSolidPos = solid.getX();
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3310      	adds	r3, #16
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe ff96 	bl	800764a <_ZNK8touchgfx8Drawable4getXEv>
 800871e:	4603      	mov	r3, r0
 8008720:	85fb      	strh	r3, [r7, #46]	; 0x2e
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f103 0010 	add.w	r0, r3, #16
 8008728:	4b24      	ldr	r3, [pc, #144]	; (80087bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x134>)
 800872a:	881a      	ldrh	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008732:	b29b      	uxth	r3, r3
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	b29b      	uxth	r3, r3
 8008738:	b21b      	sxth	r3, r3
 800873a:	4619      	mov	r1, r3
 800873c:	f7fb fb20 	bl	8003d80 <_ZN8touchgfx8Drawable8setWidthEs>
                solid.setX(calculatedValue);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f103 0210 	add.w	r2, r3, #16
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f7fb faf8 	bl	8003d44 <_ZN8touchgfx8Drawable4setXEs>

                // Invalidate the uncovered part
                const uint16_t delta = calculatedValue - prevSolidPos;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800875a:	b29a      	uxth	r2, r3
 800875c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	85bb      	strh	r3, [r7, #44]	; 0x2c
                Rect r(prevSolidPos, 0, delta, HAL::DISPLAY_HEIGHT);
 8008762:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8008766:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800876a:	4b15      	ldr	r3, [pc, #84]	; (80087c0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x138>)
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	b21b      	sxth	r3, r3
 8008770:	f107 001c 	add.w	r0, r7, #28
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	4613      	mov	r3, r2
 8008778:	2200      	movs	r2, #0
 800877a:	f7fb fa84 	bl	8003c86 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	4618      	mov	r0, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3310      	adds	r3, #16
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f107 021c 	add.w	r2, r7, #28
 8008792:	4611      	mov	r1, r2
 8008794:	4798      	blx	r3
                break;
 8008796:	bf00      	nop
        }

        // The WipeTransition only draws to parts of the non-TFT
        // framebuffer. To avoid glitches in Double buffering mode
        // both framebuffers must be made identical.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	7a9b      	ldrb	r3, [r3, #10]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d109      	bne.n	80087b4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x12c>
 80087a0:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x13c>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x12c>
        {
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80087a8:	f014 f99c 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 80087ac:	4603      	mov	r3, r0
 80087ae:	4618      	mov	r0, r3
 80087b0:	f014 f99e 	bl	801caf0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }
    }
 80087b4:	3730      	adds	r7, #48	; 0x30
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	24025cfc 	.word	0x24025cfc
 80087c0:	24025cfe 	.word	0x24025cfe
 80087c4:	24025d06 	.word	0x24025d06

080087c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE8tearDownEv>:

    virtual void tearDown()
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6858      	ldr	r0, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3364      	adds	r3, #100	; 0x64
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	3210      	adds	r2, #16
 80087e2:	4611      	mov	r1, r2
 80087e4:	4798      	blx	r3
    }
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe ffc7 	bl	800778c <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6858      	ldr	r0, [r3, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3360      	adds	r3, #96	; 0x60
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	3210      	adds	r2, #16
 8008810:	4611      	mov	r1, r2
 8008812:	4798      	blx	r3
    }
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
    {
    }
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
     * Handles the tick event when transitioning. It moves the contents of the Screen's
     * container and a SnapshotWidget with a snapshot of the previous Screen. The direction
     * of the transition determines the direction the contents of the container and the
     * SnapshotWidget moves.
     */
    virtual void handleTickEvent()
 8008830:	b590      	push	{r4, r7, lr}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe ff92 	bl	8007764 <_ZN8touchgfx10Transition15handleTickEventEv>

        // Calculate new position or stop animation
        animationCounter++;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008846:	3301      	adds	r3, #1
 8008848:	b2da      	uxtb	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        if (animationCounter > animationSteps)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800885c:	429a      	cmp	r2, r3
 800885e:	d907      	bls.n	8008870 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
        {
            // Final step: stop the animation
            done = true;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            return;
 800886e:	e05f      	b.n	8008930 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x100>
        }

        // Calculate value in [0;targetValue]
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008876:	b298      	uxth	r0, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008884:	b29b      	uxth	r3, r3
 8008886:	2100      	movs	r1, #0
 8008888:	f015 fe0c 	bl	801e4a4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800888c:	4603      	mov	r3, r0
 800888e:	81fb      	strh	r3, [r7, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 8008890:	89fb      	ldrh	r3, [r7, #14]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	b29b      	uxth	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x84>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800889c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	dd01      	ble.n	80088a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x78>
 80088a4:	2201      	movs	r2, #1
 80088a6:	e001      	b.n	80088ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x7c>
 80088a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ac:	89fb      	ldrh	r3, [r7, #14]
 80088ae:	4413      	add	r3, r2
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	81fb      	strh	r3, [r7, #14]
        // Move snapshot
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            relativeValue = calculatedValue - snapshot.getX();
 80088b4:	89fc      	ldrh	r4, [r7, #14]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	330c      	adds	r3, #12
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe fec5 	bl	800764a <_ZNK8touchgfx8Drawable4getXEv>
 80088c0:	4603      	mov	r3, r0
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	1ae3      	subs	r3, r4, r3
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	b21a      	sxth	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	879a      	strh	r2, [r3, #60]	; 0x3c
            break;
 80088ce:	bf00      	nop
            relativeValue = calculatedValue - snapshot.getY();
            break;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	331c      	adds	r3, #28
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4610      	mov	r0, r2
 80088e0:	4798      	blx	r3
 80088e2:	60b8      	str	r0, [r7, #8]
        while (d)
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d018      	beq.n	800891c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xec>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() + relativeValue);
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3330      	adds	r3, #48	; 0x30
 80088f0:	681c      	ldr	r4, [r3, #0]
 80088f2:	68b8      	ldr	r0, [r7, #8]
 80088f4:	f7fe fea9 	bl	800764a <_ZNK8touchgfx8Drawable4getXEv>
 80088f8:	4603      	mov	r3, r0
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008902:	b29b      	uxth	r3, r3
 8008904:	4413      	add	r3, r2
 8008906:	b29b      	uxth	r3, r3
 8008908:	b21b      	sxth	r3, r3
 800890a:	4619      	mov	r1, r3
 800890c:	68b8      	ldr	r0, [r7, #8]
 800890e:	47a0      	blx	r4
                break;
 8008910:	bf00      	nop
            case NORTH:
            case SOUTH:
                d->setY(d->getY() + relativeValue);
                break;
            }
            d = d->getNextSibling();
 8008912:	68b8      	ldr	r0, [r7, #8]
 8008914:	f7fe fe6c 	bl	80075f0 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 8008918:	60b8      	str	r0, [r7, #8]
        while (d)
 800891a:	e7e3      	b.n	80088e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>
        }

        // Entire screen has changed, redraw
        screenContainer->invalidate();
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	461a      	mov	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3314      	adds	r3, #20
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4610      	mov	r0, r2
 800892e:	4798      	blx	r3
    }
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	bd90      	pop	{r4, r7, pc}
	...

08008938 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8008940:	4b0b      	ldr	r3, [pc, #44]	; (8008970 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00e      	beq.n	8008966 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
        {
            screenContainer->remove(snapshot);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6858      	ldr	r0, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3364      	adds	r3, #100	; 0x64
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	320c      	adds	r2, #12
 8008962:	4611      	mov	r1, r2
 8008964:	4798      	blx	r3
        }
    }
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	24025d07 	.word	0x24025d07

08008974 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 8008974:	b590      	push	{r4, r7, lr}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe ff04 	bl	800778c <_ZN8touchgfx10Transition4initEv>

        if (done)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	7a1b      	ldrb	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d131      	bne.n	80089f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x7c>
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	331c      	adds	r3, #28
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4610      	mov	r0, r2
 800899c:	4798      	blx	r3
 800899e:	60f8      	str	r0, [r7, #12]
        while (d)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d018      	beq.n	80089d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x64>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3330      	adds	r3, #48	; 0x30
 80089ac:	681c      	ldr	r4, [r3, #0]
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f7fe fe4b 	bl	800764a <_ZNK8touchgfx8Drawable4getXEv>
 80089b4:	4603      	mov	r3, r0
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80089be:	b29b      	uxth	r3, r3
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	b21b      	sxth	r3, r3
 80089c6:	4619      	mov	r1, r3
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	47a0      	blx	r4
                break;
 80089cc:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() - targetValue);
                break;
            }

            d = d->getNextSibling();
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7fe fe0e 	bl	80075f0 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 80089d4:	60f8      	str	r0, [r7, #12]
        while (d)
 80089d6:	e7e3      	b.n	80089a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x2c>
        }

        screenContainer->add(snapshot);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6858      	ldr	r0, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3360      	adds	r3, #96	; 0x60
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	320c      	adds	r2, #12
 80089ea:	4611      	mov	r1, r2
 80089ec:	4798      	blx	r3
 80089ee:	e000      	b.n	80089f2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x7e>
            return;
 80089f0:	bf00      	nop
    }
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd90      	pop	{r4, r7, pc}

080089f8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08e      	sub	sp, #56	; 0x38
 8008a2c:	af0a      	add	r7, sp, #40	; 0x28
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	4611      	mov	r1, r2
 8008a34:	461a      	mov	r2, r3
 8008a36:	460b      	mov	r3, r1
 8008a38:	80fb      	strh	r3, [r7, #6]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	88b9      	ldrh	r1, [r7, #4]
 8008a42:	88fa      	ldrh	r2, [r7, #6]
 8008a44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008a48:	9308      	str	r3, [sp, #32]
 8008a4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008a4c:	9307      	str	r3, [sp, #28]
 8008a4e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008a52:	9306      	str	r3, [sp, #24]
 8008a54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a58:	9305      	str	r3, [sp, #20]
 8008a5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a5e:	9304      	str	r3, [sp, #16]
 8008a60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a64:	9303      	str	r3, [sp, #12]
 8008a66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a6a:	9302      	str	r3, [sp, #8]
 8008a6c:	7f3b      	ldrb	r3, [r7, #28]
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	8b3b      	ldrh	r3, [r7, #24]
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	460b      	mov	r3, r1
 8008a76:	68b9      	ldr	r1, [r7, #8]
 8008a78:	f015 f94e 	bl	801dd18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8008a7c:	4a09      	ldr	r2, [pc, #36]	; (8008aa4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a86:	61da      	str	r2, [r3, #28]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8c:	621a      	str	r2, [r3, #32]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a92:	625a      	str	r2, [r3, #36]	; 0x24
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a98:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	0802b814 	.word	0x0802b814

08008aa8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	889b      	ldrh	r3, [r3, #4]
 8008abc:	0adb      	lsrs	r3, r3, #11
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4413      	add	r3, r2
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8008ada:	b480      	push	{r7}
 8008adc:	b089      	sub	sp, #36	; 0x24
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	607a      	str	r2, [r7, #4]
 8008ae6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	7b1b      	ldrb	r3, [r3, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	e030      	b.n	8008b5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6a1a      	ldr	r2, [r3, #32]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	7b5b      	ldrb	r3, [r3, #13]
 8008b06:	021b      	lsls	r3, r3, #8
 8008b08:	b21b      	sxth	r3, r3
 8008b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b0e:	b219      	sxth	r1, r3
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	7adb      	ldrb	r3, [r3, #11]
 8008b14:	b21b      	sxth	r3, r3
 8008b16:	430b      	orrs	r3, r1
 8008b18:	b21b      	sxth	r3, r3
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	7b1b      	ldrb	r3, [r3, #12]
 8008b26:	837b      	strh	r3, [r7, #26]
 8008b28:	8b7b      	ldrh	r3, [r7, #26]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d015      	beq.n	8008b5a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	897a      	ldrh	r2, [r7, #10]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d103      	bne.n	8008b40 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008b3e:	e00d      	b.n	8008b5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	897a      	ldrh	r2, [r7, #10]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d306      	bcc.n	8008b58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008b4a:	8b7b      	ldrh	r3, [r7, #26]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	837b      	strh	r3, [r7, #26]
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	3304      	adds	r3, #4
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	e7e7      	b.n	8008b28 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8008b58:	bf00      	nop
        }
    }
    return 0;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3724      	adds	r7, #36	; 0x24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	887a      	ldrh	r2, [r7, #2]
 8008b78:	801a      	strh	r2, [r3, #0]
    {
    }
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
    {
 8008b90:	4a06      	ldr	r2, [pc, #24]	; (8008bac <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fae0 	bl	8009160 <_ZN8touchgfx9ContainerD1Ev>
    }
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	0802c794 	.word	0x0802c794

08008bb0 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
    }
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff ffe5 	bl	8008b88 <_ZN8touchgfx6ScreenD1Ev>
 8008bbe:	213c      	movs	r1, #60	; 0x3c
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f01e fe08 	bl	80277d6 <_ZdlPvj>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
    {
    }
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
    {
    }
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
    {
    }
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
    {
    }
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3304      	adds	r3, #4
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f011 f881 	bl	8019d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4618      	mov	r0, r3
 8008c64:	2326      	movs	r3, #38	; 0x26
 8008c66:	461a      	mov	r2, r3
 8008c68:	2100      	movs	r1, #0
 8008c6a:	f01e fe73 	bl	8027954 <memset>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fe fe1d 	bl	80078b0 <_ZN8touchgfx6WidgetC1Ev>
 8008c76:	4a09      	ldr	r2, [pc, #36]	; (8008c9c <_ZN8touchgfx3BoxC1Ev+0x44>)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	22ff      	movs	r2, #255	; 0xff
 8008c80:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3328      	adds	r3, #40	; 0x28
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fa ffec 	bl	8003c68 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4618      	mov	r0, r3
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	0802c42c 	.word	0x0802c42c

08008ca0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	4a05      	ldr	r2, [pc, #20]	; (8008cf8 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	601a      	str	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fb f96f 	bl	8003fcc <_ZN8touchgfx6WidgetD1Ev>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	0802c2d8 	.word	0x0802c2d8

08008cfc <_ZN8touchgfx14AbstractButtonD0Ev>:
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff ffe7 	bl	8008cd8 <_ZN8touchgfx14AbstractButtonD1Ev>
 8008d0a:	2130      	movs	r1, #48	; 0x30
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f01e fd62 	bl	80277d6 <_ZdlPvj>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	887a      	ldrh	r2, [r7, #2]
 8008d2c:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	460b      	mov	r3, r1
 8008d44:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	887a      	ldrh	r2, [r7, #2]
 8008d4a:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The values set are overwritten on a subsequent call to setBitmaps.
     */
    void setIconXY(int16_t x, int16_t y)
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	807b      	strh	r3, [r7, #2]
 8008d64:	4613      	mov	r3, r2
 8008d66:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 8008d68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff ffd4 	bl	8008d1c <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 8008d74:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff ffdd 	bl	8008d3a <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <_ZN15Screen1ViewBase11applicationEv>:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8008d90:	f013 fea8 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 8008d94:	4603      	mov	r3, r0
    }
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	4a05      	ldr	r2, [pc, #20]	; (8008dc0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff fee9 	bl	8008b88 <_ZN8touchgfx6ScreenD1Ev>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	0802b8c0 	.word	0x0802b8c0

08008dc4 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff ffe7 	bl	8008da0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8008dd2:	2140      	movs	r1, #64	; 0x40
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f01e fcfe 	bl	80277d6 <_ZdlPvj>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8008de4:	b590      	push	{r4, r7, lr}
 8008de6:	b08f      	sub	sp, #60	; 0x3c
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 f92e 	bl	8009050 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8008df4:	4a69      	ldr	r2, [pc, #420]	; (8008f9c <_ZN15Screen1ViewBaseC1Ev+0x1b8>)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3340      	adds	r3, #64	; 0x40
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff ff2a 	bl	8008c58 <_ZN8touchgfx3BoxC1Ev>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8008e0a:	f107 0308 	add.w	r3, r7, #8
 8008e0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff fea8 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 8008e18:	f107 0308 	add.w	r3, r7, #8
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f012 fa2e 	bl	801b280 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3398      	adds	r3, #152	; 0x98
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f012 fd9b 	bl	801b964 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 8008e34:	4b5a      	ldr	r3, [pc, #360]	; (8008fa0 <_ZN15Screen1ViewBaseC1Ev+0x1bc>)
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	613b      	str	r3, [r7, #16]
 8008e3c:	f107 030c 	add.w	r3, r7, #12
 8008e40:	cb0c      	ldmia	r3, {r2, r3}
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	f000 f92a 	bl	800909c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008e4e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	f7fe fbd4 	bl	8007608 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008e66:	2300      	movs	r3, #0
 8008e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008e72:	2300      	movs	r3, #0
 8008e74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e7c:	041b      	lsls	r3, r3, #16
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008e84:	021b      	lsls	r3, r3, #8
 8008e86:	431a      	orrs	r2, r3
 8008e88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fa fee5 	bl	8003c68 <_ZN8touchgfx9colortypeC1Em>
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f7ff fefc 	bl	8008ca0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3340      	adds	r3, #64	; 0x40
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	f7ff fec1 	bl	8008c38 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_SPOTLIGHTS_ID));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8008ebc:	f107 0314 	add.w	r3, r7, #20
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff fe50 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 8008ec8:	f107 0314 	add.w	r3, r7, #20
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f012 fd6e 	bl	801b9b0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 480, 272);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8008eda:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	f7fe fb8e 	bl	8007608 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	336c      	adds	r3, #108	; 0x6c
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f012 f993 	bl	801b21e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    add(scalableImage1);
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	336c      	adds	r3, #108	; 0x6c
 8008efe:	4619      	mov	r1, r3
 8008f00:	4610      	mov	r0, r2
 8008f02:	f7ff fe99 	bl	8008c38 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithIcon1_1.setXY(120, 184);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	3398      	adds	r3, #152	; 0x98
 8008f0a:	22b8      	movs	r2, #184	; 0xb8
 8008f0c:	2178      	movs	r1, #120	; 0x78
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fba8 	bl	8007664 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithIcon1_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_ARROW_RIGHT_ALT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8008f1a:	f107 0318 	add.w	r3, r7, #24
 8008f1e:	2102      	movs	r1, #2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7ff fe21 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 8008f26:	f107 031c 	add.w	r3, r7, #28
 8008f2a:	2103      	movs	r1, #3
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fe1b 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 8008f32:	f107 0320 	add.w	r3, r7, #32
 8008f36:	2104      	movs	r1, #4
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff fe15 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 8008f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f42:	2105      	movs	r1, #5
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7ff fe0f 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 8008f4a:	f107 0020 	add.w	r0, r7, #32
 8008f4e:	f107 021c 	add.w	r2, r7, #28
 8008f52:	f107 0118 	add.w	r1, r7, #24
 8008f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f012 fc6b 	bl	801b83a <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonWithIcon1_1.setIconXY(97, 0);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3398      	adds	r3, #152	; 0x98
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2161      	movs	r1, #97	; 0x61
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7ff fef3 	bl	8008d58 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonWithIcon1_1.setAction(buttonCallback);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	33d4      	adds	r3, #212	; 0xd4
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	4610      	mov	r0, r2
 8008f80:	f7ff fe9c 	bl	8008cbc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(buttonWithIcon1_1);
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3398      	adds	r3, #152	; 0x98
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	f7ff fe53 	bl	8008c38 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4618      	mov	r0, r3
 8008f96:	3734      	adds	r7, #52	; 0x34
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd90      	pop	{r4, r7, pc}
 8008f9c:	0802b874 	.word	0x0802b874
 8008fa0:	08009025 	.word	0x08009025

08008fa4 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	4a0f      	ldr	r2, [pc, #60]	; (8008fec <_ZN15Screen1ViewBaseD1Ev+0x48>)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	33d4      	adds	r3, #212	; 0xd4
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f8b0 	bl	800911c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3398      	adds	r3, #152	; 0x98
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 f977 	bl	80092b4 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	336c      	adds	r3, #108	; 0x6c
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 f92e 	bl	800922c <_ZN8touchgfx13ScalableImageD1Ev>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3340      	adds	r3, #64	; 0x40
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 f8e5 	bl	80091a4 <_ZN8touchgfx3BoxD1Ev>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fedf 	bl	8008da0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	0802b874 	.word	0x0802b874

08008ff0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
}
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff ffd3 	bl	8008fa4 <_ZN15Screen1ViewBaseD1Ev>
 8008ffe:	21e4      	movs	r1, #228	; 0xe4
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f01e fbe8 	bl	80277d6 <_ZdlPvj>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]

}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithIcon1_1)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3398      	adds	r3, #152	; 0x98
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d106      	bne.n	8009046 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Screen1To2
        //When buttonWithIcon1_1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff fea5 	bl	8008d88 <_ZN15Screen1ViewBase11applicationEv>
 800903e:	4603      	mov	r3, r0
 8009040:	4618      	mov	r0, r3
 8009042:	f7fe fd2d 	bl	8007aa0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
    }
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4618      	mov	r0, r3
 800905c:	f015 f870 	bl	801e140 <_ZN8touchgfx6ScreenC1Ev>
 8009060:	4a05      	ldr	r2, [pc, #20]	; (8009078 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	0802b8c0 	.word	0x0802b8c0

0800907c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	4a04      	ldr	r2, [pc, #16]	; (8009098 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	0802b8f4 	.word	0x0802b8f4

0800909c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4639      	mov	r1, r7
 80090a8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff ffe4 	bl	800907c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80090b4:	4a08      	ldr	r2, [pc, #32]	; (80090d8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	605a      	str	r2, [r3, #4]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3308      	adds	r3, #8
 80090c4:	463a      	mov	r2, r7
 80090c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	0802b8a8 	.word	0x0802b8a8

080090dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
    }
 80090e4:	4a04      	ldr	r2, [pc, #16]	; (80090f8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	0802b8f4 	.word	0x0802b8f4

080090fc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
    }
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7ff ffe9 	bl	80090dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800910a:	2104      	movs	r1, #4
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f01e fb62 	bl	80277d6 <_ZdlPvj>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	4a05      	ldr	r2, [pc, #20]	; (800913c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4618      	mov	r0, r3
 800912e:	f7ff ffd5 	bl	80090dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4618      	mov	r0, r3
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	0802b8a8 	.word	0x0802b8a8

08009140 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff ffe7 	bl	800911c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800914e:	2110      	movs	r1, #16
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f01e fb40 	bl	80277d6 <_ZdlPvj>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4618      	mov	r0, r3
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	4a05      	ldr	r2, [pc, #20]	; (8009180 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4618      	mov	r0, r3
 8009172:	f7fa fda9 	bl	8003cc8 <_ZN8touchgfx8DrawableD1Ev>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4618      	mov	r0, r3
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	0802c0f0 	.word	0x0802c0f0

08009184 <_ZN8touchgfx9ContainerD0Ev>:
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff ffe7 	bl	8009160 <_ZN8touchgfx9ContainerD1Ev>
 8009192:	212c      	movs	r1, #44	; 0x2c
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f01e fb1e 	bl	80277d6 <_ZdlPvj>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	4a05      	ldr	r2, [pc, #20]	; (80091c4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fa ff09 	bl	8003fcc <_ZN8touchgfx6WidgetD1Ev>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	0802c42c 	.word	0x0802c42c

080091c8 <_ZN8touchgfx3BoxD0Ev>:
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7ff ffe7 	bl	80091a4 <_ZN8touchgfx3BoxD1Ev>
 80091d6:	212c      	movs	r1, #44	; 0x2c
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f01e fafc 	bl	80277d6 <_ZdlPvj>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4618      	mov	r0, r3
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	4a05      	ldr	r2, [pc, #20]	; (8009208 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fa fee7 	bl	8003fcc <_ZN8touchgfx6WidgetD1Ev>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	0802c580 	.word	0x0802c580

0800920c <_ZN8touchgfx5ImageD0Ev>:
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff ffe7 	bl	80091e8 <_ZN8touchgfx5ImageD1Ev>
 800921a:	212c      	movs	r1, #44	; 0x2c
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f01e fada 	bl	80277d6 <_ZdlPvj>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <_ZN8touchgfx13ScalableImageD1Ev>:
 * algorithm used. The rendering algorithm can be changed dynamically. Please note that
 * scaling images is done at runtime and may require a lot of calculations.
 *
 * @note Note that this widget does not support 1 bit per pixel color depth.
 */
class ScalableImage : public Image
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	4a05      	ldr	r2, [pc, #20]	; (800924c <_ZN8touchgfx13ScalableImageD1Ev+0x20>)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff ffd3 	bl	80091e8 <_ZN8touchgfx5ImageD1Ev>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	0802c3b8 	.word	0x0802c3b8

08009250 <_ZN8touchgfx13ScalableImageD0Ev>:
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7ff ffe7 	bl	800922c <_ZN8touchgfx13ScalableImageD1Ev>
 800925e:	212c      	movs	r1, #44	; 0x2c
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f01e fab8 	bl	80277d6 <_ZdlPvj>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	4a05      	ldr	r2, [pc, #20]	; (8009290 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff fd29 	bl	8008cd8 <_ZN8touchgfx14AbstractButtonD1Ev>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	0802c494 	.word	0x0802c494

08009294 <_ZN8touchgfx6ButtonD0Ev>:
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7ff ffe7 	bl	8009270 <_ZN8touchgfx6ButtonD1Ev>
 80092a2:	2134      	movs	r1, #52	; 0x34
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f01e fa96 	bl	80277d6 <_ZdlPvj>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	4a05      	ldr	r2, [pc, #20]	; (80092d4 <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff ffd3 	bl	8009270 <_ZN8touchgfx6ButtonD1Ev>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	0802c508 	.word	0x0802c508

080092d8 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff ffe7 	bl	80092b4 <_ZN8touchgfx14ButtonWithIconD1Ev>
 80092e6:	213c      	movs	r1, #60	; 0x3c
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f01e fa74 	bl	80277d6 <_ZdlPvj>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	68d2      	ldr	r2, [r2, #12]
 800930a:	1052      	asrs	r2, r2, #1
 800930c:	1898      	adds	r0, r3, r2
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	d102      	bne.n	8009320 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	e00a      	b.n	8009336 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	68d2      	ldr	r2, [r2, #12]
 8009328:	1052      	asrs	r2, r2, #1
 800932a:	4413      	add	r3, r2
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	6892      	ldr	r2, [r2, #8]
 8009332:	4413      	add	r3, r2
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	4798      	blx	r3
    }
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d010      	beq.n	8009374 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d107      	bne.n	800936a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009366:	2301      	movs	r3, #1
 8009368:	e000      	b.n	800936c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800936a:	2300      	movs	r3, #0
 800936c:	2b01      	cmp	r3, #1
 800936e:	d001      	beq.n	8009374 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009370:	2301      	movs	r3, #1
 8009372:	e000      	b.n	8009376 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8009374:	2300      	movs	r3, #0
    }
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <_ZN15Screen2ViewBase11applicationEv>:
    Screen2ViewBase();
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800938a:	f013 fbab 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 800938e:	4603      	mov	r3, r0
    }
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	4a05      	ldr	r2, [pc, #20]	; (80093b8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fbed 	bl	8008b88 <_ZN8touchgfx6ScreenD1Ev>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	0802b958 	.word	0x0802b958

080093bc <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff ffe7 	bl	8009398 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 80093ca:	2140      	movs	r1, #64	; 0x40
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f01e fa02 	bl	80277d6 <_ZdlPvj>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <_ZN15Screen2ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen2ViewBase::Screen2ViewBase() :
 80093dc:	b590      	push	{r4, r7, lr}
 80093de:	b08f      	sub	sp, #60	; 0x3c
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f92e 	bl	8009648 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 80093ec:	4a69      	ldr	r2, [pc, #420]	; (8009594 <_ZN15Screen2ViewBaseC1Ev+0x1b8>)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3340      	adds	r3, #64	; 0x40
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff fc2e 	bl	8008c58 <_ZN8touchgfx3BoxC1Ev>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8009402:	f107 0308 	add.w	r3, r7, #8
 8009406:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800940a:	4618      	mov	r0, r3
 800940c:	f7ff fbac 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	4619      	mov	r1, r3
 8009416:	4620      	mov	r0, r4
 8009418:	f011 ff32 	bl	801b280 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	3398      	adds	r3, #152	; 0x98
 8009420:	4618      	mov	r0, r3
 8009422:	f012 fa9f 	bl	801b964 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800942c:	4b5a      	ldr	r3, [pc, #360]	; (8009598 <_ZN15Screen2ViewBaseC1Ev+0x1bc>)
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	2300      	movs	r3, #0
 8009432:	613b      	str	r3, [r7, #16]
 8009434:	f107 030c 	add.w	r3, r7, #12
 8009438:	cb0c      	ldmia	r3, {r2, r3}
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	f000 f91a 	bl	8009674 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009446:	f44f 7388 	mov.w	r3, #272	; 0x110
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009450:	2200      	movs	r2, #0
 8009452:	2100      	movs	r1, #0
 8009454:	f7fe f8d8 	bl	8007608 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800945e:	2300      	movs	r3, #0
 8009460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009464:	2300      	movs	r3, #0
 8009466:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800946a:	2300      	movs	r3, #0
 800946c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009474:	041b      	lsls	r3, r3, #16
 8009476:	461a      	mov	r2, r3
 8009478:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	431a      	orrs	r2, r3
 8009480:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009484:	4313      	orrs	r3, r2
 8009486:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800948a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800948e:	4611      	mov	r1, r2
 8009490:	4618      	mov	r0, r3
 8009492:	f7fa fbe9 	bl	8003c68 <_ZN8touchgfx9colortypeC1Em>
 8009496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009498:	4619      	mov	r1, r3
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff fc00 	bl	8008ca0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3340      	adds	r3, #64	; 0x40
 80094a6:	4619      	mov	r1, r3
 80094a8:	4610      	mov	r0, r2
 80094aa:	f7ff fbc5 	bl	8008c38 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_PUZZLE_ID));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80094b4:	f107 0314 	add.w	r3, r7, #20
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff fb54 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 80094c0:	f107 0314 	add.w	r3, r7, #20
 80094c4:	4619      	mov	r1, r3
 80094c6:	4620      	mov	r0, r4
 80094c8:	f012 fa72 	bl	801b9b0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 480, 272);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80094d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80094dc:	2200      	movs	r2, #0
 80094de:	2100      	movs	r1, #0
 80094e0:	f7fe f892 	bl	8007608 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	336c      	adds	r3, #108	; 0x6c
 80094e8:	2100      	movs	r1, #0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f011 fe97 	bl	801b21e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    add(scalableImage1);
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	336c      	adds	r3, #108	; 0x6c
 80094f6:	4619      	mov	r1, r3
 80094f8:	4610      	mov	r0, r2
 80094fa:	f7ff fb9d 	bl	8008c38 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithIconTick.setXY(137, 170);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	3398      	adds	r3, #152	; 0x98
 8009502:	22aa      	movs	r2, #170	; 0xaa
 8009504:	2189      	movs	r1, #137	; 0x89
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe f8ac 	bl	8007664 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithIconTick.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8009512:	f107 0318 	add.w	r3, r7, #24
 8009516:	2102      	movs	r1, #2
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff fb25 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 800951e:	f107 031c 	add.w	r3, r7, #28
 8009522:	2103      	movs	r1, #3
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff fb1f 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 800952a:	f107 0320 	add.w	r3, r7, #32
 800952e:	2105      	movs	r1, #5
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff fb19 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 8009536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800953a:	2105      	movs	r1, #5
 800953c:	4618      	mov	r0, r3
 800953e:	f7ff fb13 	bl	8008b68 <_ZN8touchgfx6BitmapC1Et>
 8009542:	f107 0020 	add.w	r0, r7, #32
 8009546:	f107 021c 	add.w	r2, r7, #28
 800954a:	f107 0118 	add.w	r1, r7, #24
 800954e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4603      	mov	r3, r0
 8009556:	4620      	mov	r0, r4
 8009558:	f012 f96f 	bl	801b83a <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonWithIconTick.setIconXY(97, 0);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3398      	adds	r3, #152	; 0x98
 8009560:	2200      	movs	r2, #0
 8009562:	2161      	movs	r1, #97	; 0x61
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff fbf7 	bl	8008d58 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonWithIconTick.setAction(buttonCallback);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	33d4      	adds	r3, #212	; 0xd4
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f7ff fba0 	bl	8008cbc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(buttonWithIconTick);
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3398      	adds	r3, #152	; 0x98
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f7ff fb57 	bl	8008c38 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4618      	mov	r0, r3
 800958e:	3734      	adds	r7, #52	; 0x34
 8009590:	46bd      	mov	sp, r7
 8009592:	bd90      	pop	{r4, r7, pc}
 8009594:	0802b90c 	.word	0x0802b90c
 8009598:	0800961d 	.word	0x0800961d

0800959c <_ZN15Screen2ViewBaseD1Ev>:

Screen2ViewBase::~Screen2ViewBase()
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	4a0f      	ldr	r2, [pc, #60]	; (80095e4 <_ZN15Screen2ViewBaseD1Ev+0x48>)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	33d4      	adds	r3, #212	; 0xd4
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 f880 	bl	80096b4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3398      	adds	r3, #152	; 0x98
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff fe7b 	bl	80092b4 <_ZN8touchgfx14ButtonWithIconD1Ev>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	336c      	adds	r3, #108	; 0x6c
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff fe32 	bl	800922c <_ZN8touchgfx13ScalableImageD1Ev>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	3340      	adds	r3, #64	; 0x40
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff fde9 	bl	80091a4 <_ZN8touchgfx3BoxD1Ev>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff fedf 	bl	8009398 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
{

}
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	0802b90c 	.word	0x0802b90c

080095e8 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
}
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff ffd3 	bl	800959c <_ZN15Screen2ViewBaseD1Ev>
 80095f6:	21e4      	movs	r1, #228	; 0xe4
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f01e f8ec 	bl	80277d6 <_ZdlPvj>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]

}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithIconTick)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3398      	adds	r3, #152	; 0x98
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	429a      	cmp	r2, r3
 800962e:	d106      	bne.n	800963e <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //ToScreen1
        //When buttonWithIconTick clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenWipeTransitionWest();
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff fea6 	bl	8009382 <_ZN15Screen2ViewBase11applicationEv>
 8009636:	4603      	mov	r3, r0
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe f9eb 	bl	8007a14 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv>
    }
}
 800963e:	bf00      	nop
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4618      	mov	r0, r3
 8009654:	f014 fd74 	bl	801e140 <_ZN8touchgfx6ScreenC1Ev>
 8009658:	4a05      	ldr	r2, [pc, #20]	; (8009670 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	0802b958 	.word	0x0802b958

08009674 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	4639      	mov	r1, r7
 8009680:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4618      	mov	r0, r3
 8009688:	f7ff fcf8 	bl	800907c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800968c:	4a08      	ldr	r2, [pc, #32]	; (80096b0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	605a      	str	r2, [r3, #4]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3308      	adds	r3, #8
 800969c:	463a      	mov	r2, r7
 800969e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096a2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	0802b940 	.word	0x0802b940

080096b4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	4a05      	ldr	r2, [pc, #20]	; (80096d4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7ff fd09 	bl	80090dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4618      	mov	r0, r3
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	0802b940 	.word	0x0802b940

080096d8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff ffe7 	bl	80096b4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80096e6:	2110      	movs	r1, #16
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f01e f874 	bl	80277d6 <_ZdlPvj>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	68d2      	ldr	r2, [r2, #12]
 800970a:	1052      	asrs	r2, r2, #1
 800970c:	1898      	adds	r0, r3, r2
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d102      	bne.n	8009720 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	e00a      	b.n	8009736 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	68d2      	ldr	r2, [r2, #12]
 8009728:	1052      	asrs	r2, r2, #1
 800972a:	4413      	add	r3, r2
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	6892      	ldr	r2, [r2, #8]
 8009732:	4413      	add	r3, r2
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	4798      	blx	r3
    }
 800973a:	bf00      	nop
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d010      	beq.n	8009774 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d107      	bne.n	800976a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009766:	2301      	movs	r3, #1
 8009768:	e000      	b.n	800976c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800976a:	2300      	movs	r3, #0
 800976c:	2b01      	cmp	r3, #1
 800976e:	d001      	beq.n	8009774 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009770:	2301      	movs	r3, #1
 8009772:	e000      	b.n	8009776 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8009774:	2300      	movs	r3, #0
    }
 8009776:	4618      	mov	r0, r3
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
	...

08009784 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
 8009788:	4801      	ldr	r0, [pc, #4]	; (8009790 <__tcf_0+0xc>)
 800978a:	f7fd fed3 	bl	8007534 <_ZN8touchgfx13GeneratedFontD1Ev>
 800978e:	bd80      	pop	{r7, pc}
 8009790:	2400ae00 	.word	0x2400ae00

08009794 <_Z23getFont_verdana_10_4bppv>:
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b08e      	sub	sp, #56	; 0x38
 8009798:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800979a:	4b21      	ldr	r3, [pc, #132]	; (8009820 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	f3bf 8f5b 	dmb	ish
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bf0c      	ite	eq
 80097ac:	2301      	moveq	r3, #1
 80097ae:	2300      	movne	r3, #0
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d030      	beq.n	8009818 <_Z23getFont_verdana_10_4bppv+0x84>
 80097b6:	481a      	ldr	r0, [pc, #104]	; (8009820 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80097b8:	f01e f80f 	bl	80277da <__cxa_guard_acquire>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	bf14      	ite	ne
 80097c2:	2301      	movne	r3, #1
 80097c4:	2300      	moveq	r3, #0
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d025      	beq.n	8009818 <_Z23getFont_verdana_10_4bppv+0x84>
 80097cc:	2300      	movs	r3, #0
 80097ce:	930c      	str	r3, [sp, #48]	; 0x30
 80097d0:	2300      	movs	r3, #0
 80097d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80097d4:	2300      	movs	r3, #0
 80097d6:	930a      	str	r3, [sp, #40]	; 0x28
 80097d8:	233f      	movs	r3, #63	; 0x3f
 80097da:	9309      	str	r3, [sp, #36]	; 0x24
 80097dc:	4b11      	ldr	r3, [pc, #68]	; (8009824 <_Z23getFont_verdana_10_4bppv+0x90>)
 80097de:	9308      	str	r3, [sp, #32]
 80097e0:	4b11      	ldr	r3, [pc, #68]	; (8009828 <_Z23getFont_verdana_10_4bppv+0x94>)
 80097e2:	9307      	str	r3, [sp, #28]
 80097e4:	2300      	movs	r3, #0
 80097e6:	9306      	str	r3, [sp, #24]
 80097e8:	2300      	movs	r3, #0
 80097ea:	9305      	str	r3, [sp, #20]
 80097ec:	2301      	movs	r3, #1
 80097ee:	9304      	str	r3, [sp, #16]
 80097f0:	2304      	movs	r3, #4
 80097f2:	9303      	str	r3, [sp, #12]
 80097f4:	2300      	movs	r3, #0
 80097f6:	9302      	str	r3, [sp, #8]
 80097f8:	2300      	movs	r3, #0
 80097fa:	9301      	str	r3, [sp, #4]
 80097fc:	230a      	movs	r3, #10
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	230a      	movs	r3, #10
 8009802:	2201      	movs	r2, #1
 8009804:	4909      	ldr	r1, [pc, #36]	; (800982c <_Z23getFont_verdana_10_4bppv+0x98>)
 8009806:	480a      	ldr	r0, [pc, #40]	; (8009830 <_Z23getFont_verdana_10_4bppv+0x9c>)
 8009808:	f7ff f90e 	bl	8008a28 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800980c:	4804      	ldr	r0, [pc, #16]	; (8009820 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800980e:	f01d fff0 	bl	80277f2 <__cxa_guard_release>
 8009812:	4808      	ldr	r0, [pc, #32]	; (8009834 <_Z23getFont_verdana_10_4bppv+0xa0>)
 8009814:	f01e f82c 	bl	8027870 <atexit>
    return verdana_10_4bpp;
 8009818:	4b05      	ldr	r3, [pc, #20]	; (8009830 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800981a:	4618      	mov	r0, r3
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	2400ae2c 	.word	0x2400ae2c
 8009824:	0802ca80 	.word	0x0802ca80
 8009828:	0802ca8c 	.word	0x0802ca8c
 800982c:	90000178 	.word	0x90000178
 8009830:	2400ae00 	.word	0x2400ae00
 8009834:	08009785 	.word	0x08009785

08009838 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
 800983c:	4801      	ldr	r0, [pc, #4]	; (8009844 <__tcf_0+0xc>)
 800983e:	f7fd fe79 	bl	8007534 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009842:	bd80      	pop	{r7, pc}
 8009844:	2400ae30 	.word	0x2400ae30

08009848 <_Z23getFont_verdana_20_4bppv>:
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08e      	sub	sp, #56	; 0x38
 800984c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800984e:	4b21      	ldr	r3, [pc, #132]	; (80098d4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	f3bf 8f5b 	dmb	ish
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	bf0c      	ite	eq
 8009860:	2301      	moveq	r3, #1
 8009862:	2300      	movne	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d030      	beq.n	80098cc <_Z23getFont_verdana_20_4bppv+0x84>
 800986a:	481a      	ldr	r0, [pc, #104]	; (80098d4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800986c:	f01d ffb5 	bl	80277da <__cxa_guard_acquire>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	bf14      	ite	ne
 8009876:	2301      	movne	r3, #1
 8009878:	2300      	moveq	r3, #0
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b00      	cmp	r3, #0
 800987e:	d025      	beq.n	80098cc <_Z23getFont_verdana_20_4bppv+0x84>
 8009880:	2300      	movs	r3, #0
 8009882:	930c      	str	r3, [sp, #48]	; 0x30
 8009884:	2300      	movs	r3, #0
 8009886:	930b      	str	r3, [sp, #44]	; 0x2c
 8009888:	2300      	movs	r3, #0
 800988a:	930a      	str	r3, [sp, #40]	; 0x28
 800988c:	233f      	movs	r3, #63	; 0x3f
 800988e:	9309      	str	r3, [sp, #36]	; 0x24
 8009890:	4b11      	ldr	r3, [pc, #68]	; (80098d8 <_Z23getFont_verdana_20_4bppv+0x90>)
 8009892:	9308      	str	r3, [sp, #32]
 8009894:	4b11      	ldr	r3, [pc, #68]	; (80098dc <_Z23getFont_verdana_20_4bppv+0x94>)
 8009896:	9307      	str	r3, [sp, #28]
 8009898:	2300      	movs	r3, #0
 800989a:	9306      	str	r3, [sp, #24]
 800989c:	2300      	movs	r3, #0
 800989e:	9305      	str	r3, [sp, #20]
 80098a0:	2301      	movs	r3, #1
 80098a2:	9304      	str	r3, [sp, #16]
 80098a4:	2304      	movs	r3, #4
 80098a6:	9303      	str	r3, [sp, #12]
 80098a8:	2300      	movs	r3, #0
 80098aa:	9302      	str	r3, [sp, #8]
 80098ac:	2300      	movs	r3, #0
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	2314      	movs	r3, #20
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	2314      	movs	r3, #20
 80098b6:	2201      	movs	r2, #1
 80098b8:	4909      	ldr	r1, [pc, #36]	; (80098e0 <_Z23getFont_verdana_20_4bppv+0x98>)
 80098ba:	480a      	ldr	r0, [pc, #40]	; (80098e4 <_Z23getFont_verdana_20_4bppv+0x9c>)
 80098bc:	f7ff f8b4 	bl	8008a28 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80098c0:	4804      	ldr	r0, [pc, #16]	; (80098d4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80098c2:	f01d ff96 	bl	80277f2 <__cxa_guard_release>
 80098c6:	4808      	ldr	r0, [pc, #32]	; (80098e8 <_Z23getFont_verdana_20_4bppv+0xa0>)
 80098c8:	f01d ffd2 	bl	8027870 <atexit>
    return verdana_20_4bpp;
 80098cc:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	2400ae5c 	.word	0x2400ae5c
 80098d8:	0802ca84 	.word	0x0802ca84
 80098dc:	0802ca90 	.word	0x0802ca90
 80098e0:	90000188 	.word	0x90000188
 80098e4:	2400ae30 	.word	0x2400ae30
 80098e8:	08009839 	.word	0x08009839

080098ec <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	4801      	ldr	r0, [pc, #4]	; (80098f8 <__tcf_0+0xc>)
 80098f2:	f7fd fe1f 	bl	8007534 <_ZN8touchgfx13GeneratedFontD1Ev>
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	2400ae60 	.word	0x2400ae60

080098fc <_Z23getFont_verdana_40_4bppv>:
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08e      	sub	sp, #56	; 0x38
 8009900:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009902:	4b21      	ldr	r3, [pc, #132]	; (8009988 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	f3bf 8f5b 	dmb	ish
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	bf0c      	ite	eq
 8009914:	2301      	moveq	r3, #1
 8009916:	2300      	movne	r3, #0
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d030      	beq.n	8009980 <_Z23getFont_verdana_40_4bppv+0x84>
 800991e:	481a      	ldr	r0, [pc, #104]	; (8009988 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009920:	f01d ff5b 	bl	80277da <__cxa_guard_acquire>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	bf14      	ite	ne
 800992a:	2301      	movne	r3, #1
 800992c:	2300      	moveq	r3, #0
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d025      	beq.n	8009980 <_Z23getFont_verdana_40_4bppv+0x84>
 8009934:	2300      	movs	r3, #0
 8009936:	930c      	str	r3, [sp, #48]	; 0x30
 8009938:	2300      	movs	r3, #0
 800993a:	930b      	str	r3, [sp, #44]	; 0x2c
 800993c:	2300      	movs	r3, #0
 800993e:	930a      	str	r3, [sp, #40]	; 0x28
 8009940:	233f      	movs	r3, #63	; 0x3f
 8009942:	9309      	str	r3, [sp, #36]	; 0x24
 8009944:	4b11      	ldr	r3, [pc, #68]	; (800998c <_Z23getFont_verdana_40_4bppv+0x90>)
 8009946:	9308      	str	r3, [sp, #32]
 8009948:	4b11      	ldr	r3, [pc, #68]	; (8009990 <_Z23getFont_verdana_40_4bppv+0x94>)
 800994a:	9307      	str	r3, [sp, #28]
 800994c:	2300      	movs	r3, #0
 800994e:	9306      	str	r3, [sp, #24]
 8009950:	2300      	movs	r3, #0
 8009952:	9305      	str	r3, [sp, #20]
 8009954:	2301      	movs	r3, #1
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	2304      	movs	r3, #4
 800995a:	9303      	str	r3, [sp, #12]
 800995c:	2300      	movs	r3, #0
 800995e:	9302      	str	r3, [sp, #8]
 8009960:	2300      	movs	r3, #0
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	2328      	movs	r3, #40	; 0x28
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	2328      	movs	r3, #40	; 0x28
 800996a:	2201      	movs	r2, #1
 800996c:	4909      	ldr	r1, [pc, #36]	; (8009994 <_Z23getFont_verdana_40_4bppv+0x98>)
 800996e:	480a      	ldr	r0, [pc, #40]	; (8009998 <_Z23getFont_verdana_40_4bppv+0x9c>)
 8009970:	f7ff f85a 	bl	8008a28 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009974:	4804      	ldr	r0, [pc, #16]	; (8009988 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009976:	f01d ff3c 	bl	80277f2 <__cxa_guard_release>
 800997a:	4808      	ldr	r0, [pc, #32]	; (800999c <_Z23getFont_verdana_40_4bppv+0xa0>)
 800997c:	f01d ff78 	bl	8027870 <atexit>
    return verdana_40_4bpp;
 8009980:	4b05      	ldr	r3, [pc, #20]	; (8009998 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8009982:	4618      	mov	r0, r3
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	2400ae8c 	.word	0x2400ae8c
 800998c:	0802ca88 	.word	0x0802ca88
 8009990:	0802ca94 	.word	0x0802ca94
 8009994:	90000198 	.word	0x90000198
 8009998:	2400ae60 	.word	0x2400ae60
 800999c:	080098ed 	.word	0x080098ed

080099a0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	460b      	mov	r3, r1
 80099aa:	607a      	str	r2, [r7, #4]
 80099ac:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 80099ae:	2300      	movs	r3, #0
    }
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80099c4:	2300      	movs	r3, #0
    }
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80099da:	2300      	movs	r3, #0
    }
 80099dc:	4618      	mov	r0, r3
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	4613      	mov	r3, r2
 80099f4:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80099f6:	4a07      	ldr	r2, [pc, #28]	; (8009a14 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6013      	str	r3, [r2, #0]
        fonts = f;
 80099fc:	4a06      	ldr	r2, [pc, #24]	; (8009a18 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8009a02:	4a06      	ldr	r2, [pc, #24]	; (8009a1c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009a04:	88fb      	ldrh	r3, [r7, #6]
 8009a06:	8013      	strh	r3, [r2, #0]
    }
 8009a08:	bf00      	nop
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	24025d58 	.word	0x24025d58
 8009a18:	24025d60 	.word	0x24025d60
 8009a1c:	24025d5c 	.word	0x24025d5c

08009a20 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009a20:	b40e      	push	{r1, r2, r3}
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b085      	sub	sp, #20
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009a2a:	f107 0320 	add.w	r3, r7, #32
 8009a2e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	69fa      	ldr	r2, [r7, #28]
 8009a34:	2100      	movs	r1, #0
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f013 ff96 	bl	801d968 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009a40:	89fb      	ldrh	r3, [r7, #14]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a4c:	b003      	add	sp, #12
 8009a4e:	4770      	bx	lr

08009a50 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009a50:	b40c      	push	{r2, r3}
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009a5e:	f107 031c 	add.w	r3, r7, #28
 8009a62:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009a64:	78f9      	ldrb	r1, [r7, #3]
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	69ba      	ldr	r2, [r7, #24]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f013 ff7c 	bl	801d968 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009a70:	4603      	mov	r3, r0
 8009a72:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009a74:	89fb      	ldrh	r3, [r7, #14]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a80:	b002      	add	sp, #8
 8009a82:	4770      	bx	lr

08009a84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08a      	sub	sp, #40	; 0x28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d016      	beq.n	8009ac6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3322      	adds	r3, #34	; 0x22
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	8adb      	ldrh	r3, [r3, #22]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d105      	bne.n	8009ab2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8009aa6:	4b43      	ldr	r3, [pc, #268]	; (8009bb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009aa8:	4a43      	ldr	r2, [pc, #268]	; (8009bb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009aaa:	21c5      	movs	r1, #197	; 0xc5
 8009aac:	4843      	ldr	r0, [pc, #268]	; (8009bbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009aae:	f01d fec1 	bl	8027834 <__assert_func>
            return buffer[pos];
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	8a9b      	ldrh	r3, [r3, #20]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e000      	b.n	8009ac8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d06a      	beq.n	8009ba2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f015 f9e1 	bl	801ee94 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3322      	adds	r3, #34	; 0x22
 8009ad6:	623b      	str	r3, [r7, #32]
 8009ad8:	2301      	movs	r3, #1
 8009ada:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	8adb      	ldrh	r3, [r3, #22]
 8009ae0:	8bfa      	ldrh	r2, [r7, #30]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d305      	bcc.n	8009af2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8009ae6:	4b36      	ldr	r3, [pc, #216]	; (8009bc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009ae8:	4a36      	ldr	r2, [pc, #216]	; (8009bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009aea:	21cb      	movs	r1, #203	; 0xcb
 8009aec:	4833      	ldr	r0, [pc, #204]	; (8009bbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009aee:	f01d fea1 	bl	8027834 <__assert_func>
            const uint16_t index = pos + offset;
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	8a9a      	ldrh	r2, [r3, #20]
 8009af6:	8bfb      	ldrh	r3, [r7, #30]
 8009af8:	4413      	add	r3, r2
 8009afa:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009afc:	8bbb      	ldrh	r3, [r7, #28]
 8009afe:	2b09      	cmp	r3, #9
 8009b00:	d801      	bhi.n	8009b06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009b02:	8bbb      	ldrh	r3, [r7, #28]
 8009b04:	e001      	b.n	8009b0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8009b06:	8bbb      	ldrh	r3, [r7, #28]
 8009b08:	3b0a      	subs	r3, #10
 8009b0a:	6a3a      	ldr	r2, [r7, #32]
 8009b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b10:	f640 123f 	movw	r2, #2367	; 0x93f
 8009b14:	4293      	cmp	r3, r2
 8009b16:	bf0c      	ite	eq
 8009b18:	2301      	moveq	r3, #1
 8009b1a:	2300      	movne	r3, #0
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d03f      	beq.n	8009ba2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3322      	adds	r3, #34	; 0x22
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	3222      	adds	r2, #34	; 0x22
 8009b2a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	8ad2      	ldrh	r2, [r2, #22]
 8009b30:	2a00      	cmp	r2, #0
 8009b32:	d105      	bne.n	8009b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009b34:	4b1f      	ldr	r3, [pc, #124]	; (8009bb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009b36:	4a20      	ldr	r2, [pc, #128]	; (8009bb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009b38:	21c5      	movs	r1, #197	; 0xc5
 8009b3a:	4820      	ldr	r0, [pc, #128]	; (8009bbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009b3c:	f01d fe7a 	bl	8027834 <__assert_func>
            return buffer[pos];
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	8a92      	ldrh	r2, [r2, #20]
 8009b44:	4611      	mov	r1, r2
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009b4c:	613b      	str	r3, [r7, #16]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	8adb      	ldrh	r3, [r3, #22]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d806      	bhi.n	8009b68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009b5a:	4b1b      	ldr	r3, [pc, #108]	; (8009bc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009b5c:	4a1b      	ldr	r2, [pc, #108]	; (8009bcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009b5e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8009b62:	4816      	ldr	r0, [pc, #88]	; (8009bbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009b64:	f01d fe66 	bl	8027834 <__assert_func>
            const uint16_t index = pos + 1;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	8a9b      	ldrh	r3, [r3, #20]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009b70:	89bb      	ldrh	r3, [r7, #12]
 8009b72:	2b09      	cmp	r3, #9
 8009b74:	d801      	bhi.n	8009b7a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009b76:	89bb      	ldrh	r3, [r7, #12]
 8009b78:	e000      	b.n	8009b7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	89f9      	ldrh	r1, [r7, #14]
 8009b80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009b84:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	3322      	adds	r3, #34	; 0x22
 8009b8a:	61bb      	str	r3, [r7, #24]
 8009b8c:	f640 133f 	movw	r3, #2367	; 0x93f
 8009b90:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	8a9b      	ldrh	r3, [r3, #20]
 8009b96:	4619      	mov	r1, r3
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	8afa      	ldrh	r2, [r7, #22]
 8009b9c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009ba0:	bf00      	nop
        }
    }
    return getNextChar();
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f015 f878 	bl	801ec98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009ba8:	4603      	mov	r3, r0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3728      	adds	r7, #40	; 0x28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	0802a9ec 	.word	0x0802a9ec
 8009bb8:	0802a9f8 	.word	0x0802a9f8
 8009bbc:	0802aaa4 	.word	0x0802aaa4
 8009bc0:	0802aaf0 	.word	0x0802aaf0
 8009bc4:	0802ab00 	.word	0x0802ab00
 8009bc8:	0802abd4 	.word	0x0802abd4
 8009bcc:	0802abe0 	.word	0x0802abe0

08009bd0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f015 f826 	bl	801ec2a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8009bf6:	88fb      	ldrh	r3, [r7, #6]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d127      	bne.n	8009c4c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8009bfc:	88fb      	ldrh	r3, [r7, #6]
 8009bfe:	4a1e      	ldr	r2, [pc, #120]	; (8009c78 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d016      	beq.n	8009c36 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8009c08:	88fb      	ldrh	r3, [r7, #6]
 8009c0a:	4a1b      	ldr	r2, [pc, #108]	; (8009c78 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c10:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	4413      	add	r3, r2
 8009c1a:	4a18      	ldr	r2, [pc, #96]	; (8009c7c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009c1c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	4413      	add	r3, r2
 8009c26:	4a16      	ldr	r2, [pc, #88]	; (8009c80 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009c28:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	4413      	add	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	e00a      	b.n	8009c4c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8009c36:	4b11      	ldr	r3, [pc, #68]	; (8009c7c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009c38:	4a12      	ldr	r2, [pc, #72]	; (8009c84 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8009c3a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009c3c:	4a12      	ldr	r2, [pc, #72]	; (8009c88 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8009c3e:	4b10      	ldr	r3, [pc, #64]	; (8009c80 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009c40:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8009c42:	88fb      	ldrh	r3, [r7, #6]
 8009c44:	4a11      	ldr	r2, [pc, #68]	; (8009c8c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8009c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c4a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00d      	beq.n	8009c6e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8009c52:	4a0f      	ldr	r2, [pc, #60]	; (8009c90 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8009c54:	88fb      	ldrh	r3, [r7, #6]
 8009c56:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009c58:	f000 f824 	bl	8009ca4 <_ZN17TypedTextDatabase8getFontsEv>
 8009c5c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8009c5e:	f000 f819 	bl	8009c94 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8009c62:	4603      	mov	r3, r0
 8009c64:	461a      	mov	r2, r3
 8009c66:	4621      	mov	r1, r4
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff febd 	bl	80099e8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8009c6e:	bf00      	nop
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd90      	pop	{r4, r7, pc}
 8009c76:	bf00      	nop
 8009c78:	2400ae90 	.word	0x2400ae90
 8009c7c:	2400ae98 	.word	0x2400ae98
 8009c80:	2400ae9c 	.word	0x2400ae9c
 8009c84:	900001ac 	.word	0x900001ac
 8009c88:	900001a8 	.word	0x900001a8
 8009c8c:	900001b4 	.word	0x900001b4
 8009c90:	2400ae94 	.word	0x2400ae94

08009c94 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8009c94:	b480      	push	{r7}
 8009c96:	af00      	add	r7, sp, #0
    return 0;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8009ca8:	4b02      	ldr	r3, [pc, #8]	; (8009cb4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	2400aea0 	.word	0x2400aea0

08009cb8 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d113      	bne.n	8009cf0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d10e      	bne.n	8009cf0 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8009cd2:	f7ff fdb9 	bl	8009848 <_Z23getFont_verdana_20_4bppv>
 8009cd6:	4603      	mov	r3, r0
};
 8009cd8:	4a07      	ldr	r2, [pc, #28]	; (8009cf8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009cda:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8009cdc:	f7ff fe0e 	bl	80098fc <_Z23getFont_verdana_40_4bppv>
 8009ce0:	4603      	mov	r3, r0
};
 8009ce2:	4a05      	ldr	r2, [pc, #20]	; (8009cf8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009ce4:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8009ce6:	f7ff fd55 	bl	8009794 <_Z23getFont_verdana_10_4bppv>
 8009cea:	4603      	mov	r3, r0
};
 8009cec:	4a02      	ldr	r2, [pc, #8]	; (8009cf8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009cee:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	2400aea0 	.word	0x2400aea0

08009cfc <_GLOBAL__sub_I_touchgfx_fonts>:
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009d04:	2001      	movs	r0, #1
 8009d06:	f7ff ffd7 	bl	8009cb8 <_Z41__static_initialization_and_destruction_0ii>
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fd fdd8 	bl	80078d4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009d24:	4a03      	ldr	r2, [pc, #12]	; (8009d34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	601a      	str	r2, [r3, #0]
{

}
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	0802b008 	.word	0x0802b008

08009d38 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	601a      	str	r2, [r3, #0]
{

}
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <_ZN5Model4tickEv>:

void Model::tick()
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]

}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
    {
    }
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
    {
    }
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
    {
 8009d98:	4a04      	ldr	r2, [pc, #16]	; (8009dac <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	601a      	str	r2, [r3, #0]
    }
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	0802ba20 	.word	0x0802ba20

08009db0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
    }
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff ffe9 	bl	8009d90 <_ZN8touchgfx9PresenterD1Ev>
 8009dbe:	2104      	movs	r1, #4
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f01d fd08 	bl	80277d6 <_ZdlPvj>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
    {
 8009dd8:	4a04      	ldr	r2, [pc, #16]	; (8009dec <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	601a      	str	r2, [r3, #0]
    }
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4618      	mov	r0, r3
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	0802ba20 	.word	0x0802ba20

08009df0 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	4a06      	ldr	r2, [pc, #24]	; (8009e14 <_ZN13ModelListenerC1Ev+0x24>)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	605a      	str	r2, [r3, #4]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4618      	mov	r0, r3
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	0802ba10 	.word	0x0802ba10

08009e18 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	4a04      	ldr	r2, [pc, #16]	; (8009e34 <_ZN13ModelListenerD1Ev+0x1c>)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	0802ba10 	.word	0x0802ba10

08009e38 <_ZN13ModelListenerD0Ev>:
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff ffe9 	bl	8009e18 <_ZN13ModelListenerD1Ev>
 8009e46:	2108      	movs	r1, #8
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f01d fcc4 	bl	80277d6 <_ZdlPvj>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	4a09      	ldr	r2, [pc, #36]	; (8009e88 <_ZN16Screen1PresenterD1Ev+0x30>)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	4a09      	ldr	r2, [pc, #36]	; (8009e8c <_ZN16Screen1PresenterD1Ev+0x34>)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	605a      	str	r2, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff ffd1 	bl	8009e18 <_ZN13ModelListenerD1Ev>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7ff ff89 	bl	8009d90 <_ZN8touchgfx9PresenterD1Ev>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	0802b9e8 	.word	0x0802b9e8
 8009e8c:	0802ba00 	.word	0x0802ba00

08009e90 <_ZThn4_N16Screen1PresenterD1Ev>:
 8009e90:	f1a0 0004 	sub.w	r0, r0, #4
 8009e94:	e7e0      	b.n	8009e58 <_ZN16Screen1PresenterD1Ev>
 8009e96:	bf00      	nop

08009e98 <_ZN16Screen1PresenterD0Ev>:
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff ffd9 	bl	8009e58 <_ZN16Screen1PresenterD1Ev>
 8009ea6:	2110      	movs	r1, #16
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f01d fc94 	bl	80277d6 <_ZdlPvj>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <_ZThn4_N16Screen1PresenterD0Ev>:
 8009eb8:	f1a0 0004 	sub.w	r0, r0, #4
 8009ebc:	e7ec      	b.n	8009e98 <_ZN16Screen1PresenterD0Ev>
	...

08009ec0 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
    : view(v)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7ff ff7f 	bl	8009dd0 <_ZN8touchgfx9PresenterC1Ev>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7ff ff8a 	bl	8009df0 <_ZN13ModelListenerC1Ev>
 8009edc:	4a06      	ldr	r2, [pc, #24]	; (8009ef8 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	4a06      	ldr	r2, [pc, #24]	; (8009efc <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	605a      	str	r2, [r3, #4]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	60da      	str	r2, [r3, #12]
{

}
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	0802b9e8 	.word	0x0802b9e8
 8009efc:	0802ba00 	.word	0x0802ba00

08009f00 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]

}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]

}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	4a05      	ldr	r2, [pc, #20]	; (8009f48 <_ZN11Screen1ViewD1Ev+0x20>)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7ff f833 	bl	8008fa4 <_ZN15Screen1ViewBaseD1Ev>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	0802ba38 	.word	0x0802ba38

08009f4c <_ZN11Screen1ViewD0Ev>:
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff ffe7 	bl	8009f28 <_ZN11Screen1ViewD1Ev>
 8009f5a:	21e4      	movs	r1, #228	; 0xe4
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f01d fc3a 	bl	80277d6 <_ZdlPvj>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe ff34 	bl	8008de4 <_ZN15Screen1ViewBaseC1Ev>
 8009f7c:	4a03      	ldr	r2, [pc, #12]	; (8009f8c <_ZN11Screen1ViewC1Ev+0x20>)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	601a      	str	r2, [r3, #0]
{

}
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	0802ba38 	.word	0x0802ba38

08009f90 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7ff f838 	bl	8009010 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fe20 	bl	8008bf8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	4a09      	ldr	r2, [pc, #36]	; (8009ff0 <_ZN16Screen2PresenterD1Ev+0x30>)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	4a09      	ldr	r2, [pc, #36]	; (8009ff4 <_ZN16Screen2PresenterD1Ev+0x34>)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	605a      	str	r2, [r3, #4]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7ff ff1d 	bl	8009e18 <_ZN13ModelListenerD1Ev>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff fed5 	bl	8009d90 <_ZN8touchgfx9PresenterD1Ev>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	0802ba6c 	.word	0x0802ba6c
 8009ff4:	0802ba84 	.word	0x0802ba84

08009ff8 <_ZThn4_N16Screen2PresenterD1Ev>:
 8009ff8:	f1a0 0004 	sub.w	r0, r0, #4
 8009ffc:	e7e0      	b.n	8009fc0 <_ZN16Screen2PresenterD1Ev>
 8009ffe:	bf00      	nop

0800a000 <_ZN16Screen2PresenterD0Ev>:
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff ffd9 	bl	8009fc0 <_ZN16Screen2PresenterD1Ev>
 800a00e:	2110      	movs	r1, #16
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f01d fbe0 	bl	80277d6 <_ZdlPvj>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4618      	mov	r0, r3
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <_ZThn4_N16Screen2PresenterD0Ev>:
 800a020:	f1a0 0004 	sub.w	r0, r0, #4
 800a024:	e7ec      	b.n	800a000 <_ZN16Screen2PresenterD0Ev>
	...

0800a028 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
    : view(v)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff fecb 	bl	8009dd0 <_ZN8touchgfx9PresenterC1Ev>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff fed6 	bl	8009df0 <_ZN13ModelListenerC1Ev>
 800a044:	4a06      	ldr	r2, [pc, #24]	; (800a060 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	4a06      	ldr	r2, [pc, #24]	; (800a064 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	605a      	str	r2, [r3, #4]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	60da      	str	r2, [r3, #12]
{

}
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	0802ba6c 	.word	0x0802ba6c
 800a064:	0802ba84 	.word	0x0802ba84

0800a068 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]

}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]

}
 800a084:	bf00      	nop
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	4a05      	ldr	r2, [pc, #20]	; (800a0b0 <_ZN11Screen2ViewD1Ev+0x20>)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7ff fa7b 	bl	800959c <_ZN15Screen2ViewBaseD1Ev>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	0802ba94 	.word	0x0802ba94

0800a0b4 <_ZN11Screen2ViewD0Ev>:
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7ff ffe7 	bl	800a090 <_ZN11Screen2ViewD1Ev>
 800a0c2:	21e4      	movs	r1, #228	; 0xe4
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f01d fb86 	bl	80277d6 <_ZdlPvj>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7ff f97c 	bl	80093dc <_ZN15Screen2ViewBaseC1Ev>
 800a0e4:	4a03      	ldr	r2, [pc, #12]	; (800a0f4 <_ZN11Screen2ViewC1Ev+0x20>)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	601a      	str	r2, [r3, #0]
{

}
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	0802ba94 	.word	0x0802ba94

0800a0f8 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4618      	mov	r0, r3
 800a104:	f7ff fa80 	bl	8009608 <_ZN15Screen2ViewBase11setupScreenEv>
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fd6c 	bl	8008bf8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d103      	bne.n	800a140 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e02c      	b.n	800a19a <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	891a      	ldrh	r2, [r3, #8]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	68da      	ldr	r2, [r3, #12]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	695a      	ldr	r2, [r3, #20]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a0c      	ldr	r2, [pc, #48]	; (800a1a4 <FT5336_RegisterBusIO+0x7c>)
 800a174:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a0b      	ldr	r2, [pc, #44]	; (800a1a8 <FT5336_RegisterBusIO+0x80>)
 800a17a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d004      	beq.n	800a194 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4798      	blx	r3
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	e002      	b.n	800a19a <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800a194:	f04f 33ff 	mov.w	r3, #4294967295
 800a198:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a19a:	68fb      	ldr	r3, [r7, #12]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	0800a5af 	.word	0x0800a5af
 800a1a8:	0800a5e3 	.word	0x0800a5e3

0800a1ac <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2205      	movs	r2, #5
 800a1c6:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a1ce:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a1d6:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10d      	bne.n	800a218 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f98e 	bl	800a524 <FT5336_DisableIT>
 800a208:	4602      	mov	r2, r0
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4413      	add	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d002      	beq.n	800a224 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800a21e:	f04f 33ff 	mov.w	r3, #4294967295
 800a222:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a224:	68fb      	ldr	r3, [r7, #12]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a240:	2b01      	cmp	r3, #1
 800a242:	d103      	bne.n	800a24c <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800a24c:	68fb      	ldr	r3, [r7, #12]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f103 0218 	add.w	r2, r3, #24
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	4619      	mov	r1, r3
 800a272:	4610      	mov	r0, r2
 800a274:	f000 fa2c 	bl	800a6d0 <ft5336_radian_value>
 800a278:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f103 0218 	add.w	r2, r3, #24
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	b2db      	uxtb	r3, r3
 800a286:	4619      	mov	r1, r3
 800a288:	4610      	mov	r0, r2
 800a28a:	f000 fa32 	bl	800a6f2 <ft5336_offset_left_right>
 800a28e:	4602      	mov	r2, r0
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4413      	add	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f103 0218 	add.w	r2, r3, #24
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	f000 fa35 	bl	800a714 <ft5336_offset_up_down>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f103 0218 	add.w	r2, r3, #24
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	f000 fa38 	bl	800a736 <ft5336_disatnce_left_right>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f103 0218 	add.w	r2, r3, #24
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4610      	mov	r0, r2
 800a2de:	f000 fa3b 	bl	800a758 <ft5336_distance_up_down>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f103 0218 	add.w	r2, r3, #24
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	f000 fa3e 	bl	800a77a <ft5336_distance_zoom>
 800a2fe:	4602      	mov	r2, r0
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	4413      	add	r3, r2
 800a304:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800a30c:	f04f 33ff 	mov.w	r3, #4294967295
 800a310:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a312:	68fb      	ldr	r3, [r7, #12]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3318      	adds	r3, #24
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 fa46 	bl	800a7be <ft5336_chip_id>
 800a332:	4603      	mov	r3, r0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f90f 	bl	800a56e <FT5336_DetectTouch>
 800a350:	4603      	mov	r3, r0
 800a352:	461a      	mov	r2, r3
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f103 0018 	add.w	r0, r3, #24
 800a35e:	f107 0208 	add.w	r2, r7, #8
 800a362:	2304      	movs	r3, #4
 800a364:	2103      	movs	r1, #3
 800a366:	f000 f956 	bl	800a616 <ft5336_read_reg>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800a370:	f04f 33ff 	mov.w	r3, #4294967295
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	e00f      	b.n	800a398 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800a378:	7a3b      	ldrb	r3, [r7, #8]
 800a37a:	021b      	lsls	r3, r3, #8
 800a37c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a380:	7a7a      	ldrb	r2, [r7, #9]
 800a382:	431a      	orrs	r2, r3
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800a388:	7abb      	ldrb	r3, [r7, #10]
 800a38a:	021b      	lsls	r3, r3, #8
 800a38c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a390:	7afa      	ldrb	r2, [r7, #11]
 800a392:	431a      	orrs	r2, r3
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a398:	68fb      	ldr	r3, [r7, #12]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b08c      	sub	sp, #48	; 0x30
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f8dc 	bl	800a56e <FT5336_DetectTouch>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f103 0018 	add.w	r0, r3, #24
 800a3c4:	f107 0208 	add.w	r2, r7, #8
 800a3c8:	231e      	movs	r3, #30
 800a3ca:	2103      	movs	r1, #3
 800a3cc:	f000 f923 	bl	800a616 <ft5336_read_reg>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800a3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3dc:	e07e      	b.n	800a4dc <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a3de:	2300      	movs	r3, #0
 800a3e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3e2:	e078      	b.n	800a4d6 <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800a3e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	4413      	add	r3, r2
 800a3ec:	005b      	lsls	r3, r3, #1
 800a3ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a3f8:	021b      	lsls	r3, r3, #8
 800a3fa:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a3fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a400:	4613      	mov	r3, r2
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	4413      	add	r3, r2
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	3301      	adds	r3, #1
 800a40a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a40e:	4413      	add	r3, r2
 800a410:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a414:	ea41 0203 	orr.w	r2, r1, r3
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	440b      	add	r3, r1
 800a420:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800a422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a424:	4613      	mov	r3, r2
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	4413      	add	r3, r2
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	3302      	adds	r3, #2
 800a42e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a432:	4413      	add	r3, r2
 800a434:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a438:	021b      	lsls	r3, r3, #8
 800a43a:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a43e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a440:	4613      	mov	r3, r2
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	4413      	add	r3, r2
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	3303      	adds	r3, #3
 800a44a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a44e:	4413      	add	r3, r2
 800a450:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a454:	4319      	orrs	r1, r3
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a45a:	3206      	adds	r2, #6
 800a45c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800a460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a462:	4613      	mov	r3, r2
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	4413      	add	r3, r2
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a46e:	4413      	add	r3, r2
 800a470:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a474:	099b      	lsrs	r3, r3, #6
 800a476:	b2db      	uxtb	r3, r3
 800a478:	4619      	mov	r1, r3
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a47e:	3210      	adds	r2, #16
 800a480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800a484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a486:	4613      	mov	r3, r2
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	4413      	add	r3, r2
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	3304      	adds	r3, #4
 800a490:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a494:	4413      	add	r3, r2
 800a496:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a49a:	4619      	mov	r1, r3
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	330a      	adds	r3, #10
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800a4a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	4413      	add	r3, r2
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	3305      	adds	r3, #5
 800a4b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a4be:	091b      	lsrs	r3, r3, #4
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	3314      	adds	r3, #20
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	d983      	bls.n	800a3e4 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3730      	adds	r7, #48	; 0x30
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	3318      	adds	r3, #24
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 f8bb 	bl	800a672 <ft5336_gest_id>
 800a4fc:	4603      	mov	r3, r0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3318      	adds	r3, #24
 800a512:	2101      	movs	r1, #1
 800a514:	4618      	mov	r0, r3
 800a516:	f000 f941 	bl	800a79c <ft5336_g_mode>
 800a51a:	4603      	mov	r3, r0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3318      	adds	r3, #24
 800a530:	2100      	movs	r1, #0
 800a532:	4618      	mov	r0, r3
 800a534:	f000 f932 	bl	800a79c <ft5336_g_mode>
 800a538:	4603      	mov	r3, r0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800a542:	b480      	push	{r7}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3318      	adds	r3, #24
 800a57a:	f107 020b 	add.w	r2, r7, #11
 800a57e:	4611      	mov	r1, r2
 800a580:	4618      	mov	r0, r3
 800a582:	f000 f886 	bl	800a692 <ft5336_td_status>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800a58c:	f04f 33ff 	mov.w	r3, #4294967295
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	e007      	b.n	800a5a4 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800a594:	7afb      	ldrb	r3, [r7, #11]
 800a596:	2b05      	cmp	r3, #5
 800a598:	d902      	bls.n	800a5a0 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	60fb      	str	r3, [r7, #12]
 800a59e:	e001      	b.n	800a5a4 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800a5a0:	7afb      	ldrb	r3, [r7, #11]
 800a5a2:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a5ae:	b590      	push	{r4, r7, lr}
 800a5b0:	b087      	sub	sp, #28
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	72fb      	strb	r3, [r7, #11]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	691c      	ldr	r4, [r3, #16]
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	8918      	ldrh	r0, [r3, #8]
 800a5ce:	7afb      	ldrb	r3, [r7, #11]
 800a5d0:	b299      	uxth	r1, r3
 800a5d2:	893b      	ldrh	r3, [r7, #8]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	47a0      	blx	r4
 800a5d8:	4603      	mov	r3, r0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	371c      	adds	r7, #28
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd90      	pop	{r4, r7, pc}

0800a5e2 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a5e2:	b590      	push	{r4, r7, lr}
 800a5e4:	b087      	sub	sp, #28
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	72fb      	strb	r3, [r7, #11]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	68dc      	ldr	r4, [r3, #12]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	8918      	ldrh	r0, [r3, #8]
 800a602:	7afb      	ldrb	r3, [r7, #11]
 800a604:	b299      	uxth	r1, r3
 800a606:	893b      	ldrh	r3, [r7, #8]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	47a0      	blx	r4
 800a60c:	4603      	mov	r3, r0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	bd90      	pop	{r4, r7, pc}

0800a616 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800a616:	b590      	push	{r4, r7, lr}
 800a618:	b085      	sub	sp, #20
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	461a      	mov	r2, r3
 800a622:	460b      	mov	r3, r1
 800a624:	72fb      	strb	r3, [r7, #11]
 800a626:	4613      	mov	r3, r2
 800a628:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	685c      	ldr	r4, [r3, #4]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6898      	ldr	r0, [r3, #8]
 800a632:	893b      	ldrh	r3, [r7, #8]
 800a634:	7af9      	ldrb	r1, [r7, #11]
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	47a0      	blx	r4
 800a63a:	4603      	mov	r3, r0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	bd90      	pop	{r4, r7, pc}

0800a644 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	607a      	str	r2, [r7, #4]
 800a64e:	461a      	mov	r2, r3
 800a650:	460b      	mov	r3, r1
 800a652:	72fb      	strb	r3, [r7, #11]
 800a654:	4613      	mov	r3, r2
 800a656:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681c      	ldr	r4, [r3, #0]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6898      	ldr	r0, [r3, #8]
 800a660:	893b      	ldrh	r3, [r7, #8]
 800a662:	7af9      	ldrb	r1, [r7, #11]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	47a0      	blx	r4
 800a668:	4603      	mov	r3, r0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3714      	adds	r7, #20
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd90      	pop	{r4, r7, pc}

0800a672 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800a67c:	2301      	movs	r3, #1
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	2101      	movs	r1, #1
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff ffc7 	bl	800a616 <ft5336_read_reg>
 800a688:	4603      	mov	r3, r0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800a69c:	2301      	movs	r3, #1
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	2102      	movs	r1, #2
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff ffb7 	bl	800a616 <ft5336_read_reg>
 800a6a8:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10a      	bne.n	800a6c6 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	f003 030f 	and.w	r3, r3, #15
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	781a      	ldrb	r2, [r3, #0]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800a6dc:	1cfa      	adds	r2, r7, #3
 800a6de:	2301      	movs	r3, #1
 800a6e0:	2191      	movs	r1, #145	; 0x91
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7ff ffae 	bl	800a644 <ft5336_write_reg>
 800a6e8:	4603      	mov	r3, r0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800a6fe:	1cfa      	adds	r2, r7, #3
 800a700:	2301      	movs	r3, #1
 800a702:	2192      	movs	r1, #146	; 0x92
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff ff9d 	bl	800a644 <ft5336_write_reg>
 800a70a:	4603      	mov	r3, r0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800a720:	1cfa      	adds	r2, r7, #3
 800a722:	2301      	movs	r3, #1
 800a724:	2193      	movs	r1, #147	; 0x93
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff ff8c 	bl	800a644 <ft5336_write_reg>
 800a72c:	4603      	mov	r3, r0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b082      	sub	sp, #8
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	460b      	mov	r3, r1
 800a740:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800a742:	1cfa      	adds	r2, r7, #3
 800a744:	2301      	movs	r3, #1
 800a746:	2194      	movs	r1, #148	; 0x94
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff ff7b 	bl	800a644 <ft5336_write_reg>
 800a74e:	4603      	mov	r3, r0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800a764:	1cfa      	adds	r2, r7, #3
 800a766:	2301      	movs	r3, #1
 800a768:	2195      	movs	r1, #149	; 0x95
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff ff6a 	bl	800a644 <ft5336_write_reg>
 800a770:	4603      	mov	r3, r0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	460b      	mov	r3, r1
 800a784:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800a786:	1cfa      	adds	r2, r7, #3
 800a788:	2301      	movs	r3, #1
 800a78a:	2196      	movs	r1, #150	; 0x96
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff ff59 	bl	800a644 <ft5336_write_reg>
 800a792:	4603      	mov	r3, r0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800a7a8:	1cfa      	adds	r2, r7, #3
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	21a4      	movs	r1, #164	; 0xa4
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff ff48 	bl	800a644 <ft5336_write_reg>
 800a7b4:	4603      	mov	r3, r0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b084      	sub	sp, #16
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	21a8      	movs	r1, #168	; 0xa8
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7ff ff21 	bl	800a616 <ft5336_read_reg>
 800a7d4:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d107      	bne.n	800a7ec <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781a      	ldrb	r2, [r3, #0]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	781a      	ldrb	r2, [r3, #0]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a804:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a80c:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a814:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a81c:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a824:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a82c:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a834:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a83c:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a844:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 800a846:	2300      	movs	r3, #0
};
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b09c      	sub	sp, #112	; 0x70
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
 800a860:	4613      	mov	r3, r2
 800a862:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 800a864:	f107 0320 	add.w	r3, r7, #32
 800a868:	2250      	movs	r2, #80	; 0x50
 800a86a:	2100      	movs	r1, #0
 800a86c:	4618      	mov	r0, r3
 800a86e:	f01d f871 	bl	8027954 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800a872:	f107 030c 	add.w	r3, r7, #12
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	605a      	str	r2, [r3, #4]
 800a87c:	609a      	str	r2, [r3, #8]
 800a87e:	60da      	str	r2, [r3, #12]
 800a880:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800a882:	78fb      	ldrb	r3, [r7, #3]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d105      	bne.n	800a894 <MX25LM51245G_AutoPollingMemReady+0x40>
 800a888:	78bb      	ldrb	r3, [r7, #2]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d102      	bne.n	800a894 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 800a88e:	f04f 33ff 	mov.w	r3, #4294967295
 800a892:	e088      	b.n	800a9a6 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a894:	2300      	movs	r3, #0
 800a896:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a898:	2300      	movs	r3, #0
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <MX25LM51245G_AutoPollingMemReady+0x52>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e000      	b.n	800a8a8 <MX25LM51245G_AutoPollingMemReady+0x54>
 800a8a6:	2304      	movs	r3, #4
 800a8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a8aa:	78bb      	ldrb	r3, [r7, #2]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d101      	bne.n	800a8b4 <MX25LM51245G_AutoPollingMemReady+0x60>
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	e000      	b.n	800a8b6 <MX25LM51245G_AutoPollingMemReady+0x62>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800a8b8:	78fb      	ldrb	r3, [r7, #3]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <MX25LM51245G_AutoPollingMemReady+0x6e>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e000      	b.n	800a8c4 <MX25LM51245G_AutoPollingMemReady+0x70>
 800a8c2:	2310      	movs	r3, #16
 800a8c4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800a8c6:	78fb      	ldrb	r3, [r7, #3]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <MX25LM51245G_AutoPollingMemReady+0x7c>
 800a8cc:	2305      	movs	r3, #5
 800a8ce:	e001      	b.n	800a8d4 <MX25LM51245G_AutoPollingMemReady+0x80>
 800a8d0:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800a8d4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800a8d6:	78fb      	ldrb	r3, [r7, #3]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <MX25LM51245G_AutoPollingMemReady+0x8c>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	e001      	b.n	800a8e4 <MX25LM51245G_AutoPollingMemReady+0x90>
 800a8e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800a8e6:	78bb      	ldrb	r3, [r7, #2]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d102      	bne.n	800a8f2 <MX25LM51245G_AutoPollingMemReady+0x9e>
 800a8ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8f0:	e000      	b.n	800a8f4 <MX25LM51245G_AutoPollingMemReady+0xa0>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800a8f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a8fa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a900:	2300      	movs	r3, #0
 800a902:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800a904:	78fb      	ldrb	r3, [r7, #3]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d102      	bne.n	800a910 <MX25LM51245G_AutoPollingMemReady+0xbc>
 800a90a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a90e:	e001      	b.n	800a914 <MX25LM51245G_AutoPollingMemReady+0xc0>
 800a910:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a914:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800a916:	78bb      	ldrb	r3, [r7, #2]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d102      	bne.n	800a922 <MX25LM51245G_AutoPollingMemReady+0xce>
 800a91c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a920:	e000      	b.n	800a924 <MX25LM51245G_AutoPollingMemReady+0xd0>
 800a922:	2300      	movs	r3, #0
 800a924:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800a926:	78fb      	ldrb	r3, [r7, #3]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <MX25LM51245G_AutoPollingMemReady+0xdc>
 800a92c:	2300      	movs	r3, #0
 800a92e:	e000      	b.n	800a932 <MX25LM51245G_AutoPollingMemReady+0xde>
 800a930:	2305      	movs	r3, #5
 800a932:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800a934:	78bb      	ldrb	r3, [r7, #2]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d101      	bne.n	800a93e <MX25LM51245G_AutoPollingMemReady+0xea>
 800a93a:	2302      	movs	r3, #2
 800a93c:	e000      	b.n	800a940 <MX25LM51245G_AutoPollingMemReady+0xec>
 800a93e:	2301      	movs	r3, #1
 800a940:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800a942:	78bb      	ldrb	r3, [r7, #2]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d102      	bne.n	800a94e <MX25LM51245G_AutoPollingMemReady+0xfa>
 800a948:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a94c:	e000      	b.n	800a950 <MX25LM51245G_AutoPollingMemReady+0xfc>
 800a94e:	2300      	movs	r3, #0
 800a950:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a952:	2300      	movs	r3, #0
 800a954:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 800a956:	2300      	movs	r3, #0
 800a958:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800a95a:	2301      	movs	r3, #1
 800a95c:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800a95e:	2300      	movs	r3, #0
 800a960:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800a962:	2310      	movs	r3, #16
 800a964:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800a966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a96a:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a96c:	f107 0320 	add.w	r3, r7, #32
 800a970:	f241 3288 	movw	r2, #5000	; 0x1388
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f007 f8ba 	bl	8011af0 <HAL_OSPI_Command>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d002      	beq.n	800a988 <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 800a982:	f04f 33ff 	mov.w	r3, #4294967295
 800a986:	e00e      	b.n	800a9a6 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a988:	f107 030c 	add.w	r3, r7, #12
 800a98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a990:	4619      	mov	r1, r3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f007 fa4f 	bl	8011e36 <HAL_OSPI_AutoPolling>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 800a99e:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a2:	e000      	b.n	800a9a6 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3770      	adds	r7, #112	; 0x70
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b098      	sub	sp, #96	; 0x60
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 800a9be:	f107 0310 	add.w	r3, r7, #16
 800a9c2:	2250      	movs	r2, #80	; 0x50
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f01c ffc4 	bl	8027954 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800a9cc:	f107 0308 	add.w	r3, r7, #8
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800a9d6:	78fb      	ldrb	r3, [r7, #3]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d105      	bne.n	800a9e8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 800a9dc:	78bb      	ldrb	r3, [r7, #2]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d102      	bne.n	800a9e8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 800a9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e6:	e088      	b.n	800aafa <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e000      	b.n	800a9fc <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 800a9fa:	2304      	movs	r3, #4
 800a9fc:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800aa02:	78fb      	ldrb	r3, [r7, #3]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e000      	b.n	800aa0e <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 800aa0c:	2310      	movs	r3, #16
 800aa0e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800aa10:	78fb      	ldrb	r3, [r7, #3]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d106      	bne.n	800aa24 <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 800aa16:	78bb      	ldrb	r3, [r7, #2]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d101      	bne.n	800aa20 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 800aa1c:	230b      	movs	r3, #11
 800aa1e:	e003      	b.n	800aa28 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 800aa20:	230c      	movs	r3, #12
 800aa22:	e001      	b.n	800aa28 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 800aa24:	f64e 4313 	movw	r3, #60435	; 0xec13
 800aa28:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800aa2a:	78fb      	ldrb	r3, [r7, #3]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d102      	bne.n	800aa36 <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 800aa30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa34:	e001      	b.n	800aa3a <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 800aa36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800aa40:	78bb      	ldrb	r3, [r7, #2]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d102      	bne.n	800aa4c <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 800aa46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa4a:	e001      	b.n	800aa50 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 800aa4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800aa50:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d102      	bne.n	800aa62 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 800aa5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa60:	e001      	b.n	800aa66 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 800aa62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aa66:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800aa6c:	78fb      	ldrb	r3, [r7, #3]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 800aa72:	2308      	movs	r3, #8
 800aa74:	e000      	b.n	800aa78 <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 800aa76:	2306      	movs	r3, #6
 800aa78:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aa82:	f107 0310 	add.w	r3, r7, #16
 800aa86:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f007 f82f 	bl	8011af0 <HAL_OSPI_Command>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 800aa98:	f04f 33ff 	mov.w	r3, #4294967295
 800aa9c:	e02d      	b.n	800aafa <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800aaa2:	78fb      	ldrb	r3, [r7, #3]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d106      	bne.n	800aab6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 800aaa8:	78bb      	ldrb	r3, [r7, #2]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e003      	b.n	800aaba <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 800aab2:	2312      	movs	r3, #18
 800aab4:	e001      	b.n	800aaba <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 800aab6:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800aaba:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 800aabc:	2300      	movs	r3, #0
 800aabe:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aac0:	f107 0310 	add.w	r3, r7, #16
 800aac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aac8:	4619      	mov	r1, r3
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f007 f810 	bl	8011af0 <HAL_OSPI_Command>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d002      	beq.n	800aadc <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 800aad6:	f04f 33ff 	mov.w	r3, #4294967295
 800aada:	e00e      	b.n	800aafa <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800aadc:	2300      	movs	r3, #0
 800aade:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800aae0:	f107 0308 	add.w	r3, r7, #8
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f007 fa2c 	bl	8011f44 <HAL_OSPI_MemoryMapped>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 800aaf2:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf6:	e000      	b.n	800aafa <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3760      	adds	r7, #96	; 0x60
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b098      	sub	sp, #96	; 0x60
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 800ab0e:	f107 0310 	add.w	r3, r7, #16
 800ab12:	2250      	movs	r2, #80	; 0x50
 800ab14:	2100      	movs	r1, #0
 800ab16:	4618      	mov	r0, r3
 800ab18:	f01c ff1c 	bl	8027954 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800ab1c:	f107 0308 	add.w	r3, r7, #8
 800ab20:	2200      	movs	r2, #0
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800ab26:	2301      	movs	r3, #1
 800ab28:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800ab2e:	2304      	movs	r3, #4
 800ab30:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 800ab32:	2308      	movs	r3, #8
 800ab34:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800ab36:	2310      	movs	r3, #16
 800ab38:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800ab3a:	f64e 6311 	movw	r3, #60945	; 0xee11
 800ab3e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800ab40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800ab46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab4a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800ab4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ab50:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ab52:	2300      	movs	r3, #0
 800ab54:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800ab56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ab5a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800ab5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab60:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800ab62:	2306      	movs	r3, #6
 800ab64:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800ab66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ab6a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab70:	f107 0310 	add.w	r3, r7, #16
 800ab74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab78:	4619      	mov	r1, r3
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f006 ffb8 	bl	8011af0 <HAL_OSPI_Command>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 800ab86:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8a:	e025      	b.n	800abd8 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800ab90:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800ab94:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 800ab96:	2300      	movs	r3, #0
 800ab98:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab9e:	f107 0310 	add.w	r3, r7, #16
 800aba2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f006 ffa1 	bl	8011af0 <HAL_OSPI_Command>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 800abb4:	f04f 33ff 	mov.w	r3, #4294967295
 800abb8:	e00e      	b.n	800abd8 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800abba:	2300      	movs	r3, #0
 800abbc:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800abbe:	f107 0308 	add.w	r3, r7, #8
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f007 f9bd 	bl	8011f44 <HAL_OSPI_MemoryMapped>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 800abd0:	f04f 33ff 	mov.w	r3, #4294967295
 800abd4:	e000      	b.n	800abd8 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3760      	adds	r7, #96	; 0x60
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b09c      	sub	sp, #112	; 0x70
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	70fb      	strb	r3, [r7, #3]
 800abec:	4613      	mov	r3, r2
 800abee:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 800abf0:	f107 0320 	add.w	r3, r7, #32
 800abf4:	2250      	movs	r2, #80	; 0x50
 800abf6:	2100      	movs	r1, #0
 800abf8:	4618      	mov	r0, r3
 800abfa:	f01c feab 	bl	8027954 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800abfe:	f107 030c 	add.w	r3, r7, #12
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]
 800ac06:	605a      	str	r2, [r3, #4]
 800ac08:	609a      	str	r2, [r3, #8]
 800ac0a:	60da      	str	r2, [r3, #12]
 800ac0c:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800ac0e:	78fb      	ldrb	r3, [r7, #3]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d105      	bne.n	800ac20 <MX25LM51245G_WriteEnable+0x40>
 800ac14:	78bb      	ldrb	r3, [r7, #2]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d102      	bne.n	800ac20 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 800ac1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac1e:	e0a6      	b.n	800ad6e <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800ac20:	2300      	movs	r3, #0
 800ac22:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ac24:	2300      	movs	r3, #0
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800ac28:	78fb      	ldrb	r3, [r7, #3]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <MX25LM51245G_WriteEnable+0x52>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e000      	b.n	800ac34 <MX25LM51245G_WriteEnable+0x54>
 800ac32:	2304      	movs	r3, #4
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ac36:	78bb      	ldrb	r3, [r7, #2]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d101      	bne.n	800ac40 <MX25LM51245G_WriteEnable+0x60>
 800ac3c:	2308      	movs	r3, #8
 800ac3e:	e000      	b.n	800ac42 <MX25LM51245G_WriteEnable+0x62>
 800ac40:	2300      	movs	r3, #0
 800ac42:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800ac44:	78fb      	ldrb	r3, [r7, #3]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <MX25LM51245G_WriteEnable+0x6e>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e000      	b.n	800ac50 <MX25LM51245G_WriteEnable+0x70>
 800ac4e:	2310      	movs	r3, #16
 800ac50:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800ac52:	78fb      	ldrb	r3, [r7, #3]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <MX25LM51245G_WriteEnable+0x7c>
 800ac58:	2306      	movs	r3, #6
 800ac5a:	e001      	b.n	800ac60 <MX25LM51245G_WriteEnable+0x80>
 800ac5c:	f240 63f9 	movw	r3, #1785	; 0x6f9
 800ac60:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800ac62:	2300      	movs	r3, #0
 800ac64:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ac66:	2300      	movs	r3, #0
 800ac68:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ac76:	2300      	movs	r3, #0
 800ac78:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ac7a:	f107 0320 	add.w	r3, r7, #32
 800ac7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f006 ff33 	bl	8011af0 <HAL_OSPI_Command>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 800ac90:	f04f 33ff 	mov.w	r3, #4294967295
 800ac94:	e06b      	b.n	800ad6e <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800ac96:	78fb      	ldrb	r3, [r7, #3]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <MX25LM51245G_WriteEnable+0xc0>
 800ac9c:	2305      	movs	r3, #5
 800ac9e:	e001      	b.n	800aca4 <MX25LM51245G_WriteEnable+0xc4>
 800aca0:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800aca4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800aca6:	78fb      	ldrb	r3, [r7, #3]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <MX25LM51245G_WriteEnable+0xd0>
 800acac:	2300      	movs	r3, #0
 800acae:	e001      	b.n	800acb4 <MX25LM51245G_WriteEnable+0xd4>
 800acb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800acb6:	78bb      	ldrb	r3, [r7, #2]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d102      	bne.n	800acc2 <MX25LM51245G_WriteEnable+0xe2>
 800acbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acc0:	e000      	b.n	800acc4 <MX25LM51245G_WriteEnable+0xe4>
 800acc2:	2300      	movs	r3, #0
 800acc4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800acc6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800acca:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 800accc:	2300      	movs	r3, #0
 800acce:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d102      	bne.n	800acdc <MX25LM51245G_WriteEnable+0xfc>
 800acd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800acda:	e001      	b.n	800ace0 <MX25LM51245G_WriteEnable+0x100>
 800acdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ace0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800ace2:	78bb      	ldrb	r3, [r7, #2]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d102      	bne.n	800acee <MX25LM51245G_WriteEnable+0x10e>
 800ace8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800acec:	e000      	b.n	800acf0 <MX25LM51245G_WriteEnable+0x110>
 800acee:	2300      	movs	r3, #0
 800acf0:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <MX25LM51245G_WriteEnable+0x11c>
 800acf8:	2300      	movs	r3, #0
 800acfa:	e000      	b.n	800acfe <MX25LM51245G_WriteEnable+0x11e>
 800acfc:	2305      	movs	r3, #5
 800acfe:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800ad00:	78bb      	ldrb	r3, [r7, #2]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d101      	bne.n	800ad0a <MX25LM51245G_WriteEnable+0x12a>
 800ad06:	2302      	movs	r3, #2
 800ad08:	e000      	b.n	800ad0c <MX25LM51245G_WriteEnable+0x12c>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800ad0e:	78bb      	ldrb	r3, [r7, #2]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d102      	bne.n	800ad1a <MX25LM51245G_WriteEnable+0x13a>
 800ad14:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ad18:	e000      	b.n	800ad1c <MX25LM51245G_WriteEnable+0x13c>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad1e:	f107 0320 	add.w	r3, r7, #32
 800ad22:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f006 fee1 	bl	8011af0 <HAL_OSPI_Command>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 800ad34:	f04f 33ff 	mov.w	r3, #4294967295
 800ad38:	e019      	b.n	800ad6e <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 800ad3e:	2302      	movs	r3, #2
 800ad40:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800ad42:	2300      	movs	r3, #0
 800ad44:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800ad46:	2310      	movs	r3, #16
 800ad48:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800ad4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad4e:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad50:	f107 030c 	add.w	r3, r7, #12
 800ad54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f007 f86b 	bl	8011e36 <HAL_OSPI_AutoPolling>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d002      	beq.n	800ad6c <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 800ad66:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6a:	e000      	b.n	800ad6e <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3770      	adds	r7, #112	; 0x70
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b098      	sub	sp, #96	; 0x60
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	60f8      	str	r0, [r7, #12]
 800ad7e:	607b      	str	r3, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	72fb      	strb	r3, [r7, #11]
 800ad84:	4613      	mov	r3, r2
 800ad86:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800ad88:	f107 0310 	add.w	r3, r7, #16
 800ad8c:	2250      	movs	r2, #80	; 0x50
 800ad8e:	2100      	movs	r1, #0
 800ad90:	4618      	mov	r0, r3
 800ad92:	f01c fddf 	bl	8027954 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800ad96:	7afb      	ldrb	r3, [r7, #11]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d105      	bne.n	800ada8 <MX25LM51245G_WriteCfg2Register+0x32>
 800ad9c:	7abb      	ldrb	r3, [r7, #10]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d102      	bne.n	800ada8 <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800ada2:	f04f 33ff 	mov.w	r3, #4294967295
 800ada6:	e077      	b.n	800ae98 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800ada8:	2300      	movs	r3, #0
 800adaa:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800adac:	2300      	movs	r3, #0
 800adae:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d101      	bne.n	800adba <MX25LM51245G_WriteCfg2Register+0x44>
 800adb6:	2301      	movs	r3, #1
 800adb8:	e000      	b.n	800adbc <MX25LM51245G_WriteCfg2Register+0x46>
 800adba:	2304      	movs	r3, #4
 800adbc:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800adbe:	7abb      	ldrb	r3, [r7, #10]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d101      	bne.n	800adc8 <MX25LM51245G_WriteCfg2Register+0x52>
 800adc4:	2308      	movs	r3, #8
 800adc6:	e000      	b.n	800adca <MX25LM51245G_WriteCfg2Register+0x54>
 800adc8:	2300      	movs	r3, #0
 800adca:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800adcc:	7afb      	ldrb	r3, [r7, #11]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <MX25LM51245G_WriteCfg2Register+0x60>
 800add2:	2300      	movs	r3, #0
 800add4:	e000      	b.n	800add8 <MX25LM51245G_WriteCfg2Register+0x62>
 800add6:	2310      	movs	r3, #16
 800add8:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800adda:	7afb      	ldrb	r3, [r7, #11]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <MX25LM51245G_WriteCfg2Register+0x6e>
 800ade0:	2372      	movs	r3, #114	; 0x72
 800ade2:	e001      	b.n	800ade8 <MX25LM51245G_WriteCfg2Register+0x72>
 800ade4:	f247 238d 	movw	r3, #29325	; 0x728d
 800ade8:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800adea:	7afb      	ldrb	r3, [r7, #11]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d102      	bne.n	800adf6 <MX25LM51245G_WriteCfg2Register+0x80>
 800adf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adf4:	e001      	b.n	800adfa <MX25LM51245G_WriteCfg2Register+0x84>
 800adf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800adfc:	7abb      	ldrb	r3, [r7, #10]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d102      	bne.n	800ae08 <MX25LM51245G_WriteCfg2Register+0x92>
 800ae02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae06:	e000      	b.n	800ae0a <MX25LM51245G_WriteCfg2Register+0x94>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800ae0c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ae10:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ae16:	2300      	movs	r3, #0
 800ae18:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800ae1a:	7afb      	ldrb	r3, [r7, #11]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d102      	bne.n	800ae26 <MX25LM51245G_WriteCfg2Register+0xb0>
 800ae20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae24:	e001      	b.n	800ae2a <MX25LM51245G_WriteCfg2Register+0xb4>
 800ae26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ae2a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800ae2c:	7abb      	ldrb	r3, [r7, #10]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d102      	bne.n	800ae38 <MX25LM51245G_WriteCfg2Register+0xc2>
 800ae32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae36:	e000      	b.n	800ae3a <MX25LM51245G_WriteCfg2Register+0xc4>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800ae40:	7afb      	ldrb	r3, [r7, #11]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d006      	beq.n	800ae54 <MX25LM51245G_WriteCfg2Register+0xde>
 800ae46:	7abb      	ldrb	r3, [r7, #10]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d101      	bne.n	800ae50 <MX25LM51245G_WriteCfg2Register+0xda>
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	e002      	b.n	800ae56 <MX25LM51245G_WriteCfg2Register+0xe0>
 800ae50:	2301      	movs	r3, #1
 800ae52:	e000      	b.n	800ae56 <MX25LM51245G_WriteCfg2Register+0xe0>
 800ae54:	2301      	movs	r3, #1
 800ae56:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae60:	f107 0310 	add.w	r3, r7, #16
 800ae64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae68:	4619      	mov	r1, r3
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f006 fe40 	bl	8011af0 <HAL_OSPI_Command>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d002      	beq.n	800ae7c <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 800ae76:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7a:	e00d      	b.n	800ae98 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae80:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f006 fec0 	bl	8011c0a <HAL_OSPI_Transmit>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 800ae90:	f04f 33ff 	mov.w	r3, #4294967295
 800ae94:	e000      	b.n	800ae98 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3760      	adds	r7, #96	; 0x60
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b098      	sub	sp, #96	; 0x60
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	607b      	str	r3, [r7, #4]
 800aeaa:	460b      	mov	r3, r1
 800aeac:	72fb      	strb	r3, [r7, #11]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800aeb2:	f107 0310 	add.w	r3, r7, #16
 800aeb6:	2250      	movs	r2, #80	; 0x50
 800aeb8:	2100      	movs	r1, #0
 800aeba:	4618      	mov	r0, r3
 800aebc:	f01c fd4a 	bl	8027954 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800aec0:	7afb      	ldrb	r3, [r7, #11]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d105      	bne.n	800aed2 <MX25LM51245G_ReadCfg2Register+0x32>
 800aec6:	7abb      	ldrb	r3, [r7, #10]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d102      	bne.n	800aed2 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800aecc:	f04f 33ff 	mov.w	r3, #4294967295
 800aed0:	e07c      	b.n	800afcc <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800aed2:	2300      	movs	r3, #0
 800aed4:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800aed6:	2300      	movs	r3, #0
 800aed8:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800aeda:	7afb      	ldrb	r3, [r7, #11]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <MX25LM51245G_ReadCfg2Register+0x44>
 800aee0:	2301      	movs	r3, #1
 800aee2:	e000      	b.n	800aee6 <MX25LM51245G_ReadCfg2Register+0x46>
 800aee4:	2304      	movs	r3, #4
 800aee6:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800aee8:	7abb      	ldrb	r3, [r7, #10]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d101      	bne.n	800aef2 <MX25LM51245G_ReadCfg2Register+0x52>
 800aeee:	2308      	movs	r3, #8
 800aef0:	e000      	b.n	800aef4 <MX25LM51245G_ReadCfg2Register+0x54>
 800aef2:	2300      	movs	r3, #0
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800aef6:	7afb      	ldrb	r3, [r7, #11]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d101      	bne.n	800af00 <MX25LM51245G_ReadCfg2Register+0x60>
 800aefc:	2300      	movs	r3, #0
 800aefe:	e000      	b.n	800af02 <MX25LM51245G_ReadCfg2Register+0x62>
 800af00:	2310      	movs	r3, #16
 800af02:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800af04:	7afb      	ldrb	r3, [r7, #11]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d101      	bne.n	800af0e <MX25LM51245G_ReadCfg2Register+0x6e>
 800af0a:	2371      	movs	r3, #113	; 0x71
 800af0c:	e001      	b.n	800af12 <MX25LM51245G_ReadCfg2Register+0x72>
 800af0e:	f247 138e 	movw	r3, #29070	; 0x718e
 800af12:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800af14:	7afb      	ldrb	r3, [r7, #11]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d102      	bne.n	800af20 <MX25LM51245G_ReadCfg2Register+0x80>
 800af1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af1e:	e001      	b.n	800af24 <MX25LM51245G_ReadCfg2Register+0x84>
 800af20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af24:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800af26:	7abb      	ldrb	r3, [r7, #10]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d102      	bne.n	800af32 <MX25LM51245G_ReadCfg2Register+0x92>
 800af2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af30:	e000      	b.n	800af34 <MX25LM51245G_ReadCfg2Register+0x94>
 800af32:	2300      	movs	r3, #0
 800af34:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800af36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800af3a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800af40:	2300      	movs	r3, #0
 800af42:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800af44:	7afb      	ldrb	r3, [r7, #11]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d102      	bne.n	800af50 <MX25LM51245G_ReadCfg2Register+0xb0>
 800af4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af4e:	e001      	b.n	800af54 <MX25LM51245G_ReadCfg2Register+0xb4>
 800af50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800af54:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800af56:	7abb      	ldrb	r3, [r7, #10]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d102      	bne.n	800af62 <MX25LM51245G_ReadCfg2Register+0xc2>
 800af5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af60:	e000      	b.n	800af64 <MX25LM51245G_ReadCfg2Register+0xc4>
 800af62:	2300      	movs	r3, #0
 800af64:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800af66:	7afb      	ldrb	r3, [r7, #11]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <MX25LM51245G_ReadCfg2Register+0xd0>
 800af6c:	2300      	movs	r3, #0
 800af6e:	e000      	b.n	800af72 <MX25LM51245G_ReadCfg2Register+0xd2>
 800af70:	2305      	movs	r3, #5
 800af72:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800af74:	7abb      	ldrb	r3, [r7, #10]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d101      	bne.n	800af7e <MX25LM51245G_ReadCfg2Register+0xde>
 800af7a:	2302      	movs	r3, #2
 800af7c:	e000      	b.n	800af80 <MX25LM51245G_ReadCfg2Register+0xe0>
 800af7e:	2301      	movs	r3, #1
 800af80:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800af82:	7abb      	ldrb	r3, [r7, #10]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d102      	bne.n	800af8e <MX25LM51245G_ReadCfg2Register+0xee>
 800af88:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800af8c:	e000      	b.n	800af90 <MX25LM51245G_ReadCfg2Register+0xf0>
 800af8e:	2300      	movs	r3, #0
 800af90:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800af92:	2300      	movs	r3, #0
 800af94:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800af96:	f107 0310 	add.w	r3, r7, #16
 800af9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af9e:	4619      	mov	r1, r3
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f006 fda5 	bl	8011af0 <HAL_OSPI_Command>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 800afac:	f04f 33ff 	mov.w	r3, #4294967295
 800afb0:	e00c      	b.n	800afcc <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800afb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f006 fe99 	bl	8011cf0 <HAL_OSPI_Receive>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 800afc4:	f04f 33ff 	mov.w	r3, #4294967295
 800afc8:	e000      	b.n	800afcc <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3760      	adds	r7, #96	; 0x60
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b096      	sub	sp, #88	; 0x58
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
 800afe0:	4613      	mov	r3, r2
 800afe2:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800afe4:	f107 0308 	add.w	r3, r7, #8
 800afe8:	2250      	movs	r2, #80	; 0x50
 800afea:	2100      	movs	r1, #0
 800afec:	4618      	mov	r0, r3
 800afee:	f01c fcb1 	bl	8027954 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800aff2:	78fb      	ldrb	r3, [r7, #3]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d105      	bne.n	800b004 <MX25LM51245G_ResetEnable+0x30>
 800aff8:	78bb      	ldrb	r3, [r7, #2]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d102      	bne.n	800b004 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 800affe:	f04f 33ff 	mov.w	r3, #4294967295
 800b002:	e03b      	b.n	800b07c <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b004:	2300      	movs	r3, #0
 800b006:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800b00c:	78fb      	ldrb	r3, [r7, #3]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <MX25LM51245G_ResetEnable+0x42>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <MX25LM51245G_ResetEnable+0x44>
 800b016:	2304      	movs	r3, #4
 800b018:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b01a:	78bb      	ldrb	r3, [r7, #2]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <MX25LM51245G_ResetEnable+0x50>
 800b020:	2308      	movs	r3, #8
 800b022:	e000      	b.n	800b026 <MX25LM51245G_ResetEnable+0x52>
 800b024:	2300      	movs	r3, #0
 800b026:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800b028:	78fb      	ldrb	r3, [r7, #3]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <MX25LM51245G_ResetEnable+0x5e>
 800b02e:	2300      	movs	r3, #0
 800b030:	e000      	b.n	800b034 <MX25LM51245G_ResetEnable+0x60>
 800b032:	2310      	movs	r3, #16
 800b034:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800b036:	78fb      	ldrb	r3, [r7, #3]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <MX25LM51245G_ResetEnable+0x6c>
 800b03c:	2366      	movs	r3, #102	; 0x66
 800b03e:	e001      	b.n	800b044 <MX25LM51245G_ResetEnable+0x70>
 800b040:	f246 6399 	movw	r3, #26265	; 0x6699
 800b044:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b046:	2300      	movs	r3, #0
 800b048:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800b04e:	2300      	movs	r3, #0
 800b050:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800b052:	2300      	movs	r3, #0
 800b054:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b056:	2300      	movs	r3, #0
 800b058:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b05a:	2300      	movs	r3, #0
 800b05c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b05e:	f107 0308 	add.w	r3, r7, #8
 800b062:	f241 3288 	movw	r2, #5000	; 0x1388
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f006 fd41 	bl	8011af0 <HAL_OSPI_Command>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 800b074:	f04f 33ff 	mov.w	r3, #4294967295
 800b078:	e000      	b.n	800b07c <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3758      	adds	r7, #88	; 0x58
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b096      	sub	sp, #88	; 0x58
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
 800b090:	4613      	mov	r3, r2
 800b092:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800b094:	f107 0308 	add.w	r3, r7, #8
 800b098:	2250      	movs	r2, #80	; 0x50
 800b09a:	2100      	movs	r1, #0
 800b09c:	4618      	mov	r0, r3
 800b09e:	f01c fc59 	bl	8027954 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800b0a2:	78fb      	ldrb	r3, [r7, #3]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d105      	bne.n	800b0b4 <MX25LM51245G_ResetMemory+0x30>
 800b0a8:	78bb      	ldrb	r3, [r7, #2]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d102      	bne.n	800b0b4 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 800b0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b2:	e03b      	b.n	800b12c <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800b0bc:	78fb      	ldrb	r3, [r7, #3]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <MX25LM51245G_ResetMemory+0x42>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e000      	b.n	800b0c8 <MX25LM51245G_ResetMemory+0x44>
 800b0c6:	2304      	movs	r3, #4
 800b0c8:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b0ca:	78bb      	ldrb	r3, [r7, #2]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d101      	bne.n	800b0d4 <MX25LM51245G_ResetMemory+0x50>
 800b0d0:	2308      	movs	r3, #8
 800b0d2:	e000      	b.n	800b0d6 <MX25LM51245G_ResetMemory+0x52>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800b0d8:	78fb      	ldrb	r3, [r7, #3]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <MX25LM51245G_ResetMemory+0x5e>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e000      	b.n	800b0e4 <MX25LM51245G_ResetMemory+0x60>
 800b0e2:	2310      	movs	r3, #16
 800b0e4:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800b0e6:	78fb      	ldrb	r3, [r7, #3]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <MX25LM51245G_ResetMemory+0x6c>
 800b0ec:	2399      	movs	r3, #153	; 0x99
 800b0ee:	e001      	b.n	800b0f4 <MX25LM51245G_ResetMemory+0x70>
 800b0f0:	f649 1366 	movw	r3, #39270	; 0x9966
 800b0f4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800b0fe:	2300      	movs	r3, #0
 800b100:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800b102:	2300      	movs	r3, #0
 800b104:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b106:	2300      	movs	r3, #0
 800b108:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b10a:	2300      	movs	r3, #0
 800b10c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b10e:	f107 0308 	add.w	r3, r7, #8
 800b112:	f241 3288 	movw	r2, #5000	; 0x1388
 800b116:	4619      	mov	r1, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f006 fce9 	bl	8011af0 <HAL_OSPI_Command>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 800b124:	f04f 33ff 	mov.w	r3, #4294967295
 800b128:	e000      	b.n	800b12c <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3758      	adds	r7, #88	; 0x58
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b13a:	2300      	movs	r3, #0
 800b13c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800b13e:	4b16      	ldr	r3, [pc, #88]	; (800b198 <BSP_I2C4_Init+0x64>)
 800b140:	4a16      	ldr	r2, [pc, #88]	; (800b19c <BSP_I2C4_Init+0x68>)
 800b142:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800b144:	4b16      	ldr	r3, [pc, #88]	; (800b1a0 <BSP_I2C4_Init+0x6c>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d11f      	bne.n	800b18c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800b14c:	4b14      	ldr	r3, [pc, #80]	; (800b1a0 <BSP_I2C4_Init+0x6c>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3301      	adds	r3, #1
 800b152:	4a13      	ldr	r2, [pc, #76]	; (800b1a0 <BSP_I2C4_Init+0x6c>)
 800b154:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b156:	4810      	ldr	r0, [pc, #64]	; (800b198 <BSP_I2C4_Init+0x64>)
 800b158:	f003 f880 	bl	800e25c <HAL_I2C_GetState>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d114      	bne.n	800b18c <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800b162:	480d      	ldr	r0, [pc, #52]	; (800b198 <BSP_I2C4_Init+0x64>)
 800b164:	f000 fb60 	bl	800b828 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b168:	f008 f9fe 	bl	8013568 <HAL_RCC_GetPCLK2Freq>
 800b16c:	4603      	mov	r3, r0
 800b16e:	490d      	ldr	r1, [pc, #52]	; (800b1a4 <BSP_I2C4_Init+0x70>)
 800b170:	4618      	mov	r0, r3
 800b172:	f000 f8e3 	bl	800b33c <I2C_GetTiming>
 800b176:	4603      	mov	r3, r0
 800b178:	4619      	mov	r1, r3
 800b17a:	4807      	ldr	r0, [pc, #28]	; (800b198 <BSP_I2C4_Init+0x64>)
 800b17c:	f000 f838 	bl	800b1f0 <MX_I2C4_Init>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800b186:	f06f 0307 	mvn.w	r3, #7
 800b18a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800b18c:	687b      	ldr	r3, [r7, #4]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	24026334 	.word	0x24026334
 800b19c:	58001c00 	.word	0x58001c00
 800b1a0:	2400aeac 	.word	0x2400aeac
 800b1a4:	00061a80 	.word	0x00061a80

0800b1a8 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800b1b2:	4b0d      	ldr	r3, [pc, #52]	; (800b1e8 <BSP_I2C4_DeInit+0x40>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	4a0b      	ldr	r2, [pc, #44]	; (800b1e8 <BSP_I2C4_DeInit+0x40>)
 800b1ba:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800b1bc:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <BSP_I2C4_DeInit+0x40>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10b      	bne.n	800b1dc <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800b1c4:	4809      	ldr	r0, [pc, #36]	; (800b1ec <BSP_I2C4_DeInit+0x44>)
 800b1c6:	f000 fb9b 	bl	800b900 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b1ca:	4808      	ldr	r0, [pc, #32]	; (800b1ec <BSP_I2C4_DeInit+0x44>)
 800b1cc:	f002 fde8 	bl	800dda0 <HAL_I2C_DeInit>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d002      	beq.n	800b1dc <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b1d6:	f06f 0307 	mvn.w	r3, #7
 800b1da:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800b1dc:	687b      	ldr	r3, [r7, #4]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	2400aeac 	.word	0x2400aeac
 800b1ec:	24026334 	.word	0x24026334

0800b1f0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f002 fd26 	bl	800dc80 <HAL_I2C_Init>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d002      	beq.n	800b240 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	73fb      	strb	r3, [r7, #15]
 800b23e:	e014      	b.n	800b26a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800b240:	2300      	movs	r3, #0
 800b242:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f003 fada 	bl	800e800 <HAL_I2CEx_ConfigAnalogFilter>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d002      	beq.n	800b258 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	73fb      	strb	r3, [r7, #15]
 800b256:	e008      	b.n	800b26a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b258:	2100      	movs	r1, #0
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f003 fb1b 	bl	800e896 <HAL_I2CEx_ConfigDigitalFilter>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af02      	add	r7, sp, #8
 800b27a:	60ba      	str	r2, [r7, #8]
 800b27c:	461a      	mov	r2, r3
 800b27e:	4603      	mov	r3, r0
 800b280:	81fb      	strh	r3, [r7, #14]
 800b282:	460b      	mov	r3, r1
 800b284:	81bb      	strh	r3, [r7, #12]
 800b286:	4613      	mov	r3, r2
 800b288:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b28a:	89b9      	ldrh	r1, [r7, #12]
 800b28c:	89f8      	ldrh	r0, [r7, #14]
 800b28e:	88fb      	ldrh	r3, [r7, #6]
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2201      	movs	r2, #1
 800b296:	f000 fb57 	bl	800b948 <I2C4_WriteReg>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d102      	bne.n	800b2a6 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	e00c      	b.n	800b2c0 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b2a6:	4809      	ldr	r0, [pc, #36]	; (800b2cc <BSP_I2C4_WriteReg+0x58>)
 800b2a8:	f002 ffe6 	bl	800e278 <HAL_I2C_GetError>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d103      	bne.n	800b2ba <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b2b2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b2b6:	617b      	str	r3, [r7, #20]
 800b2b8:	e002      	b.n	800b2c0 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b2ba:	f06f 0303 	mvn.w	r3, #3
 800b2be:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b2c0:	697b      	ldr	r3, [r7, #20]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	24026334 	.word	0x24026334

0800b2d0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b088      	sub	sp, #32
 800b2d4:	af02      	add	r7, sp, #8
 800b2d6:	60ba      	str	r2, [r7, #8]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4603      	mov	r3, r0
 800b2dc:	81fb      	strh	r3, [r7, #14]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	81bb      	strh	r3, [r7, #12]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b2e6:	89b9      	ldrh	r1, [r7, #12]
 800b2e8:	89f8      	ldrh	r0, [r7, #14]
 800b2ea:	88fb      	ldrh	r3, [r7, #6]
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f000 fb4f 	bl	800b994 <I2C4_ReadReg>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d102      	bne.n	800b302 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	617b      	str	r3, [r7, #20]
 800b300:	e00c      	b.n	800b31c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b302:	4809      	ldr	r0, [pc, #36]	; (800b328 <BSP_I2C4_ReadReg+0x58>)
 800b304:	f002 ffb8 	bl	800e278 <HAL_I2C_GetError>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b04      	cmp	r3, #4
 800b30c:	d103      	bne.n	800b316 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b30e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b312:	617b      	str	r3, [r7, #20]
 800b314:	e002      	b.n	800b31c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b316:	f06f 0303 	mvn.w	r3, #3
 800b31a:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b31c:	697b      	ldr	r3, [r7, #20]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	24026334 	.word	0x24026334

0800b32c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800b330:	f001 fca4 	bl	800cc7c <HAL_GetTick>
 800b334:	4603      	mov	r3, r0
}
 800b336:	4618      	mov	r0, r3
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800b346:	2300      	movs	r3, #0
 800b348:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d06b      	beq.n	800b428 <I2C_GetTiming+0xec>
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d068      	beq.n	800b428 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b356:	2300      	movs	r3, #0
 800b358:	613b      	str	r3, [r7, #16]
 800b35a:	e060      	b.n	800b41e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b35c:	4a35      	ldr	r2, [pc, #212]	; (800b434 <I2C_GetTiming+0xf8>)
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	212c      	movs	r1, #44	; 0x2c
 800b362:	fb01 f303 	mul.w	r3, r1, r3
 800b366:	4413      	add	r3, r2
 800b368:	3304      	adds	r3, #4
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d352      	bcc.n	800b418 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800b372:	4a30      	ldr	r2, [pc, #192]	; (800b434 <I2C_GetTiming+0xf8>)
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	212c      	movs	r1, #44	; 0x2c
 800b378:	fb01 f303 	mul.w	r3, r1, r3
 800b37c:	4413      	add	r3, r2
 800b37e:	3308      	adds	r3, #8
 800b380:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	429a      	cmp	r2, r3
 800b386:	d847      	bhi.n	800b418 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800b388:	6939      	ldr	r1, [r7, #16]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f856 	bl	800b43c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800b390:	6939      	ldr	r1, [r7, #16]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f940 	bl	800b618 <I2C_Compute_SCLL_SCLH>
 800b398:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b7f      	cmp	r3, #127	; 0x7f
 800b39e:	d842      	bhi.n	800b426 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b3a0:	4925      	ldr	r1, [pc, #148]	; (800b438 <I2C_GetTiming+0xfc>)
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	440b      	add	r3, r1
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b3b2:	4821      	ldr	r0, [pc, #132]	; (800b438 <I2C_GetTiming+0xfc>)
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4413      	add	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4403      	add	r3, r0
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	051b      	lsls	r3, r3, #20
 800b3c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b3ca:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b3cc:	481a      	ldr	r0, [pc, #104]	; (800b438 <I2C_GetTiming+0xfc>)
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4403      	add	r3, r0
 800b3da:	3308      	adds	r3, #8
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	041b      	lsls	r3, r3, #16
 800b3e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b3e4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800b3e6:	4814      	ldr	r0, [pc, #80]	; (800b438 <I2C_GetTiming+0xfc>)
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	4413      	add	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4403      	add	r3, r0
 800b3f4:	330c      	adds	r3, #12
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	021b      	lsls	r3, r3, #8
 800b3fa:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b3fc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800b3fe:	480e      	ldr	r0, [pc, #56]	; (800b438 <I2C_GetTiming+0xfc>)
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4613      	mov	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4413      	add	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4403      	add	r3, r0
 800b40c:	3310      	adds	r3, #16
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b412:	430b      	orrs	r3, r1
 800b414:	617b      	str	r3, [r7, #20]
        }
        break;
 800b416:	e006      	b.n	800b426 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	3301      	adds	r3, #1
 800b41c:	613b      	str	r3, [r7, #16]
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	2b02      	cmp	r3, #2
 800b422:	d99b      	bls.n	800b35c <I2C_GetTiming+0x20>
 800b424:	e000      	b.n	800b428 <I2C_GetTiming+0xec>
        break;
 800b426:	bf00      	nop
      }
    }
  }

  return ret;
 800b428:	697b      	ldr	r3, [r7, #20]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3718      	adds	r7, #24
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	0802bac0 	.word	0x0802bac0
 800b438:	2400aeb0 	.word	0x2400aeb0

0800b43c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b08f      	sub	sp, #60	; 0x3c
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b446:	2310      	movs	r3, #16
 800b448:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	085a      	lsrs	r2, r3, #1
 800b44e:	4b6e      	ldr	r3, [pc, #440]	; (800b608 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800b450:	4413      	add	r3, r2
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	fbb3 f3f2 	udiv	r3, r3, r2
 800b458:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b45a:	2332      	movs	r3, #50	; 0x32
 800b45c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800b45e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b462:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b464:	4a69      	ldr	r2, [pc, #420]	; (800b60c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	212c      	movs	r1, #44	; 0x2c
 800b46a:	fb01 f303 	mul.w	r3, r1, r3
 800b46e:	4413      	add	r3, r2
 800b470:	3324      	adds	r3, #36	; 0x24
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4618      	mov	r0, r3
 800b476:	4a65      	ldr	r2, [pc, #404]	; (800b60c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	212c      	movs	r1, #44	; 0x2c
 800b47c:	fb01 f303 	mul.w	r3, r1, r3
 800b480:	4413      	add	r3, r2
 800b482:	330c      	adds	r3, #12
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b488:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b48a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b48c:	495f      	ldr	r1, [pc, #380]	; (800b60c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	202c      	movs	r0, #44	; 0x2c
 800b492:	fb00 f303 	mul.w	r3, r0, r3
 800b496:	440b      	add	r3, r1
 800b498:	3328      	adds	r3, #40	; 0x28
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3303      	adds	r3, #3
 800b49e:	69f9      	ldr	r1, [r7, #28]
 800b4a0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b4a8:	4a58      	ldr	r2, [pc, #352]	; (800b60c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	212c      	movs	r1, #44	; 0x2c
 800b4ae:	fb01 f303 	mul.w	r3, r1, r3
 800b4b2:	4413      	add	r3, r2
 800b4b4:	3310      	adds	r3, #16
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	4a54      	ldr	r2, [pc, #336]	; (800b60c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	212c      	movs	r1, #44	; 0x2c
 800b4c0:	fb01 f303 	mul.w	r3, r1, r3
 800b4c4:	4413      	add	r3, r2
 800b4c6:	3320      	adds	r3, #32
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b4cc:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b4ce:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b4d0:	494e      	ldr	r1, [pc, #312]	; (800b60c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	202c      	movs	r0, #44	; 0x2c
 800b4d6:	fb00 f303 	mul.w	r3, r0, r3
 800b4da:	440b      	add	r3, r1
 800b4dc:	3328      	adds	r3, #40	; 0x28
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	69f9      	ldr	r1, [r7, #28]
 800b4e4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800b4ec:	4a47      	ldr	r2, [pc, #284]	; (800b60c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	212c      	movs	r1, #44	; 0x2c
 800b4f2:	fb01 f303 	mul.w	r3, r1, r3
 800b4f6:	4413      	add	r3, r2
 800b4f8:	3320      	adds	r3, #32
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	4a43      	ldr	r2, [pc, #268]	; (800b60c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	212c      	movs	r1, #44	; 0x2c
 800b504:	fb01 f303 	mul.w	r3, r1, r3
 800b508:	4413      	add	r3, r2
 800b50a:	3314      	adds	r3, #20
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4403      	add	r3, r0
 800b510:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b514:	2b00      	cmp	r3, #0
 800b516:	dc01      	bgt.n	800b51c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51e:	2b00      	cmp	r3, #0
 800b520:	dc01      	bgt.n	800b526 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b526:	2300      	movs	r3, #0
 800b528:	62bb      	str	r3, [r7, #40]	; 0x28
 800b52a:	e062      	b.n	800b5f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b52c:	2300      	movs	r3, #0
 800b52e:	627b      	str	r3, [r7, #36]	; 0x24
 800b530:	e059      	b.n	800b5e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	3301      	adds	r3, #1
 800b536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b538:	3201      	adds	r2, #1
 800b53a:	fb02 f203 	mul.w	r2, r2, r3
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	fb02 f303 	mul.w	r3, r2, r3
 800b544:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d348      	bcc.n	800b5e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b54e:	2300      	movs	r3, #0
 800b550:	623b      	str	r3, [r7, #32]
 800b552:	e042      	b.n	800b5da <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b556:	3301      	adds	r3, #1
 800b558:	6a3a      	ldr	r2, [r7, #32]
 800b55a:	fb02 f203 	mul.w	r2, r2, r3
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	fb02 f303 	mul.w	r3, r2, r3
 800b564:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800b566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d332      	bcc.n	800b5d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800b56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	429a      	cmp	r2, r3
 800b574:	d82e      	bhi.n	800b5d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800b576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d02a      	beq.n	800b5d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800b57e:	4b24      	ldr	r3, [pc, #144]	; (800b610 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	4924      	ldr	r1, [pc, #144]	; (800b614 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b584:	4613      	mov	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	440b      	add	r3, r1
 800b58e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b590:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800b592:	4b1f      	ldr	r3, [pc, #124]	; (800b610 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	491f      	ldr	r1, [pc, #124]	; (800b614 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b598:	4613      	mov	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	440b      	add	r3, r1
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800b5a8:	4b19      	ldr	r3, [pc, #100]	; (800b610 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	4919      	ldr	r1, [pc, #100]	; (800b614 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	440b      	add	r3, r1
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	6a3a      	ldr	r2, [r7, #32]
 800b5bc:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800b5c2:	4b13      	ldr	r3, [pc, #76]	; (800b610 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	4a11      	ldr	r2, [pc, #68]	; (800b610 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b5ca:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800b5cc:	4b10      	ldr	r3, [pc, #64]	; (800b610 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b7f      	cmp	r3, #127	; 0x7f
 800b5d2:	d812      	bhi.n	800b5fa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	623b      	str	r3, [r7, #32]
 800b5da:	6a3b      	ldr	r3, [r7, #32]
 800b5dc:	2b0f      	cmp	r3, #15
 800b5de:	d9b9      	bls.n	800b554 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	2b0f      	cmp	r3, #15
 800b5ea:	d9a2      	bls.n	800b532 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	2b0f      	cmp	r3, #15
 800b5f6:	d999      	bls.n	800b52c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800b5f8:	e000      	b.n	800b5fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800b5fa:	bf00      	nop
          }
        }
      }
    }
  }
}
 800b5fc:	373c      	adds	r7, #60	; 0x3c
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	3b9aca00 	.word	0x3b9aca00
 800b60c:	0802bac0 	.word	0x0802bac0
 800b610:	2400b8b0 	.word	0x2400b8b0
 800b614:	2400aeb0 	.word	0x2400aeb0

0800b618 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b618:	b480      	push	{r7}
 800b61a:	b093      	sub	sp, #76	; 0x4c
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800b622:	f04f 33ff 	mov.w	r3, #4294967295
 800b626:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	085a      	lsrs	r2, r3, #1
 800b62c:	4b7a      	ldr	r3, [pc, #488]	; (800b818 <I2C_Compute_SCLL_SCLH+0x200>)
 800b62e:	4413      	add	r3, r2
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	fbb3 f3f2 	udiv	r3, r3, r2
 800b636:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800b638:	4a78      	ldr	r2, [pc, #480]	; (800b81c <I2C_Compute_SCLL_SCLH+0x204>)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	212c      	movs	r1, #44	; 0x2c
 800b63e:	fb01 f303 	mul.w	r3, r1, r3
 800b642:	4413      	add	r3, r2
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	085a      	lsrs	r2, r3, #1
 800b648:	4b73      	ldr	r3, [pc, #460]	; (800b818 <I2C_Compute_SCLL_SCLH+0x200>)
 800b64a:	4413      	add	r3, r2
 800b64c:	4973      	ldr	r1, [pc, #460]	; (800b81c <I2C_Compute_SCLL_SCLH+0x204>)
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	202c      	movs	r0, #44	; 0x2c
 800b652:	fb00 f202 	mul.w	r2, r0, r2
 800b656:	440a      	add	r2, r1
 800b658:	6812      	ldr	r2, [r2, #0]
 800b65a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b65e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b660:	2332      	movs	r3, #50	; 0x32
 800b662:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800b664:	4a6d      	ldr	r2, [pc, #436]	; (800b81c <I2C_Compute_SCLL_SCLH+0x204>)
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	212c      	movs	r1, #44	; 0x2c
 800b66a:	fb01 f303 	mul.w	r3, r1, r3
 800b66e:	4413      	add	r3, r2
 800b670:	3328      	adds	r3, #40	; 0x28
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b676:	fb02 f303 	mul.w	r3, r2, r3
 800b67a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800b67c:	4a67      	ldr	r2, [pc, #412]	; (800b81c <I2C_Compute_SCLL_SCLH+0x204>)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	212c      	movs	r1, #44	; 0x2c
 800b682:	fb01 f303 	mul.w	r3, r1, r3
 800b686:	4413      	add	r3, r2
 800b688:	3304      	adds	r3, #4
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a62      	ldr	r2, [pc, #392]	; (800b818 <I2C_Compute_SCLL_SCLH+0x200>)
 800b68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b692:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800b694:	4a61      	ldr	r2, [pc, #388]	; (800b81c <I2C_Compute_SCLL_SCLH+0x204>)
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	212c      	movs	r1, #44	; 0x2c
 800b69a:	fb01 f303 	mul.w	r3, r1, r3
 800b69e:	4413      	add	r3, r2
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a5c      	ldr	r2, [pc, #368]	; (800b818 <I2C_Compute_SCLL_SCLH+0x200>)
 800b6a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6aa:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ae:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b6b4:	e0a3      	b.n	800b7fe <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800b6b6:	495a      	ldr	r1, [pc, #360]	; (800b820 <I2C_Compute_SCLL_SCLH+0x208>)
 800b6b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	440b      	add	r3, r1
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	1c5a      	adds	r2, r3, #1
 800b6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ca:	fb02 f303 	mul.w	r3, r2, r3
 800b6ce:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6d4:	e08c      	b.n	800b7f0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800b6d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	441a      	add	r2, r3
 800b6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6de:	3301      	adds	r3, #1
 800b6e0:	6979      	ldr	r1, [r7, #20]
 800b6e2:	fb01 f103 	mul.w	r1, r1, r3
 800b6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e8:	005b      	lsls	r3, r3, #1
 800b6ea:	440b      	add	r3, r1
 800b6ec:	4413      	add	r3, r2
 800b6ee:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800b6f0:	4a4a      	ldr	r2, [pc, #296]	; (800b81c <I2C_Compute_SCLL_SCLH+0x204>)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	212c      	movs	r1, #44	; 0x2c
 800b6f6:	fb01 f303 	mul.w	r3, r1, r3
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3318      	adds	r3, #24
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	429a      	cmp	r2, r3
 800b704:	d971      	bls.n	800b7ea <I2C_Compute_SCLL_SCLH+0x1d2>
 800b706:	693a      	ldr	r2, [r7, #16]
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	1ad2      	subs	r2, r2, r3
 800b70c:	6a3b      	ldr	r3, [r7, #32]
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	089b      	lsrs	r3, r3, #2
 800b712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b714:	429a      	cmp	r2, r3
 800b716:	d268      	bcs.n	800b7ea <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800b718:	2300      	movs	r3, #0
 800b71a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b71c:	e062      	b.n	800b7e4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800b71e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	441a      	add	r2, r3
 800b724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b726:	3301      	adds	r3, #1
 800b728:	6979      	ldr	r1, [r7, #20]
 800b72a:	fb01 f103 	mul.w	r1, r1, r3
 800b72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b730:	005b      	lsls	r3, r3, #1
 800b732:	440b      	add	r3, r1
 800b734:	4413      	add	r3, r2
 800b736:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	441a      	add	r2, r3
 800b73e:	4937      	ldr	r1, [pc, #220]	; (800b81c <I2C_Compute_SCLL_SCLH+0x204>)
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	202c      	movs	r0, #44	; 0x2c
 800b744:	fb00 f303 	mul.w	r3, r0, r3
 800b748:	440b      	add	r3, r1
 800b74a:	3320      	adds	r3, #32
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	441a      	add	r2, r3
 800b750:	4932      	ldr	r1, [pc, #200]	; (800b81c <I2C_Compute_SCLL_SCLH+0x204>)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	202c      	movs	r0, #44	; 0x2c
 800b756:	fb00 f303 	mul.w	r3, r0, r3
 800b75a:	440b      	add	r3, r1
 800b75c:	3324      	adds	r3, #36	; 0x24
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4413      	add	r3, r2
 800b762:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d338      	bcc.n	800b7de <I2C_Compute_SCLL_SCLH+0x1c6>
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	429a      	cmp	r2, r3
 800b772:	d834      	bhi.n	800b7de <I2C_Compute_SCLL_SCLH+0x1c6>
 800b774:	4a29      	ldr	r2, [pc, #164]	; (800b81c <I2C_Compute_SCLL_SCLH+0x204>)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	212c      	movs	r1, #44	; 0x2c
 800b77a:	fb01 f303 	mul.w	r3, r1, r3
 800b77e:	4413      	add	r3, r2
 800b780:	331c      	adds	r3, #28
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	429a      	cmp	r2, r3
 800b788:	d329      	bcc.n	800b7de <I2C_Compute_SCLL_SCLH+0x1c6>
 800b78a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d225      	bcs.n	800b7de <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800b79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	da02      	bge.n	800b7a6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	425b      	negs	r3, r3
 800b7a4:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d917      	bls.n	800b7de <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b0:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800b7b2:	491b      	ldr	r1, [pc, #108]	; (800b820 <I2C_Compute_SCLL_SCLH+0x208>)
 800b7b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	4413      	add	r3, r2
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	440b      	add	r3, r1
 800b7c0:	3310      	adds	r3, #16
 800b7c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7c4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800b7c6:	4916      	ldr	r1, [pc, #88]	; (800b820 <I2C_Compute_SCLL_SCLH+0x208>)
 800b7c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	440b      	add	r3, r1
 800b7d4:	330c      	adds	r3, #12
 800b7d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7d8:	601a      	str	r2, [r3, #0]
              ret = count;
 800b7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7dc:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800b7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e6:	2bff      	cmp	r3, #255	; 0xff
 800b7e8:	d999      	bls.n	800b71e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800b7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7f2:	2bff      	cmp	r3, #255	; 0xff
 800b7f4:	f67f af6f 	bls.w	800b6d6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800b7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b7fe:	4b09      	ldr	r3, [pc, #36]	; (800b824 <I2C_Compute_SCLL_SCLH+0x20c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b804:	429a      	cmp	r2, r3
 800b806:	f4ff af56 	bcc.w	800b6b6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800b80a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	374c      	adds	r7, #76	; 0x4c
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr
 800b818:	3b9aca00 	.word	0x3b9aca00
 800b81c:	0802bac0 	.word	0x0802bac0
 800b820:	2400aeb0 	.word	0x2400aeb0
 800b824:	2400b8b0 	.word	0x2400b8b0

0800b828 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08a      	sub	sp, #40	; 0x28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b830:	4b31      	ldr	r3, [pc, #196]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b832:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b836:	4a30      	ldr	r2, [pc, #192]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b838:	f043 0308 	orr.w	r3, r3, #8
 800b83c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b840:	4b2d      	ldr	r3, [pc, #180]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b842:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b846:	f003 0308 	and.w	r3, r3, #8
 800b84a:	613b      	str	r3, [r7, #16]
 800b84c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b84e:	4b2a      	ldr	r3, [pc, #168]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b850:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b854:	4a28      	ldr	r2, [pc, #160]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b856:	f043 0308 	orr.w	r3, r3, #8
 800b85a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b85e:	4b26      	ldr	r3, [pc, #152]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b860:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b864:	f003 0308 	and.w	r3, r3, #8
 800b868:	60fb      	str	r3, [r7, #12]
 800b86a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800b86c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b870:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b872:	2312      	movs	r3, #18
 800b874:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b876:	2300      	movs	r3, #0
 800b878:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800b87a:	2302      	movs	r3, #2
 800b87c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800b87e:	2304      	movs	r3, #4
 800b880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b882:	f107 0314 	add.w	r3, r7, #20
 800b886:	4619      	mov	r1, r3
 800b888:	481c      	ldr	r0, [pc, #112]	; (800b8fc <I2C4_MspInit+0xd4>)
 800b88a:	f001 fecf 	bl	800d62c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800b88e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b892:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b894:	2312      	movs	r3, #18
 800b896:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b898:	2300      	movs	r3, #0
 800b89a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800b89c:	2302      	movs	r3, #2
 800b89e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800b8a0:	2304      	movs	r3, #4
 800b8a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800b8a4:	f107 0314 	add.w	r3, r7, #20
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4814      	ldr	r0, [pc, #80]	; (800b8fc <I2C4_MspInit+0xd4>)
 800b8ac:	f001 febe 	bl	800d62c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800b8b0:	4b11      	ldr	r3, [pc, #68]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b8b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b8b6:	4a10      	ldr	r2, [pc, #64]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b8b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8bc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800b8c0:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b8c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b8c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8ca:	60bb      	str	r3, [r7, #8]
 800b8cc:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800b8ce:	4b0a      	ldr	r3, [pc, #40]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b8d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8d4:	4a08      	ldr	r2, [pc, #32]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800b8de:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b8e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8e4:	4a04      	ldr	r2, [pc, #16]	; (800b8f8 <I2C4_MspInit+0xd0>)
 800b8e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800b8ee:	bf00      	nop
 800b8f0:	3728      	adds	r7, #40	; 0x28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	58024400 	.word	0x58024400
 800b8fc:	58020c00 	.word	0x58020c00

0800b900 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800b908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b90c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	4619      	mov	r1, r3
 800b912:	480b      	ldr	r0, [pc, #44]	; (800b940 <I2C4_MspDeInit+0x40>)
 800b914:	f002 f83a 	bl	800d98c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800b918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b91c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	4619      	mov	r1, r3
 800b922:	4807      	ldr	r0, [pc, #28]	; (800b940 <I2C4_MspDeInit+0x40>)
 800b924:	f002 f832 	bl	800d98c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800b928:	4b06      	ldr	r3, [pc, #24]	; (800b944 <I2C4_MspDeInit+0x44>)
 800b92a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b92e:	4a05      	ldr	r2, [pc, #20]	; (800b944 <I2C4_MspDeInit+0x44>)
 800b930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b934:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800b938:	bf00      	nop
 800b93a:	3720      	adds	r7, #32
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	58020c00 	.word	0x58020c00
 800b944:	58024400 	.word	0x58024400

0800b948 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b088      	sub	sp, #32
 800b94c:	af04      	add	r7, sp, #16
 800b94e:	607b      	str	r3, [r7, #4]
 800b950:	4603      	mov	r3, r0
 800b952:	81fb      	strh	r3, [r7, #14]
 800b954:	460b      	mov	r3, r1
 800b956:	81bb      	strh	r3, [r7, #12]
 800b958:	4613      	mov	r3, r2
 800b95a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800b95c:	8978      	ldrh	r0, [r7, #10]
 800b95e:	89ba      	ldrh	r2, [r7, #12]
 800b960:	89f9      	ldrh	r1, [r7, #14]
 800b962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b966:	9302      	str	r3, [sp, #8]
 800b968:	8b3b      	ldrh	r3, [r7, #24]
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	4603      	mov	r3, r0
 800b972:	4807      	ldr	r0, [pc, #28]	; (800b990 <I2C4_WriteReg+0x48>)
 800b974:	f002 fa44 	bl	800de00 <HAL_I2C_Mem_Write>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800b97e:	2300      	movs	r3, #0
 800b980:	e001      	b.n	800b986 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800b982:	f06f 0307 	mvn.w	r3, #7
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	24026334 	.word	0x24026334

0800b994 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b088      	sub	sp, #32
 800b998:	af04      	add	r7, sp, #16
 800b99a:	607b      	str	r3, [r7, #4]
 800b99c:	4603      	mov	r3, r0
 800b99e:	81fb      	strh	r3, [r7, #14]
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	81bb      	strh	r3, [r7, #12]
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800b9a8:	8978      	ldrh	r0, [r7, #10]
 800b9aa:	89ba      	ldrh	r2, [r7, #12]
 800b9ac:	89f9      	ldrh	r1, [r7, #14]
 800b9ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9b2:	9302      	str	r3, [sp, #8]
 800b9b4:	8b3b      	ldrh	r3, [r7, #24]
 800b9b6:	9301      	str	r3, [sp, #4]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	4603      	mov	r3, r0
 800b9be:	4807      	ldr	r0, [pc, #28]	; (800b9dc <I2C4_ReadReg+0x48>)
 800b9c0:	f002 fb32 	bl	800e028 <HAL_I2C_Mem_Read>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e001      	b.n	800b9d2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800b9ce:	f06f 0307 	mvn.w	r3, #7
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	24026334 	.word	0x24026334

0800b9e0 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b094      	sub	sp, #80	; 0x50
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d003      	beq.n	800b9fc <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b9f4:	f06f 0301 	mvn.w	r3, #1
 800b9f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9fa:	e071      	b.n	800bae0 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800b9fc:	4a3b      	ldr	r2, [pc, #236]	; (800baec <BSP_OSPI_NOR_Init+0x10c>)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d16b      	bne.n	800bae0 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	225c      	movs	r2, #92	; 0x5c
 800ba0c:	fb02 f303 	mul.w	r3, r2, r3
 800ba10:	4a37      	ldr	r2, [pc, #220]	; (800baf0 <BSP_OSPI_NOR_Init+0x110>)
 800ba12:	4413      	add	r3, r2
 800ba14:	4618      	mov	r0, r3
 800ba16:	f000 fa09 	bl	800be2c <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800ba1a:	f107 031c 	add.w	r3, r7, #28
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fe fee9 	bl	800a7f6 <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 800ba24:	2303      	movs	r3, #3
 800ba26:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba2e:	fa93 f3a3 	rbit	r3, r3
 800ba32:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ba34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba36:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ba38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 800ba3e:	2320      	movs	r3, #32
 800ba40:	e003      	b.n	800ba4a <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 800ba42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba44:	fab3 f383 	clz	r3, r3
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	785b      	ldrb	r3, [r3, #1]
 800ba54:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	225c      	movs	r2, #92	; 0x5c
 800ba5a:	fb02 f303 	mul.w	r3, r2, r3
 800ba5e:	4a24      	ldr	r2, [pc, #144]	; (800baf0 <BSP_OSPI_NOR_Init+0x110>)
 800ba60:	4413      	add	r3, r2
 800ba62:	f107 020c 	add.w	r2, r7, #12
 800ba66:	4611      	mov	r1, r2
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f000 f895 	bl	800bb98 <MX_OSPI_NOR_Init>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d003      	beq.n	800ba7c <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800ba74:	f06f 0303 	mvn.w	r3, #3
 800ba78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba7a:	e031      	b.n	800bae0 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fb7f 	bl	800c180 <OSPI_NOR_ResetMemory>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d003      	beq.n	800ba90 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba88:	f06f 0304 	mvn.w	r3, #4
 800ba8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba8e:	e027      	b.n	800bae0 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	225c      	movs	r2, #92	; 0x5c
 800ba94:	fb02 f303 	mul.w	r3, r2, r3
 800ba98:	4a15      	ldr	r2, [pc, #84]	; (800baf0 <BSP_OSPI_NOR_Init+0x110>)
 800ba9a:	1898      	adds	r0, r3, r2
 800ba9c:	4a13      	ldr	r2, [pc, #76]	; (800baec <BSP_OSPI_NOR_Init+0x10c>)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	00db      	lsls	r3, r3, #3
 800baa2:	4413      	add	r3, r2
 800baa4:	7859      	ldrb	r1, [r3, #1]
 800baa6:	4a11      	ldr	r2, [pc, #68]	; (800baec <BSP_OSPI_NOR_Init+0x10c>)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	00db      	lsls	r3, r3, #3
 800baac:	4413      	add	r3, r2
 800baae:	789b      	ldrb	r3, [r3, #2]
 800bab0:	461a      	mov	r2, r3
 800bab2:	f7fe fecf 	bl	800a854 <MX25LM51245G_AutoPollingMemReady>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800babc:	f06f 0304 	mvn.w	r3, #4
 800bac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bac2:	e00d      	b.n	800bae0 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	7819      	ldrb	r1, [r3, #0]
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	785b      	ldrb	r3, [r3, #1]
 800bacc:	461a      	mov	r2, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f936 	bl	800bd40 <BSP_OSPI_NOR_ConfigFlash>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800bada:	f06f 0304 	mvn.w	r3, #4
 800bade:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 800bae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3750      	adds	r7, #80	; 0x50
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	24026388 	.word	0x24026388
 800baf0:	24026390 	.word	0x24026390

0800baf4 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bb06:	f06f 0301 	mvn.w	r3, #1
 800bb0a:	60fb      	str	r3, [r7, #12]
 800bb0c:	e03a      	b.n	800bb84 <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800bb0e:	4a20      	ldr	r2, [pc, #128]	; (800bb90 <BSP_OSPI_NOR_DeInit+0x9c>)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d108      	bne.n	800bb2c <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f8da 	bl	800bcd4 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d002      	beq.n	800bb2c <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb26:	f06f 0304 	mvn.w	r3, #4
 800bb2a:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d128      	bne.n	800bb84 <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800bb32:	4a17      	ldr	r2, [pc, #92]	; (800bb90 <BSP_OSPI_NOR_DeInit+0x9c>)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2100      	movs	r1, #0
 800bb38:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800bb3c:	4a14      	ldr	r2, [pc, #80]	; (800bb90 <BSP_OSPI_NOR_DeInit+0x9c>)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	00db      	lsls	r3, r3, #3
 800bb42:	4413      	add	r3, r2
 800bb44:	2200      	movs	r2, #0
 800bb46:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800bb48:	4a11      	ldr	r2, [pc, #68]	; (800bb90 <BSP_OSPI_NOR_DeInit+0x9c>)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	4413      	add	r3, r2
 800bb50:	2200      	movs	r2, #0
 800bb52:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	225c      	movs	r2, #92	; 0x5c
 800bb58:	fb02 f303 	mul.w	r3, r2, r3
 800bb5c:	4a0d      	ldr	r2, [pc, #52]	; (800bb94 <BSP_OSPI_NOR_DeInit+0xa0>)
 800bb5e:	4413      	add	r3, r2
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 fab3 	bl	800c0cc <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	225c      	movs	r2, #92	; 0x5c
 800bb6a:	fb02 f303 	mul.w	r3, r2, r3
 800bb6e:	4a09      	ldr	r2, [pc, #36]	; (800bb94 <BSP_OSPI_NOR_DeInit+0xa0>)
 800bb70:	4413      	add	r3, r2
 800bb72:	4618      	mov	r0, r3
 800bb74:	f005 fe52 	bl	801181c <HAL_OSPI_DeInit>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d002      	beq.n	800bb84 <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800bb7e:	f06f 0303 	mvn.w	r3, #3
 800bb82:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800bb84:	68fb      	ldr	r3, [r7, #12]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	24026388 	.word	0x24026388
 800bb94:	24026390 	.word	0x24026390

0800bb98 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4a20      	ldr	r2, [pc, #128]	; (800bc28 <MX_OSPI_NOR_Init+0x90>)
 800bba6:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2204      	movs	r2, #4
 800bbac:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	689a      	ldr	r2, [r3, #8]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2208      	movs	r2, #8
 800bbee:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d108      	bne.n	800bc0a <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbfe:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc06:	62da      	str	r2, [r3, #44]	; 0x2c
 800bc08:	e005      	b.n	800bc16 <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f005 fd44 	bl	80116a4 <HAL_OSPI_Init>
 800bc1c:	4603      	mov	r3, r0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	52005000 	.word	0x52005000

0800bc2c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bc34:	2300      	movs	r3, #0
 800bc36:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bc3e:	f06f 0301 	mvn.w	r3, #1
 800bc42:	60fb      	str	r3, [r7, #12]
 800bc44:	e03d      	b.n	800bcc2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800bc46:	4a21      	ldr	r2, [pc, #132]	; (800bccc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	00db      	lsls	r3, r3, #3
 800bc4c:	4413      	add	r3, r2
 800bc4e:	789b      	ldrb	r3, [r3, #2]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d11b      	bne.n	800bc8c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	225c      	movs	r2, #92	; 0x5c
 800bc58:	fb02 f303 	mul.w	r3, r2, r3
 800bc5c:	4a1c      	ldr	r2, [pc, #112]	; (800bcd0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800bc5e:	1898      	adds	r0, r3, r2
 800bc60:	4a1a      	ldr	r2, [pc, #104]	; (800bccc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	00db      	lsls	r3, r3, #3
 800bc66:	4413      	add	r3, r2
 800bc68:	785b      	ldrb	r3, [r3, #1]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	f7fe fe9e 	bl	800a9ae <MX25LM51245G_EnableMemoryMappedModeSTR>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d003      	beq.n	800bc80 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc78:	f06f 0304 	mvn.w	r3, #4
 800bc7c:	60fb      	str	r3, [r7, #12]
 800bc7e:	e020      	b.n	800bcc2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800bc80:	4a12      	ldr	r2, [pc, #72]	; (800bccc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2102      	movs	r1, #2
 800bc86:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800bc8a:	e01a      	b.n	800bcc2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	225c      	movs	r2, #92	; 0x5c
 800bc90:	fb02 f303 	mul.w	r3, r2, r3
 800bc94:	4a0e      	ldr	r2, [pc, #56]	; (800bcd0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800bc96:	441a      	add	r2, r3
 800bc98:	490c      	ldr	r1, [pc, #48]	; (800bccc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	440b      	add	r3, r1
 800bca0:	785b      	ldrb	r3, [r3, #1]
 800bca2:	4619      	mov	r1, r3
 800bca4:	4610      	mov	r0, r2
 800bca6:	f7fe ff2c 	bl	800ab02 <MX25LM51245G_EnableMemoryMappedModeDTR>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d003      	beq.n	800bcb8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcb0:	f06f 0304 	mvn.w	r3, #4
 800bcb4:	60fb      	str	r3, [r7, #12]
 800bcb6:	e004      	b.n	800bcc2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800bcb8:	4a04      	ldr	r2, [pc, #16]	; (800bccc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2102      	movs	r1, #2
 800bcbe:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	24026388 	.word	0x24026388
 800bcd0:	24026390 	.word	0x24026390

0800bcd4 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d003      	beq.n	800bcee <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bce6:	f06f 0301 	mvn.w	r3, #1
 800bcea:	60fb      	str	r3, [r7, #12]
 800bcec:	e01e      	b.n	800bd2c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800bcee:	4a12      	ldr	r2, [pc, #72]	; (800bd38 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d003      	beq.n	800bd02 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800bcfa:	f06f 031a 	mvn.w	r3, #26
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	e014      	b.n	800bd2c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	225c      	movs	r2, #92	; 0x5c
 800bd06:	fb02 f303 	mul.w	r3, r2, r3
 800bd0a:	4a0c      	ldr	r2, [pc, #48]	; (800bd3c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 800bd0c:	4413      	add	r3, r2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f006 f9b6 	bl	8012080 <HAL_OSPI_Abort>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800bd1a:	f06f 0303 	mvn.w	r3, #3
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	e004      	b.n	800bd2c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800bd22:	4a05      	ldr	r2, [pc, #20]	; (800bd38 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2101      	movs	r1, #1
 800bd28:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	24026388 	.word	0x24026388
 800bd3c:	24026390 	.word	0x24026390

0800bd40 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	70fb      	strb	r3, [r7, #3]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800bd50:	2300      	movs	r3, #0
 800bd52:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d003      	beq.n	800bd62 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bd5a:	f06f 0301 	mvn.w	r3, #1
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	e05d      	b.n	800be1e <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800bd62:	4a31      	ldr	r2, [pc, #196]	; (800be28 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d103      	bne.n	800bd76 <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800bd6e:	f06f 0319 	mvn.w	r3, #25
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	e053      	b.n	800be1e <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800bd76:	4a2c      	ldr	r2, [pc, #176]	; (800be28 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	4413      	add	r3, r2
 800bd7e:	785b      	ldrb	r3, [r3, #1]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d125      	bne.n	800bdd0 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800bd84:	78fb      	ldrb	r3, [r7, #3]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d107      	bne.n	800bd9a <BSP_OSPI_NOR_ConfigFlash+0x5a>
 800bd8a:	4a27      	ldr	r2, [pc, #156]	; (800be28 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	00db      	lsls	r3, r3, #3
 800bd90:	4413      	add	r3, r2
 800bd92:	789b      	ldrb	r3, [r3, #2]
 800bd94:	78ba      	ldrb	r2, [r7, #2]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d02a      	beq.n	800bdf0 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fbfc 	bl	800c598 <OSPI_NOR_ExitOPIMode>
 800bda0:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d123      	bne.n	800bdf0 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 800bda8:	78fb      	ldrb	r3, [r7, #3]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d120      	bne.n	800bdf0 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800bdae:	4a1e      	ldr	r2, [pc, #120]	; (800be28 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	00db      	lsls	r3, r3, #3
 800bdb4:	4413      	add	r3, r2
 800bdb6:	789b      	ldrb	r3, [r3, #2]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d104      	bne.n	800bdc6 <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fa6f 	bl	800c2a0 <OSPI_NOR_EnterDOPIMode>
 800bdc2:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800bdc4:	e014      	b.n	800bdf0 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fb3a 	bl	800c440 <OSPI_NOR_EnterSOPIMode>
 800bdcc:	60f8      	str	r0, [r7, #12]
      break;
 800bdce:	e00f      	b.n	800bdf0 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800bdd0:	78fb      	ldrb	r3, [r7, #3]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d10e      	bne.n	800bdf4 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800bdd6:	78bb      	ldrb	r3, [r7, #2]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d104      	bne.n	800bde6 <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fb2f 	bl	800c440 <OSPI_NOR_EnterSOPIMode>
 800bde2:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 800bde4:	e006      	b.n	800bdf4 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fa5a 	bl	800c2a0 <OSPI_NOR_EnterDOPIMode>
 800bdec:	60f8      	str	r0, [r7, #12]
      break;
 800bdee:	e001      	b.n	800bdf4 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 800bdf0:	bf00      	nop
 800bdf2:	e000      	b.n	800bdf6 <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 800bdf4:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d110      	bne.n	800be1e <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800bdfc:	4a0a      	ldr	r2, [pc, #40]	; (800be28 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2101      	movs	r1, #1
 800be02:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800be06:	4a08      	ldr	r2, [pc, #32]	; (800be28 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	00db      	lsls	r3, r3, #3
 800be0c:	4413      	add	r3, r2
 800be0e:	78fa      	ldrb	r2, [r7, #3]
 800be10:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800be12:	4a05      	ldr	r2, [pc, #20]	; (800be28 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	4413      	add	r3, r2
 800be1a:	78ba      	ldrb	r2, [r7, #2]
 800be1c:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 800be1e:	68fb      	ldr	r3, [r7, #12]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	24026388 	.word	0x24026388

0800be2c <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b094      	sub	sp, #80	; 0x50
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800be34:	4b9e      	ldr	r3, [pc, #632]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be36:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800be3a:	4a9d      	ldr	r2, [pc, #628]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be40:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800be44:	4b9a      	ldr	r3, [pc, #616]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be46:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800be4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be4e:	63bb      	str	r3, [r7, #56]	; 0x38
 800be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800be52:	4b97      	ldr	r3, [pc, #604]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be56:	4a96      	ldr	r2, [pc, #600]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be5c:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800be5e:	4b94      	ldr	r3, [pc, #592]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be62:	4a93      	ldr	r2, [pc, #588]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be68:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 800be6a:	4b91      	ldr	r3, [pc, #580]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be70:	4a8f      	ldr	r2, [pc, #572]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be72:	f043 0302 	orr.w	r3, r3, #2
 800be76:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800be7a:	4b8d      	ldr	r3, [pc, #564]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be80:	f003 0302 	and.w	r3, r3, #2
 800be84:	637b      	str	r3, [r7, #52]	; 0x34
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 800be88:	4b89      	ldr	r3, [pc, #548]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be8e:	4a88      	ldr	r2, [pc, #544]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be90:	f043 0304 	orr.w	r3, r3, #4
 800be94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800be98:	4b85      	ldr	r3, [pc, #532]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800be9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be9e:	f003 0304 	and.w	r3, r3, #4
 800bea2:	633b      	str	r3, [r7, #48]	; 0x30
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800bea6:	4b82      	ldr	r3, [pc, #520]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bea8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800beac:	4a80      	ldr	r2, [pc, #512]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800beae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beb2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800beb6:	4b7e      	ldr	r3, [pc, #504]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800beb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800bec4:	4b7a      	ldr	r3, [pc, #488]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bec6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800beca:	4a79      	ldr	r2, [pc, #484]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800becc:	f043 0308 	orr.w	r3, r3, #8
 800bed0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bed4:	4b76      	ldr	r3, [pc, #472]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800beda:	f003 0308 	and.w	r3, r3, #8
 800bede:	62bb      	str	r3, [r7, #40]	; 0x28
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 800bee2:	4b73      	ldr	r3, [pc, #460]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bee4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bee8:	4a71      	ldr	r2, [pc, #452]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800beea:	f043 0320 	orr.w	r3, r3, #32
 800beee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bef2:	4b6f      	ldr	r3, [pc, #444]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bef4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bef8:	f003 0320 	and.w	r3, r3, #32
 800befc:	627b      	str	r3, [r7, #36]	; 0x24
 800befe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 800bf00:	4b6b      	ldr	r3, [pc, #428]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf06:	4a6a      	ldr	r2, [pc, #424]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf08:	f043 0320 	orr.w	r3, r3, #32
 800bf0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bf10:	4b67      	ldr	r3, [pc, #412]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf16:	f003 0320 	and.w	r3, r3, #32
 800bf1a:	623b      	str	r3, [r7, #32]
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 800bf1e:	4b64      	ldr	r3, [pc, #400]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf24:	4a62      	ldr	r2, [pc, #392]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf26:	f043 0320 	orr.w	r3, r3, #32
 800bf2a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bf2e:	4b60      	ldr	r3, [pc, #384]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf34:	f003 0320 	and.w	r3, r3, #32
 800bf38:	61fb      	str	r3, [r7, #28]
 800bf3a:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 800bf3c:	4b5c      	ldr	r3, [pc, #368]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf42:	4a5b      	ldr	r2, [pc, #364]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf44:	f043 0304 	orr.w	r3, r3, #4
 800bf48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bf4c:	4b58      	ldr	r3, [pc, #352]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf52:	f003 0304 	and.w	r3, r3, #4
 800bf56:	61bb      	str	r3, [r7, #24]
 800bf58:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 800bf5a:	4b55      	ldr	r3, [pc, #340]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf60:	4a53      	ldr	r2, [pc, #332]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bf6a:	4b51      	ldr	r3, [pc, #324]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf74:	617b      	str	r3, [r7, #20]
 800bf76:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 800bf78:	4b4d      	ldr	r3, [pc, #308]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf7e:	4a4c      	ldr	r2, [pc, #304]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bf88:	4b49      	ldr	r3, [pc, #292]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf92:	613b      	str	r3, [r7, #16]
 800bf94:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 800bf96:	4b46      	ldr	r3, [pc, #280]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf9c:	4a44      	ldr	r2, [pc, #272]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bf9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfa2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bfa6:	4b42      	ldr	r3, [pc, #264]	; (800c0b0 <OSPI_NOR_MspInit+0x284>)
 800bfa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bfac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb0:	60fb      	str	r3, [r7, #12]
 800bfb2:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800bfb4:	2340      	movs	r3, #64	; 0x40
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800bfb8:	2302      	movs	r3, #2
 800bfba:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800bfc4:	230a      	movs	r3, #10
 800bfc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800bfc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4839      	ldr	r0, [pc, #228]	; (800c0b4 <OSPI_NOR_MspInit+0x288>)
 800bfd0:	f001 fb2c 	bl	800d62c <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 800bfd4:	2320      	movs	r3, #32
 800bfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 800bfd8:	230a      	movs	r3, #10
 800bfda:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 800bfdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	4835      	ldr	r0, [pc, #212]	; (800c0b8 <OSPI_NOR_MspInit+0x28c>)
 800bfe4:	f001 fb22 	bl	800d62c <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 800bfe8:	2304      	movs	r3, #4
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800bfec:	2300      	movs	r3, #0
 800bfee:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800bff0:	2309      	movs	r3, #9
 800bff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800bff4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bff8:	4619      	mov	r1, r3
 800bffa:	4830      	ldr	r0, [pc, #192]	; (800c0bc <OSPI_NOR_MspInit+0x290>)
 800bffc:	f001 fb16 	bl	800d62c <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 800c000:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c004:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800c006:	2309      	movs	r3, #9
 800c008:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800c00a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c00e:	4619      	mov	r1, r3
 800c010:	482b      	ldr	r0, [pc, #172]	; (800c0c0 <OSPI_NOR_MspInit+0x294>)
 800c012:	f001 fb0b 	bl	800d62c <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800c016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c01a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800c01c:	230a      	movs	r3, #10
 800c01e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800c020:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c024:	4619      	mov	r1, r3
 800c026:	4827      	ldr	r0, [pc, #156]	; (800c0c4 <OSPI_NOR_MspInit+0x298>)
 800c028:	f001 fb00 	bl	800d62c <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800c02c:	2380      	movs	r3, #128	; 0x80
 800c02e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800c030:	230a      	movs	r3, #10
 800c032:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800c034:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c038:	4619      	mov	r1, r3
 800c03a:	4822      	ldr	r0, [pc, #136]	; (800c0c4 <OSPI_NOR_MspInit+0x298>)
 800c03c:	f001 faf6 	bl	800d62c <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800c040:	2340      	movs	r3, #64	; 0x40
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800c044:	230a      	movs	r3, #10
 800c046:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800c048:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c04c:	4619      	mov	r1, r3
 800c04e:	481d      	ldr	r0, [pc, #116]	; (800c0c4 <OSPI_NOR_MspInit+0x298>)
 800c050:	f001 faec 	bl	800d62c <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800c054:	2302      	movs	r3, #2
 800c056:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800c058:	230a      	movs	r3, #10
 800c05a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800c05c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c060:	4619      	mov	r1, r3
 800c062:	4815      	ldr	r0, [pc, #84]	; (800c0b8 <OSPI_NOR_MspInit+0x28c>)
 800c064:	f001 fae2 	bl	800d62c <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800c068:	2308      	movs	r3, #8
 800c06a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800c06c:	2309      	movs	r3, #9
 800c06e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800c070:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c074:	4619      	mov	r1, r3
 800c076:	4814      	ldr	r0, [pc, #80]	; (800c0c8 <OSPI_NOR_MspInit+0x29c>)
 800c078:	f001 fad8 	bl	800d62c <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800c07c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c080:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800c082:	2309      	movs	r3, #9
 800c084:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800c086:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c08a:	4619      	mov	r1, r3
 800c08c:	4809      	ldr	r0, [pc, #36]	; (800c0b4 <OSPI_NOR_MspInit+0x288>)
 800c08e:	f001 facd 	bl	800d62c <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800c092:	2380      	movs	r3, #128	; 0x80
 800c094:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800c096:	230a      	movs	r3, #10
 800c098:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800c09a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c09e:	4619      	mov	r1, r3
 800c0a0:	4807      	ldr	r0, [pc, #28]	; (800c0c0 <OSPI_NOR_MspInit+0x294>)
 800c0a2:	f001 fac3 	bl	800d62c <HAL_GPIO_Init>
}
 800c0a6:	bf00      	nop
 800c0a8:	3750      	adds	r7, #80	; 0x50
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	58024400 	.word	0x58024400
 800c0b4:	58021800 	.word	0x58021800
 800c0b8:	58020800 	.word	0x58020800
 800c0bc:	58020400 	.word	0x58020400
 800c0c0:	58020c00 	.word	0x58020c00
 800c0c4:	58021400 	.word	0x58021400
 800c0c8:	58021c00 	.word	0x58021c00

0800c0cc <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800c0d4:	2104      	movs	r1, #4
 800c0d6:	4823      	ldr	r0, [pc, #140]	; (800c164 <OSPI_NOR_MspDeInit+0x98>)
 800c0d8:	f001 fc58 	bl	800d98c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800c0dc:	2120      	movs	r1, #32
 800c0de:	4822      	ldr	r0, [pc, #136]	; (800c168 <OSPI_NOR_MspDeInit+0x9c>)
 800c0e0:	f001 fc54 	bl	800d98c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 800c0e4:	2140      	movs	r1, #64	; 0x40
 800c0e6:	4821      	ldr	r0, [pc, #132]	; (800c16c <OSPI_NOR_MspDeInit+0xa0>)
 800c0e8:	f001 fc50 	bl	800d98c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800c0ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c0f0:	481f      	ldr	r0, [pc, #124]	; (800c170 <OSPI_NOR_MspDeInit+0xa4>)
 800c0f2:	f001 fc4b 	bl	800d98c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800c0f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c0fa:	481e      	ldr	r0, [pc, #120]	; (800c174 <OSPI_NOR_MspDeInit+0xa8>)
 800c0fc:	f001 fc46 	bl	800d98c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800c100:	2180      	movs	r1, #128	; 0x80
 800c102:	481c      	ldr	r0, [pc, #112]	; (800c174 <OSPI_NOR_MspDeInit+0xa8>)
 800c104:	f001 fc42 	bl	800d98c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800c108:	2140      	movs	r1, #64	; 0x40
 800c10a:	481a      	ldr	r0, [pc, #104]	; (800c174 <OSPI_NOR_MspDeInit+0xa8>)
 800c10c:	f001 fc3e 	bl	800d98c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800c110:	2102      	movs	r1, #2
 800c112:	4815      	ldr	r0, [pc, #84]	; (800c168 <OSPI_NOR_MspDeInit+0x9c>)
 800c114:	f001 fc3a 	bl	800d98c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800c118:	2108      	movs	r1, #8
 800c11a:	4817      	ldr	r0, [pc, #92]	; (800c178 <OSPI_NOR_MspDeInit+0xac>)
 800c11c:	f001 fc36 	bl	800d98c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800c120:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c124:	4811      	ldr	r0, [pc, #68]	; (800c16c <OSPI_NOR_MspDeInit+0xa0>)
 800c126:	f001 fc31 	bl	800d98c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800c12a:	2180      	movs	r1, #128	; 0x80
 800c12c:	4810      	ldr	r0, [pc, #64]	; (800c170 <OSPI_NOR_MspDeInit+0xa4>)
 800c12e:	f001 fc2d 	bl	800d98c <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800c132:	4b12      	ldr	r3, [pc, #72]	; (800c17c <OSPI_NOR_MspDeInit+0xb0>)
 800c134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c136:	4a11      	ldr	r2, [pc, #68]	; (800c17c <OSPI_NOR_MspDeInit+0xb0>)
 800c138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c13c:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800c13e:	4b0f      	ldr	r3, [pc, #60]	; (800c17c <OSPI_NOR_MspDeInit+0xb0>)
 800c140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c142:	4a0e      	ldr	r2, [pc, #56]	; (800c17c <OSPI_NOR_MspDeInit+0xb0>)
 800c144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c148:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 800c14a:	4b0c      	ldr	r3, [pc, #48]	; (800c17c <OSPI_NOR_MspDeInit+0xb0>)
 800c14c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c150:	4a0a      	ldr	r2, [pc, #40]	; (800c17c <OSPI_NOR_MspDeInit+0xb0>)
 800c152:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c156:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 800c15a:	bf00      	nop
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	58020400 	.word	0x58020400
 800c168:	58020800 	.word	0x58020800
 800c16c:	58021800 	.word	0x58021800
 800c170:	58020c00 	.word	0x58020c00
 800c174:	58021400 	.word	0x58021400
 800c178:	58021c00 	.word	0x58021c00
 800c17c:	58024400 	.word	0x58024400

0800c180 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c188:	2300      	movs	r3, #0
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	225c      	movs	r2, #92	; 0x5c
 800c190:	fb02 f303 	mul.w	r3, r2, r3
 800c194:	4a40      	ldr	r2, [pc, #256]	; (800c298 <OSPI_NOR_ResetMemory+0x118>)
 800c196:	4413      	add	r3, r2
 800c198:	2200      	movs	r2, #0
 800c19a:	2100      	movs	r1, #0
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fe ff19 	bl	800afd4 <MX25LM51245G_ResetEnable>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d003      	beq.n	800c1b0 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1a8:	f06f 0304 	mvn.w	r3, #4
 800c1ac:	60fb      	str	r3, [r7, #12]
 800c1ae:	e06d      	b.n	800c28c <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	225c      	movs	r2, #92	; 0x5c
 800c1b4:	fb02 f303 	mul.w	r3, r2, r3
 800c1b8:	4a37      	ldr	r2, [pc, #220]	; (800c298 <OSPI_NOR_ResetMemory+0x118>)
 800c1ba:	4413      	add	r3, r2
 800c1bc:	2200      	movs	r2, #0
 800c1be:	2100      	movs	r1, #0
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fe ff5f 	bl	800b084 <MX25LM51245G_ResetMemory>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d003      	beq.n	800c1d4 <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1cc:	f06f 0304 	mvn.w	r3, #4
 800c1d0:	60fb      	str	r3, [r7, #12]
 800c1d2:	e05b      	b.n	800c28c <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	225c      	movs	r2, #92	; 0x5c
 800c1d8:	fb02 f303 	mul.w	r3, r2, r3
 800c1dc:	4a2e      	ldr	r2, [pc, #184]	; (800c298 <OSPI_NOR_ResetMemory+0x118>)
 800c1de:	4413      	add	r3, r2
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fe fef5 	bl	800afd4 <MX25LM51245G_ResetEnable>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d003      	beq.n	800c1f8 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1f0:	f06f 0304 	mvn.w	r3, #4
 800c1f4:	60fb      	str	r3, [r7, #12]
 800c1f6:	e049      	b.n	800c28c <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	225c      	movs	r2, #92	; 0x5c
 800c1fc:	fb02 f303 	mul.w	r3, r2, r3
 800c200:	4a25      	ldr	r2, [pc, #148]	; (800c298 <OSPI_NOR_ResetMemory+0x118>)
 800c202:	4413      	add	r3, r2
 800c204:	2200      	movs	r2, #0
 800c206:	2101      	movs	r1, #1
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fe ff3b 	bl	800b084 <MX25LM51245G_ResetMemory>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d003      	beq.n	800c21c <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c214:	f06f 0304 	mvn.w	r3, #4
 800c218:	60fb      	str	r3, [r7, #12]
 800c21a:	e037      	b.n	800c28c <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	225c      	movs	r2, #92	; 0x5c
 800c220:	fb02 f303 	mul.w	r3, r2, r3
 800c224:	4a1c      	ldr	r2, [pc, #112]	; (800c298 <OSPI_NOR_ResetMemory+0x118>)
 800c226:	4413      	add	r3, r2
 800c228:	2201      	movs	r2, #1
 800c22a:	2101      	movs	r1, #1
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fe fed1 	bl	800afd4 <MX25LM51245G_ResetEnable>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d003      	beq.n	800c240 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c238:	f06f 0304 	mvn.w	r3, #4
 800c23c:	60fb      	str	r3, [r7, #12]
 800c23e:	e025      	b.n	800c28c <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	225c      	movs	r2, #92	; 0x5c
 800c244:	fb02 f303 	mul.w	r3, r2, r3
 800c248:	4a13      	ldr	r2, [pc, #76]	; (800c298 <OSPI_NOR_ResetMemory+0x118>)
 800c24a:	4413      	add	r3, r2
 800c24c:	2201      	movs	r2, #1
 800c24e:	2101      	movs	r1, #1
 800c250:	4618      	mov	r0, r3
 800c252:	f7fe ff17 	bl	800b084 <MX25LM51245G_ResetMemory>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d003      	beq.n	800c264 <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c25c:	f06f 0304 	mvn.w	r3, #4
 800c260:	60fb      	str	r3, [r7, #12]
 800c262:	e013      	b.n	800c28c <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800c264:	4a0d      	ldr	r2, [pc, #52]	; (800c29c <OSPI_NOR_ResetMemory+0x11c>)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2101      	movs	r1, #1
 800c26a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800c26e:	4a0b      	ldr	r2, [pc, #44]	; (800c29c <OSPI_NOR_ResetMemory+0x11c>)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	00db      	lsls	r3, r3, #3
 800c274:	4413      	add	r3, r2
 800c276:	2200      	movs	r2, #0
 800c278:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800c27a:	4a08      	ldr	r2, [pc, #32]	; (800c29c <OSPI_NOR_ResetMemory+0x11c>)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	00db      	lsls	r3, r3, #3
 800c280:	4413      	add	r3, r2
 800c282:	2200      	movs	r2, #0
 800c284:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800c286:	2064      	movs	r0, #100	; 0x64
 800c288:	f000 fd04 	bl	800cc94 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800c28c:	68fb      	ldr	r3, [r7, #12]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	24026390 	.word	0x24026390
 800c29c:	24026388 	.word	0x24026388

0800c2a0 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af02      	add	r7, sp, #8
 800c2a6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	225c      	movs	r2, #92	; 0x5c
 800c2b0:	fb02 f303 	mul.w	r3, r2, r3
 800c2b4:	4a60      	ldr	r2, [pc, #384]	; (800c438 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c2b6:	1898      	adds	r0, r3, r2
 800c2b8:	4a60      	ldr	r2, [pc, #384]	; (800c43c <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	4413      	add	r3, r2
 800c2c0:	7859      	ldrb	r1, [r3, #1]
 800c2c2:	4a5e      	ldr	r2, [pc, #376]	; (800c43c <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	00db      	lsls	r3, r3, #3
 800c2c8:	4413      	add	r3, r2
 800c2ca:	789b      	ldrb	r3, [r3, #2]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	f7fe fc87 	bl	800abe0 <MX25LM51245G_WriteEnable>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d003      	beq.n	800c2e0 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c2d8:	f06f 0304 	mvn.w	r3, #4
 800c2dc:	60fb      	str	r3, [r7, #12]
 800c2de:	e0a6      	b.n	800c42e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	225c      	movs	r2, #92	; 0x5c
 800c2e4:	fb02 f303 	mul.w	r3, r2, r3
 800c2e8:	4a53      	ldr	r2, [pc, #332]	; (800c438 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c2ea:	1898      	adds	r0, r3, r2
 800c2ec:	4a53      	ldr	r2, [pc, #332]	; (800c43c <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	00db      	lsls	r3, r3, #3
 800c2f2:	4413      	add	r3, r2
 800c2f4:	7859      	ldrb	r1, [r3, #1]
 800c2f6:	4a51      	ldr	r2, [pc, #324]	; (800c43c <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	00db      	lsls	r3, r3, #3
 800c2fc:	4413      	add	r3, r2
 800c2fe:	789a      	ldrb	r2, [r3, #2]
 800c300:	2307      	movs	r3, #7
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c308:	f7fe fd35 	bl	800ad76 <MX25LM51245G_WriteCfg2Register>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c312:	f06f 0304 	mvn.w	r3, #4
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	e089      	b.n	800c42e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	225c      	movs	r2, #92	; 0x5c
 800c31e:	fb02 f303 	mul.w	r3, r2, r3
 800c322:	4a45      	ldr	r2, [pc, #276]	; (800c438 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c324:	1898      	adds	r0, r3, r2
 800c326:	4a45      	ldr	r2, [pc, #276]	; (800c43c <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	00db      	lsls	r3, r3, #3
 800c32c:	4413      	add	r3, r2
 800c32e:	7859      	ldrb	r1, [r3, #1]
 800c330:	4a42      	ldr	r2, [pc, #264]	; (800c43c <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	00db      	lsls	r3, r3, #3
 800c336:	4413      	add	r3, r2
 800c338:	789b      	ldrb	r3, [r3, #2]
 800c33a:	461a      	mov	r2, r3
 800c33c:	f7fe fc50 	bl	800abe0 <MX25LM51245G_WriteEnable>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c346:	f06f 0304 	mvn.w	r3, #4
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	e06f      	b.n	800c42e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	225c      	movs	r2, #92	; 0x5c
 800c352:	fb02 f303 	mul.w	r3, r2, r3
 800c356:	4a38      	ldr	r2, [pc, #224]	; (800c438 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c358:	1898      	adds	r0, r3, r2
 800c35a:	4a38      	ldr	r2, [pc, #224]	; (800c43c <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	00db      	lsls	r3, r3, #3
 800c360:	4413      	add	r3, r2
 800c362:	7859      	ldrb	r1, [r3, #1]
 800c364:	4a35      	ldr	r2, [pc, #212]	; (800c43c <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	00db      	lsls	r3, r3, #3
 800c36a:	4413      	add	r3, r2
 800c36c:	789a      	ldrb	r2, [r3, #2]
 800c36e:	2302      	movs	r3, #2
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	2300      	movs	r3, #0
 800c374:	f7fe fcff 	bl	800ad76 <MX25LM51245G_WriteCfg2Register>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d003      	beq.n	800c386 <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c37e:	f06f 0304 	mvn.w	r3, #4
 800c382:	60fb      	str	r3, [r7, #12]
 800c384:	e053      	b.n	800c42e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800c386:	2028      	movs	r0, #40	; 0x28
 800c388:	f000 fc84 	bl	800cc94 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800c38c:	4a2a      	ldr	r2, [pc, #168]	; (800c438 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	215c      	movs	r1, #92	; 0x5c
 800c392:	fb01 f303 	mul.w	r3, r1, r3
 800c396:	4413      	add	r3, r2
 800c398:	330c      	adds	r3, #12
 800c39a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c39e:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800c3a0:	4a25      	ldr	r2, [pc, #148]	; (800c438 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	215c      	movs	r1, #92	; 0x5c
 800c3a6:	fb01 f303 	mul.w	r3, r1, r3
 800c3aa:	4413      	add	r3, r2
 800c3ac:	332c      	adds	r3, #44	; 0x2c
 800c3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b2:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	225c      	movs	r2, #92	; 0x5c
 800c3b8:	fb02 f303 	mul.w	r3, r2, r3
 800c3bc:	4a1e      	ldr	r2, [pc, #120]	; (800c438 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c3be:	4413      	add	r3, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f005 f96f 	bl	80116a4 <HAL_OSPI_Init>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d003      	beq.n	800c3d4 <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c3cc:	f06f 0303 	mvn.w	r3, #3
 800c3d0:	60fb      	str	r3, [r7, #12]
 800c3d2:	e02c      	b.n	800c42e <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	225c      	movs	r2, #92	; 0x5c
 800c3d8:	fb02 f303 	mul.w	r3, r2, r3
 800c3dc:	4a16      	ldr	r2, [pc, #88]	; (800c438 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c3de:	4413      	add	r3, r2
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	2101      	movs	r1, #1
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fe fa35 	bl	800a854 <MX25LM51245G_AutoPollingMemReady>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d003      	beq.n	800c3f8 <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c3f0:	f06f 0304 	mvn.w	r3, #4
 800c3f4:	60fb      	str	r3, [r7, #12]
 800c3f6:	e01a      	b.n	800c42e <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	225c      	movs	r2, #92	; 0x5c
 800c3fc:	fb02 f303 	mul.w	r3, r2, r3
 800c400:	4a0d      	ldr	r2, [pc, #52]	; (800c438 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c402:	1898      	adds	r0, r3, r2
 800c404:	f107 0308 	add.w	r3, r7, #8
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	2300      	movs	r3, #0
 800c40c:	2201      	movs	r2, #1
 800c40e:	2101      	movs	r1, #1
 800c410:	f7fe fd46 	bl	800aea0 <MX25LM51245G_ReadCfg2Register>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d003      	beq.n	800c422 <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c41a:	f06f 0304 	mvn.w	r3, #4
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	e005      	b.n	800c42e <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800c422:	7a3b      	ldrb	r3, [r7, #8]
 800c424:	2b02      	cmp	r3, #2
 800c426:	d002      	beq.n	800c42e <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c428:	f06f 0304 	mvn.w	r3, #4
 800c42c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c42e:	68fb      	ldr	r3, [r7, #12]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	24026390 	.word	0x24026390
 800c43c:	24026388 	.word	0x24026388

0800c440 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af02      	add	r7, sp, #8
 800c446:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c448:	2300      	movs	r3, #0
 800c44a:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	225c      	movs	r2, #92	; 0x5c
 800c450:	fb02 f303 	mul.w	r3, r2, r3
 800c454:	4a4e      	ldr	r2, [pc, #312]	; (800c590 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c456:	1898      	adds	r0, r3, r2
 800c458:	4a4e      	ldr	r2, [pc, #312]	; (800c594 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	00db      	lsls	r3, r3, #3
 800c45e:	4413      	add	r3, r2
 800c460:	7859      	ldrb	r1, [r3, #1]
 800c462:	4a4c      	ldr	r2, [pc, #304]	; (800c594 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	00db      	lsls	r3, r3, #3
 800c468:	4413      	add	r3, r2
 800c46a:	789b      	ldrb	r3, [r3, #2]
 800c46c:	461a      	mov	r2, r3
 800c46e:	f7fe fbb7 	bl	800abe0 <MX25LM51245G_WriteEnable>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d003      	beq.n	800c480 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c478:	f06f 0304 	mvn.w	r3, #4
 800c47c:	60fb      	str	r3, [r7, #12]
 800c47e:	e082      	b.n	800c586 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	225c      	movs	r2, #92	; 0x5c
 800c484:	fb02 f303 	mul.w	r3, r2, r3
 800c488:	4a41      	ldr	r2, [pc, #260]	; (800c590 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c48a:	1898      	adds	r0, r3, r2
 800c48c:	4a41      	ldr	r2, [pc, #260]	; (800c594 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	00db      	lsls	r3, r3, #3
 800c492:	4413      	add	r3, r2
 800c494:	7859      	ldrb	r1, [r3, #1]
 800c496:	4a3f      	ldr	r2, [pc, #252]	; (800c594 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	4413      	add	r3, r2
 800c49e:	789a      	ldrb	r2, [r3, #2]
 800c4a0:	2307      	movs	r3, #7
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c4a8:	f7fe fc65 	bl	800ad76 <MX25LM51245G_WriteCfg2Register>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c4b2:	f06f 0304 	mvn.w	r3, #4
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	e065      	b.n	800c586 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	225c      	movs	r2, #92	; 0x5c
 800c4be:	fb02 f303 	mul.w	r3, r2, r3
 800c4c2:	4a33      	ldr	r2, [pc, #204]	; (800c590 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c4c4:	1898      	adds	r0, r3, r2
 800c4c6:	4a33      	ldr	r2, [pc, #204]	; (800c594 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	00db      	lsls	r3, r3, #3
 800c4cc:	4413      	add	r3, r2
 800c4ce:	7859      	ldrb	r1, [r3, #1]
 800c4d0:	4a30      	ldr	r2, [pc, #192]	; (800c594 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	00db      	lsls	r3, r3, #3
 800c4d6:	4413      	add	r3, r2
 800c4d8:	789b      	ldrb	r3, [r3, #2]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f7fe fb80 	bl	800abe0 <MX25LM51245G_WriteEnable>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c4e6:	f06f 0304 	mvn.w	r3, #4
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	e04b      	b.n	800c586 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	225c      	movs	r2, #92	; 0x5c
 800c4f2:	fb02 f303 	mul.w	r3, r2, r3
 800c4f6:	4a26      	ldr	r2, [pc, #152]	; (800c590 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c4f8:	1898      	adds	r0, r3, r2
 800c4fa:	4a26      	ldr	r2, [pc, #152]	; (800c594 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	4413      	add	r3, r2
 800c502:	7859      	ldrb	r1, [r3, #1]
 800c504:	4a23      	ldr	r2, [pc, #140]	; (800c594 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	4413      	add	r3, r2
 800c50c:	789a      	ldrb	r2, [r3, #2]
 800c50e:	2301      	movs	r3, #1
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	2300      	movs	r3, #0
 800c514:	f7fe fc2f 	bl	800ad76 <MX25LM51245G_WriteCfg2Register>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d003      	beq.n	800c526 <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c51e:	f06f 0304 	mvn.w	r3, #4
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	e02f      	b.n	800c586 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800c526:	2028      	movs	r0, #40	; 0x28
 800c528:	f000 fbb4 	bl	800cc94 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	225c      	movs	r2, #92	; 0x5c
 800c530:	fb02 f303 	mul.w	r3, r2, r3
 800c534:	4a16      	ldr	r2, [pc, #88]	; (800c590 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c536:	4413      	add	r3, r2
 800c538:	2200      	movs	r2, #0
 800c53a:	2101      	movs	r1, #1
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fe f989 	bl	800a854 <MX25LM51245G_AutoPollingMemReady>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c548:	f06f 0304 	mvn.w	r3, #4
 800c54c:	60fb      	str	r3, [r7, #12]
 800c54e:	e01a      	b.n	800c586 <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	225c      	movs	r2, #92	; 0x5c
 800c554:	fb02 f303 	mul.w	r3, r2, r3
 800c558:	4a0d      	ldr	r2, [pc, #52]	; (800c590 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c55a:	1898      	adds	r0, r3, r2
 800c55c:	f107 0308 	add.w	r3, r7, #8
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	2300      	movs	r3, #0
 800c564:	2200      	movs	r2, #0
 800c566:	2101      	movs	r1, #1
 800c568:	f7fe fc9a 	bl	800aea0 <MX25LM51245G_ReadCfg2Register>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d003      	beq.n	800c57a <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c572:	f06f 0304 	mvn.w	r3, #4
 800c576:	60fb      	str	r3, [r7, #12]
 800c578:	e005      	b.n	800c586 <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800c57a:	7a3b      	ldrb	r3, [r7, #8]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d002      	beq.n	800c586 <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c580:	f06f 0304 	mvn.w	r3, #4
 800c584:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c586:	68fb      	ldr	r3, [r7, #12]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	24026390 	.word	0x24026390
 800c594:	24026388 	.word	0x24026388

0800c598 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af02      	add	r7, sp, #8
 800c59e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	225c      	movs	r2, #92	; 0x5c
 800c5a8:	fb02 f303 	mul.w	r3, r2, r3
 800c5ac:	4a49      	ldr	r2, [pc, #292]	; (800c6d4 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c5ae:	1898      	adds	r0, r3, r2
 800c5b0:	4a49      	ldr	r2, [pc, #292]	; (800c6d8 <OSPI_NOR_ExitOPIMode+0x140>)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	00db      	lsls	r3, r3, #3
 800c5b6:	4413      	add	r3, r2
 800c5b8:	7859      	ldrb	r1, [r3, #1]
 800c5ba:	4a47      	ldr	r2, [pc, #284]	; (800c6d8 <OSPI_NOR_ExitOPIMode+0x140>)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	4413      	add	r3, r2
 800c5c2:	789b      	ldrb	r3, [r3, #2]
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	f7fe fb0b 	bl	800abe0 <MX25LM51245G_WriteEnable>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d003      	beq.n	800c5d8 <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5d0:	f06f 0304 	mvn.w	r3, #4
 800c5d4:	60fb      	str	r3, [r7, #12]
 800c5d6:	e077      	b.n	800c6c8 <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	225c      	movs	r2, #92	; 0x5c
 800c5e4:	fb02 f303 	mul.w	r3, r2, r3
 800c5e8:	4a3a      	ldr	r2, [pc, #232]	; (800c6d4 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c5ea:	1898      	adds	r0, r3, r2
 800c5ec:	4a3a      	ldr	r2, [pc, #232]	; (800c6d8 <OSPI_NOR_ExitOPIMode+0x140>)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	00db      	lsls	r3, r3, #3
 800c5f2:	4413      	add	r3, r2
 800c5f4:	7859      	ldrb	r1, [r3, #1]
 800c5f6:	4a38      	ldr	r2, [pc, #224]	; (800c6d8 <OSPI_NOR_ExitOPIMode+0x140>)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	4413      	add	r3, r2
 800c5fe:	789a      	ldrb	r2, [r3, #2]
 800c600:	7a3b      	ldrb	r3, [r7, #8]
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	2300      	movs	r3, #0
 800c606:	f7fe fbb6 	bl	800ad76 <MX25LM51245G_WriteCfg2Register>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d003      	beq.n	800c618 <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c610:	f06f 0304 	mvn.w	r3, #4
 800c614:	60fb      	str	r3, [r7, #12]
 800c616:	e057      	b.n	800c6c8 <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800c618:	2028      	movs	r0, #40	; 0x28
 800c61a:	f000 fb3b 	bl	800cc94 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800c61e:	4a2e      	ldr	r2, [pc, #184]	; (800c6d8 <OSPI_NOR_ExitOPIMode+0x140>)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	4413      	add	r3, r2
 800c626:	789b      	ldrb	r3, [r3, #2]
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d120      	bne.n	800c66e <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800c62c:	4a29      	ldr	r2, [pc, #164]	; (800c6d4 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	215c      	movs	r1, #92	; 0x5c
 800c632:	fb01 f303 	mul.w	r3, r1, r3
 800c636:	4413      	add	r3, r2
 800c638:	330c      	adds	r3, #12
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800c63e:	4a25      	ldr	r2, [pc, #148]	; (800c6d4 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	215c      	movs	r1, #92	; 0x5c
 800c644:	fb01 f303 	mul.w	r3, r1, r3
 800c648:	4413      	add	r3, r2
 800c64a:	332c      	adds	r3, #44	; 0x2c
 800c64c:	2200      	movs	r2, #0
 800c64e:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	225c      	movs	r2, #92	; 0x5c
 800c654:	fb02 f303 	mul.w	r3, r2, r3
 800c658:	4a1e      	ldr	r2, [pc, #120]	; (800c6d4 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c65a:	4413      	add	r3, r2
 800c65c:	4618      	mov	r0, r3
 800c65e:	f005 f821 	bl	80116a4 <HAL_OSPI_Init>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d002      	beq.n	800c66e <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800c668:	f06f 0303 	mvn.w	r3, #3
 800c66c:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	225c      	movs	r2, #92	; 0x5c
 800c672:	fb02 f303 	mul.w	r3, r2, r3
 800c676:	4a17      	ldr	r2, [pc, #92]	; (800c6d4 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c678:	4413      	add	r3, r2
 800c67a:	2200      	movs	r2, #0
 800c67c:	2100      	movs	r1, #0
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fe f8e8 	bl	800a854 <MX25LM51245G_AutoPollingMemReady>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d003      	beq.n	800c692 <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c68a:	f06f 0304 	mvn.w	r3, #4
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	e01a      	b.n	800c6c8 <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	225c      	movs	r2, #92	; 0x5c
 800c696:	fb02 f303 	mul.w	r3, r2, r3
 800c69a:	4a0e      	ldr	r2, [pc, #56]	; (800c6d4 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c69c:	1898      	adds	r0, r3, r2
 800c69e:	f107 0308 	add.w	r3, r7, #8
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	f7fe fbf9 	bl	800aea0 <MX25LM51245G_ReadCfg2Register>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d003      	beq.n	800c6bc <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c6b4:	f06f 0304 	mvn.w	r3, #4
 800c6b8:	60fb      	str	r3, [r7, #12]
 800c6ba:	e005      	b.n	800c6c8 <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 800c6bc:	7a3b      	ldrb	r3, [r7, #8]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c6c2:	f06f 0304 	mvn.w	r3, #4
 800c6c6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	24026390 	.word	0x24026390
 800c6d8:	24026388 	.word	0x24026388

0800c6dc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b088      	sub	sp, #32
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d11c      	bne.n	800c72a <BSP_TS_Init+0x4e>
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d018      	beq.n	800c72a <BSP_TS_Init+0x4e>
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800c700:	d813      	bhi.n	800c72a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00f      	beq.n	800c72a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800c712:	d80a      	bhi.n	800c72a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	68da      	ldr	r2, [r3, #12]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	6819      	ldr	r1, [r3, #0]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	428b      	cmp	r3, r1
 800c722:	bf28      	it	cs
 800c724:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c726:	429a      	cmp	r2, r3
 800c728:	d903      	bls.n	800c732 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c72a:	f06f 0301 	mvn.w	r3, #1
 800c72e:	61fb      	str	r3, [r7, #28]
 800c730:	e06e      	b.n	800c810 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f98c 	bl	800ca50 <FT5336_Probe>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800c73e:	f04f 33ff 	mov.w	r3, #4294967295
 800c742:	61fb      	str	r3, [r7, #28]
 800c744:	e064      	b.n	800c810 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	4934      	ldr	r1, [pc, #208]	; (800c81c <BSP_TS_Init+0x140>)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	015b      	lsls	r3, r3, #5
 800c750:	440b      	add	r3, r1
 800c752:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	685a      	ldr	r2, [r3, #4]
 800c758:	4930      	ldr	r1, [pc, #192]	; (800c81c <BSP_TS_Init+0x140>)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	015b      	lsls	r3, r3, #5
 800c75e:	440b      	add	r3, r1
 800c760:	3304      	adds	r3, #4
 800c762:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	689a      	ldr	r2, [r3, #8]
 800c768:	492c      	ldr	r1, [pc, #176]	; (800c81c <BSP_TS_Init+0x140>)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	015b      	lsls	r3, r3, #5
 800c76e:	440b      	add	r3, r1
 800c770:	3308      	adds	r3, #8
 800c772:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	68da      	ldr	r2, [r3, #12]
 800c778:	4928      	ldr	r1, [pc, #160]	; (800c81c <BSP_TS_Init+0x140>)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	015b      	lsls	r3, r3, #5
 800c77e:	440b      	add	r3, r1
 800c780:	330c      	adds	r3, #12
 800c782:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800c784:	4b26      	ldr	r3, [pc, #152]	; (800c820 <BSP_TS_Init+0x144>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	4926      	ldr	r1, [pc, #152]	; (800c824 <BSP_TS_Init+0x148>)
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c792:	f107 010c 	add.w	r1, r7, #12
 800c796:	4610      	mov	r0, r2
 800c798:	4798      	blx	r3
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	da03      	bge.n	800c7a8 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c7a0:	f06f 0304 	mvn.w	r3, #4
 800c7a4:	61fb      	str	r3, [r7, #28]
 800c7a6:	e033      	b.n	800c810 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800c7a8:	693a      	ldr	r2, [r7, #16]
 800c7aa:	491c      	ldr	r1, [pc, #112]	; (800c81c <BSP_TS_Init+0x140>)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	015b      	lsls	r3, r3, #5
 800c7b0:	440b      	add	r3, r1
 800c7b2:	3310      	adds	r3, #16
 800c7b4:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	4918      	ldr	r1, [pc, #96]	; (800c81c <BSP_TS_Init+0x140>)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	015b      	lsls	r3, r3, #5
 800c7be:	440b      	add	r3, r1
 800c7c0:	3314      	adds	r3, #20
 800c7c2:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	61bb      	str	r3, [r7, #24]
 800c7c8:	e01f      	b.n	800c80a <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	4811      	ldr	r0, [pc, #68]	; (800c81c <BSP_TS_Init+0x140>)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	00d9      	lsls	r1, r3, #3
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	440b      	add	r3, r1
 800c7e0:	3306      	adds	r3, #6
 800c7e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	685a      	ldr	r2, [r3, #4]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	1c5a      	adds	r2, r3, #1
 800c7f2:	480a      	ldr	r0, [pc, #40]	; (800c81c <BSP_TS_Init+0x140>)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	00d9      	lsls	r1, r3, #3
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	440b      	add	r3, r1
 800c7fc:	3306      	adds	r3, #6
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	4403      	add	r3, r0
 800c802:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	3301      	adds	r3, #1
 800c808:	61bb      	str	r3, [r7, #24]
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d0dc      	beq.n	800c7ca <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800c810:	69fb      	ldr	r3, [r7, #28]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3720      	adds	r7, #32
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	2400b8bc 	.word	0x2400b8bc
 800c820:	2400b8b4 	.word	0x2400b8b4
 800c824:	2400b8b8 	.word	0x2400b8b8

0800c828 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08a      	sub	sp, #40	; 0x28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c832:	2300      	movs	r3, #0
 800c834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c83c:	f06f 0301 	mvn.w	r3, #1
 800c840:	627b      	str	r3, [r7, #36]	; 0x24
 800c842:	e0f9      	b.n	800ca38 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800c844:	4b7f      	ldr	r3, [pc, #508]	; (800ca44 <BSP_TS_GetState+0x21c>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	497f      	ldr	r1, [pc, #508]	; (800ca48 <BSP_TS_GetState+0x220>)
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c852:	f107 0108 	add.w	r1, r7, #8
 800c856:	4610      	mov	r0, r2
 800c858:	4798      	blx	r3
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	da03      	bge.n	800c868 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c860:	f06f 0304 	mvn.w	r3, #4
 800c864:	627b      	str	r3, [r7, #36]	; 0x24
 800c866:	e0e7      	b.n	800ca38 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f000 80d1 	beq.w	800ca12 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800c878:	4a74      	ldr	r2, [pc, #464]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	015b      	lsls	r3, r3, #5
 800c87e:	4413      	add	r3, r2
 800c880:	3308      	adds	r3, #8
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 0308 	and.w	r3, r3, #8
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d003      	beq.n	800c894 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800c894:	4a6d      	ldr	r2, [pc, #436]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	015b      	lsls	r3, r3, #5
 800c89a:	4413      	add	r3, r2
 800c89c:	3308      	adds	r3, #8
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 0302 	and.w	r3, r3, #2
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d009      	beq.n	800c8bc <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800c8a8:	4a68      	ldr	r2, [pc, #416]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	015b      	lsls	r3, r3, #5
 800c8ae:	4413      	add	r3, r2
 800c8b0:	3310      	adds	r3, #16
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800c8bc:	4a63      	ldr	r2, [pc, #396]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	015b      	lsls	r3, r3, #5
 800c8c2:	4413      	add	r3, r2
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 0304 	and.w	r3, r3, #4
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d008      	beq.n	800c8e2 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800c8d0:	4a5e      	ldr	r2, [pc, #376]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	015b      	lsls	r3, r3, #5
 800c8d6:	4413      	add	r3, r2
 800c8d8:	3314      	adds	r3, #20
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800c8e2:	4a5a      	ldr	r2, [pc, #360]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	015b      	lsls	r3, r3, #5
 800c8e8:	4413      	add	r3, r2
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	6a3a      	ldr	r2, [r7, #32]
 800c8ee:	fb02 f203 	mul.w	r2, r2, r3
 800c8f2:	4956      	ldr	r1, [pc, #344]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	015b      	lsls	r3, r3, #5
 800c8f8:	440b      	add	r3, r1
 800c8fa:	3310      	adds	r3, #16
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	fbb2 f2f3 	udiv	r2, r2, r3
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800c906:	4a51      	ldr	r2, [pc, #324]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	015b      	lsls	r3, r3, #5
 800c90c:	4413      	add	r3, r2
 800c90e:	3304      	adds	r3, #4
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	69fa      	ldr	r2, [r7, #28]
 800c914:	fb02 f203 	mul.w	r2, r2, r3
 800c918:	494c      	ldr	r1, [pc, #304]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	015b      	lsls	r3, r3, #5
 800c91e:	440b      	add	r3, r1
 800c920:	3314      	adds	r3, #20
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	fbb2 f2f3 	udiv	r2, r2, r3
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800c92c:	68ba      	ldr	r2, [r7, #8]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	685a      	ldr	r2, [r3, #4]
 800c936:	4945      	ldr	r1, [pc, #276]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	015b      	lsls	r3, r3, #5
 800c93c:	440b      	add	r3, r1
 800c93e:	3318      	adds	r3, #24
 800c940:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800c942:	429a      	cmp	r2, r3
 800c944:	d909      	bls.n	800c95a <BSP_TS_GetState+0x132>
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	685a      	ldr	r2, [r3, #4]
 800c94a:	4940      	ldr	r1, [pc, #256]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	015b      	lsls	r3, r3, #5
 800c950:	440b      	add	r3, r1
 800c952:	3318      	adds	r3, #24
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	e008      	b.n	800c96c <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800c95a:	4a3c      	ldr	r2, [pc, #240]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	015b      	lsls	r3, r3, #5
 800c960:	4413      	add	r3, r2
 800c962:	3318      	adds	r3, #24
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800c96a:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800c96c:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	689a      	ldr	r2, [r3, #8]
 800c972:	4936      	ldr	r1, [pc, #216]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	015b      	lsls	r3, r3, #5
 800c978:	440b      	add	r3, r1
 800c97a:	331c      	adds	r3, #28
 800c97c:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800c97e:	429a      	cmp	r2, r3
 800c980:	d909      	bls.n	800c996 <BSP_TS_GetState+0x16e>
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	689a      	ldr	r2, [r3, #8]
 800c986:	4931      	ldr	r1, [pc, #196]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	015b      	lsls	r3, r3, #5
 800c98c:	440b      	add	r3, r1
 800c98e:	331c      	adds	r3, #28
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	e008      	b.n	800c9a8 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800c996:	4a2d      	ldr	r2, [pc, #180]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	015b      	lsls	r3, r3, #5
 800c99c:	4413      	add	r3, r2
 800c99e:	331c      	adds	r3, #28
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800c9a6:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800c9a8:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800c9aa:	4a28      	ldr	r2, [pc, #160]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	015b      	lsls	r3, r3, #5
 800c9b0:	4413      	add	r3, r2
 800c9b2:	330c      	adds	r3, #12
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	69ba      	ldr	r2, [r7, #24]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d808      	bhi.n	800c9ce <BSP_TS_GetState+0x1a6>
 800c9bc:	4a23      	ldr	r2, [pc, #140]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	015b      	lsls	r3, r3, #5
 800c9c2:	4413      	add	r3, r2
 800c9c4:	330c      	adds	r3, #12
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	697a      	ldr	r2, [r7, #20]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d910      	bls.n	800c9f0 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	491e      	ldr	r1, [pc, #120]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	015b      	lsls	r3, r3, #5
 800c9d8:	440b      	add	r3, r1
 800c9da:	3318      	adds	r3, #24
 800c9dc:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	689a      	ldr	r2, [r3, #8]
 800c9e2:	491a      	ldr	r1, [pc, #104]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	015b      	lsls	r3, r3, #5
 800c9e8:	440b      	add	r3, r1
 800c9ea:	331c      	adds	r3, #28
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	e023      	b.n	800ca38 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800c9f0:	4a16      	ldr	r2, [pc, #88]	; (800ca4c <BSP_TS_GetState+0x224>)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	015b      	lsls	r3, r3, #5
 800c9f6:	4413      	add	r3, r2
 800c9f8:	3318      	adds	r3, #24
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800ca00:	4a12      	ldr	r2, [pc, #72]	; (800ca4c <BSP_TS_GetState+0x224>)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	015b      	lsls	r3, r3, #5
 800ca06:	4413      	add	r3, r2
 800ca08:	331c      	adds	r3, #28
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	609a      	str	r2, [r3, #8]
 800ca10:	e012      	b.n	800ca38 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2200      	movs	r2, #0
 800ca16:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800ca18:	4a0c      	ldr	r2, [pc, #48]	; (800ca4c <BSP_TS_GetState+0x224>)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	015b      	lsls	r3, r3, #5
 800ca1e:	4413      	add	r3, r2
 800ca20:	3318      	adds	r3, #24
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800ca28:	4a08      	ldr	r2, [pc, #32]	; (800ca4c <BSP_TS_GetState+0x224>)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	015b      	lsls	r3, r3, #5
 800ca2e:	4413      	add	r3, r2
 800ca30:	331c      	adds	r3, #28
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3728      	adds	r7, #40	; 0x28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	2400b8b4 	.word	0x2400b8b4
 800ca48:	2400b8b8 	.word	0x2400b8b8
 800ca4c:	2400b8bc 	.word	0x2400b8bc

0800ca50 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	; 0x28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800ca60:	2370      	movs	r3, #112	; 0x70
 800ca62:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800ca64:	4b23      	ldr	r3, [pc, #140]	; (800caf4 <FT5336_Probe+0xa4>)
 800ca66:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800ca68:	4b23      	ldr	r3, [pc, #140]	; (800caf8 <FT5336_Probe+0xa8>)
 800ca6a:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800ca6c:	4b23      	ldr	r3, [pc, #140]	; (800cafc <FT5336_Probe+0xac>)
 800ca6e:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800ca70:	4b23      	ldr	r3, [pc, #140]	; (800cb00 <FT5336_Probe+0xb0>)
 800ca72:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800ca74:	4b23      	ldr	r3, [pc, #140]	; (800cb04 <FT5336_Probe+0xb4>)
 800ca76:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800ca78:	f107 030c 	add.w	r3, r7, #12
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	4822      	ldr	r0, [pc, #136]	; (800cb08 <FT5336_Probe+0xb8>)
 800ca80:	f7fd fb52 	bl	800a128 <FT5336_RegisterBusIO>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800ca8a:	f06f 0307 	mvn.w	r3, #7
 800ca8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ca90:	e02a      	b.n	800cae8 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800ca92:	f107 0308 	add.w	r3, r7, #8
 800ca96:	4619      	mov	r1, r3
 800ca98:	481b      	ldr	r0, [pc, #108]	; (800cb08 <FT5336_Probe+0xb8>)
 800ca9a:	f7fd fc3f 	bl	800a31c <FT5336_ReadID>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d003      	beq.n	800caac <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800caa4:	f06f 0304 	mvn.w	r3, #4
 800caa8:	627b      	str	r3, [r7, #36]	; 0x24
 800caaa:	e01d      	b.n	800cae8 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	2b51      	cmp	r3, #81	; 0x51
 800cab0:	d003      	beq.n	800caba <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800cab2:	f06f 0306 	mvn.w	r3, #6
 800cab6:	627b      	str	r3, [r7, #36]	; 0x24
 800cab8:	e016      	b.n	800cae8 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800caba:	4a14      	ldr	r2, [pc, #80]	; (800cb0c <FT5336_Probe+0xbc>)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4912      	ldr	r1, [pc, #72]	; (800cb08 <FT5336_Probe+0xb8>)
 800cac0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800cac4:	4b12      	ldr	r3, [pc, #72]	; (800cb10 <FT5336_Probe+0xc0>)
 800cac6:	4a13      	ldr	r2, [pc, #76]	; (800cb14 <FT5336_Probe+0xc4>)
 800cac8:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800caca:	4b11      	ldr	r3, [pc, #68]	; (800cb10 <FT5336_Probe+0xc0>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	490e      	ldr	r1, [pc, #56]	; (800cb0c <FT5336_Probe+0xbc>)
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cad8:	4610      	mov	r0, r2
 800cada:	4798      	blx	r3
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d002      	beq.n	800cae8 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800cae2:	f06f 0304 	mvn.w	r3, #4
 800cae6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800caea:	4618      	mov	r0, r3
 800caec:	3728      	adds	r7, #40	; 0x28
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	0800b135 	.word	0x0800b135
 800caf8:	0800b1a9 	.word	0x0800b1a9
 800cafc:	0800b2d1 	.word	0x0800b2d1
 800cb00:	0800b275 	.word	0x0800b275
 800cb04:	0800b32d 	.word	0x0800b32d
 800cb08:	2400b8dc 	.word	0x2400b8dc
 800cb0c:	2400b8b8 	.word	0x2400b8b8
 800cb10:	2400b8b4 	.word	0x2400b8b4
 800cb14:	24000024 	.word	0x24000024

0800cb18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800cb1c:	4b29      	ldr	r3, [pc, #164]	; (800cbc4 <SystemInit+0xac>)
 800cb1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb22:	4a28      	ldr	r2, [pc, #160]	; (800cbc4 <SystemInit+0xac>)
 800cb24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800cb2c:	4b26      	ldr	r3, [pc, #152]	; (800cbc8 <SystemInit+0xb0>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a25      	ldr	r2, [pc, #148]	; (800cbc8 <SystemInit+0xb0>)
 800cb32:	f043 0301 	orr.w	r3, r3, #1
 800cb36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800cb38:	4b23      	ldr	r3, [pc, #140]	; (800cbc8 <SystemInit+0xb0>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800cb3e:	4b22      	ldr	r3, [pc, #136]	; (800cbc8 <SystemInit+0xb0>)
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	4921      	ldr	r1, [pc, #132]	; (800cbc8 <SystemInit+0xb0>)
 800cb44:	4b21      	ldr	r3, [pc, #132]	; (800cbcc <SystemInit+0xb4>)
 800cb46:	4013      	ands	r3, r2
 800cb48:	600b      	str	r3, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800cb4a:	4b1f      	ldr	r3, [pc, #124]	; (800cbc8 <SystemInit+0xb0>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800cb50:	4b1d      	ldr	r3, [pc, #116]	; (800cbc8 <SystemInit+0xb0>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800cb56:	4b1c      	ldr	r3, [pc, #112]	; (800cbc8 <SystemInit+0xb0>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800cb5c:	4b1a      	ldr	r3, [pc, #104]	; (800cbc8 <SystemInit+0xb0>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800cb62:	4b19      	ldr	r3, [pc, #100]	; (800cbc8 <SystemInit+0xb0>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800cb68:	4b17      	ldr	r3, [pc, #92]	; (800cbc8 <SystemInit+0xb0>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800cb6e:	4b16      	ldr	r3, [pc, #88]	; (800cbc8 <SystemInit+0xb0>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800cb74:	4b14      	ldr	r3, [pc, #80]	; (800cbc8 <SystemInit+0xb0>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800cb7a:	4b13      	ldr	r3, [pc, #76]	; (800cbc8 <SystemInit+0xb0>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800cb80:	4b11      	ldr	r3, [pc, #68]	; (800cbc8 <SystemInit+0xb0>)
 800cb82:	2200      	movs	r2, #0
 800cb84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800cb86:	4b10      	ldr	r3, [pc, #64]	; (800cbc8 <SystemInit+0xb0>)
 800cb88:	2200      	movs	r2, #0
 800cb8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800cb8c:	4b0e      	ldr	r3, [pc, #56]	; (800cbc8 <SystemInit+0xb0>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a0d      	ldr	r2, [pc, #52]	; (800cbc8 <SystemInit+0xb0>)
 800cb92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800cb98:	4b0b      	ldr	r3, [pc, #44]	; (800cbc8 <SystemInit+0xb0>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800cb9e:	4b0c      	ldr	r3, [pc, #48]	; (800cbd0 <SystemInit+0xb8>)
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	4b0c      	ldr	r3, [pc, #48]	; (800cbd4 <SystemInit+0xbc>)
 800cba4:	4013      	ands	r3, r2
 800cba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbaa:	d202      	bcs.n	800cbb2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800cbac:	4b0a      	ldr	r3, [pc, #40]	; (800cbd8 <SystemInit+0xc0>)
 800cbae:	2201      	movs	r2, #1
 800cbb0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cbb2:	4b04      	ldr	r3, [pc, #16]	; (800cbc4 <SystemInit+0xac>)
 800cbb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cbb8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800cbba:	bf00      	nop
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr
 800cbc4:	e000ed00 	.word	0xe000ed00
 800cbc8:	58024400 	.word	0x58024400
 800cbcc:	eaf6ed7f 	.word	0xeaf6ed7f
 800cbd0:	5c001000 	.word	0x5c001000
 800cbd4:	ffff0000 	.word	0xffff0000
 800cbd8:	51008108 	.word	0x51008108

0800cbdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cbe2:	2003      	movs	r0, #3
 800cbe4:	f000 f94b 	bl	800ce7e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800cbe8:	f006 fafe 	bl	80131e8 <HAL_RCC_GetSysClockFreq>
 800cbec:	4602      	mov	r2, r0
 800cbee:	4b15      	ldr	r3, [pc, #84]	; (800cc44 <HAL_Init+0x68>)
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	0a1b      	lsrs	r3, r3, #8
 800cbf4:	f003 030f 	and.w	r3, r3, #15
 800cbf8:	4913      	ldr	r1, [pc, #76]	; (800cc48 <HAL_Init+0x6c>)
 800cbfa:	5ccb      	ldrb	r3, [r1, r3]
 800cbfc:	f003 031f 	and.w	r3, r3, #31
 800cc00:	fa22 f303 	lsr.w	r3, r2, r3
 800cc04:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800cc06:	4b0f      	ldr	r3, [pc, #60]	; (800cc44 <HAL_Init+0x68>)
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	f003 030f 	and.w	r3, r3, #15
 800cc0e:	4a0e      	ldr	r2, [pc, #56]	; (800cc48 <HAL_Init+0x6c>)
 800cc10:	5cd3      	ldrb	r3, [r2, r3]
 800cc12:	f003 031f 	and.w	r3, r3, #31
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	fa22 f303 	lsr.w	r3, r2, r3
 800cc1c:	4a0b      	ldr	r2, [pc, #44]	; (800cc4c <HAL_Init+0x70>)
 800cc1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cc20:	4a0b      	ldr	r2, [pc, #44]	; (800cc50 <HAL_Init+0x74>)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cc26:	2000      	movs	r0, #0
 800cc28:	f7fa fa14 	bl	8007054 <HAL_InitTick>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800cc32:	2301      	movs	r3, #1
 800cc34:	e002      	b.n	800cc3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800cc36:	f7f9 fe39 	bl	80068ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	58024400 	.word	0x58024400
 800cc48:	0802bb44 	.word	0x0802bb44
 800cc4c:	24000058 	.word	0x24000058
 800cc50:	24000054 	.word	0x24000054

0800cc54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cc54:	b480      	push	{r7}
 800cc56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800cc58:	4b06      	ldr	r3, [pc, #24]	; (800cc74 <HAL_IncTick+0x20>)
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	4b06      	ldr	r3, [pc, #24]	; (800cc78 <HAL_IncTick+0x24>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4413      	add	r3, r2
 800cc64:	4a04      	ldr	r2, [pc, #16]	; (800cc78 <HAL_IncTick+0x24>)
 800cc66:	6013      	str	r3, [r2, #0]
}
 800cc68:	bf00      	nop
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	24000060 	.word	0x24000060
 800cc78:	240263ec 	.word	0x240263ec

0800cc7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	af00      	add	r7, sp, #0
  return uwTick;
 800cc80:	4b03      	ldr	r3, [pc, #12]	; (800cc90 <HAL_GetTick+0x14>)
 800cc82:	681b      	ldr	r3, [r3, #0]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	240263ec 	.word	0x240263ec

0800cc94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cc9c:	f7ff ffee 	bl	800cc7c <HAL_GetTick>
 800cca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccac:	d005      	beq.n	800ccba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ccae:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <HAL_Delay+0x44>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ccba:	bf00      	nop
 800ccbc:	f7ff ffde 	bl	800cc7c <HAL_GetTick>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d8f7      	bhi.n	800ccbc <HAL_Delay+0x28>
  {
  }
}
 800cccc:	bf00      	nop
 800ccce:	bf00      	nop
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	24000060 	.word	0x24000060

0800ccdc <__NVIC_SetPriorityGrouping>:
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b085      	sub	sp, #20
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f003 0307 	and.w	r3, r3, #7
 800ccea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ccec:	4b0b      	ldr	r3, [pc, #44]	; (800cd1c <__NVIC_SetPriorityGrouping+0x40>)
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ccf2:	68ba      	ldr	r2, [r7, #8]
 800ccf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ccf8:	4013      	ands	r3, r2
 800ccfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800cd04:	4b06      	ldr	r3, [pc, #24]	; (800cd20 <__NVIC_SetPriorityGrouping+0x44>)
 800cd06:	4313      	orrs	r3, r2
 800cd08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cd0a:	4a04      	ldr	r2, [pc, #16]	; (800cd1c <__NVIC_SetPriorityGrouping+0x40>)
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	60d3      	str	r3, [r2, #12]
}
 800cd10:	bf00      	nop
 800cd12:	3714      	adds	r7, #20
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	e000ed00 	.word	0xe000ed00
 800cd20:	05fa0000 	.word	0x05fa0000

0800cd24 <__NVIC_GetPriorityGrouping>:
{
 800cd24:	b480      	push	{r7}
 800cd26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cd28:	4b04      	ldr	r3, [pc, #16]	; (800cd3c <__NVIC_GetPriorityGrouping+0x18>)
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	0a1b      	lsrs	r3, r3, #8
 800cd2e:	f003 0307 	and.w	r3, r3, #7
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	e000ed00 	.word	0xe000ed00

0800cd40 <__NVIC_EnableIRQ>:
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cd4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	db0b      	blt.n	800cd6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cd52:	88fb      	ldrh	r3, [r7, #6]
 800cd54:	f003 021f 	and.w	r2, r3, #31
 800cd58:	4907      	ldr	r1, [pc, #28]	; (800cd78 <__NVIC_EnableIRQ+0x38>)
 800cd5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd5e:	095b      	lsrs	r3, r3, #5
 800cd60:	2001      	movs	r0, #1
 800cd62:	fa00 f202 	lsl.w	r2, r0, r2
 800cd66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cd6a:	bf00      	nop
 800cd6c:	370c      	adds	r7, #12
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	e000e100 	.word	0xe000e100

0800cd7c <__NVIC_DisableIRQ>:
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	4603      	mov	r3, r0
 800cd84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cd86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	db12      	blt.n	800cdb4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cd8e:	88fb      	ldrh	r3, [r7, #6]
 800cd90:	f003 021f 	and.w	r2, r3, #31
 800cd94:	490a      	ldr	r1, [pc, #40]	; (800cdc0 <__NVIC_DisableIRQ+0x44>)
 800cd96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd9a:	095b      	lsrs	r3, r3, #5
 800cd9c:	2001      	movs	r0, #1
 800cd9e:	fa00 f202 	lsl.w	r2, r0, r2
 800cda2:	3320      	adds	r3, #32
 800cda4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cda8:	f3bf 8f4f 	dsb	sy
}
 800cdac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cdae:	f3bf 8f6f 	isb	sy
}
 800cdb2:	bf00      	nop
}
 800cdb4:	bf00      	nop
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr
 800cdc0:	e000e100 	.word	0xe000e100

0800cdc4 <__NVIC_SetPriority>:
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	4603      	mov	r3, r0
 800cdcc:	6039      	str	r1, [r7, #0]
 800cdce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cdd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	db0a      	blt.n	800cdee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	b2da      	uxtb	r2, r3
 800cddc:	490c      	ldr	r1, [pc, #48]	; (800ce10 <__NVIC_SetPriority+0x4c>)
 800cdde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cde2:	0112      	lsls	r2, r2, #4
 800cde4:	b2d2      	uxtb	r2, r2
 800cde6:	440b      	add	r3, r1
 800cde8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cdec:	e00a      	b.n	800ce04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	4908      	ldr	r1, [pc, #32]	; (800ce14 <__NVIC_SetPriority+0x50>)
 800cdf4:	88fb      	ldrh	r3, [r7, #6]
 800cdf6:	f003 030f 	and.w	r3, r3, #15
 800cdfa:	3b04      	subs	r3, #4
 800cdfc:	0112      	lsls	r2, r2, #4
 800cdfe:	b2d2      	uxtb	r2, r2
 800ce00:	440b      	add	r3, r1
 800ce02:	761a      	strb	r2, [r3, #24]
}
 800ce04:	bf00      	nop
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr
 800ce10:	e000e100 	.word	0xe000e100
 800ce14:	e000ed00 	.word	0xe000ed00

0800ce18 <NVIC_EncodePriority>:
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b089      	sub	sp, #36	; 0x24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	f1c3 0307 	rsb	r3, r3, #7
 800ce32:	2b04      	cmp	r3, #4
 800ce34:	bf28      	it	cs
 800ce36:	2304      	movcs	r3, #4
 800ce38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	2b06      	cmp	r3, #6
 800ce40:	d902      	bls.n	800ce48 <NVIC_EncodePriority+0x30>
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	3b03      	subs	r3, #3
 800ce46:	e000      	b.n	800ce4a <NVIC_EncodePriority+0x32>
 800ce48:	2300      	movs	r3, #0
 800ce4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	fa02 f303 	lsl.w	r3, r2, r3
 800ce56:	43da      	mvns	r2, r3
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	401a      	ands	r2, r3
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ce60:	f04f 31ff 	mov.w	r1, #4294967295
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	fa01 f303 	lsl.w	r3, r1, r3
 800ce6a:	43d9      	mvns	r1, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce70:	4313      	orrs	r3, r2
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3724      	adds	r7, #36	; 0x24
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr

0800ce7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b082      	sub	sp, #8
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7ff ff28 	bl	800ccdc <__NVIC_SetPriorityGrouping>
}
 800ce8c:	bf00      	nop
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
 800cea0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cea2:	f7ff ff3f 	bl	800cd24 <__NVIC_GetPriorityGrouping>
 800cea6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	68b9      	ldr	r1, [r7, #8]
 800ceac:	6978      	ldr	r0, [r7, #20]
 800ceae:	f7ff ffb3 	bl	800ce18 <NVIC_EncodePriority>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff ff82 	bl	800cdc4 <__NVIC_SetPriority>
}
 800cec0:	bf00      	nop
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ced2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff ff32 	bl	800cd40 <__NVIC_EnableIRQ>
}
 800cedc:	bf00      	nop
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	4603      	mov	r3, r0
 800ceec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ceee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff ff42 	bl	800cd7c <__NVIC_DisableIRQ>
}
 800cef8:	bf00      	nop
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800cf00:	b480      	push	{r7}
 800cf02:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800cf04:	f3bf 8f5f 	dmb	sy
}
 800cf08:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <HAL_MPU_Disable+0x28>)
 800cf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0e:	4a06      	ldr	r2, [pc, #24]	; (800cf28 <HAL_MPU_Disable+0x28>)
 800cf10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf14:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800cf16:	4b05      	ldr	r3, [pc, #20]	; (800cf2c <HAL_MPU_Disable+0x2c>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	605a      	str	r2, [r3, #4]
}
 800cf1c:	bf00      	nop
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	e000ed00 	.word	0xe000ed00
 800cf2c:	e000ed90 	.word	0xe000ed90

0800cf30 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800cf38:	4a0b      	ldr	r2, [pc, #44]	; (800cf68 <HAL_MPU_Enable+0x38>)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f043 0301 	orr.w	r3, r3, #1
 800cf40:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800cf42:	4b0a      	ldr	r3, [pc, #40]	; (800cf6c <HAL_MPU_Enable+0x3c>)
 800cf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf46:	4a09      	ldr	r2, [pc, #36]	; (800cf6c <HAL_MPU_Enable+0x3c>)
 800cf48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf4c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800cf4e:	f3bf 8f4f 	dsb	sy
}
 800cf52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cf54:	f3bf 8f6f 	isb	sy
}
 800cf58:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800cf5a:	bf00      	nop
 800cf5c:	370c      	adds	r7, #12
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	e000ed90 	.word	0xe000ed90
 800cf6c:	e000ed00 	.word	0xe000ed00

0800cf70 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	785a      	ldrb	r2, [r3, #1]
 800cf7c:	4b1d      	ldr	r3, [pc, #116]	; (800cff4 <HAL_MPU_ConfigRegion+0x84>)
 800cf7e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d029      	beq.n	800cfdc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800cf88:	4a1a      	ldr	r2, [pc, #104]	; (800cff4 <HAL_MPU_ConfigRegion+0x84>)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7b1b      	ldrb	r3, [r3, #12]
 800cf94:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	7adb      	ldrb	r3, [r3, #11]
 800cf9a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cf9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	7a9b      	ldrb	r3, [r3, #10]
 800cfa2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cfa4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	7b5b      	ldrb	r3, [r3, #13]
 800cfaa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cfac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	7b9b      	ldrb	r3, [r3, #14]
 800cfb2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cfb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	7bdb      	ldrb	r3, [r3, #15]
 800cfba:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cfbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	7a5b      	ldrb	r3, [r3, #9]
 800cfc2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cfc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	7a1b      	ldrb	r3, [r3, #8]
 800cfca:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cfcc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	7812      	ldrb	r2, [r2, #0]
 800cfd2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cfd4:	4a07      	ldr	r2, [pc, #28]	; (800cff4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cfd6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cfd8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800cfda:	e005      	b.n	800cfe8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800cfdc:	4b05      	ldr	r3, [pc, #20]	; (800cff4 <HAL_MPU_ConfigRegion+0x84>)
 800cfde:	2200      	movs	r2, #0
 800cfe0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800cfe2:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <HAL_MPU_ConfigRegion+0x84>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	611a      	str	r2, [r3, #16]
}
 800cfe8:	bf00      	nop
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	e000ed90 	.word	0xe000ed90

0800cff8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d101      	bne.n	800d00a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e054      	b.n	800d0b4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	7f5b      	ldrb	r3, [r3, #29]
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	d105      	bne.n	800d020 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7f9 fc64 	bl	80068e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2202      	movs	r2, #2
 800d024:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	791b      	ldrb	r3, [r3, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10c      	bne.n	800d048 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a22      	ldr	r2, [pc, #136]	; (800d0bc <HAL_CRC_Init+0xc4>)
 800d034:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	689a      	ldr	r2, [r3, #8]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f022 0218 	bic.w	r2, r2, #24
 800d044:	609a      	str	r2, [r3, #8]
 800d046:	e00c      	b.n	800d062 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6899      	ldr	r1, [r3, #8]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	461a      	mov	r2, r3
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 f834 	bl	800d0c0 <HAL_CRCEx_Polynomial_Set>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d001      	beq.n	800d062 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	e028      	b.n	800d0b4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	795b      	ldrb	r3, [r3, #5]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d105      	bne.n	800d076 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f04f 32ff 	mov.w	r2, #4294967295
 800d072:	611a      	str	r2, [r3, #16]
 800d074:	e004      	b.n	800d080 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	6912      	ldr	r2, [r2, #16]
 800d07e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	695a      	ldr	r2, [r3, #20]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	430a      	orrs	r2, r1
 800d094:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	699a      	ldr	r2, [r3, #24]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	430a      	orrs	r2, r1
 800d0aa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	04c11db7 	.word	0x04c11db7

0800d0c0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b087      	sub	sp, #28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d0d0:	231f      	movs	r3, #31
 800d0d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	f003 0301 	and.w	r3, r3, #1
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d102      	bne.n	800d0e4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	75fb      	strb	r3, [r7, #23]
 800d0e2:	e063      	b.n	800d1ac <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d0e4:	bf00      	nop
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	1e5a      	subs	r2, r3, #1
 800d0ea:	613a      	str	r2, [r7, #16]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d009      	beq.n	800d104 <HAL_CRCEx_Polynomial_Set+0x44>
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	f003 031f 	and.w	r3, r3, #31
 800d0f6:	68ba      	ldr	r2, [r7, #8]
 800d0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d0fc:	f003 0301 	and.w	r3, r3, #1
 800d100:	2b00      	cmp	r3, #0
 800d102:	d0f0      	beq.n	800d0e6 <HAL_CRCEx_Polynomial_Set+0x26>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b18      	cmp	r3, #24
 800d108:	d846      	bhi.n	800d198 <HAL_CRCEx_Polynomial_Set+0xd8>
 800d10a:	a201      	add	r2, pc, #4	; (adr r2, 800d110 <HAL_CRCEx_Polynomial_Set+0x50>)
 800d10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d110:	0800d19f 	.word	0x0800d19f
 800d114:	0800d199 	.word	0x0800d199
 800d118:	0800d199 	.word	0x0800d199
 800d11c:	0800d199 	.word	0x0800d199
 800d120:	0800d199 	.word	0x0800d199
 800d124:	0800d199 	.word	0x0800d199
 800d128:	0800d199 	.word	0x0800d199
 800d12c:	0800d199 	.word	0x0800d199
 800d130:	0800d18d 	.word	0x0800d18d
 800d134:	0800d199 	.word	0x0800d199
 800d138:	0800d199 	.word	0x0800d199
 800d13c:	0800d199 	.word	0x0800d199
 800d140:	0800d199 	.word	0x0800d199
 800d144:	0800d199 	.word	0x0800d199
 800d148:	0800d199 	.word	0x0800d199
 800d14c:	0800d199 	.word	0x0800d199
 800d150:	0800d181 	.word	0x0800d181
 800d154:	0800d199 	.word	0x0800d199
 800d158:	0800d199 	.word	0x0800d199
 800d15c:	0800d199 	.word	0x0800d199
 800d160:	0800d199 	.word	0x0800d199
 800d164:	0800d199 	.word	0x0800d199
 800d168:	0800d199 	.word	0x0800d199
 800d16c:	0800d199 	.word	0x0800d199
 800d170:	0800d175 	.word	0x0800d175

    switch (PolyLength)
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2b06      	cmp	r3, #6
 800d178:	d913      	bls.n	800d1a2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d17e:	e010      	b.n	800d1a2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	2b07      	cmp	r3, #7
 800d184:	d90f      	bls.n	800d1a6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800d186:	2301      	movs	r3, #1
 800d188:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d18a:	e00c      	b.n	800d1a6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	2b0f      	cmp	r3, #15
 800d190:	d90b      	bls.n	800d1aa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d196:	e008      	b.n	800d1aa <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	75fb      	strb	r3, [r7, #23]
        break;
 800d19c:	e006      	b.n	800d1ac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d19e:	bf00      	nop
 800d1a0:	e004      	b.n	800d1ac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d1a2:	bf00      	nop
 800d1a4:	e002      	b.n	800d1ac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d1a6:	bf00      	nop
 800d1a8:	e000      	b.n	800d1ac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d1aa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800d1ac:	7dfb      	ldrb	r3, [r7, #23]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10d      	bne.n	800d1ce <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	f023 0118 	bic.w	r1, r3, #24
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800d1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	371c      	adds	r7, #28
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d101      	bne.n	800d1ee <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e04f      	b.n	800d28e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d106      	bne.n	800d208 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7f9 fb92 	bl	800692c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2202      	movs	r2, #2
 800d20c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	4b20      	ldr	r3, [pc, #128]	; (800d298 <HAL_DMA2D_Init+0xbc>)
 800d218:	4013      	ands	r3, r2
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	6851      	ldr	r1, [r2, #4]
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	69d2      	ldr	r2, [r2, #28]
 800d222:	4311      	orrs	r1, r2
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	6812      	ldr	r2, [r2, #0]
 800d228:	430b      	orrs	r3, r1
 800d22a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d232:	4b1a      	ldr	r3, [pc, #104]	; (800d29c <HAL_DMA2D_Init+0xc0>)
 800d234:	4013      	ands	r3, r2
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	6891      	ldr	r1, [r2, #8]
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	6992      	ldr	r2, [r2, #24]
 800d23e:	4311      	orrs	r1, r2
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	6812      	ldr	r2, [r2, #0]
 800d244:	430b      	orrs	r3, r1
 800d246:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d24e:	4b14      	ldr	r3, [pc, #80]	; (800d2a0 <HAL_DMA2D_Init+0xc4>)
 800d250:	4013      	ands	r3, r2
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	68d1      	ldr	r1, [r2, #12]
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	6812      	ldr	r2, [r2, #0]
 800d25a:	430b      	orrs	r3, r1
 800d25c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d264:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	051a      	lsls	r2, r3, #20
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	055b      	lsls	r3, r3, #21
 800d274:	431a      	orrs	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	430a      	orrs	r2, r1
 800d27c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	fff8ffbf 	.word	0xfff8ffbf
 800d29c:	fffffef8 	.word	0xfffffef8
 800d2a0:	ffff0000 	.word	0xffff0000

0800d2a4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f003 0301 	and.w	r3, r3, #1
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d026      	beq.n	800d314 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d021      	beq.n	800d314 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2de:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2e4:	f043 0201 	orr.w	r2, r3, #1
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2204      	movs	r2, #4
 800d2f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d003      	beq.n	800d314 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f003 0320 	and.w	r3, r3, #32
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d026      	beq.n	800d36c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d324:	2b00      	cmp	r3, #0
 800d326:	d021      	beq.n	800d36c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d336:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2220      	movs	r2, #32
 800d33e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d344:	f043 0202 	orr.w	r2, r3, #2
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2204      	movs	r2, #4
 800d350:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d360:	2b00      	cmp	r3, #0
 800d362:	d003      	beq.n	800d36c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f003 0308 	and.w	r3, r3, #8
 800d372:	2b00      	cmp	r3, #0
 800d374:	d026      	beq.n	800d3c4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d021      	beq.n	800d3c4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d38e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2208      	movs	r2, #8
 800d396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d39c:	f043 0204 	orr.w	r2, r3, #4
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2204      	movs	r2, #4
 800d3a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d003      	beq.n	800d3c4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f003 0304 	and.w	r3, r3, #4
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d013      	beq.n	800d3f6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00e      	beq.n	800d3f6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2204      	movs	r2, #4
 800d3ee:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f853 	bl	800d49c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f003 0302 	and.w	r3, r3, #2
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d024      	beq.n	800d44a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d406:	2b00      	cmp	r3, #0
 800d408:	d01f      	beq.n	800d44a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d418:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2202      	movs	r2, #2
 800d420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d003      	beq.n	800d44a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f003 0310 	and.w	r3, r3, #16
 800d450:	2b00      	cmp	r3, #0
 800d452:	d01f      	beq.n	800d494 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d01a      	beq.n	800d494 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d46c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2210      	movs	r2, #16
 800d474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2201      	movs	r2, #1
 800d482:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f80e 	bl	800d4b0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d494:	bf00      	nop
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b087      	sub	sp, #28
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d104      	bne.n	800d4e6 <HAL_DMA2D_ConfigLayer+0x22>
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	00db      	lsls	r3, r3, #3
 800d4e2:	1a9b      	subs	r3, r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d101      	bne.n	800d4f4 <HAL_DMA2D_ConfigLayer+0x30>
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	e092      	b.n	800d61a <HAL_DMA2D_ConfigLayer+0x156>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2202      	movs	r2, #2
 800d500:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	4613      	mov	r3, r2
 800d508:	00db      	lsls	r3, r3, #3
 800d50a:	1a9b      	subs	r3, r3, r2
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	3328      	adds	r3, #40	; 0x28
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	4413      	add	r3, r2
 800d514:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	685a      	ldr	r2, [r3, #4]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	041b      	lsls	r3, r3, #16
 800d520:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d528:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	695b      	ldr	r3, [r3, #20]
 800d52e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d530:	4313      	orrs	r3, r2
 800d532:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800d534:	4b3c      	ldr	r3, [pc, #240]	; (800d628 <HAL_DMA2D_ConfigLayer+0x164>)
 800d536:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	2b0a      	cmp	r3, #10
 800d53e:	d003      	beq.n	800d548 <HAL_DMA2D_ConfigLayer+0x84>
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	2b09      	cmp	r3, #9
 800d546:	d107      	bne.n	800d558 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d550:	693a      	ldr	r2, [r7, #16]
 800d552:	4313      	orrs	r3, r2
 800d554:	613b      	str	r3, [r7, #16]
 800d556:	e005      	b.n	800d564 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	061b      	lsls	r3, r3, #24
 800d55e:	693a      	ldr	r2, [r7, #16]
 800d560:	4313      	orrs	r3, r2
 800d562:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d120      	bne.n	800d5ac <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	43db      	mvns	r3, r3
 800d574:	ea02 0103 	and.w	r1, r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	693a      	ldr	r2, [r7, #16]
 800d57e:	430a      	orrs	r2, r1
 800d580:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	6812      	ldr	r2, [r2, #0]
 800d58a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	2b0a      	cmp	r3, #10
 800d592:	d003      	beq.n	800d59c <HAL_DMA2D_ConfigLayer+0xd8>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	2b09      	cmp	r3, #9
 800d59a:	d135      	bne.n	800d608 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	68da      	ldr	r2, [r3, #12]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d5a8:	629a      	str	r2, [r3, #40]	; 0x28
 800d5aa:	e02d      	b.n	800d608 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	2b0b      	cmp	r3, #11
 800d5b2:	d109      	bne.n	800d5c8 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	699b      	ldr	r3, [r3, #24]
 800d5b8:	049b      	lsls	r3, r3, #18
 800d5ba:	693a      	ldr	r2, [r7, #16]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800d5c6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	69da      	ldr	r2, [r3, #28]
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	43db      	mvns	r3, r3
 800d5d2:	ea02 0103 	and.w	r1, r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	693a      	ldr	r2, [r7, #16]
 800d5dc:	430a      	orrs	r2, r1
 800d5de:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	6812      	ldr	r2, [r2, #0]
 800d5e8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	2b0a      	cmp	r3, #10
 800d5f0:	d003      	beq.n	800d5fa <HAL_DMA2D_ConfigLayer+0x136>
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	2b09      	cmp	r3, #9
 800d5f8:	d106      	bne.n	800d608 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	68da      	ldr	r2, [r3, #12]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d606:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	371c      	adds	r7, #28
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	ff33000f 	.word	0xff33000f

0800d62c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b089      	sub	sp, #36	; 0x24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d636:	2300      	movs	r3, #0
 800d638:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d63a:	4b89      	ldr	r3, [pc, #548]	; (800d860 <HAL_GPIO_Init+0x234>)
 800d63c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d63e:	e194      	b.n	800d96a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	2101      	movs	r1, #1
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	fa01 f303 	lsl.w	r3, r1, r3
 800d64c:	4013      	ands	r3, r2
 800d64e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	2b00      	cmp	r3, #0
 800d654:	f000 8186 	beq.w	800d964 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	f003 0303 	and.w	r3, r3, #3
 800d660:	2b01      	cmp	r3, #1
 800d662:	d005      	beq.n	800d670 <HAL_GPIO_Init+0x44>
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	f003 0303 	and.w	r3, r3, #3
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d130      	bne.n	800d6d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	005b      	lsls	r3, r3, #1
 800d67a:	2203      	movs	r2, #3
 800d67c:	fa02 f303 	lsl.w	r3, r2, r3
 800d680:	43db      	mvns	r3, r3
 800d682:	69ba      	ldr	r2, [r7, #24]
 800d684:	4013      	ands	r3, r2
 800d686:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	68da      	ldr	r2, [r3, #12]
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	005b      	lsls	r3, r3, #1
 800d690:	fa02 f303 	lsl.w	r3, r2, r3
 800d694:	69ba      	ldr	r2, [r7, #24]
 800d696:	4313      	orrs	r3, r2
 800d698:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	69ba      	ldr	r2, [r7, #24]
 800d69e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ae:	43db      	mvns	r3, r3
 800d6b0:	69ba      	ldr	r2, [r7, #24]
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	091b      	lsrs	r3, r3, #4
 800d6bc:	f003 0201 	and.w	r2, r3, #1
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6c6:	69ba      	ldr	r2, [r7, #24]
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	69ba      	ldr	r2, [r7, #24]
 800d6d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	f003 0303 	and.w	r3, r3, #3
 800d6da:	2b03      	cmp	r3, #3
 800d6dc:	d017      	beq.n	800d70e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	005b      	lsls	r3, r3, #1
 800d6e8:	2203      	movs	r2, #3
 800d6ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ee:	43db      	mvns	r3, r3
 800d6f0:	69ba      	ldr	r2, [r7, #24]
 800d6f2:	4013      	ands	r3, r2
 800d6f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	689a      	ldr	r2, [r3, #8]
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	005b      	lsls	r3, r3, #1
 800d6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d702:	69ba      	ldr	r2, [r7, #24]
 800d704:	4313      	orrs	r3, r2
 800d706:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	69ba      	ldr	r2, [r7, #24]
 800d70c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	f003 0303 	and.w	r3, r3, #3
 800d716:	2b02      	cmp	r3, #2
 800d718:	d123      	bne.n	800d762 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	08da      	lsrs	r2, r3, #3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	3208      	adds	r2, #8
 800d722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	f003 0307 	and.w	r3, r3, #7
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	220f      	movs	r2, #15
 800d732:	fa02 f303 	lsl.w	r3, r2, r3
 800d736:	43db      	mvns	r3, r3
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	4013      	ands	r3, r2
 800d73c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	691a      	ldr	r2, [r3, #16]
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	f003 0307 	and.w	r3, r3, #7
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	fa02 f303 	lsl.w	r3, r2, r3
 800d74e:	69ba      	ldr	r2, [r7, #24]
 800d750:	4313      	orrs	r3, r2
 800d752:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	08da      	lsrs	r2, r3, #3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	3208      	adds	r2, #8
 800d75c:	69b9      	ldr	r1, [r7, #24]
 800d75e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	005b      	lsls	r3, r3, #1
 800d76c:	2203      	movs	r2, #3
 800d76e:	fa02 f303 	lsl.w	r3, r2, r3
 800d772:	43db      	mvns	r3, r3
 800d774:	69ba      	ldr	r2, [r7, #24]
 800d776:	4013      	ands	r3, r2
 800d778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	f003 0203 	and.w	r2, r3, #3
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	005b      	lsls	r3, r3, #1
 800d786:	fa02 f303 	lsl.w	r3, r2, r3
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	4313      	orrs	r3, r2
 800d78e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	69ba      	ldr	r2, [r7, #24]
 800d794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 80e0 	beq.w	800d964 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d7a4:	4b2f      	ldr	r3, [pc, #188]	; (800d864 <HAL_GPIO_Init+0x238>)
 800d7a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d7aa:	4a2e      	ldr	r2, [pc, #184]	; (800d864 <HAL_GPIO_Init+0x238>)
 800d7ac:	f043 0302 	orr.w	r3, r3, #2
 800d7b0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800d7b4:	4b2b      	ldr	r3, [pc, #172]	; (800d864 <HAL_GPIO_Init+0x238>)
 800d7b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d7ba:	f003 0302 	and.w	r3, r3, #2
 800d7be:	60fb      	str	r3, [r7, #12]
 800d7c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d7c2:	4a29      	ldr	r2, [pc, #164]	; (800d868 <HAL_GPIO_Init+0x23c>)
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	089b      	lsrs	r3, r3, #2
 800d7c8:	3302      	adds	r3, #2
 800d7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	f003 0303 	and.w	r3, r3, #3
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	220f      	movs	r2, #15
 800d7da:	fa02 f303 	lsl.w	r3, r2, r3
 800d7de:	43db      	mvns	r3, r3
 800d7e0:	69ba      	ldr	r2, [r7, #24]
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a20      	ldr	r2, [pc, #128]	; (800d86c <HAL_GPIO_Init+0x240>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d052      	beq.n	800d894 <HAL_GPIO_Init+0x268>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a1f      	ldr	r2, [pc, #124]	; (800d870 <HAL_GPIO_Init+0x244>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d031      	beq.n	800d85a <HAL_GPIO_Init+0x22e>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a1e      	ldr	r2, [pc, #120]	; (800d874 <HAL_GPIO_Init+0x248>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d02b      	beq.n	800d856 <HAL_GPIO_Init+0x22a>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a1d      	ldr	r2, [pc, #116]	; (800d878 <HAL_GPIO_Init+0x24c>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d025      	beq.n	800d852 <HAL_GPIO_Init+0x226>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a1c      	ldr	r2, [pc, #112]	; (800d87c <HAL_GPIO_Init+0x250>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d01f      	beq.n	800d84e <HAL_GPIO_Init+0x222>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a1b      	ldr	r2, [pc, #108]	; (800d880 <HAL_GPIO_Init+0x254>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d019      	beq.n	800d84a <HAL_GPIO_Init+0x21e>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a1a      	ldr	r2, [pc, #104]	; (800d884 <HAL_GPIO_Init+0x258>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d013      	beq.n	800d846 <HAL_GPIO_Init+0x21a>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a19      	ldr	r2, [pc, #100]	; (800d888 <HAL_GPIO_Init+0x25c>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d00d      	beq.n	800d842 <HAL_GPIO_Init+0x216>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a18      	ldr	r2, [pc, #96]	; (800d88c <HAL_GPIO_Init+0x260>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d007      	beq.n	800d83e <HAL_GPIO_Init+0x212>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a17      	ldr	r2, [pc, #92]	; (800d890 <HAL_GPIO_Init+0x264>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d101      	bne.n	800d83a <HAL_GPIO_Init+0x20e>
 800d836:	2309      	movs	r3, #9
 800d838:	e02d      	b.n	800d896 <HAL_GPIO_Init+0x26a>
 800d83a:	230a      	movs	r3, #10
 800d83c:	e02b      	b.n	800d896 <HAL_GPIO_Init+0x26a>
 800d83e:	2308      	movs	r3, #8
 800d840:	e029      	b.n	800d896 <HAL_GPIO_Init+0x26a>
 800d842:	2307      	movs	r3, #7
 800d844:	e027      	b.n	800d896 <HAL_GPIO_Init+0x26a>
 800d846:	2306      	movs	r3, #6
 800d848:	e025      	b.n	800d896 <HAL_GPIO_Init+0x26a>
 800d84a:	2305      	movs	r3, #5
 800d84c:	e023      	b.n	800d896 <HAL_GPIO_Init+0x26a>
 800d84e:	2304      	movs	r3, #4
 800d850:	e021      	b.n	800d896 <HAL_GPIO_Init+0x26a>
 800d852:	2303      	movs	r3, #3
 800d854:	e01f      	b.n	800d896 <HAL_GPIO_Init+0x26a>
 800d856:	2302      	movs	r3, #2
 800d858:	e01d      	b.n	800d896 <HAL_GPIO_Init+0x26a>
 800d85a:	2301      	movs	r3, #1
 800d85c:	e01b      	b.n	800d896 <HAL_GPIO_Init+0x26a>
 800d85e:	bf00      	nop
 800d860:	58000080 	.word	0x58000080
 800d864:	58024400 	.word	0x58024400
 800d868:	58000400 	.word	0x58000400
 800d86c:	58020000 	.word	0x58020000
 800d870:	58020400 	.word	0x58020400
 800d874:	58020800 	.word	0x58020800
 800d878:	58020c00 	.word	0x58020c00
 800d87c:	58021000 	.word	0x58021000
 800d880:	58021400 	.word	0x58021400
 800d884:	58021800 	.word	0x58021800
 800d888:	58021c00 	.word	0x58021c00
 800d88c:	58022000 	.word	0x58022000
 800d890:	58022400 	.word	0x58022400
 800d894:	2300      	movs	r3, #0
 800d896:	69fa      	ldr	r2, [r7, #28]
 800d898:	f002 0203 	and.w	r2, r2, #3
 800d89c:	0092      	lsls	r2, r2, #2
 800d89e:	4093      	lsls	r3, r2
 800d8a0:	69ba      	ldr	r2, [r7, #24]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d8a6:	4938      	ldr	r1, [pc, #224]	; (800d988 <HAL_GPIO_Init+0x35c>)
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	089b      	lsrs	r3, r3, #2
 800d8ac:	3302      	adds	r3, #2
 800d8ae:	69ba      	ldr	r2, [r7, #24]
 800d8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d8b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	43db      	mvns	r3, r3
 800d8c0:	69ba      	ldr	r2, [r7, #24]
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d003      	beq.n	800d8da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d8da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d8e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	43db      	mvns	r3, r3
 800d8ee:	69ba      	ldr	r2, [r7, #24]
 800d8f0:	4013      	ands	r3, r2
 800d8f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d900:	69ba      	ldr	r2, [r7, #24]
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	4313      	orrs	r3, r2
 800d906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	43db      	mvns	r3, r3
 800d91a:	69ba      	ldr	r2, [r7, #24]
 800d91c:	4013      	ands	r3, r2
 800d91e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d003      	beq.n	800d934 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	4313      	orrs	r3, r2
 800d932:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	69ba      	ldr	r2, [r7, #24]
 800d938:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	43db      	mvns	r3, r3
 800d944:	69ba      	ldr	r2, [r7, #24]
 800d946:	4013      	ands	r3, r2
 800d948:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800d956:	69ba      	ldr	r2, [r7, #24]
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	69ba      	ldr	r2, [r7, #24]
 800d962:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	3301      	adds	r3, #1
 800d968:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	fa22 f303 	lsr.w	r3, r2, r3
 800d974:	2b00      	cmp	r3, #0
 800d976:	f47f ae63 	bne.w	800d640 <HAL_GPIO_Init+0x14>
  }
}
 800d97a:	bf00      	nop
 800d97c:	bf00      	nop
 800d97e:	3724      	adds	r7, #36	; 0x24
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	58000400 	.word	0x58000400

0800d98c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d996:	2300      	movs	r3, #0
 800d998:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d99a:	4b75      	ldr	r3, [pc, #468]	; (800db70 <HAL_GPIO_DeInit+0x1e4>)
 800d99c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d99e:	e0d9      	b.n	800db54 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a8:	683a      	ldr	r2, [r7, #0]
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 80cc 	beq.w	800db4e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d9b6:	4a6f      	ldr	r2, [pc, #444]	; (800db74 <HAL_GPIO_DeInit+0x1e8>)
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	089b      	lsrs	r3, r3, #2
 800d9bc:	3302      	adds	r3, #2
 800d9be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9c2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	f003 0303 	and.w	r3, r3, #3
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	220f      	movs	r2, #15
 800d9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d9d2:	68ba      	ldr	r2, [r7, #8]
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4a67      	ldr	r2, [pc, #412]	; (800db78 <HAL_GPIO_DeInit+0x1ec>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d037      	beq.n	800da50 <HAL_GPIO_DeInit+0xc4>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a66      	ldr	r2, [pc, #408]	; (800db7c <HAL_GPIO_DeInit+0x1f0>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d031      	beq.n	800da4c <HAL_GPIO_DeInit+0xc0>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a65      	ldr	r2, [pc, #404]	; (800db80 <HAL_GPIO_DeInit+0x1f4>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d02b      	beq.n	800da48 <HAL_GPIO_DeInit+0xbc>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a64      	ldr	r2, [pc, #400]	; (800db84 <HAL_GPIO_DeInit+0x1f8>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d025      	beq.n	800da44 <HAL_GPIO_DeInit+0xb8>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a63      	ldr	r2, [pc, #396]	; (800db88 <HAL_GPIO_DeInit+0x1fc>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d01f      	beq.n	800da40 <HAL_GPIO_DeInit+0xb4>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a62      	ldr	r2, [pc, #392]	; (800db8c <HAL_GPIO_DeInit+0x200>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d019      	beq.n	800da3c <HAL_GPIO_DeInit+0xb0>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a61      	ldr	r2, [pc, #388]	; (800db90 <HAL_GPIO_DeInit+0x204>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d013      	beq.n	800da38 <HAL_GPIO_DeInit+0xac>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a60      	ldr	r2, [pc, #384]	; (800db94 <HAL_GPIO_DeInit+0x208>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d00d      	beq.n	800da34 <HAL_GPIO_DeInit+0xa8>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a5f      	ldr	r2, [pc, #380]	; (800db98 <HAL_GPIO_DeInit+0x20c>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d007      	beq.n	800da30 <HAL_GPIO_DeInit+0xa4>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4a5e      	ldr	r2, [pc, #376]	; (800db9c <HAL_GPIO_DeInit+0x210>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d101      	bne.n	800da2c <HAL_GPIO_DeInit+0xa0>
 800da28:	2309      	movs	r3, #9
 800da2a:	e012      	b.n	800da52 <HAL_GPIO_DeInit+0xc6>
 800da2c:	230a      	movs	r3, #10
 800da2e:	e010      	b.n	800da52 <HAL_GPIO_DeInit+0xc6>
 800da30:	2308      	movs	r3, #8
 800da32:	e00e      	b.n	800da52 <HAL_GPIO_DeInit+0xc6>
 800da34:	2307      	movs	r3, #7
 800da36:	e00c      	b.n	800da52 <HAL_GPIO_DeInit+0xc6>
 800da38:	2306      	movs	r3, #6
 800da3a:	e00a      	b.n	800da52 <HAL_GPIO_DeInit+0xc6>
 800da3c:	2305      	movs	r3, #5
 800da3e:	e008      	b.n	800da52 <HAL_GPIO_DeInit+0xc6>
 800da40:	2304      	movs	r3, #4
 800da42:	e006      	b.n	800da52 <HAL_GPIO_DeInit+0xc6>
 800da44:	2303      	movs	r3, #3
 800da46:	e004      	b.n	800da52 <HAL_GPIO_DeInit+0xc6>
 800da48:	2302      	movs	r3, #2
 800da4a:	e002      	b.n	800da52 <HAL_GPIO_DeInit+0xc6>
 800da4c:	2301      	movs	r3, #1
 800da4e:	e000      	b.n	800da52 <HAL_GPIO_DeInit+0xc6>
 800da50:	2300      	movs	r3, #0
 800da52:	697a      	ldr	r2, [r7, #20]
 800da54:	f002 0203 	and.w	r2, r2, #3
 800da58:	0092      	lsls	r2, r2, #2
 800da5a:	4093      	lsls	r3, r2
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d136      	bne.n	800dad0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	43db      	mvns	r3, r3
 800da6a:	401a      	ands	r2, r3
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	685a      	ldr	r2, [r3, #4]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	43db      	mvns	r3, r3
 800da78:	401a      	ands	r2, r3
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800da7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da82:	685a      	ldr	r2, [r3, #4]
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	43db      	mvns	r3, r3
 800da88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da8c:	4013      	ands	r3, r2
 800da8e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800da90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	43db      	mvns	r3, r3
 800da9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da9e:	4013      	ands	r3, r2
 800daa0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	f003 0303 	and.w	r3, r3, #3
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	220f      	movs	r2, #15
 800daac:	fa02 f303 	lsl.w	r3, r2, r3
 800dab0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800dab2:	4a30      	ldr	r2, [pc, #192]	; (800db74 <HAL_GPIO_DeInit+0x1e8>)
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	089b      	lsrs	r3, r3, #2
 800dab8:	3302      	adds	r3, #2
 800daba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	43da      	mvns	r2, r3
 800dac2:	482c      	ldr	r0, [pc, #176]	; (800db74 <HAL_GPIO_DeInit+0x1e8>)
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	089b      	lsrs	r3, r3, #2
 800dac8:	400a      	ands	r2, r1
 800daca:	3302      	adds	r3, #2
 800dacc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	005b      	lsls	r3, r3, #1
 800dad8:	2103      	movs	r1, #3
 800dada:	fa01 f303 	lsl.w	r3, r1, r3
 800dade:	431a      	orrs	r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	08da      	lsrs	r2, r3, #3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	3208      	adds	r2, #8
 800daec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	f003 0307 	and.w	r3, r3, #7
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	220f      	movs	r2, #15
 800dafa:	fa02 f303 	lsl.w	r3, r2, r3
 800dafe:	43db      	mvns	r3, r3
 800db00:	697a      	ldr	r2, [r7, #20]
 800db02:	08d2      	lsrs	r2, r2, #3
 800db04:	4019      	ands	r1, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	3208      	adds	r2, #8
 800db0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	68da      	ldr	r2, [r3, #12]
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	2103      	movs	r1, #3
 800db18:	fa01 f303 	lsl.w	r3, r1, r3
 800db1c:	43db      	mvns	r3, r3
 800db1e:	401a      	ands	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	685a      	ldr	r2, [r3, #4]
 800db28:	2101      	movs	r1, #1
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	fa01 f303 	lsl.w	r3, r1, r3
 800db30:	43db      	mvns	r3, r3
 800db32:	401a      	ands	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	689a      	ldr	r2, [r3, #8]
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	005b      	lsls	r3, r3, #1
 800db40:	2103      	movs	r1, #3
 800db42:	fa01 f303 	lsl.w	r3, r1, r3
 800db46:	43db      	mvns	r3, r3
 800db48:	401a      	ands	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	3301      	adds	r3, #1
 800db52:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	fa22 f303 	lsr.w	r3, r2, r3
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f47f af1f 	bne.w	800d9a0 <HAL_GPIO_DeInit+0x14>
  }
}
 800db62:	bf00      	nop
 800db64:	bf00      	nop
 800db66:	371c      	adds	r7, #28
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr
 800db70:	58000080 	.word	0x58000080
 800db74:	58000400 	.word	0x58000400
 800db78:	58020000 	.word	0x58020000
 800db7c:	58020400 	.word	0x58020400
 800db80:	58020800 	.word	0x58020800
 800db84:	58020c00 	.word	0x58020c00
 800db88:	58021000 	.word	0x58021000
 800db8c:	58021400 	.word	0x58021400
 800db90:	58021800 	.word	0x58021800
 800db94:	58021c00 	.word	0x58021c00
 800db98:	58022000 	.word	0x58022000
 800db9c:	58022400 	.word	0x58022400

0800dba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	691a      	ldr	r2, [r3, #16]
 800dbb0:	887b      	ldrh	r3, [r7, #2]
 800dbb2:	4013      	ands	r3, r2
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d002      	beq.n	800dbbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	73fb      	strb	r3, [r7, #15]
 800dbbc:	e001      	b.n	800dbc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3714      	adds	r7, #20
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	807b      	strh	r3, [r7, #2]
 800dbdc:	4613      	mov	r3, r2
 800dbde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dbe0:	787b      	ldrb	r3, [r7, #1]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d003      	beq.n	800dbee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dbe6:	887a      	ldrh	r2, [r7, #2]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800dbec:	e003      	b.n	800dbf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800dbee:	887b      	ldrh	r3, [r7, #2]
 800dbf0:	041a      	lsls	r2, r3, #16
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	619a      	str	r2, [r3, #24]
}
 800dbf6:	bf00      	nop
 800dbf8:	370c      	adds	r7, #12
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr

0800dc02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dc02:	b480      	push	{r7}
 800dc04:	b085      	sub	sp, #20
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	695b      	ldr	r3, [r3, #20]
 800dc12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800dc14:	887a      	ldrh	r2, [r7, #2]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	4013      	ands	r3, r2
 800dc1a:	041a      	lsls	r2, r3, #16
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	43d9      	mvns	r1, r3
 800dc20:	887b      	ldrh	r3, [r7, #2]
 800dc22:	400b      	ands	r3, r1
 800dc24:	431a      	orrs	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	619a      	str	r2, [r3, #24]
}
 800dc2a:	bf00      	nop
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr

0800dc36 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b082      	sub	sp, #8
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800dc40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800dc48:	88fb      	ldrh	r3, [r7, #6]
 800dc4a:	4013      	ands	r3, r2
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d008      	beq.n	800dc62 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800dc50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc54:	88fb      	ldrh	r3, [r7, #6]
 800dc56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dc5a:	88fb      	ldrh	r3, [r7, #6]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f000 f804 	bl	800dc6a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800dc62:	bf00      	nop
 800dc64:	3708      	adds	r7, #8
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800dc6a:	b480      	push	{r7}
 800dc6c:	b083      	sub	sp, #12
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	4603      	mov	r3, r0
 800dc72:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800dc74:	bf00      	nop
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e07f      	b.n	800dd92 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d106      	bne.n	800dcac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f7f8 fe68 	bl	800697c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2224      	movs	r2, #36	; 0x24
 800dcb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f022 0201 	bic.w	r2, r2, #1
 800dcc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	685a      	ldr	r2, [r3, #4]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800dcd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689a      	ldr	r2, [r3, #8]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dce0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d107      	bne.n	800dcfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	689a      	ldr	r2, [r3, #8]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dcf6:	609a      	str	r2, [r3, #8]
 800dcf8:	e006      	b.n	800dd08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	689a      	ldr	r2, [r3, #8]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800dd06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	2b02      	cmp	r3, #2
 800dd0e:	d104      	bne.n	800dd1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	6859      	ldr	r1, [r3, #4]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	4b1d      	ldr	r3, [pc, #116]	; (800dd9c <HAL_I2C_Init+0x11c>)
 800dd26:	430b      	orrs	r3, r1
 800dd28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	68da      	ldr	r2, [r3, #12]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dd38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	691a      	ldr	r2, [r3, #16]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	695b      	ldr	r3, [r3, #20]
 800dd42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	699b      	ldr	r3, [r3, #24]
 800dd4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	430a      	orrs	r2, r1
 800dd52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	69d9      	ldr	r1, [r3, #28]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a1a      	ldr	r2, [r3, #32]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	430a      	orrs	r2, r1
 800dd62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f042 0201 	orr.w	r2, r2, #1
 800dd72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2220      	movs	r2, #32
 800dd7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	02008000 	.word	0x02008000

0800dda0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d101      	bne.n	800ddb2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e021      	b.n	800ddf6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2224      	movs	r2, #36	; 0x24
 800ddb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f022 0201 	bic.w	r2, r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7f8 fe40 	bl	8006a50 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
	...

0800de00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b088      	sub	sp, #32
 800de04:	af02      	add	r7, sp, #8
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	4608      	mov	r0, r1
 800de0a:	4611      	mov	r1, r2
 800de0c:	461a      	mov	r2, r3
 800de0e:	4603      	mov	r3, r0
 800de10:	817b      	strh	r3, [r7, #10]
 800de12:	460b      	mov	r3, r1
 800de14:	813b      	strh	r3, [r7, #8]
 800de16:	4613      	mov	r3, r2
 800de18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b20      	cmp	r3, #32
 800de24:	f040 80f9 	bne.w	800e01a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800de28:	6a3b      	ldr	r3, [r7, #32]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d002      	beq.n	800de34 <HAL_I2C_Mem_Write+0x34>
 800de2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de30:	2b00      	cmp	r3, #0
 800de32:	d105      	bne.n	800de40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800de3c:	2301      	movs	r3, #1
 800de3e:	e0ed      	b.n	800e01c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de46:	2b01      	cmp	r3, #1
 800de48:	d101      	bne.n	800de4e <HAL_I2C_Mem_Write+0x4e>
 800de4a:	2302      	movs	r3, #2
 800de4c:	e0e6      	b.n	800e01c <HAL_I2C_Mem_Write+0x21c>
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2201      	movs	r2, #1
 800de52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800de56:	f7fe ff11 	bl	800cc7c <HAL_GetTick>
 800de5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	2319      	movs	r3, #25
 800de62:	2201      	movs	r2, #1
 800de64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	f000 fadd 	bl	800e428 <I2C_WaitOnFlagUntilTimeout>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800de74:	2301      	movs	r3, #1
 800de76:	e0d1      	b.n	800e01c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2221      	movs	r2, #33	; 0x21
 800de7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2240      	movs	r2, #64	; 0x40
 800de84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2200      	movs	r2, #0
 800de8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6a3a      	ldr	r2, [r7, #32]
 800de92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800de98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2200      	movs	r2, #0
 800de9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dea0:	88f8      	ldrh	r0, [r7, #6]
 800dea2:	893a      	ldrh	r2, [r7, #8]
 800dea4:	8979      	ldrh	r1, [r7, #10]
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	9301      	str	r3, [sp, #4]
 800deaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	4603      	mov	r3, r0
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 f9ed 	bl	800e290 <I2C_RequestMemoryWrite>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d005      	beq.n	800dec8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2200      	movs	r2, #0
 800dec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	e0a9      	b.n	800e01c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800decc:	b29b      	uxth	r3, r3
 800dece:	2bff      	cmp	r3, #255	; 0xff
 800ded0:	d90e      	bls.n	800def0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	22ff      	movs	r2, #255	; 0xff
 800ded6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dedc:	b2da      	uxtb	r2, r3
 800dede:	8979      	ldrh	r1, [r7, #10]
 800dee0:	2300      	movs	r3, #0
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f000 fc57 	bl	800e79c <I2C_TransferConfig>
 800deee:	e00f      	b.n	800df10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800def4:	b29a      	uxth	r2, r3
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800defe:	b2da      	uxtb	r2, r3
 800df00:	8979      	ldrh	r1, [r7, #10]
 800df02:	2300      	movs	r3, #0
 800df04:	9300      	str	r3, [sp, #0]
 800df06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f000 fc46 	bl	800e79c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800df10:	697a      	ldr	r2, [r7, #20]
 800df12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f000 fad6 	bl	800e4c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d001      	beq.n	800df24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800df20:	2301      	movs	r3, #1
 800df22:	e07b      	b.n	800e01c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df28:	781a      	ldrb	r2, [r3, #0]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df3e:	b29b      	uxth	r3, r3
 800df40:	3b01      	subs	r3, #1
 800df42:	b29a      	uxth	r2, r3
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df4c:	3b01      	subs	r3, #1
 800df4e:	b29a      	uxth	r2, r3
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df58:	b29b      	uxth	r3, r3
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d034      	beq.n	800dfc8 <HAL_I2C_Mem_Write+0x1c8>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df62:	2b00      	cmp	r3, #0
 800df64:	d130      	bne.n	800dfc8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6c:	2200      	movs	r2, #0
 800df6e:	2180      	movs	r1, #128	; 0x80
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f000 fa59 	bl	800e428 <I2C_WaitOnFlagUntilTimeout>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d001      	beq.n	800df80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800df7c:	2301      	movs	r3, #1
 800df7e:	e04d      	b.n	800e01c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df84:	b29b      	uxth	r3, r3
 800df86:	2bff      	cmp	r3, #255	; 0xff
 800df88:	d90e      	bls.n	800dfa8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	22ff      	movs	r2, #255	; 0xff
 800df8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df94:	b2da      	uxtb	r2, r3
 800df96:	8979      	ldrh	r1, [r7, #10]
 800df98:	2300      	movs	r3, #0
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f000 fbfb 	bl	800e79c <I2C_TransferConfig>
 800dfa6:	e00f      	b.n	800dfc8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	8979      	ldrh	r1, [r7, #10]
 800dfba:	2300      	movs	r3, #0
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f000 fbea 	bl	800e79c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d19e      	bne.n	800df10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f000 fabc 	bl	800e554 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e01a      	b.n	800e01c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2220      	movs	r2, #32
 800dfec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	6859      	ldr	r1, [r3, #4]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	4b0a      	ldr	r3, [pc, #40]	; (800e024 <HAL_I2C_Mem_Write+0x224>)
 800dffa:	400b      	ands	r3, r1
 800dffc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2220      	movs	r2, #32
 800e002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2200      	movs	r2, #0
 800e00a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2200      	movs	r2, #0
 800e012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e016:	2300      	movs	r3, #0
 800e018:	e000      	b.n	800e01c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e01a:	2302      	movs	r3, #2
  }
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3718      	adds	r7, #24
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	fe00e800 	.word	0xfe00e800

0800e028 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b088      	sub	sp, #32
 800e02c:	af02      	add	r7, sp, #8
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	4608      	mov	r0, r1
 800e032:	4611      	mov	r1, r2
 800e034:	461a      	mov	r2, r3
 800e036:	4603      	mov	r3, r0
 800e038:	817b      	strh	r3, [r7, #10]
 800e03a:	460b      	mov	r3, r1
 800e03c:	813b      	strh	r3, [r7, #8]
 800e03e:	4613      	mov	r3, r2
 800e040:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	2b20      	cmp	r3, #32
 800e04c:	f040 80fd 	bne.w	800e24a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d002      	beq.n	800e05c <HAL_I2C_Mem_Read+0x34>
 800e056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d105      	bne.n	800e068 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e062:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	e0f1      	b.n	800e24c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d101      	bne.n	800e076 <HAL_I2C_Mem_Read+0x4e>
 800e072:	2302      	movs	r3, #2
 800e074:	e0ea      	b.n	800e24c <HAL_I2C_Mem_Read+0x224>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e07e:	f7fe fdfd 	bl	800cc7c <HAL_GetTick>
 800e082:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	9300      	str	r3, [sp, #0]
 800e088:	2319      	movs	r3, #25
 800e08a:	2201      	movs	r2, #1
 800e08c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f000 f9c9 	bl	800e428 <I2C_WaitOnFlagUntilTimeout>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d001      	beq.n	800e0a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e09c:	2301      	movs	r3, #1
 800e09e:	e0d5      	b.n	800e24c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2222      	movs	r2, #34	; 0x22
 800e0a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2240      	movs	r2, #64	; 0x40
 800e0ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6a3a      	ldr	r2, [r7, #32]
 800e0ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e0c8:	88f8      	ldrh	r0, [r7, #6]
 800e0ca:	893a      	ldrh	r2, [r7, #8]
 800e0cc:	8979      	ldrh	r1, [r7, #10]
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	68f8      	ldr	r0, [r7, #12]
 800e0da:	f000 f92d 	bl	800e338 <I2C_RequestMemoryRead>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d005      	beq.n	800e0f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e0ad      	b.n	800e24c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	2bff      	cmp	r3, #255	; 0xff
 800e0f8:	d90e      	bls.n	800e118 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	22ff      	movs	r2, #255	; 0xff
 800e0fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e104:	b2da      	uxtb	r2, r3
 800e106:	8979      	ldrh	r1, [r7, #10]
 800e108:	4b52      	ldr	r3, [pc, #328]	; (800e254 <HAL_I2C_Mem_Read+0x22c>)
 800e10a:	9300      	str	r3, [sp, #0]
 800e10c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f000 fb43 	bl	800e79c <I2C_TransferConfig>
 800e116:	e00f      	b.n	800e138 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e126:	b2da      	uxtb	r2, r3
 800e128:	8979      	ldrh	r1, [r7, #10]
 800e12a:	4b4a      	ldr	r3, [pc, #296]	; (800e254 <HAL_I2C_Mem_Read+0x22c>)
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f000 fb32 	bl	800e79c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	2200      	movs	r2, #0
 800e140:	2104      	movs	r1, #4
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f000 f970 	bl	800e428 <I2C_WaitOnFlagUntilTimeout>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d001      	beq.n	800e152 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e14e:	2301      	movs	r3, #1
 800e150:	e07c      	b.n	800e24c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15c:	b2d2      	uxtb	r2, r2
 800e15e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e164:	1c5a      	adds	r2, r3, #1
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e16e:	3b01      	subs	r3, #1
 800e170:	b29a      	uxth	r2, r3
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	3b01      	subs	r3, #1
 800e17e:	b29a      	uxth	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e188:	b29b      	uxth	r3, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d034      	beq.n	800e1f8 <HAL_I2C_Mem_Read+0x1d0>
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e192:	2b00      	cmp	r3, #0
 800e194:	d130      	bne.n	800e1f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19c:	2200      	movs	r2, #0
 800e19e:	2180      	movs	r1, #128	; 0x80
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f000 f941 	bl	800e428 <I2C_WaitOnFlagUntilTimeout>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d001      	beq.n	800e1b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	e04d      	b.n	800e24c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	2bff      	cmp	r3, #255	; 0xff
 800e1b8:	d90e      	bls.n	800e1d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	22ff      	movs	r2, #255	; 0xff
 800e1be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	8979      	ldrh	r1, [r7, #10]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	9300      	str	r3, [sp, #0]
 800e1cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f000 fae3 	bl	800e79c <I2C_TransferConfig>
 800e1d6:	e00f      	b.n	800e1f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1e6:	b2da      	uxtb	r2, r3
 800e1e8:	8979      	ldrh	r1, [r7, #10]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f000 fad2 	bl	800e79c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d19a      	bne.n	800e138 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e202:	697a      	ldr	r2, [r7, #20]
 800e204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f000 f9a4 	bl	800e554 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	e01a      	b.n	800e24c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2220      	movs	r2, #32
 800e21c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	6859      	ldr	r1, [r3, #4]
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	4b0b      	ldr	r3, [pc, #44]	; (800e258 <HAL_I2C_Mem_Read+0x230>)
 800e22a:	400b      	ands	r3, r1
 800e22c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2220      	movs	r2, #32
 800e232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2200      	movs	r2, #0
 800e23a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2200      	movs	r2, #0
 800e242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e246:	2300      	movs	r3, #0
 800e248:	e000      	b.n	800e24c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e24a:	2302      	movs	r3, #2
  }
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3718      	adds	r7, #24
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	80002400 	.word	0x80002400
 800e258:	fe00e800 	.word	0xfe00e800

0800e25c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b083      	sub	sp, #12
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e26a:	b2db      	uxtb	r3, r3
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e284:	4618      	mov	r0, r3
 800e286:	370c      	adds	r7, #12
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr

0800e290 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b086      	sub	sp, #24
 800e294:	af02      	add	r7, sp, #8
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	4608      	mov	r0, r1
 800e29a:	4611      	mov	r1, r2
 800e29c:	461a      	mov	r2, r3
 800e29e:	4603      	mov	r3, r0
 800e2a0:	817b      	strh	r3, [r7, #10]
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	813b      	strh	r3, [r7, #8]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e2aa:	88fb      	ldrh	r3, [r7, #6]
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	8979      	ldrh	r1, [r7, #10]
 800e2b0:	4b20      	ldr	r3, [pc, #128]	; (800e334 <I2C_RequestMemoryWrite+0xa4>)
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f000 fa6f 	bl	800e79c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2be:	69fa      	ldr	r2, [r7, #28]
 800e2c0:	69b9      	ldr	r1, [r7, #24]
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f000 f8ff 	bl	800e4c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d001      	beq.n	800e2d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e02c      	b.n	800e32c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e2d2:	88fb      	ldrh	r3, [r7, #6]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d105      	bne.n	800e2e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e2d8:	893b      	ldrh	r3, [r7, #8]
 800e2da:	b2da      	uxtb	r2, r3
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	629a      	str	r2, [r3, #40]	; 0x28
 800e2e2:	e015      	b.n	800e310 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e2e4:	893b      	ldrh	r3, [r7, #8]
 800e2e6:	0a1b      	lsrs	r3, r3, #8
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	b2da      	uxtb	r2, r3
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2f2:	69fa      	ldr	r2, [r7, #28]
 800e2f4:	69b9      	ldr	r1, [r7, #24]
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f000 f8e5 	bl	800e4c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e302:	2301      	movs	r3, #1
 800e304:	e012      	b.n	800e32c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e306:	893b      	ldrh	r3, [r7, #8]
 800e308:	b2da      	uxtb	r2, r3
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	2200      	movs	r2, #0
 800e318:	2180      	movs	r1, #128	; 0x80
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f000 f884 	bl	800e428 <I2C_WaitOnFlagUntilTimeout>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d001      	beq.n	800e32a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e326:	2301      	movs	r3, #1
 800e328:	e000      	b.n	800e32c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	80002000 	.word	0x80002000

0800e338 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b086      	sub	sp, #24
 800e33c:	af02      	add	r7, sp, #8
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	4608      	mov	r0, r1
 800e342:	4611      	mov	r1, r2
 800e344:	461a      	mov	r2, r3
 800e346:	4603      	mov	r3, r0
 800e348:	817b      	strh	r3, [r7, #10]
 800e34a:	460b      	mov	r3, r1
 800e34c:	813b      	strh	r3, [r7, #8]
 800e34e:	4613      	mov	r3, r2
 800e350:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e352:	88fb      	ldrh	r3, [r7, #6]
 800e354:	b2da      	uxtb	r2, r3
 800e356:	8979      	ldrh	r1, [r7, #10]
 800e358:	4b20      	ldr	r3, [pc, #128]	; (800e3dc <I2C_RequestMemoryRead+0xa4>)
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	2300      	movs	r3, #0
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f000 fa1c 	bl	800e79c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e364:	69fa      	ldr	r2, [r7, #28]
 800e366:	69b9      	ldr	r1, [r7, #24]
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f000 f8ac 	bl	800e4c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	d001      	beq.n	800e378 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e374:	2301      	movs	r3, #1
 800e376:	e02c      	b.n	800e3d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e378:	88fb      	ldrh	r3, [r7, #6]
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d105      	bne.n	800e38a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e37e:	893b      	ldrh	r3, [r7, #8]
 800e380:	b2da      	uxtb	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	629a      	str	r2, [r3, #40]	; 0x28
 800e388:	e015      	b.n	800e3b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e38a:	893b      	ldrh	r3, [r7, #8]
 800e38c:	0a1b      	lsrs	r3, r3, #8
 800e38e:	b29b      	uxth	r3, r3
 800e390:	b2da      	uxtb	r2, r3
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e398:	69fa      	ldr	r2, [r7, #28]
 800e39a:	69b9      	ldr	r1, [r7, #24]
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 f892 	bl	800e4c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e012      	b.n	800e3d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e3ac:	893b      	ldrh	r3, [r7, #8]
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	2140      	movs	r1, #64	; 0x40
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f000 f831 	bl	800e428 <I2C_WaitOnFlagUntilTimeout>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d001      	beq.n	800e3d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e000      	b.n	800e3d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	80002000 	.word	0x80002000

0800e3e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	699b      	ldr	r3, [r3, #24]
 800e3ee:	f003 0302 	and.w	r3, r3, #2
 800e3f2:	2b02      	cmp	r3, #2
 800e3f4:	d103      	bne.n	800e3fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	699b      	ldr	r3, [r3, #24]
 800e404:	f003 0301 	and.w	r3, r3, #1
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d007      	beq.n	800e41c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	699a      	ldr	r2, [r3, #24]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f042 0201 	orr.w	r2, r2, #1
 800e41a:	619a      	str	r2, [r3, #24]
  }
}
 800e41c:	bf00      	nop
 800e41e:	370c      	adds	r7, #12
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	603b      	str	r3, [r7, #0]
 800e434:	4613      	mov	r3, r2
 800e436:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e438:	e031      	b.n	800e49e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e440:	d02d      	beq.n	800e49e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e442:	f7fe fc1b 	bl	800cc7c <HAL_GetTick>
 800e446:	4602      	mov	r2, r0
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	1ad3      	subs	r3, r2, r3
 800e44c:	683a      	ldr	r2, [r7, #0]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d302      	bcc.n	800e458 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d122      	bne.n	800e49e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	699a      	ldr	r2, [r3, #24]
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	4013      	ands	r3, r2
 800e462:	68ba      	ldr	r2, [r7, #8]
 800e464:	429a      	cmp	r2, r3
 800e466:	bf0c      	ite	eq
 800e468:	2301      	moveq	r3, #1
 800e46a:	2300      	movne	r3, #0
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	461a      	mov	r2, r3
 800e470:	79fb      	ldrb	r3, [r7, #7]
 800e472:	429a      	cmp	r2, r3
 800e474:	d113      	bne.n	800e49e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e47a:	f043 0220 	orr.w	r2, r3, #32
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2220      	movs	r2, #32
 800e486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2200      	movs	r2, #0
 800e496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800e49a:	2301      	movs	r3, #1
 800e49c:	e00f      	b.n	800e4be <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	699a      	ldr	r2, [r3, #24]
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	bf0c      	ite	eq
 800e4ae:	2301      	moveq	r3, #1
 800e4b0:	2300      	movne	r3, #0
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d0be      	beq.n	800e43a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b084      	sub	sp, #16
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	60f8      	str	r0, [r7, #12]
 800e4ce:	60b9      	str	r1, [r7, #8]
 800e4d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e4d2:	e033      	b.n	800e53c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	68b9      	ldr	r1, [r7, #8]
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f000 f87f 	bl	800e5dc <I2C_IsErrorOccurred>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d001      	beq.n	800e4e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e031      	b.n	800e54c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ee:	d025      	beq.n	800e53c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4f0:	f7fe fbc4 	bl	800cc7c <HAL_GetTick>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d302      	bcc.n	800e506 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d11a      	bne.n	800e53c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	699b      	ldr	r3, [r3, #24]
 800e50c:	f003 0302 	and.w	r3, r3, #2
 800e510:	2b02      	cmp	r3, #2
 800e512:	d013      	beq.n	800e53c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e518:	f043 0220 	orr.w	r2, r3, #32
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2220      	movs	r2, #32
 800e524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2200      	movs	r2, #0
 800e52c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2200      	movs	r2, #0
 800e534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800e538:	2301      	movs	r3, #1
 800e53a:	e007      	b.n	800e54c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	699b      	ldr	r3, [r3, #24]
 800e542:	f003 0302 	and.w	r3, r3, #2
 800e546:	2b02      	cmp	r3, #2
 800e548:	d1c4      	bne.n	800e4d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e54a:	2300      	movs	r3, #0
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3710      	adds	r7, #16
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e560:	e02f      	b.n	800e5c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	68b9      	ldr	r1, [r7, #8]
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f000 f838 	bl	800e5dc <I2C_IsErrorOccurred>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d001      	beq.n	800e576 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e572:	2301      	movs	r3, #1
 800e574:	e02d      	b.n	800e5d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e576:	f7fe fb81 	bl	800cc7c <HAL_GetTick>
 800e57a:	4602      	mov	r2, r0
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	68ba      	ldr	r2, [r7, #8]
 800e582:	429a      	cmp	r2, r3
 800e584:	d302      	bcc.n	800e58c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d11a      	bne.n	800e5c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	699b      	ldr	r3, [r3, #24]
 800e592:	f003 0320 	and.w	r3, r3, #32
 800e596:	2b20      	cmp	r3, #32
 800e598:	d013      	beq.n	800e5c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e59e:	f043 0220 	orr.w	r2, r3, #32
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2220      	movs	r2, #32
 800e5aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	e007      	b.n	800e5d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	699b      	ldr	r3, [r3, #24]
 800e5c8:	f003 0320 	and.w	r3, r3, #32
 800e5cc:	2b20      	cmp	r3, #32
 800e5ce:	d1c8      	bne.n	800e562 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e5d0:	2300      	movs	r3, #0
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b08a      	sub	sp, #40	; 0x28
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	699b      	ldr	r3, [r3, #24]
 800e5f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	f003 0310 	and.w	r3, r3, #16
 800e604:	2b00      	cmp	r3, #0
 800e606:	d068      	beq.n	800e6da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2210      	movs	r2, #16
 800e60e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e610:	e049      	b.n	800e6a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e618:	d045      	beq.n	800e6a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e61a:	f7fe fb2f 	bl	800cc7c <HAL_GetTick>
 800e61e:	4602      	mov	r2, r0
 800e620:	69fb      	ldr	r3, [r7, #28]
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	429a      	cmp	r2, r3
 800e628:	d302      	bcc.n	800e630 <I2C_IsErrorOccurred+0x54>
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d13a      	bne.n	800e6a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e63a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e642:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	699b      	ldr	r3, [r3, #24]
 800e64a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e64e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e652:	d121      	bne.n	800e698 <I2C_IsErrorOccurred+0xbc>
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e65a:	d01d      	beq.n	800e698 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e65c:	7cfb      	ldrb	r3, [r7, #19]
 800e65e:	2b20      	cmp	r3, #32
 800e660:	d01a      	beq.n	800e698 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e670:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e672:	f7fe fb03 	bl	800cc7c <HAL_GetTick>
 800e676:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e678:	e00e      	b.n	800e698 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e67a:	f7fe faff 	bl	800cc7c <HAL_GetTick>
 800e67e:	4602      	mov	r2, r0
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	1ad3      	subs	r3, r2, r3
 800e684:	2b19      	cmp	r3, #25
 800e686:	d907      	bls.n	800e698 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800e688:	6a3b      	ldr	r3, [r7, #32]
 800e68a:	f043 0320 	orr.w	r3, r3, #32
 800e68e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800e690:	2301      	movs	r3, #1
 800e692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800e696:	e006      	b.n	800e6a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	699b      	ldr	r3, [r3, #24]
 800e69e:	f003 0320 	and.w	r3, r3, #32
 800e6a2:	2b20      	cmp	r3, #32
 800e6a4:	d1e9      	bne.n	800e67a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	699b      	ldr	r3, [r3, #24]
 800e6ac:	f003 0320 	and.w	r3, r3, #32
 800e6b0:	2b20      	cmp	r3, #32
 800e6b2:	d003      	beq.n	800e6bc <I2C_IsErrorOccurred+0xe0>
 800e6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d0aa      	beq.n	800e612 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d103      	bne.n	800e6cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2220      	movs	r2, #32
 800e6ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e6cc:	6a3b      	ldr	r3, [r7, #32]
 800e6ce:	f043 0304 	orr.w	r3, r3, #4
 800e6d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	699b      	ldr	r3, [r3, #24]
 800e6e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d00b      	beq.n	800e704 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e6ec:	6a3b      	ldr	r3, [r7, #32]
 800e6ee:	f043 0301 	orr.w	r3, r3, #1
 800e6f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e6fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e6fe:	2301      	movs	r3, #1
 800e700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00b      	beq.n	800e726 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e70e:	6a3b      	ldr	r3, [r7, #32]
 800e710:	f043 0308 	orr.w	r3, r3, #8
 800e714:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e71e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e720:	2301      	movs	r3, #1
 800e722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00b      	beq.n	800e748 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e730:	6a3b      	ldr	r3, [r7, #32]
 800e732:	f043 0302 	orr.w	r3, r3, #2
 800e736:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e740:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e742:	2301      	movs	r3, #1
 800e744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d01c      	beq.n	800e78a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e750:	68f8      	ldr	r0, [r7, #12]
 800e752:	f7ff fe45 	bl	800e3e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	6859      	ldr	r1, [r3, #4]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	4b0d      	ldr	r3, [pc, #52]	; (800e798 <I2C_IsErrorOccurred+0x1bc>)
 800e762:	400b      	ands	r3, r1
 800e764:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	431a      	orrs	r2, r3
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2220      	movs	r2, #32
 800e776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2200      	movs	r2, #0
 800e77e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800e78a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3728      	adds	r7, #40	; 0x28
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	fe00e800 	.word	0xfe00e800

0800e79c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b087      	sub	sp, #28
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	607b      	str	r3, [r7, #4]
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	817b      	strh	r3, [r7, #10]
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e7ae:	897b      	ldrh	r3, [r7, #10]
 800e7b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e7b4:	7a7b      	ldrb	r3, [r7, #9]
 800e7b6:	041b      	lsls	r3, r3, #16
 800e7b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e7bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e7c2:	6a3b      	ldr	r3, [r7, #32]
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	685a      	ldr	r2, [r3, #4]
 800e7d2:	6a3b      	ldr	r3, [r7, #32]
 800e7d4:	0d5b      	lsrs	r3, r3, #21
 800e7d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e7da:	4b08      	ldr	r3, [pc, #32]	; (800e7fc <I2C_TransferConfig+0x60>)
 800e7dc:	430b      	orrs	r3, r1
 800e7de:	43db      	mvns	r3, r3
 800e7e0:	ea02 0103 	and.w	r1, r2, r3
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	697a      	ldr	r2, [r7, #20]
 800e7ea:	430a      	orrs	r2, r1
 800e7ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e7ee:	bf00      	nop
 800e7f0:	371c      	adds	r7, #28
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr
 800e7fa:	bf00      	nop
 800e7fc:	03ff63ff 	.word	0x03ff63ff

0800e800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e810:	b2db      	uxtb	r3, r3
 800e812:	2b20      	cmp	r3, #32
 800e814:	d138      	bne.n	800e888 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d101      	bne.n	800e824 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e820:	2302      	movs	r3, #2
 800e822:	e032      	b.n	800e88a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2201      	movs	r2, #1
 800e828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2224      	movs	r2, #36	; 0x24
 800e830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f022 0201 	bic.w	r2, r2, #1
 800e842:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e852:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	6819      	ldr	r1, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	430a      	orrs	r2, r1
 800e862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f042 0201 	orr.w	r2, r2, #1
 800e872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2220      	movs	r2, #32
 800e878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2200      	movs	r2, #0
 800e880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e884:	2300      	movs	r3, #0
 800e886:	e000      	b.n	800e88a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e888:	2302      	movs	r3, #2
  }
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	370c      	adds	r7, #12
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e896:	b480      	push	{r7}
 800e898:	b085      	sub	sp, #20
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
 800e89e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	2b20      	cmp	r3, #32
 800e8aa:	d139      	bne.n	800e920 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d101      	bne.n	800e8ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	e033      	b.n	800e922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2201      	movs	r2, #1
 800e8be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2224      	movs	r2, #36	; 0x24
 800e8c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f022 0201 	bic.w	r2, r2, #1
 800e8d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e8e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	021b      	lsls	r3, r3, #8
 800e8ee:	68fa      	ldr	r2, [r7, #12]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f042 0201 	orr.w	r2, r2, #1
 800e90a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2220      	movs	r2, #32
 800e910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	e000      	b.n	800e922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e920:	2302      	movs	r3, #2
  }
}
 800e922:	4618      	mov	r0, r3
 800e924:	3714      	adds	r7, #20
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
	...

0800e930 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d101      	bne.n	800e942 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800e93e:	2301      	movs	r3, #1
 800e940:	e070      	b.n	800ea24 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7f8 f8a0 	bl	8006a9c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2202      	movs	r2, #2
 800e960:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f042 0201 	orr.w	r2, r2, #1
 800e972:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f022 0201 	bic.w	r2, r2, #1
 800e982:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800e992:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e9a2:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e9b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e9c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4a19      	ldr	r2, [pc, #100]	; (800ea2c <HAL_JPEG_Init+0xfc>)
 800e9c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	4a18      	ldr	r2, [pc, #96]	; (800ea30 <HAL_JPEG_Init+0x100>)
 800e9ce:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 fd79 	bl	800f4d4 <JPEG_Set_HuffEnc_Mem>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d004      	beq.n	800e9f2 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e018      	b.n	800ea24 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	685a      	ldr	r2, [r3, #4]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea00:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2201      	movs	r2, #1
 800ea12:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800ea22:	2300      	movs	r3, #0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3708      	adds	r7, #8
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	0802bd34 	.word	0x0802bd34
 800ea30:	0802bd74 	.word	0x0802bd74

0800ea34 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b086      	sub	sp, #24
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d002      	beq.n	800ea4a <HAL_JPEG_GetInfo+0x16>
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d101      	bne.n	800ea4e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e083      	b.n	800eb56 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	f003 0303 	and.w	r3, r3, #3
 800ea58:	2b02      	cmp	r3, #2
 800ea5a:	d103      	bne.n	800ea64 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	2210      	movs	r2, #16
 800ea60:	601a      	str	r2, [r3, #0]
 800ea62:	e017      	b.n	800ea94 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	f003 0303 	and.w	r3, r3, #3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d103      	bne.n	800ea7a <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	2200      	movs	r2, #0
 800ea76:	601a      	str	r2, [r3, #0]
 800ea78:	e00c      	b.n	800ea94 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	f003 0303 	and.w	r3, r3, #3
 800ea84:	2b03      	cmp	r3, #3
 800ea86:	d103      	bne.n	800ea90 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	2230      	movs	r2, #48	; 0x30
 800ea8c:	601a      	str	r2, [r3, #0]
 800ea8e:	e001      	b.n	800ea94 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800ea90:	2301      	movs	r3, #1
 800ea92:	e060      	b.n	800eb56 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	0c1b      	lsrs	r3, r3, #16
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	68db      	ldr	r3, [r3, #12]
 800eaa8:	0c1b      	lsrs	r3, r3, #16
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2b10      	cmp	r3, #16
 800eab6:	d003      	beq.n	800eac0 <HAL_JPEG_GetInfo+0x8c>
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2b30      	cmp	r3, #48	; 0x30
 800eabe:	d140      	bne.n	800eb42 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	691b      	ldr	r3, [r3, #16]
 800eac6:	091b      	lsrs	r3, r3, #4
 800eac8:	f003 030f 	and.w	r3, r3, #15
 800eacc:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	695b      	ldr	r3, [r3, #20]
 800ead4:	091b      	lsrs	r3, r3, #4
 800ead6:	f003 030f 	and.w	r3, r3, #15
 800eada:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	699b      	ldr	r3, [r3, #24]
 800eae2:	091b      	lsrs	r3, r3, #4
 800eae4:	f003 030f 	and.w	r3, r3, #15
 800eae8:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d109      	bne.n	800eb04 <HAL_JPEG_GetInfo+0xd0>
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d106      	bne.n	800eb04 <HAL_JPEG_GetInfo+0xd0>
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d103      	bne.n	800eb04 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	2202      	movs	r2, #2
 800eb00:	605a      	str	r2, [r3, #4]
 800eb02:	e01d      	b.n	800eb40 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d109      	bne.n	800eb1e <HAL_JPEG_GetInfo+0xea>
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d106      	bne.n	800eb1e <HAL_JPEG_GetInfo+0xea>
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d103      	bne.n	800eb1e <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	605a      	str	r2, [r3, #4]
 800eb1c:	e010      	b.n	800eb40 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2b03      	cmp	r3, #3
 800eb22:	d109      	bne.n	800eb38 <HAL_JPEG_GetInfo+0x104>
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <HAL_JPEG_GetInfo+0x104>
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d103      	bne.n	800eb38 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	2201      	movs	r2, #1
 800eb34:	605a      	str	r2, [r3, #4]
 800eb36:	e003      	b.n	800eb40 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800eb3e:	e003      	b.n	800eb48 <HAL_JPEG_GetInfo+0x114>
 800eb40:	e002      	b.n	800eb48 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	2200      	movs	r2, #0
 800eb46:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f001 fdb5 	bl	80106b8 <JPEG_GetQuality>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3718      	adds	r7, #24
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b084      	sub	sp, #16
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	60f8      	str	r0, [r7, #12]
 800eb66:	60b9      	str	r1, [r7, #8]
 800eb68:	607a      	str	r2, [r7, #4]
 800eb6a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d005      	beq.n	800eb7e <HAL_JPEG_Decode_DMA+0x20>
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d002      	beq.n	800eb7e <HAL_JPEG_Decode_DMA+0x20>
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d101      	bne.n	800eb82 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e04c      	b.n	800ec1c <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d101      	bne.n	800eb90 <HAL_JPEG_Decode_DMA+0x32>
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	e045      	b.n	800ec1c <HAL_JPEG_Decode_DMA+0xbe>
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d134      	bne.n	800ec0e <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2204      	movs	r2, #4
 800eba8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebb0:	f023 020f 	bic.w	r2, r3, #15
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebbc:	f043 020e 	orr.w	r2, r3, #14
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	68ba      	ldr	r2, [r7, #8]
 800ebc8:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	683a      	ldr	r2, [r7, #0]
 800ebce:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	69ba      	ldr	r2, [r7, #24]
 800ebda:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800ebe8:	68f8      	ldr	r0, [r7, #12]
 800ebea:	f000 fef5 	bl	800f9d8 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800ebee:	68f8      	ldr	r0, [r7, #12]
 800ebf0:	f001 fa16 	bl	8010020 <JPEG_DMA_StartProcess>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d00f      	beq.n	800ec1a <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2206      	movs	r2, #6
 800ebfe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e006      	b.n	800ec1c <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 800ec16:	2302      	movs	r3, #2
 800ec18:	e000      	b.n	800ec1c <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800ec1a:	2300      	movs	r3, #0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3710      	adds	r7, #16
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec36:	f003 030c 	and.w	r3, r3, #12
 800ec3a:	2b0c      	cmp	r3, #12
 800ec3c:	d116      	bne.n	800ec6c <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	f003 0301 	and.w	r3, r3, #1
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d005      	beq.n	800ec54 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	f003 0302 	and.w	r3, r3, #2
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d033      	beq.n	800ecc6 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec62:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	655a      	str	r2, [r3, #84]	; 0x54
 800ec6a:	e02c      	b.n	800ecc6 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec70:	f003 030c 	and.w	r3, r3, #12
 800ec74:	2b08      	cmp	r3, #8
 800ec76:	d126      	bne.n	800ecc6 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	f003 0301 	and.w	r3, r3, #1
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d009      	beq.n	800ec96 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f043 0306 	orr.w	r3, r3, #6
 800ec94:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	f003 0302 	and.w	r3, r3, #2
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d009      	beq.n	800ecb4 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eca4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800ecb2:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	43da      	mvns	r2, r3
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	400a      	ands	r2, r1
 800ecc4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3714      	adds	r7, #20
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800ecd4:	b590      	push	{r4, r7, lr}
 800ecd6:	b087      	sub	sp, #28
 800ecd8:	af02      	add	r7, sp, #8
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	60fb      	str	r3, [r7, #12]
  uint32_t xfrSize;

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d101      	bne.n	800ecf2 <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e0d7      	b.n	800eea2 <HAL_JPEG_Resume+0x1ce>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecf6:	f003 030c 	and.w	r3, r3, #12
 800ecfa:	2b0c      	cmp	r3, #12
 800ecfc:	f040 80a4 	bne.w	800ee48 <HAL_JPEG_Resume+0x174>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	f003 0301 	and.w	r3, r3, #1
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d049      	beq.n	800ed9e <HAL_JPEG_Resume+0xca>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	655a      	str	r2, [r3, #84]	; 0x54
        then MDMA In buffer size is 32 bytes

        else (MDMA In is triggred with JPEG In FIFO not full flag)
        then MDMA In buffer size is 4 bytes
        */
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed1c:	60bb      	str	r3, [r7, #8]

      if (xfrSize == 0UL)
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d10b      	bne.n	800ed3c <HAL_JPEG_Resume+0x68>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed28:	f043 0204 	orr.w	r2, r3, #4
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2206      	movs	r2, #6
 800ed34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        return HAL_ERROR;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e0b2      	b.n	800eea2 <HAL_JPEG_Resume+0x1ce>
      }
      /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed44:	68b9      	ldr	r1, [r7, #8]
 800ed46:	fbb3 f1f1 	udiv	r1, r3, r1
 800ed4a:	68b8      	ldr	r0, [r7, #8]
 800ed4c:	fb00 f101 	mul.w	r1, r0, r1
 800ed50:	1a5b      	subs	r3, r3, r1
 800ed52:	1ad2      	subs	r2, r2, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	629a      	str	r2, [r3, #40]	; 0x28


      if (hjpeg->InDataLength > 0UL)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d01e      	beq.n	800ed9e <HAL_JPEG_Resume+0xca>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	699b      	ldr	r3, [r3, #24]
 800ed68:	4619      	mov	r1, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	3340      	adds	r3, #64	; 0x40
 800ed70:	461c      	mov	r4, r3
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed76:	2201      	movs	r2, #1
 800ed78:	9200      	str	r2, [sp, #0]
 800ed7a:	4622      	mov	r2, r4
 800ed7c:	f002 f930 	bl	8010fe0 <HAL_MDMA_Start_IT>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00b      	beq.n	800ed9e <HAL_JPEG_Resume+0xca>
                              hjpeg->InDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed8a:	f043 0204 	orr.w	r2, r3, #4
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2206      	movs	r2, #6
 800ed96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e081      	b.n	800eea2 <HAL_JPEG_Resume+0x1ce>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	f003 0302 	and.w	r3, r3, #2
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d07b      	beq.n	800eea0 <HAL_JPEG_Resume+0x1cc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d003      	beq.n	800edc8 <HAL_JPEG_Resume+0xf4>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f001 faa5 	bl	8010310 <JPEG_DMA_PollResidualData>
 800edc6:	e06b      	b.n	800eea0 <HAL_JPEG_Resume+0x1cc>
        /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
          then MDMA out buffer size is 32 bytes
          else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
          then MDMA buffer size is 4 bytes
          */
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edce:	60bb      	str	r3, [r7, #8]

        if (xfrSize == 0UL)
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d10b      	bne.n	800edee <HAL_JPEG_Resume+0x11a>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edda:	f043 0204 	orr.w	r2, r3, #4
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2206      	movs	r2, #6
 800ede6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800edea:	2301      	movs	r3, #1
 800edec:	e059      	b.n	800eea2 <HAL_JPEG_Resume+0x1ce>
        }
        /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf6:	68b9      	ldr	r1, [r7, #8]
 800edf8:	fbb3 f1f1 	udiv	r1, r3, r1
 800edfc:	68b8      	ldr	r0, [r7, #8]
 800edfe:	fb00 f101 	mul.w	r1, r0, r1
 800ee02:	1a5b      	subs	r3, r3, r1
 800ee04:	1ad2      	subs	r2, r2, r3
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Start DMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	3344      	adds	r3, #68	; 0x44
 800ee14:	4619      	mov	r1, r3
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	69db      	ldr	r3, [r3, #28]
 800ee1a:	461c      	mov	r4, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee20:	2201      	movs	r2, #1
 800ee22:	9200      	str	r2, [sp, #0]
 800ee24:	4622      	mov	r2, r4
 800ee26:	f002 f8db 	bl	8010fe0 <HAL_MDMA_Start_IT>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d037      	beq.n	800eea0 <HAL_JPEG_Resume+0x1cc>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee34:	f043 0204 	orr.w	r2, r3, #4
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2206      	movs	r2, #6
 800ee40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800ee44:	2301      	movs	r3, #1
 800ee46:	e02c      	b.n	800eea2 <HAL_JPEG_Resume+0x1ce>
      }

    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee4c:	f003 030c 	and.w	r3, r3, #12
 800ee50:	2b08      	cmp	r3, #8
 800ee52:	d125      	bne.n	800eea0 <HAL_JPEG_Resume+0x1cc>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	f003 0301 	and.w	r3, r3, #1
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d009      	beq.n	800ee72 <HAL_JPEG_Resume+0x19e>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f043 0306 	orr.w	r3, r3, #6
 800ee70:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	f003 0302 	and.w	r3, r3, #2
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d009      	beq.n	800ee90 <HAL_JPEG_Resume+0x1bc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800ee8e:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	430a      	orrs	r2, r1
 800ee9e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd90      	pop	{r4, r7, pc}

0800eeaa <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 800eeaa:	b480      	push	{r7}
 800eeac:	b085      	sub	sp, #20
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	60f8      	str	r0, [r7, #12]
 800eeb2:	60b9      	str	r1, [r7, #8]
 800eeb4:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	68ba      	ldr	r2, [r7, #8]
 800eeba:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	629a      	str	r2, [r3, #40]	; 0x28
}
 800eec2:	bf00      	nop
 800eec4:	3714      	adds	r7, #20
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr

0800eece <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800eece:	b480      	push	{r7}
 800eed0:	b085      	sub	sp, #20
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	60f8      	str	r0, [r7, #12]
 800eed6:	60b9      	str	r1, [r7, #8]
 800eed8:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800eee6:	bf00      	nop
 800eee8:	3714      	adds	r7, #20
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800eef2:	b480      	push	{r7}
 800eef4:	b083      	sub	sp, #12
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800eefa:	bf00      	nop
 800eefc:	370c      	adds	r7, #12
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr

0800ef06 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b082      	sub	sp, #8
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	3b03      	subs	r3, #3
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d813      	bhi.n	800ef44 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef20:	f003 030c 	and.w	r3, r3, #12
 800ef24:	2b08      	cmp	r3, #8
 800ef26:	d103      	bne.n	800ef30 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 fdc9 	bl	800fac0 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800ef2e:	e00b      	b.n	800ef48 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef34:	f003 030c 	and.w	r3, r3, #12
 800ef38:	2b0c      	cmp	r3, #12
 800ef3a:	d105      	bne.n	800ef48 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f001 f909 	bl	8010154 <JPEG_DMA_ContinueProcess>
      break;
 800ef42:	e001      	b.n	800ef48 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800ef44:	bf00      	nop
 800ef46:	e000      	b.n	800ef4a <HAL_JPEG_IRQHandler+0x44>
      break;
 800ef48:	bf00      	nop
  }
}
 800ef4a:	bf00      	nop
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800ef52:	b480      	push	{r7}
 800ef54:	b08b      	sub	sp, #44	; 0x2c
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	60f8      	str	r0, [r7, #12]
 800ef5a:	60b9      	str	r1, [r7, #8]
 800ef5c:	607a      	str	r2, [r7, #4]
 800ef5e:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800ef60:	2300      	movs	r3, #0
 800ef62:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800ef64:	2300      	movs	r3, #0
 800ef66:	61fb      	str	r3, [r7, #28]
 800ef68:	e020      	b.n	800efac <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	69fb      	ldr	r3, [r7, #28]
 800ef6e:	4413      	add	r3, r2
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800ef74:	6a3a      	ldr	r2, [r7, #32]
 800ef76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef78:	4413      	add	r3, r2
 800ef7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef7e:	d90f      	bls.n	800efa0 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800ef80:	2301      	movs	r3, #1
 800ef82:	e055      	b.n	800f030 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	b2da      	uxtb	r2, r3
 800ef88:	68b9      	ldr	r1, [r7, #8]
 800ef8a:	6a3b      	ldr	r3, [r7, #32]
 800ef8c:	440b      	add	r3, r1
 800ef8e:	3201      	adds	r2, #1
 800ef90:	b2d2      	uxtb	r2, r2
 800ef92:	701a      	strb	r2, [r3, #0]
      p++;
 800ef94:	6a3b      	ldr	r3, [r7, #32]
 800ef96:	3301      	adds	r3, #1
 800ef98:	623b      	str	r3, [r7, #32]
      i--;
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9c:	3b01      	subs	r3, #1
 800ef9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1ee      	bne.n	800ef84 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	3301      	adds	r3, #1
 800efaa:	61fb      	str	r3, [r7, #28]
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	2b0f      	cmp	r3, #15
 800efb0:	d9db      	bls.n	800ef6a <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800efb2:	68ba      	ldr	r2, [r7, #8]
 800efb4:	6a3b      	ldr	r3, [r7, #32]
 800efb6:	4413      	add	r3, r2
 800efb8:	2200      	movs	r2, #0
 800efba:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	6a3a      	ldr	r2, [r7, #32]
 800efc0:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800efc2:	2300      	movs	r3, #0
 800efc4:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	617b      	str	r3, [r7, #20]
  p = 0;
 800efcc:	2300      	movs	r3, #0
 800efce:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800efd0:	e027      	b.n	800f022 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800efd2:	6a3b      	ldr	r3, [r7, #32]
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	4413      	add	r3, r2
 800efda:	69ba      	ldr	r2, [r7, #24]
 800efdc:	601a      	str	r2, [r3, #0]
      p++;
 800efde:	6a3b      	ldr	r3, [r7, #32]
 800efe0:	3301      	adds	r3, #1
 800efe2:	623b      	str	r3, [r7, #32]
      code++;
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	3301      	adds	r3, #1
 800efe8:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	6a3b      	ldr	r3, [r7, #32]
 800efee:	4413      	add	r3, r2
 800eff0:	781b      	ldrb	r3, [r3, #0]
 800eff2:	461a      	mov	r2, r3
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d0eb      	beq.n	800efd2 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	2b1f      	cmp	r3, #31
 800effe:	d901      	bls.n	800f004 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800f000:	2301      	movs	r3, #1
 800f002:	e015      	b.n	800f030 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800f004:	2201      	movs	r2, #1
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	fa02 f303 	lsl.w	r3, r2, r3
 800f00c:	69ba      	ldr	r2, [r7, #24]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d301      	bcc.n	800f016 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800f012:	2301      	movs	r3, #1
 800f014:	e00c      	b.n	800f030 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	61bb      	str	r3, [r7, #24]
    si++;
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	3301      	adds	r3, #1
 800f020:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	4413      	add	r3, r2
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1dd      	bne.n	800efea <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800f02e:	2300      	movs	r3, #0
}
 800f030:	4618      	mov	r0, r3
 800f032:	372c      	adds	r7, #44	; 0x2c
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800f042:	af00      	add	r7, sp, #0
 800f044:	1d3b      	adds	r3, r7, #4
 800f046:	6018      	str	r0, [r3, #0]
 800f048:	463b      	mov	r3, r7
 800f04a:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800f04c:	1d3b      	adds	r3, r7, #4
 800f04e:	6818      	ldr	r0, [r3, #0]
 800f050:	f107 0308 	add.w	r3, r7, #8
 800f054:	f107 020c 	add.w	r2, r7, #12
 800f058:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800f05c:	f7ff ff79 	bl	800ef52 <JPEG_Bits_To_SizeCodes>
 800f060:	4603      	mov	r3, r0
 800f062:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 800f066:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d002      	beq.n	800f074 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 800f06e:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800f072:	e066      	b.n	800f142 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800f074:	2300      	movs	r3, #0
 800f076:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 800f07a:	e05a      	b.n	800f132 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800f07c:	1d3b      	adds	r3, r7, #4
 800f07e:	681a      	ldr	r2, [r3, #0]
 800f080:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800f084:	4413      	add	r3, r2
 800f086:	3310      	adds	r3, #16
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 800f08e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f092:	2b00      	cmp	r3, #0
 800f094:	d103      	bne.n	800f09e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 800f096:	23a0      	movs	r3, #160	; 0xa0
 800f098:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800f09c:	e021      	b.n	800f0e2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800f09e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f0a2:	2bf0      	cmp	r3, #240	; 0xf0
 800f0a4:	d103      	bne.n	800f0ae <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 800f0a6:	23a1      	movs	r3, #161	; 0xa1
 800f0a8:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800f0ac:	e019      	b.n	800f0e2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800f0ae:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f0b2:	091b      	lsrs	r3, r3, #4
 800f0b4:	f003 030f 	and.w	r3, r3, #15
 800f0b8:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 800f0bc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f0c0:	f003 030f 	and.w	r3, r3, #15
 800f0c4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800f0c8:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	009b      	lsls	r3, r3, #2
 800f0d0:	4413      	add	r3, r2
 800f0d2:	005b      	lsls	r3, r3, #1
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f0da:	4413      	add	r3, r2
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800f0e2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f0e6:	2ba1      	cmp	r3, #161	; 0xa1
 800f0e8:	d901      	bls.n	800f0ee <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	e029      	b.n	800f142 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800f0ee:	f107 030c 	add.w	r3, r7, #12
 800f0f2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800f0f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f0fa:	463b      	mov	r3, r7
 800f0fc:	6819      	ldr	r1, [r3, #0]
 800f0fe:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f102:	3328      	adds	r3, #40	; 0x28
 800f104:	009b      	lsls	r3, r3, #2
 800f106:	440b      	add	r3, r1
 800f108:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800f10a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800f10e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800f112:	4413      	add	r3, r2
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	3b01      	subs	r3, #1
 800f118:	b2d9      	uxtb	r1, r3
 800f11a:	463b      	mov	r3, r7
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f122:	4413      	add	r3, r2
 800f124:	460a      	mov	r2, r1
 800f126:	701a      	strb	r2, [r3, #0]
      k++;
 800f128:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800f12c:	3301      	adds	r3, #1
 800f12e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 800f132:	f107 0308 	add.w	r3, r7, #8
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d39d      	bcc.n	800f07c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800f152:	af00      	add	r7, sp, #0
 800f154:	1d3b      	adds	r3, r7, #4
 800f156:	6018      	str	r0, [r3, #0]
 800f158:	463b      	mov	r3, r7
 800f15a:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800f15c:	1d3b      	adds	r3, r7, #4
 800f15e:	6818      	ldr	r0, [r3, #0]
 800f160:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800f164:	f107 0208 	add.w	r2, r7, #8
 800f168:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 800f16c:	f7ff fef1 	bl	800ef52 <JPEG_Bits_To_SizeCodes>
 800f170:	4603      	mov	r3, r0
 800f172:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 800f176:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d002      	beq.n	800f184 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 800f17e:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800f182:	e03b      	b.n	800f1fc <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800f184:	2300      	movs	r3, #0
 800f186:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 800f18a:	e030      	b.n	800f1ee <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800f18c:	1d3b      	adds	r3, r7, #4
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800f194:	4413      	add	r3, r2
 800f196:	3310      	adds	r3, #16
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800f19e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f1a2:	2b0b      	cmp	r3, #11
 800f1a4:	d901      	bls.n	800f1aa <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e028      	b.n	800f1fc <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800f1aa:	f107 0308 	add.w	r3, r7, #8
 800f1ae:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800f1b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f1b6:	463b      	mov	r3, r7
 800f1b8:	6819      	ldr	r1, [r3, #0]
 800f1ba:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f1be:	3302      	adds	r3, #2
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	440b      	add	r3, r1
 800f1c4:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800f1c6:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 800f1ca:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800f1ce:	4413      	add	r3, r2
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	3b01      	subs	r3, #1
 800f1d4:	b2d9      	uxtb	r1, r3
 800f1d6:	463b      	mov	r3, r7
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f1de:	4413      	add	r3, r2
 800f1e0:	460a      	mov	r2, r1
 800f1e2:	701a      	strb	r2, [r3, #0]
      k++;
 800f1e4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 800f1ee:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800f1f2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d3c8      	bcc.n	800f18c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b09a      	sub	sp, #104	; 0x68
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	60f8      	str	r0, [r7, #12]
 800f20e:	60b9      	str	r1, [r7, #8]
 800f210:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d106      	bne.n	800f22e <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800f228:	3318      	adds	r3, #24
 800f22a:	663b      	str	r3, [r7, #96]	; 0x60
 800f22c:	e00f      	b.n	800f24e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d106      	bne.n	800f24a <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800f244:	3318      	adds	r3, #24
 800f246:	663b      	str	r3, [r7, #96]	; 0x60
 800f248:	e001      	b.n	800f24e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800f24a:	2301      	movs	r3, #1
 800f24c:	e05b      	b.n	800f306 <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d057      	beq.n	800f304 <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800f254:	f107 0314 	add.w	r3, r7, #20
 800f258:	4619      	mov	r1, r3
 800f25a:	68b8      	ldr	r0, [r7, #8]
 800f25c:	f7ff ff76 	bl	800f14c <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800f260:	4603      	mov	r3, r0
 800f262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 800f266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d002      	beq.n	800f274 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800f26e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f272:	e048      	b.n	800f306 <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 800f274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f276:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800f278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f27a:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800f27e:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f282:	3304      	adds	r3, #4
 800f284:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800f286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f288:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800f28c:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800f28e:	230c      	movs	r3, #12
 800f290:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 800f292:	e034      	b.n	800f2fe <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 800f294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f296:	3b01      	subs	r3, #1
 800f298:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 800f29a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f29c:	3b04      	subs	r3, #4
 800f29e:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800f2a0:	f107 0214 	add.w	r2, r7, #20
 800f2a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2a6:	4413      	add	r3, r2
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	021b      	lsls	r3, r3, #8
 800f2ac:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f2b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2b2:	3302      	adds	r3, #2
 800f2b4:	009b      	lsls	r3, r3, #2
 800f2b6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800f2ba:	440b      	add	r3, r1
 800f2bc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 800f2c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800f2cc:	f107 0214 	add.w	r2, r7, #20
 800f2d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2d2:	4413      	add	r3, r2
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	021b      	lsls	r3, r3, #8
 800f2d8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f2dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2de:	3302      	adds	r3, #2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800f2e6:	440b      	add	r3, r1
 800f2e8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	4313      	orrs	r3, r2
 800f2f0:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800f2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2f4:	041a      	lsls	r2, r3, #16
 800f2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2f8:	431a      	orrs	r2, r3
 800f2fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f2fc:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800f2fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f300:	2b01      	cmp	r3, #1
 800f302:	d8c7      	bhi.n	800f294 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f304:	2300      	movs	r3, #0
}
 800f306:	4618      	mov	r0, r3
 800f308:	3768      	adds	r7, #104	; 0x68
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
	...

0800f310 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800f316:	af00      	add	r7, sp, #0
 800f318:	f107 030c 	add.w	r3, r7, #12
 800f31c:	6018      	str	r0, [r3, #0]
 800f31e:	f107 0308 	add.w	r3, r7, #8
 800f322:	6019      	str	r1, [r3, #0]
 800f324:	1d3b      	adds	r3, r7, #4
 800f326:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800f328:	f107 030c 	add.w	r3, r7, #12
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f334:	1d3a      	adds	r2, r7, #4
 800f336:	6812      	ldr	r2, [r2, #0]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d10a      	bne.n	800f352 <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800f33c:	f107 030c 	add.w	r3, r7, #12
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f348:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f34c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800f350:	e016      	b.n	800f380 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800f352:	f107 030c 	add.w	r3, r7, #12
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800f35e:	1d3a      	adds	r2, r7, #4
 800f360:	6812      	ldr	r2, [r2, #0]
 800f362:	429a      	cmp	r2, r3
 800f364:	d10a      	bne.n	800f37c <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800f366:	f107 030c 	add.w	r3, r7, #12
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800f372:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f376:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800f37a:	e001      	b.n	800f380 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 800f37c:	2301      	movs	r3, #1
 800f37e:	e09c      	b.n	800f4ba <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 800f380:	f107 0308 	add.w	r3, r7, #8
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	f000 8096 	beq.w	800f4b8 <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800f38c:	f107 0214 	add.w	r2, r7, #20
 800f390:	f107 0308 	add.w	r3, r7, #8
 800f394:	4611      	mov	r1, r2
 800f396:	6818      	ldr	r0, [r3, #0]
 800f398:	f7ff fe50 	bl	800f03c <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800f39c:	4603      	mov	r3, r0
 800f39e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 800f3a2:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d002      	beq.n	800f3b0 <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 800f3aa:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800f3ae:	e084      	b.n	800f4ba <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800f3b0:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800f3b4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800f3be:	e00e      	b.n	800f3de <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 800f3c0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f3c4:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800f3c8:	601a      	str	r2, [r3, #0]
      addressDef++;
 800f3ca:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f3ce:	3304      	adds	r3, #4
 800f3d0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800f3d4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f3d8:	3301      	adds	r3, #1
 800f3da:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800f3de:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	d9ec      	bls.n	800f3c0 <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 800f3e6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f3ea:	4a36      	ldr	r2, [pc, #216]	; (800f4c4 <JPEG_Set_HuffAC_Mem+0x1b4>)
 800f3ec:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f3ee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f3f2:	3304      	adds	r3, #4
 800f3f4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 800f3f8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f3fc:	4a32      	ldr	r2, [pc, #200]	; (800f4c8 <JPEG_Set_HuffAC_Mem+0x1b8>)
 800f3fe:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f400:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f404:	3304      	adds	r3, #4
 800f406:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 800f40a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f40e:	4a2f      	ldr	r2, [pc, #188]	; (800f4cc <JPEG_Set_HuffAC_Mem+0x1bc>)
 800f410:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f412:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f416:	3304      	adds	r3, #4
 800f418:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 800f41c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f420:	4a2b      	ldr	r2, [pc, #172]	; (800f4d0 <JPEG_Set_HuffAC_Mem+0x1c0>)
 800f422:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800f424:	23a2      	movs	r3, #162	; 0xa2
 800f426:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 800f42a:	e041      	b.n	800f4b0 <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 800f42c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f430:	3b01      	subs	r3, #1
 800f432:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 800f436:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800f43a:	3b04      	subs	r3, #4
 800f43c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800f440:	f107 0214 	add.w	r2, r7, #20
 800f444:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f448:	4413      	add	r3, r2
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	021b      	lsls	r3, r3, #8
 800f44e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f452:	f107 0114 	add.w	r1, r7, #20
 800f456:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f45a:	3328      	adds	r3, #40	; 0x28
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	440b      	add	r3, r1
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	b2db      	uxtb	r3, r3
 800f464:	4313      	orrs	r3, r2
 800f466:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 800f46a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f46e:	3b01      	subs	r3, #1
 800f470:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800f474:	f107 0214 	add.w	r2, r7, #20
 800f478:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f47c:	4413      	add	r3, r2
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	021b      	lsls	r3, r3, #8
 800f482:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f486:	f107 0114 	add.w	r1, r7, #20
 800f48a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f48e:	3328      	adds	r3, #40	; 0x28
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	440b      	add	r3, r1
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	b2db      	uxtb	r3, r3
 800f498:	4313      	orrs	r3, r2
 800f49a:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800f49e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800f4a2:	041a      	lsls	r2, r3, #16
 800f4a4:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800f4a8:	431a      	orrs	r2, r3
 800f4aa:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800f4ae:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800f4b0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d8b9      	bhi.n	800f42c <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f4b8:	2300      	movs	r3, #0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	0fd10fd0 	.word	0x0fd10fd0
 800f4c8:	0fd30fd2 	.word	0x0fd30fd2
 800f4cc:	0fd50fd4 	.word	0x0fd50fd4
 800f4d0:	0fd70fd6 	.word	0x0fd70fd6

0800f4d4 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 f84d 	bl	800f57c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	491f      	ldr	r1, [pc, #124]	; (800f56c <JPEG_Set_HuffEnc_Mem+0x98>)
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f7ff ff0e 	bl	800f310 <JPEG_Set_HuffAC_Mem>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f4f8:	7bfb      	ldrb	r3, [r7, #15]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d001      	beq.n	800f502 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800f4fe:	7bfb      	ldrb	r3, [r7, #15]
 800f500:	e030      	b.n	800f564 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800f50a:	461a      	mov	r2, r3
 800f50c:	4918      	ldr	r1, [pc, #96]	; (800f570 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7ff fefe 	bl	800f310 <JPEG_Set_HuffAC_Mem>
 800f514:	4603      	mov	r3, r0
 800f516:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d001      	beq.n	800f522 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800f51e:	7bfb      	ldrb	r3, [r7, #15]
 800f520:	e020      	b.n	800f564 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800f52a:	461a      	mov	r2, r3
 800f52c:	4911      	ldr	r1, [pc, #68]	; (800f574 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7ff fe69 	bl	800f206 <JPEG_Set_HuffDC_Mem>
 800f534:	4603      	mov	r3, r0
 800f536:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f538:	7bfb      	ldrb	r3, [r7, #15]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800f53e:	7bfb      	ldrb	r3, [r7, #15]
 800f540:	e010      	b.n	800f564 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800f54a:	461a      	mov	r2, r3
 800f54c:	490a      	ldr	r1, [pc, #40]	; (800f578 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f7ff fe59 	bl	800f206 <JPEG_Set_HuffDC_Mem>
 800f554:	4603      	mov	r3, r0
 800f556:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d001      	beq.n	800f562 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800f55e:	7bfb      	ldrb	r3, [r7, #15]
 800f560:	e000      	b.n	800f564 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800f562:	2300      	movs	r3, #0
}
 800f564:	4618      	mov	r0, r3
 800f566:	3710      	adds	r7, #16
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	0802bb8c 	.word	0x0802bb8c
 800f570:	0802bc40 	.word	0x0802bc40
 800f574:	0802bb54 	.word	0x0802bb54
 800f578:	0802bb70 	.word	0x0802bb70

0800f57c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b08b      	sub	sp, #44	; 0x2c
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800f584:	4b80      	ldr	r3, [pc, #512]	; (800f788 <JPEG_Set_Huff_DHTMem+0x20c>)
 800f586:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800f588:	4b80      	ldr	r3, [pc, #512]	; (800f78c <JPEG_Set_Huff_DHTMem+0x210>)
 800f58a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800f58c:	4b80      	ldr	r3, [pc, #512]	; (800f790 <JPEG_Set_Huff_DHTMem+0x214>)
 800f58e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800f590:	4b80      	ldr	r3, [pc, #512]	; (800f794 <JPEG_Set_Huff_DHTMem+0x218>)
 800f592:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f59c:	330c      	adds	r3, #12
 800f59e:	623b      	str	r3, [r7, #32]
  index = 16;
 800f5a0:	2310      	movs	r3, #16
 800f5a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f5a4:	e01d      	b.n	800f5e2 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	697a      	ldr	r2, [r7, #20]
 800f5ac:	5cd3      	ldrb	r3, [r2, r3]
 800f5ae:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	3b02      	subs	r3, #2
 800f5b4:	6979      	ldr	r1, [r7, #20]
 800f5b6:	5ccb      	ldrb	r3, [r1, r3]
 800f5b8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f5ba:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5be:	3b03      	subs	r3, #3
 800f5c0:	6979      	ldr	r1, [r7, #20]
 800f5c2:	5ccb      	ldrb	r3, [r1, r3]
 800f5c4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800f5c6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800f5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5ca:	3a04      	subs	r2, #4
 800f5cc:	6979      	ldr	r1, [r7, #20]
 800f5ce:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800f5d0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f5d2:	6a3b      	ldr	r3, [r7, #32]
 800f5d4:	601a      	str	r2, [r3, #0]
    address--;
 800f5d6:	6a3b      	ldr	r3, [r7, #32]
 800f5d8:	3b04      	subs	r3, #4
 800f5da:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5de:	3b04      	subs	r3, #4
 800f5e0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e4:	2b03      	cmp	r3, #3
 800f5e6:	d8de      	bhi.n	800f5a6 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f5f0:	3318      	adds	r3, #24
 800f5f2:	623b      	str	r3, [r7, #32]
  index = 12;
 800f5f4:	230c      	movs	r3, #12
 800f5f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f5f8:	e021      	b.n	800f63e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	697a      	ldr	r2, [r7, #20]
 800f600:	4413      	add	r3, r2
 800f602:	7c1b      	ldrb	r3, [r3, #16]
 800f604:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800f606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f608:	3b02      	subs	r3, #2
 800f60a:	6979      	ldr	r1, [r7, #20]
 800f60c:	440b      	add	r3, r1
 800f60e:	7c1b      	ldrb	r3, [r3, #16]
 800f610:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f612:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800f614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f616:	3b03      	subs	r3, #3
 800f618:	6979      	ldr	r1, [r7, #20]
 800f61a:	440b      	add	r3, r1
 800f61c:	7c1b      	ldrb	r3, [r3, #16]
 800f61e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800f620:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800f622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f624:	3a04      	subs	r2, #4
 800f626:	6979      	ldr	r1, [r7, #20]
 800f628:	440a      	add	r2, r1
 800f62a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800f62c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f62e:	6a3b      	ldr	r3, [r7, #32]
 800f630:	601a      	str	r2, [r3, #0]
    address--;
 800f632:	6a3b      	ldr	r3, [r7, #32]
 800f634:	3b04      	subs	r3, #4
 800f636:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63a:	3b04      	subs	r3, #4
 800f63c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	2b03      	cmp	r3, #3
 800f642:	d8da      	bhi.n	800f5fa <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f64c:	3328      	adds	r3, #40	; 0x28
 800f64e:	623b      	str	r3, [r7, #32]
  index = 16;
 800f650:	2310      	movs	r3, #16
 800f652:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f654:	e01d      	b.n	800f692 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f658:	3b01      	subs	r3, #1
 800f65a:	69fa      	ldr	r2, [r7, #28]
 800f65c:	5cd3      	ldrb	r3, [r2, r3]
 800f65e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f662:	3b02      	subs	r3, #2
 800f664:	69f9      	ldr	r1, [r7, #28]
 800f666:	5ccb      	ldrb	r3, [r1, r3]
 800f668:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f66a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800f66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66e:	3b03      	subs	r3, #3
 800f670:	69f9      	ldr	r1, [r7, #28]
 800f672:	5ccb      	ldrb	r3, [r1, r3]
 800f674:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800f676:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800f678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f67a:	3a04      	subs	r2, #4
 800f67c:	69f9      	ldr	r1, [r7, #28]
 800f67e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800f680:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f682:	6a3b      	ldr	r3, [r7, #32]
 800f684:	601a      	str	r2, [r3, #0]
    address--;
 800f686:	6a3b      	ldr	r3, [r7, #32]
 800f688:	3b04      	subs	r3, #4
 800f68a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68e:	3b04      	subs	r3, #4
 800f690:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f694:	2b03      	cmp	r3, #3
 800f696:	d8de      	bhi.n	800f656 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f6a0:	33cc      	adds	r3, #204	; 0xcc
 800f6a2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800f6a4:	6a3b      	ldr	r3, [r7, #32]
 800f6a6:	681a      	ldr	r2, [r3, #0]
 800f6a8:	4b3b      	ldr	r3, [pc, #236]	; (800f798 <JPEG_Set_Huff_DHTMem+0x21c>)
 800f6aa:	4013      	ands	r3, r2
 800f6ac:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f6b4:	021a      	lsls	r2, r3, #8
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	69fa      	ldr	r2, [r7, #28]
 800f6bc:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f6c4:	6a3b      	ldr	r3, [r7, #32]
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800f6ca:	6a3b      	ldr	r3, [r7, #32]
 800f6cc:	3b04      	subs	r3, #4
 800f6ce:	623b      	str	r3, [r7, #32]
  index = 160;
 800f6d0:	23a0      	movs	r3, #160	; 0xa0
 800f6d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f6d4:	e021      	b.n	800f71a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	69fa      	ldr	r2, [r7, #28]
 800f6dc:	4413      	add	r3, r2
 800f6de:	7c1b      	ldrb	r3, [r3, #16]
 800f6e0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800f6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e4:	3b02      	subs	r3, #2
 800f6e6:	69f9      	ldr	r1, [r7, #28]
 800f6e8:	440b      	add	r3, r1
 800f6ea:	7c1b      	ldrb	r3, [r3, #16]
 800f6ec:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f6ee:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800f6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f2:	3b03      	subs	r3, #3
 800f6f4:	69f9      	ldr	r1, [r7, #28]
 800f6f6:	440b      	add	r3, r1
 800f6f8:	7c1b      	ldrb	r3, [r3, #16]
 800f6fa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800f6fc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800f6fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f700:	3a04      	subs	r2, #4
 800f702:	69f9      	ldr	r1, [r7, #28]
 800f704:	440a      	add	r2, r1
 800f706:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800f708:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f70a:	6a3b      	ldr	r3, [r7, #32]
 800f70c:	601a      	str	r2, [r3, #0]
    address--;
 800f70e:	6a3b      	ldr	r3, [r7, #32]
 800f710:	3b04      	subs	r3, #4
 800f712:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f716:	3b04      	subs	r3, #4
 800f718:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71c:	2b03      	cmp	r3, #3
 800f71e:	d8da      	bhi.n	800f6d6 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f728:	33cc      	adds	r3, #204	; 0xcc
 800f72a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800f72c:	6a3b      	ldr	r3, [r7, #32]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	b29b      	uxth	r3, r3
 800f732:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	785b      	ldrb	r3, [r3, #1]
 800f738:	061a      	lsls	r2, r3, #24
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	431a      	orrs	r2, r3
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	041b      	lsls	r3, r3, #16
 800f744:	4313      	orrs	r3, r2
 800f746:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f748:	6a3b      	ldr	r3, [r7, #32]
 800f74a:	68fa      	ldr	r2, [r7, #12]
 800f74c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f756:	33dc      	adds	r3, #220	; 0xdc
 800f758:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800f75a:	6a3b      	ldr	r3, [r7, #32]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	4b0e      	ldr	r3, [pc, #56]	; (800f798 <JPEG_Set_Huff_DHTMem+0x21c>)
 800f760:	4013      	ands	r3, r2
 800f762:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	7bdb      	ldrb	r3, [r3, #15]
 800f768:	021a      	lsls	r2, r3, #8
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	693a      	ldr	r2, [r7, #16]
 800f770:	7b92      	ldrb	r2, [r2, #14]
 800f772:	4313      	orrs	r3, r2
 800f774:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f776:	6a3b      	ldr	r3, [r7, #32]
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800f77c:	6a3b      	ldr	r3, [r7, #32]
 800f77e:	3b04      	subs	r3, #4
 800f780:	623b      	str	r3, [r7, #32]
  index = 12;
 800f782:	230c      	movs	r3, #12
 800f784:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f786:	e027      	b.n	800f7d8 <JPEG_Set_Huff_DHTMem+0x25c>
 800f788:	0802bb8c 	.word	0x0802bb8c
 800f78c:	0802bc40 	.word	0x0802bc40
 800f790:	0802bb54 	.word	0x0802bb54
 800f794:	0802bb70 	.word	0x0802bb70
 800f798:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79e:	3301      	adds	r3, #1
 800f7a0:	693a      	ldr	r2, [r7, #16]
 800f7a2:	5cd3      	ldrb	r3, [r2, r3]
 800f7a4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800f7a6:	6939      	ldr	r1, [r7, #16]
 800f7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7aa:	440b      	add	r3, r1
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f7b0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	6939      	ldr	r1, [r7, #16]
 800f7b8:	5ccb      	ldrb	r3, [r1, r3]
 800f7ba:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800f7bc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800f7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7c0:	3a02      	subs	r2, #2
 800f7c2:	6939      	ldr	r1, [r7, #16]
 800f7c4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800f7c6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f7c8:	6a3b      	ldr	r3, [r7, #32]
 800f7ca:	601a      	str	r2, [r3, #0]
    address--;
 800f7cc:	6a3b      	ldr	r3, [r7, #32]
 800f7ce:	3b04      	subs	r3, #4
 800f7d0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d4:	3b04      	subs	r3, #4
 800f7d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7da:	2b03      	cmp	r3, #3
 800f7dc:	d8de      	bhi.n	800f79c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f7e6:	33dc      	adds	r3, #220	; 0xdc
 800f7e8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	7c5b      	ldrb	r3, [r3, #17]
 800f7f6:	061a      	lsls	r2, r3, #24
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	431a      	orrs	r2, r3
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	7c1b      	ldrb	r3, [r3, #16]
 800f800:	041b      	lsls	r3, r3, #16
 800f802:	4313      	orrs	r3, r2
 800f804:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800f806:	6a3b      	ldr	r3, [r7, #32]
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f814:	33e8      	adds	r3, #232	; 0xe8
 800f816:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800f818:	6a3b      	ldr	r3, [r7, #32]
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	4b6d      	ldr	r3, [pc, #436]	; (800f9d4 <JPEG_Set_Huff_DHTMem+0x458>)
 800f81e:	4013      	ands	r3, r2
 800f820:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	7edb      	ldrb	r3, [r3, #27]
 800f826:	021a      	lsls	r2, r3, #8
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	4313      	orrs	r3, r2
 800f82c:	693a      	ldr	r2, [r7, #16]
 800f82e:	7e92      	ldrb	r2, [r2, #26]
 800f830:	4313      	orrs	r3, r2
 800f832:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f834:	6a3b      	ldr	r3, [r7, #32]
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800f83a:	6a3b      	ldr	r3, [r7, #32]
 800f83c:	3b04      	subs	r3, #4
 800f83e:	623b      	str	r3, [r7, #32]
  index = 8;
 800f840:	2308      	movs	r3, #8
 800f842:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f844:	e021      	b.n	800f88a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f848:	3301      	adds	r3, #1
 800f84a:	693a      	ldr	r2, [r7, #16]
 800f84c:	4413      	add	r3, r2
 800f84e:	7c1b      	ldrb	r3, [r3, #16]
 800f850:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800f852:	6939      	ldr	r1, [r7, #16]
 800f854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f856:	440b      	add	r3, r1
 800f858:	3310      	adds	r3, #16
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f85e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800f860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f862:	3b01      	subs	r3, #1
 800f864:	6939      	ldr	r1, [r7, #16]
 800f866:	440b      	add	r3, r1
 800f868:	7c1b      	ldrb	r3, [r3, #16]
 800f86a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800f86c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800f86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f870:	3a02      	subs	r2, #2
 800f872:	6939      	ldr	r1, [r7, #16]
 800f874:	440a      	add	r2, r1
 800f876:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800f878:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f87a:	6a3b      	ldr	r3, [r7, #32]
 800f87c:	601a      	str	r2, [r3, #0]
    address--;
 800f87e:	6a3b      	ldr	r3, [r7, #32]
 800f880:	3b04      	subs	r3, #4
 800f882:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f886:	3b04      	subs	r3, #4
 800f888:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	2b03      	cmp	r3, #3
 800f88e:	d8da      	bhi.n	800f846 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f898:	33e8      	adds	r3, #232	; 0xe8
 800f89a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800f89c:	6a3b      	ldr	r3, [r7, #32]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800f8a4:	69bb      	ldr	r3, [r7, #24]
 800f8a6:	785b      	ldrb	r3, [r3, #1]
 800f8a8:	061a      	lsls	r2, r3, #24
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	431a      	orrs	r2, r3
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	041b      	lsls	r3, r3, #16
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f8b8:	6a3b      	ldr	r3, [r7, #32]
 800f8ba:	68fa      	ldr	r2, [r7, #12]
 800f8bc:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f8c6:	33f8      	adds	r3, #248	; 0xf8
 800f8c8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800f8ca:	6a3b      	ldr	r3, [r7, #32]
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	4b41      	ldr	r3, [pc, #260]	; (800f9d4 <JPEG_Set_Huff_DHTMem+0x458>)
 800f8d0:	4013      	ands	r3, r2
 800f8d2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	7bdb      	ldrb	r3, [r3, #15]
 800f8d8:	021a      	lsls	r2, r3, #8
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	69ba      	ldr	r2, [r7, #24]
 800f8e0:	7b92      	ldrb	r2, [r2, #14]
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f8e6:	6a3b      	ldr	r3, [r7, #32]
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800f8ec:	6a3b      	ldr	r3, [r7, #32]
 800f8ee:	3b04      	subs	r3, #4
 800f8f0:	623b      	str	r3, [r7, #32]
  index = 12;
 800f8f2:	230c      	movs	r3, #12
 800f8f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f8f6:	e01d      	b.n	800f934 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	69ba      	ldr	r2, [r7, #24]
 800f8fe:	5cd3      	ldrb	r3, [r2, r3]
 800f900:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800f902:	69b9      	ldr	r1, [r7, #24]
 800f904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f906:	440b      	add	r3, r1
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f90c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800f90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f910:	3b01      	subs	r3, #1
 800f912:	69b9      	ldr	r1, [r7, #24]
 800f914:	5ccb      	ldrb	r3, [r1, r3]
 800f916:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800f918:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800f91a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f91c:	3a02      	subs	r2, #2
 800f91e:	69b9      	ldr	r1, [r7, #24]
 800f920:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800f922:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f924:	6a3b      	ldr	r3, [r7, #32]
 800f926:	601a      	str	r2, [r3, #0]
    address--;
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	3b04      	subs	r3, #4
 800f92c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f930:	3b04      	subs	r3, #4
 800f932:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f936:	2b03      	cmp	r3, #3
 800f938:	d8de      	bhi.n	800f8f8 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f942:	33f8      	adds	r3, #248	; 0xf8
 800f944:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800f946:	6a3b      	ldr	r3, [r7, #32]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	7c5b      	ldrb	r3, [r3, #17]
 800f952:	061a      	lsls	r2, r3, #24
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	431a      	orrs	r2, r3
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	7c1b      	ldrb	r3, [r3, #16]
 800f95c:	041b      	lsls	r3, r3, #16
 800f95e:	4313      	orrs	r3, r2
 800f960:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800f962:	6a3b      	ldr	r3, [r7, #32]
 800f964:	68fa      	ldr	r2, [r7, #12]
 800f966:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f970:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800f974:	623b      	str	r3, [r7, #32]
  index = 160;
 800f976:	23a0      	movs	r3, #160	; 0xa0
 800f978:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f97a:	e021      	b.n	800f9c0 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97e:	3301      	adds	r3, #1
 800f980:	69ba      	ldr	r2, [r7, #24]
 800f982:	4413      	add	r3, r2
 800f984:	7c1b      	ldrb	r3, [r3, #16]
 800f986:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800f988:	69b9      	ldr	r1, [r7, #24]
 800f98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98c:	440b      	add	r3, r1
 800f98e:	3310      	adds	r3, #16
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f994:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800f996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f998:	3b01      	subs	r3, #1
 800f99a:	69b9      	ldr	r1, [r7, #24]
 800f99c:	440b      	add	r3, r1
 800f99e:	7c1b      	ldrb	r3, [r3, #16]
 800f9a0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800f9a2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800f9a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9a6:	3a02      	subs	r2, #2
 800f9a8:	69b9      	ldr	r1, [r7, #24]
 800f9aa:	440a      	add	r2, r1
 800f9ac:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800f9ae:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f9b0:	6a3b      	ldr	r3, [r7, #32]
 800f9b2:	601a      	str	r2, [r3, #0]
    address--;
 800f9b4:	6a3b      	ldr	r3, [r7, #32]
 800f9b6:	3b04      	subs	r3, #4
 800f9b8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9bc:	3b04      	subs	r3, #4
 800f9be:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c2:	2b03      	cmp	r3, #3
 800f9c4:	d8da      	bhi.n	800f97c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800f9c6:	bf00      	nop
 800f9c8:	bf00      	nop
 800f9ca:	372c      	adds	r7, #44	; 0x2c
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr
 800f9d4:	ffff0000 	.word	0xffff0000

0800f9d8 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9f0:	f003 0303 	and.w	r3, r3, #3
 800f9f4:	2b02      	cmp	r3, #2
 800f9f6:	d108      	bne.n	800fa0a <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	685a      	ldr	r2, [r3, #4]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f042 0208 	orr.w	r2, r2, #8
 800fa06:	605a      	str	r2, [r3, #4]
 800fa08:	e007      	b.n	800fa1a <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	685a      	ldr	r2, [r3, #4]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f022 0208 	bic.w	r2, r2, #8
 800fa18:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f022 0201 	bic.w	r2, r2, #1
 800fa28:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800fa38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa48:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fa58:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fa68:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f042 0201 	orr.w	r2, r2, #1
 800fa78:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7e:	f003 030c 	and.w	r3, r3, #12
 800fa82:	2b08      	cmp	r3, #8
 800fa84:	d108      	bne.n	800fa98 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 800fa94:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800fa96:	e00d      	b.n	800fab4 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa9c:	f003 030c 	and.w	r3, r3, #12
 800faa0:	2b0c      	cmp	r3, #12
 800faa2:	d107      	bne.n	800fab4 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fab2:	631a      	str	r2, [r3, #48]	; 0x30
}
 800fab4:	bf00      	nop
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800facc:	f003 0303 	and.w	r3, r3, #3
 800fad0:	2b02      	cmp	r3, #2
 800fad2:	d125      	bne.n	800fb20 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d01e      	beq.n	800fb20 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	3304      	adds	r3, #4
 800fae6:	4619      	mov	r1, r3
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7fe ffa3 	bl	800ea34 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	3304      	adds	r3, #4
 800faf8:	4619      	mov	r1, r3
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7f2 f894 	bl	8001c28 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fb1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d116      	bne.n	800fb5a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb32:	f003 0302 	and.w	r3, r3, #2
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d004      	beq.n	800fb44 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800fb3a:	2108      	movs	r1, #8
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 f988 	bl	800fe52 <JPEG_ReadInputData>
 800fb42:	e00a      	b.n	800fb5a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb4a:	f003 0304 	and.w	r3, r3, #4
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d003      	beq.n	800fb5a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800fb52:	2101      	movs	r1, #1
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 f97c 	bl	800fe52 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d116      	bne.n	800fb94 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb6c:	f003 0308 	and.w	r3, r3, #8
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d004      	beq.n	800fb7e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800fb74:	2108      	movs	r1, #8
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 f864 	bl	800fc44 <JPEG_StoreOutputData>
 800fb7c:	e00a      	b.n	800fb94 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb84:	f003 0310 	and.w	r3, r3, #16
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d003      	beq.n	800fb94 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800fb8c:	2101      	movs	r1, #1
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f000 f858 	bl	800fc44 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fb9e:	2b20      	cmp	r3, #32
 800fba0:	d14b      	bne.n	800fc3a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f022 0201 	bic.w	r2, r2, #1
 800fbb0:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbb6:	f003 030c 	and.w	r3, r3, #12
 800fbba:	2b08      	cmp	r3, #8
 800fbbc:	d107      	bne.n	800fbce <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800fbcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fbdc:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00a      	beq.n	800fbfc <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	69d9      	ldr	r1, [r3, #28]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbee:	461a      	mov	r2, r3
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7f2 f8e9 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc00:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc06:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2201      	movs	r2, #1
 800fc1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f003 0303 	and.w	r3, r3, #3
 800fc24:	2b02      	cmp	r3, #2
 800fc26:	d103      	bne.n	800fc30 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7f2 f935 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
 800fc2e:	e002      	b.n	800fc36 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f7ff f95e 	bl	800eef2 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800fc36:	2301      	movs	r3, #1
 800fc38:	e000      	b.n	800fc3c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800fc3a:	2300      	movs	r3, #0
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3710      	adds	r7, #16
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b086      	sub	sp, #24
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	440b      	add	r3, r1
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d34b      	bcc.n	800fcf8 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800fc60:	2300      	movs	r3, #0
 800fc62:	617b      	str	r3, [r7, #20]
 800fc64:	e031      	b.n	800fcca <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc6c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	69da      	ldr	r2, [r3, #28]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc76:	4413      	add	r3, r2
 800fc78:	68ba      	ldr	r2, [r7, #8]
 800fc7a:	b2d2      	uxtb	r2, r2
 800fc7c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	0a19      	lsrs	r1, r3, #8
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	69da      	ldr	r2, [r3, #28]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	4413      	add	r3, r2
 800fc8e:	b2ca      	uxtb	r2, r1
 800fc90:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	0c19      	lsrs	r1, r3, #16
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	69da      	ldr	r2, [r3, #28]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9e:	3302      	adds	r3, #2
 800fca0:	4413      	add	r3, r2
 800fca2:	b2ca      	uxtb	r2, r1
 800fca4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	0e19      	lsrs	r1, r3, #24
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	69da      	ldr	r2, [r3, #28]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb2:	3303      	adds	r3, #3
 800fcb4:	4413      	add	r3, r2
 800fcb6:	b2ca      	uxtb	r2, r1
 800fcb8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcbe:	1d1a      	adds	r2, r3, #4
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	617b      	str	r3, [r7, #20]
 800fcca:	697a      	ldr	r2, [r7, #20]
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d3c9      	bcc.n	800fc66 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	f040 80b5 	bne.w	800fe4a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	69d9      	ldr	r1, [r3, #28]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce8:	461a      	mov	r2, r3
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f7f2 f86c 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800fcf6:	e0a8      	b.n	800fe4a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd00:	429a      	cmp	r2, r3
 800fd02:	f240 80a2 	bls.w	800fe4a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0e:	1ad3      	subs	r3, r2, r3
 800fd10:	089b      	lsrs	r3, r3, #2
 800fd12:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800fd14:	2300      	movs	r3, #0
 800fd16:	617b      	str	r3, [r7, #20]
 800fd18:	e031      	b.n	800fd7e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd20:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	69da      	ldr	r2, [r3, #28]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2a:	4413      	add	r3, r2
 800fd2c:	68ba      	ldr	r2, [r7, #8]
 800fd2e:	b2d2      	uxtb	r2, r2
 800fd30:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	0a19      	lsrs	r1, r3, #8
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	69da      	ldr	r2, [r3, #28]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd3e:	3301      	adds	r3, #1
 800fd40:	4413      	add	r3, r2
 800fd42:	b2ca      	uxtb	r2, r1
 800fd44:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	0c19      	lsrs	r1, r3, #16
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	69da      	ldr	r2, [r3, #28]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd52:	3302      	adds	r3, #2
 800fd54:	4413      	add	r3, r2
 800fd56:	b2ca      	uxtb	r2, r1
 800fd58:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	0e19      	lsrs	r1, r3, #24
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	69da      	ldr	r2, [r3, #28]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd66:	3303      	adds	r3, #3
 800fd68:	4413      	add	r3, r2
 800fd6a:	b2ca      	uxtb	r2, r1
 800fd6c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd72:	1d1a      	adds	r2, r3, #4
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	617b      	str	r3, [r7, #20]
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d3c9      	bcc.n	800fd1a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d10b      	bne.n	800fdaa <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	69d9      	ldr	r1, [r3, #28]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f7f2 f813 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fda8:	e04f      	b.n	800fe4a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb2:	1ad3      	subs	r3, r2, r3
 800fdb4:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdbc:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	617b      	str	r3, [r7, #20]
 800fdc2:	e015      	b.n	800fdf0 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	f003 0303 	and.w	r3, r3, #3
 800fdca:	00db      	lsls	r3, r3, #3
 800fdcc:	68ba      	ldr	r2, [r7, #8]
 800fdce:	fa22 f103 	lsr.w	r1, r2, r3
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	69da      	ldr	r2, [r3, #28]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdda:	4413      	add	r3, r2
 800fddc:	b2ca      	uxtb	r2, r1
 800fdde:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde4:	1c5a      	adds	r2, r3, #1
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	3301      	adds	r3, #1
 800fdee:	617b      	str	r3, [r7, #20]
 800fdf0:	697a      	ldr	r2, [r7, #20]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d3e5      	bcc.n	800fdc4 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	69d9      	ldr	r1, [r3, #28]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe00:	461a      	mov	r2, r3
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f7f1 ffe0 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	625a      	str	r2, [r3, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f1c3 0304 	rsb	r3, r3, #4
 800fe14:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	617b      	str	r3, [r7, #20]
 800fe1a:	e013      	b.n	800fe44 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	00db      	lsls	r3, r3, #3
 800fe20:	68ba      	ldr	r2, [r7, #8]
 800fe22:	fa22 f103 	lsr.w	r1, r2, r3
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	69da      	ldr	r2, [r3, #28]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe2e:	4413      	add	r3, r2
 800fe30:	b2ca      	uxtb	r2, r1
 800fe32:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe38:	1c5a      	adds	r2, r3, #1
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	3301      	adds	r3, #1
 800fe42:	617b      	str	r3, [r7, #20]
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	2b03      	cmp	r3, #3
 800fe48:	d9e8      	bls.n	800fe1c <JPEG_StoreOutputData+0x1d8>
}
 800fe4a:	bf00      	nop
 800fe4c:	3718      	adds	r7, #24
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}

0800fe52 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800fe52:	b580      	push	{r7, lr}
 800fe54:	b088      	sub	sp, #32
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
 800fe5a:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d002      	beq.n	800fe6e <JPEG_ReadInputData+0x1c>
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d104      	bne.n	800fe78 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800fe6e:	2101      	movs	r1, #1
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f7fe fed7 	bl	800ec24 <HAL_JPEG_Pause>
 800fe76:	e028      	b.n	800feca <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6a1b      	ldr	r3, [r3, #32]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d906      	bls.n	800fe92 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6a1b      	ldr	r3, [r3, #32]
 800fe8c:	1ad3      	subs	r3, r2, r3
 800fe8e:	61fb      	str	r3, [r7, #28]
 800fe90:	e01b      	b.n	800feca <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6a1b      	ldr	r3, [r3, #32]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d115      	bne.n	800feca <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	4619      	mov	r1, r3
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7f1 ff5b 	bl	8001d60 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feae:	2b04      	cmp	r3, #4
 800feb0:	d905      	bls.n	800febe <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feb6:	f023 0203 	bic.w	r2, r3, #3
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fec8:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	f040 809f 	bne.w	8010016 <JPEG_ReadInputData+0x1c4>
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	f000 809b 	beq.w	8010016 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	089b      	lsrs	r3, r3, #2
 800fee4:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800fee6:	693a      	ldr	r2, [r7, #16]
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	429a      	cmp	r2, r3
 800feec:	d335      	bcc.n	800ff5a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800feee:	2300      	movs	r3, #0
 800fef0:	61bb      	str	r3, [r7, #24]
 800fef2:	e02d      	b.n	800ff50 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6a1b      	ldr	r3, [r3, #32]
 800fef8:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	699a      	ldr	r2, [r3, #24]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	4413      	add	r3, r2
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	699a      	ldr	r2, [r3, #24]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	4413      	add	r3, r2
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ff14:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6999      	ldr	r1, [r3, #24]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	3302      	adds	r3, #2
 800ff20:	440b      	add	r3, r1
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ff26:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	699a      	ldr	r2, [r3, #24]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	3303      	adds	r3, #3
 800ff32:	4413      	add	r3, r2
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ff3c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ff3e:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a1b      	ldr	r3, [r3, #32]
 800ff44:	1d1a      	adds	r2, r3, #4
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	61bb      	str	r3, [r7, #24]
 800ff50:	69ba      	ldr	r2, [r7, #24]
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d3cd      	bcc.n	800fef4 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800ff58:	e05d      	b.n	8010016 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d035      	beq.n	800ffcc <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800ff60:	2300      	movs	r3, #0
 800ff62:	61bb      	str	r3, [r7, #24]
 800ff64:	e02d      	b.n	800ffc2 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6a1b      	ldr	r3, [r3, #32]
 800ff6a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	699a      	ldr	r2, [r3, #24]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	4413      	add	r3, r2
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	699a      	ldr	r2, [r3, #24]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	4413      	add	r3, r2
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ff86:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6999      	ldr	r1, [r3, #24]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	3302      	adds	r3, #2
 800ff92:	440b      	add	r3, r1
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ff98:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	699a      	ldr	r2, [r3, #24]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	3303      	adds	r3, #3
 800ffa4:	4413      	add	r3, r2
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ffae:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ffb0:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a1b      	ldr	r3, [r3, #32]
 800ffb6:	1d1a      	adds	r2, r3, #4
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800ffbc:	69bb      	ldr	r3, [r7, #24]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	61bb      	str	r3, [r7, #24]
 800ffc2:	69ba      	ldr	r2, [r7, #24]
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d3cd      	bcc.n	800ff66 <JPEG_ReadInputData+0x114>
}
 800ffca:	e024      	b.n	8010016 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	61bb      	str	r3, [r7, #24]
 800ffd4:	e017      	b.n	8010006 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	699a      	ldr	r2, [r3, #24]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a1b      	ldr	r3, [r3, #32]
 800ffde:	4413      	add	r3, r2
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	f003 0303 	and.w	r3, r3, #3
 800ffea:	00db      	lsls	r3, r3, #3
 800ffec:	fa02 f303 	lsl.w	r3, r2, r3
 800fff0:	697a      	ldr	r2, [r7, #20]
 800fff2:	4313      	orrs	r3, r2
 800fff4:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a1b      	ldr	r3, [r3, #32]
 800fffa:	1c5a      	adds	r2, r3, #1
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	3301      	adds	r3, #1
 8010004:	61bb      	str	r3, [r7, #24]
 8010006:	69ba      	ldr	r2, [r7, #24]
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	429a      	cmp	r2, r3
 801000c:	d3e3      	bcc.n	800ffd6 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	697a      	ldr	r2, [r7, #20]
 8010014:	641a      	str	r2, [r3, #64]	; 0x40
}
 8010016:	bf00      	nop
 8010018:	3720      	adds	r7, #32
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
	...

08010020 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8010020:	b590      	push	{r4, r7, lr}
 8010022:	b087      	sub	sp, #28
 8010024:	af02      	add	r7, sp, #8
 8010026:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801002c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801002e:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010036:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	429a      	cmp	r2, r3
 8010040:	d804      	bhi.n	801004c <JPEG_DMA_StartProcess+0x2c>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010046:	68ba      	ldr	r2, [r7, #8]
 8010048:	429a      	cmp	r2, r3
 801004a:	d901      	bls.n	8010050 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 801004c:	2301      	movs	r3, #1
 801004e:	e074      	b.n	801013a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010054:	4a3b      	ldr	r2, [pc, #236]	; (8010144 <JPEG_DMA_StartProcess+0x124>)
 8010056:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801005c:	4a3a      	ldr	r2, [pc, #232]	; (8010148 <JPEG_DMA_StartProcess+0x128>)
 801005e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010064:	4a39      	ldr	r2, [pc, #228]	; (801014c <JPEG_DMA_StartProcess+0x12c>)
 8010066:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801006c:	4a36      	ldr	r2, [pc, #216]	; (8010148 <JPEG_DMA_StartProcess+0x128>)
 801006e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010074:	4a36      	ldr	r2, [pc, #216]	; (8010150 <JPEG_DMA_StartProcess+0x130>)
 8010076:	659a      	str	r2, [r3, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d002      	beq.n	8010084 <JPEG_DMA_StartProcess+0x64>
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d107      	bne.n	8010094 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010088:	f043 0204 	orr.w	r2, r3, #4
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	e052      	b.n	801013a <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801009c:	68f9      	ldr	r1, [r7, #12]
 801009e:	fbb3 f1f1 	udiv	r1, r3, r1
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	fb00 f101 	mul.w	r1, r0, r1
 80100a8:	1a5b      	subs	r3, r3, r1
 80100aa:	1ad2      	subs	r2, r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	629a      	str	r2, [r3, #40]	; 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b8:	68b9      	ldr	r1, [r7, #8]
 80100ba:	fbb3 f1f1 	udiv	r1, r3, r1
 80100be:	68b8      	ldr	r0, [r7, #8]
 80100c0:	fb00 f101 	mul.w	r1, r0, r1
 80100c4:	1a5b      	subs	r3, r3, r1
 80100c6:	1ad2      	subs	r2, r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	62da      	str	r2, [r3, #44]	; 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	3344      	adds	r3, #68	; 0x44
 80100d6:	4619      	mov	r1, r3
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	69db      	ldr	r3, [r3, #28]
 80100dc:	461c      	mov	r4, r3
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e2:	2201      	movs	r2, #1
 80100e4:	9200      	str	r2, [sp, #0]
 80100e6:	4622      	mov	r2, r4
 80100e8:	f000 ff7a 	bl	8010fe0 <HAL_MDMA_Start_IT>
 80100ec:	4603      	mov	r3, r0
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d007      	beq.n	8010102 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100f6:	f043 0204 	orr.w	r2, r3, #4
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80100fe:	2301      	movs	r3, #1
 8010100:	e01b      	b.n	801013a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	699b      	ldr	r3, [r3, #24]
 801010a:	4619      	mov	r1, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	3340      	adds	r3, #64	; 0x40
 8010112:	461c      	mov	r4, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010118:	2201      	movs	r2, #1
 801011a:	9200      	str	r2, [sp, #0]
 801011c:	4622      	mov	r2, r4
 801011e:	f000 ff5f 	bl	8010fe0 <HAL_MDMA_Start_IT>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	d007      	beq.n	8010138 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801012c:	f043 0204 	orr.w	r2, r3, #4
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8010134:	2301      	movs	r3, #1
 8010136:	e000      	b.n	801013a <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8010138:	2300      	movs	r3, #0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3714      	adds	r7, #20
 801013e:	46bd      	mov	sp, r7
 8010140:	bd90      	pop	{r4, r7, pc}
 8010142:	bf00      	nop
 8010144:	08010453 	.word	0x08010453
 8010148:	08010641 	.word	0x08010641
 801014c:	0801057f 	.word	0x0801057f
 8010150:	08010691 	.word	0x08010691

08010154 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010160:	f003 0303 	and.w	r3, r3, #3
 8010164:	2b02      	cmp	r3, #2
 8010166:	d125      	bne.n	80101b4 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801016e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010172:	2b00      	cmp	r3, #0
 8010174:	d01e      	beq.n	80101b4 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	3304      	adds	r3, #4
 801017a:	4619      	mov	r1, r3
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f7fe fc59 	bl	800ea34 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2200      	movs	r2, #0
 8010186:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	3304      	adds	r3, #4
 801018c:	4619      	mov	r1, r3
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f7f1 fd4a 	bl	8001c28 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80101a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80101b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ba:	f003 0320 	and.w	r3, r3, #32
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d039      	beq.n	8010236 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101c6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	655a      	str	r2, [r3, #84]	; 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	f022 0201 	bic.w	r2, r2, #1
 80101dc:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80101ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80101fc:	639a      	str	r2, [r3, #56]	; 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010206:	b2db      	uxtb	r3, r3
 8010208:	2b02      	cmp	r3, #2
 801020a:	d104      	bne.n	8010216 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010210:	4618      	mov	r0, r3
 8010212:	f000 ffc1 	bl	8011198 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801021a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801021e:	b2db      	uxtb	r3, r3
 8010220:	2b02      	cmp	r3, #2
 8010222:	d105      	bne.n	8010230 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010228:	4618      	mov	r0, r3
 801022a:	f000 ffb5 	bl	8011198 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 801022e:	e002      	b.n	8010236 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f000 f804 	bl	801023e <JPEG_DMA_EndProcess>
}
 8010236:	bf00      	nop
 8010238:	3708      	adds	r7, #8
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}

0801023e <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b084      	sub	sp, #16
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	695b      	ldr	r3, [r3, #20]
 8010252:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8010256:	1ad2      	subs	r2, r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010264:	429a      	cmp	r2, r3
 8010266:	d10a      	bne.n	801027e <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	69d9      	ldr	r1, [r3, #28]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010270:	461a      	mov	r2, r3
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7f1 fda8 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010284:	f003 0310 	and.w	r3, r3, #16
 8010288:	2b00      	cmp	r3, #0
 801028a:	d134      	bne.n	80102f6 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00a      	beq.n	80102aa <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	69d9      	ldr	r1, [r3, #28]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029c:	461a      	mov	r2, r3
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f7f1 fd92 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2200      	movs	r2, #0
 80102a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	f022 0201 	bic.w	r2, r2, #1
 80102b8:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102be:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102c4:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f003 0303 	and.w	r3, r3, #3
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	d103      	bne.n	80102ee <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f7f1 fdd6 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 80102ec:	e00c      	b.n	8010308 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f7fe fdff 	bl	800eef2 <HAL_JPEG_EncodeCpltCallback>
}
 80102f4:	e008      	b.n	8010308 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d102      	bne.n	8010308 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 f804 	bl	8010310 <JPEG_DMA_PollResidualData>
}
 8010308:	bf00      	nop
 801030a:	3710      	adds	r7, #16
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b086      	sub	sp, #24
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8010318:	2310      	movs	r3, #16
 801031a:	617b      	str	r3, [r7, #20]
 801031c:	e04f      	b.n	80103be <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010326:	2b00      	cmp	r3, #0
 8010328:	d146      	bne.n	80103b8 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010330:	f003 0310 	and.w	r3, r3, #16
 8010334:	2b00      	cmp	r3, #0
 8010336:	d03f      	beq.n	80103b8 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801033e:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	69da      	ldr	r2, [r3, #28]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010348:	4413      	add	r3, r2
 801034a:	68fa      	ldr	r2, [r7, #12]
 801034c:	b2d2      	uxtb	r2, r2
 801034e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	0a19      	lsrs	r1, r3, #8
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	69da      	ldr	r2, [r3, #28]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801035c:	3301      	adds	r3, #1
 801035e:	4413      	add	r3, r2
 8010360:	b2ca      	uxtb	r2, r1
 8010362:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	0c19      	lsrs	r1, r3, #16
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	69da      	ldr	r2, [r3, #28]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010370:	3302      	adds	r3, #2
 8010372:	4413      	add	r3, r2
 8010374:	b2ca      	uxtb	r2, r1
 8010376:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	0e19      	lsrs	r1, r3, #24
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	69da      	ldr	r2, [r3, #28]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010384:	3303      	adds	r3, #3
 8010386:	4413      	add	r3, r2
 8010388:	b2ca      	uxtb	r2, r1
 801038a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010390:	1d1a      	adds	r2, r3, #4
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801039e:	429a      	cmp	r2, r3
 80103a0:	d10a      	bne.n	80103b8 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	69d9      	ldr	r1, [r3, #28]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103aa:	461a      	mov	r2, r3
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f7f1 fd0b 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2200      	movs	r2, #0
 80103b6:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	3b01      	subs	r3, #1
 80103bc:	617b      	str	r3, [r7, #20]
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d1ac      	bne.n	801031e <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103c8:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103d0:	f003 0310 	and.w	r3, r3, #16
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d004      	beq.n	80103e2 <JPEG_DMA_PollResidualData+0xd2>
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d133      	bne.n	801044a <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f022 0201 	bic.w	r2, r2, #1
 80103f0:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00a      	beq.n	8010410 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	69d9      	ldr	r1, [r3, #28]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010402:	461a      	mov	r2, r3
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7f1 fcdf 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2200      	movs	r2, #0
 801040e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010414:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801041a:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2201      	movs	r2, #1
 801042e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	f003 0303 	and.w	r3, r3, #3
 8010438:	2b02      	cmp	r3, #2
 801043a:	d103      	bne.n	8010444 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7f1 fd2b 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8010442:	e002      	b.n	801044a <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f7fe fd54 	bl	800eef2 <HAL_JPEG_EncodeCpltCallback>
}
 801044a:	bf00      	nop
 801044c:	3718      	adds	r7, #24
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8010452:	b590      	push	{r4, r7, lr}
 8010454:	b087      	sub	sp, #28
 8010456:	af02      	add	r7, sp, #8
 8010458:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801045e:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 801046e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010474:	f248 030c 	movw	r3, #32780	; 0x800c
 8010478:	4013      	ands	r3, r2
 801047a:	2b0c      	cmp	r3, #12
 801047c:	d17c      	bne.n	8010578 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010484:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	695b      	ldr	r3, [r3, #20]
 8010490:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8010494:	1ad2      	subs	r2, r2, r3
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6a1b      	ldr	r3, [r3, #32]
 801049e:	4619      	mov	r1, r3
 80104a0:	68f8      	ldr	r0, [r7, #12]
 80104a2:	f7f1 fc5d 	bl	8001d60 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d81f      	bhi.n	80104f0 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d10d      	bne.n	80104d2 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104ba:	f043 0204 	orr.w	r2, r3, #4
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2206      	movs	r2, #6
 80104c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80104ca:	68f8      	ldr	r0, [r7, #12]
 80104cc:	f7f1 fcdc 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 80104d0:	e052      	b.n	8010578 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104da:	68b9      	ldr	r1, [r7, #8]
 80104dc:	fbb3 f1f1 	udiv	r1, r3, r1
 80104e0:	68b8      	ldr	r0, [r7, #8]
 80104e2:	fb00 f101 	mul.w	r1, r0, r1
 80104e6:	1a5b      	subs	r3, r3, r1
 80104e8:	1ad2      	subs	r2, r2, r3
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	629a      	str	r2, [r3, #40]	; 0x28
 80104ee:	e010      	b.n	8010512 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d00c      	beq.n	8010512 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104fc:	f003 0303 	and.w	r3, r3, #3
 8010500:	2b00      	cmp	r3, #0
 8010502:	d006      	beq.n	8010512 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010508:	089b      	lsrs	r3, r3, #2
 801050a:	3301      	adds	r3, #1
 801050c:	009a      	lsls	r2, r3, #2
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	629a      	str	r2, [r3, #40]	; 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801051a:	2b00      	cmp	r3, #0
 801051c:	d124      	bne.n	8010568 <JPEG_MDMAInCpltCallback+0x116>
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010522:	2b00      	cmp	r3, #0
 8010524:	d020      	beq.n	8010568 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	699b      	ldr	r3, [r3, #24]
 801052e:	4619      	mov	r1, r3
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	3340      	adds	r3, #64	; 0x40
 8010536:	461c      	mov	r4, r3
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801053c:	2201      	movs	r2, #1
 801053e:	9200      	str	r2, [sp, #0]
 8010540:	4622      	mov	r2, r4
 8010542:	f000 fd4d 	bl	8010fe0 <HAL_MDMA_Start_IT>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d00d      	beq.n	8010568 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010550:	f043 0204 	orr.w	r2, r3, #4
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2206      	movs	r2, #6
 801055c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8010560:	68f8      	ldr	r0, [r7, #12]
 8010562:	f7f1 fc91 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8010566:	e007      	b.n	8010578 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8010576:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8010578:	3714      	adds	r7, #20
 801057a:	46bd      	mov	sp, r7
 801057c:	bd90      	pop	{r4, r7, pc}

0801057e <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 801057e:	b590      	push	{r4, r7, lr}
 8010580:	b087      	sub	sp, #28
 8010582:	af02      	add	r7, sp, #8
 8010584:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801058a:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 801059a:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80105a0:	f248 030c 	movw	r3, #32780	; 0x800c
 80105a4:	4013      	ands	r3, r2
 80105a6:	2b0c      	cmp	r3, #12
 80105a8:	d147      	bne.n	801063a <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105b0:	f003 0320 	and.w	r3, r3, #32
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d138      	bne.n	801062a <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	695b      	ldr	r3, [r3, #20]
 80105c2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80105c6:	1ad2      	subs	r2, r2, r3
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	69d9      	ldr	r1, [r3, #28]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d4:	461a      	mov	r2, r3
 80105d6:	68f8      	ldr	r0, [r7, #12]
 80105d8:	f7f1 fbf6 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d120      	bne.n	801062a <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	3344      	adds	r3, #68	; 0x44
 80105f2:	4619      	mov	r1, r3
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	69db      	ldr	r3, [r3, #28]
 80105f8:	461c      	mov	r4, r3
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105fe:	2201      	movs	r2, #1
 8010600:	9200      	str	r2, [sp, #0]
 8010602:	4622      	mov	r2, r4
 8010604:	f000 fcec 	bl	8010fe0 <HAL_MDMA_Start_IT>
 8010608:	4603      	mov	r3, r0
 801060a:	2b00      	cmp	r3, #0
 801060c:	d00d      	beq.n	801062a <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010612:	f043 0204 	orr.w	r2, r3, #4
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2206      	movs	r2, #6
 801061e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8010622:	68f8      	ldr	r0, [r7, #12]
 8010624:	f7f1 fc30 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8010628:	e007      	b.n	801063a <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8010638:	631a      	str	r2, [r3, #48]	; 0x30
  }

}
 801063a:	3714      	adds	r7, #20
 801063c:	46bd      	mov	sp, r7
 801063e:	bd90      	pop	{r4, r7, pc}

08010640 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064c:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f022 0201 	bic.w	r2, r2, #1
 801065c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 801066c:	631a      	str	r2, [r3, #48]	; 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2201      	movs	r2, #1
 8010672:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801067a:	f043 0204 	orr.w	r2, r3, #4
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f7f1 fc00 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 8010688:	bf00      	nop
 801068a:	3710      	adds	r7, #16
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b084      	sub	sp, #16
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801069c:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d002      	beq.n	80106b0 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 80106aa:	68f8      	ldr	r0, [r7, #12]
 80106ac:	f7ff fdc7 	bl	801023e <JPEG_DMA_EndProcess>
  }
}
 80106b0:	bf00      	nop
 80106b2:	3710      	adds	r7, #16
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b08b      	sub	sp, #44	; 0x2c
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80106c0:	2300      	movs	r3, #0
 80106c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	3350      	adds	r3, #80	; 0x50
 80106ca:	61bb      	str	r3, [r7, #24]

  i = 0;
 80106cc:	2300      	movs	r3, #0
 80106ce:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80106d0:	e042      	b.n	8010758 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80106d8:	2300      	movs	r3, #0
 80106da:	61fb      	str	r3, [r7, #28]
 80106dc:	e033      	b.n	8010746 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	00db      	lsls	r3, r3, #3
 80106e2:	697a      	ldr	r2, [r7, #20]
 80106e4:	fa22 f303 	lsr.w	r3, r2, r3
 80106e8:	b2db      	uxtb	r3, r3
 80106ea:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d103      	bne.n	80106fa <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80106f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f4:	3364      	adds	r3, #100	; 0x64
 80106f6:	627b      	str	r3, [r7, #36]	; 0x24
 80106f8:	e022      	b.n	8010740 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	2264      	movs	r2, #100	; 0x64
 80106fe:	fb02 f303 	mul.w	r3, r2, r3
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010706:	6a38      	ldr	r0, [r7, #32]
 8010708:	69f9      	ldr	r1, [r7, #28]
 801070a:	4401      	add	r1, r0
 801070c:	4818      	ldr	r0, [pc, #96]	; (8010770 <JPEG_GetQuality+0xb8>)
 801070e:	5c41      	ldrb	r1, [r0, r1]
 8010710:	440a      	add	r2, r1
 8010712:	7812      	ldrb	r2, [r2, #0]
 8010714:	fbb3 f3f2 	udiv	r3, r3, r2
 8010718:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2b64      	cmp	r3, #100	; 0x64
 801071e:	d807      	bhi.n	8010730 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8010726:	085b      	lsrs	r3, r3, #1
 8010728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801072a:	4413      	add	r3, r2
 801072c:	627b      	str	r3, [r7, #36]	; 0x24
 801072e:	e007      	b.n	8010740 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8010730:	f241 3288 	movw	r2, #5000	; 0x1388
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	fbb2 f3f3 	udiv	r3, r2, r3
 801073a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801073c:	4413      	add	r3, r2
 801073e:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	3301      	adds	r3, #1
 8010744:	61fb      	str	r3, [r7, #28]
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	2b03      	cmp	r3, #3
 801074a:	d9c8      	bls.n	80106de <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 801074c:	6a3b      	ldr	r3, [r7, #32]
 801074e:	3304      	adds	r3, #4
 8010750:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	3304      	adds	r3, #4
 8010756:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8010758:	6a3b      	ldr	r3, [r7, #32]
 801075a:	2b3c      	cmp	r3, #60	; 0x3c
 801075c:	d9b9      	bls.n	80106d2 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 801075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010760:	099b      	lsrs	r3, r3, #6
}
 8010762:	4618      	mov	r0, r3
 8010764:	372c      	adds	r7, #44	; 0x2c
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	0802bcf4 	.word	0x0802bcf4

08010774 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d101      	bne.n	8010786 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8010782:	2301      	movs	r3, #1
 8010784:	e0bf      	b.n	8010906 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801078c:	b2db      	uxtb	r3, r3
 801078e:	2b00      	cmp	r3, #0
 8010790:	d106      	bne.n	80107a0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2200      	movs	r2, #0
 8010796:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f7f6 fa40 	bl	8006c20 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2202      	movs	r2, #2
 80107a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	699a      	ldr	r2, [r3, #24]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80107b6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	6999      	ldr	r1, [r3, #24]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	685a      	ldr	r2, [r3, #4]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	689b      	ldr	r3, [r3, #8]
 80107c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80107cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	691b      	ldr	r3, [r3, #16]
 80107d2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	430a      	orrs	r2, r1
 80107da:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	6899      	ldr	r1, [r3, #8]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	4b4a      	ldr	r3, [pc, #296]	; (8010910 <HAL_LTDC_Init+0x19c>)
 80107e8:	400b      	ands	r3, r1
 80107ea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	695b      	ldr	r3, [r3, #20]
 80107f0:	041b      	lsls	r3, r3, #16
 80107f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	6899      	ldr	r1, [r3, #8]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	699a      	ldr	r2, [r3, #24]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	431a      	orrs	r2, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	430a      	orrs	r2, r1
 8010808:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	68d9      	ldr	r1, [r3, #12]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681a      	ldr	r2, [r3, #0]
 8010814:	4b3e      	ldr	r3, [pc, #248]	; (8010910 <HAL_LTDC_Init+0x19c>)
 8010816:	400b      	ands	r3, r1
 8010818:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	69db      	ldr	r3, [r3, #28]
 801081e:	041b      	lsls	r3, r3, #16
 8010820:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	68d9      	ldr	r1, [r3, #12]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6a1a      	ldr	r2, [r3, #32]
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	431a      	orrs	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	430a      	orrs	r2, r1
 8010836:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	6919      	ldr	r1, [r3, #16]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	4b33      	ldr	r3, [pc, #204]	; (8010910 <HAL_LTDC_Init+0x19c>)
 8010844:	400b      	ands	r3, r1
 8010846:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084c:	041b      	lsls	r3, r3, #16
 801084e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	6919      	ldr	r1, [r3, #16]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	431a      	orrs	r2, r3
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	430a      	orrs	r2, r1
 8010864:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	6959      	ldr	r1, [r3, #20]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	4b27      	ldr	r3, [pc, #156]	; (8010910 <HAL_LTDC_Init+0x19c>)
 8010872:	400b      	ands	r3, r1
 8010874:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801087a:	041b      	lsls	r3, r3, #16
 801087c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	6959      	ldr	r1, [r3, #20]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	431a      	orrs	r2, r3
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	430a      	orrs	r2, r1
 8010892:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801089a:	021b      	lsls	r3, r3, #8
 801089c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80108a4:	041b      	lsls	r3, r3, #16
 80108a6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80108b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80108be:	68ba      	ldr	r2, [r7, #8]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	4313      	orrs	r3, r2
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80108ca:	431a      	orrs	r2, r3
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	430a      	orrs	r2, r1
 80108d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	f042 0206 	orr.w	r2, r2, #6
 80108e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	699a      	ldr	r2, [r3, #24]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f042 0201 	orr.w	r2, r2, #1
 80108f2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2201      	movs	r2, #1
 8010900:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	f000f800 	.word	0xf000f800

08010914 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010922:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801092a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f003 0304 	and.w	r3, r3, #4
 8010932:	2b00      	cmp	r3, #0
 8010934:	d023      	beq.n	801097e <HAL_LTDC_IRQHandler+0x6a>
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	f003 0304 	and.w	r3, r3, #4
 801093c:	2b00      	cmp	r3, #0
 801093e:	d01e      	beq.n	801097e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	f022 0204 	bic.w	r2, r2, #4
 801094e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2204      	movs	r2, #4
 8010956:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801095e:	f043 0201 	orr.w	r2, r3, #1
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2204      	movs	r2, #4
 801096c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f000 f86f 	bl	8010a5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f003 0302 	and.w	r3, r3, #2
 8010984:	2b00      	cmp	r3, #0
 8010986:	d023      	beq.n	80109d0 <HAL_LTDC_IRQHandler+0xbc>
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	f003 0302 	and.w	r3, r3, #2
 801098e:	2b00      	cmp	r3, #0
 8010990:	d01e      	beq.n	80109d0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f022 0202 	bic.w	r2, r2, #2
 80109a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	2202      	movs	r2, #2
 80109a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80109b0:	f043 0202 	orr.w	r2, r3, #2
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2204      	movs	r2, #4
 80109be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 f846 	bl	8010a5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	f003 0301 	and.w	r3, r3, #1
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d01b      	beq.n	8010a12 <HAL_LTDC_IRQHandler+0xfe>
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	f003 0301 	and.w	r3, r3, #1
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d016      	beq.n	8010a12 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f022 0201 	bic.w	r2, r2, #1
 80109f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2201      	movs	r2, #1
 80109fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2201      	movs	r2, #1
 8010a00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2200      	movs	r2, #0
 8010a08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f7f3 fd7f 	bl	8004510 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f003 0308 	and.w	r3, r3, #8
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d01b      	beq.n	8010a54 <HAL_LTDC_IRQHandler+0x140>
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	f003 0308 	and.w	r3, r3, #8
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d016      	beq.n	8010a54 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f022 0208 	bic.w	r2, r2, #8
 8010a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2208      	movs	r2, #8
 8010a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2201      	movs	r2, #1
 8010a42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f000 f80e 	bl	8010a70 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8010a54:	bf00      	nop
 8010a56:	3710      	adds	r7, #16
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8010a64:	bf00      	nop
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8010a78:	bf00      	nop
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8010a84:	b5b0      	push	{r4, r5, r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d101      	bne.n	8010a9e <HAL_LTDC_ConfigLayer+0x1a>
 8010a9a:	2302      	movs	r3, #2
 8010a9c:	e02c      	b.n	8010af8 <HAL_LTDC_ConfigLayer+0x74>
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2202      	movs	r2, #2
 8010aaa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2134      	movs	r1, #52	; 0x34
 8010ab4:	fb01 f303 	mul.w	r3, r1, r3
 8010ab8:	4413      	add	r3, r2
 8010aba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	4614      	mov	r4, r2
 8010ac2:	461d      	mov	r5, r3
 8010ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ad0:	682b      	ldr	r3, [r5, #0]
 8010ad2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8010ad4:	687a      	ldr	r2, [r7, #4]
 8010ad6:	68b9      	ldr	r1, [r7, #8]
 8010ad8:	68f8      	ldr	r0, [r7, #12]
 8010ada:	f000 f849 	bl	8010b70 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2201      	movs	r2, #1
 8010aea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8010af6:	2300      	movs	r3, #0
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bdb0      	pop	{r4, r5, r7, pc}

08010b00 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d101      	bne.n	8010b18 <HAL_LTDC_ProgramLineEvent+0x18>
 8010b14:	2302      	movs	r3, #2
 8010b16:	e023      	b.n	8010b60 <HAL_LTDC_ProgramLineEvent+0x60>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2202      	movs	r2, #2
 8010b24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	f022 0201 	bic.w	r2, r2, #1
 8010b36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8010b38:	4a0c      	ldr	r2, [pc, #48]	; (8010b6c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	f042 0201 	orr.w	r2, r2, #1
 8010b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2201      	movs	r2, #1
 8010b52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8010b5e:	2300      	movs	r3, #0
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	370c      	adds	r7, #12
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr
 8010b6c:	50001000 	.word	0x50001000

08010b70 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b089      	sub	sp, #36	; 0x24
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	685a      	ldr	r2, [r3, #4]
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	0c1b      	lsrs	r3, r3, #16
 8010b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010b8c:	4413      	add	r3, r2
 8010b8e:	041b      	lsls	r3, r3, #16
 8010b90:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	461a      	mov	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	01db      	lsls	r3, r3, #7
 8010b9c:	4413      	add	r3, r2
 8010b9e:	3384      	adds	r3, #132	; 0x84
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	6812      	ldr	r2, [r2, #0]
 8010ba6:	4611      	mov	r1, r2
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	01d2      	lsls	r2, r2, #7
 8010bac:	440a      	add	r2, r1
 8010bae:	3284      	adds	r2, #132	; 0x84
 8010bb0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8010bb4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	0c1b      	lsrs	r3, r3, #16
 8010bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010bc6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8010bc8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	4619      	mov	r1, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	01db      	lsls	r3, r3, #7
 8010bd4:	440b      	add	r3, r1
 8010bd6:	3384      	adds	r3, #132	; 0x84
 8010bd8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010bde:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	68da      	ldr	r2, [r3, #12]
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bee:	4413      	add	r3, r2
 8010bf0:	041b      	lsls	r3, r3, #16
 8010bf2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	01db      	lsls	r3, r3, #7
 8010bfe:	4413      	add	r3, r2
 8010c00:	3384      	adds	r3, #132	; 0x84
 8010c02:	689b      	ldr	r3, [r3, #8]
 8010c04:	68fa      	ldr	r2, [r7, #12]
 8010c06:	6812      	ldr	r2, [r2, #0]
 8010c08:	4611      	mov	r1, r2
 8010c0a:	687a      	ldr	r2, [r7, #4]
 8010c0c:	01d2      	lsls	r2, r2, #7
 8010c0e:	440a      	add	r2, r1
 8010c10:	3284      	adds	r2, #132	; 0x84
 8010c12:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8010c16:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	689a      	ldr	r2, [r3, #8]
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	68db      	ldr	r3, [r3, #12]
 8010c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010c26:	4413      	add	r3, r2
 8010c28:	1c5a      	adds	r2, r3, #1
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	4619      	mov	r1, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	01db      	lsls	r3, r3, #7
 8010c34:	440b      	add	r3, r1
 8010c36:	3384      	adds	r3, #132	; 0x84
 8010c38:	4619      	mov	r1, r3
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	461a      	mov	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	01db      	lsls	r3, r3, #7
 8010c4a:	4413      	add	r3, r2
 8010c4c:	3384      	adds	r3, #132	; 0x84
 8010c4e:	691b      	ldr	r3, [r3, #16]
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	6812      	ldr	r2, [r2, #0]
 8010c54:	4611      	mov	r1, r2
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	01d2      	lsls	r2, r2, #7
 8010c5a:	440a      	add	r2, r1
 8010c5c:	3284      	adds	r2, #132	; 0x84
 8010c5e:	f023 0307 	bic.w	r3, r3, #7
 8010c62:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	461a      	mov	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	01db      	lsls	r3, r3, #7
 8010c6e:	4413      	add	r3, r2
 8010c70:	3384      	adds	r3, #132	; 0x84
 8010c72:	461a      	mov	r2, r3
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	691b      	ldr	r3, [r3, #16]
 8010c78:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010c80:	021b      	lsls	r3, r3, #8
 8010c82:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010c8a:	041b      	lsls	r3, r3, #16
 8010c8c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	699b      	ldr	r3, [r3, #24]
 8010c92:	061b      	lsls	r3, r3, #24
 8010c94:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	01db      	lsls	r3, r3, #7
 8010ca0:	4413      	add	r3, r2
 8010ca2:	3384      	adds	r3, #132	; 0x84
 8010ca4:	699b      	ldr	r3, [r3, #24]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	461a      	mov	r2, r3
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	01db      	lsls	r3, r3, #7
 8010cb0:	4413      	add	r3, r2
 8010cb2:	3384      	adds	r3, #132	; 0x84
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	431a      	orrs	r2, r3
 8010cc6:	69bb      	ldr	r3, [r7, #24]
 8010cc8:	431a      	orrs	r2, r3
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	4619      	mov	r1, r3
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	01db      	lsls	r3, r3, #7
 8010cd4:	440b      	add	r3, r1
 8010cd6:	3384      	adds	r3, #132	; 0x84
 8010cd8:	4619      	mov	r1, r3
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	4313      	orrs	r3, r2
 8010cde:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	01db      	lsls	r3, r3, #7
 8010cea:	4413      	add	r3, r2
 8010cec:	3384      	adds	r3, #132	; 0x84
 8010cee:	695b      	ldr	r3, [r3, #20]
 8010cf0:	68fa      	ldr	r2, [r7, #12]
 8010cf2:	6812      	ldr	r2, [r2, #0]
 8010cf4:	4611      	mov	r1, r2
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	01d2      	lsls	r2, r2, #7
 8010cfa:	440a      	add	r2, r1
 8010cfc:	3284      	adds	r2, #132	; 0x84
 8010cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010d02:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	461a      	mov	r2, r3
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	01db      	lsls	r3, r3, #7
 8010d0e:	4413      	add	r3, r2
 8010d10:	3384      	adds	r3, #132	; 0x84
 8010d12:	461a      	mov	r2, r3
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	695b      	ldr	r3, [r3, #20]
 8010d18:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	01db      	lsls	r3, r3, #7
 8010d24:	4413      	add	r3, r2
 8010d26:	3384      	adds	r3, #132	; 0x84
 8010d28:	69da      	ldr	r2, [r3, #28]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	01db      	lsls	r3, r3, #7
 8010d34:	440b      	add	r3, r1
 8010d36:	3384      	adds	r3, #132	; 0x84
 8010d38:	4619      	mov	r1, r3
 8010d3a:	4b58      	ldr	r3, [pc, #352]	; (8010e9c <LTDC_SetConfig+0x32c>)
 8010d3c:	4013      	ands	r3, r2
 8010d3e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	69da      	ldr	r2, [r3, #28]
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	6a1b      	ldr	r3, [r3, #32]
 8010d48:	68f9      	ldr	r1, [r7, #12]
 8010d4a:	6809      	ldr	r1, [r1, #0]
 8010d4c:	4608      	mov	r0, r1
 8010d4e:	6879      	ldr	r1, [r7, #4]
 8010d50:	01c9      	lsls	r1, r1, #7
 8010d52:	4401      	add	r1, r0
 8010d54:	3184      	adds	r1, #132	; 0x84
 8010d56:	4313      	orrs	r3, r2
 8010d58:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	461a      	mov	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	01db      	lsls	r3, r3, #7
 8010d64:	4413      	add	r3, r2
 8010d66:	3384      	adds	r3, #132	; 0x84
 8010d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	461a      	mov	r2, r3
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	01db      	lsls	r3, r3, #7
 8010d74:	4413      	add	r3, r2
 8010d76:	3384      	adds	r3, #132	; 0x84
 8010d78:	461a      	mov	r2, r3
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	461a      	mov	r2, r3
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	01db      	lsls	r3, r3, #7
 8010d88:	4413      	add	r3, r2
 8010d8a:	3384      	adds	r3, #132	; 0x84
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d92:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	691b      	ldr	r3, [r3, #16]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d102      	bne.n	8010da2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8010d9c:	2304      	movs	r3, #4
 8010d9e:	61fb      	str	r3, [r7, #28]
 8010da0:	e01b      	b.n	8010dda <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	691b      	ldr	r3, [r3, #16]
 8010da6:	2b01      	cmp	r3, #1
 8010da8:	d102      	bne.n	8010db0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8010daa:	2303      	movs	r3, #3
 8010dac:	61fb      	str	r3, [r7, #28]
 8010dae:	e014      	b.n	8010dda <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	691b      	ldr	r3, [r3, #16]
 8010db4:	2b04      	cmp	r3, #4
 8010db6:	d00b      	beq.n	8010dd0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d007      	beq.n	8010dd0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8010dc4:	2b03      	cmp	r3, #3
 8010dc6:	d003      	beq.n	8010dd0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8010dcc:	2b07      	cmp	r3, #7
 8010dce:	d102      	bne.n	8010dd6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8010dd0:	2302      	movs	r3, #2
 8010dd2:	61fb      	str	r3, [r7, #28]
 8010dd4:	e001      	b.n	8010dda <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	461a      	mov	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	01db      	lsls	r3, r3, #7
 8010de4:	4413      	add	r3, r2
 8010de6:	3384      	adds	r3, #132	; 0x84
 8010de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	6812      	ldr	r2, [r2, #0]
 8010dee:	4611      	mov	r1, r2
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	01d2      	lsls	r2, r2, #7
 8010df4:	440a      	add	r2, r1
 8010df6:	3284      	adds	r2, #132	; 0x84
 8010df8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8010dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e02:	69fa      	ldr	r2, [r7, #28]
 8010e04:	fb02 f303 	mul.w	r3, r2, r3
 8010e08:	041a      	lsls	r2, r3, #16
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	6859      	ldr	r1, [r3, #4]
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	1acb      	subs	r3, r1, r3
 8010e14:	69f9      	ldr	r1, [r7, #28]
 8010e16:	fb01 f303 	mul.w	r3, r1, r3
 8010e1a:	3307      	adds	r3, #7
 8010e1c:	68f9      	ldr	r1, [r7, #12]
 8010e1e:	6809      	ldr	r1, [r1, #0]
 8010e20:	4608      	mov	r0, r1
 8010e22:	6879      	ldr	r1, [r7, #4]
 8010e24:	01c9      	lsls	r1, r1, #7
 8010e26:	4401      	add	r1, r0
 8010e28:	3184      	adds	r1, #132	; 0x84
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	461a      	mov	r2, r3
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	01db      	lsls	r3, r3, #7
 8010e38:	4413      	add	r3, r2
 8010e3a:	3384      	adds	r3, #132	; 0x84
 8010e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	4619      	mov	r1, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	01db      	lsls	r3, r3, #7
 8010e48:	440b      	add	r3, r1
 8010e4a:	3384      	adds	r3, #132	; 0x84
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	4b14      	ldr	r3, [pc, #80]	; (8010ea0 <LTDC_SetConfig+0x330>)
 8010e50:	4013      	ands	r3, r2
 8010e52:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	461a      	mov	r2, r3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	01db      	lsls	r3, r3, #7
 8010e5e:	4413      	add	r3, r2
 8010e60:	3384      	adds	r3, #132	; 0x84
 8010e62:	461a      	mov	r2, r3
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e68:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	461a      	mov	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	01db      	lsls	r3, r3, #7
 8010e74:	4413      	add	r3, r2
 8010e76:	3384      	adds	r3, #132	; 0x84
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	68fa      	ldr	r2, [r7, #12]
 8010e7c:	6812      	ldr	r2, [r2, #0]
 8010e7e:	4611      	mov	r1, r2
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	01d2      	lsls	r2, r2, #7
 8010e84:	440a      	add	r2, r1
 8010e86:	3284      	adds	r2, #132	; 0x84
 8010e88:	f043 0301 	orr.w	r3, r3, #1
 8010e8c:	6013      	str	r3, [r2, #0]
}
 8010e8e:	bf00      	nop
 8010e90:	3724      	adds	r7, #36	; 0x24
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr
 8010e9a:	bf00      	nop
 8010e9c:	fffff8f8 	.word	0xfffff8f8
 8010ea0:	fffff800 	.word	0xfffff800

08010ea4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010eac:	f7fb fee6 	bl	800cc7c <HAL_GetTick>
 8010eb0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d101      	bne.n	8010ebc <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8010eb8:	2301      	movs	r3, #1
 8010eba:	e03b      	b.n	8010f34 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2202      	movs	r2, #2
 8010ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	68da      	ldr	r2, [r3, #12]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	f022 0201 	bic.w	r2, r2, #1
 8010eda:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8010edc:	e00f      	b.n	8010efe <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8010ede:	f7fb fecd 	bl	800cc7c <HAL_GetTick>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	1ad3      	subs	r3, r2, r3
 8010ee8:	2b05      	cmp	r3, #5
 8010eea:	d908      	bls.n	8010efe <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2240      	movs	r2, #64	; 0x40
 8010ef0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2203      	movs	r2, #3
 8010ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8010efa:	2301      	movs	r3, #1
 8010efc:	e01a      	b.n	8010f34 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	f003 0301 	and.w	r3, r3, #1
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d1e8      	bne.n	8010ede <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fb31 	bl	8011574 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2200      	movs	r2, #0
 8010f16:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010f32:	2300      	movs	r3, #0
}
 8010f34:	4618      	mov	r0, r3
 8010f36:	3710      	adds	r7, #16
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b087      	sub	sp, #28
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	60b9      	str	r1, [r7, #8]
 8010f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d101      	bne.n	8010f56 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8010f52:	2301      	movs	r3, #1
 8010f54:	e03e      	b.n	8010fd4 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d101      	bne.n	8010f64 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8010f60:	2302      	movs	r3, #2
 8010f62:	e037      	b.n	8010fd4 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2201      	movs	r2, #1
 8010f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f72:	b2db      	uxtb	r3, r3
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d126      	bne.n	8010fc6 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	691b      	ldr	r3, [r3, #16]
 8010f7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d11c      	bne.n	8010fc0 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	68ba      	ldr	r2, [r7, #8]
 8010f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d108      	bne.n	8010fae <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	691a      	ldr	r2, [r3, #16]
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8010faa:	611a      	str	r2, [r3, #16]
 8010fac:	e00d      	b.n	8010fca <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	691a      	ldr	r2, [r3, #16]
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8010fbc:	611a      	str	r2, [r3, #16]
 8010fbe:	e004      	b.n	8010fca <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	75fb      	strb	r3, [r7, #23]
 8010fc4:	e001      	b.n	8010fca <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	371c      	adds	r7, #28
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr

08010fe0 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b086      	sub	sp, #24
 8010fe4:	af02      	add	r7, sp, #8
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	60b9      	str	r1, [r7, #8]
 8010fea:	607a      	str	r2, [r7, #4]
 8010fec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d101      	bne.n	8010ff8 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	e070      	b.n	80110da <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d101      	bne.n	8011006 <HAL_MDMA_Start_IT+0x26>
 8011002:	2302      	movs	r3, #2
 8011004:	e069      	b.n	80110da <HAL_MDMA_Start_IT+0xfa>
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	2201      	movs	r2, #1
 801100a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011014:	b2db      	uxtb	r3, r3
 8011016:	2b01      	cmp	r3, #1
 8011018:	d158      	bne.n	80110cc <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2202      	movs	r2, #2
 801101e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2200      	movs	r2, #0
 8011026:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	68da      	ldr	r2, [r3, #12]
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	f022 0201 	bic.w	r2, r2, #1
 8011036:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8011038:	69bb      	ldr	r3, [r7, #24]
 801103a:	9300      	str	r3, [sp, #0]
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	68b9      	ldr	r1, [r7, #8]
 8011042:	68f8      	ldr	r0, [r7, #12]
 8011044:	f000 fa26 	bl	8011494 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	68da      	ldr	r2, [r3, #12]
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f042 0206 	orr.w	r2, r2, #6
 8011056:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801105c:	2b00      	cmp	r3, #0
 801105e:	d007      	beq.n	8011070 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	68da      	ldr	r2, [r3, #12]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f042 0210 	orr.w	r2, r2, #16
 801106e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011074:	2b00      	cmp	r3, #0
 8011076:	d007      	beq.n	8011088 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	68da      	ldr	r2, [r3, #12]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	f042 0208 	orr.w	r2, r2, #8
 8011086:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801108c:	2b00      	cmp	r3, #0
 801108e:	d007      	beq.n	80110a0 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	68da      	ldr	r2, [r3, #12]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	f042 0220 	orr.w	r2, r2, #32
 801109e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	68da      	ldr	r2, [r3, #12]
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f042 0201 	orr.w	r2, r2, #1
 80110ae:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110b8:	d10e      	bne.n	80110d8 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	68da      	ldr	r2, [r3, #12]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80110c8:	60da      	str	r2, [r3, #12]
 80110ca:	e005      	b.n	80110d8 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2200      	movs	r2, #0
 80110d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 80110d4:	2302      	movs	r3, #2
 80110d6:	e000      	b.n	80110da <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 80110d8:	2300      	movs	r3, #0
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3710      	adds	r7, #16
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80110e2:	b580      	push	{r7, lr}
 80110e4:	b084      	sub	sp, #16
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 80110ea:	f7fb fdc7 	bl	800cc7c <HAL_GetTick>
 80110ee:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d101      	bne.n	80110fa <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 80110f6:	2301      	movs	r3, #1
 80110f8:	e04a      	b.n	8011190 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011100:	b2db      	uxtb	r3, r3
 8011102:	2b02      	cmp	r3, #2
 8011104:	d008      	beq.n	8011118 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2280      	movs	r2, #128	; 0x80
 801110a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2200      	movs	r2, #0
 8011110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8011114:	2301      	movs	r3, #1
 8011116:	e03b      	b.n	8011190 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	68da      	ldr	r2, [r3, #12]
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8011126:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	68da      	ldr	r2, [r3, #12]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f022 0201 	bic.w	r2, r2, #1
 8011136:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8011138:	e016      	b.n	8011168 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 801113a:	f7fb fd9f 	bl	800cc7c <HAL_GetTick>
 801113e:	4602      	mov	r2, r0
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	1ad3      	subs	r3, r2, r3
 8011144:	2b05      	cmp	r3, #5
 8011146:	d90f      	bls.n	8011168 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801114c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2203      	movs	r2, #3
 8011160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 8011164:	2301      	movs	r3, #1
 8011166:	e013      	b.n	8011190 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	f003 0301 	and.w	r3, r3, #1
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1e1      	bne.n	801113a <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	221f      	movs	r2, #31
 801117c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2200      	movs	r2, #0
 8011182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2201      	movs	r2, #1
 801118a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 801118e:	2300      	movs	r3, #0
}
 8011190:	4618      	mov	r0, r3
 8011192:	3710      	adds	r7, #16
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d101      	bne.n	80111aa <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80111a6:	2301      	movs	r3, #1
 80111a8:	e017      	b.n	80111da <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	2b02      	cmp	r3, #2
 80111b4:	d004      	beq.n	80111c0 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2280      	movs	r2, #128	; 0x80
 80111ba:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80111bc:	2301      	movs	r3, #1
 80111be:	e00c      	b.n	80111da <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2204      	movs	r2, #4
 80111c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68da      	ldr	r2, [r3, #12]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f022 0201 	bic.w	r2, r2, #1
 80111d6:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80111d8:	2300      	movs	r3, #0
}
 80111da:	4618      	mov	r0, r3
 80111dc:	370c      	adds	r7, #12
 80111de:	46bd      	mov	sp, r7
 80111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e4:	4770      	bx	lr
	...

080111e8 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b086      	sub	sp, #24
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80111f0:	2300      	movs	r3, #0
 80111f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80111f4:	4b9a      	ldr	r3, [pc, #616]	; (8011460 <HAL_MDMA_IRQHandler+0x278>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4a9a      	ldr	r2, [pc, #616]	; (8011464 <HAL_MDMA_IRQHandler+0x27c>)
 80111fa:	fba2 2303 	umull	r2, r3, r2, r3
 80111fe:	0a9b      	lsrs	r3, r3, #10
 8011200:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	461a      	mov	r2, r3
 8011208:	4b97      	ldr	r3, [pc, #604]	; (8011468 <HAL_MDMA_IRQHandler+0x280>)
 801120a:	4413      	add	r3, r2
 801120c:	099b      	lsrs	r3, r3, #6
 801120e:	f003 031f 	and.w	r3, r3, #31
 8011212:	2201      	movs	r2, #1
 8011214:	fa02 f303 	lsl.w	r3, r2, r3
 8011218:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801121a:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	4013      	ands	r3, r2
 8011224:	2b00      	cmp	r3, #0
 8011226:	f000 812e 	beq.w	8011486 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	f003 0301 	and.w	r3, r3, #1
 8011234:	2b00      	cmp	r3, #0
 8011236:	d054      	beq.n	80112e2 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	f003 0302 	and.w	r3, r3, #2
 8011242:	2b00      	cmp	r3, #0
 8011244:	d04d      	beq.n	80112e2 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	68da      	ldr	r2, [r3, #12]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	f022 0202 	bic.w	r2, r2, #2
 8011254:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011264:	2b00      	cmp	r3, #0
 8011266:	d106      	bne.n	8011276 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801126c:	f043 0201 	orr.w	r2, r3, #1
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	669a      	str	r2, [r3, #104]	; 0x68
 8011274:	e005      	b.n	8011282 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801127a:	f043 0202 	orr.w	r2, r3, #2
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011288:	2b00      	cmp	r3, #0
 801128a:	d005      	beq.n	8011298 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011290:	f043 0204 	orr.w	r2, r3, #4
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d005      	beq.n	80112ae <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112a6:	f043 0208 	orr.w	r2, r3, #8
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d005      	beq.n	80112c4 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112bc:	f043 0210 	orr.w	r2, r3, #16
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d005      	beq.n	80112da <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112d2:	f043 0220 	orr.w	r2, r3, #32
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2201      	movs	r2, #1
 80112e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	f003 0310 	and.w	r3, r3, #16
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d012      	beq.n	8011316 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	68db      	ldr	r3, [r3, #12]
 80112f6:	f003 0320 	and.w	r3, r3, #32
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d00b      	beq.n	8011316 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2210      	movs	r2, #16
 8011304:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801130a:	2b00      	cmp	r3, #0
 801130c:	d003      	beq.n	8011316 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	f003 0308 	and.w	r3, r3, #8
 8011320:	2b00      	cmp	r3, #0
 8011322:	d012      	beq.n	801134a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	f003 0310 	and.w	r3, r3, #16
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00b      	beq.n	801134a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2208      	movs	r2, #8
 8011338:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801133e:	2b00      	cmp	r3, #0
 8011340:	d003      	beq.n	801134a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f003 0304 	and.w	r3, r3, #4
 8011354:	2b00      	cmp	r3, #0
 8011356:	d012      	beq.n	801137e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	68db      	ldr	r3, [r3, #12]
 801135e:	f003 0308 	and.w	r3, r3, #8
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00b      	beq.n	801137e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	2204      	movs	r2, #4
 801136c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011372:	2b00      	cmp	r3, #0
 8011374:	d003      	beq.n	801137e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	f003 0302 	and.w	r3, r3, #2
 8011388:	2b00      	cmp	r3, #0
 801138a:	d039      	beq.n	8011400 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	f003 0304 	and.w	r3, r3, #4
 8011396:	2b00      	cmp	r3, #0
 8011398:	d032      	beq.n	8011400 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	68da      	ldr	r2, [r3, #12]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80113a8:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	2b04      	cmp	r3, #4
 80113b4:	d110      	bne.n	80113d8 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2200      	movs	r2, #0
 80113ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2201      	movs	r2, #1
 80113c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d05d      	beq.n	801148a <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	4798      	blx	r3
        }
        return;
 80113d6:	e058      	b.n	801148a <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2202      	movs	r2, #2
 80113de:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2201      	movs	r2, #1
 80113ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d003      	beq.n	8011400 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011404:	2b00      	cmp	r3, #0
 8011406:	d041      	beq.n	801148c <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2204      	movs	r2, #4
 801140c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	68da      	ldr	r2, [r3, #12]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f022 0201 	bic.w	r2, r2, #1
 801141e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	3301      	adds	r3, #1
 8011424:	60bb      	str	r3, [r7, #8]
 8011426:	697a      	ldr	r2, [r7, #20]
 8011428:	429a      	cmp	r2, r3
 801142a:	d307      	bcc.n	801143c <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	68db      	ldr	r3, [r3, #12]
 8011432:	f003 0301 	and.w	r3, r3, #1
 8011436:	2b00      	cmp	r3, #0
 8011438:	d1f2      	bne.n	8011420 <HAL_MDMA_IRQHandler+0x238>
 801143a:	e000      	b.n	801143e <HAL_MDMA_IRQHandler+0x256>
        break;
 801143c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2200      	movs	r2, #0
 8011442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	f003 0301 	and.w	r3, r3, #1
 8011450:	2b00      	cmp	r3, #0
 8011452:	d00b      	beq.n	801146c <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2203      	movs	r2, #3
 8011458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801145c:	e00a      	b.n	8011474 <HAL_MDMA_IRQHandler+0x28c>
 801145e:	bf00      	nop
 8011460:	24000054 	.word	0x24000054
 8011464:	1b4e81b5 	.word	0x1b4e81b5
 8011468:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2201      	movs	r2, #1
 8011470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011478:	2b00      	cmp	r3, #0
 801147a:	d007      	beq.n	801148c <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	4798      	blx	r3
 8011484:	e002      	b.n	801148c <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8011486:	bf00      	nop
 8011488:	e000      	b.n	801148c <HAL_MDMA_IRQHandler+0x2a4>
        return;
 801148a:	bf00      	nop
    }
  }
}
 801148c:	3718      	adds	r7, #24
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop

08011494 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8011494:	b480      	push	{r7}
 8011496:	b087      	sub	sp, #28
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	607a      	str	r2, [r7, #4]
 80114a0:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	695a      	ldr	r2, [r3, #20]
 80114a8:	4b31      	ldr	r3, [pc, #196]	; (8011570 <MDMA_SetConfig+0xdc>)
 80114aa:	4013      	ands	r3, r2
 80114ac:	683a      	ldr	r2, [r7, #0]
 80114ae:	f3c2 0110 	ubfx	r1, r2, #0, #17
 80114b2:	68fa      	ldr	r2, [r7, #12]
 80114b4:	6812      	ldr	r2, [r2, #0]
 80114b6:	430b      	orrs	r3, r1
 80114b8:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	695b      	ldr	r3, [r3, #20]
 80114c0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80114c4:	6a3b      	ldr	r3, [r7, #32]
 80114c6:	3b01      	subs	r3, #1
 80114c8:	051a      	lsls	r2, r3, #20
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	430a      	orrs	r2, r1
 80114d0:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	221f      	movs	r2, #31
 80114d8:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	68ba      	ldr	r2, [r7, #8]
 80114e8:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80114f0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80114f8:	d002      	beq.n	8011500 <MDMA_SetConfig+0x6c>
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d108      	bne.n	8011512 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801150e:	629a      	str	r2, [r3, #40]	; 0x28
 8011510:	e007      	b.n	8011522 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011520:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011528:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011530:	d002      	beq.n	8011538 <MDMA_SetConfig+0xa4>
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d108      	bne.n	801154a <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011546:	629a      	str	r2, [r3, #40]	; 0x28
 8011548:	e007      	b.n	801155a <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8011558:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011564:	bf00      	nop
 8011566:	371c      	adds	r7, #28
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr
 8011570:	fffe0000 	.word	0xfffe0000

08011574 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8011574:	b480      	push	{r7}
 8011576:	b085      	sub	sp, #20
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	68d9      	ldr	r1, [r3, #12]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	691a      	ldr	r2, [r3, #16]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	430a      	orrs	r2, r1
 801158a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	695a      	ldr	r2, [r3, #20]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	699b      	ldr	r3, [r3, #24]
 8011594:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801159a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6a1b      	ldr	r3, [r3, #32]
 80115a0:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80115a6:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ac:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80115b2:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115b8:	3b01      	subs	r3, #1
 80115ba:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80115bc:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80115c8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80115ca:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115d4:	d107      	bne.n	80115e6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	691a      	ldr	r2, [r3, #16]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80115e4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2200      	movs	r2, #0
 80115ec:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	da11      	bge.n	801161a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	695a      	ldr	r2, [r3, #20]
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011604:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801160a:	425b      	negs	r3, r3
 801160c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	68fa      	ldr	r2, [r7, #12]
 8011614:	b292      	uxth	r2, r2
 8011616:	621a      	str	r2, [r3, #32]
 8011618:	e006      	b.n	8011628 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801161e:	461a      	mov	r2, r3
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	b292      	uxth	r2, r2
 8011626:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801162c:	2b00      	cmp	r3, #0
 801162e:	da15      	bge.n	801165c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	695a      	ldr	r2, [r3, #20]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 801163e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011644:	425b      	negs	r3, r3
 8011646:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	6a19      	ldr	r1, [r3, #32]
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	041a      	lsls	r2, r3, #16
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	430a      	orrs	r2, r1
 8011658:	621a      	str	r2, [r3, #32]
 801165a:	e009      	b.n	8011670 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	6a19      	ldr	r1, [r3, #32]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011666:	041a      	lsls	r2, r3, #16
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	430a      	orrs	r2, r1
 801166e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011678:	d006      	beq.n	8011688 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	685a      	ldr	r2, [r3, #4]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	b2d2      	uxtb	r2, r2
 8011684:	629a      	str	r2, [r3, #40]	; 0x28
 8011686:	e003      	b.n	8011690 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	2200      	movs	r2, #0
 801168e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2200      	movs	r2, #0
 8011696:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011698:	bf00      	nop
 801169a:	3714      	adds	r7, #20
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr

080116a4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b086      	sub	sp, #24
 80116a8:	af02      	add	r7, sp, #8
 80116aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80116ac:	2300      	movs	r3, #0
 80116ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80116b0:	f7fb fae4 	bl	800cc7c <HAL_GetTick>
 80116b4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d102      	bne.n	80116c2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80116bc:	2301      	movs	r3, #1
 80116be:	73fb      	strb	r3, [r7, #15]
 80116c0:	e0a5      	b.n	801180e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f040 809e 	bne.w	801180e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f7f5 fb72 	bl	8006dbc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80116d8:	f241 3188 	movw	r1, #5000	; 0x1388
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f000 fd44 	bl	801216a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	689a      	ldr	r2, [r3, #8]
 80116e8:	4b4b      	ldr	r3, [pc, #300]	; (8011818 <HAL_OSPI_Init+0x174>)
 80116ea:	4013      	ands	r3, r2
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	68d1      	ldr	r1, [r2, #12]
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	6912      	ldr	r2, [r2, #16]
 80116f4:	3a01      	subs	r2, #1
 80116f6:	0412      	lsls	r2, r2, #16
 80116f8:	4311      	orrs	r1, r2
 80116fa:	687a      	ldr	r2, [r7, #4]
 80116fc:	6952      	ldr	r2, [r2, #20]
 80116fe:	3a01      	subs	r2, #1
 8011700:	0212      	lsls	r2, r2, #8
 8011702:	4311      	orrs	r1, r2
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011708:	4311      	orrs	r1, r2
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	69d2      	ldr	r2, [r2, #28]
 801170e:	4311      	orrs	r1, r2
 8011710:	687a      	ldr	r2, [r7, #4]
 8011712:	6812      	ldr	r2, [r2, #0]
 8011714:	430b      	orrs	r3, r1
 8011716:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6a1a      	ldr	r2, [r3, #32]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	430a      	orrs	r2, r1
 801172c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011732:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	430a      	orrs	r2, r1
 801173e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011748:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	3b01      	subs	r3, #1
 801175a:	021a      	lsls	r2, r3, #8
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	430a      	orrs	r2, r1
 8011762:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011768:	9300      	str	r3, [sp, #0]
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	2200      	movs	r2, #0
 801176e:	2120      	movs	r1, #32
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f000 fd45 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8011776:	4603      	mov	r3, r0
 8011778:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801177a:	7bfb      	ldrb	r3, [r7, #15]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d146      	bne.n	801180e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	68db      	ldr	r3, [r3, #12]
 8011786:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801178e:	1e5a      	subs	r2, r3, #1
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	430a      	orrs	r2, r1
 8011796:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	689a      	ldr	r2, [r3, #8]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	430a      	orrs	r2, r1
 80117ac:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80117b6:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117c2:	431a      	orrs	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	430a      	orrs	r2, r1
 80117ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f042 0201 	orr.w	r2, r2, #1
 80117dc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	699b      	ldr	r3, [r3, #24]
 80117e2:	2b02      	cmp	r3, #2
 80117e4:	d107      	bne.n	80117f6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	689a      	ldr	r2, [r3, #8]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f042 0202 	orr.w	r2, r2, #2
 80117f4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	68db      	ldr	r3, [r3, #12]
 80117fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80117fe:	d103      	bne.n	8011808 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2201      	movs	r2, #1
 8011804:	651a      	str	r2, [r3, #80]	; 0x50
 8011806:	e002      	b.n	801180e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2202      	movs	r2, #2
 801180c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 801180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011810:	4618      	mov	r0, r3
 8011812:	3710      	adds	r7, #16
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	f8e0f8f4 	.word	0xf8e0f8f4

0801181c <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011824:	2300      	movs	r3, #0
 8011826:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d102      	bne.n	8011834 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 801182e:	2301      	movs	r3, #1
 8011830:	73fb      	strb	r3, [r7, #15]
 8011832:	e015      	b.n	8011860 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	f022 0201 	bic.w	r2, r2, #1
 8011842:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	689a      	ldr	r2, [r3, #8]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f022 0202 	bic.w	r2, r2, #2
 8011852:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7f5 fb13 	bl	8006e80 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2200      	movs	r2, #0
 801185e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 8011860:	7bfb      	ldrb	r3, [r7, #15]
}
 8011862:	4618      	mov	r0, r3
 8011864:	3710      	adds	r7, #16
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
	...

0801186c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b086      	sub	sp, #24
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	3350      	adds	r3, #80	; 0x50
 801187a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	6a1b      	ldr	r3, [r3, #32]
 8011882:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011890:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	f003 0304 	and.w	r3, r3, #4
 8011898:	2b00      	cmp	r3, #0
 801189a:	d03a      	beq.n	8011912 <HAL_OSPI_IRQHandler+0xa6>
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d035      	beq.n	8011912 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	2b18      	cmp	r3, #24
 80118aa:	d10f      	bne.n	80118cc <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118b0:	781a      	ldrb	r2, [r3, #0]
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118ba:	1c5a      	adds	r2, r3, #1
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118c4:	1e5a      	subs	r2, r3, #1
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	649a      	str	r2, [r3, #72]	; 0x48
 80118ca:	e012      	b.n	80118f2 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	2b28      	cmp	r3, #40	; 0x28
 80118d0:	d10f      	bne.n	80118f2 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118d6:	697a      	ldr	r2, [r7, #20]
 80118d8:	7812      	ldrb	r2, [r2, #0]
 80118da:	b2d2      	uxtb	r2, r2
 80118dc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118e2:	1c5a      	adds	r2, r3, #1
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118ec:	1e5a      	subs	r2, r3, #1
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d107      	bne.n	801190a <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011908:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f000 fb7c 	bl	8012008 <HAL_OSPI_FifoThresholdCallback>
 8011910:	e0e7      	b.n	8011ae2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	f003 0302 	and.w	r3, r3, #2
 8011918:	2b00      	cmp	r3, #0
 801191a:	d067      	beq.n	80119ec <HAL_OSPI_IRQHandler+0x180>
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011922:	2b00      	cmp	r3, #0
 8011924:	d062      	beq.n	80119ec <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	2b28      	cmp	r3, #40	; 0x28
 801192a:	d131      	bne.n	8011990 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011930:	2b00      	cmp	r3, #0
 8011932:	d015      	beq.n	8011960 <HAL_OSPI_IRQHandler+0xf4>
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801193a:	2b00      	cmp	r3, #0
 801193c:	d010      	beq.n	8011960 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011942:	697a      	ldr	r2, [r7, #20]
 8011944:	7812      	ldrb	r2, [r2, #0]
 8011946:	b2d2      	uxtb	r2, r2
 8011948:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801194e:	1c5a      	adds	r2, r3, #1
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011958:	1e5a      	subs	r2, r3, #1
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801195e:	e0bd      	b.n	8011adc <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011964:	2b00      	cmp	r3, #0
 8011966:	f040 80b9 	bne.w	8011adc <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	2202      	movs	r2, #2
 8011970:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8011980:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2202      	movs	r2, #2
 8011986:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f000 fb51 	bl	8012030 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801198e:	e0a5      	b.n	8011adc <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	2202      	movs	r2, #2
 8011996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80119a6:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2202      	movs	r2, #2
 80119ac:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	2b18      	cmp	r3, #24
 80119b2:	d103      	bne.n	80119bc <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 fb45 	bl	8012044 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80119ba:	e08f      	b.n	8011adc <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	2b08      	cmp	r3, #8
 80119c0:	d103      	bne.n	80119ca <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 fb2a 	bl	801201c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80119c8:	e088      	b.n	8011adc <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119d0:	f040 8084 	bne.w	8011adc <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d103      	bne.n	80119e4 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f000 fb09 	bl	8011ff4 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80119e2:	e07b      	b.n	8011adc <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f000 fafb 	bl	8011fe0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80119ea:	e077      	b.n	8011adc <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	f003 0308 	and.w	r3, r3, #8
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d01e      	beq.n	8011a34 <HAL_OSPI_IRQHandler+0x1c8>
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d019      	beq.n	8011a34 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	2208      	movs	r2, #8
 8011a06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00a      	beq.n	8011a2c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8011a24:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2202      	movs	r2, #2
 8011a2a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 fb13 	bl	8012058 <HAL_OSPI_StatusMatchCallback>
 8011a32:	e056      	b.n	8011ae2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8011a34:	693b      	ldr	r3, [r7, #16]
 8011a36:	f003 0301 	and.w	r3, r3, #1
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d03c      	beq.n	8011ab8 <HAL_OSPI_IRQHandler+0x24c>
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d037      	beq.n	8011ab8 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8011a5e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2202      	movs	r2, #2
 8011a64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f003 0304 	and.w	r3, r3, #4
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d01a      	beq.n	8011aaa <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f022 0204 	bic.w	r2, r2, #4
 8011a82:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a88:	4a18      	ldr	r2, [pc, #96]	; (8011aec <HAL_OSPI_IRQHandler+0x280>)
 8011a8a:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7ff fb81 	bl	8011198 <HAL_MDMA_Abort_IT>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d021      	beq.n	8011ae0 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2202      	movs	r2, #2
 8011aa0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f000 fa9c 	bl	8011fe0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011aa8:	e01a      	b.n	8011ae0 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2202      	movs	r2, #2
 8011aae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f000 fa95 	bl	8011fe0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011ab6:	e013      	b.n	8011ae0 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	f003 0310 	and.w	r3, r3, #16
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d00f      	beq.n	8011ae2 <HAL_OSPI_IRQHandler+0x276>
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d00a      	beq.n	8011ae2 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	2210      	movs	r2, #16
 8011ad2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f000 fac9 	bl	801206c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011ada:	e002      	b.n	8011ae2 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011adc:	bf00      	nop
 8011ade:	e000      	b.n	8011ae2 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011ae0:	bf00      	nop
}
 8011ae2:	bf00      	nop
 8011ae4:	3718      	adds	r7, #24
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}
 8011aea:	bf00      	nop
 8011aec:	08012189 	.word	0x08012189

08011af0 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b08a      	sub	sp, #40	; 0x28
 8011af4:	af02      	add	r7, sp, #8
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8011afc:	f7fb f8be 	bl	800cc7c <HAL_GetTick>
 8011b00:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b06:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b0c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	d104      	bne.n	8011b1e <HAL_OSPI_Command+0x2e>
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011b1c:	d115      	bne.n	8011b4a <HAL_OSPI_Command+0x5a>
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	2b14      	cmp	r3, #20
 8011b22:	d107      	bne.n	8011b34 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	2b02      	cmp	r3, #2
 8011b2a:	d00e      	beq.n	8011b4a <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	2b03      	cmp	r3, #3
 8011b32:	d00a      	beq.n	8011b4a <HAL_OSPI_Command+0x5a>
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	2b24      	cmp	r3, #36	; 0x24
 8011b38:	d15b      	bne.n	8011bf2 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d003      	beq.n	8011b4a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8011b46:	2b03      	cmp	r3, #3
 8011b48:	d153      	bne.n	8011bf2 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	9300      	str	r3, [sp, #0]
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	2200      	movs	r2, #0
 8011b52:	2120      	movs	r1, #32
 8011b54:	68f8      	ldr	r0, [r7, #12]
 8011b56:	f000 fb53 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8011b5e:	7ffb      	ldrb	r3, [r7, #31]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d14c      	bne.n	8011bfe <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	2200      	movs	r2, #0
 8011b68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8011b6a:	68b9      	ldr	r1, [r7, #8]
 8011b6c:	68f8      	ldr	r0, [r7, #12]
 8011b6e:	f000 fb7f 	bl	8012270 <OSPI_ConfigCmd>
 8011b72:	4603      	mov	r3, r0
 8011b74:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8011b76:	7ffb      	ldrb	r3, [r7, #31]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d140      	bne.n	8011bfe <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d10e      	bne.n	8011ba2 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	9300      	str	r3, [sp, #0]
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	2201      	movs	r2, #1
 8011b8c:	2102      	movs	r1, #2
 8011b8e:	68f8      	ldr	r0, [r7, #12]
 8011b90:	f000 fb36 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8011b94:	4603      	mov	r3, r0
 8011b96:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	2202      	movs	r2, #2
 8011b9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8011ba0:	e02d      	b.n	8011bfe <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d103      	bne.n	8011bb2 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2204      	movs	r2, #4
 8011bae:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011bb0:	e025      	b.n	8011bfe <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d10b      	bne.n	8011bd2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bbe:	2b24      	cmp	r3, #36	; 0x24
 8011bc0:	d103      	bne.n	8011bca <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2204      	movs	r2, #4
 8011bc6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011bc8:	e019      	b.n	8011bfe <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2214      	movs	r2, #20
 8011bce:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011bd0:	e015      	b.n	8011bfe <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	2b02      	cmp	r3, #2
 8011bd8:	d111      	bne.n	8011bfe <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bde:	2b14      	cmp	r3, #20
 8011be0:	d103      	bne.n	8011bea <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2204      	movs	r2, #4
 8011be6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011be8:	e009      	b.n	8011bfe <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2224      	movs	r2, #36	; 0x24
 8011bee:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011bf0:	e005      	b.n	8011bfe <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2210      	movs	r2, #16
 8011bfa:	655a      	str	r2, [r3, #84]	; 0x54
 8011bfc:	e000      	b.n	8011c00 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8011bfe:	bf00      	nop
  }

  /* Return function status */
  return status;
 8011c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3720      	adds	r7, #32
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8011c0a:	b580      	push	{r7, lr}
 8011c0c:	b08a      	sub	sp, #40	; 0x28
 8011c0e:	af02      	add	r7, sp, #8
 8011c10:	60f8      	str	r0, [r7, #12]
 8011c12:	60b9      	str	r1, [r7, #8]
 8011c14:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011c16:	f7fb f831 	bl	800cc7c <HAL_GetTick>
 8011c1a:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	3350      	adds	r3, #80	; 0x50
 8011c22:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d105      	bne.n	8011c36 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2208      	movs	r2, #8
 8011c32:	655a      	str	r2, [r3, #84]	; 0x54
 8011c34:	e057      	b.n	8011ce6 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c3a:	2b04      	cmp	r3, #4
 8011c3c:	d14e      	bne.n	8011cdc <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c44:	1c5a      	adds	r2, r3, #1
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	68ba      	ldr	r2, [r7, #8]
 8011c56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	681a      	ldr	r2, [r3, #0]
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011c66:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	9300      	str	r3, [sp, #0]
 8011c6c:	69bb      	ldr	r3, [r7, #24]
 8011c6e:	2201      	movs	r2, #1
 8011c70:	2104      	movs	r1, #4
 8011c72:	68f8      	ldr	r0, [r7, #12]
 8011c74:	f000 fac4 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8011c7c:	7ffb      	ldrb	r3, [r7, #31]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d113      	bne.n	8011caa <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c86:	781a      	ldrb	r2, [r3, #0]
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c90:	1c5a      	adds	r2, r3, #1
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c9a:	1e5a      	subs	r2, r3, #1
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d1df      	bne.n	8011c68 <HAL_OSPI_Transmit+0x5e>
 8011ca8:	e000      	b.n	8011cac <HAL_OSPI_Transmit+0xa2>
          break;
 8011caa:	bf00      	nop

      if (status == HAL_OK)
 8011cac:	7ffb      	ldrb	r3, [r7, #31]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d119      	bne.n	8011ce6 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	9300      	str	r3, [sp, #0]
 8011cb6:	69bb      	ldr	r3, [r7, #24]
 8011cb8:	2201      	movs	r2, #1
 8011cba:	2102      	movs	r1, #2
 8011cbc:	68f8      	ldr	r0, [r7, #12]
 8011cbe:	f000 fa9f 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8011cc6:	7ffb      	ldrb	r3, [r7, #31]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d10c      	bne.n	8011ce6 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	2202      	movs	r2, #2
 8011cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	2202      	movs	r2, #2
 8011cd8:	651a      	str	r2, [r3, #80]	; 0x50
 8011cda:	e004      	b.n	8011ce6 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2210      	movs	r2, #16
 8011ce4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8011ce6:	7ffb      	ldrb	r3, [r7, #31]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3720      	adds	r7, #32
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}

08011cf0 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b08c      	sub	sp, #48	; 0x30
 8011cf4:	af02      	add	r7, sp, #8
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011cfc:	f7fa ffbe 	bl	800cc7c <HAL_GetTick>
 8011d00:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	3350      	adds	r3, #80	; 0x50
 8011d08:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d10:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8011d1a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d106      	bne.n	8011d30 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8011d22:	2301      	movs	r3, #1
 8011d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2208      	movs	r2, #8
 8011d2c:	655a      	str	r2, [r3, #84]	; 0x54
 8011d2e:	e07c      	b.n	8011e2a <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d34:	2b04      	cmp	r3, #4
 8011d36:	d172      	bne.n	8011e1e <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d3e:	1c5a      	adds	r2, r3, #1
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	68ba      	ldr	r2, [r7, #8]
 8011d50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011d64:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	68db      	ldr	r3, [r3, #12]
 8011d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011d6e:	d104      	bne.n	8011d7a <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	69ba      	ldr	r2, [r7, #24]
 8011d76:	649a      	str	r2, [r3, #72]	; 0x48
 8011d78:	e011      	b.n	8011d9e <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8011d82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d004      	beq.n	8011d94 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	69ba      	ldr	r2, [r7, #24]
 8011d90:	649a      	str	r2, [r3, #72]	; 0x48
 8011d92:	e004      	b.n	8011d9e <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	697a      	ldr	r2, [r7, #20]
 8011d9a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	9300      	str	r3, [sp, #0]
 8011da2:	6a3b      	ldr	r3, [r7, #32]
 8011da4:	2201      	movs	r2, #1
 8011da6:	2106      	movs	r1, #6
 8011da8:	68f8      	ldr	r0, [r7, #12]
 8011daa:	f000 fa29 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8011dae:	4603      	mov	r3, r0
 8011db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8011db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d114      	bne.n	8011de6 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dc0:	69fa      	ldr	r2, [r7, #28]
 8011dc2:	7812      	ldrb	r2, [r2, #0]
 8011dc4:	b2d2      	uxtb	r2, r2
 8011dc6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dcc:	1c5a      	adds	r2, r3, #1
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011dd6:	1e5a      	subs	r2, r3, #1
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d1dc      	bne.n	8011d9e <HAL_OSPI_Receive+0xae>
 8011de4:	e000      	b.n	8011de8 <HAL_OSPI_Receive+0xf8>
          break;
 8011de6:	bf00      	nop

      if (status == HAL_OK)
 8011de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d11c      	bne.n	8011e2a <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	9300      	str	r3, [sp, #0]
 8011df4:	6a3b      	ldr	r3, [r7, #32]
 8011df6:	2201      	movs	r2, #1
 8011df8:	2102      	movs	r1, #2
 8011dfa:	68f8      	ldr	r0, [r7, #12]
 8011dfc:	f000 fa00 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8011e00:	4603      	mov	r3, r0
 8011e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8011e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d10d      	bne.n	8011e2a <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	2202      	movs	r2, #2
 8011e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	2202      	movs	r2, #2
 8011e1a:	651a      	str	r2, [r3, #80]	; 0x50
 8011e1c:	e005      	b.n	8011e2a <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2210      	movs	r2, #16
 8011e28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8011e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3728      	adds	r7, #40	; 0x28
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	b08a      	sub	sp, #40	; 0x28
 8011e3a:	af02      	add	r7, sp, #8
 8011e3c:	60f8      	str	r0, [r7, #12]
 8011e3e:	60b9      	str	r1, [r7, #8]
 8011e40:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011e42:	f7fa ff1b 	bl	800cc7c <HAL_GetTick>
 8011e46:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e4e:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8011e58:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e5e:	2b04      	cmp	r3, #4
 8011e60:	d164      	bne.n	8011f2c <HAL_OSPI_AutoPolling+0xf6>
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011e6a:	d15f      	bne.n	8011f2c <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	9300      	str	r3, [sp, #0]
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	2200      	movs	r2, #0
 8011e74:	2120      	movs	r1, #32
 8011e76:	68f8      	ldr	r0, [r7, #12]
 8011e78:	f000 f9c2 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8011e80:	7ffb      	ldrb	r3, [r7, #31]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d158      	bne.n	8011f38 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	68ba      	ldr	r2, [r7, #8]
 8011e8c:	6812      	ldr	r2, [r2, #0]
 8011e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	6852      	ldr	r2, [r2, #4]
 8011e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	68ba      	ldr	r2, [r7, #8]
 8011ea4:	6912      	ldr	r2, [r2, #16]
 8011ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	6899      	ldr	r1, [r3, #8]
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	430b      	orrs	r3, r1
 8011ebe:	431a      	orrs	r2, r3
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8011ec8:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011ed2:	d104      	bne.n	8011ede <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	697a      	ldr	r2, [r7, #20]
 8011eda:	649a      	str	r2, [r3, #72]	; 0x48
 8011edc:	e011      	b.n	8011f02 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8011ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d004      	beq.n	8011ef8 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	697a      	ldr	r2, [r7, #20]
 8011ef4:	649a      	str	r2, [r3, #72]	; 0x48
 8011ef6:	e004      	b.n	8011f02 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	693a      	ldr	r2, [r7, #16]
 8011efe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	9300      	str	r3, [sp, #0]
 8011f06:	69bb      	ldr	r3, [r7, #24]
 8011f08:	2201      	movs	r2, #1
 8011f0a:	2108      	movs	r1, #8
 8011f0c:	68f8      	ldr	r0, [r7, #12]
 8011f0e:	f000 f977 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8011f12:	4603      	mov	r3, r0
 8011f14:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8011f16:	7ffb      	ldrb	r3, [r7, #31]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d10d      	bne.n	8011f38 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	2208      	movs	r2, #8
 8011f22:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	2202      	movs	r2, #2
 8011f28:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011f2a:	e005      	b.n	8011f38 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2210      	movs	r2, #16
 8011f34:	655a      	str	r2, [r3, #84]	; 0x54
 8011f36:	e000      	b.n	8011f3a <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8011f38:	bf00      	nop
  }

  /* Return function status */
  return status;
 8011f3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3720      	adds	r7, #32
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b086      	sub	sp, #24
 8011f48:	af02      	add	r7, sp, #8
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011f4e:	f7fa fe95 	bl	800cc7c <HAL_GetTick>
 8011f52:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f58:	2b04      	cmp	r3, #4
 8011f5a:	d134      	bne.n	8011fc6 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f60:	9300      	str	r3, [sp, #0]
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	2200      	movs	r2, #0
 8011f66:	2120      	movs	r1, #32
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f000 f949 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8011f72:	7bfb      	ldrb	r3, [r7, #15]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d12b      	bne.n	8011fd0 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2288      	movs	r2, #136	; 0x88
 8011f7c:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	2b08      	cmp	r3, #8
 8011f84:	d111      	bne.n	8011faa <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	683a      	ldr	r2, [r7, #0]
 8011f8c:	6852      	ldr	r2, [r2, #4]
 8011f8e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2210      	movs	r2, #16
 8011f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	681a      	ldr	r2, [r3, #0]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011fa8:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	681a      	ldr	r2, [r3, #0]
 8011fb0:	4b0a      	ldr	r3, [pc, #40]	; (8011fdc <HAL_OSPI_MemoryMapped+0x98>)
 8011fb2:	4013      	ands	r3, r2
 8011fb4:	683a      	ldr	r2, [r7, #0]
 8011fb6:	6812      	ldr	r2, [r2, #0]
 8011fb8:	431a      	orrs	r2, r3
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8011fc2:	601a      	str	r2, [r3, #0]
 8011fc4:	e004      	b.n	8011fd0 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2210      	movs	r2, #16
 8011fce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8011fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	cffffff7 	.word	0xcffffff7

08011fe0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8011fe8:	bf00      	nop
 8011fea:	370c      	adds	r7, #12
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr

08011ff4 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8011ffc:	bf00      	nop
 8011ffe:	370c      	adds	r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8012008:	b480      	push	{r7}
 801200a:	b083      	sub	sp, #12
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8012010:	bf00      	nop
 8012012:	370c      	adds	r7, #12
 8012014:	46bd      	mov	sp, r7
 8012016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201a:	4770      	bx	lr

0801201c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 801201c:	b480      	push	{r7}
 801201e:	b083      	sub	sp, #12
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8012024:	bf00      	nop
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr

08012030 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8012038:	bf00      	nop
 801203a:	370c      	adds	r7, #12
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr

08012044 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8012044:	b480      	push	{r7}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 801204c:	bf00      	nop
 801204e:	370c      	adds	r7, #12
 8012050:	46bd      	mov	sp, r7
 8012052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012056:	4770      	bx	lr

08012058 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8012058:	b480      	push	{r7}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8012060:	bf00      	nop
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr

0801206c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8012074:	bf00      	nop
 8012076:	370c      	adds	r7, #12
 8012078:	46bd      	mov	sp, r7
 801207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207e:	4770      	bx	lr

08012080 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b088      	sub	sp, #32
 8012084:	af02      	add	r7, sp, #8
 8012086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012088:	2300      	movs	r3, #0
 801208a:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 801208c:	f7fa fdf6 	bl	800cc7c <HAL_GetTick>
 8012090:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012096:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f003 0308 	and.w	r3, r3, #8
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d104      	bne.n	80120ac <HAL_OSPI_Abort+0x2c>
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	f003 0304 	and.w	r3, r3, #4
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d052      	beq.n	8012152 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f003 0304 	and.w	r3, r3, #4
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d014      	beq.n	80120e4 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	f022 0204 	bic.w	r2, r2, #4
 80120c8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7ff f807 	bl	80110e2 <HAL_MDMA_Abort>
 80120d4:	4603      	mov	r3, r0
 80120d6:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80120d8:	7dfb      	ldrb	r3, [r7, #23]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d002      	beq.n	80120e4 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2204      	movs	r2, #4
 80120e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	6a1b      	ldr	r3, [r3, #32]
 80120ea:	f003 0320 	and.w	r3, r3, #32
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d02b      	beq.n	801214a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	681a      	ldr	r2, [r3, #0]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f042 0202 	orr.w	r2, r2, #2
 8012100:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	2201      	movs	r2, #1
 801210c:	2102      	movs	r1, #2
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f000 f876 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8012114:	4603      	mov	r3, r0
 8012116:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8012118:	7dfb      	ldrb	r3, [r7, #23]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d11f      	bne.n	801215e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	2202      	movs	r2, #2
 8012124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	2200      	movs	r2, #0
 8012130:	2120      	movs	r1, #32
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f000 f864 	bl	8012200 <OSPI_WaitFlagStateUntilTimeout>
 8012138:	4603      	mov	r3, r0
 801213a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 801213c:	7dfb      	ldrb	r3, [r7, #23]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d10d      	bne.n	801215e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2202      	movs	r2, #2
 8012146:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8012148:	e009      	b.n	801215e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2202      	movs	r2, #2
 801214e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8012150:	e005      	b.n	801215e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8012152:	2301      	movs	r3, #1
 8012154:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2210      	movs	r2, #16
 801215a:	655a      	str	r2, [r3, #84]	; 0x54
 801215c:	e000      	b.n	8012160 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 801215e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8012160:	7dfb      	ldrb	r3, [r7, #23]
}
 8012162:	4618      	mov	r0, r3
 8012164:	3718      	adds	r7, #24
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}

0801216a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 801216a:	b480      	push	{r7}
 801216c:	b083      	sub	sp, #12
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
 8012172:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	683a      	ldr	r2, [r7, #0]
 8012178:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 801217a:	2300      	movs	r3, #0
}
 801217c:	4618      	mov	r0, r3
 801217e:	370c      	adds	r7, #12
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr

08012188 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012194:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2200      	movs	r2, #0
 801219a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80121a4:	d122      	bne.n	80121ec <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	6a1b      	ldr	r3, [r3, #32]
 80121ac:	f003 0320 	and.w	r3, r3, #32
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d014      	beq.n	80121de <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2202      	movs	r2, #2
 80121ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80121ca:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f042 0202 	orr.w	r2, r2, #2
 80121da:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 80121dc:	e00c      	b.n	80121f8 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2202      	movs	r2, #2
 80121e2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 80121e4:	68f8      	ldr	r0, [r7, #12]
 80121e6:	f7ff ff05 	bl	8011ff4 <HAL_OSPI_AbortCpltCallback>
}
 80121ea:	e005      	b.n	80121f8 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2202      	movs	r2, #2
 80121f0:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 80121f2:	68f8      	ldr	r0, [r7, #12]
 80121f4:	f7ff fef4 	bl	8011fe0 <HAL_OSPI_ErrorCallback>
}
 80121f8:	bf00      	nop
 80121fa:	3710      	adds	r7, #16
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	60b9      	str	r1, [r7, #8]
 801220a:	603b      	str	r3, [r7, #0]
 801220c:	4613      	mov	r3, r2
 801220e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8012210:	e01a      	b.n	8012248 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012212:	69bb      	ldr	r3, [r7, #24]
 8012214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012218:	d016      	beq.n	8012248 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801221a:	f7fa fd2f 	bl	800cc7c <HAL_GetTick>
 801221e:	4602      	mov	r2, r0
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	1ad3      	subs	r3, r2, r3
 8012224:	69ba      	ldr	r2, [r7, #24]
 8012226:	429a      	cmp	r2, r3
 8012228:	d302      	bcc.n	8012230 <OSPI_WaitFlagStateUntilTimeout+0x30>
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d10b      	bne.n	8012248 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012236:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801223c:	f043 0201 	orr.w	r2, r3, #1
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8012244:	2301      	movs	r3, #1
 8012246:	e00e      	b.n	8012266 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	6a1a      	ldr	r2, [r3, #32]
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	4013      	ands	r3, r2
 8012252:	2b00      	cmp	r3, #0
 8012254:	bf14      	ite	ne
 8012256:	2301      	movne	r3, #1
 8012258:	2300      	moveq	r3, #0
 801225a:	b2db      	uxtb	r3, r3
 801225c:	461a      	mov	r2, r3
 801225e:	79fb      	ldrb	r3, [r7, #7]
 8012260:	429a      	cmp	r2, r3
 8012262:	d1d6      	bne.n	8012212 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012264:	2300      	movs	r3, #0
}
 8012266:	4618      	mov	r0, r3
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
	...

08012270 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8012270:	b480      	push	{r7}
 8012272:	b089      	sub	sp, #36	; 0x24
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801227a:	2300      	movs	r3, #0
 801227c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	681a      	ldr	r2, [r3, #0]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801228c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	689b      	ldr	r3, [r3, #8]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d10a      	bne.n	80122ac <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	685a      	ldr	r2, [r3, #4]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	430a      	orrs	r2, r1
 80122aa:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	2b02      	cmp	r3, #2
 80122b2:	d114      	bne.n	80122de <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80122bc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80122c6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80122d0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80122da:	60fb      	str	r3, [r7, #12]
 80122dc:	e02c      	b.n	8012338 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b03      	cmp	r3, #3
 80122e4:	d114      	bne.n	8012310 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80122ee:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80122f8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012302:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801230c:	60fb      	str	r3, [r7, #12]
 801230e:	e013      	b.n	8012338 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012318:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012322:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801232c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012336:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012340:	431a      	orrs	r2, r3
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801234a:	2b00      	cmp	r3, #0
 801234c:	d012      	beq.n	8012374 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012366:	4319      	orrs	r1, r3
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801236c:	430b      	orrs	r3, r1
 801236e:	431a      	orrs	r2, r3
 8012370:	69bb      	ldr	r3, [r7, #24]
 8012372:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	f023 021f 	bic.w	r2, r3, #31
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012380:	431a      	orrs	r2, r3
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801238a:	2b00      	cmp	r3, #0
 801238c:	d009      	beq.n	80123a2 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d105      	bne.n	80123a2 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	3a01      	subs	r2, #1
 80123a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	68db      	ldr	r3, [r3, #12]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f000 8095 	beq.w	80124d6 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	69db      	ldr	r3, [r3, #28]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d053      	beq.n	801245c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d01e      	beq.n	80123fa <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80123bc:	69bb      	ldr	r3, [r7, #24]
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	4b64      	ldr	r3, [pc, #400]	; (8012554 <OSPI_ConfigCmd+0x2e4>)
 80123c2:	4013      	ands	r3, r2
 80123c4:	683a      	ldr	r2, [r7, #0]
 80123c6:	68d1      	ldr	r1, [r2, #12]
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	6952      	ldr	r2, [r2, #20]
 80123cc:	4311      	orrs	r1, r2
 80123ce:	683a      	ldr	r2, [r7, #0]
 80123d0:	6912      	ldr	r2, [r2, #16]
 80123d2:	4311      	orrs	r1, r2
 80123d4:	683a      	ldr	r2, [r7, #0]
 80123d6:	69d2      	ldr	r2, [r2, #28]
 80123d8:	4311      	orrs	r1, r2
 80123da:	683a      	ldr	r2, [r7, #0]
 80123dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80123de:	4311      	orrs	r1, r2
 80123e0:	683a      	ldr	r2, [r7, #0]
 80123e2:	6a12      	ldr	r2, [r2, #32]
 80123e4:	4311      	orrs	r1, r2
 80123e6:	683a      	ldr	r2, [r7, #0]
 80123e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80123ea:	4311      	orrs	r1, r2
 80123ec:	683a      	ldr	r2, [r7, #0]
 80123ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80123f0:	430a      	orrs	r2, r1
 80123f2:	431a      	orrs	r2, r3
 80123f4:	69bb      	ldr	r3, [r7, #24]
 80123f6:	601a      	str	r2, [r3, #0]
 80123f8:	e026      	b.n	8012448 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80123fa:	69bb      	ldr	r3, [r7, #24]
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	4b56      	ldr	r3, [pc, #344]	; (8012558 <OSPI_ConfigCmd+0x2e8>)
 8012400:	4013      	ands	r3, r2
 8012402:	683a      	ldr	r2, [r7, #0]
 8012404:	68d1      	ldr	r1, [r2, #12]
 8012406:	683a      	ldr	r2, [r7, #0]
 8012408:	6952      	ldr	r2, [r2, #20]
 801240a:	4311      	orrs	r1, r2
 801240c:	683a      	ldr	r2, [r7, #0]
 801240e:	6912      	ldr	r2, [r2, #16]
 8012410:	4311      	orrs	r1, r2
 8012412:	683a      	ldr	r2, [r7, #0]
 8012414:	69d2      	ldr	r2, [r2, #28]
 8012416:	4311      	orrs	r1, r2
 8012418:	683a      	ldr	r2, [r7, #0]
 801241a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801241c:	4311      	orrs	r1, r2
 801241e:	683a      	ldr	r2, [r7, #0]
 8012420:	6a12      	ldr	r2, [r2, #32]
 8012422:	430a      	orrs	r2, r1
 8012424:	431a      	orrs	r2, r3
 8012426:	69bb      	ldr	r3, [r7, #24]
 8012428:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801242e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012432:	d109      	bne.n	8012448 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8012438:	2b08      	cmp	r3, #8
 801243a:	d105      	bne.n	8012448 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012444:	69bb      	ldr	r3, [r7, #24]
 8012446:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	689a      	ldr	r2, [r3, #8]
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	683a      	ldr	r2, [r7, #0]
 8012456:	6992      	ldr	r2, [r2, #24]
 8012458:	649a      	str	r2, [r3, #72]	; 0x48
 801245a:	e074      	b.n	8012546 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012460:	2b00      	cmp	r3, #0
 8012462:	d015      	beq.n	8012490 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	4b3c      	ldr	r3, [pc, #240]	; (801255c <OSPI_ConfigCmd+0x2ec>)
 801246a:	4013      	ands	r3, r2
 801246c:	683a      	ldr	r2, [r7, #0]
 801246e:	68d1      	ldr	r1, [r2, #12]
 8012470:	683a      	ldr	r2, [r7, #0]
 8012472:	6952      	ldr	r2, [r2, #20]
 8012474:	4311      	orrs	r1, r2
 8012476:	683a      	ldr	r2, [r7, #0]
 8012478:	6912      	ldr	r2, [r2, #16]
 801247a:	4311      	orrs	r1, r2
 801247c:	683a      	ldr	r2, [r7, #0]
 801247e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012480:	4311      	orrs	r1, r2
 8012482:	683a      	ldr	r2, [r7, #0]
 8012484:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012486:	430a      	orrs	r2, r1
 8012488:	431a      	orrs	r2, r3
 801248a:	69bb      	ldr	r3, [r7, #24]
 801248c:	601a      	str	r2, [r3, #0]
 801248e:	e01d      	b.n	80124cc <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	68d9      	ldr	r1, [r3, #12]
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	695b      	ldr	r3, [r3, #20]
 80124a0:	4319      	orrs	r1, r3
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	691b      	ldr	r3, [r3, #16]
 80124a6:	430b      	orrs	r3, r1
 80124a8:	431a      	orrs	r2, r3
 80124aa:	69bb      	ldr	r3, [r7, #24]
 80124ac:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80124b6:	d109      	bne.n	80124cc <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80124bc:	2b08      	cmp	r3, #8
 80124be:	d105      	bne.n	80124cc <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80124c0:	69bb      	ldr	r3, [r7, #24]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80124c8:	69bb      	ldr	r3, [r7, #24]
 80124ca:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	689a      	ldr	r2, [r3, #8]
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	601a      	str	r2, [r3, #0]
 80124d4:	e037      	b.n	8012546 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	69db      	ldr	r3, [r3, #28]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d02e      	beq.n	801253c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d015      	beq.n	8012512 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	4b1d      	ldr	r3, [pc, #116]	; (8012560 <OSPI_ConfigCmd+0x2f0>)
 80124ec:	4013      	ands	r3, r2
 80124ee:	683a      	ldr	r2, [r7, #0]
 80124f0:	69d1      	ldr	r1, [r2, #28]
 80124f2:	683a      	ldr	r2, [r7, #0]
 80124f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80124f6:	4311      	orrs	r1, r2
 80124f8:	683a      	ldr	r2, [r7, #0]
 80124fa:	6a12      	ldr	r2, [r2, #32]
 80124fc:	4311      	orrs	r1, r2
 80124fe:	683a      	ldr	r2, [r7, #0]
 8012500:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012502:	4311      	orrs	r1, r2
 8012504:	683a      	ldr	r2, [r7, #0]
 8012506:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012508:	430a      	orrs	r2, r1
 801250a:	431a      	orrs	r2, r3
 801250c:	69bb      	ldr	r3, [r7, #24]
 801250e:	601a      	str	r2, [r3, #0]
 8012510:	e00e      	b.n	8012530 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	69d9      	ldr	r1, [r3, #28]
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012522:	4319      	orrs	r1, r3
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	6a1b      	ldr	r3, [r3, #32]
 8012528:	430b      	orrs	r3, r1
 801252a:	431a      	orrs	r2, r3
 801252c:	69bb      	ldr	r3, [r7, #24]
 801252e:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	683a      	ldr	r2, [r7, #0]
 8012536:	6992      	ldr	r2, [r2, #24]
 8012538:	649a      	str	r2, [r3, #72]	; 0x48
 801253a:	e004      	b.n	8012546 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 801253c:	2301      	movs	r3, #1
 801253e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2208      	movs	r2, #8
 8012544:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8012546:	7ffb      	ldrb	r3, [r7, #31]
}
 8012548:	4618      	mov	r0, r3
 801254a:	3724      	adds	r7, #36	; 0x24
 801254c:	46bd      	mov	sp, r7
 801254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012552:	4770      	bx	lr
 8012554:	f0ffc0c0 	.word	0xf0ffc0c0
 8012558:	ffffc0c0 	.word	0xffffc0c0
 801255c:	f0ffffc0 	.word	0xf0ffffc0
 8012560:	f0ffc0ff 	.word	0xf0ffc0ff

08012564 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b084      	sub	sp, #16
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801256c:	4b29      	ldr	r3, [pc, #164]	; (8012614 <HAL_PWREx_ConfigSupply+0xb0>)
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	f003 0307 	and.w	r3, r3, #7
 8012574:	2b06      	cmp	r3, #6
 8012576:	d00a      	beq.n	801258e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8012578:	4b26      	ldr	r3, [pc, #152]	; (8012614 <HAL_PWREx_ConfigSupply+0xb0>)
 801257a:	68db      	ldr	r3, [r3, #12]
 801257c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012580:	687a      	ldr	r2, [r7, #4]
 8012582:	429a      	cmp	r2, r3
 8012584:	d001      	beq.n	801258a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8012586:	2301      	movs	r3, #1
 8012588:	e040      	b.n	801260c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801258a:	2300      	movs	r3, #0
 801258c:	e03e      	b.n	801260c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801258e:	4b21      	ldr	r3, [pc, #132]	; (8012614 <HAL_PWREx_ConfigSupply+0xb0>)
 8012590:	68db      	ldr	r3, [r3, #12]
 8012592:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8012596:	491f      	ldr	r1, [pc, #124]	; (8012614 <HAL_PWREx_ConfigSupply+0xb0>)
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	4313      	orrs	r3, r2
 801259c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801259e:	f7fa fb6d 	bl	800cc7c <HAL_GetTick>
 80125a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80125a4:	e009      	b.n	80125ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80125a6:	f7fa fb69 	bl	800cc7c <HAL_GetTick>
 80125aa:	4602      	mov	r2, r0
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80125b4:	d901      	bls.n	80125ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80125b6:	2301      	movs	r3, #1
 80125b8:	e028      	b.n	801260c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80125ba:	4b16      	ldr	r3, [pc, #88]	; (8012614 <HAL_PWREx_ConfigSupply+0xb0>)
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80125c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80125c6:	d1ee      	bne.n	80125a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2b1e      	cmp	r3, #30
 80125cc:	d008      	beq.n	80125e0 <HAL_PWREx_ConfigSupply+0x7c>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2b2e      	cmp	r3, #46	; 0x2e
 80125d2:	d005      	beq.n	80125e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2b1d      	cmp	r3, #29
 80125d8:	d002      	beq.n	80125e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2b2d      	cmp	r3, #45	; 0x2d
 80125de:	d114      	bne.n	801260a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80125e0:	f7fa fb4c 	bl	800cc7c <HAL_GetTick>
 80125e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80125e6:	e009      	b.n	80125fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80125e8:	f7fa fb48 	bl	800cc7c <HAL_GetTick>
 80125ec:	4602      	mov	r2, r0
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	1ad3      	subs	r3, r2, r3
 80125f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80125f6:	d901      	bls.n	80125fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80125f8:	2301      	movs	r3, #1
 80125fa:	e007      	b.n	801260c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80125fc:	4b05      	ldr	r3, [pc, #20]	; (8012614 <HAL_PWREx_ConfigSupply+0xb0>)
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012608:	d1ee      	bne.n	80125e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801260a:	2300      	movs	r3, #0
}
 801260c:	4618      	mov	r0, r3
 801260e:	3710      	adds	r7, #16
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}
 8012614:	58024800 	.word	0x58024800

08012618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b08c      	sub	sp, #48	; 0x30
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d102      	bne.n	801262c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8012626:	2301      	movs	r3, #1
 8012628:	f000 bc20 	b.w	8012e6c <HAL_RCC_OscConfig+0x854>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	f003 0301 	and.w	r3, r3, #1
 8012634:	2b00      	cmp	r3, #0
 8012636:	f000 80b3 	beq.w	80127a0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801263a:	4b9f      	ldr	r3, [pc, #636]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801263c:	691b      	ldr	r3, [r3, #16]
 801263e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012642:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012644:	4b9c      	ldr	r3, [pc, #624]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012648:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264c:	2b10      	cmp	r3, #16
 801264e:	d007      	beq.n	8012660 <HAL_RCC_OscConfig+0x48>
 8012650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012652:	2b18      	cmp	r3, #24
 8012654:	d112      	bne.n	801267c <HAL_RCC_OscConfig+0x64>
 8012656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012658:	f003 0303 	and.w	r3, r3, #3
 801265c:	2b02      	cmp	r3, #2
 801265e:	d10d      	bne.n	801267c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012660:	4b95      	ldr	r3, [pc, #596]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012668:	2b00      	cmp	r3, #0
 801266a:	f000 8098 	beq.w	801279e <HAL_RCC_OscConfig+0x186>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	2b00      	cmp	r3, #0
 8012674:	f040 8093 	bne.w	801279e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8012678:	2301      	movs	r3, #1
 801267a:	e3f7      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012684:	d106      	bne.n	8012694 <HAL_RCC_OscConfig+0x7c>
 8012686:	4b8c      	ldr	r3, [pc, #560]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	4a8b      	ldr	r2, [pc, #556]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012690:	6013      	str	r3, [r2, #0]
 8012692:	e058      	b.n	8012746 <HAL_RCC_OscConfig+0x12e>
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d112      	bne.n	80126c2 <HAL_RCC_OscConfig+0xaa>
 801269c:	4b86      	ldr	r3, [pc, #536]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	4a85      	ldr	r2, [pc, #532]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80126a6:	6013      	str	r3, [r2, #0]
 80126a8:	4b83      	ldr	r3, [pc, #524]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	4a82      	ldr	r2, [pc, #520]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80126b2:	6013      	str	r3, [r2, #0]
 80126b4:	4b80      	ldr	r3, [pc, #512]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	4a7f      	ldr	r2, [pc, #508]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80126be:	6013      	str	r3, [r2, #0]
 80126c0:	e041      	b.n	8012746 <HAL_RCC_OscConfig+0x12e>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80126ca:	d112      	bne.n	80126f2 <HAL_RCC_OscConfig+0xda>
 80126cc:	4b7a      	ldr	r3, [pc, #488]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	4a79      	ldr	r2, [pc, #484]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80126d6:	6013      	str	r3, [r2, #0]
 80126d8:	4b77      	ldr	r3, [pc, #476]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	4a76      	ldr	r2, [pc, #472]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80126e2:	6013      	str	r3, [r2, #0]
 80126e4:	4b74      	ldr	r3, [pc, #464]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	4a73      	ldr	r2, [pc, #460]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80126ee:	6013      	str	r3, [r2, #0]
 80126f0:	e029      	b.n	8012746 <HAL_RCC_OscConfig+0x12e>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80126fa:	d112      	bne.n	8012722 <HAL_RCC_OscConfig+0x10a>
 80126fc:	4b6e      	ldr	r3, [pc, #440]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	4a6d      	ldr	r2, [pc, #436]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012706:	6013      	str	r3, [r2, #0]
 8012708:	4b6b      	ldr	r3, [pc, #428]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4a6a      	ldr	r2, [pc, #424]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801270e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012712:	6013      	str	r3, [r2, #0]
 8012714:	4b68      	ldr	r3, [pc, #416]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	4a67      	ldr	r2, [pc, #412]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801271a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801271e:	6013      	str	r3, [r2, #0]
 8012720:	e011      	b.n	8012746 <HAL_RCC_OscConfig+0x12e>
 8012722:	4b65      	ldr	r3, [pc, #404]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	4a64      	ldr	r2, [pc, #400]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801272c:	6013      	str	r3, [r2, #0]
 801272e:	4b62      	ldr	r3, [pc, #392]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	4a61      	ldr	r2, [pc, #388]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012738:	6013      	str	r3, [r2, #0]
 801273a:	4b5f      	ldr	r3, [pc, #380]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	4a5e      	ldr	r2, [pc, #376]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012740:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012744:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d013      	beq.n	8012776 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801274e:	f7fa fa95 	bl	800cc7c <HAL_GetTick>
 8012752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012754:	e008      	b.n	8012768 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012756:	f7fa fa91 	bl	800cc7c <HAL_GetTick>
 801275a:	4602      	mov	r2, r0
 801275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	2b64      	cmp	r3, #100	; 0x64
 8012762:	d901      	bls.n	8012768 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8012764:	2303      	movs	r3, #3
 8012766:	e381      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012768:	4b53      	ldr	r3, [pc, #332]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012770:	2b00      	cmp	r3, #0
 8012772:	d0f0      	beq.n	8012756 <HAL_RCC_OscConfig+0x13e>
 8012774:	e014      	b.n	80127a0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012776:	f7fa fa81 	bl	800cc7c <HAL_GetTick>
 801277a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801277c:	e008      	b.n	8012790 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801277e:	f7fa fa7d 	bl	800cc7c <HAL_GetTick>
 8012782:	4602      	mov	r2, r0
 8012784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012786:	1ad3      	subs	r3, r2, r3
 8012788:	2b64      	cmp	r3, #100	; 0x64
 801278a:	d901      	bls.n	8012790 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 801278c:	2303      	movs	r3, #3
 801278e:	e36d      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012790:	4b49      	ldr	r3, [pc, #292]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012798:	2b00      	cmp	r3, #0
 801279a:	d1f0      	bne.n	801277e <HAL_RCC_OscConfig+0x166>
 801279c:	e000      	b.n	80127a0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801279e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f003 0302 	and.w	r3, r3, #2
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	f000 808d 	beq.w	80128c8 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80127ae:	4b42      	ldr	r3, [pc, #264]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80127b0:	691b      	ldr	r3, [r3, #16]
 80127b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80127b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80127b8:	4b3f      	ldr	r3, [pc, #252]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80127ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127bc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80127be:	6a3b      	ldr	r3, [r7, #32]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d007      	beq.n	80127d4 <HAL_RCC_OscConfig+0x1bc>
 80127c4:	6a3b      	ldr	r3, [r7, #32]
 80127c6:	2b18      	cmp	r3, #24
 80127c8:	d137      	bne.n	801283a <HAL_RCC_OscConfig+0x222>
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	f003 0303 	and.w	r3, r3, #3
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d132      	bne.n	801283a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80127d4:	4b38      	ldr	r3, [pc, #224]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f003 0304 	and.w	r3, r3, #4
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d005      	beq.n	80127ec <HAL_RCC_OscConfig+0x1d4>
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	68db      	ldr	r3, [r3, #12]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d101      	bne.n	80127ec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80127e8:	2301      	movs	r3, #1
 80127ea:	e33f      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80127ec:	4b32      	ldr	r3, [pc, #200]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	f023 0219 	bic.w	r2, r3, #25
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	492f      	ldr	r1, [pc, #188]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 80127fa:	4313      	orrs	r3, r2
 80127fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80127fe:	f7fa fa3d 	bl	800cc7c <HAL_GetTick>
 8012802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012804:	e008      	b.n	8012818 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012806:	f7fa fa39 	bl	800cc7c <HAL_GetTick>
 801280a:	4602      	mov	r2, r0
 801280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	2b02      	cmp	r3, #2
 8012812:	d901      	bls.n	8012818 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8012814:	2303      	movs	r3, #3
 8012816:	e329      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012818:	4b27      	ldr	r3, [pc, #156]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f003 0304 	and.w	r3, r3, #4
 8012820:	2b00      	cmp	r3, #0
 8012822:	d0f0      	beq.n	8012806 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012824:	4b24      	ldr	r3, [pc, #144]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	691b      	ldr	r3, [r3, #16]
 8012830:	061b      	lsls	r3, r3, #24
 8012832:	4921      	ldr	r1, [pc, #132]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012834:	4313      	orrs	r3, r2
 8012836:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012838:	e046      	b.n	80128c8 <HAL_RCC_OscConfig+0x2b0>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d026      	beq.n	8012890 <HAL_RCC_OscConfig+0x278>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8012842:	4b1d      	ldr	r3, [pc, #116]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	f023 0219 	bic.w	r2, r3, #25
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	68db      	ldr	r3, [r3, #12]
 801284e:	491a      	ldr	r1, [pc, #104]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012850:	4313      	orrs	r3, r2
 8012852:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012854:	f7fa fa12 	bl	800cc7c <HAL_GetTick>
 8012858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801285a:	e008      	b.n	801286e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801285c:	f7fa fa0e 	bl	800cc7c <HAL_GetTick>
 8012860:	4602      	mov	r2, r0
 8012862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012864:	1ad3      	subs	r3, r2, r3
 8012866:	2b02      	cmp	r3, #2
 8012868:	d901      	bls.n	801286e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 801286a:	2303      	movs	r3, #3
 801286c:	e2fe      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801286e:	4b12      	ldr	r3, [pc, #72]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f003 0304 	and.w	r3, r3, #4
 8012876:	2b00      	cmp	r3, #0
 8012878:	d0f0      	beq.n	801285c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801287a:	4b0f      	ldr	r3, [pc, #60]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	691b      	ldr	r3, [r3, #16]
 8012886:	061b      	lsls	r3, r3, #24
 8012888:	490b      	ldr	r1, [pc, #44]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 801288a:	4313      	orrs	r3, r2
 801288c:	604b      	str	r3, [r1, #4]
 801288e:	e01b      	b.n	80128c8 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012890:	4b09      	ldr	r3, [pc, #36]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	4a08      	ldr	r2, [pc, #32]	; (80128b8 <HAL_RCC_OscConfig+0x2a0>)
 8012896:	f023 0301 	bic.w	r3, r3, #1
 801289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801289c:	f7fa f9ee 	bl	800cc7c <HAL_GetTick>
 80128a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80128a2:	e00b      	b.n	80128bc <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80128a4:	f7fa f9ea 	bl	800cc7c <HAL_GetTick>
 80128a8:	4602      	mov	r2, r0
 80128aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ac:	1ad3      	subs	r3, r2, r3
 80128ae:	2b02      	cmp	r3, #2
 80128b0:	d904      	bls.n	80128bc <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 80128b2:	2303      	movs	r3, #3
 80128b4:	e2da      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
 80128b6:	bf00      	nop
 80128b8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80128bc:	4b99      	ldr	r3, [pc, #612]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	f003 0304 	and.w	r3, r3, #4
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d1ed      	bne.n	80128a4 <HAL_RCC_OscConfig+0x28c>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f003 0310 	and.w	r3, r3, #16
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d06a      	beq.n	80129aa <HAL_RCC_OscConfig+0x392>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80128d4:	4b93      	ldr	r3, [pc, #588]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 80128d6:	691b      	ldr	r3, [r3, #16]
 80128d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80128dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80128de:	4b91      	ldr	r3, [pc, #580]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 80128e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128e2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80128e4:	69bb      	ldr	r3, [r7, #24]
 80128e6:	2b08      	cmp	r3, #8
 80128e8:	d007      	beq.n	80128fa <HAL_RCC_OscConfig+0x2e2>
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	2b18      	cmp	r3, #24
 80128ee:	d11b      	bne.n	8012928 <HAL_RCC_OscConfig+0x310>
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	f003 0303 	and.w	r3, r3, #3
 80128f6:	2b01      	cmp	r3, #1
 80128f8:	d116      	bne.n	8012928 <HAL_RCC_OscConfig+0x310>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80128fa:	4b8a      	ldr	r3, [pc, #552]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012902:	2b00      	cmp	r3, #0
 8012904:	d005      	beq.n	8012912 <HAL_RCC_OscConfig+0x2fa>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	69db      	ldr	r3, [r3, #28]
 801290a:	2b80      	cmp	r3, #128	; 0x80
 801290c:	d001      	beq.n	8012912 <HAL_RCC_OscConfig+0x2fa>
      {
        return HAL_ERROR;
 801290e:	2301      	movs	r3, #1
 8012910:	e2ac      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012912:	4b84      	ldr	r3, [pc, #528]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012914:	68db      	ldr	r3, [r3, #12]
 8012916:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6a1b      	ldr	r3, [r3, #32]
 801291e:	061b      	lsls	r3, r3, #24
 8012920:	4980      	ldr	r1, [pc, #512]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012922:	4313      	orrs	r3, r2
 8012924:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8012926:	e040      	b.n	80129aa <HAL_RCC_OscConfig+0x392>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	69db      	ldr	r3, [r3, #28]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d023      	beq.n	8012978 <HAL_RCC_OscConfig+0x360>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8012930:	4b7c      	ldr	r3, [pc, #496]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	4a7b      	ldr	r2, [pc, #492]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801293a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801293c:	f7fa f99e 	bl	800cc7c <HAL_GetTick>
 8012940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012942:	e008      	b.n	8012956 <HAL_RCC_OscConfig+0x33e>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8012944:	f7fa f99a 	bl	800cc7c <HAL_GetTick>
 8012948:	4602      	mov	r2, r0
 801294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294c:	1ad3      	subs	r3, r2, r3
 801294e:	2b02      	cmp	r3, #2
 8012950:	d901      	bls.n	8012956 <HAL_RCC_OscConfig+0x33e>
          {
            return HAL_TIMEOUT;
 8012952:	2303      	movs	r3, #3
 8012954:	e28a      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012956:	4b73      	ldr	r3, [pc, #460]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801295e:	2b00      	cmp	r3, #0
 8012960:	d0f0      	beq.n	8012944 <HAL_RCC_OscConfig+0x32c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012962:	4b70      	ldr	r3, [pc, #448]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012964:	68db      	ldr	r3, [r3, #12]
 8012966:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6a1b      	ldr	r3, [r3, #32]
 801296e:	061b      	lsls	r3, r3, #24
 8012970:	496c      	ldr	r1, [pc, #432]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012972:	4313      	orrs	r3, r2
 8012974:	60cb      	str	r3, [r1, #12]
 8012976:	e018      	b.n	80129aa <HAL_RCC_OscConfig+0x392>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8012978:	4b6a      	ldr	r3, [pc, #424]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	4a69      	ldr	r2, [pc, #420]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 801297e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012984:	f7fa f97a 	bl	800cc7c <HAL_GetTick>
 8012988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801298a:	e008      	b.n	801299e <HAL_RCC_OscConfig+0x386>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801298c:	f7fa f976 	bl	800cc7c <HAL_GetTick>
 8012990:	4602      	mov	r2, r0
 8012992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012994:	1ad3      	subs	r3, r2, r3
 8012996:	2b02      	cmp	r3, #2
 8012998:	d901      	bls.n	801299e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 801299a:	2303      	movs	r3, #3
 801299c:	e266      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801299e:	4b61      	ldr	r3, [pc, #388]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d1f0      	bne.n	801298c <HAL_RCC_OscConfig+0x374>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f003 0308 	and.w	r3, r3, #8
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d036      	beq.n	8012a24 <HAL_RCC_OscConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	695b      	ldr	r3, [r3, #20]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d019      	beq.n	80129f2 <HAL_RCC_OscConfig+0x3da>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80129be:	4b59      	ldr	r3, [pc, #356]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 80129c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129c2:	4a58      	ldr	r2, [pc, #352]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 80129c4:	f043 0301 	orr.w	r3, r3, #1
 80129c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80129ca:	f7fa f957 	bl	800cc7c <HAL_GetTick>
 80129ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80129d0:	e008      	b.n	80129e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80129d2:	f7fa f953 	bl	800cc7c <HAL_GetTick>
 80129d6:	4602      	mov	r2, r0
 80129d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129da:	1ad3      	subs	r3, r2, r3
 80129dc:	2b02      	cmp	r3, #2
 80129de:	d901      	bls.n	80129e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80129e0:	2303      	movs	r3, #3
 80129e2:	e243      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80129e4:	4b4f      	ldr	r3, [pc, #316]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 80129e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129e8:	f003 0302 	and.w	r3, r3, #2
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d0f0      	beq.n	80129d2 <HAL_RCC_OscConfig+0x3ba>
 80129f0:	e018      	b.n	8012a24 <HAL_RCC_OscConfig+0x40c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80129f2:	4b4c      	ldr	r3, [pc, #304]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 80129f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129f6:	4a4b      	ldr	r2, [pc, #300]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 80129f8:	f023 0301 	bic.w	r3, r3, #1
 80129fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80129fe:	f7fa f93d 	bl	800cc7c <HAL_GetTick>
 8012a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012a04:	e008      	b.n	8012a18 <HAL_RCC_OscConfig+0x400>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012a06:	f7fa f939 	bl	800cc7c <HAL_GetTick>
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0e:	1ad3      	subs	r3, r2, r3
 8012a10:	2b02      	cmp	r3, #2
 8012a12:	d901      	bls.n	8012a18 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8012a14:	2303      	movs	r3, #3
 8012a16:	e229      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012a18:	4b42      	ldr	r3, [pc, #264]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a1c:	f003 0302 	and.w	r3, r3, #2
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d1f0      	bne.n	8012a06 <HAL_RCC_OscConfig+0x3ee>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	f003 0320 	and.w	r3, r3, #32
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d036      	beq.n	8012a9e <HAL_RCC_OscConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	699b      	ldr	r3, [r3, #24]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d019      	beq.n	8012a6c <HAL_RCC_OscConfig+0x454>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8012a38:	4b3a      	ldr	r3, [pc, #232]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4a39      	ldr	r2, [pc, #228]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012a3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012a42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012a44:	f7fa f91a 	bl	800cc7c <HAL_GetTick>
 8012a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012a4a:	e008      	b.n	8012a5e <HAL_RCC_OscConfig+0x446>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012a4c:	f7fa f916 	bl	800cc7c <HAL_GetTick>
 8012a50:	4602      	mov	r2, r0
 8012a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a54:	1ad3      	subs	r3, r2, r3
 8012a56:	2b02      	cmp	r3, #2
 8012a58:	d901      	bls.n	8012a5e <HAL_RCC_OscConfig+0x446>
        {
          return HAL_TIMEOUT;
 8012a5a:	2303      	movs	r3, #3
 8012a5c:	e206      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012a5e:	4b31      	ldr	r3, [pc, #196]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d0f0      	beq.n	8012a4c <HAL_RCC_OscConfig+0x434>
 8012a6a:	e018      	b.n	8012a9e <HAL_RCC_OscConfig+0x486>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012a6c:	4b2d      	ldr	r3, [pc, #180]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4a2c      	ldr	r2, [pc, #176]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012a78:	f7fa f900 	bl	800cc7c <HAL_GetTick>
 8012a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012a7e:	e008      	b.n	8012a92 <HAL_RCC_OscConfig+0x47a>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012a80:	f7fa f8fc 	bl	800cc7c <HAL_GetTick>
 8012a84:	4602      	mov	r2, r0
 8012a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a88:	1ad3      	subs	r3, r2, r3
 8012a8a:	2b02      	cmp	r3, #2
 8012a8c:	d901      	bls.n	8012a92 <HAL_RCC_OscConfig+0x47a>
        {
          return HAL_TIMEOUT;
 8012a8e:	2303      	movs	r3, #3
 8012a90:	e1ec      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012a92:	4b24      	ldr	r3, [pc, #144]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d1f0      	bne.n	8012a80 <HAL_RCC_OscConfig+0x468>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f003 0304 	and.w	r3, r3, #4
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	f000 80af 	beq.w	8012c0a <HAL_RCC_OscConfig+0x5f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8012aac:	4b1e      	ldr	r3, [pc, #120]	; (8012b28 <HAL_RCC_OscConfig+0x510>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	4a1d      	ldr	r2, [pc, #116]	; (8012b28 <HAL_RCC_OscConfig+0x510>)
 8012ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012ab8:	f7fa f8e0 	bl	800cc7c <HAL_GetTick>
 8012abc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012abe:	e008      	b.n	8012ad2 <HAL_RCC_OscConfig+0x4ba>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012ac0:	f7fa f8dc 	bl	800cc7c <HAL_GetTick>
 8012ac4:	4602      	mov	r2, r0
 8012ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac8:	1ad3      	subs	r3, r2, r3
 8012aca:	2b64      	cmp	r3, #100	; 0x64
 8012acc:	d901      	bls.n	8012ad2 <HAL_RCC_OscConfig+0x4ba>
      {
        return HAL_TIMEOUT;
 8012ace:	2303      	movs	r3, #3
 8012ad0:	e1cc      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012ad2:	4b15      	ldr	r3, [pc, #84]	; (8012b28 <HAL_RCC_OscConfig+0x510>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d0f0      	beq.n	8012ac0 <HAL_RCC_OscConfig+0x4a8>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d106      	bne.n	8012af4 <HAL_RCC_OscConfig+0x4dc>
 8012ae6:	4b0f      	ldr	r3, [pc, #60]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aea:	4a0e      	ldr	r2, [pc, #56]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012aec:	f043 0301 	orr.w	r3, r3, #1
 8012af0:	6713      	str	r3, [r2, #112]	; 0x70
 8012af2:	e05b      	b.n	8012bac <HAL_RCC_OscConfig+0x594>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	689b      	ldr	r3, [r3, #8]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d117      	bne.n	8012b2c <HAL_RCC_OscConfig+0x514>
 8012afc:	4b09      	ldr	r3, [pc, #36]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b00:	4a08      	ldr	r2, [pc, #32]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012b02:	f023 0301 	bic.w	r3, r3, #1
 8012b06:	6713      	str	r3, [r2, #112]	; 0x70
 8012b08:	4b06      	ldr	r3, [pc, #24]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b0c:	4a05      	ldr	r2, [pc, #20]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b12:	6713      	str	r3, [r2, #112]	; 0x70
 8012b14:	4b03      	ldr	r3, [pc, #12]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b18:	4a02      	ldr	r2, [pc, #8]	; (8012b24 <HAL_RCC_OscConfig+0x50c>)
 8012b1a:	f023 0304 	bic.w	r3, r3, #4
 8012b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8012b20:	e044      	b.n	8012bac <HAL_RCC_OscConfig+0x594>
 8012b22:	bf00      	nop
 8012b24:	58024400 	.word	0x58024400
 8012b28:	58024800 	.word	0x58024800
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	689b      	ldr	r3, [r3, #8]
 8012b30:	2b05      	cmp	r3, #5
 8012b32:	d112      	bne.n	8012b5a <HAL_RCC_OscConfig+0x542>
 8012b34:	4b95      	ldr	r3, [pc, #596]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b38:	4a94      	ldr	r2, [pc, #592]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b3a:	f043 0304 	orr.w	r3, r3, #4
 8012b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8012b40:	4b92      	ldr	r3, [pc, #584]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b44:	4a91      	ldr	r2, [pc, #580]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8012b4c:	4b8f      	ldr	r3, [pc, #572]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b50:	4a8e      	ldr	r2, [pc, #568]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b52:	f043 0301 	orr.w	r3, r3, #1
 8012b56:	6713      	str	r3, [r2, #112]	; 0x70
 8012b58:	e028      	b.n	8012bac <HAL_RCC_OscConfig+0x594>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	689b      	ldr	r3, [r3, #8]
 8012b5e:	2b85      	cmp	r3, #133	; 0x85
 8012b60:	d112      	bne.n	8012b88 <HAL_RCC_OscConfig+0x570>
 8012b62:	4b8a      	ldr	r3, [pc, #552]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b66:	4a89      	ldr	r2, [pc, #548]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b68:	f043 0304 	orr.w	r3, r3, #4
 8012b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8012b6e:	4b87      	ldr	r3, [pc, #540]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b72:	4a86      	ldr	r2, [pc, #536]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b78:	6713      	str	r3, [r2, #112]	; 0x70
 8012b7a:	4b84      	ldr	r3, [pc, #528]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b7e:	4a83      	ldr	r2, [pc, #524]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b80:	f043 0301 	orr.w	r3, r3, #1
 8012b84:	6713      	str	r3, [r2, #112]	; 0x70
 8012b86:	e011      	b.n	8012bac <HAL_RCC_OscConfig+0x594>
 8012b88:	4b80      	ldr	r3, [pc, #512]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b8c:	4a7f      	ldr	r2, [pc, #508]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b8e:	f023 0301 	bic.w	r3, r3, #1
 8012b92:	6713      	str	r3, [r2, #112]	; 0x70
 8012b94:	4b7d      	ldr	r3, [pc, #500]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b98:	4a7c      	ldr	r2, [pc, #496]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012b9a:	f023 0304 	bic.w	r3, r3, #4
 8012b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8012ba0:	4b7a      	ldr	r3, [pc, #488]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ba4:	4a79      	ldr	r2, [pc, #484]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	689b      	ldr	r3, [r3, #8]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d015      	beq.n	8012be0 <HAL_RCC_OscConfig+0x5c8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012bb4:	f7fa f862 	bl	800cc7c <HAL_GetTick>
 8012bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012bba:	e00a      	b.n	8012bd2 <HAL_RCC_OscConfig+0x5ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012bbc:	f7fa f85e 	bl	800cc7c <HAL_GetTick>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc4:	1ad3      	subs	r3, r2, r3
 8012bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bca:	4293      	cmp	r3, r2
 8012bcc:	d901      	bls.n	8012bd2 <HAL_RCC_OscConfig+0x5ba>
        {
          return HAL_TIMEOUT;
 8012bce:	2303      	movs	r3, #3
 8012bd0:	e14c      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012bd2:	4b6e      	ldr	r3, [pc, #440]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bd6:	f003 0302 	and.w	r3, r3, #2
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d0ee      	beq.n	8012bbc <HAL_RCC_OscConfig+0x5a4>
 8012bde:	e014      	b.n	8012c0a <HAL_RCC_OscConfig+0x5f2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012be0:	f7fa f84c 	bl	800cc7c <HAL_GetTick>
 8012be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012be6:	e00a      	b.n	8012bfe <HAL_RCC_OscConfig+0x5e6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012be8:	f7fa f848 	bl	800cc7c <HAL_GetTick>
 8012bec:	4602      	mov	r2, r0
 8012bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf0:	1ad3      	subs	r3, r2, r3
 8012bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d901      	bls.n	8012bfe <HAL_RCC_OscConfig+0x5e6>
        {
          return HAL_TIMEOUT;
 8012bfa:	2303      	movs	r3, #3
 8012bfc:	e136      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012bfe:	4b63      	ldr	r3, [pc, #396]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c02:	f003 0302 	and.w	r3, r3, #2
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d1ee      	bne.n	8012be8 <HAL_RCC_OscConfig+0x5d0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	f000 812b 	beq.w	8012e6a <HAL_RCC_OscConfig+0x852>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8012c14:	4b5d      	ldr	r3, [pc, #372]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012c16:	691b      	ldr	r3, [r3, #16]
 8012c18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012c1c:	2b18      	cmp	r3, #24
 8012c1e:	f000 80bb 	beq.w	8012d98 <HAL_RCC_OscConfig+0x780>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c26:	2b02      	cmp	r3, #2
 8012c28:	f040 8095 	bne.w	8012d56 <HAL_RCC_OscConfig+0x73e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012c2c:	4b57      	ldr	r3, [pc, #348]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4a56      	ldr	r2, [pc, #344]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c38:	f7fa f820 	bl	800cc7c <HAL_GetTick>
 8012c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012c3e:	e008      	b.n	8012c52 <HAL_RCC_OscConfig+0x63a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012c40:	f7fa f81c 	bl	800cc7c <HAL_GetTick>
 8012c44:	4602      	mov	r2, r0
 8012c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c48:	1ad3      	subs	r3, r2, r3
 8012c4a:	2b02      	cmp	r3, #2
 8012c4c:	d901      	bls.n	8012c52 <HAL_RCC_OscConfig+0x63a>
          {
            return HAL_TIMEOUT;
 8012c4e:	2303      	movs	r3, #3
 8012c50:	e10c      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012c52:	4b4e      	ldr	r3, [pc, #312]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d1f0      	bne.n	8012c40 <HAL_RCC_OscConfig+0x628>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012c5e:	4b4b      	ldr	r3, [pc, #300]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012c62:	4b4b      	ldr	r3, [pc, #300]	; (8012d90 <HAL_RCC_OscConfig+0x778>)
 8012c64:	4013      	ands	r3, r2
 8012c66:	687a      	ldr	r2, [r7, #4]
 8012c68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8012c6a:	687a      	ldr	r2, [r7, #4]
 8012c6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012c6e:	0112      	lsls	r2, r2, #4
 8012c70:	430a      	orrs	r2, r1
 8012c72:	4946      	ldr	r1, [pc, #280]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012c74:	4313      	orrs	r3, r2
 8012c76:	628b      	str	r3, [r1, #40]	; 0x28
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c7c:	3b01      	subs	r3, #1
 8012c7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c86:	3b01      	subs	r3, #1
 8012c88:	025b      	lsls	r3, r3, #9
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	431a      	orrs	r2, r3
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c92:	3b01      	subs	r3, #1
 8012c94:	041b      	lsls	r3, r3, #16
 8012c96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012c9a:	431a      	orrs	r2, r3
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ca0:	3b01      	subs	r3, #1
 8012ca2:	061b      	lsls	r3, r3, #24
 8012ca4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012ca8:	4938      	ldr	r1, [pc, #224]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012caa:	4313      	orrs	r3, r2
 8012cac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8012cae:	4b37      	ldr	r3, [pc, #220]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cb2:	4a36      	ldr	r2, [pc, #216]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012cb4:	f023 0301 	bic.w	r3, r3, #1
 8012cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012cba:	4b34      	ldr	r3, [pc, #208]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012cbe:	4b35      	ldr	r3, [pc, #212]	; (8012d94 <HAL_RCC_OscConfig+0x77c>)
 8012cc0:	4013      	ands	r3, r2
 8012cc2:	687a      	ldr	r2, [r7, #4]
 8012cc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8012cc6:	00d2      	lsls	r2, r2, #3
 8012cc8:	4930      	ldr	r1, [pc, #192]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012cca:	4313      	orrs	r3, r2
 8012ccc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8012cce:	4b2f      	ldr	r3, [pc, #188]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cd2:	f023 020c 	bic.w	r2, r3, #12
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cda:	492c      	ldr	r1, [pc, #176]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8012ce0:	4b2a      	ldr	r3, [pc, #168]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce4:	f023 0202 	bic.w	r2, r3, #2
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cec:	4927      	ldr	r1, [pc, #156]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8012cf2:	4b26      	ldr	r3, [pc, #152]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cf6:	4a25      	ldr	r2, [pc, #148]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012cfe:	4b23      	ldr	r3, [pc, #140]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d02:	4a22      	ldr	r2, [pc, #136]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8012d0a:	4b20      	ldr	r3, [pc, #128]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d0e:	4a1f      	ldr	r2, [pc, #124]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012d14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8012d16:	4b1d      	ldr	r3, [pc, #116]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d1a:	4a1c      	ldr	r2, [pc, #112]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d1c:	f043 0301 	orr.w	r3, r3, #1
 8012d20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012d22:	4b1a      	ldr	r3, [pc, #104]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	4a19      	ldr	r2, [pc, #100]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d2e:	f7f9 ffa5 	bl	800cc7c <HAL_GetTick>
 8012d32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012d34:	e008      	b.n	8012d48 <HAL_RCC_OscConfig+0x730>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012d36:	f7f9 ffa1 	bl	800cc7c <HAL_GetTick>
 8012d3a:	4602      	mov	r2, r0
 8012d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	2b02      	cmp	r3, #2
 8012d42:	d901      	bls.n	8012d48 <HAL_RCC_OscConfig+0x730>
          {
            return HAL_TIMEOUT;
 8012d44:	2303      	movs	r3, #3
 8012d46:	e091      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012d48:	4b10      	ldr	r3, [pc, #64]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d0f0      	beq.n	8012d36 <HAL_RCC_OscConfig+0x71e>
 8012d54:	e089      	b.n	8012e6a <HAL_RCC_OscConfig+0x852>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012d56:	4b0d      	ldr	r3, [pc, #52]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4a0c      	ldr	r2, [pc, #48]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d62:	f7f9 ff8b 	bl	800cc7c <HAL_GetTick>
 8012d66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012d68:	e008      	b.n	8012d7c <HAL_RCC_OscConfig+0x764>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012d6a:	f7f9 ff87 	bl	800cc7c <HAL_GetTick>
 8012d6e:	4602      	mov	r2, r0
 8012d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d72:	1ad3      	subs	r3, r2, r3
 8012d74:	2b02      	cmp	r3, #2
 8012d76:	d901      	bls.n	8012d7c <HAL_RCC_OscConfig+0x764>
          {
            return HAL_TIMEOUT;
 8012d78:	2303      	movs	r3, #3
 8012d7a:	e077      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012d7c:	4b03      	ldr	r3, [pc, #12]	; (8012d8c <HAL_RCC_OscConfig+0x774>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d1f0      	bne.n	8012d6a <HAL_RCC_OscConfig+0x752>
 8012d88:	e06f      	b.n	8012e6a <HAL_RCC_OscConfig+0x852>
 8012d8a:	bf00      	nop
 8012d8c:	58024400 	.word	0x58024400
 8012d90:	fffffc0c 	.word	0xfffffc0c
 8012d94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8012d98:	4b36      	ldr	r3, [pc, #216]	; (8012e74 <HAL_RCC_OscConfig+0x85c>)
 8012d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8012d9e:	4b35      	ldr	r3, [pc, #212]	; (8012e74 <HAL_RCC_OscConfig+0x85c>)
 8012da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012da2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d031      	beq.n	8012e10 <HAL_RCC_OscConfig+0x7f8>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012dac:	693b      	ldr	r3, [r7, #16]
 8012dae:	f003 0203 	and.w	r2, r3, #3
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d12a      	bne.n	8012e10 <HAL_RCC_OscConfig+0x7f8>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	091b      	lsrs	r3, r3, #4
 8012dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	d122      	bne.n	8012e10 <HAL_RCC_OscConfig+0x7f8>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d11a      	bne.n	8012e10 <HAL_RCC_OscConfig+0x7f8>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	0a5b      	lsrs	r3, r3, #9
 8012dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012de6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012de8:	429a      	cmp	r2, r3
 8012dea:	d111      	bne.n	8012e10 <HAL_RCC_OscConfig+0x7f8>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	0c1b      	lsrs	r3, r3, #16
 8012df0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012df8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d108      	bne.n	8012e10 <HAL_RCC_OscConfig+0x7f8>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	0e1b      	lsrs	r3, r3, #24
 8012e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	d001      	beq.n	8012e14 <HAL_RCC_OscConfig+0x7fc>
      {
        return HAL_ERROR;
 8012e10:	2301      	movs	r3, #1
 8012e12:	e02b      	b.n	8012e6c <HAL_RCC_OscConfig+0x854>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8012e14:	4b17      	ldr	r3, [pc, #92]	; (8012e74 <HAL_RCC_OscConfig+0x85c>)
 8012e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e18:	08db      	lsrs	r3, r3, #3
 8012e1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012e1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e24:	693a      	ldr	r2, [r7, #16]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d01f      	beq.n	8012e6a <HAL_RCC_OscConfig+0x852>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8012e2a:	4b12      	ldr	r3, [pc, #72]	; (8012e74 <HAL_RCC_OscConfig+0x85c>)
 8012e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2e:	4a11      	ldr	r2, [pc, #68]	; (8012e74 <HAL_RCC_OscConfig+0x85c>)
 8012e30:	f023 0301 	bic.w	r3, r3, #1
 8012e34:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012e36:	f7f9 ff21 	bl	800cc7c <HAL_GetTick>
 8012e3a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8012e3c:	bf00      	nop
 8012e3e:	f7f9 ff1d 	bl	800cc7c <HAL_GetTick>
 8012e42:	4602      	mov	r2, r0
 8012e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d0f9      	beq.n	8012e3e <HAL_RCC_OscConfig+0x826>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012e4a:	4b0a      	ldr	r3, [pc, #40]	; (8012e74 <HAL_RCC_OscConfig+0x85c>)
 8012e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012e4e:	4b0a      	ldr	r3, [pc, #40]	; (8012e78 <HAL_RCC_OscConfig+0x860>)
 8012e50:	4013      	ands	r3, r2
 8012e52:	687a      	ldr	r2, [r7, #4]
 8012e54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8012e56:	00d2      	lsls	r2, r2, #3
 8012e58:	4906      	ldr	r1, [pc, #24]	; (8012e74 <HAL_RCC_OscConfig+0x85c>)
 8012e5a:	4313      	orrs	r3, r2
 8012e5c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8012e5e:	4b05      	ldr	r3, [pc, #20]	; (8012e74 <HAL_RCC_OscConfig+0x85c>)
 8012e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e62:	4a04      	ldr	r2, [pc, #16]	; (8012e74 <HAL_RCC_OscConfig+0x85c>)
 8012e64:	f043 0301 	orr.w	r3, r3, #1
 8012e68:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8012e6a:	2300      	movs	r3, #0
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3730      	adds	r7, #48	; 0x30
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	58024400 	.word	0x58024400
 8012e78:	ffff0007 	.word	0xffff0007

08012e7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b086      	sub	sp, #24
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d101      	bne.n	8012e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	e19c      	b.n	80131ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8012e90:	4b8a      	ldr	r3, [pc, #552]	; (80130bc <HAL_RCC_ClockConfig+0x240>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f003 030f 	and.w	r3, r3, #15
 8012e98:	683a      	ldr	r2, [r7, #0]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d910      	bls.n	8012ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012e9e:	4b87      	ldr	r3, [pc, #540]	; (80130bc <HAL_RCC_ClockConfig+0x240>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	f023 020f 	bic.w	r2, r3, #15
 8012ea6:	4985      	ldr	r1, [pc, #532]	; (80130bc <HAL_RCC_ClockConfig+0x240>)
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	4313      	orrs	r3, r2
 8012eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012eae:	4b83      	ldr	r3, [pc, #524]	; (80130bc <HAL_RCC_ClockConfig+0x240>)
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	f003 030f 	and.w	r3, r3, #15
 8012eb6:	683a      	ldr	r2, [r7, #0]
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d001      	beq.n	8012ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	e184      	b.n	80131ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f003 0304 	and.w	r3, r3, #4
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d010      	beq.n	8012eee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	691a      	ldr	r2, [r3, #16]
 8012ed0:	4b7b      	ldr	r3, [pc, #492]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012ed2:	699b      	ldr	r3, [r3, #24]
 8012ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d908      	bls.n	8012eee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012edc:	4b78      	ldr	r3, [pc, #480]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012ede:	699b      	ldr	r3, [r3, #24]
 8012ee0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	691b      	ldr	r3, [r3, #16]
 8012ee8:	4975      	ldr	r1, [pc, #468]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012eea:	4313      	orrs	r3, r2
 8012eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f003 0308 	and.w	r3, r3, #8
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d010      	beq.n	8012f1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	695a      	ldr	r2, [r3, #20]
 8012efe:	4b70      	ldr	r3, [pc, #448]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f00:	69db      	ldr	r3, [r3, #28]
 8012f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d908      	bls.n	8012f1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8012f0a:	4b6d      	ldr	r3, [pc, #436]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f0c:	69db      	ldr	r3, [r3, #28]
 8012f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	695b      	ldr	r3, [r3, #20]
 8012f16:	496a      	ldr	r1, [pc, #424]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f18:	4313      	orrs	r3, r2
 8012f1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f003 0310 	and.w	r3, r3, #16
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d010      	beq.n	8012f4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	699a      	ldr	r2, [r3, #24]
 8012f2c:	4b64      	ldr	r3, [pc, #400]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f2e:	69db      	ldr	r3, [r3, #28]
 8012f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d908      	bls.n	8012f4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012f38:	4b61      	ldr	r3, [pc, #388]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f3a:	69db      	ldr	r3, [r3, #28]
 8012f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	699b      	ldr	r3, [r3, #24]
 8012f44:	495e      	ldr	r1, [pc, #376]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f46:	4313      	orrs	r3, r2
 8012f48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	f003 0320 	and.w	r3, r3, #32
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d010      	beq.n	8012f78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	69da      	ldr	r2, [r3, #28]
 8012f5a:	4b59      	ldr	r3, [pc, #356]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f5c:	6a1b      	ldr	r3, [r3, #32]
 8012f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d908      	bls.n	8012f78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8012f66:	4b56      	ldr	r3, [pc, #344]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f68:	6a1b      	ldr	r3, [r3, #32]
 8012f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	69db      	ldr	r3, [r3, #28]
 8012f72:	4953      	ldr	r1, [pc, #332]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f74:	4313      	orrs	r3, r2
 8012f76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	f003 0302 	and.w	r3, r3, #2
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d010      	beq.n	8012fa6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	68da      	ldr	r2, [r3, #12]
 8012f88:	4b4d      	ldr	r3, [pc, #308]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f8a:	699b      	ldr	r3, [r3, #24]
 8012f8c:	f003 030f 	and.w	r3, r3, #15
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d908      	bls.n	8012fa6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012f94:	4b4a      	ldr	r3, [pc, #296]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012f96:	699b      	ldr	r3, [r3, #24]
 8012f98:	f023 020f 	bic.w	r2, r3, #15
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	68db      	ldr	r3, [r3, #12]
 8012fa0:	4947      	ldr	r1, [pc, #284]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012fa2:	4313      	orrs	r3, r2
 8012fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f003 0301 	and.w	r3, r3, #1
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d055      	beq.n	801305e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8012fb2:	4b43      	ldr	r3, [pc, #268]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012fb4:	699b      	ldr	r3, [r3, #24]
 8012fb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	689b      	ldr	r3, [r3, #8]
 8012fbe:	4940      	ldr	r1, [pc, #256]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012fc0:	4313      	orrs	r3, r2
 8012fc2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	2b02      	cmp	r3, #2
 8012fca:	d107      	bne.n	8012fdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012fcc:	4b3c      	ldr	r3, [pc, #240]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d121      	bne.n	801301c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8012fd8:	2301      	movs	r3, #1
 8012fda:	e0f6      	b.n	80131ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	685b      	ldr	r3, [r3, #4]
 8012fe0:	2b03      	cmp	r3, #3
 8012fe2:	d107      	bne.n	8012ff4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012fe4:	4b36      	ldr	r3, [pc, #216]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d115      	bne.n	801301c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	e0ea      	b.n	80131ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d107      	bne.n	801300c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012ffc:	4b30      	ldr	r3, [pc, #192]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013004:	2b00      	cmp	r3, #0
 8013006:	d109      	bne.n	801301c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8013008:	2301      	movs	r3, #1
 801300a:	e0de      	b.n	80131ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801300c:	4b2c      	ldr	r3, [pc, #176]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	f003 0304 	and.w	r3, r3, #4
 8013014:	2b00      	cmp	r3, #0
 8013016:	d101      	bne.n	801301c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8013018:	2301      	movs	r3, #1
 801301a:	e0d6      	b.n	80131ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801301c:	4b28      	ldr	r3, [pc, #160]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 801301e:	691b      	ldr	r3, [r3, #16]
 8013020:	f023 0207 	bic.w	r2, r3, #7
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	685b      	ldr	r3, [r3, #4]
 8013028:	4925      	ldr	r1, [pc, #148]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 801302a:	4313      	orrs	r3, r2
 801302c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801302e:	f7f9 fe25 	bl	800cc7c <HAL_GetTick>
 8013032:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013034:	e00a      	b.n	801304c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013036:	f7f9 fe21 	bl	800cc7c <HAL_GetTick>
 801303a:	4602      	mov	r2, r0
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	1ad3      	subs	r3, r2, r3
 8013040:	f241 3288 	movw	r2, #5000	; 0x1388
 8013044:	4293      	cmp	r3, r2
 8013046:	d901      	bls.n	801304c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8013048:	2303      	movs	r3, #3
 801304a:	e0be      	b.n	80131ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801304c:	4b1c      	ldr	r3, [pc, #112]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 801304e:	691b      	ldr	r3, [r3, #16]
 8013050:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	685b      	ldr	r3, [r3, #4]
 8013058:	00db      	lsls	r3, r3, #3
 801305a:	429a      	cmp	r2, r3
 801305c:	d1eb      	bne.n	8013036 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	f003 0302 	and.w	r3, r3, #2
 8013066:	2b00      	cmp	r3, #0
 8013068:	d010      	beq.n	801308c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	68da      	ldr	r2, [r3, #12]
 801306e:	4b14      	ldr	r3, [pc, #80]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8013070:	699b      	ldr	r3, [r3, #24]
 8013072:	f003 030f 	and.w	r3, r3, #15
 8013076:	429a      	cmp	r2, r3
 8013078:	d208      	bcs.n	801308c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801307a:	4b11      	ldr	r3, [pc, #68]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 801307c:	699b      	ldr	r3, [r3, #24]
 801307e:	f023 020f 	bic.w	r2, r3, #15
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	68db      	ldr	r3, [r3, #12]
 8013086:	490e      	ldr	r1, [pc, #56]	; (80130c0 <HAL_RCC_ClockConfig+0x244>)
 8013088:	4313      	orrs	r3, r2
 801308a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801308c:	4b0b      	ldr	r3, [pc, #44]	; (80130bc <HAL_RCC_ClockConfig+0x240>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	f003 030f 	and.w	r3, r3, #15
 8013094:	683a      	ldr	r2, [r7, #0]
 8013096:	429a      	cmp	r2, r3
 8013098:	d214      	bcs.n	80130c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801309a:	4b08      	ldr	r3, [pc, #32]	; (80130bc <HAL_RCC_ClockConfig+0x240>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	f023 020f 	bic.w	r2, r3, #15
 80130a2:	4906      	ldr	r1, [pc, #24]	; (80130bc <HAL_RCC_ClockConfig+0x240>)
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	4313      	orrs	r3, r2
 80130a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80130aa:	4b04      	ldr	r3, [pc, #16]	; (80130bc <HAL_RCC_ClockConfig+0x240>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	f003 030f 	and.w	r3, r3, #15
 80130b2:	683a      	ldr	r2, [r7, #0]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d005      	beq.n	80130c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80130b8:	2301      	movs	r3, #1
 80130ba:	e086      	b.n	80131ca <HAL_RCC_ClockConfig+0x34e>
 80130bc:	52002000 	.word	0x52002000
 80130c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	f003 0304 	and.w	r3, r3, #4
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d010      	beq.n	80130f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	691a      	ldr	r2, [r3, #16]
 80130d4:	4b3f      	ldr	r3, [pc, #252]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 80130d6:	699b      	ldr	r3, [r3, #24]
 80130d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80130dc:	429a      	cmp	r2, r3
 80130de:	d208      	bcs.n	80130f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80130e0:	4b3c      	ldr	r3, [pc, #240]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 80130e2:	699b      	ldr	r3, [r3, #24]
 80130e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	691b      	ldr	r3, [r3, #16]
 80130ec:	4939      	ldr	r1, [pc, #228]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 80130ee:	4313      	orrs	r3, r2
 80130f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	f003 0308 	and.w	r3, r3, #8
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d010      	beq.n	8013120 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	695a      	ldr	r2, [r3, #20]
 8013102:	4b34      	ldr	r3, [pc, #208]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 8013104:	69db      	ldr	r3, [r3, #28]
 8013106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801310a:	429a      	cmp	r2, r3
 801310c:	d208      	bcs.n	8013120 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801310e:	4b31      	ldr	r3, [pc, #196]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 8013110:	69db      	ldr	r3, [r3, #28]
 8013112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	695b      	ldr	r3, [r3, #20]
 801311a:	492e      	ldr	r1, [pc, #184]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 801311c:	4313      	orrs	r3, r2
 801311e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	f003 0310 	and.w	r3, r3, #16
 8013128:	2b00      	cmp	r3, #0
 801312a:	d010      	beq.n	801314e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	699a      	ldr	r2, [r3, #24]
 8013130:	4b28      	ldr	r3, [pc, #160]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 8013132:	69db      	ldr	r3, [r3, #28]
 8013134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013138:	429a      	cmp	r2, r3
 801313a:	d208      	bcs.n	801314e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801313c:	4b25      	ldr	r3, [pc, #148]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 801313e:	69db      	ldr	r3, [r3, #28]
 8013140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	699b      	ldr	r3, [r3, #24]
 8013148:	4922      	ldr	r1, [pc, #136]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 801314a:	4313      	orrs	r3, r2
 801314c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	f003 0320 	and.w	r3, r3, #32
 8013156:	2b00      	cmp	r3, #0
 8013158:	d010      	beq.n	801317c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	69da      	ldr	r2, [r3, #28]
 801315e:	4b1d      	ldr	r3, [pc, #116]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 8013160:	6a1b      	ldr	r3, [r3, #32]
 8013162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8013166:	429a      	cmp	r2, r3
 8013168:	d208      	bcs.n	801317c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801316a:	4b1a      	ldr	r3, [pc, #104]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 801316c:	6a1b      	ldr	r3, [r3, #32]
 801316e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	69db      	ldr	r3, [r3, #28]
 8013176:	4917      	ldr	r1, [pc, #92]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 8013178:	4313      	orrs	r3, r2
 801317a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 801317c:	f000 f834 	bl	80131e8 <HAL_RCC_GetSysClockFreq>
 8013180:	4602      	mov	r2, r0
 8013182:	4b14      	ldr	r3, [pc, #80]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 8013184:	699b      	ldr	r3, [r3, #24]
 8013186:	0a1b      	lsrs	r3, r3, #8
 8013188:	f003 030f 	and.w	r3, r3, #15
 801318c:	4912      	ldr	r1, [pc, #72]	; (80131d8 <HAL_RCC_ClockConfig+0x35c>)
 801318e:	5ccb      	ldrb	r3, [r1, r3]
 8013190:	f003 031f 	and.w	r3, r3, #31
 8013194:	fa22 f303 	lsr.w	r3, r2, r3
 8013198:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 801319a:	4b0e      	ldr	r3, [pc, #56]	; (80131d4 <HAL_RCC_ClockConfig+0x358>)
 801319c:	699b      	ldr	r3, [r3, #24]
 801319e:	f003 030f 	and.w	r3, r3, #15
 80131a2:	4a0d      	ldr	r2, [pc, #52]	; (80131d8 <HAL_RCC_ClockConfig+0x35c>)
 80131a4:	5cd3      	ldrb	r3, [r2, r3]
 80131a6:	f003 031f 	and.w	r3, r3, #31
 80131aa:	693a      	ldr	r2, [r7, #16]
 80131ac:	fa22 f303 	lsr.w	r3, r2, r3
 80131b0:	4a0a      	ldr	r2, [pc, #40]	; (80131dc <HAL_RCC_ClockConfig+0x360>)
 80131b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80131b4:	4a0a      	ldr	r2, [pc, #40]	; (80131e0 <HAL_RCC_ClockConfig+0x364>)
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80131ba:	4b0a      	ldr	r3, [pc, #40]	; (80131e4 <HAL_RCC_ClockConfig+0x368>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	4618      	mov	r0, r3
 80131c0:	f7f3 ff48 	bl	8007054 <HAL_InitTick>
 80131c4:	4603      	mov	r3, r0
 80131c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80131c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3718      	adds	r7, #24
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	bf00      	nop
 80131d4:	58024400 	.word	0x58024400
 80131d8:	0802bb44 	.word	0x0802bb44
 80131dc:	24000058 	.word	0x24000058
 80131e0:	24000054 	.word	0x24000054
 80131e4:	2400005c 	.word	0x2400005c

080131e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80131e8:	b480      	push	{r7}
 80131ea:	b089      	sub	sp, #36	; 0x24
 80131ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80131ee:	4bb3      	ldr	r3, [pc, #716]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80131f0:	691b      	ldr	r3, [r3, #16]
 80131f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80131f6:	2b18      	cmp	r3, #24
 80131f8:	f200 8155 	bhi.w	80134a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80131fc:	a201      	add	r2, pc, #4	; (adr r2, 8013204 <HAL_RCC_GetSysClockFreq+0x1c>)
 80131fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013202:	bf00      	nop
 8013204:	08013269 	.word	0x08013269
 8013208:	080134a7 	.word	0x080134a7
 801320c:	080134a7 	.word	0x080134a7
 8013210:	080134a7 	.word	0x080134a7
 8013214:	080134a7 	.word	0x080134a7
 8013218:	080134a7 	.word	0x080134a7
 801321c:	080134a7 	.word	0x080134a7
 8013220:	080134a7 	.word	0x080134a7
 8013224:	0801328f 	.word	0x0801328f
 8013228:	080134a7 	.word	0x080134a7
 801322c:	080134a7 	.word	0x080134a7
 8013230:	080134a7 	.word	0x080134a7
 8013234:	080134a7 	.word	0x080134a7
 8013238:	080134a7 	.word	0x080134a7
 801323c:	080134a7 	.word	0x080134a7
 8013240:	080134a7 	.word	0x080134a7
 8013244:	08013295 	.word	0x08013295
 8013248:	080134a7 	.word	0x080134a7
 801324c:	080134a7 	.word	0x080134a7
 8013250:	080134a7 	.word	0x080134a7
 8013254:	080134a7 	.word	0x080134a7
 8013258:	080134a7 	.word	0x080134a7
 801325c:	080134a7 	.word	0x080134a7
 8013260:	080134a7 	.word	0x080134a7
 8013264:	0801329b 	.word	0x0801329b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013268:	4b94      	ldr	r3, [pc, #592]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	f003 0320 	and.w	r3, r3, #32
 8013270:	2b00      	cmp	r3, #0
 8013272:	d009      	beq.n	8013288 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013274:	4b91      	ldr	r3, [pc, #580]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	08db      	lsrs	r3, r3, #3
 801327a:	f003 0303 	and.w	r3, r3, #3
 801327e:	4a90      	ldr	r2, [pc, #576]	; (80134c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013280:	fa22 f303 	lsr.w	r3, r2, r3
 8013284:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8013286:	e111      	b.n	80134ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8013288:	4b8d      	ldr	r3, [pc, #564]	; (80134c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801328a:	61bb      	str	r3, [r7, #24]
      break;
 801328c:	e10e      	b.n	80134ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801328e:	4b8d      	ldr	r3, [pc, #564]	; (80134c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8013290:	61bb      	str	r3, [r7, #24]
      break;
 8013292:	e10b      	b.n	80134ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8013294:	4b8c      	ldr	r3, [pc, #560]	; (80134c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8013296:	61bb      	str	r3, [r7, #24]
      break;
 8013298:	e108      	b.n	80134ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801329a:	4b88      	ldr	r3, [pc, #544]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801329e:	f003 0303 	and.w	r3, r3, #3
 80132a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80132a4:	4b85      	ldr	r3, [pc, #532]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80132a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132a8:	091b      	lsrs	r3, r3, #4
 80132aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80132b0:	4b82      	ldr	r3, [pc, #520]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80132b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132b4:	f003 0301 	and.w	r3, r3, #1
 80132b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80132ba:	4b80      	ldr	r3, [pc, #512]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80132bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132be:	08db      	lsrs	r3, r3, #3
 80132c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132c4:	68fa      	ldr	r2, [r7, #12]
 80132c6:	fb02 f303 	mul.w	r3, r2, r3
 80132ca:	ee07 3a90 	vmov	s15, r3
 80132ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	f000 80e1 	beq.w	80134a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	2b02      	cmp	r3, #2
 80132e2:	f000 8083 	beq.w	80133ec <HAL_RCC_GetSysClockFreq+0x204>
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	f200 80a1 	bhi.w	8013430 <HAL_RCC_GetSysClockFreq+0x248>
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d003      	beq.n	80132fc <HAL_RCC_GetSysClockFreq+0x114>
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d056      	beq.n	80133a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80132fa:	e099      	b.n	8013430 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80132fc:	4b6f      	ldr	r3, [pc, #444]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f003 0320 	and.w	r3, r3, #32
 8013304:	2b00      	cmp	r3, #0
 8013306:	d02d      	beq.n	8013364 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013308:	4b6c      	ldr	r3, [pc, #432]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	08db      	lsrs	r3, r3, #3
 801330e:	f003 0303 	and.w	r3, r3, #3
 8013312:	4a6b      	ldr	r2, [pc, #428]	; (80134c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013314:	fa22 f303 	lsr.w	r3, r2, r3
 8013318:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	ee07 3a90 	vmov	s15, r3
 8013320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	ee07 3a90 	vmov	s15, r3
 801332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801332e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013332:	4b62      	ldr	r3, [pc, #392]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801333a:	ee07 3a90 	vmov	s15, r3
 801333e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013342:	ed97 6a02 	vldr	s12, [r7, #8]
 8013346:	eddf 5a61 	vldr	s11, [pc, #388]	; 80134cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801334a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801334e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801335a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801335e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8013362:	e087      	b.n	8013474 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	ee07 3a90 	vmov	s15, r3
 801336a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801336e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80134d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8013372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013376:	4b51      	ldr	r3, [pc, #324]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801337a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801337e:	ee07 3a90 	vmov	s15, r3
 8013382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013386:	ed97 6a02 	vldr	s12, [r7, #8]
 801338a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80134cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801338e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801339a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801339e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80133a6:	e065      	b.n	8013474 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	ee07 3a90 	vmov	s15, r3
 80133ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80134d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80133b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133ba:	4b40      	ldr	r3, [pc, #256]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80133bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133c2:	ee07 3a90 	vmov	s15, r3
 80133c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80133ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80133ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80134cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80133d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80133ea:	e043      	b.n	8013474 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	ee07 3a90 	vmov	s15, r3
 80133f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80134d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80133fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133fe:	4b2f      	ldr	r3, [pc, #188]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013406:	ee07 3a90 	vmov	s15, r3
 801340a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801340e:	ed97 6a02 	vldr	s12, [r7, #8]
 8013412:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80134cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8013416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801341a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801341e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013426:	ee67 7a27 	vmul.f32	s15, s14, s15
 801342a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801342e:	e021      	b.n	8013474 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	ee07 3a90 	vmov	s15, r3
 8013436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801343a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80134d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801343e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013442:	4b1e      	ldr	r3, [pc, #120]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801344a:	ee07 3a90 	vmov	s15, r3
 801344e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013452:	ed97 6a02 	vldr	s12, [r7, #8]
 8013456:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80134cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801345a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801345e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801346a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801346e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013472:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8013474:	4b11      	ldr	r3, [pc, #68]	; (80134bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013478:	0a5b      	lsrs	r3, r3, #9
 801347a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801347e:	3301      	adds	r3, #1
 8013480:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	ee07 3a90 	vmov	s15, r3
 8013488:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801348c:	edd7 6a07 	vldr	s13, [r7, #28]
 8013490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013498:	ee17 3a90 	vmov	r3, s15
 801349c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801349e:	e005      	b.n	80134ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80134a0:	2300      	movs	r3, #0
 80134a2:	61bb      	str	r3, [r7, #24]
      break;
 80134a4:	e002      	b.n	80134ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80134a6:	4b07      	ldr	r3, [pc, #28]	; (80134c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80134a8:	61bb      	str	r3, [r7, #24]
      break;
 80134aa:	bf00      	nop
  }

  return sysclockfreq;
 80134ac:	69bb      	ldr	r3, [r7, #24]
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3724      	adds	r7, #36	; 0x24
 80134b2:	46bd      	mov	sp, r7
 80134b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b8:	4770      	bx	lr
 80134ba:	bf00      	nop
 80134bc:	58024400 	.word	0x58024400
 80134c0:	03d09000 	.word	0x03d09000
 80134c4:	003d0900 	.word	0x003d0900
 80134c8:	016e3600 	.word	0x016e3600
 80134cc:	46000000 	.word	0x46000000
 80134d0:	4c742400 	.word	0x4c742400
 80134d4:	4a742400 	.word	0x4a742400
 80134d8:	4bb71b00 	.word	0x4bb71b00

080134dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80134e2:	f7ff fe81 	bl	80131e8 <HAL_RCC_GetSysClockFreq>
 80134e6:	4602      	mov	r2, r0
 80134e8:	4b10      	ldr	r3, [pc, #64]	; (801352c <HAL_RCC_GetHCLKFreq+0x50>)
 80134ea:	699b      	ldr	r3, [r3, #24]
 80134ec:	0a1b      	lsrs	r3, r3, #8
 80134ee:	f003 030f 	and.w	r3, r3, #15
 80134f2:	490f      	ldr	r1, [pc, #60]	; (8013530 <HAL_RCC_GetHCLKFreq+0x54>)
 80134f4:	5ccb      	ldrb	r3, [r1, r3]
 80134f6:	f003 031f 	and.w	r3, r3, #31
 80134fa:	fa22 f303 	lsr.w	r3, r2, r3
 80134fe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8013500:	4b0a      	ldr	r3, [pc, #40]	; (801352c <HAL_RCC_GetHCLKFreq+0x50>)
 8013502:	699b      	ldr	r3, [r3, #24]
 8013504:	f003 030f 	and.w	r3, r3, #15
 8013508:	4a09      	ldr	r2, [pc, #36]	; (8013530 <HAL_RCC_GetHCLKFreq+0x54>)
 801350a:	5cd3      	ldrb	r3, [r2, r3]
 801350c:	f003 031f 	and.w	r3, r3, #31
 8013510:	687a      	ldr	r2, [r7, #4]
 8013512:	fa22 f303 	lsr.w	r3, r2, r3
 8013516:	4a07      	ldr	r2, [pc, #28]	; (8013534 <HAL_RCC_GetHCLKFreq+0x58>)
 8013518:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801351a:	4a07      	ldr	r2, [pc, #28]	; (8013538 <HAL_RCC_GetHCLKFreq+0x5c>)
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8013520:	4b04      	ldr	r3, [pc, #16]	; (8013534 <HAL_RCC_GetHCLKFreq+0x58>)
 8013522:	681b      	ldr	r3, [r3, #0]
}
 8013524:	4618      	mov	r0, r3
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}
 801352c:	58024400 	.word	0x58024400
 8013530:	0802bb44 	.word	0x0802bb44
 8013534:	24000058 	.word	0x24000058
 8013538:	24000054 	.word	0x24000054

0801353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8013540:	f7ff ffcc 	bl	80134dc <HAL_RCC_GetHCLKFreq>
 8013544:	4602      	mov	r2, r0
 8013546:	4b06      	ldr	r3, [pc, #24]	; (8013560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013548:	69db      	ldr	r3, [r3, #28]
 801354a:	091b      	lsrs	r3, r3, #4
 801354c:	f003 0307 	and.w	r3, r3, #7
 8013550:	4904      	ldr	r1, [pc, #16]	; (8013564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8013552:	5ccb      	ldrb	r3, [r1, r3]
 8013554:	f003 031f 	and.w	r3, r3, #31
 8013558:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 801355c:	4618      	mov	r0, r3
 801355e:	bd80      	pop	{r7, pc}
 8013560:	58024400 	.word	0x58024400
 8013564:	0802bb44 	.word	0x0802bb44

08013568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 801356c:	f7ff ffb6 	bl	80134dc <HAL_RCC_GetHCLKFreq>
 8013570:	4602      	mov	r2, r0
 8013572:	4b06      	ldr	r3, [pc, #24]	; (801358c <HAL_RCC_GetPCLK2Freq+0x24>)
 8013574:	69db      	ldr	r3, [r3, #28]
 8013576:	0a1b      	lsrs	r3, r3, #8
 8013578:	f003 0307 	and.w	r3, r3, #7
 801357c:	4904      	ldr	r1, [pc, #16]	; (8013590 <HAL_RCC_GetPCLK2Freq+0x28>)
 801357e:	5ccb      	ldrb	r3, [r1, r3]
 8013580:	f003 031f 	and.w	r3, r3, #31
 8013584:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8013588:	4618      	mov	r0, r3
 801358a:	bd80      	pop	{r7, pc}
 801358c:	58024400 	.word	0x58024400
 8013590:	0802bb44 	.word	0x0802bb44

08013594 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013594:	b480      	push	{r7}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	223f      	movs	r2, #63	; 0x3f
 80135a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80135a4:	4b1a      	ldr	r3, [pc, #104]	; (8013610 <HAL_RCC_GetClockConfig+0x7c>)
 80135a6:	691b      	ldr	r3, [r3, #16]
 80135a8:	f003 0207 	and.w	r2, r3, #7
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80135b0:	4b17      	ldr	r3, [pc, #92]	; (8013610 <HAL_RCC_GetClockConfig+0x7c>)
 80135b2:	699b      	ldr	r3, [r3, #24]
 80135b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80135bc:	4b14      	ldr	r3, [pc, #80]	; (8013610 <HAL_RCC_GetClockConfig+0x7c>)
 80135be:	699b      	ldr	r3, [r3, #24]
 80135c0:	f003 020f 	and.w	r2, r3, #15
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80135c8:	4b11      	ldr	r3, [pc, #68]	; (8013610 <HAL_RCC_GetClockConfig+0x7c>)
 80135ca:	699b      	ldr	r3, [r3, #24]
 80135cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80135d4:	4b0e      	ldr	r3, [pc, #56]	; (8013610 <HAL_RCC_GetClockConfig+0x7c>)
 80135d6:	69db      	ldr	r3, [r3, #28]
 80135d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80135e0:	4b0b      	ldr	r3, [pc, #44]	; (8013610 <HAL_RCC_GetClockConfig+0x7c>)
 80135e2:	69db      	ldr	r3, [r3, #28]
 80135e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80135ec:	4b08      	ldr	r3, [pc, #32]	; (8013610 <HAL_RCC_GetClockConfig+0x7c>)
 80135ee:	6a1b      	ldr	r3, [r3, #32]
 80135f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80135f8:	4b06      	ldr	r3, [pc, #24]	; (8013614 <HAL_RCC_GetClockConfig+0x80>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	f003 020f 	and.w	r2, r3, #15
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	601a      	str	r2, [r3, #0]
}
 8013604:	bf00      	nop
 8013606:	370c      	adds	r7, #12
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr
 8013610:	58024400 	.word	0x58024400
 8013614:	52002000 	.word	0x52002000

08013618 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801361c:	b0c8      	sub	sp, #288	; 0x120
 801361e:	af00      	add	r7, sp, #0
 8013620:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8013624:	2300      	movs	r3, #0
 8013626:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801362a:	2300      	movs	r3, #0
 801362c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8013630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013638:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801363c:	f04f 0300 	mov.w	r3, #0
 8013640:	ea00 0402 	and.w	r4, r0, r2
 8013644:	ea01 0503 	and.w	r5, r1, r3
 8013648:	ea54 0305 	orrs.w	r3, r4, r5
 801364c:	d049      	beq.n	80136e2 <HAL_RCCEx_PeriphCLKConfig+0xca>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801364e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013658:	d02f      	beq.n	80136ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 801365a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801365e:	d828      	bhi.n	80136b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8013660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013664:	d01a      	beq.n	801369c <HAL_RCCEx_PeriphCLKConfig+0x84>
 8013666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801366a:	d822      	bhi.n	80136b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 801366c:	2b00      	cmp	r3, #0
 801366e:	d003      	beq.n	8013678 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8013670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013674:	d007      	beq.n	8013686 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8013676:	e01c      	b.n	80136b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013678:	4bc2      	ldr	r3, [pc, #776]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801367c:	4ac1      	ldr	r2, [pc, #772]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801367e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013684:	e01a      	b.n	80136bc <HAL_RCCEx_PeriphCLKConfig+0xa4>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801368a:	3308      	adds	r3, #8
 801368c:	2102      	movs	r1, #2
 801368e:	4618      	mov	r0, r3
 8013690:	f001 f9f4 	bl	8014a7c <RCCEx_PLL2_Config>
 8013694:	4603      	mov	r3, r0
 8013696:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801369a:	e00f      	b.n	80136bc <HAL_RCCEx_PeriphCLKConfig+0xa4>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801369c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136a0:	3328      	adds	r3, #40	; 0x28
 80136a2:	2102      	movs	r1, #2
 80136a4:	4618      	mov	r0, r3
 80136a6:	f001 fa9b 	bl	8014be0 <RCCEx_PLL3_Config>
 80136aa:	4603      	mov	r3, r0
 80136ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80136b0:	e004      	b.n	80136bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80136b2:	2301      	movs	r3, #1
 80136b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80136b8:	e000      	b.n	80136bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
        break;
 80136ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80136bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d10a      	bne.n	80136da <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80136c4:	4baf      	ldr	r3, [pc, #700]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80136c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136c8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80136cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136d2:	4aac      	ldr	r2, [pc, #688]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80136d4:	430b      	orrs	r3, r1
 80136d6:	6513      	str	r3, [r2, #80]	; 0x50
 80136d8:	e003      	b.n	80136e2 <HAL_RCCEx_PeriphCLKConfig+0xca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80136da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80136de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80136e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80136ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80136ee:	f04f 0300 	mov.w	r3, #0
 80136f2:	ea00 0802 	and.w	r8, r0, r2
 80136f6:	ea01 0903 	and.w	r9, r1, r3
 80136fa:	ea58 0309 	orrs.w	r3, r8, r9
 80136fe:	d046      	beq.n	801378e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8013700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013706:	2b04      	cmp	r3, #4
 8013708:	d829      	bhi.n	801375e <HAL_RCCEx_PeriphCLKConfig+0x146>
 801370a:	a201      	add	r2, pc, #4	; (adr r2, 8013710 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 801370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013710:	08013725 	.word	0x08013725
 8013714:	08013733 	.word	0x08013733
 8013718:	08013749 	.word	0x08013749
 801371c:	08013767 	.word	0x08013767
 8013720:	08013767 	.word	0x08013767
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013724:	4b97      	ldr	r3, [pc, #604]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8013726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013728:	4a96      	ldr	r2, [pc, #600]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801372a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801372e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013730:	e01a      	b.n	8013768 <HAL_RCCEx_PeriphCLKConfig+0x150>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013736:	3308      	adds	r3, #8
 8013738:	2100      	movs	r1, #0
 801373a:	4618      	mov	r0, r3
 801373c:	f001 f99e 	bl	8014a7c <RCCEx_PLL2_Config>
 8013740:	4603      	mov	r3, r0
 8013742:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013746:	e00f      	b.n	8013768 <HAL_RCCEx_PeriphCLKConfig+0x150>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801374c:	3328      	adds	r3, #40	; 0x28
 801374e:	2100      	movs	r1, #0
 8013750:	4618      	mov	r0, r3
 8013752:	f001 fa45 	bl	8014be0 <RCCEx_PLL3_Config>
 8013756:	4603      	mov	r3, r0
 8013758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801375c:	e004      	b.n	8013768 <HAL_RCCEx_PeriphCLKConfig+0x150>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801375e:	2301      	movs	r3, #1
 8013760:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013764:	e000      	b.n	8013768 <HAL_RCCEx_PeriphCLKConfig+0x150>
        break;
 8013766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013768:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801376c:	2b00      	cmp	r3, #0
 801376e:	d10a      	bne.n	8013786 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013770:	4b84      	ldr	r3, [pc, #528]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8013772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013774:	f023 0107 	bic.w	r1, r3, #7
 8013778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801377e:	4a81      	ldr	r2, [pc, #516]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8013780:	430b      	orrs	r3, r1
 8013782:	6513      	str	r3, [r2, #80]	; 0x50
 8013784:	e003      	b.n	801378e <HAL_RCCEx_PeriphCLKConfig+0x176>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013786:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801378a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 801378e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013792:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013796:	f44f 7200 	mov.w	r2, #512	; 0x200
 801379a:	f04f 0300 	mov.w	r3, #0
 801379e:	ea00 0a02 	and.w	sl, r0, r2
 80137a2:	ea01 0b03 	and.w	fp, r1, r3
 80137a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80137aa:	d054      	beq.n	8013856 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80137ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80137b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80137b6:	d036      	beq.n	8013826 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80137b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80137bc:	d82f      	bhi.n	801381e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80137be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137c2:	d032      	beq.n	801382a <HAL_RCCEx_PeriphCLKConfig+0x212>
 80137c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137c8:	d829      	bhi.n	801381e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80137ca:	2bc0      	cmp	r3, #192	; 0xc0
 80137cc:	d02f      	beq.n	801382e <HAL_RCCEx_PeriphCLKConfig+0x216>
 80137ce:	2bc0      	cmp	r3, #192	; 0xc0
 80137d0:	d825      	bhi.n	801381e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80137d2:	2b80      	cmp	r3, #128	; 0x80
 80137d4:	d018      	beq.n	8013808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80137d6:	2b80      	cmp	r3, #128	; 0x80
 80137d8:	d821      	bhi.n	801381e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d002      	beq.n	80137e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80137de:	2b40      	cmp	r3, #64	; 0x40
 80137e0:	d007      	beq.n	80137f2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 80137e2:	e01c      	b.n	801381e <HAL_RCCEx_PeriphCLKConfig+0x206>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80137e4:	4b67      	ldr	r3, [pc, #412]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80137e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137e8:	4a66      	ldr	r2, [pc, #408]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80137ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80137ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80137f0:	e01e      	b.n	8013830 <HAL_RCCEx_PeriphCLKConfig+0x218>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80137f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137f6:	3308      	adds	r3, #8
 80137f8:	2100      	movs	r1, #0
 80137fa:	4618      	mov	r0, r3
 80137fc:	f001 f93e 	bl	8014a7c <RCCEx_PLL2_Config>
 8013800:	4603      	mov	r3, r0
 8013802:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8013806:	e013      	b.n	8013830 <HAL_RCCEx_PeriphCLKConfig+0x218>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801380c:	3328      	adds	r3, #40	; 0x28
 801380e:	2100      	movs	r1, #0
 8013810:	4618      	mov	r0, r3
 8013812:	f001 f9e5 	bl	8014be0 <RCCEx_PLL3_Config>
 8013816:	4603      	mov	r3, r0
 8013818:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 801381c:	e008      	b.n	8013830 <HAL_RCCEx_PeriphCLKConfig+0x218>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801381e:	2301      	movs	r3, #1
 8013820:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013824:	e004      	b.n	8013830 <HAL_RCCEx_PeriphCLKConfig+0x218>
        break;
 8013826:	bf00      	nop
 8013828:	e002      	b.n	8013830 <HAL_RCCEx_PeriphCLKConfig+0x218>
        break;
 801382a:	bf00      	nop
 801382c:	e000      	b.n	8013830 <HAL_RCCEx_PeriphCLKConfig+0x218>
        break;
 801382e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013830:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013834:	2b00      	cmp	r3, #0
 8013836:	d10a      	bne.n	801384e <HAL_RCCEx_PeriphCLKConfig+0x236>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8013838:	4b52      	ldr	r3, [pc, #328]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801383c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8013840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013846:	4a4f      	ldr	r2, [pc, #316]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8013848:	430b      	orrs	r3, r1
 801384a:	6513      	str	r3, [r2, #80]	; 0x50
 801384c:	e003      	b.n	8013856 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801384e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013852:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8013856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801385a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801385e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013862:	f04f 0300 	mov.w	r3, #0
 8013866:	ea00 0402 	and.w	r4, r0, r2
 801386a:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 801386e:	400b      	ands	r3, r1
 8013870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013874:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8013878:	4323      	orrs	r3, r4
 801387a:	d059      	beq.n	8013930 <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 801387c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013882:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8013886:	d03b      	beq.n	8013900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8013888:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 801388c:	d834      	bhi.n	80138f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 801388e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013892:	d037      	beq.n	8013904 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8013894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013898:	d82e      	bhi.n	80138f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 801389a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801389e:	d033      	beq.n	8013908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80138a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80138a4:	d828      	bhi.n	80138f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 80138a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80138aa:	d01a      	beq.n	80138e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80138ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80138b0:	d822      	bhi.n	80138f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d003      	beq.n	80138be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80138b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138ba:	d007      	beq.n	80138cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80138bc:	e01c      	b.n	80138f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80138be:	4b31      	ldr	r3, [pc, #196]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80138c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c2:	4a30      	ldr	r2, [pc, #192]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80138c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80138c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80138ca:	e01e      	b.n	801390a <HAL_RCCEx_PeriphCLKConfig+0x2f2>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80138cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138d0:	3308      	adds	r3, #8
 80138d2:	2100      	movs	r1, #0
 80138d4:	4618      	mov	r0, r3
 80138d6:	f001 f8d1 	bl	8014a7c <RCCEx_PLL2_Config>
 80138da:	4603      	mov	r3, r0
 80138dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80138e0:	e013      	b.n	801390a <HAL_RCCEx_PeriphCLKConfig+0x2f2>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80138e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138e6:	3328      	adds	r3, #40	; 0x28
 80138e8:	2100      	movs	r1, #0
 80138ea:	4618      	mov	r0, r3
 80138ec:	f001 f978 	bl	8014be0 <RCCEx_PLL3_Config>
 80138f0:	4603      	mov	r3, r0
 80138f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80138f6:	e008      	b.n	801390a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80138f8:	2301      	movs	r3, #1
 80138fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80138fe:	e004      	b.n	801390a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
        break;
 8013900:	bf00      	nop
 8013902:	e002      	b.n	801390a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
        break;
 8013904:	bf00      	nop
 8013906:	e000      	b.n	801390a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
        break;
 8013908:	bf00      	nop
    }

    if (ret == HAL_OK)
 801390a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801390e:	2b00      	cmp	r3, #0
 8013910:	d10a      	bne.n	8013928 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8013912:	4b1c      	ldr	r3, [pc, #112]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8013914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013916:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 801391a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801391e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013920:	4a18      	ldr	r2, [pc, #96]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8013922:	430b      	orrs	r3, r1
 8013924:	6513      	str	r3, [r2, #80]	; 0x50
 8013926:	e003      	b.n	8013930 <HAL_RCCEx_PeriphCLKConfig+0x318>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013928:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801392c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8013930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013934:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801393c:	f04f 0300 	mov.w	r3, #0
 8013940:	ea00 0402 	and.w	r4, r0, r2
 8013944:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8013948:	400b      	ands	r3, r1
 801394a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801394e:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8013952:	4323      	orrs	r3, r4
 8013954:	d03d      	beq.n	80139d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8013956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801395a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801395c:	2b30      	cmp	r3, #48	; 0x30
 801395e:	d022      	beq.n	80139a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8013960:	2b30      	cmp	r3, #48	; 0x30
 8013962:	d81c      	bhi.n	801399e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8013964:	2b20      	cmp	r3, #32
 8013966:	d00f      	beq.n	8013988 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8013968:	2b20      	cmp	r3, #32
 801396a:	d818      	bhi.n	801399e <HAL_RCCEx_PeriphCLKConfig+0x386>
 801396c:	2b00      	cmp	r3, #0
 801396e:	d01c      	beq.n	80139aa <HAL_RCCEx_PeriphCLKConfig+0x392>
 8013970:	2b10      	cmp	r3, #16
 8013972:	d114      	bne.n	801399e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013974:	4b03      	ldr	r3, [pc, #12]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8013976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013978:	4a02      	ldr	r2, [pc, #8]	; (8013984 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801397a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801397e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8013980:	e014      	b.n	80139ac <HAL_RCCEx_PeriphCLKConfig+0x394>
 8013982:	bf00      	nop
 8013984:	58024400 	.word	0x58024400

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801398c:	3308      	adds	r3, #8
 801398e:	2102      	movs	r1, #2
 8013990:	4618      	mov	r0, r3
 8013992:	f001 f873 	bl	8014a7c <RCCEx_PLL2_Config>
 8013996:	4603      	mov	r3, r0
 8013998:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801399c:	e006      	b.n	80139ac <HAL_RCCEx_PeriphCLKConfig+0x394>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801399e:	2301      	movs	r3, #1
 80139a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80139a4:	e002      	b.n	80139ac <HAL_RCCEx_PeriphCLKConfig+0x394>
        break;
 80139a6:	bf00      	nop
 80139a8:	e000      	b.n	80139ac <HAL_RCCEx_PeriphCLKConfig+0x394>
        break;
 80139aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80139ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d10a      	bne.n	80139ca <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80139b4:	4bc1      	ldr	r3, [pc, #772]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80139b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139b8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80139bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139c2:	4abe      	ldr	r2, [pc, #760]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80139c4:	430b      	orrs	r3, r1
 80139c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80139c8:	e003      	b.n	80139d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80139ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80139ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80139d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80139da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80139de:	f04f 0300 	mov.w	r3, #0
 80139e2:	ea00 0402 	and.w	r4, r0, r2
 80139e6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80139ea:	400b      	ands	r3, r1
 80139ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80139f0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80139f4:	4323      	orrs	r3, r4
 80139f6:	d051      	beq.n	8013a9c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80139f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80139fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013a02:	d035      	beq.n	8013a70 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8013a04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013a08:	d82e      	bhi.n	8013a68 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8013a0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013a0e:	d031      	beq.n	8013a74 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8013a10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013a14:	d828      	bhi.n	8013a68 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8013a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013a1a:	d01a      	beq.n	8013a52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8013a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013a20:	d822      	bhi.n	8013a68 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d003      	beq.n	8013a2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8013a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013a2a:	d007      	beq.n	8013a3c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8013a2c:	e01c      	b.n	8013a68 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013a2e:	4ba3      	ldr	r3, [pc, #652]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8013a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a32:	4aa2      	ldr	r2, [pc, #648]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8013a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013a38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8013a3a:	e01c      	b.n	8013a76 <HAL_RCCEx_PeriphCLKConfig+0x45e>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a40:	3308      	adds	r3, #8
 8013a42:	2100      	movs	r1, #0
 8013a44:	4618      	mov	r0, r3
 8013a46:	f001 f819 	bl	8014a7c <RCCEx_PLL2_Config>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8013a50:	e011      	b.n	8013a76 <HAL_RCCEx_PeriphCLKConfig+0x45e>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a56:	3328      	adds	r3, #40	; 0x28
 8013a58:	2100      	movs	r1, #0
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f001 f8c0 	bl	8014be0 <RCCEx_PLL3_Config>
 8013a60:	4603      	mov	r3, r0
 8013a62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8013a66:	e006      	b.n	8013a76 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013a68:	2301      	movs	r3, #1
 8013a6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013a6e:	e002      	b.n	8013a76 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        break;
 8013a70:	bf00      	nop
 8013a72:	e000      	b.n	8013a76 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        break;
 8013a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013a76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d10a      	bne.n	8013a94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8013a7e:	4b8f      	ldr	r3, [pc, #572]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8013a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a82:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8013a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013a8c:	4a8b      	ldr	r2, [pc, #556]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8013a8e:	430b      	orrs	r3, r1
 8013a90:	6513      	str	r3, [r2, #80]	; 0x50
 8013a92:	e003      	b.n	8013a9c <HAL_RCCEx_PeriphCLKConfig+0x484>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013a94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013a98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8013a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013aa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013aa8:	f04f 0300 	mov.w	r3, #0
 8013aac:	ea00 0402 	and.w	r4, r0, r2
 8013ab0:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8013ab4:	400b      	ands	r3, r1
 8013ab6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013aba:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8013abe:	4323      	orrs	r3, r4
 8013ac0:	d053      	beq.n	8013b6a <HAL_RCCEx_PeriphCLKConfig+0x552>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8013ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013acc:	d033      	beq.n	8013b36 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8013ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013ad2:	d82c      	bhi.n	8013b2e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8013ad4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013ad8:	d02f      	beq.n	8013b3a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8013ada:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013ade:	d826      	bhi.n	8013b2e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8013ae0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013ae4:	d02b      	beq.n	8013b3e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8013ae6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013aea:	d820      	bhi.n	8013b2e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8013aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013af0:	d012      	beq.n	8013b18 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8013af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013af6:	d81a      	bhi.n	8013b2e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d022      	beq.n	8013b42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8013afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b00:	d115      	bne.n	8013b2e <HAL_RCCEx_PeriphCLKConfig+0x516>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b06:	3308      	adds	r3, #8
 8013b08:	2101      	movs	r1, #1
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f000 ffb6 	bl	8014a7c <RCCEx_PLL2_Config>
 8013b10:	4603      	mov	r3, r0
 8013b12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8013b16:	e015      	b.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b1c:	3328      	adds	r3, #40	; 0x28
 8013b1e:	2101      	movs	r1, #1
 8013b20:	4618      	mov	r0, r3
 8013b22:	f001 f85d 	bl	8014be0 <RCCEx_PLL3_Config>
 8013b26:	4603      	mov	r3, r0
 8013b28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8013b2c:	e00a      	b.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013b2e:	2301      	movs	r3, #1
 8013b30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013b34:	e006      	b.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        break;
 8013b36:	bf00      	nop
 8013b38:	e004      	b.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        break;
 8013b3a:	bf00      	nop
 8013b3c:	e002      	b.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        break;
 8013b3e:	bf00      	nop
 8013b40:	e000      	b.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        break;
 8013b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013b44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10a      	bne.n	8013b62 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8013b4c:	4b5b      	ldr	r3, [pc, #364]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8013b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b50:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8013b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013b5a:	4a58      	ldr	r2, [pc, #352]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8013b5c:	430b      	orrs	r3, r1
 8013b5e:	6513      	str	r3, [r2, #80]	; 0x50
 8013b60:	e003      	b.n	8013b6a <HAL_RCCEx_PeriphCLKConfig+0x552>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013b62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013b66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8013b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013b76:	f04f 0300 	mov.w	r3, #0
 8013b7a:	ea00 0402 	and.w	r4, r0, r2
 8013b7e:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8013b82:	400b      	ands	r3, r1
 8013b84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013b88:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8013b8c:	4323      	orrs	r3, r4
 8013b8e:	d05d      	beq.n	8013c4c <HAL_RCCEx_PeriphCLKConfig+0x634>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8013b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013b98:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8013b9c:	d039      	beq.n	8013c12 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 8013b9e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8013ba2:	d832      	bhi.n	8013c0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8013ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013ba8:	d035      	beq.n	8013c16 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8013baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013bae:	d82c      	bhi.n	8013c0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8013bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013bb4:	d031      	beq.n	8013c1a <HAL_RCCEx_PeriphCLKConfig+0x602>
 8013bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013bba:	d826      	bhi.n	8013c0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8013bbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013bc0:	d02d      	beq.n	8013c1e <HAL_RCCEx_PeriphCLKConfig+0x606>
 8013bc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013bc6:	d820      	bhi.n	8013c0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8013bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013bcc:	d012      	beq.n	8013bf4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8013bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013bd2:	d81a      	bhi.n	8013c0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d024      	beq.n	8013c22 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8013bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013bdc:	d115      	bne.n	8013c0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013be2:	3308      	adds	r3, #8
 8013be4:	2101      	movs	r1, #1
 8013be6:	4618      	mov	r0, r3
 8013be8:	f000 ff48 	bl	8014a7c <RCCEx_PLL2_Config>
 8013bec:	4603      	mov	r3, r0
 8013bee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8013bf2:	e017      	b.n	8013c24 <HAL_RCCEx_PeriphCLKConfig+0x60c>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bf8:	3328      	adds	r3, #40	; 0x28
 8013bfa:	2101      	movs	r1, #1
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f000 ffef 	bl	8014be0 <RCCEx_PLL3_Config>
 8013c02:	4603      	mov	r3, r0
 8013c04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8013c08:	e00c      	b.n	8013c24 <HAL_RCCEx_PeriphCLKConfig+0x60c>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013c10:	e008      	b.n	8013c24 <HAL_RCCEx_PeriphCLKConfig+0x60c>
        break;
 8013c12:	bf00      	nop
 8013c14:	e006      	b.n	8013c24 <HAL_RCCEx_PeriphCLKConfig+0x60c>
        break;
 8013c16:	bf00      	nop
 8013c18:	e004      	b.n	8013c24 <HAL_RCCEx_PeriphCLKConfig+0x60c>
        break;
 8013c1a:	bf00      	nop
 8013c1c:	e002      	b.n	8013c24 <HAL_RCCEx_PeriphCLKConfig+0x60c>
        break;
 8013c1e:	bf00      	nop
 8013c20:	e000      	b.n	8013c24 <HAL_RCCEx_PeriphCLKConfig+0x60c>
        break;
 8013c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013c24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d10b      	bne.n	8013c44 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8013c2c:	4b23      	ldr	r3, [pc, #140]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8013c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c30:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8013c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013c3c:	4a1f      	ldr	r2, [pc, #124]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8013c3e:	430b      	orrs	r3, r1
 8013c40:	6593      	str	r3, [r2, #88]	; 0x58
 8013c42:	e003      	b.n	8013c4c <HAL_RCCEx_PeriphCLKConfig+0x634>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013c44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013c48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8013c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013c54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013c58:	f04f 0300 	mov.w	r3, #0
 8013c5c:	ea00 0402 	and.w	r4, r0, r2
 8013c60:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8013c64:	400b      	ands	r3, r1
 8013c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013c6a:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8013c6e:	4323      	orrs	r3, r4
 8013c70:	d03a      	beq.n	8013ce8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8013c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013c7c:	d00e      	beq.n	8013c9c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8013c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013c82:	d816      	bhi.n	8013cb2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d01b      	beq.n	8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8013c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013c8c:	d111      	bne.n	8013cb2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013c8e:	4b0b      	ldr	r3, [pc, #44]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8013c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c92:	4a0a      	ldr	r2, [pc, #40]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8013c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013c98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8013c9a:	e012      	b.n	8013cc2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ca0:	3308      	adds	r3, #8
 8013ca2:	2101      	movs	r1, #1
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f000 fee9 	bl	8014a7c <RCCEx_PLL2_Config>
 8013caa:	4603      	mov	r3, r0
 8013cac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8013cb0:	e007      	b.n	8013cc2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013cb8:	e003      	b.n	8013cc2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8013cba:	bf00      	nop
 8013cbc:	58024400 	.word	0x58024400
        break;
 8013cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013cc2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d10a      	bne.n	8013ce0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8013cca:	4bc9      	ldr	r3, [pc, #804]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013cce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8013cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cd8:	4ac5      	ldr	r2, [pc, #788]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013cda:	430b      	orrs	r3, r1
 8013cdc:	6513      	str	r3, [r2, #80]	; 0x50
 8013cde:	e003      	b.n	8013ce8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013ce0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013ce4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8013ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013cf4:	f04f 0300 	mov.w	r3, #0
 8013cf8:	ea00 0402 	and.w	r4, r0, r2
 8013cfc:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8013d00:	400b      	ands	r3, r1
 8013d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8013d06:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8013d0a:	4323      	orrs	r3, r4
 8013d0c:	d03a      	beq.n	8013d84 <HAL_RCCEx_PeriphCLKConfig+0x76c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8013d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d14:	2b03      	cmp	r3, #3
 8013d16:	d81d      	bhi.n	8013d54 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8013d18:	a201      	add	r2, pc, #4	; (adr r2, 8013d20 <HAL_RCCEx_PeriphCLKConfig+0x708>)
 8013d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d1e:	bf00      	nop
 8013d20:	08013d5d 	.word	0x08013d5d
 8013d24:	08013d31 	.word	0x08013d31
 8013d28:	08013d3f 	.word	0x08013d3f
 8013d2c:	08013d5d 	.word	0x08013d5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013d30:	4baf      	ldr	r3, [pc, #700]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d34:	4aae      	ldr	r2, [pc, #696]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8013d3c:	e00f      	b.n	8013d5e <HAL_RCCEx_PeriphCLKConfig+0x746>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d42:	3308      	adds	r3, #8
 8013d44:	2102      	movs	r1, #2
 8013d46:	4618      	mov	r0, r3
 8013d48:	f000 fe98 	bl	8014a7c <RCCEx_PLL2_Config>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8013d52:	e004      	b.n	8013d5e <HAL_RCCEx_PeriphCLKConfig+0x746>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8013d54:	2301      	movs	r3, #1
 8013d56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013d5a:	e000      	b.n	8013d5e <HAL_RCCEx_PeriphCLKConfig+0x746>
        break;
 8013d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013d5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d10a      	bne.n	8013d7c <HAL_RCCEx_PeriphCLKConfig+0x764>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8013d66:	4ba2      	ldr	r3, [pc, #648]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d6a:	f023 0103 	bic.w	r1, r3, #3
 8013d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d74:	4a9e      	ldr	r2, [pc, #632]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013d76:	430b      	orrs	r3, r1
 8013d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013d7a:	e003      	b.n	8013d84 <HAL_RCCEx_PeriphCLKConfig+0x76c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013d8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8013d90:	f04f 0300 	mov.w	r3, #0
 8013d94:	ea00 0402 	and.w	r4, r0, r2
 8013d98:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8013d9c:	400b      	ands	r3, r1
 8013d9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013da2:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8013da6:	4323      	orrs	r3, r4
 8013da8:	f000 8099 	beq.w	8013ede <HAL_RCCEx_PeriphCLKConfig+0x8c6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013dac:	4b91      	ldr	r3, [pc, #580]	; (8013ff4 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	4a90      	ldr	r2, [pc, #576]	; (8013ff4 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8013db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013db8:	f7f8 ff60 	bl	800cc7c <HAL_GetTick>
 8013dbc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013dc0:	e00b      	b.n	8013dda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013dc2:	f7f8 ff5b 	bl	800cc7c <HAL_GetTick>
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013dcc:	1ad3      	subs	r3, r2, r3
 8013dce:	2b64      	cmp	r3, #100	; 0x64
 8013dd0:	d903      	bls.n	8013dda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        ret = HAL_TIMEOUT;
 8013dd2:	2303      	movs	r3, #3
 8013dd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013dd8:	e005      	b.n	8013de6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013dda:	4b86      	ldr	r3, [pc, #536]	; (8013ff4 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d0ed      	beq.n	8013dc2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      }
    }

    if (ret == HAL_OK)
 8013de6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d173      	bne.n	8013ed6 <HAL_RCCEx_PeriphCLKConfig+0x8be>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013dee:	4b80      	ldr	r3, [pc, #512]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013df0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013df6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013dfa:	4053      	eors	r3, r2
 8013dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d015      	beq.n	8013e30 <HAL_RCCEx_PeriphCLKConfig+0x818>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013e04:	4b7a      	ldr	r3, [pc, #488]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013e0c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8013e10:	4b77      	ldr	r3, [pc, #476]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e14:	4a76      	ldr	r2, [pc, #472]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013e1a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013e1c:	4b74      	ldr	r3, [pc, #464]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e20:	4a73      	ldr	r2, [pc, #460]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013e26:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8013e28:	4a71      	ldr	r2, [pc, #452]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013e2e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8013e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e3c:	d118      	bne.n	8013e70 <HAL_RCCEx_PeriphCLKConfig+0x858>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e3e:	f7f8 ff1d 	bl	800cc7c <HAL_GetTick>
 8013e42:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013e46:	e00d      	b.n	8013e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013e48:	f7f8 ff18 	bl	800cc7c <HAL_GetTick>
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013e52:	1ad2      	subs	r2, r2, r3
 8013e54:	f241 3388 	movw	r3, #5000	; 0x1388
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d903      	bls.n	8013e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>
          {
            ret = HAL_TIMEOUT;
 8013e5c:	2303      	movs	r3, #3
 8013e5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8013e62:	e005      	b.n	8013e70 <HAL_RCCEx_PeriphCLKConfig+0x858>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013e64:	4b62      	ldr	r3, [pc, #392]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e68:	f003 0302 	and.w	r3, r3, #2
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d0eb      	beq.n	8013e48 <HAL_RCCEx_PeriphCLKConfig+0x830>
          }
        }
      }

      if (ret == HAL_OK)
 8013e70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d129      	bne.n	8013ecc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013e88:	d10e      	bne.n	8013ea8 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8013e8a:	4b59      	ldr	r3, [pc, #356]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013e8c:	691b      	ldr	r3, [r3, #16]
 8013e8e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8013e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013e9a:	091a      	lsrs	r2, r3, #4
 8013e9c:	4b56      	ldr	r3, [pc, #344]	; (8013ff8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8013e9e:	4013      	ands	r3, r2
 8013ea0:	4a53      	ldr	r2, [pc, #332]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013ea2:	430b      	orrs	r3, r1
 8013ea4:	6113      	str	r3, [r2, #16]
 8013ea6:	e005      	b.n	8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8013ea8:	4b51      	ldr	r3, [pc, #324]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013eaa:	691b      	ldr	r3, [r3, #16]
 8013eac:	4a50      	ldr	r2, [pc, #320]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013eae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013eb2:	6113      	str	r3, [r2, #16]
 8013eb4:	4b4e      	ldr	r3, [pc, #312]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013eb6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ebc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013ec4:	4a4a      	ldr	r2, [pc, #296]	; (8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8013ec6:	430b      	orrs	r3, r1
 8013ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8013eca:	e008      	b.n	8013ede <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013ecc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013ed0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8013ed4:	e003      	b.n	8013ede <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013ed6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013eda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8013ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013ee6:	f04f 0201 	mov.w	r2, #1
 8013eea:	f04f 0300 	mov.w	r3, #0
 8013eee:	ea00 0402 	and.w	r4, r0, r2
 8013ef2:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8013ef6:	400b      	ands	r3, r1
 8013ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013efc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8013f00:	4323      	orrs	r3, r4
 8013f02:	f000 8090 	beq.w	8014026 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8013f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f0e:	2b28      	cmp	r3, #40	; 0x28
 8013f10:	d86a      	bhi.n	8013fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8013f12:	a201      	add	r2, pc, #4	; (adr r2, 8013f18 <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8013f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f18:	08013ffd 	.word	0x08013ffd
 8013f1c:	08013fe9 	.word	0x08013fe9
 8013f20:	08013fe9 	.word	0x08013fe9
 8013f24:	08013fe9 	.word	0x08013fe9
 8013f28:	08013fe9 	.word	0x08013fe9
 8013f2c:	08013fe9 	.word	0x08013fe9
 8013f30:	08013fe9 	.word	0x08013fe9
 8013f34:	08013fe9 	.word	0x08013fe9
 8013f38:	08013fbd 	.word	0x08013fbd
 8013f3c:	08013fe9 	.word	0x08013fe9
 8013f40:	08013fe9 	.word	0x08013fe9
 8013f44:	08013fe9 	.word	0x08013fe9
 8013f48:	08013fe9 	.word	0x08013fe9
 8013f4c:	08013fe9 	.word	0x08013fe9
 8013f50:	08013fe9 	.word	0x08013fe9
 8013f54:	08013fe9 	.word	0x08013fe9
 8013f58:	08013fd3 	.word	0x08013fd3
 8013f5c:	08013fe9 	.word	0x08013fe9
 8013f60:	08013fe9 	.word	0x08013fe9
 8013f64:	08013fe9 	.word	0x08013fe9
 8013f68:	08013fe9 	.word	0x08013fe9
 8013f6c:	08013fe9 	.word	0x08013fe9
 8013f70:	08013fe9 	.word	0x08013fe9
 8013f74:	08013fe9 	.word	0x08013fe9
 8013f78:	08013ffd 	.word	0x08013ffd
 8013f7c:	08013fe9 	.word	0x08013fe9
 8013f80:	08013fe9 	.word	0x08013fe9
 8013f84:	08013fe9 	.word	0x08013fe9
 8013f88:	08013fe9 	.word	0x08013fe9
 8013f8c:	08013fe9 	.word	0x08013fe9
 8013f90:	08013fe9 	.word	0x08013fe9
 8013f94:	08013fe9 	.word	0x08013fe9
 8013f98:	08013ffd 	.word	0x08013ffd
 8013f9c:	08013fe9 	.word	0x08013fe9
 8013fa0:	08013fe9 	.word	0x08013fe9
 8013fa4:	08013fe9 	.word	0x08013fe9
 8013fa8:	08013fe9 	.word	0x08013fe9
 8013fac:	08013fe9 	.word	0x08013fe9
 8013fb0:	08013fe9 	.word	0x08013fe9
 8013fb4:	08013fe9 	.word	0x08013fe9
 8013fb8:	08013ffd 	.word	0x08013ffd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013fc0:	3308      	adds	r3, #8
 8013fc2:	2101      	movs	r1, #1
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f000 fd59 	bl	8014a7c <RCCEx_PLL2_Config>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8013fd0:	e015      	b.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x9e6>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013fd6:	3328      	adds	r3, #40	; 0x28
 8013fd8:	2101      	movs	r1, #1
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f000 fe00 	bl	8014be0 <RCCEx_PLL3_Config>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8013fe6:	e00a      	b.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x9e6>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013fe8:	2301      	movs	r3, #1
 8013fea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013fee:	e006      	b.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 8013ff0:	58024400 	.word	0x58024400
 8013ff4:	58024800 	.word	0x58024800
 8013ff8:	00ffffcf 	.word	0x00ffffcf
        break;
 8013ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013ffe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014002:	2b00      	cmp	r3, #0
 8014004:	d10b      	bne.n	801401e <HAL_RCCEx_PeriphCLKConfig+0xa06>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8014006:	4bc7      	ldr	r3, [pc, #796]	; (8014324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>)
 8014008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801400a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801400e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014016:	4ac3      	ldr	r2, [pc, #780]	; (8014324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>)
 8014018:	430b      	orrs	r3, r1
 801401a:	6553      	str	r3, [r2, #84]	; 0x54
 801401c:	e003      	b.n	8014026 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801401e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014022:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8014026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801402a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801402e:	f04f 0202 	mov.w	r2, #2
 8014032:	f04f 0300 	mov.w	r3, #0
 8014036:	ea00 0402 	and.w	r4, r0, r2
 801403a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 801403e:	400b      	ands	r3, r1
 8014040:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014044:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8014048:	4323      	orrs	r3, r4
 801404a:	d044      	beq.n	80140d6 <HAL_RCCEx_PeriphCLKConfig+0xabe>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801404c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014054:	2b05      	cmp	r3, #5
 8014056:	d825      	bhi.n	80140a4 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 8014058:	a201      	add	r2, pc, #4	; (adr r2, 8014060 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 801405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801405e:	bf00      	nop
 8014060:	080140ad 	.word	0x080140ad
 8014064:	08014079 	.word	0x08014079
 8014068:	0801408f 	.word	0x0801408f
 801406c:	080140ad 	.word	0x080140ad
 8014070:	080140ad 	.word	0x080140ad
 8014074:	080140ad 	.word	0x080140ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801407c:	3308      	adds	r3, #8
 801407e:	2101      	movs	r1, #1
 8014080:	4618      	mov	r0, r3
 8014082:	f000 fcfb 	bl	8014a7c <RCCEx_PLL2_Config>
 8014086:	4603      	mov	r3, r0
 8014088:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801408c:	e00f      	b.n	80140ae <HAL_RCCEx_PeriphCLKConfig+0xa96>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801408e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014092:	3328      	adds	r3, #40	; 0x28
 8014094:	2101      	movs	r1, #1
 8014096:	4618      	mov	r0, r3
 8014098:	f000 fda2 	bl	8014be0 <RCCEx_PLL3_Config>
 801409c:	4603      	mov	r3, r0
 801409e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80140a2:	e004      	b.n	80140ae <HAL_RCCEx_PeriphCLKConfig+0xa96>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80140a4:	2301      	movs	r3, #1
 80140a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80140aa:	e000      	b.n	80140ae <HAL_RCCEx_PeriphCLKConfig+0xa96>
        break;
 80140ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80140ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d10b      	bne.n	80140ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80140b6:	4b9b      	ldr	r3, [pc, #620]	; (8014324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>)
 80140b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140ba:	f023 0107 	bic.w	r1, r3, #7
 80140be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80140c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140c6:	4a97      	ldr	r2, [pc, #604]	; (8014324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>)
 80140c8:	430b      	orrs	r3, r1
 80140ca:	6553      	str	r3, [r2, #84]	; 0x54
 80140cc:	e003      	b.n	80140d6 <HAL_RCCEx_PeriphCLKConfig+0xabe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80140ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80140d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80140d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80140da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80140de:	f04f 0204 	mov.w	r2, #4
 80140e2:	f04f 0300 	mov.w	r3, #0
 80140e6:	ea00 0402 	and.w	r4, r0, r2
 80140ea:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80140ee:	400b      	ands	r3, r1
 80140f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80140f4:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80140f8:	4323      	orrs	r3, r4
 80140fa:	d044      	beq.n	8014186 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80140fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014104:	2b05      	cmp	r3, #5
 8014106:	d825      	bhi.n	8014154 <HAL_RCCEx_PeriphCLKConfig+0xb3c>
 8014108:	a201      	add	r2, pc, #4	; (adr r2, 8014110 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 801410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801410e:	bf00      	nop
 8014110:	0801415d 	.word	0x0801415d
 8014114:	08014129 	.word	0x08014129
 8014118:	0801413f 	.word	0x0801413f
 801411c:	0801415d 	.word	0x0801415d
 8014120:	0801415d 	.word	0x0801415d
 8014124:	0801415d 	.word	0x0801415d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801412c:	3308      	adds	r3, #8
 801412e:	2101      	movs	r1, #1
 8014130:	4618      	mov	r0, r3
 8014132:	f000 fca3 	bl	8014a7c <RCCEx_PLL2_Config>
 8014136:	4603      	mov	r3, r0
 8014138:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801413c:	e00f      	b.n	801415e <HAL_RCCEx_PeriphCLKConfig+0xb46>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801413e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014142:	3328      	adds	r3, #40	; 0x28
 8014144:	2101      	movs	r1, #1
 8014146:	4618      	mov	r0, r3
 8014148:	f000 fd4a 	bl	8014be0 <RCCEx_PLL3_Config>
 801414c:	4603      	mov	r3, r0
 801414e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8014152:	e004      	b.n	801415e <HAL_RCCEx_PeriphCLKConfig+0xb46>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014154:	2301      	movs	r3, #1
 8014156:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801415a:	e000      	b.n	801415e <HAL_RCCEx_PeriphCLKConfig+0xb46>
        break;
 801415c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801415e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014162:	2b00      	cmp	r3, #0
 8014164:	d10b      	bne.n	801417e <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014166:	4b6f      	ldr	r3, [pc, #444]	; (8014324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>)
 8014168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801416a:	f023 0107 	bic.w	r1, r3, #7
 801416e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014176:	4a6b      	ldr	r2, [pc, #428]	; (8014324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>)
 8014178:	430b      	orrs	r3, r1
 801417a:	6593      	str	r3, [r2, #88]	; 0x58
 801417c:	e003      	b.n	8014186 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801417e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014182:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8014186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801418a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801418e:	f04f 0220 	mov.w	r2, #32
 8014192:	f04f 0300 	mov.w	r3, #0
 8014196:	ea00 0402 	and.w	r4, r0, r2
 801419a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 801419e:	400b      	ands	r3, r1
 80141a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80141a4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80141a8:	4323      	orrs	r3, r4
 80141aa:	d055      	beq.n	8014258 <HAL_RCCEx_PeriphCLKConfig+0xc40>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80141ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80141b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80141b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80141b8:	d033      	beq.n	8014222 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 80141ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80141be:	d82c      	bhi.n	801421a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80141c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80141c4:	d02f      	beq.n	8014226 <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 80141c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80141ca:	d826      	bhi.n	801421a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80141cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80141d0:	d02b      	beq.n	801422a <HAL_RCCEx_PeriphCLKConfig+0xc12>
 80141d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80141d6:	d820      	bhi.n	801421a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80141d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80141dc:	d012      	beq.n	8014204 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80141de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80141e2:	d81a      	bhi.n	801421a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d022      	beq.n	801422e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80141e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80141ec:	d115      	bne.n	801421a <HAL_RCCEx_PeriphCLKConfig+0xc02>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80141ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80141f2:	3308      	adds	r3, #8
 80141f4:	2100      	movs	r1, #0
 80141f6:	4618      	mov	r0, r3
 80141f8:	f000 fc40 	bl	8014a7c <RCCEx_PLL2_Config>
 80141fc:	4603      	mov	r3, r0
 80141fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8014202:	e015      	b.n	8014230 <HAL_RCCEx_PeriphCLKConfig+0xc18>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014208:	3328      	adds	r3, #40	; 0x28
 801420a:	2102      	movs	r1, #2
 801420c:	4618      	mov	r0, r3
 801420e:	f000 fce7 	bl	8014be0 <RCCEx_PLL3_Config>
 8014212:	4603      	mov	r3, r0
 8014214:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8014218:	e00a      	b.n	8014230 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801421a:	2301      	movs	r3, #1
 801421c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014220:	e006      	b.n	8014230 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        break;
 8014222:	bf00      	nop
 8014224:	e004      	b.n	8014230 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        break;
 8014226:	bf00      	nop
 8014228:	e002      	b.n	8014230 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        break;
 801422a:	bf00      	nop
 801422c:	e000      	b.n	8014230 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        break;
 801422e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014230:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014234:	2b00      	cmp	r3, #0
 8014236:	d10b      	bne.n	8014250 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8014238:	4b3a      	ldr	r3, [pc, #232]	; (8014324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>)
 801423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801423c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8014240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014248:	4a36      	ldr	r2, [pc, #216]	; (8014324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>)
 801424a:	430b      	orrs	r3, r1
 801424c:	6553      	str	r3, [r2, #84]	; 0x54
 801424e:	e003      	b.n	8014258 <HAL_RCCEx_PeriphCLKConfig+0xc40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014250:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014254:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8014258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801425c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014260:	f04f 0240 	mov.w	r2, #64	; 0x40
 8014264:	f04f 0300 	mov.w	r3, #0
 8014268:	ea00 0402 	and.w	r4, r0, r2
 801426c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8014270:	400b      	ands	r3, r1
 8014272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8014276:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 801427a:	4323      	orrs	r3, r4
 801427c:	d058      	beq.n	8014330 <HAL_RCCEx_PeriphCLKConfig+0xd18>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801427e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014286:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801428a:	d033      	beq.n	80142f4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 801428c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8014290:	d82c      	bhi.n	80142ec <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8014292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014296:	d02f      	beq.n	80142f8 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8014298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801429c:	d826      	bhi.n	80142ec <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 801429e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80142a2:	d02b      	beq.n	80142fc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80142a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80142a8:	d820      	bhi.n	80142ec <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 80142aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80142ae:	d012      	beq.n	80142d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
 80142b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80142b4:	d81a      	bhi.n	80142ec <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d022      	beq.n	8014300 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80142ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80142be:	d115      	bne.n	80142ec <HAL_RCCEx_PeriphCLKConfig+0xcd4>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80142c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80142c4:	3308      	adds	r3, #8
 80142c6:	2100      	movs	r1, #0
 80142c8:	4618      	mov	r0, r3
 80142ca:	f000 fbd7 	bl	8014a7c <RCCEx_PLL2_Config>
 80142ce:	4603      	mov	r3, r0
 80142d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80142d4:	e015      	b.n	8014302 <HAL_RCCEx_PeriphCLKConfig+0xcea>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80142d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80142da:	3328      	adds	r3, #40	; 0x28
 80142dc:	2102      	movs	r1, #2
 80142de:	4618      	mov	r0, r3
 80142e0:	f000 fc7e 	bl	8014be0 <RCCEx_PLL3_Config>
 80142e4:	4603      	mov	r3, r0
 80142e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80142ea:	e00a      	b.n	8014302 <HAL_RCCEx_PeriphCLKConfig+0xcea>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80142ec:	2301      	movs	r3, #1
 80142ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80142f2:	e006      	b.n	8014302 <HAL_RCCEx_PeriphCLKConfig+0xcea>
        break;
 80142f4:	bf00      	nop
 80142f6:	e004      	b.n	8014302 <HAL_RCCEx_PeriphCLKConfig+0xcea>
        break;
 80142f8:	bf00      	nop
 80142fa:	e002      	b.n	8014302 <HAL_RCCEx_PeriphCLKConfig+0xcea>
        break;
 80142fc:	bf00      	nop
 80142fe:	e000      	b.n	8014302 <HAL_RCCEx_PeriphCLKConfig+0xcea>
        break;
 8014300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014302:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014306:	2b00      	cmp	r3, #0
 8014308:	d10e      	bne.n	8014328 <HAL_RCCEx_PeriphCLKConfig+0xd10>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801430a:	4b06      	ldr	r3, [pc, #24]	; (8014324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>)
 801430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801430e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8014312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801431a:	4a02      	ldr	r2, [pc, #8]	; (8014324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>)
 801431c:	430b      	orrs	r3, r1
 801431e:	6593      	str	r3, [r2, #88]	; 0x58
 8014320:	e006      	b.n	8014330 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8014322:	bf00      	nop
 8014324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014328:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801432c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8014330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014338:	f04f 0280 	mov.w	r2, #128	; 0x80
 801433c:	f04f 0300 	mov.w	r3, #0
 8014340:	ea00 0402 	and.w	r4, r0, r2
 8014344:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8014348:	400b      	ands	r3, r1
 801434a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801434e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8014352:	4323      	orrs	r3, r4
 8014354:	d055      	beq.n	8014402 <HAL_RCCEx_PeriphCLKConfig+0xdea>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8014356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801435a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801435e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8014362:	d033      	beq.n	80143cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8014364:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8014368:	d82c      	bhi.n	80143c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 801436a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801436e:	d02f      	beq.n	80143d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8014370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014374:	d826      	bhi.n	80143c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8014376:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801437a:	d02b      	beq.n	80143d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801437c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8014380:	d820      	bhi.n	80143c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8014382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014386:	d012      	beq.n	80143ae <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8014388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801438c:	d81a      	bhi.n	80143c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 801438e:	2b00      	cmp	r3, #0
 8014390:	d022      	beq.n	80143d8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8014392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014396:	d115      	bne.n	80143c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801439c:	3308      	adds	r3, #8
 801439e:	2100      	movs	r1, #0
 80143a0:	4618      	mov	r0, r3
 80143a2:	f000 fb6b 	bl	8014a7c <RCCEx_PLL2_Config>
 80143a6:	4603      	mov	r3, r0
 80143a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80143ac:	e015      	b.n	80143da <HAL_RCCEx_PeriphCLKConfig+0xdc2>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80143ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80143b2:	3328      	adds	r3, #40	; 0x28
 80143b4:	2102      	movs	r1, #2
 80143b6:	4618      	mov	r0, r3
 80143b8:	f000 fc12 	bl	8014be0 <RCCEx_PLL3_Config>
 80143bc:	4603      	mov	r3, r0
 80143be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80143c2:	e00a      	b.n	80143da <HAL_RCCEx_PeriphCLKConfig+0xdc2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80143c4:	2301      	movs	r3, #1
 80143c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80143ca:	e006      	b.n	80143da <HAL_RCCEx_PeriphCLKConfig+0xdc2>
        break;
 80143cc:	bf00      	nop
 80143ce:	e004      	b.n	80143da <HAL_RCCEx_PeriphCLKConfig+0xdc2>
        break;
 80143d0:	bf00      	nop
 80143d2:	e002      	b.n	80143da <HAL_RCCEx_PeriphCLKConfig+0xdc2>
        break;
 80143d4:	bf00      	nop
 80143d6:	e000      	b.n	80143da <HAL_RCCEx_PeriphCLKConfig+0xdc2>
        break;
 80143d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80143da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d10b      	bne.n	80143fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80143e2:	4ba9      	ldr	r3, [pc, #676]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 80143e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143e6:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80143ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80143ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80143f2:	4aa5      	ldr	r2, [pc, #660]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 80143f4:	430b      	orrs	r3, r1
 80143f6:	6593      	str	r3, [r2, #88]	; 0x58
 80143f8:	e003      	b.n	8014402 <HAL_RCCEx_PeriphCLKConfig+0xdea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80143fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80143fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8014402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014406:	e9d3 0100 	ldrd	r0, r1, [r3]
 801440a:	f04f 0208 	mov.w	r2, #8
 801440e:	f04f 0300 	mov.w	r3, #0
 8014412:	ea00 0402 	and.w	r4, r0, r2
 8014416:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 801441a:	400b      	ands	r3, r1
 801441c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014420:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8014424:	4323      	orrs	r3, r4
 8014426:	d01e      	beq.n	8014466 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8014428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801442c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014434:	d10c      	bne.n	8014450 <HAL_RCCEx_PeriphCLKConfig+0xe38>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801443a:	3328      	adds	r3, #40	; 0x28
 801443c:	2102      	movs	r1, #2
 801443e:	4618      	mov	r0, r3
 8014440:	f000 fbce 	bl	8014be0 <RCCEx_PLL3_Config>
 8014444:	4603      	mov	r3, r0
 8014446:	2b00      	cmp	r3, #0
 8014448:	d002      	beq.n	8014450 <HAL_RCCEx_PeriphCLKConfig+0xe38>
      {
        status = HAL_ERROR;
 801444a:	2301      	movs	r3, #1
 801444c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8014450:	4b8d      	ldr	r3, [pc, #564]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 8014452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014454:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801445c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014460:	4a89      	ldr	r2, [pc, #548]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 8014462:	430b      	orrs	r3, r1
 8014464:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8014466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801446a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801446e:	f04f 0210 	mov.w	r2, #16
 8014472:	f04f 0300 	mov.w	r3, #0
 8014476:	ea00 0402 	and.w	r4, r0, r2
 801447a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 801447e:	400b      	ands	r3, r1
 8014480:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014484:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8014488:	4323      	orrs	r3, r4
 801448a:	d01e      	beq.n	80144ca <HAL_RCCEx_PeriphCLKConfig+0xeb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014490:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014498:	d10c      	bne.n	80144b4 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801449a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801449e:	3328      	adds	r3, #40	; 0x28
 80144a0:	2102      	movs	r1, #2
 80144a2:	4618      	mov	r0, r3
 80144a4:	f000 fb9c 	bl	8014be0 <RCCEx_PLL3_Config>
 80144a8:	4603      	mov	r3, r0
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d002      	beq.n	80144b4 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
      {
        status = HAL_ERROR;
 80144ae:	2301      	movs	r3, #1
 80144b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80144b4:	4b74      	ldr	r3, [pc, #464]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 80144b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80144b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80144bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80144c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80144c4:	4a70      	ldr	r2, [pc, #448]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 80144c6:	430b      	orrs	r3, r1
 80144c8:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80144ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80144ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80144d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80144d6:	f04f 0300 	mov.w	r3, #0
 80144da:	ea00 0402 	and.w	r4, r0, r2
 80144de:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80144e2:	400b      	ands	r3, r1
 80144e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80144e8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80144ec:	4323      	orrs	r3, r4
 80144ee:	d03e      	beq.n	801456e <HAL_RCCEx_PeriphCLKConfig+0xf56>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80144f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80144f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80144f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80144fc:	d022      	beq.n	8014544 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80144fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014502:	d81b      	bhi.n	801453c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8014504:	2b00      	cmp	r3, #0
 8014506:	d003      	beq.n	8014510 <HAL_RCCEx_PeriphCLKConfig+0xef8>
 8014508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801450c:	d00b      	beq.n	8014526 <HAL_RCCEx_PeriphCLKConfig+0xf0e>
 801450e:	e015      	b.n	801453c <HAL_RCCEx_PeriphCLKConfig+0xf24>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014514:	3308      	adds	r3, #8
 8014516:	2100      	movs	r1, #0
 8014518:	4618      	mov	r0, r3
 801451a:	f000 faaf 	bl	8014a7c <RCCEx_PLL2_Config>
 801451e:	4603      	mov	r3, r0
 8014520:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8014524:	e00f      	b.n	8014546 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801452a:	3328      	adds	r3, #40	; 0x28
 801452c:	2102      	movs	r1, #2
 801452e:	4618      	mov	r0, r3
 8014530:	f000 fb56 	bl	8014be0 <RCCEx_PLL3_Config>
 8014534:	4603      	mov	r3, r0
 8014536:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 801453a:	e004      	b.n	8014546 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801453c:	2301      	movs	r3, #1
 801453e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014542:	e000      	b.n	8014546 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8014544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014546:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801454a:	2b00      	cmp	r3, #0
 801454c:	d10b      	bne.n	8014566 <HAL_RCCEx_PeriphCLKConfig+0xf4e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801454e:	4b4e      	ldr	r3, [pc, #312]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 8014550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014552:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8014556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801455a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801455e:	4a4a      	ldr	r2, [pc, #296]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 8014560:	430b      	orrs	r3, r1
 8014562:	6593      	str	r3, [r2, #88]	; 0x58
 8014564:	e003      	b.n	801456e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014566:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801456a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801456e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014572:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014576:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801457a:	f04f 0300 	mov.w	r3, #0
 801457e:	ea00 0402 	and.w	r4, r0, r2
 8014582:	67bc      	str	r4, [r7, #120]	; 0x78
 8014584:	400b      	ands	r3, r1
 8014586:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014588:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 801458c:	4323      	orrs	r3, r4
 801458e:	d03b      	beq.n	8014608 <HAL_RCCEx_PeriphCLKConfig+0xff0>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8014590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014598:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801459c:	d01f      	beq.n	80145de <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 801459e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80145a2:	d818      	bhi.n	80145d6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80145a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80145a8:	d003      	beq.n	80145b2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80145aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80145ae:	d007      	beq.n	80145c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80145b0:	e011      	b.n	80145d6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80145b2:	4b35      	ldr	r3, [pc, #212]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 80145b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145b6:	4a34      	ldr	r2, [pc, #208]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 80145b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80145bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80145be:	e00f      	b.n	80145e0 <HAL_RCCEx_PeriphCLKConfig+0xfc8>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80145c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80145c4:	3328      	adds	r3, #40	; 0x28
 80145c6:	2101      	movs	r1, #1
 80145c8:	4618      	mov	r0, r3
 80145ca:	f000 fb09 	bl	8014be0 <RCCEx_PLL3_Config>
 80145ce:	4603      	mov	r3, r0
 80145d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80145d4:	e004      	b.n	80145e0 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80145d6:	2301      	movs	r3, #1
 80145d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80145dc:	e000      	b.n	80145e0 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
        break;
 80145de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80145e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d10b      	bne.n	8014600 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80145e8:	4b27      	ldr	r3, [pc, #156]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 80145ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145ec:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80145f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80145f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145f8:	4a23      	ldr	r2, [pc, #140]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 80145fa:	430b      	orrs	r3, r1
 80145fc:	6553      	str	r3, [r2, #84]	; 0x54
 80145fe:	e003      	b.n	8014608 <HAL_RCCEx_PeriphCLKConfig+0xff0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014600:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014604:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8014608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801460c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014610:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014614:	f04f 0300 	mov.w	r3, #0
 8014618:	ea00 0402 	and.w	r4, r0, r2
 801461c:	673c      	str	r4, [r7, #112]	; 0x70
 801461e:	400b      	ands	r3, r1
 8014620:	677b      	str	r3, [r7, #116]	; 0x74
 8014622:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8014626:	4323      	orrs	r3, r4
 8014628:	d034      	beq.n	8014694 <HAL_RCCEx_PeriphCLKConfig+0x107c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801462a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801462e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014630:	2b00      	cmp	r3, #0
 8014632:	d003      	beq.n	801463c <HAL_RCCEx_PeriphCLKConfig+0x1024>
 8014634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014638:	d007      	beq.n	801464a <HAL_RCCEx_PeriphCLKConfig+0x1032>
 801463a:	e011      	b.n	8014660 <HAL_RCCEx_PeriphCLKConfig+0x1048>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801463c:	4b12      	ldr	r3, [pc, #72]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 801463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014640:	4a11      	ldr	r2, [pc, #68]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 8014642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8014648:	e00e      	b.n	8014668 <HAL_RCCEx_PeriphCLKConfig+0x1050>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801464a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801464e:	3308      	adds	r3, #8
 8014650:	2102      	movs	r1, #2
 8014652:	4618      	mov	r0, r3
 8014654:	f000 fa12 	bl	8014a7c <RCCEx_PLL2_Config>
 8014658:	4603      	mov	r3, r0
 801465a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801465e:	e003      	b.n	8014668 <HAL_RCCEx_PeriphCLKConfig+0x1050>

      default:
        ret = HAL_ERROR;
 8014660:	2301      	movs	r3, #1
 8014662:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014668:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801466c:	2b00      	cmp	r3, #0
 801466e:	d10d      	bne.n	801468c <HAL_RCCEx_PeriphCLKConfig+0x1074>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8014670:	4b05      	ldr	r3, [pc, #20]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 8014672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014674:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801467c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801467e:	4a02      	ldr	r2, [pc, #8]	; (8014688 <HAL_RCCEx_PeriphCLKConfig+0x1070>)
 8014680:	430b      	orrs	r3, r1
 8014682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014684:	e006      	b.n	8014694 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8014686:	bf00      	nop
 8014688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801468c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014690:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8014694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014698:	e9d3 0100 	ldrd	r0, r1, [r3]
 801469c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80146a0:	f04f 0300 	mov.w	r3, #0
 80146a4:	ea00 0402 	and.w	r4, r0, r2
 80146a8:	66bc      	str	r4, [r7, #104]	; 0x68
 80146aa:	400b      	ands	r3, r1
 80146ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80146ae:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80146b2:	4323      	orrs	r3, r4
 80146b4:	d00c      	beq.n	80146d0 <HAL_RCCEx_PeriphCLKConfig+0x10b8>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80146b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80146ba:	3328      	adds	r3, #40	; 0x28
 80146bc:	2102      	movs	r1, #2
 80146be:	4618      	mov	r0, r3
 80146c0:	f000 fa8e 	bl	8014be0 <RCCEx_PLL3_Config>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d002      	beq.n	80146d0 <HAL_RCCEx_PeriphCLKConfig+0x10b8>
    {
      status = HAL_ERROR;
 80146ca:	2301      	movs	r3, #1
 80146cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80146d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80146d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80146d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80146dc:	f04f 0300 	mov.w	r3, #0
 80146e0:	ea00 0402 	and.w	r4, r0, r2
 80146e4:	663c      	str	r4, [r7, #96]	; 0x60
 80146e6:	400b      	ands	r3, r1
 80146e8:	667b      	str	r3, [r7, #100]	; 0x64
 80146ea:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80146ee:	4323      	orrs	r3, r4
 80146f0:	d03a      	beq.n	8014768 <HAL_RCCEx_PeriphCLKConfig+0x1150>
  {

    switch (PeriphClkInit->RngClockSelection)
 80146f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80146f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80146fe:	d018      	beq.n	8014732 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8014700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014704:	d811      	bhi.n	801472a <HAL_RCCEx_PeriphCLKConfig+0x1112>
 8014706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801470a:	d014      	beq.n	8014736 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801470c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014710:	d80b      	bhi.n	801472a <HAL_RCCEx_PeriphCLKConfig+0x1112>
 8014712:	2b00      	cmp	r3, #0
 8014714:	d011      	beq.n	801473a <HAL_RCCEx_PeriphCLKConfig+0x1122>
 8014716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801471a:	d106      	bne.n	801472a <HAL_RCCEx_PeriphCLKConfig+0x1112>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801471c:	4b0f      	ldr	r3, [pc, #60]	; (801475c <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 801471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014720:	4a0e      	ldr	r2, [pc, #56]	; (801475c <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8014722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8014728:	e008      	b.n	801473c <HAL_RCCEx_PeriphCLKConfig+0x1124>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801472a:	2301      	movs	r3, #1
 801472c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014730:	e004      	b.n	801473c <HAL_RCCEx_PeriphCLKConfig+0x1124>
        break;
 8014732:	bf00      	nop
 8014734:	e002      	b.n	801473c <HAL_RCCEx_PeriphCLKConfig+0x1124>
        break;
 8014736:	bf00      	nop
 8014738:	e000      	b.n	801473c <HAL_RCCEx_PeriphCLKConfig+0x1124>
        break;
 801473a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801473c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014740:	2b00      	cmp	r3, #0
 8014742:	d10d      	bne.n	8014760 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014744:	4b05      	ldr	r3, [pc, #20]	; (801475c <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8014746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014748:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801474c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014754:	4a01      	ldr	r2, [pc, #4]	; (801475c <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8014756:	430b      	orrs	r3, r1
 8014758:	6553      	str	r3, [r2, #84]	; 0x54
 801475a:	e005      	b.n	8014768 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 801475c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014760:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014764:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8014768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801476c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014770:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014774:	f04f 0300 	mov.w	r3, #0
 8014778:	ea00 0402 	and.w	r4, r0, r2
 801477c:	65bc      	str	r4, [r7, #88]	; 0x58
 801477e:	400b      	ands	r3, r1
 8014780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014782:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8014786:	4323      	orrs	r3, r4
 8014788:	d009      	beq.n	801479e <HAL_RCCEx_PeriphCLKConfig+0x1186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801478a:	4bbb      	ldr	r3, [pc, #748]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 801478c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801478e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014798:	4ab7      	ldr	r2, [pc, #732]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 801479a:	430b      	orrs	r3, r1
 801479c:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801479e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80147a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80147aa:	f04f 0300 	mov.w	r3, #0
 80147ae:	ea00 0402 	and.w	r4, r0, r2
 80147b2:	653c      	str	r4, [r7, #80]	; 0x50
 80147b4:	400b      	ands	r3, r1
 80147b6:	657b      	str	r3, [r7, #84]	; 0x54
 80147b8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80147bc:	4323      	orrs	r3, r4
 80147be:	d009      	beq.n	80147d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80147c0:	4bad      	ldr	r3, [pc, #692]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 80147c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147c4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80147c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147ce:	4aaa      	ldr	r2, [pc, #680]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 80147d0:	430b      	orrs	r3, r1
 80147d2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80147d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80147dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80147e0:	f04f 0300 	mov.w	r3, #0
 80147e4:	ea00 0402 	and.w	r4, r0, r2
 80147e8:	64bc      	str	r4, [r7, #72]	; 0x48
 80147ea:	400b      	ands	r3, r1
 80147ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80147ee:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80147f2:	4323      	orrs	r3, r4
 80147f4:	d009      	beq.n	801480a <HAL_RCCEx_PeriphCLKConfig+0x11f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80147f6:	4ba0      	ldr	r3, [pc, #640]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 80147f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80147fa:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80147fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014804:	4a9c      	ldr	r2, [pc, #624]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 8014806:	430b      	orrs	r3, r1
 8014808:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801480a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801480e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014816:	f04f 0300 	mov.w	r3, #0
 801481a:	ea00 0402 	and.w	r4, r0, r2
 801481e:	643c      	str	r4, [r7, #64]	; 0x40
 8014820:	400b      	ands	r3, r1
 8014822:	647b      	str	r3, [r7, #68]	; 0x44
 8014824:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8014828:	4323      	orrs	r3, r4
 801482a:	d00e      	beq.n	801484a <HAL_RCCEx_PeriphCLKConfig+0x1232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801482c:	4b92      	ldr	r3, [pc, #584]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 801482e:	691b      	ldr	r3, [r3, #16]
 8014830:	4a91      	ldr	r2, [pc, #580]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 8014832:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014836:	6113      	str	r3, [r2, #16]
 8014838:	4b8f      	ldr	r3, [pc, #572]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 801483a:	6919      	ldr	r1, [r3, #16]
 801483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014840:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014844:	4a8c      	ldr	r2, [pc, #560]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 8014846:	430b      	orrs	r3, r1
 8014848:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801484a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801484e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014852:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014856:	f04f 0300 	mov.w	r3, #0
 801485a:	ea00 0402 	and.w	r4, r0, r2
 801485e:	63bc      	str	r4, [r7, #56]	; 0x38
 8014860:	400b      	ands	r3, r1
 8014862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014864:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8014868:	4323      	orrs	r3, r4
 801486a:	d009      	beq.n	8014880 <HAL_RCCEx_PeriphCLKConfig+0x1268>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801486c:	4b82      	ldr	r3, [pc, #520]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 801486e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014870:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8014874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801487a:	4a7f      	ldr	r2, [pc, #508]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 801487c:	430b      	orrs	r3, r1
 801487e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8014880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014888:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801488c:	f04f 0300 	mov.w	r3, #0
 8014890:	ea00 0402 	and.w	r4, r0, r2
 8014894:	633c      	str	r4, [r7, #48]	; 0x30
 8014896:	400b      	ands	r3, r1
 8014898:	637b      	str	r3, [r7, #52]	; 0x34
 801489a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801489e:	4323      	orrs	r3, r4
 80148a0:	d00a      	beq.n	80148b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80148a2:	4b75      	ldr	r3, [pc, #468]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 80148a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80148a6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80148aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80148ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80148b2:	4a71      	ldr	r2, [pc, #452]	; (8014a78 <HAL_RCCEx_PeriphCLKConfig+0x1460>)
 80148b4:	430b      	orrs	r3, r1
 80148b6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80148b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80148bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80148c0:	f04f 0200 	mov.w	r2, #0
 80148c4:	f04f 0301 	mov.w	r3, #1
 80148c8:	ea00 0402 	and.w	r4, r0, r2
 80148cc:	62bc      	str	r4, [r7, #40]	; 0x28
 80148ce:	400b      	ands	r3, r1
 80148d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80148d2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80148d6:	4323      	orrs	r3, r4
 80148d8:	d011      	beq.n	80148fe <HAL_RCCEx_PeriphCLKConfig+0x12e6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80148da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80148de:	3308      	adds	r3, #8
 80148e0:	2100      	movs	r1, #0
 80148e2:	4618      	mov	r0, r3
 80148e4:	f000 f8ca 	bl	8014a7c <RCCEx_PLL2_Config>
 80148e8:	4603      	mov	r3, r0
 80148ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80148ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d003      	beq.n	80148fe <HAL_RCCEx_PeriphCLKConfig+0x12e6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80148f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80148fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80148fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014906:	f04f 0000 	mov.w	r0, #0
 801490a:	f04f 0102 	mov.w	r1, #2
 801490e:	ea02 0400 	and.w	r4, r2, r0
 8014912:	623c      	str	r4, [r7, #32]
 8014914:	400b      	ands	r3, r1
 8014916:	627b      	str	r3, [r7, #36]	; 0x24
 8014918:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801491c:	4323      	orrs	r3, r4
 801491e:	d011      	beq.n	8014944 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014924:	3308      	adds	r3, #8
 8014926:	2101      	movs	r1, #1
 8014928:	4618      	mov	r0, r3
 801492a:	f000 f8a7 	bl	8014a7c <RCCEx_PLL2_Config>
 801492e:	4603      	mov	r3, r0
 8014930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014934:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014938:	2b00      	cmp	r3, #0
 801493a:	d003      	beq.n	8014944 <HAL_RCCEx_PeriphCLKConfig+0x132c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801493c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014940:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8014944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494c:	f04f 0000 	mov.w	r0, #0
 8014950:	f04f 0104 	mov.w	r1, #4
 8014954:	ea02 0400 	and.w	r4, r2, r0
 8014958:	61bc      	str	r4, [r7, #24]
 801495a:	400b      	ands	r3, r1
 801495c:	61fb      	str	r3, [r7, #28]
 801495e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8014962:	4323      	orrs	r3, r4
 8014964:	d011      	beq.n	801498a <HAL_RCCEx_PeriphCLKConfig+0x1372>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801496a:	3308      	adds	r3, #8
 801496c:	2102      	movs	r1, #2
 801496e:	4618      	mov	r0, r3
 8014970:	f000 f884 	bl	8014a7c <RCCEx_PLL2_Config>
 8014974:	4603      	mov	r3, r0
 8014976:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 801497a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801497e:	2b00      	cmp	r3, #0
 8014980:	d003      	beq.n	801498a <HAL_RCCEx_PeriphCLKConfig+0x1372>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014982:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014986:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801498a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014992:	f04f 0000 	mov.w	r0, #0
 8014996:	f04f 0108 	mov.w	r1, #8
 801499a:	ea02 0400 	and.w	r4, r2, r0
 801499e:	613c      	str	r4, [r7, #16]
 80149a0:	400b      	ands	r3, r1
 80149a2:	617b      	str	r3, [r7, #20]
 80149a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80149a8:	4323      	orrs	r3, r4
 80149aa:	d011      	beq.n	80149d0 <HAL_RCCEx_PeriphCLKConfig+0x13b8>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80149ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80149b0:	3328      	adds	r3, #40	; 0x28
 80149b2:	2100      	movs	r1, #0
 80149b4:	4618      	mov	r0, r3
 80149b6:	f000 f913 	bl	8014be0 <RCCEx_PLL3_Config>
 80149ba:	4603      	mov	r3, r0
 80149bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80149c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d003      	beq.n	80149d0 <HAL_RCCEx_PeriphCLKConfig+0x13b8>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80149c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80149cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80149d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80149d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d8:	f04f 0000 	mov.w	r0, #0
 80149dc:	f04f 0110 	mov.w	r1, #16
 80149e0:	ea02 0400 	and.w	r4, r2, r0
 80149e4:	60bc      	str	r4, [r7, #8]
 80149e6:	400b      	ands	r3, r1
 80149e8:	60fb      	str	r3, [r7, #12]
 80149ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80149ee:	4323      	orrs	r3, r4
 80149f0:	d011      	beq.n	8014a16 <HAL_RCCEx_PeriphCLKConfig+0x13fe>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80149f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80149f6:	3328      	adds	r3, #40	; 0x28
 80149f8:	2101      	movs	r1, #1
 80149fa:	4618      	mov	r0, r3
 80149fc:	f000 f8f0 	bl	8014be0 <RCCEx_PLL3_Config>
 8014a00:	4603      	mov	r3, r0
 8014a02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014a06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d003      	beq.n	8014a16 <HAL_RCCEx_PeriphCLKConfig+0x13fe>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014a0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014a12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8014a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1e:	f04f 0000 	mov.w	r0, #0
 8014a22:	f04f 0120 	mov.w	r1, #32
 8014a26:	ea02 0400 	and.w	r4, r2, r0
 8014a2a:	603c      	str	r4, [r7, #0]
 8014a2c:	400b      	ands	r3, r1
 8014a2e:	607b      	str	r3, [r7, #4]
 8014a30:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014a34:	4323      	orrs	r3, r4
 8014a36:	d011      	beq.n	8014a5c <HAL_RCCEx_PeriphCLKConfig+0x1444>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014a3c:	3328      	adds	r3, #40	; 0x28
 8014a3e:	2102      	movs	r1, #2
 8014a40:	4618      	mov	r0, r3
 8014a42:	f000 f8cd 	bl	8014be0 <RCCEx_PLL3_Config>
 8014a46:	4603      	mov	r3, r0
 8014a48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014a4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d003      	beq.n	8014a5c <HAL_RCCEx_PeriphCLKConfig+0x1444>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014a54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014a58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8014a5c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d101      	bne.n	8014a68 <HAL_RCCEx_PeriphCLKConfig+0x1450>
  {
    return HAL_OK;
 8014a64:	2300      	movs	r3, #0
 8014a66:	e000      	b.n	8014a6a <HAL_RCCEx_PeriphCLKConfig+0x1452>
  }
  return HAL_ERROR;
 8014a68:	2301      	movs	r3, #1
}
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8014a70:	46bd      	mov	sp, r7
 8014a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014a76:	bf00      	nop
 8014a78:	58024400 	.word	0x58024400

08014a7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014a86:	2300      	movs	r3, #0
 8014a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014a8a:	4b53      	ldr	r3, [pc, #332]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a8e:	f003 0303 	and.w	r3, r3, #3
 8014a92:	2b03      	cmp	r3, #3
 8014a94:	d101      	bne.n	8014a9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8014a96:	2301      	movs	r3, #1
 8014a98:	e099      	b.n	8014bce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8014a9a:	4b4f      	ldr	r3, [pc, #316]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	4a4e      	ldr	r2, [pc, #312]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014aa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014aa6:	f7f8 f8e9 	bl	800cc7c <HAL_GetTick>
 8014aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014aac:	e008      	b.n	8014ac0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014aae:	f7f8 f8e5 	bl	800cc7c <HAL_GetTick>
 8014ab2:	4602      	mov	r2, r0
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	1ad3      	subs	r3, r2, r3
 8014ab8:	2b02      	cmp	r3, #2
 8014aba:	d901      	bls.n	8014ac0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014abc:	2303      	movs	r3, #3
 8014abe:	e086      	b.n	8014bce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014ac0:	4b45      	ldr	r3, [pc, #276]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d1f0      	bne.n	8014aae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014acc:	4b42      	ldr	r3, [pc, #264]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ad0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	031b      	lsls	r3, r3, #12
 8014ada:	493f      	ldr	r1, [pc, #252]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014adc:	4313      	orrs	r3, r2
 8014ade:	628b      	str	r3, [r1, #40]	; 0x28
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	685b      	ldr	r3, [r3, #4]
 8014ae4:	3b01      	subs	r3, #1
 8014ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	689b      	ldr	r3, [r3, #8]
 8014aee:	3b01      	subs	r3, #1
 8014af0:	025b      	lsls	r3, r3, #9
 8014af2:	b29b      	uxth	r3, r3
 8014af4:	431a      	orrs	r2, r3
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	68db      	ldr	r3, [r3, #12]
 8014afa:	3b01      	subs	r3, #1
 8014afc:	041b      	lsls	r3, r3, #16
 8014afe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014b02:	431a      	orrs	r2, r3
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	691b      	ldr	r3, [r3, #16]
 8014b08:	3b01      	subs	r3, #1
 8014b0a:	061b      	lsls	r3, r3, #24
 8014b0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014b10:	4931      	ldr	r1, [pc, #196]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b12:	4313      	orrs	r3, r2
 8014b14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014b16:	4b30      	ldr	r3, [pc, #192]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	695b      	ldr	r3, [r3, #20]
 8014b22:	492d      	ldr	r1, [pc, #180]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b24:	4313      	orrs	r3, r2
 8014b26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014b28:	4b2b      	ldr	r3, [pc, #172]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b2c:	f023 0220 	bic.w	r2, r3, #32
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	699b      	ldr	r3, [r3, #24]
 8014b34:	4928      	ldr	r1, [pc, #160]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b36:	4313      	orrs	r3, r2
 8014b38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8014b3a:	4b27      	ldr	r3, [pc, #156]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b3e:	4a26      	ldr	r2, [pc, #152]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b40:	f023 0310 	bic.w	r3, r3, #16
 8014b44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014b46:	4b24      	ldr	r3, [pc, #144]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014b4a:	4b24      	ldr	r3, [pc, #144]	; (8014bdc <RCCEx_PLL2_Config+0x160>)
 8014b4c:	4013      	ands	r3, r2
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	69d2      	ldr	r2, [r2, #28]
 8014b52:	00d2      	lsls	r2, r2, #3
 8014b54:	4920      	ldr	r1, [pc, #128]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b56:	4313      	orrs	r3, r2
 8014b58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8014b5a:	4b1f      	ldr	r3, [pc, #124]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b5e:	4a1e      	ldr	r2, [pc, #120]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b60:	f043 0310 	orr.w	r3, r3, #16
 8014b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d106      	bne.n	8014b7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8014b6c:	4b1a      	ldr	r3, [pc, #104]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b70:	4a19      	ldr	r2, [pc, #100]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014b78:	e00f      	b.n	8014b9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d106      	bne.n	8014b8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014b80:	4b15      	ldr	r3, [pc, #84]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b84:	4a14      	ldr	r2, [pc, #80]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014b8c:	e005      	b.n	8014b9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8014b8e:	4b12      	ldr	r3, [pc, #72]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b92:	4a11      	ldr	r2, [pc, #68]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8014b9a:	4b0f      	ldr	r3, [pc, #60]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	4a0e      	ldr	r2, [pc, #56]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014ba0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014ba6:	f7f8 f869 	bl	800cc7c <HAL_GetTick>
 8014baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014bac:	e008      	b.n	8014bc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014bae:	f7f8 f865 	bl	800cc7c <HAL_GetTick>
 8014bb2:	4602      	mov	r2, r0
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	1ad3      	subs	r3, r2, r3
 8014bb8:	2b02      	cmp	r3, #2
 8014bba:	d901      	bls.n	8014bc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014bbc:	2303      	movs	r3, #3
 8014bbe:	e006      	b.n	8014bce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014bc0:	4b05      	ldr	r3, [pc, #20]	; (8014bd8 <RCCEx_PLL2_Config+0x15c>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d0f0      	beq.n	8014bae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3710      	adds	r7, #16
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	58024400 	.word	0x58024400
 8014bdc:	ffff0007 	.word	0xffff0007

08014be0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b084      	sub	sp, #16
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014bea:	2300      	movs	r3, #0
 8014bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014bee:	4b53      	ldr	r3, [pc, #332]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bf2:	f003 0303 	and.w	r3, r3, #3
 8014bf6:	2b03      	cmp	r3, #3
 8014bf8:	d101      	bne.n	8014bfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	e099      	b.n	8014d32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014bfe:	4b4f      	ldr	r3, [pc, #316]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	4a4e      	ldr	r2, [pc, #312]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014c0a:	f7f8 f837 	bl	800cc7c <HAL_GetTick>
 8014c0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014c10:	e008      	b.n	8014c24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014c12:	f7f8 f833 	bl	800cc7c <HAL_GetTick>
 8014c16:	4602      	mov	r2, r0
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	1ad3      	subs	r3, r2, r3
 8014c1c:	2b02      	cmp	r3, #2
 8014c1e:	d901      	bls.n	8014c24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014c20:	2303      	movs	r3, #3
 8014c22:	e086      	b.n	8014d32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014c24:	4b45      	ldr	r3, [pc, #276]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d1f0      	bne.n	8014c12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014c30:	4b42      	ldr	r3, [pc, #264]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	051b      	lsls	r3, r3, #20
 8014c3e:	493f      	ldr	r1, [pc, #252]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014c40:	4313      	orrs	r3, r2
 8014c42:	628b      	str	r3, [r1, #40]	; 0x28
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	685b      	ldr	r3, [r3, #4]
 8014c48:	3b01      	subs	r3, #1
 8014c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	689b      	ldr	r3, [r3, #8]
 8014c52:	3b01      	subs	r3, #1
 8014c54:	025b      	lsls	r3, r3, #9
 8014c56:	b29b      	uxth	r3, r3
 8014c58:	431a      	orrs	r2, r3
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	68db      	ldr	r3, [r3, #12]
 8014c5e:	3b01      	subs	r3, #1
 8014c60:	041b      	lsls	r3, r3, #16
 8014c62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014c66:	431a      	orrs	r2, r3
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	691b      	ldr	r3, [r3, #16]
 8014c6c:	3b01      	subs	r3, #1
 8014c6e:	061b      	lsls	r3, r3, #24
 8014c70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014c74:	4931      	ldr	r1, [pc, #196]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014c76:	4313      	orrs	r3, r2
 8014c78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8014c7a:	4b30      	ldr	r3, [pc, #192]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	695b      	ldr	r3, [r3, #20]
 8014c86:	492d      	ldr	r1, [pc, #180]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014c88:	4313      	orrs	r3, r2
 8014c8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8014c8c:	4b2b      	ldr	r3, [pc, #172]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	699b      	ldr	r3, [r3, #24]
 8014c98:	4928      	ldr	r1, [pc, #160]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014c9a:	4313      	orrs	r3, r2
 8014c9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8014c9e:	4b27      	ldr	r3, [pc, #156]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ca2:	4a26      	ldr	r2, [pc, #152]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8014caa:	4b24      	ldr	r3, [pc, #144]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014cae:	4b24      	ldr	r3, [pc, #144]	; (8014d40 <RCCEx_PLL3_Config+0x160>)
 8014cb0:	4013      	ands	r3, r2
 8014cb2:	687a      	ldr	r2, [r7, #4]
 8014cb4:	69d2      	ldr	r2, [r2, #28]
 8014cb6:	00d2      	lsls	r2, r2, #3
 8014cb8:	4920      	ldr	r1, [pc, #128]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014cba:	4313      	orrs	r3, r2
 8014cbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8014cbe:	4b1f      	ldr	r3, [pc, #124]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cc2:	4a1e      	ldr	r2, [pc, #120]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d106      	bne.n	8014cde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014cd0:	4b1a      	ldr	r3, [pc, #104]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cd4:	4a19      	ldr	r2, [pc, #100]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014cd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8014cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014cdc:	e00f      	b.n	8014cfe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	2b01      	cmp	r3, #1
 8014ce2:	d106      	bne.n	8014cf2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014ce4:	4b15      	ldr	r3, [pc, #84]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ce8:	4a14      	ldr	r2, [pc, #80]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014cea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014cf0:	e005      	b.n	8014cfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014cf2:	4b12      	ldr	r3, [pc, #72]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cf6:	4a11      	ldr	r2, [pc, #68]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014cfe:	4b0f      	ldr	r3, [pc, #60]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	4a0e      	ldr	r2, [pc, #56]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014d0a:	f7f7 ffb7 	bl	800cc7c <HAL_GetTick>
 8014d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014d10:	e008      	b.n	8014d24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014d12:	f7f7 ffb3 	bl	800cc7c <HAL_GetTick>
 8014d16:	4602      	mov	r2, r0
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	1ad3      	subs	r3, r2, r3
 8014d1c:	2b02      	cmp	r3, #2
 8014d1e:	d901      	bls.n	8014d24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014d20:	2303      	movs	r3, #3
 8014d22:	e006      	b.n	8014d32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014d24:	4b05      	ldr	r3, [pc, #20]	; (8014d3c <RCCEx_PLL3_Config+0x15c>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d0f0      	beq.n	8014d12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3710      	adds	r7, #16
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	58024400 	.word	0x58024400
 8014d40:	ffff0007 	.word	0xffff0007

08014d44 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b082      	sub	sp, #8
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d101      	bne.n	8014d58 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8014d54:	2301      	movs	r3, #1
 8014d56:	e02b      	b.n	8014db0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d106      	bne.n	8014d72 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2200      	movs	r2, #0
 8014d68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f7f2 f967 	bl	8007040 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2202      	movs	r2, #2
 8014d76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681a      	ldr	r2, [r3, #0]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	3304      	adds	r3, #4
 8014d82:	4619      	mov	r1, r3
 8014d84:	4610      	mov	r0, r2
 8014d86:	f000 fb4f 	bl	8015428 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	6818      	ldr	r0, [r3, #0]
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	461a      	mov	r2, r3
 8014d94:	6839      	ldr	r1, [r7, #0]
 8014d96:	f000 fba3 	bl	80154e0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8014d9a:	4b07      	ldr	r3, [pc, #28]	; (8014db8 <HAL_SDRAM_Init+0x74>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	4a06      	ldr	r2, [pc, #24]	; (8014db8 <HAL_SDRAM_Init+0x74>)
 8014da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014da4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2201      	movs	r2, #1
 8014daa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8014dae:	2300      	movs	r3, #0
}
 8014db0:	4618      	mov	r0, r3
 8014db2:	3708      	adds	r7, #8
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}
 8014db8:	52004000 	.word	0x52004000

08014dbc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b086      	sub	sp, #24
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	60f8      	str	r0, [r7, #12]
 8014dc4:	60b9      	str	r1, [r7, #8]
 8014dc6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014dce:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8014dd0:	7dfb      	ldrb	r3, [r7, #23]
 8014dd2:	2b02      	cmp	r3, #2
 8014dd4:	d101      	bne.n	8014dda <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8014dd6:	2302      	movs	r3, #2
 8014dd8:	e021      	b.n	8014e1e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8014dda:	7dfb      	ldrb	r3, [r7, #23]
 8014ddc:	2b01      	cmp	r3, #1
 8014dde:	d002      	beq.n	8014de6 <HAL_SDRAM_SendCommand+0x2a>
 8014de0:	7dfb      	ldrb	r3, [r7, #23]
 8014de2:	2b05      	cmp	r3, #5
 8014de4:	d118      	bne.n	8014e18 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	2202      	movs	r2, #2
 8014dea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	68b9      	ldr	r1, [r7, #8]
 8014df6:	4618      	mov	r0, r3
 8014df8:	f000 fbdc 	bl	80155b4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	2b02      	cmp	r3, #2
 8014e02:	d104      	bne.n	8014e0e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	2205      	movs	r2, #5
 8014e08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8014e0c:	e006      	b.n	8014e1c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	2201      	movs	r2, #1
 8014e12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8014e16:	e001      	b.n	8014e1c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8014e18:	2301      	movs	r3, #1
 8014e1a:	e000      	b.n	8014e1e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8014e1c:	2300      	movs	r3, #0
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3718      	adds	r7, #24
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}

08014e26 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8014e26:	b580      	push	{r7, lr}
 8014e28:	b082      	sub	sp, #8
 8014e2a:	af00      	add	r7, sp, #0
 8014e2c:	6078      	str	r0, [r7, #4]
 8014e2e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014e36:	b2db      	uxtb	r3, r3
 8014e38:	2b02      	cmp	r3, #2
 8014e3a:	d101      	bne.n	8014e40 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8014e3c:	2302      	movs	r3, #2
 8014e3e:	e016      	b.n	8014e6e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014e46:	b2db      	uxtb	r3, r3
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d10f      	bne.n	8014e6c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2202      	movs	r2, #2
 8014e50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	6839      	ldr	r1, [r7, #0]
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f000 fbce 	bl	80155fc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	2201      	movs	r2, #1
 8014e64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	e000      	b.n	8014e6e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8014e6c:	2301      	movs	r3, #1
}
 8014e6e:	4618      	mov	r0, r3
 8014e70:	3708      	adds	r7, #8
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}

08014e76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014e76:	b580      	push	{r7, lr}
 8014e78:	b082      	sub	sp, #8
 8014e7a:	af00      	add	r7, sp, #0
 8014e7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d101      	bne.n	8014e88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014e84:	2301      	movs	r3, #1
 8014e86:	e049      	b.n	8014f1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e8e:	b2db      	uxtb	r3, r3
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d106      	bne.n	8014ea2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2200      	movs	r2, #0
 8014e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	f000 f841 	bl	8014f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2202      	movs	r2, #2
 8014ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	3304      	adds	r3, #4
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	4610      	mov	r0, r2
 8014eb6:	f000 f9ff 	bl	80152b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2201      	movs	r2, #1
 8014ebe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2201      	movs	r2, #1
 8014ece:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	2201      	movs	r2, #1
 8014ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2201      	movs	r2, #1
 8014ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	2201      	movs	r2, #1
 8014ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2201      	movs	r2, #1
 8014eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	2201      	movs	r2, #1
 8014ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2201      	movs	r2, #1
 8014efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2201      	movs	r2, #1
 8014f06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2201      	movs	r2, #1
 8014f0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2201      	movs	r2, #1
 8014f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014f1a:	2300      	movs	r3, #0
}
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	3708      	adds	r7, #8
 8014f20:	46bd      	mov	sp, r7
 8014f22:	bd80      	pop	{r7, pc}

08014f24 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8014f24:	b480      	push	{r7}
 8014f26:	b083      	sub	sp, #12
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8014f2c:	bf00      	nop
 8014f2e:	370c      	adds	r7, #12
 8014f30:	46bd      	mov	sp, r7
 8014f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f36:	4770      	bx	lr

08014f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014f38:	b480      	push	{r7}
 8014f3a:	b085      	sub	sp, #20
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014f46:	b2db      	uxtb	r3, r3
 8014f48:	2b01      	cmp	r3, #1
 8014f4a:	d001      	beq.n	8014f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	e054      	b.n	8014ffa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2202      	movs	r2, #2
 8014f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	68da      	ldr	r2, [r3, #12]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	f042 0201 	orr.w	r2, r2, #1
 8014f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	4a26      	ldr	r2, [pc, #152]	; (8015008 <HAL_TIM_Base_Start_IT+0xd0>)
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	d022      	beq.n	8014fb8 <HAL_TIM_Base_Start_IT+0x80>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014f7a:	d01d      	beq.n	8014fb8 <HAL_TIM_Base_Start_IT+0x80>
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	4a22      	ldr	r2, [pc, #136]	; (801500c <HAL_TIM_Base_Start_IT+0xd4>)
 8014f82:	4293      	cmp	r3, r2
 8014f84:	d018      	beq.n	8014fb8 <HAL_TIM_Base_Start_IT+0x80>
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	4a21      	ldr	r2, [pc, #132]	; (8015010 <HAL_TIM_Base_Start_IT+0xd8>)
 8014f8c:	4293      	cmp	r3, r2
 8014f8e:	d013      	beq.n	8014fb8 <HAL_TIM_Base_Start_IT+0x80>
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	4a1f      	ldr	r2, [pc, #124]	; (8015014 <HAL_TIM_Base_Start_IT+0xdc>)
 8014f96:	4293      	cmp	r3, r2
 8014f98:	d00e      	beq.n	8014fb8 <HAL_TIM_Base_Start_IT+0x80>
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	4a1e      	ldr	r2, [pc, #120]	; (8015018 <HAL_TIM_Base_Start_IT+0xe0>)
 8014fa0:	4293      	cmp	r3, r2
 8014fa2:	d009      	beq.n	8014fb8 <HAL_TIM_Base_Start_IT+0x80>
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	4a1c      	ldr	r2, [pc, #112]	; (801501c <HAL_TIM_Base_Start_IT+0xe4>)
 8014faa:	4293      	cmp	r3, r2
 8014fac:	d004      	beq.n	8014fb8 <HAL_TIM_Base_Start_IT+0x80>
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	4a1b      	ldr	r2, [pc, #108]	; (8015020 <HAL_TIM_Base_Start_IT+0xe8>)
 8014fb4:	4293      	cmp	r3, r2
 8014fb6:	d115      	bne.n	8014fe4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	689a      	ldr	r2, [r3, #8]
 8014fbe:	4b19      	ldr	r3, [pc, #100]	; (8015024 <HAL_TIM_Base_Start_IT+0xec>)
 8014fc0:	4013      	ands	r3, r2
 8014fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2b06      	cmp	r3, #6
 8014fc8:	d015      	beq.n	8014ff6 <HAL_TIM_Base_Start_IT+0xbe>
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014fd0:	d011      	beq.n	8014ff6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	681a      	ldr	r2, [r3, #0]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	f042 0201 	orr.w	r2, r2, #1
 8014fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014fe2:	e008      	b.n	8014ff6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	681a      	ldr	r2, [r3, #0]
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	f042 0201 	orr.w	r2, r2, #1
 8014ff2:	601a      	str	r2, [r3, #0]
 8014ff4:	e000      	b.n	8014ff8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014ff6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014ff8:	2300      	movs	r3, #0
}
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	3714      	adds	r7, #20
 8014ffe:	46bd      	mov	sp, r7
 8015000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015004:	4770      	bx	lr
 8015006:	bf00      	nop
 8015008:	40010000 	.word	0x40010000
 801500c:	40000400 	.word	0x40000400
 8015010:	40000800 	.word	0x40000800
 8015014:	40000c00 	.word	0x40000c00
 8015018:	40010400 	.word	0x40010400
 801501c:	40001800 	.word	0x40001800
 8015020:	40014000 	.word	0x40014000
 8015024:	00010007 	.word	0x00010007

08015028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b082      	sub	sp, #8
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	691b      	ldr	r3, [r3, #16]
 8015036:	f003 0302 	and.w	r3, r3, #2
 801503a:	2b02      	cmp	r3, #2
 801503c:	d122      	bne.n	8015084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	68db      	ldr	r3, [r3, #12]
 8015044:	f003 0302 	and.w	r3, r3, #2
 8015048:	2b02      	cmp	r3, #2
 801504a:	d11b      	bne.n	8015084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	f06f 0202 	mvn.w	r2, #2
 8015054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2201      	movs	r2, #1
 801505a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	699b      	ldr	r3, [r3, #24]
 8015062:	f003 0303 	and.w	r3, r3, #3
 8015066:	2b00      	cmp	r3, #0
 8015068:	d003      	beq.n	8015072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f000 f905 	bl	801527a <HAL_TIM_IC_CaptureCallback>
 8015070:	e005      	b.n	801507e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f000 f8f7 	bl	8015266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f000 f908 	bl	801528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2200      	movs	r2, #0
 8015082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	691b      	ldr	r3, [r3, #16]
 801508a:	f003 0304 	and.w	r3, r3, #4
 801508e:	2b04      	cmp	r3, #4
 8015090:	d122      	bne.n	80150d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	68db      	ldr	r3, [r3, #12]
 8015098:	f003 0304 	and.w	r3, r3, #4
 801509c:	2b04      	cmp	r3, #4
 801509e:	d11b      	bne.n	80150d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	f06f 0204 	mvn.w	r2, #4
 80150a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	2202      	movs	r2, #2
 80150ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	699b      	ldr	r3, [r3, #24]
 80150b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d003      	beq.n	80150c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80150be:	6878      	ldr	r0, [r7, #4]
 80150c0:	f000 f8db 	bl	801527a <HAL_TIM_IC_CaptureCallback>
 80150c4:	e005      	b.n	80150d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f000 f8cd 	bl	8015266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f000 f8de 	bl	801528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2200      	movs	r2, #0
 80150d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	691b      	ldr	r3, [r3, #16]
 80150de:	f003 0308 	and.w	r3, r3, #8
 80150e2:	2b08      	cmp	r3, #8
 80150e4:	d122      	bne.n	801512c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	68db      	ldr	r3, [r3, #12]
 80150ec:	f003 0308 	and.w	r3, r3, #8
 80150f0:	2b08      	cmp	r3, #8
 80150f2:	d11b      	bne.n	801512c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	f06f 0208 	mvn.w	r2, #8
 80150fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2204      	movs	r2, #4
 8015102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	69db      	ldr	r3, [r3, #28]
 801510a:	f003 0303 	and.w	r3, r3, #3
 801510e:	2b00      	cmp	r3, #0
 8015110:	d003      	beq.n	801511a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f000 f8b1 	bl	801527a <HAL_TIM_IC_CaptureCallback>
 8015118:	e005      	b.n	8015126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f000 f8a3 	bl	8015266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f000 f8b4 	bl	801528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	691b      	ldr	r3, [r3, #16]
 8015132:	f003 0310 	and.w	r3, r3, #16
 8015136:	2b10      	cmp	r3, #16
 8015138:	d122      	bne.n	8015180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	68db      	ldr	r3, [r3, #12]
 8015140:	f003 0310 	and.w	r3, r3, #16
 8015144:	2b10      	cmp	r3, #16
 8015146:	d11b      	bne.n	8015180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	f06f 0210 	mvn.w	r2, #16
 8015150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2208      	movs	r2, #8
 8015156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	69db      	ldr	r3, [r3, #28]
 801515e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015162:	2b00      	cmp	r3, #0
 8015164:	d003      	beq.n	801516e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f000 f887 	bl	801527a <HAL_TIM_IC_CaptureCallback>
 801516c:	e005      	b.n	801517a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f000 f879 	bl	8015266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f000 f88a 	bl	801528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	2200      	movs	r2, #0
 801517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	691b      	ldr	r3, [r3, #16]
 8015186:	f003 0301 	and.w	r3, r3, #1
 801518a:	2b01      	cmp	r3, #1
 801518c:	d10e      	bne.n	80151ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	68db      	ldr	r3, [r3, #12]
 8015194:	f003 0301 	and.w	r3, r3, #1
 8015198:	2b01      	cmp	r3, #1
 801519a:	d107      	bne.n	80151ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	f06f 0201 	mvn.w	r2, #1
 80151a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80151a6:	6878      	ldr	r0, [r7, #4]
 80151a8:	f7f1 fb66 	bl	8006878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	691b      	ldr	r3, [r3, #16]
 80151b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151b6:	2b80      	cmp	r3, #128	; 0x80
 80151b8:	d10e      	bne.n	80151d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	68db      	ldr	r3, [r3, #12]
 80151c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151c4:	2b80      	cmp	r3, #128	; 0x80
 80151c6:	d107      	bne.n	80151d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80151d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f000 f914 	bl	8015400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	691b      	ldr	r3, [r3, #16]
 80151de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80151e6:	d10e      	bne.n	8015206 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	68db      	ldr	r3, [r3, #12]
 80151ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151f2:	2b80      	cmp	r3, #128	; 0x80
 80151f4:	d107      	bne.n	8015206 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80151fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f000 f907 	bl	8015414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	691b      	ldr	r3, [r3, #16]
 801520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015210:	2b40      	cmp	r3, #64	; 0x40
 8015212:	d10e      	bne.n	8015232 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	68db      	ldr	r3, [r3, #12]
 801521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801521e:	2b40      	cmp	r3, #64	; 0x40
 8015220:	d107      	bne.n	8015232 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801522a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f000 f838 	bl	80152a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	691b      	ldr	r3, [r3, #16]
 8015238:	f003 0320 	and.w	r3, r3, #32
 801523c:	2b20      	cmp	r3, #32
 801523e:	d10e      	bne.n	801525e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	68db      	ldr	r3, [r3, #12]
 8015246:	f003 0320 	and.w	r3, r3, #32
 801524a:	2b20      	cmp	r3, #32
 801524c:	d107      	bne.n	801525e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	f06f 0220 	mvn.w	r2, #32
 8015256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f000 f8c7 	bl	80153ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801525e:	bf00      	nop
 8015260:	3708      	adds	r7, #8
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}

08015266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015266:	b480      	push	{r7}
 8015268:	b083      	sub	sp, #12
 801526a:	af00      	add	r7, sp, #0
 801526c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801526e:	bf00      	nop
 8015270:	370c      	adds	r7, #12
 8015272:	46bd      	mov	sp, r7
 8015274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015278:	4770      	bx	lr

0801527a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801527a:	b480      	push	{r7}
 801527c:	b083      	sub	sp, #12
 801527e:	af00      	add	r7, sp, #0
 8015280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015282:	bf00      	nop
 8015284:	370c      	adds	r7, #12
 8015286:	46bd      	mov	sp, r7
 8015288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528c:	4770      	bx	lr

0801528e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801528e:	b480      	push	{r7}
 8015290:	b083      	sub	sp, #12
 8015292:	af00      	add	r7, sp, #0
 8015294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015296:	bf00      	nop
 8015298:	370c      	adds	r7, #12
 801529a:	46bd      	mov	sp, r7
 801529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a0:	4770      	bx	lr

080152a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80152a2:	b480      	push	{r7}
 80152a4:	b083      	sub	sp, #12
 80152a6:	af00      	add	r7, sp, #0
 80152a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80152aa:	bf00      	nop
 80152ac:	370c      	adds	r7, #12
 80152ae:	46bd      	mov	sp, r7
 80152b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b4:	4770      	bx	lr
	...

080152b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80152b8:	b480      	push	{r7}
 80152ba:	b085      	sub	sp, #20
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
 80152c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	4a40      	ldr	r2, [pc, #256]	; (80153cc <TIM_Base_SetConfig+0x114>)
 80152cc:	4293      	cmp	r3, r2
 80152ce:	d013      	beq.n	80152f8 <TIM_Base_SetConfig+0x40>
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152d6:	d00f      	beq.n	80152f8 <TIM_Base_SetConfig+0x40>
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	4a3d      	ldr	r2, [pc, #244]	; (80153d0 <TIM_Base_SetConfig+0x118>)
 80152dc:	4293      	cmp	r3, r2
 80152de:	d00b      	beq.n	80152f8 <TIM_Base_SetConfig+0x40>
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	4a3c      	ldr	r2, [pc, #240]	; (80153d4 <TIM_Base_SetConfig+0x11c>)
 80152e4:	4293      	cmp	r3, r2
 80152e6:	d007      	beq.n	80152f8 <TIM_Base_SetConfig+0x40>
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	4a3b      	ldr	r2, [pc, #236]	; (80153d8 <TIM_Base_SetConfig+0x120>)
 80152ec:	4293      	cmp	r3, r2
 80152ee:	d003      	beq.n	80152f8 <TIM_Base_SetConfig+0x40>
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	4a3a      	ldr	r2, [pc, #232]	; (80153dc <TIM_Base_SetConfig+0x124>)
 80152f4:	4293      	cmp	r3, r2
 80152f6:	d108      	bne.n	801530a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80152fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	685b      	ldr	r3, [r3, #4]
 8015304:	68fa      	ldr	r2, [r7, #12]
 8015306:	4313      	orrs	r3, r2
 8015308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	4a2f      	ldr	r2, [pc, #188]	; (80153cc <TIM_Base_SetConfig+0x114>)
 801530e:	4293      	cmp	r3, r2
 8015310:	d01f      	beq.n	8015352 <TIM_Base_SetConfig+0x9a>
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015318:	d01b      	beq.n	8015352 <TIM_Base_SetConfig+0x9a>
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	4a2c      	ldr	r2, [pc, #176]	; (80153d0 <TIM_Base_SetConfig+0x118>)
 801531e:	4293      	cmp	r3, r2
 8015320:	d017      	beq.n	8015352 <TIM_Base_SetConfig+0x9a>
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	4a2b      	ldr	r2, [pc, #172]	; (80153d4 <TIM_Base_SetConfig+0x11c>)
 8015326:	4293      	cmp	r3, r2
 8015328:	d013      	beq.n	8015352 <TIM_Base_SetConfig+0x9a>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	4a2a      	ldr	r2, [pc, #168]	; (80153d8 <TIM_Base_SetConfig+0x120>)
 801532e:	4293      	cmp	r3, r2
 8015330:	d00f      	beq.n	8015352 <TIM_Base_SetConfig+0x9a>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	4a29      	ldr	r2, [pc, #164]	; (80153dc <TIM_Base_SetConfig+0x124>)
 8015336:	4293      	cmp	r3, r2
 8015338:	d00b      	beq.n	8015352 <TIM_Base_SetConfig+0x9a>
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	4a28      	ldr	r2, [pc, #160]	; (80153e0 <TIM_Base_SetConfig+0x128>)
 801533e:	4293      	cmp	r3, r2
 8015340:	d007      	beq.n	8015352 <TIM_Base_SetConfig+0x9a>
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	4a27      	ldr	r2, [pc, #156]	; (80153e4 <TIM_Base_SetConfig+0x12c>)
 8015346:	4293      	cmp	r3, r2
 8015348:	d003      	beq.n	8015352 <TIM_Base_SetConfig+0x9a>
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	4a26      	ldr	r2, [pc, #152]	; (80153e8 <TIM_Base_SetConfig+0x130>)
 801534e:	4293      	cmp	r3, r2
 8015350:	d108      	bne.n	8015364 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	68db      	ldr	r3, [r3, #12]
 801535e:	68fa      	ldr	r2, [r7, #12]
 8015360:	4313      	orrs	r3, r2
 8015362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	695b      	ldr	r3, [r3, #20]
 801536e:	4313      	orrs	r3, r2
 8015370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	68fa      	ldr	r2, [r7, #12]
 8015376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	689a      	ldr	r2, [r3, #8]
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	4a10      	ldr	r2, [pc, #64]	; (80153cc <TIM_Base_SetConfig+0x114>)
 801538c:	4293      	cmp	r3, r2
 801538e:	d00f      	beq.n	80153b0 <TIM_Base_SetConfig+0xf8>
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	4a12      	ldr	r2, [pc, #72]	; (80153dc <TIM_Base_SetConfig+0x124>)
 8015394:	4293      	cmp	r3, r2
 8015396:	d00b      	beq.n	80153b0 <TIM_Base_SetConfig+0xf8>
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	4a11      	ldr	r2, [pc, #68]	; (80153e0 <TIM_Base_SetConfig+0x128>)
 801539c:	4293      	cmp	r3, r2
 801539e:	d007      	beq.n	80153b0 <TIM_Base_SetConfig+0xf8>
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	4a10      	ldr	r2, [pc, #64]	; (80153e4 <TIM_Base_SetConfig+0x12c>)
 80153a4:	4293      	cmp	r3, r2
 80153a6:	d003      	beq.n	80153b0 <TIM_Base_SetConfig+0xf8>
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	4a0f      	ldr	r2, [pc, #60]	; (80153e8 <TIM_Base_SetConfig+0x130>)
 80153ac:	4293      	cmp	r3, r2
 80153ae:	d103      	bne.n	80153b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	691a      	ldr	r2, [r3, #16]
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2201      	movs	r2, #1
 80153bc:	615a      	str	r2, [r3, #20]
}
 80153be:	bf00      	nop
 80153c0:	3714      	adds	r7, #20
 80153c2:	46bd      	mov	sp, r7
 80153c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c8:	4770      	bx	lr
 80153ca:	bf00      	nop
 80153cc:	40010000 	.word	0x40010000
 80153d0:	40000400 	.word	0x40000400
 80153d4:	40000800 	.word	0x40000800
 80153d8:	40000c00 	.word	0x40000c00
 80153dc:	40010400 	.word	0x40010400
 80153e0:	40014000 	.word	0x40014000
 80153e4:	40014400 	.word	0x40014400
 80153e8:	40014800 	.word	0x40014800

080153ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80153ec:	b480      	push	{r7}
 80153ee:	b083      	sub	sp, #12
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80153f4:	bf00      	nop
 80153f6:	370c      	adds	r7, #12
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr

08015400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015400:	b480      	push	{r7}
 8015402:	b083      	sub	sp, #12
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015408:	bf00      	nop
 801540a:	370c      	adds	r7, #12
 801540c:	46bd      	mov	sp, r7
 801540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015412:	4770      	bx	lr

08015414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015414:	b480      	push	{r7}
 8015416:	b083      	sub	sp, #12
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801541c:	bf00      	nop
 801541e:	370c      	adds	r7, #12
 8015420:	46bd      	mov	sp, r7
 8015422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015426:	4770      	bx	lr

08015428 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8015428:	b480      	push	{r7}
 801542a:	b083      	sub	sp, #12
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8015432:	683b      	ldr	r3, [r7, #0]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d121      	bne.n	801547e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681a      	ldr	r2, [r3, #0]
 801543e:	4b27      	ldr	r3, [pc, #156]	; (80154dc <FMC_SDRAM_Init+0xb4>)
 8015440:	4013      	ands	r3, r2
 8015442:	683a      	ldr	r2, [r7, #0]
 8015444:	6851      	ldr	r1, [r2, #4]
 8015446:	683a      	ldr	r2, [r7, #0]
 8015448:	6892      	ldr	r2, [r2, #8]
 801544a:	4311      	orrs	r1, r2
 801544c:	683a      	ldr	r2, [r7, #0]
 801544e:	68d2      	ldr	r2, [r2, #12]
 8015450:	4311      	orrs	r1, r2
 8015452:	683a      	ldr	r2, [r7, #0]
 8015454:	6912      	ldr	r2, [r2, #16]
 8015456:	4311      	orrs	r1, r2
 8015458:	683a      	ldr	r2, [r7, #0]
 801545a:	6952      	ldr	r2, [r2, #20]
 801545c:	4311      	orrs	r1, r2
 801545e:	683a      	ldr	r2, [r7, #0]
 8015460:	6992      	ldr	r2, [r2, #24]
 8015462:	4311      	orrs	r1, r2
 8015464:	683a      	ldr	r2, [r7, #0]
 8015466:	69d2      	ldr	r2, [r2, #28]
 8015468:	4311      	orrs	r1, r2
 801546a:	683a      	ldr	r2, [r7, #0]
 801546c:	6a12      	ldr	r2, [r2, #32]
 801546e:	4311      	orrs	r1, r2
 8015470:	683a      	ldr	r2, [r7, #0]
 8015472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015474:	430a      	orrs	r2, r1
 8015476:	431a      	orrs	r2, r3
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	601a      	str	r2, [r3, #0]
 801547c:	e026      	b.n	80154cc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	69d9      	ldr	r1, [r3, #28]
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	6a1b      	ldr	r3, [r3, #32]
 801548e:	4319      	orrs	r1, r3
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015494:	430b      	orrs	r3, r1
 8015496:	431a      	orrs	r2, r3
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	685a      	ldr	r2, [r3, #4]
 80154a0:	4b0e      	ldr	r3, [pc, #56]	; (80154dc <FMC_SDRAM_Init+0xb4>)
 80154a2:	4013      	ands	r3, r2
 80154a4:	683a      	ldr	r2, [r7, #0]
 80154a6:	6851      	ldr	r1, [r2, #4]
 80154a8:	683a      	ldr	r2, [r7, #0]
 80154aa:	6892      	ldr	r2, [r2, #8]
 80154ac:	4311      	orrs	r1, r2
 80154ae:	683a      	ldr	r2, [r7, #0]
 80154b0:	68d2      	ldr	r2, [r2, #12]
 80154b2:	4311      	orrs	r1, r2
 80154b4:	683a      	ldr	r2, [r7, #0]
 80154b6:	6912      	ldr	r2, [r2, #16]
 80154b8:	4311      	orrs	r1, r2
 80154ba:	683a      	ldr	r2, [r7, #0]
 80154bc:	6952      	ldr	r2, [r2, #20]
 80154be:	4311      	orrs	r1, r2
 80154c0:	683a      	ldr	r2, [r7, #0]
 80154c2:	6992      	ldr	r2, [r2, #24]
 80154c4:	430a      	orrs	r2, r1
 80154c6:	431a      	orrs	r2, r3
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80154cc:	2300      	movs	r3, #0
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	370c      	adds	r7, #12
 80154d2:	46bd      	mov	sp, r7
 80154d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d8:	4770      	bx	lr
 80154da:	bf00      	nop
 80154dc:	ffff8000 	.word	0xffff8000

080154e0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80154e0:	b480      	push	{r7}
 80154e2:	b085      	sub	sp, #20
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	60f8      	str	r0, [r7, #12]
 80154e8:	60b9      	str	r1, [r7, #8]
 80154ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d128      	bne.n	8015544 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	689b      	ldr	r3, [r3, #8]
 80154f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	1e59      	subs	r1, r3, #1
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	685b      	ldr	r3, [r3, #4]
 8015504:	3b01      	subs	r3, #1
 8015506:	011b      	lsls	r3, r3, #4
 8015508:	4319      	orrs	r1, r3
 801550a:	68bb      	ldr	r3, [r7, #8]
 801550c:	689b      	ldr	r3, [r3, #8]
 801550e:	3b01      	subs	r3, #1
 8015510:	021b      	lsls	r3, r3, #8
 8015512:	4319      	orrs	r1, r3
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	68db      	ldr	r3, [r3, #12]
 8015518:	3b01      	subs	r3, #1
 801551a:	031b      	lsls	r3, r3, #12
 801551c:	4319      	orrs	r1, r3
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	691b      	ldr	r3, [r3, #16]
 8015522:	3b01      	subs	r3, #1
 8015524:	041b      	lsls	r3, r3, #16
 8015526:	4319      	orrs	r1, r3
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	695b      	ldr	r3, [r3, #20]
 801552c:	3b01      	subs	r3, #1
 801552e:	051b      	lsls	r3, r3, #20
 8015530:	4319      	orrs	r1, r3
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	699b      	ldr	r3, [r3, #24]
 8015536:	3b01      	subs	r3, #1
 8015538:	061b      	lsls	r3, r3, #24
 801553a:	430b      	orrs	r3, r1
 801553c:	431a      	orrs	r2, r3
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	609a      	str	r2, [r3, #8]
 8015542:	e02d      	b.n	80155a0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	689a      	ldr	r2, [r3, #8]
 8015548:	4b19      	ldr	r3, [pc, #100]	; (80155b0 <FMC_SDRAM_Timing_Init+0xd0>)
 801554a:	4013      	ands	r3, r2
 801554c:	68ba      	ldr	r2, [r7, #8]
 801554e:	68d2      	ldr	r2, [r2, #12]
 8015550:	3a01      	subs	r2, #1
 8015552:	0311      	lsls	r1, r2, #12
 8015554:	68ba      	ldr	r2, [r7, #8]
 8015556:	6952      	ldr	r2, [r2, #20]
 8015558:	3a01      	subs	r2, #1
 801555a:	0512      	lsls	r2, r2, #20
 801555c:	430a      	orrs	r2, r1
 801555e:	431a      	orrs	r2, r3
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801556c:	68bb      	ldr	r3, [r7, #8]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	1e59      	subs	r1, r3, #1
 8015572:	68bb      	ldr	r3, [r7, #8]
 8015574:	685b      	ldr	r3, [r3, #4]
 8015576:	3b01      	subs	r3, #1
 8015578:	011b      	lsls	r3, r3, #4
 801557a:	4319      	orrs	r1, r3
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	689b      	ldr	r3, [r3, #8]
 8015580:	3b01      	subs	r3, #1
 8015582:	021b      	lsls	r3, r3, #8
 8015584:	4319      	orrs	r1, r3
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	691b      	ldr	r3, [r3, #16]
 801558a:	3b01      	subs	r3, #1
 801558c:	041b      	lsls	r3, r3, #16
 801558e:	4319      	orrs	r1, r3
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	699b      	ldr	r3, [r3, #24]
 8015594:	3b01      	subs	r3, #1
 8015596:	061b      	lsls	r3, r3, #24
 8015598:	430b      	orrs	r3, r1
 801559a:	431a      	orrs	r2, r3
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80155a0:	2300      	movs	r3, #0
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3714      	adds	r7, #20
 80155a6:	46bd      	mov	sp, r7
 80155a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop
 80155b0:	ff0f0fff 	.word	0xff0f0fff

080155b4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80155b4:	b480      	push	{r7}
 80155b6:	b085      	sub	sp, #20
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	60b9      	str	r1, [r7, #8]
 80155be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	691a      	ldr	r2, [r3, #16]
 80155c4:	4b0c      	ldr	r3, [pc, #48]	; (80155f8 <FMC_SDRAM_SendCommand+0x44>)
 80155c6:	4013      	ands	r3, r2
 80155c8:	68ba      	ldr	r2, [r7, #8]
 80155ca:	6811      	ldr	r1, [r2, #0]
 80155cc:	68ba      	ldr	r2, [r7, #8]
 80155ce:	6852      	ldr	r2, [r2, #4]
 80155d0:	4311      	orrs	r1, r2
 80155d2:	68ba      	ldr	r2, [r7, #8]
 80155d4:	6892      	ldr	r2, [r2, #8]
 80155d6:	3a01      	subs	r2, #1
 80155d8:	0152      	lsls	r2, r2, #5
 80155da:	4311      	orrs	r1, r2
 80155dc:	68ba      	ldr	r2, [r7, #8]
 80155de:	68d2      	ldr	r2, [r2, #12]
 80155e0:	0252      	lsls	r2, r2, #9
 80155e2:	430a      	orrs	r2, r1
 80155e4:	431a      	orrs	r2, r3
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80155ea:	2300      	movs	r3, #0
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3714      	adds	r7, #20
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr
 80155f8:	ffc00000 	.word	0xffc00000

080155fc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80155fc:	b480      	push	{r7}
 80155fe:	b083      	sub	sp, #12
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	695a      	ldr	r2, [r3, #20]
 801560a:	4b07      	ldr	r3, [pc, #28]	; (8015628 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 801560c:	4013      	ands	r3, r2
 801560e:	683a      	ldr	r2, [r7, #0]
 8015610:	0052      	lsls	r2, r2, #1
 8015612:	431a      	orrs	r2, r3
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8015618:	2300      	movs	r3, #0
}
 801561a:	4618      	mov	r0, r3
 801561c:	370c      	adds	r7, #12
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr
 8015626:	bf00      	nop
 8015628:	ffffc001 	.word	0xffffc001

0801562c <__NVIC_SetPriority>:
{
 801562c:	b480      	push	{r7}
 801562e:	b083      	sub	sp, #12
 8015630:	af00      	add	r7, sp, #0
 8015632:	4603      	mov	r3, r0
 8015634:	6039      	str	r1, [r7, #0]
 8015636:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801563c:	2b00      	cmp	r3, #0
 801563e:	db0a      	blt.n	8015656 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	b2da      	uxtb	r2, r3
 8015644:	490c      	ldr	r1, [pc, #48]	; (8015678 <__NVIC_SetPriority+0x4c>)
 8015646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801564a:	0112      	lsls	r2, r2, #4
 801564c:	b2d2      	uxtb	r2, r2
 801564e:	440b      	add	r3, r1
 8015650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015654:	e00a      	b.n	801566c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	b2da      	uxtb	r2, r3
 801565a:	4908      	ldr	r1, [pc, #32]	; (801567c <__NVIC_SetPriority+0x50>)
 801565c:	88fb      	ldrh	r3, [r7, #6]
 801565e:	f003 030f 	and.w	r3, r3, #15
 8015662:	3b04      	subs	r3, #4
 8015664:	0112      	lsls	r2, r2, #4
 8015666:	b2d2      	uxtb	r2, r2
 8015668:	440b      	add	r3, r1
 801566a:	761a      	strb	r2, [r3, #24]
}
 801566c:	bf00      	nop
 801566e:	370c      	adds	r7, #12
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr
 8015678:	e000e100 	.word	0xe000e100
 801567c:	e000ed00 	.word	0xe000ed00

08015680 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015680:	b580      	push	{r7, lr}
 8015682:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015684:	4b05      	ldr	r3, [pc, #20]	; (801569c <SysTick_Handler+0x1c>)
 8015686:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015688:	f003 f8d4 	bl	8018834 <xTaskGetSchedulerState>
 801568c:	4603      	mov	r3, r0
 801568e:	2b01      	cmp	r3, #1
 8015690:	d001      	beq.n	8015696 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015692:	f001 f8f9 	bl	8016888 <xPortSysTickHandler>
  }
}
 8015696:	bf00      	nop
 8015698:	bd80      	pop	{r7, pc}
 801569a:	bf00      	nop
 801569c:	e000e010 	.word	0xe000e010

080156a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80156a0:	b580      	push	{r7, lr}
 80156a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80156a4:	2100      	movs	r1, #0
 80156a6:	f06f 0004 	mvn.w	r0, #4
 80156aa:	f7ff ffbf 	bl	801562c <__NVIC_SetPriority>
#endif
}
 80156ae:	bf00      	nop
 80156b0:	bd80      	pop	{r7, pc}
	...

080156b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80156b4:	b480      	push	{r7}
 80156b6:	b083      	sub	sp, #12
 80156b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156ba:	f3ef 8305 	mrs	r3, IPSR
 80156be:	603b      	str	r3, [r7, #0]
  return(result);
 80156c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d003      	beq.n	80156ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80156c6:	f06f 0305 	mvn.w	r3, #5
 80156ca:	607b      	str	r3, [r7, #4]
 80156cc:	e00c      	b.n	80156e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80156ce:	4b0a      	ldr	r3, [pc, #40]	; (80156f8 <osKernelInitialize+0x44>)
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d105      	bne.n	80156e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80156d6:	4b08      	ldr	r3, [pc, #32]	; (80156f8 <osKernelInitialize+0x44>)
 80156d8:	2201      	movs	r2, #1
 80156da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80156dc:	2300      	movs	r3, #0
 80156de:	607b      	str	r3, [r7, #4]
 80156e0:	e002      	b.n	80156e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80156e2:	f04f 33ff 	mov.w	r3, #4294967295
 80156e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80156e8:	687b      	ldr	r3, [r7, #4]
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	370c      	adds	r7, #12
 80156ee:	46bd      	mov	sp, r7
 80156f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f4:	4770      	bx	lr
 80156f6:	bf00      	nop
 80156f8:	2400b904 	.word	0x2400b904

080156fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015702:	f3ef 8305 	mrs	r3, IPSR
 8015706:	603b      	str	r3, [r7, #0]
  return(result);
 8015708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801570a:	2b00      	cmp	r3, #0
 801570c:	d003      	beq.n	8015716 <osKernelStart+0x1a>
    stat = osErrorISR;
 801570e:	f06f 0305 	mvn.w	r3, #5
 8015712:	607b      	str	r3, [r7, #4]
 8015714:	e010      	b.n	8015738 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015716:	4b0b      	ldr	r3, [pc, #44]	; (8015744 <osKernelStart+0x48>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	2b01      	cmp	r3, #1
 801571c:	d109      	bne.n	8015732 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801571e:	f7ff ffbf 	bl	80156a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015722:	4b08      	ldr	r3, [pc, #32]	; (8015744 <osKernelStart+0x48>)
 8015724:	2202      	movs	r2, #2
 8015726:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015728:	f002 fbda 	bl	8017ee0 <vTaskStartScheduler>
      stat = osOK;
 801572c:	2300      	movs	r3, #0
 801572e:	607b      	str	r3, [r7, #4]
 8015730:	e002      	b.n	8015738 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015732:	f04f 33ff 	mov.w	r3, #4294967295
 8015736:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015738:	687b      	ldr	r3, [r7, #4]
}
 801573a:	4618      	mov	r0, r3
 801573c:	3708      	adds	r7, #8
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}
 8015742:	bf00      	nop
 8015744:	2400b904 	.word	0x2400b904

08015748 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015748:	b580      	push	{r7, lr}
 801574a:	b08e      	sub	sp, #56	; 0x38
 801574c:	af04      	add	r7, sp, #16
 801574e:	60f8      	str	r0, [r7, #12]
 8015750:	60b9      	str	r1, [r7, #8]
 8015752:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015754:	2300      	movs	r3, #0
 8015756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015758:	f3ef 8305 	mrs	r3, IPSR
 801575c:	617b      	str	r3, [r7, #20]
  return(result);
 801575e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015760:	2b00      	cmp	r3, #0
 8015762:	d17e      	bne.n	8015862 <osThreadNew+0x11a>
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d07b      	beq.n	8015862 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801576a:	2380      	movs	r3, #128	; 0x80
 801576c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801576e:	2318      	movs	r3, #24
 8015770:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015772:	2300      	movs	r3, #0
 8015774:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015776:	f04f 33ff 	mov.w	r3, #4294967295
 801577a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d045      	beq.n	801580e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d002      	beq.n	8015790 <osThreadNew+0x48>
        name = attr->name;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	699b      	ldr	r3, [r3, #24]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d002      	beq.n	801579e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	699b      	ldr	r3, [r3, #24]
 801579c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801579e:	69fb      	ldr	r3, [r7, #28]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d008      	beq.n	80157b6 <osThreadNew+0x6e>
 80157a4:	69fb      	ldr	r3, [r7, #28]
 80157a6:	2b38      	cmp	r3, #56	; 0x38
 80157a8:	d805      	bhi.n	80157b6 <osThreadNew+0x6e>
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	f003 0301 	and.w	r3, r3, #1
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d001      	beq.n	80157ba <osThreadNew+0x72>
        return (NULL);
 80157b6:	2300      	movs	r3, #0
 80157b8:	e054      	b.n	8015864 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	695b      	ldr	r3, [r3, #20]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d003      	beq.n	80157ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	695b      	ldr	r3, [r3, #20]
 80157c6:	089b      	lsrs	r3, r3, #2
 80157c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	689b      	ldr	r3, [r3, #8]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d00e      	beq.n	80157f0 <osThreadNew+0xa8>
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	68db      	ldr	r3, [r3, #12]
 80157d6:	2b5f      	cmp	r3, #95	; 0x5f
 80157d8:	d90a      	bls.n	80157f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d006      	beq.n	80157f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	695b      	ldr	r3, [r3, #20]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d002      	beq.n	80157f0 <osThreadNew+0xa8>
        mem = 1;
 80157ea:	2301      	movs	r3, #1
 80157ec:	61bb      	str	r3, [r7, #24]
 80157ee:	e010      	b.n	8015812 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	689b      	ldr	r3, [r3, #8]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d10c      	bne.n	8015812 <osThreadNew+0xca>
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	68db      	ldr	r3, [r3, #12]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d108      	bne.n	8015812 <osThreadNew+0xca>
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	691b      	ldr	r3, [r3, #16]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d104      	bne.n	8015812 <osThreadNew+0xca>
          mem = 0;
 8015808:	2300      	movs	r3, #0
 801580a:	61bb      	str	r3, [r7, #24]
 801580c:	e001      	b.n	8015812 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801580e:	2300      	movs	r3, #0
 8015810:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015812:	69bb      	ldr	r3, [r7, #24]
 8015814:	2b01      	cmp	r3, #1
 8015816:	d110      	bne.n	801583a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015820:	9202      	str	r2, [sp, #8]
 8015822:	9301      	str	r3, [sp, #4]
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	9300      	str	r3, [sp, #0]
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	6a3a      	ldr	r2, [r7, #32]
 801582c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801582e:	68f8      	ldr	r0, [r7, #12]
 8015830:	f002 f97e 	bl	8017b30 <xTaskCreateStatic>
 8015834:	4603      	mov	r3, r0
 8015836:	613b      	str	r3, [r7, #16]
 8015838:	e013      	b.n	8015862 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801583a:	69bb      	ldr	r3, [r7, #24]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d110      	bne.n	8015862 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015840:	6a3b      	ldr	r3, [r7, #32]
 8015842:	b29a      	uxth	r2, r3
 8015844:	f107 0310 	add.w	r3, r7, #16
 8015848:	9301      	str	r3, [sp, #4]
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	9300      	str	r3, [sp, #0]
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015852:	68f8      	ldr	r0, [r7, #12]
 8015854:	f002 f9c9 	bl	8017bea <xTaskCreate>
 8015858:	4603      	mov	r3, r0
 801585a:	2b01      	cmp	r3, #1
 801585c:	d001      	beq.n	8015862 <osThreadNew+0x11a>
            hTask = NULL;
 801585e:	2300      	movs	r3, #0
 8015860:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015862:	693b      	ldr	r3, [r7, #16]
}
 8015864:	4618      	mov	r0, r3
 8015866:	3728      	adds	r7, #40	; 0x28
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}

0801586c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801586c:	b580      	push	{r7, lr}
 801586e:	b084      	sub	sp, #16
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015874:	f3ef 8305 	mrs	r3, IPSR
 8015878:	60bb      	str	r3, [r7, #8]
  return(result);
 801587a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801587c:	2b00      	cmp	r3, #0
 801587e:	d003      	beq.n	8015888 <osDelay+0x1c>
    stat = osErrorISR;
 8015880:	f06f 0305 	mvn.w	r3, #5
 8015884:	60fb      	str	r3, [r7, #12]
 8015886:	e007      	b.n	8015898 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015888:	2300      	movs	r3, #0
 801588a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d002      	beq.n	8015898 <osDelay+0x2c>
      vTaskDelay(ticks);
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f002 faf0 	bl	8017e78 <vTaskDelay>
    }
  }

  return (stat);
 8015898:	68fb      	ldr	r3, [r7, #12]
}
 801589a:	4618      	mov	r0, r3
 801589c:	3710      	adds	r7, #16
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}

080158a2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80158a2:	b580      	push	{r7, lr}
 80158a4:	b088      	sub	sp, #32
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80158aa:	2300      	movs	r3, #0
 80158ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80158ae:	f3ef 8305 	mrs	r3, IPSR
 80158b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80158b4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d174      	bne.n	80159a4 <osMutexNew+0x102>
    if (attr != NULL) {
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d003      	beq.n	80158c8 <osMutexNew+0x26>
      type = attr->attr_bits;
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	685b      	ldr	r3, [r3, #4]
 80158c4:	61bb      	str	r3, [r7, #24]
 80158c6:	e001      	b.n	80158cc <osMutexNew+0x2a>
    } else {
      type = 0U;
 80158c8:	2300      	movs	r3, #0
 80158ca:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80158cc:	69bb      	ldr	r3, [r7, #24]
 80158ce:	f003 0301 	and.w	r3, r3, #1
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d002      	beq.n	80158dc <osMutexNew+0x3a>
      rmtx = 1U;
 80158d6:	2301      	movs	r3, #1
 80158d8:	617b      	str	r3, [r7, #20]
 80158da:	e001      	b.n	80158e0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80158dc:	2300      	movs	r3, #0
 80158de:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80158e0:	69bb      	ldr	r3, [r7, #24]
 80158e2:	f003 0308 	and.w	r3, r3, #8
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d15c      	bne.n	80159a4 <osMutexNew+0x102>
      mem = -1;
 80158ea:	f04f 33ff 	mov.w	r3, #4294967295
 80158ee:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d015      	beq.n	8015922 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	689b      	ldr	r3, [r3, #8]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d006      	beq.n	801590c <osMutexNew+0x6a>
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	68db      	ldr	r3, [r3, #12]
 8015902:	2b4f      	cmp	r3, #79	; 0x4f
 8015904:	d902      	bls.n	801590c <osMutexNew+0x6a>
          mem = 1;
 8015906:	2301      	movs	r3, #1
 8015908:	613b      	str	r3, [r7, #16]
 801590a:	e00c      	b.n	8015926 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	689b      	ldr	r3, [r3, #8]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d108      	bne.n	8015926 <osMutexNew+0x84>
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	68db      	ldr	r3, [r3, #12]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d104      	bne.n	8015926 <osMutexNew+0x84>
            mem = 0;
 801591c:	2300      	movs	r3, #0
 801591e:	613b      	str	r3, [r7, #16]
 8015920:	e001      	b.n	8015926 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8015922:	2300      	movs	r3, #0
 8015924:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8015926:	693b      	ldr	r3, [r7, #16]
 8015928:	2b01      	cmp	r3, #1
 801592a:	d112      	bne.n	8015952 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801592c:	697b      	ldr	r3, [r7, #20]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d007      	beq.n	8015942 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	689b      	ldr	r3, [r3, #8]
 8015936:	4619      	mov	r1, r3
 8015938:	2004      	movs	r0, #4
 801593a:	f001 f9a4 	bl	8016c86 <xQueueCreateMutexStatic>
 801593e:	61f8      	str	r0, [r7, #28]
 8015940:	e016      	b.n	8015970 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	689b      	ldr	r3, [r3, #8]
 8015946:	4619      	mov	r1, r3
 8015948:	2001      	movs	r0, #1
 801594a:	f001 f99c 	bl	8016c86 <xQueueCreateMutexStatic>
 801594e:	61f8      	str	r0, [r7, #28]
 8015950:	e00e      	b.n	8015970 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8015952:	693b      	ldr	r3, [r7, #16]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d10b      	bne.n	8015970 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8015958:	697b      	ldr	r3, [r7, #20]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d004      	beq.n	8015968 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801595e:	2004      	movs	r0, #4
 8015960:	f001 f979 	bl	8016c56 <xQueueCreateMutex>
 8015964:	61f8      	str	r0, [r7, #28]
 8015966:	e003      	b.n	8015970 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8015968:	2001      	movs	r0, #1
 801596a:	f001 f974 	bl	8016c56 <xQueueCreateMutex>
 801596e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8015970:	69fb      	ldr	r3, [r7, #28]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d00c      	beq.n	8015990 <osMutexNew+0xee>
        if (attr != NULL) {
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d003      	beq.n	8015984 <osMutexNew+0xe2>
          name = attr->name;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	60fb      	str	r3, [r7, #12]
 8015982:	e001      	b.n	8015988 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8015984:	2300      	movs	r3, #0
 8015986:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8015988:	68f9      	ldr	r1, [r7, #12]
 801598a:	69f8      	ldr	r0, [r7, #28]
 801598c:	f002 f848 	bl	8017a20 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8015990:	69fb      	ldr	r3, [r7, #28]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d006      	beq.n	80159a4 <osMutexNew+0x102>
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d003      	beq.n	80159a4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801599c:	69fb      	ldr	r3, [r7, #28]
 801599e:	f043 0301 	orr.w	r3, r3, #1
 80159a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80159a4:	69fb      	ldr	r3, [r7, #28]
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3720      	adds	r7, #32
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}

080159ae <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80159ae:	b580      	push	{r7, lr}
 80159b0:	b086      	sub	sp, #24
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	6078      	str	r0, [r7, #4]
 80159b6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f023 0301 	bic.w	r3, r3, #1
 80159be:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f003 0301 	and.w	r3, r3, #1
 80159c6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80159c8:	2300      	movs	r3, #0
 80159ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80159cc:	f3ef 8305 	mrs	r3, IPSR
 80159d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80159d2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d003      	beq.n	80159e0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80159d8:	f06f 0305 	mvn.w	r3, #5
 80159dc:	617b      	str	r3, [r7, #20]
 80159de:	e02c      	b.n	8015a3a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d103      	bne.n	80159ee <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80159e6:	f06f 0303 	mvn.w	r3, #3
 80159ea:	617b      	str	r3, [r7, #20]
 80159ec:	e025      	b.n	8015a3a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d011      	beq.n	8015a18 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80159f4:	6839      	ldr	r1, [r7, #0]
 80159f6:	6938      	ldr	r0, [r7, #16]
 80159f8:	f001 f994 	bl	8016d24 <xQueueTakeMutexRecursive>
 80159fc:	4603      	mov	r3, r0
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d01b      	beq.n	8015a3a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015a02:	683b      	ldr	r3, [r7, #0]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d003      	beq.n	8015a10 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8015a08:	f06f 0301 	mvn.w	r3, #1
 8015a0c:	617b      	str	r3, [r7, #20]
 8015a0e:	e014      	b.n	8015a3a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015a10:	f06f 0302 	mvn.w	r3, #2
 8015a14:	617b      	str	r3, [r7, #20]
 8015a16:	e010      	b.n	8015a3a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8015a18:	6839      	ldr	r1, [r7, #0]
 8015a1a:	6938      	ldr	r0, [r7, #16]
 8015a1c:	f001 fd28 	bl	8017470 <xQueueSemaphoreTake>
 8015a20:	4603      	mov	r3, r0
 8015a22:	2b01      	cmp	r3, #1
 8015a24:	d009      	beq.n	8015a3a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d003      	beq.n	8015a34 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8015a2c:	f06f 0301 	mvn.w	r3, #1
 8015a30:	617b      	str	r3, [r7, #20]
 8015a32:	e002      	b.n	8015a3a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015a34:	f06f 0302 	mvn.w	r3, #2
 8015a38:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8015a3a:	697b      	ldr	r3, [r7, #20]
}
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3718      	adds	r7, #24
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}

08015a44 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b086      	sub	sp, #24
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f023 0301 	bic.w	r3, r3, #1
 8015a52:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f003 0301 	and.w	r3, r3, #1
 8015a5a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a60:	f3ef 8305 	mrs	r3, IPSR
 8015a64:	60bb      	str	r3, [r7, #8]
  return(result);
 8015a66:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d003      	beq.n	8015a74 <osMutexRelease+0x30>
    stat = osErrorISR;
 8015a6c:	f06f 0305 	mvn.w	r3, #5
 8015a70:	617b      	str	r3, [r7, #20]
 8015a72:	e01f      	b.n	8015ab4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8015a74:	693b      	ldr	r3, [r7, #16]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d103      	bne.n	8015a82 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8015a7a:	f06f 0303 	mvn.w	r3, #3
 8015a7e:	617b      	str	r3, [r7, #20]
 8015a80:	e018      	b.n	8015ab4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d009      	beq.n	8015a9c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8015a88:	6938      	ldr	r0, [r7, #16]
 8015a8a:	f001 f917 	bl	8016cbc <xQueueGiveMutexRecursive>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	2b01      	cmp	r3, #1
 8015a92:	d00f      	beq.n	8015ab4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8015a94:	f06f 0302 	mvn.w	r3, #2
 8015a98:	617b      	str	r3, [r7, #20]
 8015a9a:	e00b      	b.n	8015ab4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	2100      	movs	r1, #0
 8015aa2:	6938      	ldr	r0, [r7, #16]
 8015aa4:	f001 f9de 	bl	8016e64 <xQueueGenericSend>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	2b01      	cmp	r3, #1
 8015aac:	d002      	beq.n	8015ab4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8015aae:	f06f 0302 	mvn.w	r3, #2
 8015ab2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015ab4:	697b      	ldr	r3, [r7, #20]
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3718      	adds	r7, #24
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}

08015abe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015abe:	b580      	push	{r7, lr}
 8015ac0:	b08a      	sub	sp, #40	; 0x28
 8015ac2:	af02      	add	r7, sp, #8
 8015ac4:	60f8      	str	r0, [r7, #12]
 8015ac6:	60b9      	str	r1, [r7, #8]
 8015ac8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015aca:	2300      	movs	r3, #0
 8015acc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ace:	f3ef 8305 	mrs	r3, IPSR
 8015ad2:	613b      	str	r3, [r7, #16]
  return(result);
 8015ad4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d175      	bne.n	8015bc6 <osSemaphoreNew+0x108>
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d072      	beq.n	8015bc6 <osSemaphoreNew+0x108>
 8015ae0:	68ba      	ldr	r2, [r7, #8]
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d86e      	bhi.n	8015bc6 <osSemaphoreNew+0x108>
    mem = -1;
 8015ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8015aec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d015      	beq.n	8015b20 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	689b      	ldr	r3, [r3, #8]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d006      	beq.n	8015b0a <osSemaphoreNew+0x4c>
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	68db      	ldr	r3, [r3, #12]
 8015b00:	2b4f      	cmp	r3, #79	; 0x4f
 8015b02:	d902      	bls.n	8015b0a <osSemaphoreNew+0x4c>
        mem = 1;
 8015b04:	2301      	movs	r3, #1
 8015b06:	61bb      	str	r3, [r7, #24]
 8015b08:	e00c      	b.n	8015b24 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	689b      	ldr	r3, [r3, #8]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d108      	bne.n	8015b24 <osSemaphoreNew+0x66>
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d104      	bne.n	8015b24 <osSemaphoreNew+0x66>
          mem = 0;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	61bb      	str	r3, [r7, #24]
 8015b1e:	e001      	b.n	8015b24 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015b20:	2300      	movs	r3, #0
 8015b22:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015b24:	69bb      	ldr	r3, [r7, #24]
 8015b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b2a:	d04c      	beq.n	8015bc6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	2b01      	cmp	r3, #1
 8015b30:	d128      	bne.n	8015b84 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015b32:	69bb      	ldr	r3, [r7, #24]
 8015b34:	2b01      	cmp	r3, #1
 8015b36:	d10a      	bne.n	8015b4e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	689b      	ldr	r3, [r3, #8]
 8015b3c:	2203      	movs	r2, #3
 8015b3e:	9200      	str	r2, [sp, #0]
 8015b40:	2200      	movs	r2, #0
 8015b42:	2100      	movs	r1, #0
 8015b44:	2001      	movs	r0, #1
 8015b46:	f000 ff97 	bl	8016a78 <xQueueGenericCreateStatic>
 8015b4a:	61f8      	str	r0, [r7, #28]
 8015b4c:	e005      	b.n	8015b5a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015b4e:	2203      	movs	r2, #3
 8015b50:	2100      	movs	r1, #0
 8015b52:	2001      	movs	r0, #1
 8015b54:	f001 f808 	bl	8016b68 <xQueueGenericCreate>
 8015b58:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015b5a:	69fb      	ldr	r3, [r7, #28]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d022      	beq.n	8015ba6 <osSemaphoreNew+0xe8>
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d01f      	beq.n	8015ba6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015b66:	2300      	movs	r3, #0
 8015b68:	2200      	movs	r2, #0
 8015b6a:	2100      	movs	r1, #0
 8015b6c:	69f8      	ldr	r0, [r7, #28]
 8015b6e:	f001 f979 	bl	8016e64 <xQueueGenericSend>
 8015b72:	4603      	mov	r3, r0
 8015b74:	2b01      	cmp	r3, #1
 8015b76:	d016      	beq.n	8015ba6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015b78:	69f8      	ldr	r0, [r7, #28]
 8015b7a:	f001 fe05 	bl	8017788 <vQueueDelete>
            hSemaphore = NULL;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	61fb      	str	r3, [r7, #28]
 8015b82:	e010      	b.n	8015ba6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015b84:	69bb      	ldr	r3, [r7, #24]
 8015b86:	2b01      	cmp	r3, #1
 8015b88:	d108      	bne.n	8015b9c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	689b      	ldr	r3, [r3, #8]
 8015b8e:	461a      	mov	r2, r3
 8015b90:	68b9      	ldr	r1, [r7, #8]
 8015b92:	68f8      	ldr	r0, [r7, #12]
 8015b94:	f001 f8fc 	bl	8016d90 <xQueueCreateCountingSemaphoreStatic>
 8015b98:	61f8      	str	r0, [r7, #28]
 8015b9a:	e004      	b.n	8015ba6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015b9c:	68b9      	ldr	r1, [r7, #8]
 8015b9e:	68f8      	ldr	r0, [r7, #12]
 8015ba0:	f001 f92d 	bl	8016dfe <xQueueCreateCountingSemaphore>
 8015ba4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015ba6:	69fb      	ldr	r3, [r7, #28]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d00c      	beq.n	8015bc6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d003      	beq.n	8015bba <osSemaphoreNew+0xfc>
          name = attr->name;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	617b      	str	r3, [r7, #20]
 8015bb8:	e001      	b.n	8015bbe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015bbe:	6979      	ldr	r1, [r7, #20]
 8015bc0:	69f8      	ldr	r0, [r7, #28]
 8015bc2:	f001 ff2d 	bl	8017a20 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015bc6:	69fb      	ldr	r3, [r7, #28]
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3720      	adds	r7, #32
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b086      	sub	sp, #24
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015bde:	2300      	movs	r3, #0
 8015be0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d103      	bne.n	8015bf0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015be8:	f06f 0303 	mvn.w	r3, #3
 8015bec:	617b      	str	r3, [r7, #20]
 8015bee:	e039      	b.n	8015c64 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bf0:	f3ef 8305 	mrs	r3, IPSR
 8015bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8015bf6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d022      	beq.n	8015c42 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015bfc:	683b      	ldr	r3, [r7, #0]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d003      	beq.n	8015c0a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8015c02:	f06f 0303 	mvn.w	r3, #3
 8015c06:	617b      	str	r3, [r7, #20]
 8015c08:	e02c      	b.n	8015c64 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015c0e:	f107 0308 	add.w	r3, r7, #8
 8015c12:	461a      	mov	r2, r3
 8015c14:	2100      	movs	r1, #0
 8015c16:	6938      	ldr	r0, [r7, #16]
 8015c18:	f001 fd36 	bl	8017688 <xQueueReceiveFromISR>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	2b01      	cmp	r3, #1
 8015c20:	d003      	beq.n	8015c2a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8015c22:	f06f 0302 	mvn.w	r3, #2
 8015c26:	617b      	str	r3, [r7, #20]
 8015c28:	e01c      	b.n	8015c64 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015c2a:	68bb      	ldr	r3, [r7, #8]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d019      	beq.n	8015c64 <osSemaphoreAcquire+0x94>
 8015c30:	4b0f      	ldr	r3, [pc, #60]	; (8015c70 <osSemaphoreAcquire+0xa0>)
 8015c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c36:	601a      	str	r2, [r3, #0]
 8015c38:	f3bf 8f4f 	dsb	sy
 8015c3c:	f3bf 8f6f 	isb	sy
 8015c40:	e010      	b.n	8015c64 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015c42:	6839      	ldr	r1, [r7, #0]
 8015c44:	6938      	ldr	r0, [r7, #16]
 8015c46:	f001 fc13 	bl	8017470 <xQueueSemaphoreTake>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	2b01      	cmp	r3, #1
 8015c4e:	d009      	beq.n	8015c64 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d003      	beq.n	8015c5e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015c56:	f06f 0301 	mvn.w	r3, #1
 8015c5a:	617b      	str	r3, [r7, #20]
 8015c5c:	e002      	b.n	8015c64 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015c5e:	f06f 0302 	mvn.w	r3, #2
 8015c62:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015c64:	697b      	ldr	r3, [r7, #20]
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3718      	adds	r7, #24
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	e000ed04 	.word	0xe000ed04

08015c74 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b086      	sub	sp, #24
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015c80:	2300      	movs	r3, #0
 8015c82:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015c84:	693b      	ldr	r3, [r7, #16]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d103      	bne.n	8015c92 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015c8a:	f06f 0303 	mvn.w	r3, #3
 8015c8e:	617b      	str	r3, [r7, #20]
 8015c90:	e02c      	b.n	8015cec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c92:	f3ef 8305 	mrs	r3, IPSR
 8015c96:	60fb      	str	r3, [r7, #12]
  return(result);
 8015c98:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d01a      	beq.n	8015cd4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015ca2:	f107 0308 	add.w	r3, r7, #8
 8015ca6:	4619      	mov	r1, r3
 8015ca8:	6938      	ldr	r0, [r7, #16]
 8015caa:	f001 fa74 	bl	8017196 <xQueueGiveFromISR>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	2b01      	cmp	r3, #1
 8015cb2:	d003      	beq.n	8015cbc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015cb4:	f06f 0302 	mvn.w	r3, #2
 8015cb8:	617b      	str	r3, [r7, #20]
 8015cba:	e017      	b.n	8015cec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d014      	beq.n	8015cec <osSemaphoreRelease+0x78>
 8015cc2:	4b0d      	ldr	r3, [pc, #52]	; (8015cf8 <osSemaphoreRelease+0x84>)
 8015cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cc8:	601a      	str	r2, [r3, #0]
 8015cca:	f3bf 8f4f 	dsb	sy
 8015cce:	f3bf 8f6f 	isb	sy
 8015cd2:	e00b      	b.n	8015cec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	2100      	movs	r1, #0
 8015cda:	6938      	ldr	r0, [r7, #16]
 8015cdc:	f001 f8c2 	bl	8016e64 <xQueueGenericSend>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	2b01      	cmp	r3, #1
 8015ce4:	d002      	beq.n	8015cec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015ce6:	f06f 0302 	mvn.w	r3, #2
 8015cea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015cec:	697b      	ldr	r3, [r7, #20]
}
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3718      	adds	r7, #24
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}
 8015cf6:	bf00      	nop
 8015cf8:	e000ed04 	.word	0xe000ed04

08015cfc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b08a      	sub	sp, #40	; 0x28
 8015d00:	af02      	add	r7, sp, #8
 8015d02:	60f8      	str	r0, [r7, #12]
 8015d04:	60b9      	str	r1, [r7, #8]
 8015d06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015d0c:	f3ef 8305 	mrs	r3, IPSR
 8015d10:	613b      	str	r3, [r7, #16]
  return(result);
 8015d12:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d15f      	bne.n	8015dd8 <osMessageQueueNew+0xdc>
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d05c      	beq.n	8015dd8 <osMessageQueueNew+0xdc>
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d059      	beq.n	8015dd8 <osMessageQueueNew+0xdc>
    mem = -1;
 8015d24:	f04f 33ff 	mov.w	r3, #4294967295
 8015d28:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d029      	beq.n	8015d84 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	689b      	ldr	r3, [r3, #8]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d012      	beq.n	8015d5e <osMessageQueueNew+0x62>
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	68db      	ldr	r3, [r3, #12]
 8015d3c:	2b4f      	cmp	r3, #79	; 0x4f
 8015d3e:	d90e      	bls.n	8015d5e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d00a      	beq.n	8015d5e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	695a      	ldr	r2, [r3, #20]
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	68b9      	ldr	r1, [r7, #8]
 8015d50:	fb01 f303 	mul.w	r3, r1, r3
 8015d54:	429a      	cmp	r2, r3
 8015d56:	d302      	bcc.n	8015d5e <osMessageQueueNew+0x62>
        mem = 1;
 8015d58:	2301      	movs	r3, #1
 8015d5a:	61bb      	str	r3, [r7, #24]
 8015d5c:	e014      	b.n	8015d88 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	689b      	ldr	r3, [r3, #8]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d110      	bne.n	8015d88 <osMessageQueueNew+0x8c>
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	68db      	ldr	r3, [r3, #12]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d10c      	bne.n	8015d88 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d108      	bne.n	8015d88 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	695b      	ldr	r3, [r3, #20]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d104      	bne.n	8015d88 <osMessageQueueNew+0x8c>
          mem = 0;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	61bb      	str	r3, [r7, #24]
 8015d82:	e001      	b.n	8015d88 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8015d84:	2300      	movs	r3, #0
 8015d86:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015d88:	69bb      	ldr	r3, [r7, #24]
 8015d8a:	2b01      	cmp	r3, #1
 8015d8c:	d10b      	bne.n	8015da6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	691a      	ldr	r2, [r3, #16]
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	689b      	ldr	r3, [r3, #8]
 8015d96:	2100      	movs	r1, #0
 8015d98:	9100      	str	r1, [sp, #0]
 8015d9a:	68b9      	ldr	r1, [r7, #8]
 8015d9c:	68f8      	ldr	r0, [r7, #12]
 8015d9e:	f000 fe6b 	bl	8016a78 <xQueueGenericCreateStatic>
 8015da2:	61f8      	str	r0, [r7, #28]
 8015da4:	e008      	b.n	8015db8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8015da6:	69bb      	ldr	r3, [r7, #24]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d105      	bne.n	8015db8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8015dac:	2200      	movs	r2, #0
 8015dae:	68b9      	ldr	r1, [r7, #8]
 8015db0:	68f8      	ldr	r0, [r7, #12]
 8015db2:	f000 fed9 	bl	8016b68 <xQueueGenericCreate>
 8015db6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015db8:	69fb      	ldr	r3, [r7, #28]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d00c      	beq.n	8015dd8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d003      	beq.n	8015dcc <osMessageQueueNew+0xd0>
        name = attr->name;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	617b      	str	r3, [r7, #20]
 8015dca:	e001      	b.n	8015dd0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8015dd0:	6979      	ldr	r1, [r7, #20]
 8015dd2:	69f8      	ldr	r0, [r7, #28]
 8015dd4:	f001 fe24 	bl	8017a20 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015dd8:	69fb      	ldr	r3, [r7, #28]
}
 8015dda:	4618      	mov	r0, r3
 8015ddc:	3720      	adds	r7, #32
 8015dde:	46bd      	mov	sp, r7
 8015de0:	bd80      	pop	{r7, pc}
	...

08015de4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b088      	sub	sp, #32
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	60f8      	str	r0, [r7, #12]
 8015dec:	60b9      	str	r1, [r7, #8]
 8015dee:	603b      	str	r3, [r7, #0]
 8015df0:	4613      	mov	r3, r2
 8015df2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015dfc:	f3ef 8305 	mrs	r3, IPSR
 8015e00:	617b      	str	r3, [r7, #20]
  return(result);
 8015e02:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d028      	beq.n	8015e5a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015e08:	69bb      	ldr	r3, [r7, #24]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d005      	beq.n	8015e1a <osMessageQueuePut+0x36>
 8015e0e:	68bb      	ldr	r3, [r7, #8]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d002      	beq.n	8015e1a <osMessageQueuePut+0x36>
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d003      	beq.n	8015e22 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8015e1a:	f06f 0303 	mvn.w	r3, #3
 8015e1e:	61fb      	str	r3, [r7, #28]
 8015e20:	e038      	b.n	8015e94 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8015e22:	2300      	movs	r3, #0
 8015e24:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8015e26:	f107 0210 	add.w	r2, r7, #16
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	68b9      	ldr	r1, [r7, #8]
 8015e2e:	69b8      	ldr	r0, [r7, #24]
 8015e30:	f001 f916 	bl	8017060 <xQueueGenericSendFromISR>
 8015e34:	4603      	mov	r3, r0
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d003      	beq.n	8015e42 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8015e3a:	f06f 0302 	mvn.w	r3, #2
 8015e3e:	61fb      	str	r3, [r7, #28]
 8015e40:	e028      	b.n	8015e94 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d025      	beq.n	8015e94 <osMessageQueuePut+0xb0>
 8015e48:	4b15      	ldr	r3, [pc, #84]	; (8015ea0 <osMessageQueuePut+0xbc>)
 8015e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e4e:	601a      	str	r2, [r3, #0]
 8015e50:	f3bf 8f4f 	dsb	sy
 8015e54:	f3bf 8f6f 	isb	sy
 8015e58:	e01c      	b.n	8015e94 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015e5a:	69bb      	ldr	r3, [r7, #24]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d002      	beq.n	8015e66 <osMessageQueuePut+0x82>
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d103      	bne.n	8015e6e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8015e66:	f06f 0303 	mvn.w	r3, #3
 8015e6a:	61fb      	str	r3, [r7, #28]
 8015e6c:	e012      	b.n	8015e94 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015e6e:	2300      	movs	r3, #0
 8015e70:	683a      	ldr	r2, [r7, #0]
 8015e72:	68b9      	ldr	r1, [r7, #8]
 8015e74:	69b8      	ldr	r0, [r7, #24]
 8015e76:	f000 fff5 	bl	8016e64 <xQueueGenericSend>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	2b01      	cmp	r3, #1
 8015e7e:	d009      	beq.n	8015e94 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d003      	beq.n	8015e8e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8015e86:	f06f 0301 	mvn.w	r3, #1
 8015e8a:	61fb      	str	r3, [r7, #28]
 8015e8c:	e002      	b.n	8015e94 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8015e8e:	f06f 0302 	mvn.w	r3, #2
 8015e92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015e94:	69fb      	ldr	r3, [r7, #28]
}
 8015e96:	4618      	mov	r0, r3
 8015e98:	3720      	adds	r7, #32
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}
 8015e9e:	bf00      	nop
 8015ea0:	e000ed04 	.word	0xe000ed04

08015ea4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b088      	sub	sp, #32
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	60b9      	str	r1, [r7, #8]
 8015eae:	607a      	str	r2, [r7, #4]
 8015eb0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015eba:	f3ef 8305 	mrs	r3, IPSR
 8015ebe:	617b      	str	r3, [r7, #20]
  return(result);
 8015ec0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d028      	beq.n	8015f18 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015ec6:	69bb      	ldr	r3, [r7, #24]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d005      	beq.n	8015ed8 <osMessageQueueGet+0x34>
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d002      	beq.n	8015ed8 <osMessageQueueGet+0x34>
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d003      	beq.n	8015ee0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8015ed8:	f06f 0303 	mvn.w	r3, #3
 8015edc:	61fb      	str	r3, [r7, #28]
 8015ede:	e037      	b.n	8015f50 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8015ee4:	f107 0310 	add.w	r3, r7, #16
 8015ee8:	461a      	mov	r2, r3
 8015eea:	68b9      	ldr	r1, [r7, #8]
 8015eec:	69b8      	ldr	r0, [r7, #24]
 8015eee:	f001 fbcb 	bl	8017688 <xQueueReceiveFromISR>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	2b01      	cmp	r3, #1
 8015ef6:	d003      	beq.n	8015f00 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8015ef8:	f06f 0302 	mvn.w	r3, #2
 8015efc:	61fb      	str	r3, [r7, #28]
 8015efe:	e027      	b.n	8015f50 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d024      	beq.n	8015f50 <osMessageQueueGet+0xac>
 8015f06:	4b15      	ldr	r3, [pc, #84]	; (8015f5c <osMessageQueueGet+0xb8>)
 8015f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f0c:	601a      	str	r2, [r3, #0]
 8015f0e:	f3bf 8f4f 	dsb	sy
 8015f12:	f3bf 8f6f 	isb	sy
 8015f16:	e01b      	b.n	8015f50 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015f18:	69bb      	ldr	r3, [r7, #24]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d002      	beq.n	8015f24 <osMessageQueueGet+0x80>
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d103      	bne.n	8015f2c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8015f24:	f06f 0303 	mvn.w	r3, #3
 8015f28:	61fb      	str	r3, [r7, #28]
 8015f2a:	e011      	b.n	8015f50 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015f2c:	683a      	ldr	r2, [r7, #0]
 8015f2e:	68b9      	ldr	r1, [r7, #8]
 8015f30:	69b8      	ldr	r0, [r7, #24]
 8015f32:	f001 f9bd 	bl	80172b0 <xQueueReceive>
 8015f36:	4603      	mov	r3, r0
 8015f38:	2b01      	cmp	r3, #1
 8015f3a:	d009      	beq.n	8015f50 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d003      	beq.n	8015f4a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8015f42:	f06f 0301 	mvn.w	r3, #1
 8015f46:	61fb      	str	r3, [r7, #28]
 8015f48:	e002      	b.n	8015f50 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8015f4a:	f06f 0302 	mvn.w	r3, #2
 8015f4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015f50:	69fb      	ldr	r3, [r7, #28]
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3720      	adds	r7, #32
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	e000ed04 	.word	0xe000ed04

08015f60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015f60:	b480      	push	{r7}
 8015f62:	b085      	sub	sp, #20
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	60f8      	str	r0, [r7, #12]
 8015f68:	60b9      	str	r1, [r7, #8]
 8015f6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	4a07      	ldr	r2, [pc, #28]	; (8015f8c <vApplicationGetIdleTaskMemory+0x2c>)
 8015f70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015f72:	68bb      	ldr	r3, [r7, #8]
 8015f74:	4a06      	ldr	r2, [pc, #24]	; (8015f90 <vApplicationGetIdleTaskMemory+0x30>)
 8015f76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2280      	movs	r2, #128	; 0x80
 8015f7c:	601a      	str	r2, [r3, #0]
}
 8015f7e:	bf00      	nop
 8015f80:	3714      	adds	r7, #20
 8015f82:	46bd      	mov	sp, r7
 8015f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f88:	4770      	bx	lr
 8015f8a:	bf00      	nop
 8015f8c:	2400b908 	.word	0x2400b908
 8015f90:	2400b968 	.word	0x2400b968

08015f94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015f94:	b480      	push	{r7}
 8015f96:	b085      	sub	sp, #20
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	60f8      	str	r0, [r7, #12]
 8015f9c:	60b9      	str	r1, [r7, #8]
 8015f9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	4a07      	ldr	r2, [pc, #28]	; (8015fc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8015fa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015fa6:	68bb      	ldr	r3, [r7, #8]
 8015fa8:	4a06      	ldr	r2, [pc, #24]	; (8015fc4 <vApplicationGetTimerTaskMemory+0x30>)
 8015faa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015fb2:	601a      	str	r2, [r3, #0]
}
 8015fb4:	bf00      	nop
 8015fb6:	3714      	adds	r7, #20
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr
 8015fc0:	2400bb68 	.word	0x2400bb68
 8015fc4:	2400bbc8 	.word	0x2400bbc8

08015fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b08a      	sub	sp, #40	; 0x28
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015fd4:	f001 fff2 	bl	8017fbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015fd8:	4b5b      	ldr	r3, [pc, #364]	; (8016148 <pvPortMalloc+0x180>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d101      	bne.n	8015fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015fe0:	f000 f920 	bl	8016224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015fe4:	4b59      	ldr	r3, [pc, #356]	; (801614c <pvPortMalloc+0x184>)
 8015fe6:	681a      	ldr	r2, [r3, #0]
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	4013      	ands	r3, r2
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	f040 8093 	bne.w	8016118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d01d      	beq.n	8016034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015ff8:	2208      	movs	r2, #8
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	4413      	add	r3, r2
 8015ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f003 0307 	and.w	r3, r3, #7
 8016006:	2b00      	cmp	r3, #0
 8016008:	d014      	beq.n	8016034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f023 0307 	bic.w	r3, r3, #7
 8016010:	3308      	adds	r3, #8
 8016012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f003 0307 	and.w	r3, r3, #7
 801601a:	2b00      	cmp	r3, #0
 801601c:	d00a      	beq.n	8016034 <pvPortMalloc+0x6c>
	__asm volatile
 801601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016022:	f383 8811 	msr	BASEPRI, r3
 8016026:	f3bf 8f6f 	isb	sy
 801602a:	f3bf 8f4f 	dsb	sy
 801602e:	617b      	str	r3, [r7, #20]
}
 8016030:	bf00      	nop
 8016032:	e7fe      	b.n	8016032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d06e      	beq.n	8016118 <pvPortMalloc+0x150>
 801603a:	4b45      	ldr	r3, [pc, #276]	; (8016150 <pvPortMalloc+0x188>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	687a      	ldr	r2, [r7, #4]
 8016040:	429a      	cmp	r2, r3
 8016042:	d869      	bhi.n	8016118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016044:	4b43      	ldr	r3, [pc, #268]	; (8016154 <pvPortMalloc+0x18c>)
 8016046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016048:	4b42      	ldr	r3, [pc, #264]	; (8016154 <pvPortMalloc+0x18c>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801604e:	e004      	b.n	801605a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	429a      	cmp	r2, r3
 8016062:	d903      	bls.n	801606c <pvPortMalloc+0xa4>
 8016064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d1f1      	bne.n	8016050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801606c:	4b36      	ldr	r3, [pc, #216]	; (8016148 <pvPortMalloc+0x180>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016072:	429a      	cmp	r2, r3
 8016074:	d050      	beq.n	8016118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016076:	6a3b      	ldr	r3, [r7, #32]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	2208      	movs	r2, #8
 801607c:	4413      	add	r3, r2
 801607e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016082:	681a      	ldr	r2, [r3, #0]
 8016084:	6a3b      	ldr	r3, [r7, #32]
 8016086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801608a:	685a      	ldr	r2, [r3, #4]
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	1ad2      	subs	r2, r2, r3
 8016090:	2308      	movs	r3, #8
 8016092:	005b      	lsls	r3, r3, #1
 8016094:	429a      	cmp	r2, r3
 8016096:	d91f      	bls.n	80160d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	4413      	add	r3, r2
 801609e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80160a0:	69bb      	ldr	r3, [r7, #24]
 80160a2:	f003 0307 	and.w	r3, r3, #7
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d00a      	beq.n	80160c0 <pvPortMalloc+0xf8>
	__asm volatile
 80160aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ae:	f383 8811 	msr	BASEPRI, r3
 80160b2:	f3bf 8f6f 	isb	sy
 80160b6:	f3bf 8f4f 	dsb	sy
 80160ba:	613b      	str	r3, [r7, #16]
}
 80160bc:	bf00      	nop
 80160be:	e7fe      	b.n	80160be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80160c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c2:	685a      	ldr	r2, [r3, #4]
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	1ad2      	subs	r2, r2, r3
 80160c8:	69bb      	ldr	r3, [r7, #24]
 80160ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80160cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ce:	687a      	ldr	r2, [r7, #4]
 80160d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80160d2:	69b8      	ldr	r0, [r7, #24]
 80160d4:	f000 f90a 	bl	80162ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80160d8:	4b1d      	ldr	r3, [pc, #116]	; (8016150 <pvPortMalloc+0x188>)
 80160da:	681a      	ldr	r2, [r3, #0]
 80160dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160de:	685b      	ldr	r3, [r3, #4]
 80160e0:	1ad3      	subs	r3, r2, r3
 80160e2:	4a1b      	ldr	r2, [pc, #108]	; (8016150 <pvPortMalloc+0x188>)
 80160e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80160e6:	4b1a      	ldr	r3, [pc, #104]	; (8016150 <pvPortMalloc+0x188>)
 80160e8:	681a      	ldr	r2, [r3, #0]
 80160ea:	4b1b      	ldr	r3, [pc, #108]	; (8016158 <pvPortMalloc+0x190>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	429a      	cmp	r2, r3
 80160f0:	d203      	bcs.n	80160fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80160f2:	4b17      	ldr	r3, [pc, #92]	; (8016150 <pvPortMalloc+0x188>)
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	4a18      	ldr	r2, [pc, #96]	; (8016158 <pvPortMalloc+0x190>)
 80160f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80160fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160fc:	685a      	ldr	r2, [r3, #4]
 80160fe:	4b13      	ldr	r3, [pc, #76]	; (801614c <pvPortMalloc+0x184>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	431a      	orrs	r2, r3
 8016104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801610a:	2200      	movs	r2, #0
 801610c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801610e:	4b13      	ldr	r3, [pc, #76]	; (801615c <pvPortMalloc+0x194>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	3301      	adds	r3, #1
 8016114:	4a11      	ldr	r2, [pc, #68]	; (801615c <pvPortMalloc+0x194>)
 8016116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016118:	f001 ff5e 	bl	8017fd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801611c:	69fb      	ldr	r3, [r7, #28]
 801611e:	f003 0307 	and.w	r3, r3, #7
 8016122:	2b00      	cmp	r3, #0
 8016124:	d00a      	beq.n	801613c <pvPortMalloc+0x174>
	__asm volatile
 8016126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801612a:	f383 8811 	msr	BASEPRI, r3
 801612e:	f3bf 8f6f 	isb	sy
 8016132:	f3bf 8f4f 	dsb	sy
 8016136:	60fb      	str	r3, [r7, #12]
}
 8016138:	bf00      	nop
 801613a:	e7fe      	b.n	801613a <pvPortMalloc+0x172>
	return pvReturn;
 801613c:	69fb      	ldr	r3, [r7, #28]
}
 801613e:	4618      	mov	r0, r3
 8016140:	3728      	adds	r7, #40	; 0x28
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}
 8016146:	bf00      	nop
 8016148:	24024670 	.word	0x24024670
 801614c:	24024684 	.word	0x24024684
 8016150:	24024674 	.word	0x24024674
 8016154:	24024668 	.word	0x24024668
 8016158:	24024678 	.word	0x24024678
 801615c:	2402467c 	.word	0x2402467c

08016160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b086      	sub	sp, #24
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d04d      	beq.n	801620e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016172:	2308      	movs	r3, #8
 8016174:	425b      	negs	r3, r3
 8016176:	697a      	ldr	r2, [r7, #20]
 8016178:	4413      	add	r3, r2
 801617a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801617c:	697b      	ldr	r3, [r7, #20]
 801617e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	685a      	ldr	r2, [r3, #4]
 8016184:	4b24      	ldr	r3, [pc, #144]	; (8016218 <vPortFree+0xb8>)
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	4013      	ands	r3, r2
 801618a:	2b00      	cmp	r3, #0
 801618c:	d10a      	bne.n	80161a4 <vPortFree+0x44>
	__asm volatile
 801618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016192:	f383 8811 	msr	BASEPRI, r3
 8016196:	f3bf 8f6f 	isb	sy
 801619a:	f3bf 8f4f 	dsb	sy
 801619e:	60fb      	str	r3, [r7, #12]
}
 80161a0:	bf00      	nop
 80161a2:	e7fe      	b.n	80161a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d00a      	beq.n	80161c2 <vPortFree+0x62>
	__asm volatile
 80161ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b0:	f383 8811 	msr	BASEPRI, r3
 80161b4:	f3bf 8f6f 	isb	sy
 80161b8:	f3bf 8f4f 	dsb	sy
 80161bc:	60bb      	str	r3, [r7, #8]
}
 80161be:	bf00      	nop
 80161c0:	e7fe      	b.n	80161c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	685a      	ldr	r2, [r3, #4]
 80161c6:	4b14      	ldr	r3, [pc, #80]	; (8016218 <vPortFree+0xb8>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	4013      	ands	r3, r2
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d01e      	beq.n	801620e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80161d0:	693b      	ldr	r3, [r7, #16]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d11a      	bne.n	801620e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80161d8:	693b      	ldr	r3, [r7, #16]
 80161da:	685a      	ldr	r2, [r3, #4]
 80161dc:	4b0e      	ldr	r3, [pc, #56]	; (8016218 <vPortFree+0xb8>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	43db      	mvns	r3, r3
 80161e2:	401a      	ands	r2, r3
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80161e8:	f001 fee8 	bl	8017fbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80161ec:	693b      	ldr	r3, [r7, #16]
 80161ee:	685a      	ldr	r2, [r3, #4]
 80161f0:	4b0a      	ldr	r3, [pc, #40]	; (801621c <vPortFree+0xbc>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	4413      	add	r3, r2
 80161f6:	4a09      	ldr	r2, [pc, #36]	; (801621c <vPortFree+0xbc>)
 80161f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80161fa:	6938      	ldr	r0, [r7, #16]
 80161fc:	f000 f876 	bl	80162ec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016200:	4b07      	ldr	r3, [pc, #28]	; (8016220 <vPortFree+0xc0>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	3301      	adds	r3, #1
 8016206:	4a06      	ldr	r2, [pc, #24]	; (8016220 <vPortFree+0xc0>)
 8016208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801620a:	f001 fee5 	bl	8017fd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801620e:	bf00      	nop
 8016210:	3718      	adds	r7, #24
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	24024684 	.word	0x24024684
 801621c:	24024674 	.word	0x24024674
 8016220:	24024680 	.word	0x24024680

08016224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016224:	b480      	push	{r7}
 8016226:	b085      	sub	sp, #20
 8016228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801622a:	4b29      	ldr	r3, [pc, #164]	; (80162d0 <prvHeapInit+0xac>)
 801622c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801622e:	4b29      	ldr	r3, [pc, #164]	; (80162d4 <prvHeapInit+0xb0>)
 8016230:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	f003 0307 	and.w	r3, r3, #7
 8016238:	2b00      	cmp	r3, #0
 801623a:	d00c      	beq.n	8016256 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	3307      	adds	r3, #7
 8016240:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	f023 0307 	bic.w	r3, r3, #7
 8016248:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801624a:	68ba      	ldr	r2, [r7, #8]
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	1ad3      	subs	r3, r2, r3
 8016250:	4a20      	ldr	r2, [pc, #128]	; (80162d4 <prvHeapInit+0xb0>)
 8016252:	4413      	add	r3, r2
 8016254:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801625a:	4a1f      	ldr	r2, [pc, #124]	; (80162d8 <prvHeapInit+0xb4>)
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016260:	4b1d      	ldr	r3, [pc, #116]	; (80162d8 <prvHeapInit+0xb4>)
 8016262:	2200      	movs	r2, #0
 8016264:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	68ba      	ldr	r2, [r7, #8]
 801626a:	4413      	add	r3, r2
 801626c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801626e:	2208      	movs	r2, #8
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	1a9b      	subs	r3, r3, r2
 8016274:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	f023 0307 	bic.w	r3, r3, #7
 801627c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	4a16      	ldr	r2, [pc, #88]	; (80162dc <prvHeapInit+0xb8>)
 8016282:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016284:	4b15      	ldr	r3, [pc, #84]	; (80162dc <prvHeapInit+0xb8>)
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2200      	movs	r2, #0
 801628a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801628c:	4b13      	ldr	r3, [pc, #76]	; (80162dc <prvHeapInit+0xb8>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	2200      	movs	r2, #0
 8016292:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	68fa      	ldr	r2, [r7, #12]
 801629c:	1ad2      	subs	r2, r2, r3
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80162a2:	4b0e      	ldr	r3, [pc, #56]	; (80162dc <prvHeapInit+0xb8>)
 80162a4:	681a      	ldr	r2, [r3, #0]
 80162a6:	683b      	ldr	r3, [r7, #0]
 80162a8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	685b      	ldr	r3, [r3, #4]
 80162ae:	4a0c      	ldr	r2, [pc, #48]	; (80162e0 <prvHeapInit+0xbc>)
 80162b0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	4a0b      	ldr	r2, [pc, #44]	; (80162e4 <prvHeapInit+0xc0>)
 80162b8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80162ba:	4b0b      	ldr	r3, [pc, #44]	; (80162e8 <prvHeapInit+0xc4>)
 80162bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80162c0:	601a      	str	r2, [r3, #0]
}
 80162c2:	bf00      	nop
 80162c4:	3714      	adds	r7, #20
 80162c6:	46bd      	mov	sp, r7
 80162c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162cc:	4770      	bx	lr
 80162ce:	bf00      	nop
 80162d0:	000186a0 	.word	0x000186a0
 80162d4:	2400bfc8 	.word	0x2400bfc8
 80162d8:	24024668 	.word	0x24024668
 80162dc:	24024670 	.word	0x24024670
 80162e0:	24024678 	.word	0x24024678
 80162e4:	24024674 	.word	0x24024674
 80162e8:	24024684 	.word	0x24024684

080162ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80162ec:	b480      	push	{r7}
 80162ee:	b085      	sub	sp, #20
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80162f4:	4b28      	ldr	r3, [pc, #160]	; (8016398 <prvInsertBlockIntoFreeList+0xac>)
 80162f6:	60fb      	str	r3, [r7, #12]
 80162f8:	e002      	b.n	8016300 <prvInsertBlockIntoFreeList+0x14>
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	60fb      	str	r3, [r7, #12]
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	687a      	ldr	r2, [r7, #4]
 8016306:	429a      	cmp	r2, r3
 8016308:	d8f7      	bhi.n	80162fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	685b      	ldr	r3, [r3, #4]
 8016312:	68ba      	ldr	r2, [r7, #8]
 8016314:	4413      	add	r3, r2
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	429a      	cmp	r2, r3
 801631a:	d108      	bne.n	801632e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	685a      	ldr	r2, [r3, #4]
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	441a      	add	r2, r3
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	68ba      	ldr	r2, [r7, #8]
 8016338:	441a      	add	r2, r3
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	429a      	cmp	r2, r3
 8016340:	d118      	bne.n	8016374 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	681a      	ldr	r2, [r3, #0]
 8016346:	4b15      	ldr	r3, [pc, #84]	; (801639c <prvInsertBlockIntoFreeList+0xb0>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	429a      	cmp	r2, r3
 801634c:	d00d      	beq.n	801636a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	685a      	ldr	r2, [r3, #4]
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	685b      	ldr	r3, [r3, #4]
 8016358:	441a      	add	r2, r3
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	681a      	ldr	r2, [r3, #0]
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	601a      	str	r2, [r3, #0]
 8016368:	e008      	b.n	801637c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801636a:	4b0c      	ldr	r3, [pc, #48]	; (801639c <prvInsertBlockIntoFreeList+0xb0>)
 801636c:	681a      	ldr	r2, [r3, #0]
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	601a      	str	r2, [r3, #0]
 8016372:	e003      	b.n	801637c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	681a      	ldr	r2, [r3, #0]
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801637c:	68fa      	ldr	r2, [r7, #12]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	429a      	cmp	r2, r3
 8016382:	d002      	beq.n	801638a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	687a      	ldr	r2, [r7, #4]
 8016388:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801638a:	bf00      	nop
 801638c:	3714      	adds	r7, #20
 801638e:	46bd      	mov	sp, r7
 8016390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016394:	4770      	bx	lr
 8016396:	bf00      	nop
 8016398:	24024668 	.word	0x24024668
 801639c:	24024670 	.word	0x24024670

080163a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80163a0:	b480      	push	{r7}
 80163a2:	b083      	sub	sp, #12
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f103 0208 	add.w	r2, r3, #8
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	f04f 32ff 	mov.w	r2, #4294967295
 80163b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	f103 0208 	add.w	r2, r3, #8
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f103 0208 	add.w	r2, r3, #8
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	2200      	movs	r2, #0
 80163d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80163d4:	bf00      	nop
 80163d6:	370c      	adds	r7, #12
 80163d8:	46bd      	mov	sp, r7
 80163da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163de:	4770      	bx	lr

080163e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80163e0:	b480      	push	{r7}
 80163e2:	b083      	sub	sp, #12
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2200      	movs	r2, #0
 80163ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80163ee:	bf00      	nop
 80163f0:	370c      	adds	r7, #12
 80163f2:	46bd      	mov	sp, r7
 80163f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f8:	4770      	bx	lr

080163fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80163fa:	b480      	push	{r7}
 80163fc:	b085      	sub	sp, #20
 80163fe:	af00      	add	r7, sp, #0
 8016400:	6078      	str	r0, [r7, #4]
 8016402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801640a:	683b      	ldr	r3, [r7, #0]
 801640c:	68fa      	ldr	r2, [r7, #12]
 801640e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	689a      	ldr	r2, [r3, #8]
 8016414:	683b      	ldr	r3, [r7, #0]
 8016416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	689b      	ldr	r3, [r3, #8]
 801641c:	683a      	ldr	r2, [r7, #0]
 801641e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	683a      	ldr	r2, [r7, #0]
 8016424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	687a      	ldr	r2, [r7, #4]
 801642a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	1c5a      	adds	r2, r3, #1
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	601a      	str	r2, [r3, #0]
}
 8016436:	bf00      	nop
 8016438:	3714      	adds	r7, #20
 801643a:	46bd      	mov	sp, r7
 801643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016440:	4770      	bx	lr

08016442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016442:	b480      	push	{r7}
 8016444:	b085      	sub	sp, #20
 8016446:	af00      	add	r7, sp, #0
 8016448:	6078      	str	r0, [r7, #4]
 801644a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801644c:	683b      	ldr	r3, [r7, #0]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016452:	68bb      	ldr	r3, [r7, #8]
 8016454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016458:	d103      	bne.n	8016462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	691b      	ldr	r3, [r3, #16]
 801645e:	60fb      	str	r3, [r7, #12]
 8016460:	e00c      	b.n	801647c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	3308      	adds	r3, #8
 8016466:	60fb      	str	r3, [r7, #12]
 8016468:	e002      	b.n	8016470 <vListInsert+0x2e>
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	685b      	ldr	r3, [r3, #4]
 801646e:	60fb      	str	r3, [r7, #12]
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	685b      	ldr	r3, [r3, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	68ba      	ldr	r2, [r7, #8]
 8016478:	429a      	cmp	r2, r3
 801647a:	d2f6      	bcs.n	801646a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	685a      	ldr	r2, [r3, #4]
 8016480:	683b      	ldr	r3, [r7, #0]
 8016482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	685b      	ldr	r3, [r3, #4]
 8016488:	683a      	ldr	r2, [r7, #0]
 801648a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801648c:	683b      	ldr	r3, [r7, #0]
 801648e:	68fa      	ldr	r2, [r7, #12]
 8016490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	683a      	ldr	r2, [r7, #0]
 8016496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016498:	683b      	ldr	r3, [r7, #0]
 801649a:	687a      	ldr	r2, [r7, #4]
 801649c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	1c5a      	adds	r2, r3, #1
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	601a      	str	r2, [r3, #0]
}
 80164a8:	bf00      	nop
 80164aa:	3714      	adds	r7, #20
 80164ac:	46bd      	mov	sp, r7
 80164ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b2:	4770      	bx	lr

080164b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80164b4:	b480      	push	{r7}
 80164b6:	b085      	sub	sp, #20
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	691b      	ldr	r3, [r3, #16]
 80164c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	687a      	ldr	r2, [r7, #4]
 80164c8:	6892      	ldr	r2, [r2, #8]
 80164ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	689b      	ldr	r3, [r3, #8]
 80164d0:	687a      	ldr	r2, [r7, #4]
 80164d2:	6852      	ldr	r2, [r2, #4]
 80164d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	687a      	ldr	r2, [r7, #4]
 80164dc:	429a      	cmp	r2, r3
 80164de:	d103      	bne.n	80164e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	689a      	ldr	r2, [r3, #8]
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	2200      	movs	r2, #0
 80164ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	1e5a      	subs	r2, r3, #1
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	681b      	ldr	r3, [r3, #0]
}
 80164fc:	4618      	mov	r0, r3
 80164fe:	3714      	adds	r7, #20
 8016500:	46bd      	mov	sp, r7
 8016502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016506:	4770      	bx	lr

08016508 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016508:	b480      	push	{r7}
 801650a:	b085      	sub	sp, #20
 801650c:	af00      	add	r7, sp, #0
 801650e:	60f8      	str	r0, [r7, #12]
 8016510:	60b9      	str	r1, [r7, #8]
 8016512:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	3b04      	subs	r3, #4
 8016518:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	3b04      	subs	r3, #4
 8016526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016528:	68bb      	ldr	r3, [r7, #8]
 801652a:	f023 0201 	bic.w	r2, r3, #1
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	3b04      	subs	r3, #4
 8016536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016538:	4a0c      	ldr	r2, [pc, #48]	; (801656c <pxPortInitialiseStack+0x64>)
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	3b14      	subs	r3, #20
 8016542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	3b04      	subs	r3, #4
 801654e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	f06f 0202 	mvn.w	r2, #2
 8016556:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	3b20      	subs	r3, #32
 801655c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801655e:	68fb      	ldr	r3, [r7, #12]
}
 8016560:	4618      	mov	r0, r3
 8016562:	3714      	adds	r7, #20
 8016564:	46bd      	mov	sp, r7
 8016566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656a:	4770      	bx	lr
 801656c:	08016571 	.word	0x08016571

08016570 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016570:	b480      	push	{r7}
 8016572:	b085      	sub	sp, #20
 8016574:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016576:	2300      	movs	r3, #0
 8016578:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801657a:	4b12      	ldr	r3, [pc, #72]	; (80165c4 <prvTaskExitError+0x54>)
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016582:	d00a      	beq.n	801659a <prvTaskExitError+0x2a>
	__asm volatile
 8016584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016588:	f383 8811 	msr	BASEPRI, r3
 801658c:	f3bf 8f6f 	isb	sy
 8016590:	f3bf 8f4f 	dsb	sy
 8016594:	60fb      	str	r3, [r7, #12]
}
 8016596:	bf00      	nop
 8016598:	e7fe      	b.n	8016598 <prvTaskExitError+0x28>
	__asm volatile
 801659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801659e:	f383 8811 	msr	BASEPRI, r3
 80165a2:	f3bf 8f6f 	isb	sy
 80165a6:	f3bf 8f4f 	dsb	sy
 80165aa:	60bb      	str	r3, [r7, #8]
}
 80165ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80165ae:	bf00      	nop
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d0fc      	beq.n	80165b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80165b6:	bf00      	nop
 80165b8:	bf00      	nop
 80165ba:	3714      	adds	r7, #20
 80165bc:	46bd      	mov	sp, r7
 80165be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c2:	4770      	bx	lr
 80165c4:	24000064 	.word	0x24000064
	...

080165d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80165d0:	4b07      	ldr	r3, [pc, #28]	; (80165f0 <pxCurrentTCBConst2>)
 80165d2:	6819      	ldr	r1, [r3, #0]
 80165d4:	6808      	ldr	r0, [r1, #0]
 80165d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165da:	f380 8809 	msr	PSP, r0
 80165de:	f3bf 8f6f 	isb	sy
 80165e2:	f04f 0000 	mov.w	r0, #0
 80165e6:	f380 8811 	msr	BASEPRI, r0
 80165ea:	4770      	bx	lr
 80165ec:	f3af 8000 	nop.w

080165f0 <pxCurrentTCBConst2>:
 80165f0:	24024690 	.word	0x24024690
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80165f4:	bf00      	nop
 80165f6:	bf00      	nop

080165f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80165f8:	4808      	ldr	r0, [pc, #32]	; (801661c <prvPortStartFirstTask+0x24>)
 80165fa:	6800      	ldr	r0, [r0, #0]
 80165fc:	6800      	ldr	r0, [r0, #0]
 80165fe:	f380 8808 	msr	MSP, r0
 8016602:	f04f 0000 	mov.w	r0, #0
 8016606:	f380 8814 	msr	CONTROL, r0
 801660a:	b662      	cpsie	i
 801660c:	b661      	cpsie	f
 801660e:	f3bf 8f4f 	dsb	sy
 8016612:	f3bf 8f6f 	isb	sy
 8016616:	df00      	svc	0
 8016618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801661a:	bf00      	nop
 801661c:	e000ed08 	.word	0xe000ed08

08016620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b086      	sub	sp, #24
 8016624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016626:	4b46      	ldr	r3, [pc, #280]	; (8016740 <xPortStartScheduler+0x120>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	4a46      	ldr	r2, [pc, #280]	; (8016744 <xPortStartScheduler+0x124>)
 801662c:	4293      	cmp	r3, r2
 801662e:	d10a      	bne.n	8016646 <xPortStartScheduler+0x26>
	__asm volatile
 8016630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016634:	f383 8811 	msr	BASEPRI, r3
 8016638:	f3bf 8f6f 	isb	sy
 801663c:	f3bf 8f4f 	dsb	sy
 8016640:	613b      	str	r3, [r7, #16]
}
 8016642:	bf00      	nop
 8016644:	e7fe      	b.n	8016644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016646:	4b3e      	ldr	r3, [pc, #248]	; (8016740 <xPortStartScheduler+0x120>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	4a3f      	ldr	r2, [pc, #252]	; (8016748 <xPortStartScheduler+0x128>)
 801664c:	4293      	cmp	r3, r2
 801664e:	d10a      	bne.n	8016666 <xPortStartScheduler+0x46>
	__asm volatile
 8016650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016654:	f383 8811 	msr	BASEPRI, r3
 8016658:	f3bf 8f6f 	isb	sy
 801665c:	f3bf 8f4f 	dsb	sy
 8016660:	60fb      	str	r3, [r7, #12]
}
 8016662:	bf00      	nop
 8016664:	e7fe      	b.n	8016664 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016666:	4b39      	ldr	r3, [pc, #228]	; (801674c <xPortStartScheduler+0x12c>)
 8016668:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	781b      	ldrb	r3, [r3, #0]
 801666e:	b2db      	uxtb	r3, r3
 8016670:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016672:	697b      	ldr	r3, [r7, #20]
 8016674:	22ff      	movs	r2, #255	; 0xff
 8016676:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016678:	697b      	ldr	r3, [r7, #20]
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	b2db      	uxtb	r3, r3
 801667e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016680:	78fb      	ldrb	r3, [r7, #3]
 8016682:	b2db      	uxtb	r3, r3
 8016684:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016688:	b2da      	uxtb	r2, r3
 801668a:	4b31      	ldr	r3, [pc, #196]	; (8016750 <xPortStartScheduler+0x130>)
 801668c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801668e:	4b31      	ldr	r3, [pc, #196]	; (8016754 <xPortStartScheduler+0x134>)
 8016690:	2207      	movs	r2, #7
 8016692:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016694:	e009      	b.n	80166aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016696:	4b2f      	ldr	r3, [pc, #188]	; (8016754 <xPortStartScheduler+0x134>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	3b01      	subs	r3, #1
 801669c:	4a2d      	ldr	r2, [pc, #180]	; (8016754 <xPortStartScheduler+0x134>)
 801669e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80166a0:	78fb      	ldrb	r3, [r7, #3]
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	005b      	lsls	r3, r3, #1
 80166a6:	b2db      	uxtb	r3, r3
 80166a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80166aa:	78fb      	ldrb	r3, [r7, #3]
 80166ac:	b2db      	uxtb	r3, r3
 80166ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80166b2:	2b80      	cmp	r3, #128	; 0x80
 80166b4:	d0ef      	beq.n	8016696 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80166b6:	4b27      	ldr	r3, [pc, #156]	; (8016754 <xPortStartScheduler+0x134>)
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	f1c3 0307 	rsb	r3, r3, #7
 80166be:	2b04      	cmp	r3, #4
 80166c0:	d00a      	beq.n	80166d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80166c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c6:	f383 8811 	msr	BASEPRI, r3
 80166ca:	f3bf 8f6f 	isb	sy
 80166ce:	f3bf 8f4f 	dsb	sy
 80166d2:	60bb      	str	r3, [r7, #8]
}
 80166d4:	bf00      	nop
 80166d6:	e7fe      	b.n	80166d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80166d8:	4b1e      	ldr	r3, [pc, #120]	; (8016754 <xPortStartScheduler+0x134>)
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	021b      	lsls	r3, r3, #8
 80166de:	4a1d      	ldr	r2, [pc, #116]	; (8016754 <xPortStartScheduler+0x134>)
 80166e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80166e2:	4b1c      	ldr	r3, [pc, #112]	; (8016754 <xPortStartScheduler+0x134>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80166ea:	4a1a      	ldr	r2, [pc, #104]	; (8016754 <xPortStartScheduler+0x134>)
 80166ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	b2da      	uxtb	r2, r3
 80166f2:	697b      	ldr	r3, [r7, #20]
 80166f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80166f6:	4b18      	ldr	r3, [pc, #96]	; (8016758 <xPortStartScheduler+0x138>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	4a17      	ldr	r2, [pc, #92]	; (8016758 <xPortStartScheduler+0x138>)
 80166fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016702:	4b15      	ldr	r3, [pc, #84]	; (8016758 <xPortStartScheduler+0x138>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	4a14      	ldr	r2, [pc, #80]	; (8016758 <xPortStartScheduler+0x138>)
 8016708:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801670c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801670e:	f000 f8dd 	bl	80168cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016712:	4b12      	ldr	r3, [pc, #72]	; (801675c <xPortStartScheduler+0x13c>)
 8016714:	2200      	movs	r2, #0
 8016716:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016718:	f000 f8fc 	bl	8016914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801671c:	4b10      	ldr	r3, [pc, #64]	; (8016760 <xPortStartScheduler+0x140>)
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	4a0f      	ldr	r2, [pc, #60]	; (8016760 <xPortStartScheduler+0x140>)
 8016722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016726:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016728:	f7ff ff66 	bl	80165f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801672c:	f001 fdfa 	bl	8018324 <vTaskSwitchContext>
	prvTaskExitError();
 8016730:	f7ff ff1e 	bl	8016570 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016734:	2300      	movs	r3, #0
}
 8016736:	4618      	mov	r0, r3
 8016738:	3718      	adds	r7, #24
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}
 801673e:	bf00      	nop
 8016740:	e000ed00 	.word	0xe000ed00
 8016744:	410fc271 	.word	0x410fc271
 8016748:	410fc270 	.word	0x410fc270
 801674c:	e000e400 	.word	0xe000e400
 8016750:	24024688 	.word	0x24024688
 8016754:	2402468c 	.word	0x2402468c
 8016758:	e000ed20 	.word	0xe000ed20
 801675c:	24000064 	.word	0x24000064
 8016760:	e000ef34 	.word	0xe000ef34

08016764 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016764:	b480      	push	{r7}
 8016766:	b083      	sub	sp, #12
 8016768:	af00      	add	r7, sp, #0
	__asm volatile
 801676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801676e:	f383 8811 	msr	BASEPRI, r3
 8016772:	f3bf 8f6f 	isb	sy
 8016776:	f3bf 8f4f 	dsb	sy
 801677a:	607b      	str	r3, [r7, #4]
}
 801677c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801677e:	4b0f      	ldr	r3, [pc, #60]	; (80167bc <vPortEnterCritical+0x58>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	3301      	adds	r3, #1
 8016784:	4a0d      	ldr	r2, [pc, #52]	; (80167bc <vPortEnterCritical+0x58>)
 8016786:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016788:	4b0c      	ldr	r3, [pc, #48]	; (80167bc <vPortEnterCritical+0x58>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	2b01      	cmp	r3, #1
 801678e:	d10f      	bne.n	80167b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016790:	4b0b      	ldr	r3, [pc, #44]	; (80167c0 <vPortEnterCritical+0x5c>)
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	b2db      	uxtb	r3, r3
 8016796:	2b00      	cmp	r3, #0
 8016798:	d00a      	beq.n	80167b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801679e:	f383 8811 	msr	BASEPRI, r3
 80167a2:	f3bf 8f6f 	isb	sy
 80167a6:	f3bf 8f4f 	dsb	sy
 80167aa:	603b      	str	r3, [r7, #0]
}
 80167ac:	bf00      	nop
 80167ae:	e7fe      	b.n	80167ae <vPortEnterCritical+0x4a>
	}
}
 80167b0:	bf00      	nop
 80167b2:	370c      	adds	r7, #12
 80167b4:	46bd      	mov	sp, r7
 80167b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ba:	4770      	bx	lr
 80167bc:	24000064 	.word	0x24000064
 80167c0:	e000ed04 	.word	0xe000ed04

080167c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80167c4:	b480      	push	{r7}
 80167c6:	b083      	sub	sp, #12
 80167c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80167ca:	4b12      	ldr	r3, [pc, #72]	; (8016814 <vPortExitCritical+0x50>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d10a      	bne.n	80167e8 <vPortExitCritical+0x24>
	__asm volatile
 80167d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167d6:	f383 8811 	msr	BASEPRI, r3
 80167da:	f3bf 8f6f 	isb	sy
 80167de:	f3bf 8f4f 	dsb	sy
 80167e2:	607b      	str	r3, [r7, #4]
}
 80167e4:	bf00      	nop
 80167e6:	e7fe      	b.n	80167e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80167e8:	4b0a      	ldr	r3, [pc, #40]	; (8016814 <vPortExitCritical+0x50>)
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	3b01      	subs	r3, #1
 80167ee:	4a09      	ldr	r2, [pc, #36]	; (8016814 <vPortExitCritical+0x50>)
 80167f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80167f2:	4b08      	ldr	r3, [pc, #32]	; (8016814 <vPortExitCritical+0x50>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d105      	bne.n	8016806 <vPortExitCritical+0x42>
 80167fa:	2300      	movs	r3, #0
 80167fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016804:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016806:	bf00      	nop
 8016808:	370c      	adds	r7, #12
 801680a:	46bd      	mov	sp, r7
 801680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016810:	4770      	bx	lr
 8016812:	bf00      	nop
 8016814:	24000064 	.word	0x24000064
	...

08016820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016820:	f3ef 8009 	mrs	r0, PSP
 8016824:	f3bf 8f6f 	isb	sy
 8016828:	4b15      	ldr	r3, [pc, #84]	; (8016880 <pxCurrentTCBConst>)
 801682a:	681a      	ldr	r2, [r3, #0]
 801682c:	f01e 0f10 	tst.w	lr, #16
 8016830:	bf08      	it	eq
 8016832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801683a:	6010      	str	r0, [r2, #0]
 801683c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016844:	f380 8811 	msr	BASEPRI, r0
 8016848:	f3bf 8f4f 	dsb	sy
 801684c:	f3bf 8f6f 	isb	sy
 8016850:	f001 fd68 	bl	8018324 <vTaskSwitchContext>
 8016854:	f04f 0000 	mov.w	r0, #0
 8016858:	f380 8811 	msr	BASEPRI, r0
 801685c:	bc09      	pop	{r0, r3}
 801685e:	6819      	ldr	r1, [r3, #0]
 8016860:	6808      	ldr	r0, [r1, #0]
 8016862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016866:	f01e 0f10 	tst.w	lr, #16
 801686a:	bf08      	it	eq
 801686c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016870:	f380 8809 	msr	PSP, r0
 8016874:	f3bf 8f6f 	isb	sy
 8016878:	4770      	bx	lr
 801687a:	bf00      	nop
 801687c:	f3af 8000 	nop.w

08016880 <pxCurrentTCBConst>:
 8016880:	24024690 	.word	0x24024690
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016884:	bf00      	nop
 8016886:	bf00      	nop

08016888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b082      	sub	sp, #8
 801688c:	af00      	add	r7, sp, #0
	__asm volatile
 801688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016892:	f383 8811 	msr	BASEPRI, r3
 8016896:	f3bf 8f6f 	isb	sy
 801689a:	f3bf 8f4f 	dsb	sy
 801689e:	607b      	str	r3, [r7, #4]
}
 80168a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80168a2:	f001 fc47 	bl	8018134 <xTaskIncrementTick>
 80168a6:	4603      	mov	r3, r0
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d003      	beq.n	80168b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80168ac:	4b06      	ldr	r3, [pc, #24]	; (80168c8 <xPortSysTickHandler+0x40>)
 80168ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168b2:	601a      	str	r2, [r3, #0]
 80168b4:	2300      	movs	r3, #0
 80168b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	f383 8811 	msr	BASEPRI, r3
}
 80168be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80168c0:	bf00      	nop
 80168c2:	3708      	adds	r7, #8
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	e000ed04 	.word	0xe000ed04

080168cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80168cc:	b480      	push	{r7}
 80168ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80168d0:	4b0b      	ldr	r3, [pc, #44]	; (8016900 <vPortSetupTimerInterrupt+0x34>)
 80168d2:	2200      	movs	r2, #0
 80168d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80168d6:	4b0b      	ldr	r3, [pc, #44]	; (8016904 <vPortSetupTimerInterrupt+0x38>)
 80168d8:	2200      	movs	r2, #0
 80168da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80168dc:	4b0a      	ldr	r3, [pc, #40]	; (8016908 <vPortSetupTimerInterrupt+0x3c>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	4a0a      	ldr	r2, [pc, #40]	; (801690c <vPortSetupTimerInterrupt+0x40>)
 80168e2:	fba2 2303 	umull	r2, r3, r2, r3
 80168e6:	099b      	lsrs	r3, r3, #6
 80168e8:	4a09      	ldr	r2, [pc, #36]	; (8016910 <vPortSetupTimerInterrupt+0x44>)
 80168ea:	3b01      	subs	r3, #1
 80168ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80168ee:	4b04      	ldr	r3, [pc, #16]	; (8016900 <vPortSetupTimerInterrupt+0x34>)
 80168f0:	2207      	movs	r2, #7
 80168f2:	601a      	str	r2, [r3, #0]
}
 80168f4:	bf00      	nop
 80168f6:	46bd      	mov	sp, r7
 80168f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fc:	4770      	bx	lr
 80168fe:	bf00      	nop
 8016900:	e000e010 	.word	0xe000e010
 8016904:	e000e018 	.word	0xe000e018
 8016908:	24000054 	.word	0x24000054
 801690c:	10624dd3 	.word	0x10624dd3
 8016910:	e000e014 	.word	0xe000e014

08016914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016924 <vPortEnableVFP+0x10>
 8016918:	6801      	ldr	r1, [r0, #0]
 801691a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801691e:	6001      	str	r1, [r0, #0]
 8016920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016922:	bf00      	nop
 8016924:	e000ed88 	.word	0xe000ed88

08016928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016928:	b480      	push	{r7}
 801692a:	b085      	sub	sp, #20
 801692c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801692e:	f3ef 8305 	mrs	r3, IPSR
 8016932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	2b0f      	cmp	r3, #15
 8016938:	d914      	bls.n	8016964 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801693a:	4a17      	ldr	r2, [pc, #92]	; (8016998 <vPortValidateInterruptPriority+0x70>)
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	4413      	add	r3, r2
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016944:	4b15      	ldr	r3, [pc, #84]	; (801699c <vPortValidateInterruptPriority+0x74>)
 8016946:	781b      	ldrb	r3, [r3, #0]
 8016948:	7afa      	ldrb	r2, [r7, #11]
 801694a:	429a      	cmp	r2, r3
 801694c:	d20a      	bcs.n	8016964 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016952:	f383 8811 	msr	BASEPRI, r3
 8016956:	f3bf 8f6f 	isb	sy
 801695a:	f3bf 8f4f 	dsb	sy
 801695e:	607b      	str	r3, [r7, #4]
}
 8016960:	bf00      	nop
 8016962:	e7fe      	b.n	8016962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016964:	4b0e      	ldr	r3, [pc, #56]	; (80169a0 <vPortValidateInterruptPriority+0x78>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801696c:	4b0d      	ldr	r3, [pc, #52]	; (80169a4 <vPortValidateInterruptPriority+0x7c>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	429a      	cmp	r2, r3
 8016972:	d90a      	bls.n	801698a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016978:	f383 8811 	msr	BASEPRI, r3
 801697c:	f3bf 8f6f 	isb	sy
 8016980:	f3bf 8f4f 	dsb	sy
 8016984:	603b      	str	r3, [r7, #0]
}
 8016986:	bf00      	nop
 8016988:	e7fe      	b.n	8016988 <vPortValidateInterruptPriority+0x60>
	}
 801698a:	bf00      	nop
 801698c:	3714      	adds	r7, #20
 801698e:	46bd      	mov	sp, r7
 8016990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016994:	4770      	bx	lr
 8016996:	bf00      	nop
 8016998:	e000e3f0 	.word	0xe000e3f0
 801699c:	24024688 	.word	0x24024688
 80169a0:	e000ed0c 	.word	0xe000ed0c
 80169a4:	2402468c 	.word	0x2402468c

080169a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b084      	sub	sp, #16
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
 80169b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d10a      	bne.n	80169d2 <xQueueGenericReset+0x2a>
	__asm volatile
 80169bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169c0:	f383 8811 	msr	BASEPRI, r3
 80169c4:	f3bf 8f6f 	isb	sy
 80169c8:	f3bf 8f4f 	dsb	sy
 80169cc:	60bb      	str	r3, [r7, #8]
}
 80169ce:	bf00      	nop
 80169d0:	e7fe      	b.n	80169d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80169d2:	f7ff fec7 	bl	8016764 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	681a      	ldr	r2, [r3, #0]
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169de:	68f9      	ldr	r1, [r7, #12]
 80169e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80169e2:	fb01 f303 	mul.w	r3, r1, r3
 80169e6:	441a      	add	r2, r3
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	2200      	movs	r2, #0
 80169f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	681a      	ldr	r2, [r3, #0]
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	681a      	ldr	r2, [r3, #0]
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a02:	3b01      	subs	r3, #1
 8016a04:	68f9      	ldr	r1, [r7, #12]
 8016a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016a08:	fb01 f303 	mul.w	r3, r1, r3
 8016a0c:	441a      	add	r2, r3
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	22ff      	movs	r2, #255	; 0xff
 8016a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	22ff      	movs	r2, #255	; 0xff
 8016a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016a22:	683b      	ldr	r3, [r7, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d114      	bne.n	8016a52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	691b      	ldr	r3, [r3, #16]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d01a      	beq.n	8016a66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	3310      	adds	r3, #16
 8016a34:	4618      	mov	r0, r3
 8016a36:	f001 fd2d 	bl	8018494 <xTaskRemoveFromEventList>
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d012      	beq.n	8016a66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016a40:	4b0c      	ldr	r3, [pc, #48]	; (8016a74 <xQueueGenericReset+0xcc>)
 8016a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a46:	601a      	str	r2, [r3, #0]
 8016a48:	f3bf 8f4f 	dsb	sy
 8016a4c:	f3bf 8f6f 	isb	sy
 8016a50:	e009      	b.n	8016a66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	3310      	adds	r3, #16
 8016a56:	4618      	mov	r0, r3
 8016a58:	f7ff fca2 	bl	80163a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	3324      	adds	r3, #36	; 0x24
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7ff fc9d 	bl	80163a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016a66:	f7ff fead 	bl	80167c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016a6a:	2301      	movs	r3, #1
}
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	3710      	adds	r7, #16
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}
 8016a74:	e000ed04 	.word	0xe000ed04

08016a78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b08e      	sub	sp, #56	; 0x38
 8016a7c:	af02      	add	r7, sp, #8
 8016a7e:	60f8      	str	r0, [r7, #12]
 8016a80:	60b9      	str	r1, [r7, #8]
 8016a82:	607a      	str	r2, [r7, #4]
 8016a84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d10a      	bne.n	8016aa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a90:	f383 8811 	msr	BASEPRI, r3
 8016a94:	f3bf 8f6f 	isb	sy
 8016a98:	f3bf 8f4f 	dsb	sy
 8016a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016a9e:	bf00      	nop
 8016aa0:	e7fe      	b.n	8016aa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d10a      	bne.n	8016abe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aac:	f383 8811 	msr	BASEPRI, r3
 8016ab0:	f3bf 8f6f 	isb	sy
 8016ab4:	f3bf 8f4f 	dsb	sy
 8016ab8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016aba:	bf00      	nop
 8016abc:	e7fe      	b.n	8016abc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d002      	beq.n	8016aca <xQueueGenericCreateStatic+0x52>
 8016ac4:	68bb      	ldr	r3, [r7, #8]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d001      	beq.n	8016ace <xQueueGenericCreateStatic+0x56>
 8016aca:	2301      	movs	r3, #1
 8016acc:	e000      	b.n	8016ad0 <xQueueGenericCreateStatic+0x58>
 8016ace:	2300      	movs	r3, #0
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d10a      	bne.n	8016aea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad8:	f383 8811 	msr	BASEPRI, r3
 8016adc:	f3bf 8f6f 	isb	sy
 8016ae0:	f3bf 8f4f 	dsb	sy
 8016ae4:	623b      	str	r3, [r7, #32]
}
 8016ae6:	bf00      	nop
 8016ae8:	e7fe      	b.n	8016ae8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d102      	bne.n	8016af6 <xQueueGenericCreateStatic+0x7e>
 8016af0:	68bb      	ldr	r3, [r7, #8]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d101      	bne.n	8016afa <xQueueGenericCreateStatic+0x82>
 8016af6:	2301      	movs	r3, #1
 8016af8:	e000      	b.n	8016afc <xQueueGenericCreateStatic+0x84>
 8016afa:	2300      	movs	r3, #0
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d10a      	bne.n	8016b16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b04:	f383 8811 	msr	BASEPRI, r3
 8016b08:	f3bf 8f6f 	isb	sy
 8016b0c:	f3bf 8f4f 	dsb	sy
 8016b10:	61fb      	str	r3, [r7, #28]
}
 8016b12:	bf00      	nop
 8016b14:	e7fe      	b.n	8016b14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016b16:	2350      	movs	r3, #80	; 0x50
 8016b18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016b1a:	697b      	ldr	r3, [r7, #20]
 8016b1c:	2b50      	cmp	r3, #80	; 0x50
 8016b1e:	d00a      	beq.n	8016b36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b24:	f383 8811 	msr	BASEPRI, r3
 8016b28:	f3bf 8f6f 	isb	sy
 8016b2c:	f3bf 8f4f 	dsb	sy
 8016b30:	61bb      	str	r3, [r7, #24]
}
 8016b32:	bf00      	nop
 8016b34:	e7fe      	b.n	8016b34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016b36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d00d      	beq.n	8016b5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b44:	2201      	movs	r2, #1
 8016b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016b4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b50:	9300      	str	r3, [sp, #0]
 8016b52:	4613      	mov	r3, r2
 8016b54:	687a      	ldr	r2, [r7, #4]
 8016b56:	68b9      	ldr	r1, [r7, #8]
 8016b58:	68f8      	ldr	r0, [r7, #12]
 8016b5a:	f000 f83f 	bl	8016bdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016b60:	4618      	mov	r0, r3
 8016b62:	3730      	adds	r7, #48	; 0x30
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}

08016b68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b08a      	sub	sp, #40	; 0x28
 8016b6c:	af02      	add	r7, sp, #8
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	4613      	mov	r3, r2
 8016b74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d10a      	bne.n	8016b92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8016b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b80:	f383 8811 	msr	BASEPRI, r3
 8016b84:	f3bf 8f6f 	isb	sy
 8016b88:	f3bf 8f4f 	dsb	sy
 8016b8c:	613b      	str	r3, [r7, #16]
}
 8016b8e:	bf00      	nop
 8016b90:	e7fe      	b.n	8016b90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	68ba      	ldr	r2, [r7, #8]
 8016b96:	fb02 f303 	mul.w	r3, r2, r3
 8016b9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016b9c:	69fb      	ldr	r3, [r7, #28]
 8016b9e:	3350      	adds	r3, #80	; 0x50
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f7ff fa11 	bl	8015fc8 <pvPortMalloc>
 8016ba6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016ba8:	69bb      	ldr	r3, [r7, #24]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d011      	beq.n	8016bd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016bae:	69bb      	ldr	r3, [r7, #24]
 8016bb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016bb2:	697b      	ldr	r3, [r7, #20]
 8016bb4:	3350      	adds	r3, #80	; 0x50
 8016bb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016bb8:	69bb      	ldr	r3, [r7, #24]
 8016bba:	2200      	movs	r2, #0
 8016bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016bc0:	79fa      	ldrb	r2, [r7, #7]
 8016bc2:	69bb      	ldr	r3, [r7, #24]
 8016bc4:	9300      	str	r3, [sp, #0]
 8016bc6:	4613      	mov	r3, r2
 8016bc8:	697a      	ldr	r2, [r7, #20]
 8016bca:	68b9      	ldr	r1, [r7, #8]
 8016bcc:	68f8      	ldr	r0, [r7, #12]
 8016bce:	f000 f805 	bl	8016bdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016bd2:	69bb      	ldr	r3, [r7, #24]
	}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3720      	adds	r7, #32
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b084      	sub	sp, #16
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	60f8      	str	r0, [r7, #12]
 8016be4:	60b9      	str	r1, [r7, #8]
 8016be6:	607a      	str	r2, [r7, #4]
 8016be8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d103      	bne.n	8016bf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016bf0:	69bb      	ldr	r3, [r7, #24]
 8016bf2:	69ba      	ldr	r2, [r7, #24]
 8016bf4:	601a      	str	r2, [r3, #0]
 8016bf6:	e002      	b.n	8016bfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016bf8:	69bb      	ldr	r3, [r7, #24]
 8016bfa:	687a      	ldr	r2, [r7, #4]
 8016bfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016bfe:	69bb      	ldr	r3, [r7, #24]
 8016c00:	68fa      	ldr	r2, [r7, #12]
 8016c02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016c04:	69bb      	ldr	r3, [r7, #24]
 8016c06:	68ba      	ldr	r2, [r7, #8]
 8016c08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c0a:	2101      	movs	r1, #1
 8016c0c:	69b8      	ldr	r0, [r7, #24]
 8016c0e:	f7ff fecb 	bl	80169a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016c12:	69bb      	ldr	r3, [r7, #24]
 8016c14:	78fa      	ldrb	r2, [r7, #3]
 8016c16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016c1a:	bf00      	nop
 8016c1c:	3710      	adds	r7, #16
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}

08016c22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016c22:	b580      	push	{r7, lr}
 8016c24:	b082      	sub	sp, #8
 8016c26:	af00      	add	r7, sp, #0
 8016c28:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d00e      	beq.n	8016c4e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2200      	movs	r2, #0
 8016c34:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2200      	movs	r2, #0
 8016c40:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016c42:	2300      	movs	r3, #0
 8016c44:	2200      	movs	r2, #0
 8016c46:	2100      	movs	r1, #0
 8016c48:	6878      	ldr	r0, [r7, #4]
 8016c4a:	f000 f90b 	bl	8016e64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016c4e:	bf00      	nop
 8016c50:	3708      	adds	r7, #8
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}

08016c56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016c56:	b580      	push	{r7, lr}
 8016c58:	b086      	sub	sp, #24
 8016c5a:	af00      	add	r7, sp, #0
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016c60:	2301      	movs	r3, #1
 8016c62:	617b      	str	r3, [r7, #20]
 8016c64:	2300      	movs	r3, #0
 8016c66:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016c68:	79fb      	ldrb	r3, [r7, #7]
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	6939      	ldr	r1, [r7, #16]
 8016c6e:	6978      	ldr	r0, [r7, #20]
 8016c70:	f7ff ff7a 	bl	8016b68 <xQueueGenericCreate>
 8016c74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016c76:	68f8      	ldr	r0, [r7, #12]
 8016c78:	f7ff ffd3 	bl	8016c22 <prvInitialiseMutex>

		return xNewQueue;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
	}
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3718      	adds	r7, #24
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}

08016c86 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016c86:	b580      	push	{r7, lr}
 8016c88:	b088      	sub	sp, #32
 8016c8a:	af02      	add	r7, sp, #8
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	6039      	str	r1, [r7, #0]
 8016c90:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016c92:	2301      	movs	r3, #1
 8016c94:	617b      	str	r3, [r7, #20]
 8016c96:	2300      	movs	r3, #0
 8016c98:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016c9a:	79fb      	ldrb	r3, [r7, #7]
 8016c9c:	9300      	str	r3, [sp, #0]
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	6939      	ldr	r1, [r7, #16]
 8016ca4:	6978      	ldr	r0, [r7, #20]
 8016ca6:	f7ff fee7 	bl	8016a78 <xQueueGenericCreateStatic>
 8016caa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016cac:	68f8      	ldr	r0, [r7, #12]
 8016cae:	f7ff ffb8 	bl	8016c22 <prvInitialiseMutex>

		return xNewQueue;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
	}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3718      	adds	r7, #24
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}

08016cbc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016cbc:	b590      	push	{r4, r7, lr}
 8016cbe:	b087      	sub	sp, #28
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d10a      	bne.n	8016ce4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8016cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cd2:	f383 8811 	msr	BASEPRI, r3
 8016cd6:	f3bf 8f6f 	isb	sy
 8016cda:	f3bf 8f4f 	dsb	sy
 8016cde:	60fb      	str	r3, [r7, #12]
}
 8016ce0:	bf00      	nop
 8016ce2:	e7fe      	b.n	8016ce2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016ce4:	693b      	ldr	r3, [r7, #16]
 8016ce6:	689c      	ldr	r4, [r3, #8]
 8016ce8:	f001 fd94 	bl	8018814 <xTaskGetCurrentTaskHandle>
 8016cec:	4603      	mov	r3, r0
 8016cee:	429c      	cmp	r4, r3
 8016cf0:	d111      	bne.n	8016d16 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016cf2:	693b      	ldr	r3, [r7, #16]
 8016cf4:	68db      	ldr	r3, [r3, #12]
 8016cf6:	1e5a      	subs	r2, r3, #1
 8016cf8:	693b      	ldr	r3, [r7, #16]
 8016cfa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	68db      	ldr	r3, [r3, #12]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d105      	bne.n	8016d10 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016d04:	2300      	movs	r3, #0
 8016d06:	2200      	movs	r2, #0
 8016d08:	2100      	movs	r1, #0
 8016d0a:	6938      	ldr	r0, [r7, #16]
 8016d0c:	f000 f8aa 	bl	8016e64 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016d10:	2301      	movs	r3, #1
 8016d12:	617b      	str	r3, [r7, #20]
 8016d14:	e001      	b.n	8016d1a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016d16:	2300      	movs	r3, #0
 8016d18:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016d1a:	697b      	ldr	r3, [r7, #20]
	}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	371c      	adds	r7, #28
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd90      	pop	{r4, r7, pc}

08016d24 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016d24:	b590      	push	{r4, r7, lr}
 8016d26:	b087      	sub	sp, #28
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
 8016d2c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d10a      	bne.n	8016d4e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8016d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d3c:	f383 8811 	msr	BASEPRI, r3
 8016d40:	f3bf 8f6f 	isb	sy
 8016d44:	f3bf 8f4f 	dsb	sy
 8016d48:	60fb      	str	r3, [r7, #12]
}
 8016d4a:	bf00      	nop
 8016d4c:	e7fe      	b.n	8016d4c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	689c      	ldr	r4, [r3, #8]
 8016d52:	f001 fd5f 	bl	8018814 <xTaskGetCurrentTaskHandle>
 8016d56:	4603      	mov	r3, r0
 8016d58:	429c      	cmp	r4, r3
 8016d5a:	d107      	bne.n	8016d6c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016d5c:	693b      	ldr	r3, [r7, #16]
 8016d5e:	68db      	ldr	r3, [r3, #12]
 8016d60:	1c5a      	adds	r2, r3, #1
 8016d62:	693b      	ldr	r3, [r7, #16]
 8016d64:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016d66:	2301      	movs	r3, #1
 8016d68:	617b      	str	r3, [r7, #20]
 8016d6a:	e00c      	b.n	8016d86 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8016d6c:	6839      	ldr	r1, [r7, #0]
 8016d6e:	6938      	ldr	r0, [r7, #16]
 8016d70:	f000 fb7e 	bl	8017470 <xQueueSemaphoreTake>
 8016d74:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016d76:	697b      	ldr	r3, [r7, #20]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d004      	beq.n	8016d86 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016d7c:	693b      	ldr	r3, [r7, #16]
 8016d7e:	68db      	ldr	r3, [r3, #12]
 8016d80:	1c5a      	adds	r2, r3, #1
 8016d82:	693b      	ldr	r3, [r7, #16]
 8016d84:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016d86:	697b      	ldr	r3, [r7, #20]
	}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	371c      	adds	r7, #28
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd90      	pop	{r4, r7, pc}

08016d90 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b08a      	sub	sp, #40	; 0x28
 8016d94:	af02      	add	r7, sp, #8
 8016d96:	60f8      	str	r0, [r7, #12]
 8016d98:	60b9      	str	r1, [r7, #8]
 8016d9a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d10a      	bne.n	8016db8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8016da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016da6:	f383 8811 	msr	BASEPRI, r3
 8016daa:	f3bf 8f6f 	isb	sy
 8016dae:	f3bf 8f4f 	dsb	sy
 8016db2:	61bb      	str	r3, [r7, #24]
}
 8016db4:	bf00      	nop
 8016db6:	e7fe      	b.n	8016db6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016db8:	68ba      	ldr	r2, [r7, #8]
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	429a      	cmp	r2, r3
 8016dbe:	d90a      	bls.n	8016dd6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8016dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc4:	f383 8811 	msr	BASEPRI, r3
 8016dc8:	f3bf 8f6f 	isb	sy
 8016dcc:	f3bf 8f4f 	dsb	sy
 8016dd0:	617b      	str	r3, [r7, #20]
}
 8016dd2:	bf00      	nop
 8016dd4:	e7fe      	b.n	8016dd4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016dd6:	2302      	movs	r3, #2
 8016dd8:	9300      	str	r3, [sp, #0]
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	2200      	movs	r2, #0
 8016dde:	2100      	movs	r1, #0
 8016de0:	68f8      	ldr	r0, [r7, #12]
 8016de2:	f7ff fe49 	bl	8016a78 <xQueueGenericCreateStatic>
 8016de6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016de8:	69fb      	ldr	r3, [r7, #28]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d002      	beq.n	8016df4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016dee:	69fb      	ldr	r3, [r7, #28]
 8016df0:	68ba      	ldr	r2, [r7, #8]
 8016df2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016df4:	69fb      	ldr	r3, [r7, #28]
	}
 8016df6:	4618      	mov	r0, r3
 8016df8:	3720      	adds	r7, #32
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}

08016dfe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016dfe:	b580      	push	{r7, lr}
 8016e00:	b086      	sub	sp, #24
 8016e02:	af00      	add	r7, sp, #0
 8016e04:	6078      	str	r0, [r7, #4]
 8016e06:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d10a      	bne.n	8016e24 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8016e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e12:	f383 8811 	msr	BASEPRI, r3
 8016e16:	f3bf 8f6f 	isb	sy
 8016e1a:	f3bf 8f4f 	dsb	sy
 8016e1e:	613b      	str	r3, [r7, #16]
}
 8016e20:	bf00      	nop
 8016e22:	e7fe      	b.n	8016e22 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016e24:	683a      	ldr	r2, [r7, #0]
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	d90a      	bls.n	8016e42 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8016e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e30:	f383 8811 	msr	BASEPRI, r3
 8016e34:	f3bf 8f6f 	isb	sy
 8016e38:	f3bf 8f4f 	dsb	sy
 8016e3c:	60fb      	str	r3, [r7, #12]
}
 8016e3e:	bf00      	nop
 8016e40:	e7fe      	b.n	8016e40 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016e42:	2202      	movs	r2, #2
 8016e44:	2100      	movs	r1, #0
 8016e46:	6878      	ldr	r0, [r7, #4]
 8016e48:	f7ff fe8e 	bl	8016b68 <xQueueGenericCreate>
 8016e4c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016e4e:	697b      	ldr	r3, [r7, #20]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d002      	beq.n	8016e5a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016e54:	697b      	ldr	r3, [r7, #20]
 8016e56:	683a      	ldr	r2, [r7, #0]
 8016e58:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016e5a:	697b      	ldr	r3, [r7, #20]
	}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3718      	adds	r7, #24
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}

08016e64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b08e      	sub	sp, #56	; 0x38
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	60f8      	str	r0, [r7, #12]
 8016e6c:	60b9      	str	r1, [r7, #8]
 8016e6e:	607a      	str	r2, [r7, #4]
 8016e70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016e72:	2300      	movs	r3, #0
 8016e74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d10a      	bne.n	8016e96 <xQueueGenericSend+0x32>
	__asm volatile
 8016e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e84:	f383 8811 	msr	BASEPRI, r3
 8016e88:	f3bf 8f6f 	isb	sy
 8016e8c:	f3bf 8f4f 	dsb	sy
 8016e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016e92:	bf00      	nop
 8016e94:	e7fe      	b.n	8016e94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e96:	68bb      	ldr	r3, [r7, #8]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d103      	bne.n	8016ea4 <xQueueGenericSend+0x40>
 8016e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d101      	bne.n	8016ea8 <xQueueGenericSend+0x44>
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	e000      	b.n	8016eaa <xQueueGenericSend+0x46>
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d10a      	bne.n	8016ec4 <xQueueGenericSend+0x60>
	__asm volatile
 8016eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb2:	f383 8811 	msr	BASEPRI, r3
 8016eb6:	f3bf 8f6f 	isb	sy
 8016eba:	f3bf 8f4f 	dsb	sy
 8016ebe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016ec0:	bf00      	nop
 8016ec2:	e7fe      	b.n	8016ec2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016ec4:	683b      	ldr	r3, [r7, #0]
 8016ec6:	2b02      	cmp	r3, #2
 8016ec8:	d103      	bne.n	8016ed2 <xQueueGenericSend+0x6e>
 8016eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ece:	2b01      	cmp	r3, #1
 8016ed0:	d101      	bne.n	8016ed6 <xQueueGenericSend+0x72>
 8016ed2:	2301      	movs	r3, #1
 8016ed4:	e000      	b.n	8016ed8 <xQueueGenericSend+0x74>
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d10a      	bne.n	8016ef2 <xQueueGenericSend+0x8e>
	__asm volatile
 8016edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ee0:	f383 8811 	msr	BASEPRI, r3
 8016ee4:	f3bf 8f6f 	isb	sy
 8016ee8:	f3bf 8f4f 	dsb	sy
 8016eec:	623b      	str	r3, [r7, #32]
}
 8016eee:	bf00      	nop
 8016ef0:	e7fe      	b.n	8016ef0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016ef2:	f001 fc9f 	bl	8018834 <xTaskGetSchedulerState>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d102      	bne.n	8016f02 <xQueueGenericSend+0x9e>
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d101      	bne.n	8016f06 <xQueueGenericSend+0xa2>
 8016f02:	2301      	movs	r3, #1
 8016f04:	e000      	b.n	8016f08 <xQueueGenericSend+0xa4>
 8016f06:	2300      	movs	r3, #0
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d10a      	bne.n	8016f22 <xQueueGenericSend+0xbe>
	__asm volatile
 8016f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f10:	f383 8811 	msr	BASEPRI, r3
 8016f14:	f3bf 8f6f 	isb	sy
 8016f18:	f3bf 8f4f 	dsb	sy
 8016f1c:	61fb      	str	r3, [r7, #28]
}
 8016f1e:	bf00      	nop
 8016f20:	e7fe      	b.n	8016f20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016f22:	f7ff fc1f 	bl	8016764 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d302      	bcc.n	8016f38 <xQueueGenericSend+0xd4>
 8016f32:	683b      	ldr	r3, [r7, #0]
 8016f34:	2b02      	cmp	r3, #2
 8016f36:	d129      	bne.n	8016f8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f38:	683a      	ldr	r2, [r7, #0]
 8016f3a:	68b9      	ldr	r1, [r7, #8]
 8016f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f3e:	f000 fc5e 	bl	80177fe <prvCopyDataToQueue>
 8016f42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d010      	beq.n	8016f6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f4e:	3324      	adds	r3, #36	; 0x24
 8016f50:	4618      	mov	r0, r3
 8016f52:	f001 fa9f 	bl	8018494 <xTaskRemoveFromEventList>
 8016f56:	4603      	mov	r3, r0
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d013      	beq.n	8016f84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016f5c:	4b3f      	ldr	r3, [pc, #252]	; (801705c <xQueueGenericSend+0x1f8>)
 8016f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f62:	601a      	str	r2, [r3, #0]
 8016f64:	f3bf 8f4f 	dsb	sy
 8016f68:	f3bf 8f6f 	isb	sy
 8016f6c:	e00a      	b.n	8016f84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d007      	beq.n	8016f84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016f74:	4b39      	ldr	r3, [pc, #228]	; (801705c <xQueueGenericSend+0x1f8>)
 8016f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f7a:	601a      	str	r2, [r3, #0]
 8016f7c:	f3bf 8f4f 	dsb	sy
 8016f80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016f84:	f7ff fc1e 	bl	80167c4 <vPortExitCritical>
				return pdPASS;
 8016f88:	2301      	movs	r3, #1
 8016f8a:	e063      	b.n	8017054 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d103      	bne.n	8016f9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016f92:	f7ff fc17 	bl	80167c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016f96:	2300      	movs	r3, #0
 8016f98:	e05c      	b.n	8017054 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d106      	bne.n	8016fae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016fa0:	f107 0314 	add.w	r3, r7, #20
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f001 fad9 	bl	801855c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016faa:	2301      	movs	r3, #1
 8016fac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016fae:	f7ff fc09 	bl	80167c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016fb2:	f001 f803 	bl	8017fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016fb6:	f7ff fbd5 	bl	8016764 <vPortEnterCritical>
 8016fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016fc0:	b25b      	sxtb	r3, r3
 8016fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fc6:	d103      	bne.n	8016fd0 <xQueueGenericSend+0x16c>
 8016fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fca:	2200      	movs	r2, #0
 8016fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016fd6:	b25b      	sxtb	r3, r3
 8016fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fdc:	d103      	bne.n	8016fe6 <xQueueGenericSend+0x182>
 8016fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016fe6:	f7ff fbed 	bl	80167c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016fea:	1d3a      	adds	r2, r7, #4
 8016fec:	f107 0314 	add.w	r3, r7, #20
 8016ff0:	4611      	mov	r1, r2
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f001 fac8 	bl	8018588 <xTaskCheckForTimeOut>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d124      	bne.n	8017048 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017000:	f000 fcf5 	bl	80179ee <prvIsQueueFull>
 8017004:	4603      	mov	r3, r0
 8017006:	2b00      	cmp	r3, #0
 8017008:	d018      	beq.n	801703c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801700c:	3310      	adds	r3, #16
 801700e:	687a      	ldr	r2, [r7, #4]
 8017010:	4611      	mov	r1, r2
 8017012:	4618      	mov	r0, r3
 8017014:	f001 f9ee 	bl	80183f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801701a:	f000 fc80 	bl	801791e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801701e:	f000 ffdb 	bl	8017fd8 <xTaskResumeAll>
 8017022:	4603      	mov	r3, r0
 8017024:	2b00      	cmp	r3, #0
 8017026:	f47f af7c 	bne.w	8016f22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801702a:	4b0c      	ldr	r3, [pc, #48]	; (801705c <xQueueGenericSend+0x1f8>)
 801702c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017030:	601a      	str	r2, [r3, #0]
 8017032:	f3bf 8f4f 	dsb	sy
 8017036:	f3bf 8f6f 	isb	sy
 801703a:	e772      	b.n	8016f22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801703c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801703e:	f000 fc6e 	bl	801791e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017042:	f000 ffc9 	bl	8017fd8 <xTaskResumeAll>
 8017046:	e76c      	b.n	8016f22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801704a:	f000 fc68 	bl	801791e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801704e:	f000 ffc3 	bl	8017fd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017052:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017054:	4618      	mov	r0, r3
 8017056:	3738      	adds	r7, #56	; 0x38
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}
 801705c:	e000ed04 	.word	0xe000ed04

08017060 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b090      	sub	sp, #64	; 0x40
 8017064:	af00      	add	r7, sp, #0
 8017066:	60f8      	str	r0, [r7, #12]
 8017068:	60b9      	str	r1, [r7, #8]
 801706a:	607a      	str	r2, [r7, #4]
 801706c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017074:	2b00      	cmp	r3, #0
 8017076:	d10a      	bne.n	801708e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801707c:	f383 8811 	msr	BASEPRI, r3
 8017080:	f3bf 8f6f 	isb	sy
 8017084:	f3bf 8f4f 	dsb	sy
 8017088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801708a:	bf00      	nop
 801708c:	e7fe      	b.n	801708c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801708e:	68bb      	ldr	r3, [r7, #8]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d103      	bne.n	801709c <xQueueGenericSendFromISR+0x3c>
 8017094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017098:	2b00      	cmp	r3, #0
 801709a:	d101      	bne.n	80170a0 <xQueueGenericSendFromISR+0x40>
 801709c:	2301      	movs	r3, #1
 801709e:	e000      	b.n	80170a2 <xQueueGenericSendFromISR+0x42>
 80170a0:	2300      	movs	r3, #0
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d10a      	bne.n	80170bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80170a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170aa:	f383 8811 	msr	BASEPRI, r3
 80170ae:	f3bf 8f6f 	isb	sy
 80170b2:	f3bf 8f4f 	dsb	sy
 80170b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80170b8:	bf00      	nop
 80170ba:	e7fe      	b.n	80170ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	2b02      	cmp	r3, #2
 80170c0:	d103      	bne.n	80170ca <xQueueGenericSendFromISR+0x6a>
 80170c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170c6:	2b01      	cmp	r3, #1
 80170c8:	d101      	bne.n	80170ce <xQueueGenericSendFromISR+0x6e>
 80170ca:	2301      	movs	r3, #1
 80170cc:	e000      	b.n	80170d0 <xQueueGenericSendFromISR+0x70>
 80170ce:	2300      	movs	r3, #0
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d10a      	bne.n	80170ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80170d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170d8:	f383 8811 	msr	BASEPRI, r3
 80170dc:	f3bf 8f6f 	isb	sy
 80170e0:	f3bf 8f4f 	dsb	sy
 80170e4:	623b      	str	r3, [r7, #32]
}
 80170e6:	bf00      	nop
 80170e8:	e7fe      	b.n	80170e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80170ea:	f7ff fc1d 	bl	8016928 <vPortValidateInterruptPriority>
	__asm volatile
 80170ee:	f3ef 8211 	mrs	r2, BASEPRI
 80170f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f6:	f383 8811 	msr	BASEPRI, r3
 80170fa:	f3bf 8f6f 	isb	sy
 80170fe:	f3bf 8f4f 	dsb	sy
 8017102:	61fa      	str	r2, [r7, #28]
 8017104:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017106:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017108:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801710c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017112:	429a      	cmp	r2, r3
 8017114:	d302      	bcc.n	801711c <xQueueGenericSendFromISR+0xbc>
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	2b02      	cmp	r3, #2
 801711a:	d12f      	bne.n	801717c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801711e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801712a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801712c:	683a      	ldr	r2, [r7, #0]
 801712e:	68b9      	ldr	r1, [r7, #8]
 8017130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017132:	f000 fb64 	bl	80177fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017136:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801713a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801713e:	d112      	bne.n	8017166 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017144:	2b00      	cmp	r3, #0
 8017146:	d016      	beq.n	8017176 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801714a:	3324      	adds	r3, #36	; 0x24
 801714c:	4618      	mov	r0, r3
 801714e:	f001 f9a1 	bl	8018494 <xTaskRemoveFromEventList>
 8017152:	4603      	mov	r3, r0
 8017154:	2b00      	cmp	r3, #0
 8017156:	d00e      	beq.n	8017176 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d00b      	beq.n	8017176 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	2201      	movs	r2, #1
 8017162:	601a      	str	r2, [r3, #0]
 8017164:	e007      	b.n	8017176 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017166:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801716a:	3301      	adds	r3, #1
 801716c:	b2db      	uxtb	r3, r3
 801716e:	b25a      	sxtb	r2, r3
 8017170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017176:	2301      	movs	r3, #1
 8017178:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801717a:	e001      	b.n	8017180 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801717c:	2300      	movs	r3, #0
 801717e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017182:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017184:	697b      	ldr	r3, [r7, #20]
 8017186:	f383 8811 	msr	BASEPRI, r3
}
 801718a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801718c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801718e:	4618      	mov	r0, r3
 8017190:	3740      	adds	r7, #64	; 0x40
 8017192:	46bd      	mov	sp, r7
 8017194:	bd80      	pop	{r7, pc}

08017196 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017196:	b580      	push	{r7, lr}
 8017198:	b08e      	sub	sp, #56	; 0x38
 801719a:	af00      	add	r7, sp, #0
 801719c:	6078      	str	r0, [r7, #4]
 801719e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80171a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d10a      	bne.n	80171c0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80171aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ae:	f383 8811 	msr	BASEPRI, r3
 80171b2:	f3bf 8f6f 	isb	sy
 80171b6:	f3bf 8f4f 	dsb	sy
 80171ba:	623b      	str	r3, [r7, #32]
}
 80171bc:	bf00      	nop
 80171be:	e7fe      	b.n	80171be <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80171c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d00a      	beq.n	80171de <xQueueGiveFromISR+0x48>
	__asm volatile
 80171c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171cc:	f383 8811 	msr	BASEPRI, r3
 80171d0:	f3bf 8f6f 	isb	sy
 80171d4:	f3bf 8f4f 	dsb	sy
 80171d8:	61fb      	str	r3, [r7, #28]
}
 80171da:	bf00      	nop
 80171dc:	e7fe      	b.n	80171dc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80171de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d103      	bne.n	80171ee <xQueueGiveFromISR+0x58>
 80171e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171e8:	689b      	ldr	r3, [r3, #8]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d101      	bne.n	80171f2 <xQueueGiveFromISR+0x5c>
 80171ee:	2301      	movs	r3, #1
 80171f0:	e000      	b.n	80171f4 <xQueueGiveFromISR+0x5e>
 80171f2:	2300      	movs	r3, #0
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d10a      	bne.n	801720e <xQueueGiveFromISR+0x78>
	__asm volatile
 80171f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171fc:	f383 8811 	msr	BASEPRI, r3
 8017200:	f3bf 8f6f 	isb	sy
 8017204:	f3bf 8f4f 	dsb	sy
 8017208:	61bb      	str	r3, [r7, #24]
}
 801720a:	bf00      	nop
 801720c:	e7fe      	b.n	801720c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801720e:	f7ff fb8b 	bl	8016928 <vPortValidateInterruptPriority>
	__asm volatile
 8017212:	f3ef 8211 	mrs	r2, BASEPRI
 8017216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801721a:	f383 8811 	msr	BASEPRI, r3
 801721e:	f3bf 8f6f 	isb	sy
 8017222:	f3bf 8f4f 	dsb	sy
 8017226:	617a      	str	r2, [r7, #20]
 8017228:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801722a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801722c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017232:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801723a:	429a      	cmp	r2, r3
 801723c:	d22b      	bcs.n	8017296 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801724a:	1c5a      	adds	r2, r3, #1
 801724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017250:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017258:	d112      	bne.n	8017280 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801725e:	2b00      	cmp	r3, #0
 8017260:	d016      	beq.n	8017290 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017264:	3324      	adds	r3, #36	; 0x24
 8017266:	4618      	mov	r0, r3
 8017268:	f001 f914 	bl	8018494 <xTaskRemoveFromEventList>
 801726c:	4603      	mov	r3, r0
 801726e:	2b00      	cmp	r3, #0
 8017270:	d00e      	beq.n	8017290 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d00b      	beq.n	8017290 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	2201      	movs	r2, #1
 801727c:	601a      	str	r2, [r3, #0]
 801727e:	e007      	b.n	8017290 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017284:	3301      	adds	r3, #1
 8017286:	b2db      	uxtb	r3, r3
 8017288:	b25a      	sxtb	r2, r3
 801728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801728c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017290:	2301      	movs	r3, #1
 8017292:	637b      	str	r3, [r7, #52]	; 0x34
 8017294:	e001      	b.n	801729a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017296:	2300      	movs	r3, #0
 8017298:	637b      	str	r3, [r7, #52]	; 0x34
 801729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801729c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	f383 8811 	msr	BASEPRI, r3
}
 80172a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80172a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	3738      	adds	r7, #56	; 0x38
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}

080172b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b08c      	sub	sp, #48	; 0x30
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	60f8      	str	r0, [r7, #12]
 80172b8:	60b9      	str	r1, [r7, #8]
 80172ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80172bc:	2300      	movs	r3, #0
 80172be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80172c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d10a      	bne.n	80172e0 <xQueueReceive+0x30>
	__asm volatile
 80172ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172ce:	f383 8811 	msr	BASEPRI, r3
 80172d2:	f3bf 8f6f 	isb	sy
 80172d6:	f3bf 8f4f 	dsb	sy
 80172da:	623b      	str	r3, [r7, #32]
}
 80172dc:	bf00      	nop
 80172de:	e7fe      	b.n	80172de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d103      	bne.n	80172ee <xQueueReceive+0x3e>
 80172e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d101      	bne.n	80172f2 <xQueueReceive+0x42>
 80172ee:	2301      	movs	r3, #1
 80172f0:	e000      	b.n	80172f4 <xQueueReceive+0x44>
 80172f2:	2300      	movs	r3, #0
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d10a      	bne.n	801730e <xQueueReceive+0x5e>
	__asm volatile
 80172f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172fc:	f383 8811 	msr	BASEPRI, r3
 8017300:	f3bf 8f6f 	isb	sy
 8017304:	f3bf 8f4f 	dsb	sy
 8017308:	61fb      	str	r3, [r7, #28]
}
 801730a:	bf00      	nop
 801730c:	e7fe      	b.n	801730c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801730e:	f001 fa91 	bl	8018834 <xTaskGetSchedulerState>
 8017312:	4603      	mov	r3, r0
 8017314:	2b00      	cmp	r3, #0
 8017316:	d102      	bne.n	801731e <xQueueReceive+0x6e>
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d101      	bne.n	8017322 <xQueueReceive+0x72>
 801731e:	2301      	movs	r3, #1
 8017320:	e000      	b.n	8017324 <xQueueReceive+0x74>
 8017322:	2300      	movs	r3, #0
 8017324:	2b00      	cmp	r3, #0
 8017326:	d10a      	bne.n	801733e <xQueueReceive+0x8e>
	__asm volatile
 8017328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801732c:	f383 8811 	msr	BASEPRI, r3
 8017330:	f3bf 8f6f 	isb	sy
 8017334:	f3bf 8f4f 	dsb	sy
 8017338:	61bb      	str	r3, [r7, #24]
}
 801733a:	bf00      	nop
 801733c:	e7fe      	b.n	801733c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801733e:	f7ff fa11 	bl	8016764 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017346:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734a:	2b00      	cmp	r3, #0
 801734c:	d01f      	beq.n	801738e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801734e:	68b9      	ldr	r1, [r7, #8]
 8017350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017352:	f000 fabe 	bl	80178d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017358:	1e5a      	subs	r2, r3, #1
 801735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801735c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017360:	691b      	ldr	r3, [r3, #16]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d00f      	beq.n	8017386 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017368:	3310      	adds	r3, #16
 801736a:	4618      	mov	r0, r3
 801736c:	f001 f892 	bl	8018494 <xTaskRemoveFromEventList>
 8017370:	4603      	mov	r3, r0
 8017372:	2b00      	cmp	r3, #0
 8017374:	d007      	beq.n	8017386 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017376:	4b3d      	ldr	r3, [pc, #244]	; (801746c <xQueueReceive+0x1bc>)
 8017378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801737c:	601a      	str	r2, [r3, #0]
 801737e:	f3bf 8f4f 	dsb	sy
 8017382:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017386:	f7ff fa1d 	bl	80167c4 <vPortExitCritical>
				return pdPASS;
 801738a:	2301      	movs	r3, #1
 801738c:	e069      	b.n	8017462 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d103      	bne.n	801739c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017394:	f7ff fa16 	bl	80167c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017398:	2300      	movs	r3, #0
 801739a:	e062      	b.n	8017462 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d106      	bne.n	80173b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80173a2:	f107 0310 	add.w	r3, r7, #16
 80173a6:	4618      	mov	r0, r3
 80173a8:	f001 f8d8 	bl	801855c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80173ac:	2301      	movs	r3, #1
 80173ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80173b0:	f7ff fa08 	bl	80167c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80173b4:	f000 fe02 	bl	8017fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80173b8:	f7ff f9d4 	bl	8016764 <vPortEnterCritical>
 80173bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80173c2:	b25b      	sxtb	r3, r3
 80173c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173c8:	d103      	bne.n	80173d2 <xQueueReceive+0x122>
 80173ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173cc:	2200      	movs	r2, #0
 80173ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80173d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80173d8:	b25b      	sxtb	r3, r3
 80173da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173de:	d103      	bne.n	80173e8 <xQueueReceive+0x138>
 80173e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e2:	2200      	movs	r2, #0
 80173e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80173e8:	f7ff f9ec 	bl	80167c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80173ec:	1d3a      	adds	r2, r7, #4
 80173ee:	f107 0310 	add.w	r3, r7, #16
 80173f2:	4611      	mov	r1, r2
 80173f4:	4618      	mov	r0, r3
 80173f6:	f001 f8c7 	bl	8018588 <xTaskCheckForTimeOut>
 80173fa:	4603      	mov	r3, r0
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d123      	bne.n	8017448 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017402:	f000 fade 	bl	80179c2 <prvIsQueueEmpty>
 8017406:	4603      	mov	r3, r0
 8017408:	2b00      	cmp	r3, #0
 801740a:	d017      	beq.n	801743c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801740e:	3324      	adds	r3, #36	; 0x24
 8017410:	687a      	ldr	r2, [r7, #4]
 8017412:	4611      	mov	r1, r2
 8017414:	4618      	mov	r0, r3
 8017416:	f000 ffed 	bl	80183f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801741a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801741c:	f000 fa7f 	bl	801791e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017420:	f000 fdda 	bl	8017fd8 <xTaskResumeAll>
 8017424:	4603      	mov	r3, r0
 8017426:	2b00      	cmp	r3, #0
 8017428:	d189      	bne.n	801733e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801742a:	4b10      	ldr	r3, [pc, #64]	; (801746c <xQueueReceive+0x1bc>)
 801742c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017430:	601a      	str	r2, [r3, #0]
 8017432:	f3bf 8f4f 	dsb	sy
 8017436:	f3bf 8f6f 	isb	sy
 801743a:	e780      	b.n	801733e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801743c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801743e:	f000 fa6e 	bl	801791e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017442:	f000 fdc9 	bl	8017fd8 <xTaskResumeAll>
 8017446:	e77a      	b.n	801733e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801744a:	f000 fa68 	bl	801791e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801744e:	f000 fdc3 	bl	8017fd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017454:	f000 fab5 	bl	80179c2 <prvIsQueueEmpty>
 8017458:	4603      	mov	r3, r0
 801745a:	2b00      	cmp	r3, #0
 801745c:	f43f af6f 	beq.w	801733e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017462:	4618      	mov	r0, r3
 8017464:	3730      	adds	r7, #48	; 0x30
 8017466:	46bd      	mov	sp, r7
 8017468:	bd80      	pop	{r7, pc}
 801746a:	bf00      	nop
 801746c:	e000ed04 	.word	0xe000ed04

08017470 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b08e      	sub	sp, #56	; 0x38
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
 8017478:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801747a:	2300      	movs	r3, #0
 801747c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8017482:	2300      	movs	r3, #0
 8017484:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017488:	2b00      	cmp	r3, #0
 801748a:	d10a      	bne.n	80174a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017490:	f383 8811 	msr	BASEPRI, r3
 8017494:	f3bf 8f6f 	isb	sy
 8017498:	f3bf 8f4f 	dsb	sy
 801749c:	623b      	str	r3, [r7, #32]
}
 801749e:	bf00      	nop
 80174a0:	e7fe      	b.n	80174a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80174a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d00a      	beq.n	80174c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80174aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174ae:	f383 8811 	msr	BASEPRI, r3
 80174b2:	f3bf 8f6f 	isb	sy
 80174b6:	f3bf 8f4f 	dsb	sy
 80174ba:	61fb      	str	r3, [r7, #28]
}
 80174bc:	bf00      	nop
 80174be:	e7fe      	b.n	80174be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80174c0:	f001 f9b8 	bl	8018834 <xTaskGetSchedulerState>
 80174c4:	4603      	mov	r3, r0
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d102      	bne.n	80174d0 <xQueueSemaphoreTake+0x60>
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d101      	bne.n	80174d4 <xQueueSemaphoreTake+0x64>
 80174d0:	2301      	movs	r3, #1
 80174d2:	e000      	b.n	80174d6 <xQueueSemaphoreTake+0x66>
 80174d4:	2300      	movs	r3, #0
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d10a      	bne.n	80174f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80174da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174de:	f383 8811 	msr	BASEPRI, r3
 80174e2:	f3bf 8f6f 	isb	sy
 80174e6:	f3bf 8f4f 	dsb	sy
 80174ea:	61bb      	str	r3, [r7, #24]
}
 80174ec:	bf00      	nop
 80174ee:	e7fe      	b.n	80174ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80174f0:	f7ff f938 	bl	8016764 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80174f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80174fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d024      	beq.n	801754a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017502:	1e5a      	subs	r2, r3, #1
 8017504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017506:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d104      	bne.n	801751a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017510:	f001 fb06 	bl	8018b20 <pvTaskIncrementMutexHeldCount>
 8017514:	4602      	mov	r2, r0
 8017516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017518:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751c:	691b      	ldr	r3, [r3, #16]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d00f      	beq.n	8017542 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017524:	3310      	adds	r3, #16
 8017526:	4618      	mov	r0, r3
 8017528:	f000 ffb4 	bl	8018494 <xTaskRemoveFromEventList>
 801752c:	4603      	mov	r3, r0
 801752e:	2b00      	cmp	r3, #0
 8017530:	d007      	beq.n	8017542 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017532:	4b54      	ldr	r3, [pc, #336]	; (8017684 <xQueueSemaphoreTake+0x214>)
 8017534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017538:	601a      	str	r2, [r3, #0]
 801753a:	f3bf 8f4f 	dsb	sy
 801753e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017542:	f7ff f93f 	bl	80167c4 <vPortExitCritical>
				return pdPASS;
 8017546:	2301      	movs	r3, #1
 8017548:	e097      	b.n	801767a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d111      	bne.n	8017574 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017552:	2b00      	cmp	r3, #0
 8017554:	d00a      	beq.n	801756c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8017556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801755a:	f383 8811 	msr	BASEPRI, r3
 801755e:	f3bf 8f6f 	isb	sy
 8017562:	f3bf 8f4f 	dsb	sy
 8017566:	617b      	str	r3, [r7, #20]
}
 8017568:	bf00      	nop
 801756a:	e7fe      	b.n	801756a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801756c:	f7ff f92a 	bl	80167c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017570:	2300      	movs	r3, #0
 8017572:	e082      	b.n	801767a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017576:	2b00      	cmp	r3, #0
 8017578:	d106      	bne.n	8017588 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801757a:	f107 030c 	add.w	r3, r7, #12
 801757e:	4618      	mov	r0, r3
 8017580:	f000 ffec 	bl	801855c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017584:	2301      	movs	r3, #1
 8017586:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017588:	f7ff f91c 	bl	80167c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801758c:	f000 fd16 	bl	8017fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017590:	f7ff f8e8 	bl	8016764 <vPortEnterCritical>
 8017594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801759a:	b25b      	sxtb	r3, r3
 801759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175a0:	d103      	bne.n	80175aa <xQueueSemaphoreTake+0x13a>
 80175a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a4:	2200      	movs	r2, #0
 80175a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80175aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80175b0:	b25b      	sxtb	r3, r3
 80175b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175b6:	d103      	bne.n	80175c0 <xQueueSemaphoreTake+0x150>
 80175b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ba:	2200      	movs	r2, #0
 80175bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80175c0:	f7ff f900 	bl	80167c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80175c4:	463a      	mov	r2, r7
 80175c6:	f107 030c 	add.w	r3, r7, #12
 80175ca:	4611      	mov	r1, r2
 80175cc:	4618      	mov	r0, r3
 80175ce:	f000 ffdb 	bl	8018588 <xTaskCheckForTimeOut>
 80175d2:	4603      	mov	r3, r0
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d132      	bne.n	801763e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80175d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175da:	f000 f9f2 	bl	80179c2 <prvIsQueueEmpty>
 80175de:	4603      	mov	r3, r0
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d026      	beq.n	8017632 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80175e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d109      	bne.n	8017600 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80175ec:	f7ff f8ba 	bl	8016764 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80175f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f2:	689b      	ldr	r3, [r3, #8]
 80175f4:	4618      	mov	r0, r3
 80175f6:	f001 f93b 	bl	8018870 <xTaskPriorityInherit>
 80175fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80175fc:	f7ff f8e2 	bl	80167c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017602:	3324      	adds	r3, #36	; 0x24
 8017604:	683a      	ldr	r2, [r7, #0]
 8017606:	4611      	mov	r1, r2
 8017608:	4618      	mov	r0, r3
 801760a:	f000 fef3 	bl	80183f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801760e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017610:	f000 f985 	bl	801791e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017614:	f000 fce0 	bl	8017fd8 <xTaskResumeAll>
 8017618:	4603      	mov	r3, r0
 801761a:	2b00      	cmp	r3, #0
 801761c:	f47f af68 	bne.w	80174f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8017620:	4b18      	ldr	r3, [pc, #96]	; (8017684 <xQueueSemaphoreTake+0x214>)
 8017622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017626:	601a      	str	r2, [r3, #0]
 8017628:	f3bf 8f4f 	dsb	sy
 801762c:	f3bf 8f6f 	isb	sy
 8017630:	e75e      	b.n	80174f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017634:	f000 f973 	bl	801791e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017638:	f000 fcce 	bl	8017fd8 <xTaskResumeAll>
 801763c:	e758      	b.n	80174f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801763e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017640:	f000 f96d 	bl	801791e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017644:	f000 fcc8 	bl	8017fd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801764a:	f000 f9ba 	bl	80179c2 <prvIsQueueEmpty>
 801764e:	4603      	mov	r3, r0
 8017650:	2b00      	cmp	r3, #0
 8017652:	f43f af4d 	beq.w	80174f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017658:	2b00      	cmp	r3, #0
 801765a:	d00d      	beq.n	8017678 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801765c:	f7ff f882 	bl	8016764 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017662:	f000 f8b4 	bl	80177ce <prvGetDisinheritPriorityAfterTimeout>
 8017666:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801766a:	689b      	ldr	r3, [r3, #8]
 801766c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801766e:	4618      	mov	r0, r3
 8017670:	f001 f9d4 	bl	8018a1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017674:	f7ff f8a6 	bl	80167c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801767a:	4618      	mov	r0, r3
 801767c:	3738      	adds	r7, #56	; 0x38
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	e000ed04 	.word	0xe000ed04

08017688 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b08e      	sub	sp, #56	; 0x38
 801768c:	af00      	add	r7, sp, #0
 801768e:	60f8      	str	r0, [r7, #12]
 8017690:	60b9      	str	r1, [r7, #8]
 8017692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769a:	2b00      	cmp	r3, #0
 801769c:	d10a      	bne.n	80176b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a2:	f383 8811 	msr	BASEPRI, r3
 80176a6:	f3bf 8f6f 	isb	sy
 80176aa:	f3bf 8f4f 	dsb	sy
 80176ae:	623b      	str	r3, [r7, #32]
}
 80176b0:	bf00      	nop
 80176b2:	e7fe      	b.n	80176b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80176b4:	68bb      	ldr	r3, [r7, #8]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d103      	bne.n	80176c2 <xQueueReceiveFromISR+0x3a>
 80176ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d101      	bne.n	80176c6 <xQueueReceiveFromISR+0x3e>
 80176c2:	2301      	movs	r3, #1
 80176c4:	e000      	b.n	80176c8 <xQueueReceiveFromISR+0x40>
 80176c6:	2300      	movs	r3, #0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d10a      	bne.n	80176e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80176cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176d0:	f383 8811 	msr	BASEPRI, r3
 80176d4:	f3bf 8f6f 	isb	sy
 80176d8:	f3bf 8f4f 	dsb	sy
 80176dc:	61fb      	str	r3, [r7, #28]
}
 80176de:	bf00      	nop
 80176e0:	e7fe      	b.n	80176e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80176e2:	f7ff f921 	bl	8016928 <vPortValidateInterruptPriority>
	__asm volatile
 80176e6:	f3ef 8211 	mrs	r2, BASEPRI
 80176ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176ee:	f383 8811 	msr	BASEPRI, r3
 80176f2:	f3bf 8f6f 	isb	sy
 80176f6:	f3bf 8f4f 	dsb	sy
 80176fa:	61ba      	str	r2, [r7, #24]
 80176fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80176fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017700:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017706:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801770a:	2b00      	cmp	r3, #0
 801770c:	d02f      	beq.n	801776e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017718:	68b9      	ldr	r1, [r7, #8]
 801771a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801771c:	f000 f8d9 	bl	80178d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017722:	1e5a      	subs	r2, r3, #1
 8017724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017726:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017728:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017730:	d112      	bne.n	8017758 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017734:	691b      	ldr	r3, [r3, #16]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d016      	beq.n	8017768 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773c:	3310      	adds	r3, #16
 801773e:	4618      	mov	r0, r3
 8017740:	f000 fea8 	bl	8018494 <xTaskRemoveFromEventList>
 8017744:	4603      	mov	r3, r0
 8017746:	2b00      	cmp	r3, #0
 8017748:	d00e      	beq.n	8017768 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d00b      	beq.n	8017768 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	2201      	movs	r2, #1
 8017754:	601a      	str	r2, [r3, #0]
 8017756:	e007      	b.n	8017768 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801775c:	3301      	adds	r3, #1
 801775e:	b2db      	uxtb	r3, r3
 8017760:	b25a      	sxtb	r2, r3
 8017762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017768:	2301      	movs	r3, #1
 801776a:	637b      	str	r3, [r7, #52]	; 0x34
 801776c:	e001      	b.n	8017772 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801776e:	2300      	movs	r3, #0
 8017770:	637b      	str	r3, [r7, #52]	; 0x34
 8017772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017774:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017776:	693b      	ldr	r3, [r7, #16]
 8017778:	f383 8811 	msr	BASEPRI, r3
}
 801777c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801777e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017780:	4618      	mov	r0, r3
 8017782:	3738      	adds	r7, #56	; 0x38
 8017784:	46bd      	mov	sp, r7
 8017786:	bd80      	pop	{r7, pc}

08017788 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b084      	sub	sp, #16
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d10a      	bne.n	80177b0 <vQueueDelete+0x28>
	__asm volatile
 801779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801779e:	f383 8811 	msr	BASEPRI, r3
 80177a2:	f3bf 8f6f 	isb	sy
 80177a6:	f3bf 8f4f 	dsb	sy
 80177aa:	60bb      	str	r3, [r7, #8]
}
 80177ac:	bf00      	nop
 80177ae:	e7fe      	b.n	80177ae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80177b0:	68f8      	ldr	r0, [r7, #12]
 80177b2:	f000 f95f 	bl	8017a74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d102      	bne.n	80177c6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80177c0:	68f8      	ldr	r0, [r7, #12]
 80177c2:	f7fe fccd 	bl	8016160 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80177c6:	bf00      	nop
 80177c8:	3710      	adds	r7, #16
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}

080177ce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80177ce:	b480      	push	{r7}
 80177d0:	b085      	sub	sp, #20
 80177d2:	af00      	add	r7, sp, #0
 80177d4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d006      	beq.n	80177ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80177e8:	60fb      	str	r3, [r7, #12]
 80177ea:	e001      	b.n	80177f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80177ec:	2300      	movs	r3, #0
 80177ee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80177f0:	68fb      	ldr	r3, [r7, #12]
	}
 80177f2:	4618      	mov	r0, r3
 80177f4:	3714      	adds	r7, #20
 80177f6:	46bd      	mov	sp, r7
 80177f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fc:	4770      	bx	lr

080177fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80177fe:	b580      	push	{r7, lr}
 8017800:	b086      	sub	sp, #24
 8017802:	af00      	add	r7, sp, #0
 8017804:	60f8      	str	r0, [r7, #12]
 8017806:	60b9      	str	r1, [r7, #8]
 8017808:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801780a:	2300      	movs	r3, #0
 801780c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017812:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017818:	2b00      	cmp	r3, #0
 801781a:	d10d      	bne.n	8017838 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d14d      	bne.n	80178c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	689b      	ldr	r3, [r3, #8]
 8017828:	4618      	mov	r0, r3
 801782a:	f001 f889 	bl	8018940 <xTaskPriorityDisinherit>
 801782e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	2200      	movs	r2, #0
 8017834:	609a      	str	r2, [r3, #8]
 8017836:	e043      	b.n	80178c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d119      	bne.n	8017872 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	6858      	ldr	r0, [r3, #4]
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017846:	461a      	mov	r2, r3
 8017848:	68b9      	ldr	r1, [r7, #8]
 801784a:	f010 f875 	bl	8027938 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	685a      	ldr	r2, [r3, #4]
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017856:	441a      	add	r2, r3
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	685a      	ldr	r2, [r3, #4]
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	689b      	ldr	r3, [r3, #8]
 8017864:	429a      	cmp	r2, r3
 8017866:	d32b      	bcc.n	80178c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	681a      	ldr	r2, [r3, #0]
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	605a      	str	r2, [r3, #4]
 8017870:	e026      	b.n	80178c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	68d8      	ldr	r0, [r3, #12]
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801787a:	461a      	mov	r2, r3
 801787c:	68b9      	ldr	r1, [r7, #8]
 801787e:	f010 f85b 	bl	8027938 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	68da      	ldr	r2, [r3, #12]
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801788a:	425b      	negs	r3, r3
 801788c:	441a      	add	r2, r3
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	68da      	ldr	r2, [r3, #12]
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	429a      	cmp	r2, r3
 801789c:	d207      	bcs.n	80178ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	689a      	ldr	r2, [r3, #8]
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178a6:	425b      	negs	r3, r3
 80178a8:	441a      	add	r2, r3
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	2b02      	cmp	r3, #2
 80178b2:	d105      	bne.n	80178c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80178b4:	693b      	ldr	r3, [r7, #16]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d002      	beq.n	80178c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80178ba:	693b      	ldr	r3, [r7, #16]
 80178bc:	3b01      	subs	r3, #1
 80178be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80178c0:	693b      	ldr	r3, [r7, #16]
 80178c2:	1c5a      	adds	r2, r3, #1
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80178c8:	697b      	ldr	r3, [r7, #20]
}
 80178ca:	4618      	mov	r0, r3
 80178cc:	3718      	adds	r7, #24
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bd80      	pop	{r7, pc}

080178d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80178d2:	b580      	push	{r7, lr}
 80178d4:	b082      	sub	sp, #8
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	6078      	str	r0, [r7, #4]
 80178da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d018      	beq.n	8017916 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	68da      	ldr	r2, [r3, #12]
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178ec:	441a      	add	r2, r3
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	68da      	ldr	r2, [r3, #12]
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	689b      	ldr	r3, [r3, #8]
 80178fa:	429a      	cmp	r2, r3
 80178fc:	d303      	bcc.n	8017906 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	681a      	ldr	r2, [r3, #0]
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	68d9      	ldr	r1, [r3, #12]
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801790e:	461a      	mov	r2, r3
 8017910:	6838      	ldr	r0, [r7, #0]
 8017912:	f010 f811 	bl	8027938 <memcpy>
	}
}
 8017916:	bf00      	nop
 8017918:	3708      	adds	r7, #8
 801791a:	46bd      	mov	sp, r7
 801791c:	bd80      	pop	{r7, pc}

0801791e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801791e:	b580      	push	{r7, lr}
 8017920:	b084      	sub	sp, #16
 8017922:	af00      	add	r7, sp, #0
 8017924:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017926:	f7fe ff1d 	bl	8016764 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017930:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017932:	e011      	b.n	8017958 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017938:	2b00      	cmp	r3, #0
 801793a:	d012      	beq.n	8017962 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	3324      	adds	r3, #36	; 0x24
 8017940:	4618      	mov	r0, r3
 8017942:	f000 fda7 	bl	8018494 <xTaskRemoveFromEventList>
 8017946:	4603      	mov	r3, r0
 8017948:	2b00      	cmp	r3, #0
 801794a:	d001      	beq.n	8017950 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801794c:	f000 fe7e 	bl	801864c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017950:	7bfb      	ldrb	r3, [r7, #15]
 8017952:	3b01      	subs	r3, #1
 8017954:	b2db      	uxtb	r3, r3
 8017956:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801795c:	2b00      	cmp	r3, #0
 801795e:	dce9      	bgt.n	8017934 <prvUnlockQueue+0x16>
 8017960:	e000      	b.n	8017964 <prvUnlockQueue+0x46>
					break;
 8017962:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	22ff      	movs	r2, #255	; 0xff
 8017968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801796c:	f7fe ff2a 	bl	80167c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017970:	f7fe fef8 	bl	8016764 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801797a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801797c:	e011      	b.n	80179a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	691b      	ldr	r3, [r3, #16]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d012      	beq.n	80179ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	3310      	adds	r3, #16
 801798a:	4618      	mov	r0, r3
 801798c:	f000 fd82 	bl	8018494 <xTaskRemoveFromEventList>
 8017990:	4603      	mov	r3, r0
 8017992:	2b00      	cmp	r3, #0
 8017994:	d001      	beq.n	801799a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017996:	f000 fe59 	bl	801864c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801799a:	7bbb      	ldrb	r3, [r7, #14]
 801799c:	3b01      	subs	r3, #1
 801799e:	b2db      	uxtb	r3, r3
 80179a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80179a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	dce9      	bgt.n	801797e <prvUnlockQueue+0x60>
 80179aa:	e000      	b.n	80179ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80179ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	22ff      	movs	r2, #255	; 0xff
 80179b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80179b6:	f7fe ff05 	bl	80167c4 <vPortExitCritical>
}
 80179ba:	bf00      	nop
 80179bc:	3710      	adds	r7, #16
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}

080179c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80179c2:	b580      	push	{r7, lr}
 80179c4:	b084      	sub	sp, #16
 80179c6:	af00      	add	r7, sp, #0
 80179c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80179ca:	f7fe fecb 	bl	8016764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d102      	bne.n	80179dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80179d6:	2301      	movs	r3, #1
 80179d8:	60fb      	str	r3, [r7, #12]
 80179da:	e001      	b.n	80179e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80179dc:	2300      	movs	r3, #0
 80179de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80179e0:	f7fe fef0 	bl	80167c4 <vPortExitCritical>

	return xReturn;
 80179e4:	68fb      	ldr	r3, [r7, #12]
}
 80179e6:	4618      	mov	r0, r3
 80179e8:	3710      	adds	r7, #16
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}

080179ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80179ee:	b580      	push	{r7, lr}
 80179f0:	b084      	sub	sp, #16
 80179f2:	af00      	add	r7, sp, #0
 80179f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80179f6:	f7fe feb5 	bl	8016764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a02:	429a      	cmp	r2, r3
 8017a04:	d102      	bne.n	8017a0c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017a06:	2301      	movs	r3, #1
 8017a08:	60fb      	str	r3, [r7, #12]
 8017a0a:	e001      	b.n	8017a10 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017a10:	f7fe fed8 	bl	80167c4 <vPortExitCritical>

	return xReturn;
 8017a14:	68fb      	ldr	r3, [r7, #12]
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3710      	adds	r7, #16
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd80      	pop	{r7, pc}
	...

08017a20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017a20:	b480      	push	{r7}
 8017a22:	b085      	sub	sp, #20
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	60fb      	str	r3, [r7, #12]
 8017a2e:	e014      	b.n	8017a5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017a30:	4a0f      	ldr	r2, [pc, #60]	; (8017a70 <vQueueAddToRegistry+0x50>)
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d10b      	bne.n	8017a54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017a3c:	490c      	ldr	r1, [pc, #48]	; (8017a70 <vQueueAddToRegistry+0x50>)
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	683a      	ldr	r2, [r7, #0]
 8017a42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017a46:	4a0a      	ldr	r2, [pc, #40]	; (8017a70 <vQueueAddToRegistry+0x50>)
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	00db      	lsls	r3, r3, #3
 8017a4c:	4413      	add	r3, r2
 8017a4e:	687a      	ldr	r2, [r7, #4]
 8017a50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017a52:	e006      	b.n	8017a62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	3301      	adds	r3, #1
 8017a58:	60fb      	str	r3, [r7, #12]
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	2b07      	cmp	r3, #7
 8017a5e:	d9e7      	bls.n	8017a30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017a60:	bf00      	nop
 8017a62:	bf00      	nop
 8017a64:	3714      	adds	r7, #20
 8017a66:	46bd      	mov	sp, r7
 8017a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6c:	4770      	bx	lr
 8017a6e:	bf00      	nop
 8017a70:	240263f0 	.word	0x240263f0

08017a74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017a74:	b480      	push	{r7}
 8017a76:	b085      	sub	sp, #20
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	60fb      	str	r3, [r7, #12]
 8017a80:	e016      	b.n	8017ab0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017a82:	4a10      	ldr	r2, [pc, #64]	; (8017ac4 <vQueueUnregisterQueue+0x50>)
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	00db      	lsls	r3, r3, #3
 8017a88:	4413      	add	r3, r2
 8017a8a:	685b      	ldr	r3, [r3, #4]
 8017a8c:	687a      	ldr	r2, [r7, #4]
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	d10b      	bne.n	8017aaa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017a92:	4a0c      	ldr	r2, [pc, #48]	; (8017ac4 <vQueueUnregisterQueue+0x50>)
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	2100      	movs	r1, #0
 8017a98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017a9c:	4a09      	ldr	r2, [pc, #36]	; (8017ac4 <vQueueUnregisterQueue+0x50>)
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	00db      	lsls	r3, r3, #3
 8017aa2:	4413      	add	r3, r2
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	605a      	str	r2, [r3, #4]
				break;
 8017aa8:	e006      	b.n	8017ab8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	3301      	adds	r3, #1
 8017aae:	60fb      	str	r3, [r7, #12]
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	2b07      	cmp	r3, #7
 8017ab4:	d9e5      	bls.n	8017a82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017ab6:	bf00      	nop
 8017ab8:	bf00      	nop
 8017aba:	3714      	adds	r7, #20
 8017abc:	46bd      	mov	sp, r7
 8017abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac2:	4770      	bx	lr
 8017ac4:	240263f0 	.word	0x240263f0

08017ac8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b086      	sub	sp, #24
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	60f8      	str	r0, [r7, #12]
 8017ad0:	60b9      	str	r1, [r7, #8]
 8017ad2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017ad8:	f7fe fe44 	bl	8016764 <vPortEnterCritical>
 8017adc:	697b      	ldr	r3, [r7, #20]
 8017ade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017ae2:	b25b      	sxtb	r3, r3
 8017ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ae8:	d103      	bne.n	8017af2 <vQueueWaitForMessageRestricted+0x2a>
 8017aea:	697b      	ldr	r3, [r7, #20]
 8017aec:	2200      	movs	r2, #0
 8017aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017af2:	697b      	ldr	r3, [r7, #20]
 8017af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017af8:	b25b      	sxtb	r3, r3
 8017afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017afe:	d103      	bne.n	8017b08 <vQueueWaitForMessageRestricted+0x40>
 8017b00:	697b      	ldr	r3, [r7, #20]
 8017b02:	2200      	movs	r2, #0
 8017b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017b08:	f7fe fe5c 	bl	80167c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017b0c:	697b      	ldr	r3, [r7, #20]
 8017b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d106      	bne.n	8017b22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017b14:	697b      	ldr	r3, [r7, #20]
 8017b16:	3324      	adds	r3, #36	; 0x24
 8017b18:	687a      	ldr	r2, [r7, #4]
 8017b1a:	68b9      	ldr	r1, [r7, #8]
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f000 fc8d 	bl	801843c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017b22:	6978      	ldr	r0, [r7, #20]
 8017b24:	f7ff fefb 	bl	801791e <prvUnlockQueue>
	}
 8017b28:	bf00      	nop
 8017b2a:	3718      	adds	r7, #24
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b08e      	sub	sp, #56	; 0x38
 8017b34:	af04      	add	r7, sp, #16
 8017b36:	60f8      	str	r0, [r7, #12]
 8017b38:	60b9      	str	r1, [r7, #8]
 8017b3a:	607a      	str	r2, [r7, #4]
 8017b3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d10a      	bne.n	8017b5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8017b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b48:	f383 8811 	msr	BASEPRI, r3
 8017b4c:	f3bf 8f6f 	isb	sy
 8017b50:	f3bf 8f4f 	dsb	sy
 8017b54:	623b      	str	r3, [r7, #32]
}
 8017b56:	bf00      	nop
 8017b58:	e7fe      	b.n	8017b58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d10a      	bne.n	8017b76 <xTaskCreateStatic+0x46>
	__asm volatile
 8017b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b64:	f383 8811 	msr	BASEPRI, r3
 8017b68:	f3bf 8f6f 	isb	sy
 8017b6c:	f3bf 8f4f 	dsb	sy
 8017b70:	61fb      	str	r3, [r7, #28]
}
 8017b72:	bf00      	nop
 8017b74:	e7fe      	b.n	8017b74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017b76:	2360      	movs	r3, #96	; 0x60
 8017b78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017b7a:	693b      	ldr	r3, [r7, #16]
 8017b7c:	2b60      	cmp	r3, #96	; 0x60
 8017b7e:	d00a      	beq.n	8017b96 <xTaskCreateStatic+0x66>
	__asm volatile
 8017b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b84:	f383 8811 	msr	BASEPRI, r3
 8017b88:	f3bf 8f6f 	isb	sy
 8017b8c:	f3bf 8f4f 	dsb	sy
 8017b90:	61bb      	str	r3, [r7, #24]
}
 8017b92:	bf00      	nop
 8017b94:	e7fe      	b.n	8017b94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017b96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d01e      	beq.n	8017bdc <xTaskCreateStatic+0xac>
 8017b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d01b      	beq.n	8017bdc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017bac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb0:	2202      	movs	r2, #2
 8017bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	9303      	str	r3, [sp, #12]
 8017bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bbc:	9302      	str	r3, [sp, #8]
 8017bbe:	f107 0314 	add.w	r3, r7, #20
 8017bc2:	9301      	str	r3, [sp, #4]
 8017bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bc6:	9300      	str	r3, [sp, #0]
 8017bc8:	683b      	ldr	r3, [r7, #0]
 8017bca:	687a      	ldr	r2, [r7, #4]
 8017bcc:	68b9      	ldr	r1, [r7, #8]
 8017bce:	68f8      	ldr	r0, [r7, #12]
 8017bd0:	f000 f850 	bl	8017c74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017bd6:	f000 f8df 	bl	8017d98 <prvAddNewTaskToReadyList>
 8017bda:	e001      	b.n	8017be0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017bdc:	2300      	movs	r3, #0
 8017bde:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017be0:	697b      	ldr	r3, [r7, #20]
	}
 8017be2:	4618      	mov	r0, r3
 8017be4:	3728      	adds	r7, #40	; 0x28
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}

08017bea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017bea:	b580      	push	{r7, lr}
 8017bec:	b08c      	sub	sp, #48	; 0x30
 8017bee:	af04      	add	r7, sp, #16
 8017bf0:	60f8      	str	r0, [r7, #12]
 8017bf2:	60b9      	str	r1, [r7, #8]
 8017bf4:	603b      	str	r3, [r7, #0]
 8017bf6:	4613      	mov	r3, r2
 8017bf8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017bfa:	88fb      	ldrh	r3, [r7, #6]
 8017bfc:	009b      	lsls	r3, r3, #2
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f7fe f9e2 	bl	8015fc8 <pvPortMalloc>
 8017c04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017c06:	697b      	ldr	r3, [r7, #20]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d00e      	beq.n	8017c2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017c0c:	2060      	movs	r0, #96	; 0x60
 8017c0e:	f7fe f9db 	bl	8015fc8 <pvPortMalloc>
 8017c12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017c14:	69fb      	ldr	r3, [r7, #28]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d003      	beq.n	8017c22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017c1a:	69fb      	ldr	r3, [r7, #28]
 8017c1c:	697a      	ldr	r2, [r7, #20]
 8017c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8017c20:	e005      	b.n	8017c2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017c22:	6978      	ldr	r0, [r7, #20]
 8017c24:	f7fe fa9c 	bl	8016160 <vPortFree>
 8017c28:	e001      	b.n	8017c2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017c2e:	69fb      	ldr	r3, [r7, #28]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d017      	beq.n	8017c64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017c34:	69fb      	ldr	r3, [r7, #28]
 8017c36:	2200      	movs	r2, #0
 8017c38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017c3c:	88fa      	ldrh	r2, [r7, #6]
 8017c3e:	2300      	movs	r3, #0
 8017c40:	9303      	str	r3, [sp, #12]
 8017c42:	69fb      	ldr	r3, [r7, #28]
 8017c44:	9302      	str	r3, [sp, #8]
 8017c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c48:	9301      	str	r3, [sp, #4]
 8017c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4c:	9300      	str	r3, [sp, #0]
 8017c4e:	683b      	ldr	r3, [r7, #0]
 8017c50:	68b9      	ldr	r1, [r7, #8]
 8017c52:	68f8      	ldr	r0, [r7, #12]
 8017c54:	f000 f80e 	bl	8017c74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017c58:	69f8      	ldr	r0, [r7, #28]
 8017c5a:	f000 f89d 	bl	8017d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017c5e:	2301      	movs	r3, #1
 8017c60:	61bb      	str	r3, [r7, #24]
 8017c62:	e002      	b.n	8017c6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017c64:	f04f 33ff 	mov.w	r3, #4294967295
 8017c68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017c6a:	69bb      	ldr	r3, [r7, #24]
	}
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	3720      	adds	r7, #32
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bd80      	pop	{r7, pc}

08017c74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b088      	sub	sp, #32
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	60f8      	str	r0, [r7, #12]
 8017c7c:	60b9      	str	r1, [r7, #8]
 8017c7e:	607a      	str	r2, [r7, #4]
 8017c80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	009b      	lsls	r3, r3, #2
 8017c8a:	461a      	mov	r2, r3
 8017c8c:	21a5      	movs	r1, #165	; 0xa5
 8017c8e:	f00f fe61 	bl	8027954 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017c96:	6879      	ldr	r1, [r7, #4]
 8017c98:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017c9c:	440b      	add	r3, r1
 8017c9e:	009b      	lsls	r3, r3, #2
 8017ca0:	4413      	add	r3, r2
 8017ca2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017ca4:	69bb      	ldr	r3, [r7, #24]
 8017ca6:	f023 0307 	bic.w	r3, r3, #7
 8017caa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017cac:	69bb      	ldr	r3, [r7, #24]
 8017cae:	f003 0307 	and.w	r3, r3, #7
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d00a      	beq.n	8017ccc <prvInitialiseNewTask+0x58>
	__asm volatile
 8017cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cba:	f383 8811 	msr	BASEPRI, r3
 8017cbe:	f3bf 8f6f 	isb	sy
 8017cc2:	f3bf 8f4f 	dsb	sy
 8017cc6:	617b      	str	r3, [r7, #20]
}
 8017cc8:	bf00      	nop
 8017cca:	e7fe      	b.n	8017cca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017ccc:	68bb      	ldr	r3, [r7, #8]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d01f      	beq.n	8017d12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	61fb      	str	r3, [r7, #28]
 8017cd6:	e012      	b.n	8017cfe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017cd8:	68ba      	ldr	r2, [r7, #8]
 8017cda:	69fb      	ldr	r3, [r7, #28]
 8017cdc:	4413      	add	r3, r2
 8017cde:	7819      	ldrb	r1, [r3, #0]
 8017ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ce2:	69fb      	ldr	r3, [r7, #28]
 8017ce4:	4413      	add	r3, r2
 8017ce6:	3334      	adds	r3, #52	; 0x34
 8017ce8:	460a      	mov	r2, r1
 8017cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017cec:	68ba      	ldr	r2, [r7, #8]
 8017cee:	69fb      	ldr	r3, [r7, #28]
 8017cf0:	4413      	add	r3, r2
 8017cf2:	781b      	ldrb	r3, [r3, #0]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d006      	beq.n	8017d06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017cf8:	69fb      	ldr	r3, [r7, #28]
 8017cfa:	3301      	adds	r3, #1
 8017cfc:	61fb      	str	r3, [r7, #28]
 8017cfe:	69fb      	ldr	r3, [r7, #28]
 8017d00:	2b0f      	cmp	r3, #15
 8017d02:	d9e9      	bls.n	8017cd8 <prvInitialiseNewTask+0x64>
 8017d04:	e000      	b.n	8017d08 <prvInitialiseNewTask+0x94>
			{
				break;
 8017d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017d10:	e003      	b.n	8017d1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d14:	2200      	movs	r2, #0
 8017d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d1c:	2b37      	cmp	r3, #55	; 0x37
 8017d1e:	d901      	bls.n	8017d24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017d20:	2337      	movs	r3, #55	; 0x37
 8017d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d32:	2200      	movs	r2, #0
 8017d34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d38:	3304      	adds	r3, #4
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f7fe fb50 	bl	80163e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d42:	3318      	adds	r3, #24
 8017d44:	4618      	mov	r0, r3
 8017d46:	f7fe fb4b 	bl	80163e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d62:	2200      	movs	r2, #0
 8017d64:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d68:	2200      	movs	r2, #0
 8017d6a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d6e:	2200      	movs	r2, #0
 8017d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017d74:	683a      	ldr	r2, [r7, #0]
 8017d76:	68f9      	ldr	r1, [r7, #12]
 8017d78:	69b8      	ldr	r0, [r7, #24]
 8017d7a:	f7fe fbc5 	bl	8016508 <pxPortInitialiseStack>
 8017d7e:	4602      	mov	r2, r0
 8017d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d002      	beq.n	8017d90 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017d90:	bf00      	nop
 8017d92:	3720      	adds	r7, #32
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bd80      	pop	{r7, pc}

08017d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b082      	sub	sp, #8
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017da0:	f7fe fce0 	bl	8016764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017da4:	4b2d      	ldr	r3, [pc, #180]	; (8017e5c <prvAddNewTaskToReadyList+0xc4>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	3301      	adds	r3, #1
 8017daa:	4a2c      	ldr	r2, [pc, #176]	; (8017e5c <prvAddNewTaskToReadyList+0xc4>)
 8017dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017dae:	4b2c      	ldr	r3, [pc, #176]	; (8017e60 <prvAddNewTaskToReadyList+0xc8>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d109      	bne.n	8017dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017db6:	4a2a      	ldr	r2, [pc, #168]	; (8017e60 <prvAddNewTaskToReadyList+0xc8>)
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017dbc:	4b27      	ldr	r3, [pc, #156]	; (8017e5c <prvAddNewTaskToReadyList+0xc4>)
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	2b01      	cmp	r3, #1
 8017dc2:	d110      	bne.n	8017de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017dc4:	f000 fc68 	bl	8018698 <prvInitialiseTaskLists>
 8017dc8:	e00d      	b.n	8017de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017dca:	4b26      	ldr	r3, [pc, #152]	; (8017e64 <prvAddNewTaskToReadyList+0xcc>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d109      	bne.n	8017de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017dd2:	4b23      	ldr	r3, [pc, #140]	; (8017e60 <prvAddNewTaskToReadyList+0xc8>)
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ddc:	429a      	cmp	r2, r3
 8017dde:	d802      	bhi.n	8017de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017de0:	4a1f      	ldr	r2, [pc, #124]	; (8017e60 <prvAddNewTaskToReadyList+0xc8>)
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017de6:	4b20      	ldr	r3, [pc, #128]	; (8017e68 <prvAddNewTaskToReadyList+0xd0>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	3301      	adds	r3, #1
 8017dec:	4a1e      	ldr	r2, [pc, #120]	; (8017e68 <prvAddNewTaskToReadyList+0xd0>)
 8017dee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017df0:	4b1d      	ldr	r3, [pc, #116]	; (8017e68 <prvAddNewTaskToReadyList+0xd0>)
 8017df2:	681a      	ldr	r2, [r3, #0]
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dfc:	4b1b      	ldr	r3, [pc, #108]	; (8017e6c <prvAddNewTaskToReadyList+0xd4>)
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	429a      	cmp	r2, r3
 8017e02:	d903      	bls.n	8017e0c <prvAddNewTaskToReadyList+0x74>
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e08:	4a18      	ldr	r2, [pc, #96]	; (8017e6c <prvAddNewTaskToReadyList+0xd4>)
 8017e0a:	6013      	str	r3, [r2, #0]
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e10:	4613      	mov	r3, r2
 8017e12:	009b      	lsls	r3, r3, #2
 8017e14:	4413      	add	r3, r2
 8017e16:	009b      	lsls	r3, r3, #2
 8017e18:	4a15      	ldr	r2, [pc, #84]	; (8017e70 <prvAddNewTaskToReadyList+0xd8>)
 8017e1a:	441a      	add	r2, r3
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	3304      	adds	r3, #4
 8017e20:	4619      	mov	r1, r3
 8017e22:	4610      	mov	r0, r2
 8017e24:	f7fe fae9 	bl	80163fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017e28:	f7fe fccc 	bl	80167c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017e2c:	4b0d      	ldr	r3, [pc, #52]	; (8017e64 <prvAddNewTaskToReadyList+0xcc>)
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d00e      	beq.n	8017e52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017e34:	4b0a      	ldr	r3, [pc, #40]	; (8017e60 <prvAddNewTaskToReadyList+0xc8>)
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	d207      	bcs.n	8017e52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017e42:	4b0c      	ldr	r3, [pc, #48]	; (8017e74 <prvAddNewTaskToReadyList+0xdc>)
 8017e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e48:	601a      	str	r2, [r3, #0]
 8017e4a:	f3bf 8f4f 	dsb	sy
 8017e4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017e52:	bf00      	nop
 8017e54:	3708      	adds	r7, #8
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd80      	pop	{r7, pc}
 8017e5a:	bf00      	nop
 8017e5c:	24024b64 	.word	0x24024b64
 8017e60:	24024690 	.word	0x24024690
 8017e64:	24024b70 	.word	0x24024b70
 8017e68:	24024b80 	.word	0x24024b80
 8017e6c:	24024b6c 	.word	0x24024b6c
 8017e70:	24024694 	.word	0x24024694
 8017e74:	e000ed04 	.word	0xe000ed04

08017e78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b084      	sub	sp, #16
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017e80:	2300      	movs	r3, #0
 8017e82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d017      	beq.n	8017eba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017e8a:	4b13      	ldr	r3, [pc, #76]	; (8017ed8 <vTaskDelay+0x60>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d00a      	beq.n	8017ea8 <vTaskDelay+0x30>
	__asm volatile
 8017e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e96:	f383 8811 	msr	BASEPRI, r3
 8017e9a:	f3bf 8f6f 	isb	sy
 8017e9e:	f3bf 8f4f 	dsb	sy
 8017ea2:	60bb      	str	r3, [r7, #8]
}
 8017ea4:	bf00      	nop
 8017ea6:	e7fe      	b.n	8017ea6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017ea8:	f000 f888 	bl	8017fbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017eac:	2100      	movs	r1, #0
 8017eae:	6878      	ldr	r0, [r7, #4]
 8017eb0:	f000 fe4a 	bl	8018b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017eb4:	f000 f890 	bl	8017fd8 <xTaskResumeAll>
 8017eb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d107      	bne.n	8017ed0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017ec0:	4b06      	ldr	r3, [pc, #24]	; (8017edc <vTaskDelay+0x64>)
 8017ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ec6:	601a      	str	r2, [r3, #0]
 8017ec8:	f3bf 8f4f 	dsb	sy
 8017ecc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017ed0:	bf00      	nop
 8017ed2:	3710      	adds	r7, #16
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd80      	pop	{r7, pc}
 8017ed8:	24024b8c 	.word	0x24024b8c
 8017edc:	e000ed04 	.word	0xe000ed04

08017ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b08a      	sub	sp, #40	; 0x28
 8017ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017eea:	2300      	movs	r3, #0
 8017eec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017eee:	463a      	mov	r2, r7
 8017ef0:	1d39      	adds	r1, r7, #4
 8017ef2:	f107 0308 	add.w	r3, r7, #8
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f7fe f832 	bl	8015f60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017efc:	6839      	ldr	r1, [r7, #0]
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	68ba      	ldr	r2, [r7, #8]
 8017f02:	9202      	str	r2, [sp, #8]
 8017f04:	9301      	str	r3, [sp, #4]
 8017f06:	2300      	movs	r3, #0
 8017f08:	9300      	str	r3, [sp, #0]
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	460a      	mov	r2, r1
 8017f0e:	4924      	ldr	r1, [pc, #144]	; (8017fa0 <vTaskStartScheduler+0xc0>)
 8017f10:	4824      	ldr	r0, [pc, #144]	; (8017fa4 <vTaskStartScheduler+0xc4>)
 8017f12:	f7ff fe0d 	bl	8017b30 <xTaskCreateStatic>
 8017f16:	4603      	mov	r3, r0
 8017f18:	4a23      	ldr	r2, [pc, #140]	; (8017fa8 <vTaskStartScheduler+0xc8>)
 8017f1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017f1c:	4b22      	ldr	r3, [pc, #136]	; (8017fa8 <vTaskStartScheduler+0xc8>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d002      	beq.n	8017f2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017f24:	2301      	movs	r3, #1
 8017f26:	617b      	str	r3, [r7, #20]
 8017f28:	e001      	b.n	8017f2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017f2e:	697b      	ldr	r3, [r7, #20]
 8017f30:	2b01      	cmp	r3, #1
 8017f32:	d102      	bne.n	8017f3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017f34:	f000 fe5c 	bl	8018bf0 <xTimerCreateTimerTask>
 8017f38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017f3a:	697b      	ldr	r3, [r7, #20]
 8017f3c:	2b01      	cmp	r3, #1
 8017f3e:	d11c      	bne.n	8017f7a <vTaskStartScheduler+0x9a>
	__asm volatile
 8017f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f44:	f383 8811 	msr	BASEPRI, r3
 8017f48:	f3bf 8f6f 	isb	sy
 8017f4c:	f3bf 8f4f 	dsb	sy
 8017f50:	613b      	str	r3, [r7, #16]
}
 8017f52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017f54:	4b15      	ldr	r3, [pc, #84]	; (8017fac <vTaskStartScheduler+0xcc>)
 8017f56:	f04f 32ff 	mov.w	r2, #4294967295
 8017f5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017f5c:	4b14      	ldr	r3, [pc, #80]	; (8017fb0 <vTaskStartScheduler+0xd0>)
 8017f5e:	2201      	movs	r2, #1
 8017f60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017f62:	4b14      	ldr	r3, [pc, #80]	; (8017fb4 <vTaskStartScheduler+0xd4>)
 8017f64:	2200      	movs	r2, #0
 8017f66:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8017f68:	4b13      	ldr	r3, [pc, #76]	; (8017fb8 <vTaskStartScheduler+0xd8>)
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	2100      	movs	r1, #0
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f000 f9b6 	bl	80182e0 <xTaskCallApplicationTaskHook>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017f74:	f7fe fb54 	bl	8016620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017f78:	e00e      	b.n	8017f98 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017f7a:	697b      	ldr	r3, [r7, #20]
 8017f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f80:	d10a      	bne.n	8017f98 <vTaskStartScheduler+0xb8>
	__asm volatile
 8017f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f86:	f383 8811 	msr	BASEPRI, r3
 8017f8a:	f3bf 8f6f 	isb	sy
 8017f8e:	f3bf 8f4f 	dsb	sy
 8017f92:	60fb      	str	r3, [r7, #12]
}
 8017f94:	bf00      	nop
 8017f96:	e7fe      	b.n	8017f96 <vTaskStartScheduler+0xb6>
}
 8017f98:	bf00      	nop
 8017f9a:	3718      	adds	r7, #24
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	bd80      	pop	{r7, pc}
 8017fa0:	0802ac94 	.word	0x0802ac94
 8017fa4:	08018665 	.word	0x08018665
 8017fa8:	24024b88 	.word	0x24024b88
 8017fac:	24024b84 	.word	0x24024b84
 8017fb0:	24024b70 	.word	0x24024b70
 8017fb4:	24024b68 	.word	0x24024b68
 8017fb8:	24024690 	.word	0x24024690

08017fbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017fbc:	b480      	push	{r7}
 8017fbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017fc0:	4b04      	ldr	r3, [pc, #16]	; (8017fd4 <vTaskSuspendAll+0x18>)
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	3301      	adds	r3, #1
 8017fc6:	4a03      	ldr	r2, [pc, #12]	; (8017fd4 <vTaskSuspendAll+0x18>)
 8017fc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017fca:	bf00      	nop
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd2:	4770      	bx	lr
 8017fd4:	24024b8c 	.word	0x24024b8c

08017fd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b084      	sub	sp, #16
 8017fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017fde:	2300      	movs	r3, #0
 8017fe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017fe6:	4b42      	ldr	r3, [pc, #264]	; (80180f0 <xTaskResumeAll+0x118>)
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d10a      	bne.n	8018004 <xTaskResumeAll+0x2c>
	__asm volatile
 8017fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ff2:	f383 8811 	msr	BASEPRI, r3
 8017ff6:	f3bf 8f6f 	isb	sy
 8017ffa:	f3bf 8f4f 	dsb	sy
 8017ffe:	603b      	str	r3, [r7, #0]
}
 8018000:	bf00      	nop
 8018002:	e7fe      	b.n	8018002 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018004:	f7fe fbae 	bl	8016764 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018008:	4b39      	ldr	r3, [pc, #228]	; (80180f0 <xTaskResumeAll+0x118>)
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	3b01      	subs	r3, #1
 801800e:	4a38      	ldr	r2, [pc, #224]	; (80180f0 <xTaskResumeAll+0x118>)
 8018010:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018012:	4b37      	ldr	r3, [pc, #220]	; (80180f0 <xTaskResumeAll+0x118>)
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d162      	bne.n	80180e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801801a:	4b36      	ldr	r3, [pc, #216]	; (80180f4 <xTaskResumeAll+0x11c>)
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d05e      	beq.n	80180e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018022:	e02f      	b.n	8018084 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018024:	4b34      	ldr	r3, [pc, #208]	; (80180f8 <xTaskResumeAll+0x120>)
 8018026:	68db      	ldr	r3, [r3, #12]
 8018028:	68db      	ldr	r3, [r3, #12]
 801802a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	3318      	adds	r3, #24
 8018030:	4618      	mov	r0, r3
 8018032:	f7fe fa3f 	bl	80164b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	3304      	adds	r3, #4
 801803a:	4618      	mov	r0, r3
 801803c:	f7fe fa3a 	bl	80164b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018044:	4b2d      	ldr	r3, [pc, #180]	; (80180fc <xTaskResumeAll+0x124>)
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	429a      	cmp	r2, r3
 801804a:	d903      	bls.n	8018054 <xTaskResumeAll+0x7c>
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018050:	4a2a      	ldr	r2, [pc, #168]	; (80180fc <xTaskResumeAll+0x124>)
 8018052:	6013      	str	r3, [r2, #0]
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018058:	4613      	mov	r3, r2
 801805a:	009b      	lsls	r3, r3, #2
 801805c:	4413      	add	r3, r2
 801805e:	009b      	lsls	r3, r3, #2
 8018060:	4a27      	ldr	r2, [pc, #156]	; (8018100 <xTaskResumeAll+0x128>)
 8018062:	441a      	add	r2, r3
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	3304      	adds	r3, #4
 8018068:	4619      	mov	r1, r3
 801806a:	4610      	mov	r0, r2
 801806c:	f7fe f9c5 	bl	80163fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018074:	4b23      	ldr	r3, [pc, #140]	; (8018104 <xTaskResumeAll+0x12c>)
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801807a:	429a      	cmp	r2, r3
 801807c:	d302      	bcc.n	8018084 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801807e:	4b22      	ldr	r3, [pc, #136]	; (8018108 <xTaskResumeAll+0x130>)
 8018080:	2201      	movs	r2, #1
 8018082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018084:	4b1c      	ldr	r3, [pc, #112]	; (80180f8 <xTaskResumeAll+0x120>)
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d1cb      	bne.n	8018024 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d001      	beq.n	8018096 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018092:	f000 fb9f 	bl	80187d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018096:	4b1d      	ldr	r3, [pc, #116]	; (801810c <xTaskResumeAll+0x134>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d010      	beq.n	80180c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80180a2:	f000 f847 	bl	8018134 <xTaskIncrementTick>
 80180a6:	4603      	mov	r3, r0
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d002      	beq.n	80180b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80180ac:	4b16      	ldr	r3, [pc, #88]	; (8018108 <xTaskResumeAll+0x130>)
 80180ae:	2201      	movs	r2, #1
 80180b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	3b01      	subs	r3, #1
 80180b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d1f1      	bne.n	80180a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80180be:	4b13      	ldr	r3, [pc, #76]	; (801810c <xTaskResumeAll+0x134>)
 80180c0:	2200      	movs	r2, #0
 80180c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80180c4:	4b10      	ldr	r3, [pc, #64]	; (8018108 <xTaskResumeAll+0x130>)
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d009      	beq.n	80180e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80180cc:	2301      	movs	r3, #1
 80180ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80180d0:	4b0f      	ldr	r3, [pc, #60]	; (8018110 <xTaskResumeAll+0x138>)
 80180d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180d6:	601a      	str	r2, [r3, #0]
 80180d8:	f3bf 8f4f 	dsb	sy
 80180dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80180e0:	f7fe fb70 	bl	80167c4 <vPortExitCritical>

	return xAlreadyYielded;
 80180e4:	68bb      	ldr	r3, [r7, #8]
}
 80180e6:	4618      	mov	r0, r3
 80180e8:	3710      	adds	r7, #16
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	bf00      	nop
 80180f0:	24024b8c 	.word	0x24024b8c
 80180f4:	24024b64 	.word	0x24024b64
 80180f8:	24024b24 	.word	0x24024b24
 80180fc:	24024b6c 	.word	0x24024b6c
 8018100:	24024694 	.word	0x24024694
 8018104:	24024690 	.word	0x24024690
 8018108:	24024b78 	.word	0x24024b78
 801810c:	24024b74 	.word	0x24024b74
 8018110:	e000ed04 	.word	0xe000ed04

08018114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018114:	b480      	push	{r7}
 8018116:	b083      	sub	sp, #12
 8018118:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801811a:	4b05      	ldr	r3, [pc, #20]	; (8018130 <xTaskGetTickCount+0x1c>)
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018120:	687b      	ldr	r3, [r7, #4]
}
 8018122:	4618      	mov	r0, r3
 8018124:	370c      	adds	r7, #12
 8018126:	46bd      	mov	sp, r7
 8018128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812c:	4770      	bx	lr
 801812e:	bf00      	nop
 8018130:	24024b68 	.word	0x24024b68

08018134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018134:	b580      	push	{r7, lr}
 8018136:	b086      	sub	sp, #24
 8018138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801813a:	2300      	movs	r3, #0
 801813c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801813e:	4b4f      	ldr	r3, [pc, #316]	; (801827c <xTaskIncrementTick+0x148>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	2b00      	cmp	r3, #0
 8018144:	f040 808f 	bne.w	8018266 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018148:	4b4d      	ldr	r3, [pc, #308]	; (8018280 <xTaskIncrementTick+0x14c>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	3301      	adds	r3, #1
 801814e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018150:	4a4b      	ldr	r2, [pc, #300]	; (8018280 <xTaskIncrementTick+0x14c>)
 8018152:	693b      	ldr	r3, [r7, #16]
 8018154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018156:	693b      	ldr	r3, [r7, #16]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d120      	bne.n	801819e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801815c:	4b49      	ldr	r3, [pc, #292]	; (8018284 <xTaskIncrementTick+0x150>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d00a      	beq.n	801817c <xTaskIncrementTick+0x48>
	__asm volatile
 8018166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801816a:	f383 8811 	msr	BASEPRI, r3
 801816e:	f3bf 8f6f 	isb	sy
 8018172:	f3bf 8f4f 	dsb	sy
 8018176:	603b      	str	r3, [r7, #0]
}
 8018178:	bf00      	nop
 801817a:	e7fe      	b.n	801817a <xTaskIncrementTick+0x46>
 801817c:	4b41      	ldr	r3, [pc, #260]	; (8018284 <xTaskIncrementTick+0x150>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	60fb      	str	r3, [r7, #12]
 8018182:	4b41      	ldr	r3, [pc, #260]	; (8018288 <xTaskIncrementTick+0x154>)
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	4a3f      	ldr	r2, [pc, #252]	; (8018284 <xTaskIncrementTick+0x150>)
 8018188:	6013      	str	r3, [r2, #0]
 801818a:	4a3f      	ldr	r2, [pc, #252]	; (8018288 <xTaskIncrementTick+0x154>)
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	6013      	str	r3, [r2, #0]
 8018190:	4b3e      	ldr	r3, [pc, #248]	; (801828c <xTaskIncrementTick+0x158>)
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	3301      	adds	r3, #1
 8018196:	4a3d      	ldr	r2, [pc, #244]	; (801828c <xTaskIncrementTick+0x158>)
 8018198:	6013      	str	r3, [r2, #0]
 801819a:	f000 fb1b 	bl	80187d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801819e:	4b3c      	ldr	r3, [pc, #240]	; (8018290 <xTaskIncrementTick+0x15c>)
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	693a      	ldr	r2, [r7, #16]
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d349      	bcc.n	801823c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80181a8:	4b36      	ldr	r3, [pc, #216]	; (8018284 <xTaskIncrementTick+0x150>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d104      	bne.n	80181bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80181b2:	4b37      	ldr	r3, [pc, #220]	; (8018290 <xTaskIncrementTick+0x15c>)
 80181b4:	f04f 32ff 	mov.w	r2, #4294967295
 80181b8:	601a      	str	r2, [r3, #0]
					break;
 80181ba:	e03f      	b.n	801823c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80181bc:	4b31      	ldr	r3, [pc, #196]	; (8018284 <xTaskIncrementTick+0x150>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	68db      	ldr	r3, [r3, #12]
 80181c2:	68db      	ldr	r3, [r3, #12]
 80181c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80181c6:	68bb      	ldr	r3, [r7, #8]
 80181c8:	685b      	ldr	r3, [r3, #4]
 80181ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80181cc:	693a      	ldr	r2, [r7, #16]
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	429a      	cmp	r2, r3
 80181d2:	d203      	bcs.n	80181dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80181d4:	4a2e      	ldr	r2, [pc, #184]	; (8018290 <xTaskIncrementTick+0x15c>)
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80181da:	e02f      	b.n	801823c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	3304      	adds	r3, #4
 80181e0:	4618      	mov	r0, r3
 80181e2:	f7fe f967 	bl	80164b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d004      	beq.n	80181f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80181ee:	68bb      	ldr	r3, [r7, #8]
 80181f0:	3318      	adds	r3, #24
 80181f2:	4618      	mov	r0, r3
 80181f4:	f7fe f95e 	bl	80164b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80181f8:	68bb      	ldr	r3, [r7, #8]
 80181fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181fc:	4b25      	ldr	r3, [pc, #148]	; (8018294 <xTaskIncrementTick+0x160>)
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	429a      	cmp	r2, r3
 8018202:	d903      	bls.n	801820c <xTaskIncrementTick+0xd8>
 8018204:	68bb      	ldr	r3, [r7, #8]
 8018206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018208:	4a22      	ldr	r2, [pc, #136]	; (8018294 <xTaskIncrementTick+0x160>)
 801820a:	6013      	str	r3, [r2, #0]
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018210:	4613      	mov	r3, r2
 8018212:	009b      	lsls	r3, r3, #2
 8018214:	4413      	add	r3, r2
 8018216:	009b      	lsls	r3, r3, #2
 8018218:	4a1f      	ldr	r2, [pc, #124]	; (8018298 <xTaskIncrementTick+0x164>)
 801821a:	441a      	add	r2, r3
 801821c:	68bb      	ldr	r3, [r7, #8]
 801821e:	3304      	adds	r3, #4
 8018220:	4619      	mov	r1, r3
 8018222:	4610      	mov	r0, r2
 8018224:	f7fe f8e9 	bl	80163fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018228:	68bb      	ldr	r3, [r7, #8]
 801822a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801822c:	4b1b      	ldr	r3, [pc, #108]	; (801829c <xTaskIncrementTick+0x168>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018232:	429a      	cmp	r2, r3
 8018234:	d3b8      	bcc.n	80181a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018236:	2301      	movs	r3, #1
 8018238:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801823a:	e7b5      	b.n	80181a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801823c:	4b17      	ldr	r3, [pc, #92]	; (801829c <xTaskIncrementTick+0x168>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018242:	4915      	ldr	r1, [pc, #84]	; (8018298 <xTaskIncrementTick+0x164>)
 8018244:	4613      	mov	r3, r2
 8018246:	009b      	lsls	r3, r3, #2
 8018248:	4413      	add	r3, r2
 801824a:	009b      	lsls	r3, r3, #2
 801824c:	440b      	add	r3, r1
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	2b01      	cmp	r3, #1
 8018252:	d901      	bls.n	8018258 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018254:	2301      	movs	r3, #1
 8018256:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018258:	4b11      	ldr	r3, [pc, #68]	; (80182a0 <xTaskIncrementTick+0x16c>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d007      	beq.n	8018270 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018260:	2301      	movs	r3, #1
 8018262:	617b      	str	r3, [r7, #20]
 8018264:	e004      	b.n	8018270 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018266:	4b0f      	ldr	r3, [pc, #60]	; (80182a4 <xTaskIncrementTick+0x170>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	3301      	adds	r3, #1
 801826c:	4a0d      	ldr	r2, [pc, #52]	; (80182a4 <xTaskIncrementTick+0x170>)
 801826e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018270:	697b      	ldr	r3, [r7, #20]
}
 8018272:	4618      	mov	r0, r3
 8018274:	3718      	adds	r7, #24
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}
 801827a:	bf00      	nop
 801827c:	24024b8c 	.word	0x24024b8c
 8018280:	24024b68 	.word	0x24024b68
 8018284:	24024b1c 	.word	0x24024b1c
 8018288:	24024b20 	.word	0x24024b20
 801828c:	24024b7c 	.word	0x24024b7c
 8018290:	24024b84 	.word	0x24024b84
 8018294:	24024b6c 	.word	0x24024b6c
 8018298:	24024694 	.word	0x24024694
 801829c:	24024690 	.word	0x24024690
 80182a0:	24024b78 	.word	0x24024b78
 80182a4:	24024b74 	.word	0x24024b74

080182a8 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b084      	sub	sp, #16
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
 80182b0:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d103      	bne.n	80182c0 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80182b8:	4b08      	ldr	r3, [pc, #32]	; (80182dc <vTaskSetApplicationTaskTag+0x34>)
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	60fb      	str	r3, [r7, #12]
 80182be:	e001      	b.n	80182c4 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80182c4:	f7fe fa4e 	bl	8016764 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	683a      	ldr	r2, [r7, #0]
 80182cc:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80182ce:	f7fe fa79 	bl	80167c4 <vPortExitCritical>
	}
 80182d2:	bf00      	nop
 80182d4:	3710      	adds	r7, #16
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd80      	pop	{r7, pc}
 80182da:	bf00      	nop
 80182dc:	24024690 	.word	0x24024690

080182e0 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b084      	sub	sp, #16
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
 80182e8:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d103      	bne.n	80182f8 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = pxCurrentTCB;
 80182f0:	4b0b      	ldr	r3, [pc, #44]	; (8018320 <xTaskCallApplicationTaskHook+0x40>)
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	60fb      	str	r3, [r7, #12]
 80182f6:	e001      	b.n	80182fc <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = xTask;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018300:	2b00      	cmp	r3, #0
 8018302:	d005      	beq.n	8018310 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018308:	6838      	ldr	r0, [r7, #0]
 801830a:	4798      	blx	r3
 801830c:	60b8      	str	r0, [r7, #8]
 801830e:	e001      	b.n	8018314 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8018310:	2300      	movs	r3, #0
 8018312:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8018314:	68bb      	ldr	r3, [r7, #8]
	}
 8018316:	4618      	mov	r0, r3
 8018318:	3710      	adds	r7, #16
 801831a:	46bd      	mov	sp, r7
 801831c:	bd80      	pop	{r7, pc}
 801831e:	bf00      	nop
 8018320:	24024690 	.word	0x24024690

08018324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b084      	sub	sp, #16
 8018328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801832a:	4b2d      	ldr	r3, [pc, #180]	; (80183e0 <vTaskSwitchContext+0xbc>)
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d003      	beq.n	801833a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018332:	4b2c      	ldr	r3, [pc, #176]	; (80183e4 <vTaskSwitchContext+0xc0>)
 8018334:	2201      	movs	r2, #1
 8018336:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018338:	e04d      	b.n	80183d6 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 801833a:	4b2a      	ldr	r3, [pc, #168]	; (80183e4 <vTaskSwitchContext+0xc0>)
 801833c:	2200      	movs	r2, #0
 801833e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8018340:	4b29      	ldr	r3, [pc, #164]	; (80183e8 <vTaskSwitchContext+0xc4>)
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	2101      	movs	r1, #1
 8018346:	4618      	mov	r0, r3
 8018348:	f7ff ffca 	bl	80182e0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801834c:	4b27      	ldr	r3, [pc, #156]	; (80183ec <vTaskSwitchContext+0xc8>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	60fb      	str	r3, [r7, #12]
 8018352:	e010      	b.n	8018376 <vTaskSwitchContext+0x52>
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d10a      	bne.n	8018370 <vTaskSwitchContext+0x4c>
	__asm volatile
 801835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801835e:	f383 8811 	msr	BASEPRI, r3
 8018362:	f3bf 8f6f 	isb	sy
 8018366:	f3bf 8f4f 	dsb	sy
 801836a:	607b      	str	r3, [r7, #4]
}
 801836c:	bf00      	nop
 801836e:	e7fe      	b.n	801836e <vTaskSwitchContext+0x4a>
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	3b01      	subs	r3, #1
 8018374:	60fb      	str	r3, [r7, #12]
 8018376:	491e      	ldr	r1, [pc, #120]	; (80183f0 <vTaskSwitchContext+0xcc>)
 8018378:	68fa      	ldr	r2, [r7, #12]
 801837a:	4613      	mov	r3, r2
 801837c:	009b      	lsls	r3, r3, #2
 801837e:	4413      	add	r3, r2
 8018380:	009b      	lsls	r3, r3, #2
 8018382:	440b      	add	r3, r1
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	2b00      	cmp	r3, #0
 8018388:	d0e4      	beq.n	8018354 <vTaskSwitchContext+0x30>
 801838a:	68fa      	ldr	r2, [r7, #12]
 801838c:	4613      	mov	r3, r2
 801838e:	009b      	lsls	r3, r3, #2
 8018390:	4413      	add	r3, r2
 8018392:	009b      	lsls	r3, r3, #2
 8018394:	4a16      	ldr	r2, [pc, #88]	; (80183f0 <vTaskSwitchContext+0xcc>)
 8018396:	4413      	add	r3, r2
 8018398:	60bb      	str	r3, [r7, #8]
 801839a:	68bb      	ldr	r3, [r7, #8]
 801839c:	685b      	ldr	r3, [r3, #4]
 801839e:	685a      	ldr	r2, [r3, #4]
 80183a0:	68bb      	ldr	r3, [r7, #8]
 80183a2:	605a      	str	r2, [r3, #4]
 80183a4:	68bb      	ldr	r3, [r7, #8]
 80183a6:	685a      	ldr	r2, [r3, #4]
 80183a8:	68bb      	ldr	r3, [r7, #8]
 80183aa:	3308      	adds	r3, #8
 80183ac:	429a      	cmp	r2, r3
 80183ae:	d104      	bne.n	80183ba <vTaskSwitchContext+0x96>
 80183b0:	68bb      	ldr	r3, [r7, #8]
 80183b2:	685b      	ldr	r3, [r3, #4]
 80183b4:	685a      	ldr	r2, [r3, #4]
 80183b6:	68bb      	ldr	r3, [r7, #8]
 80183b8:	605a      	str	r2, [r3, #4]
 80183ba:	68bb      	ldr	r3, [r7, #8]
 80183bc:	685b      	ldr	r3, [r3, #4]
 80183be:	68db      	ldr	r3, [r3, #12]
 80183c0:	4a09      	ldr	r2, [pc, #36]	; (80183e8 <vTaskSwitchContext+0xc4>)
 80183c2:	6013      	str	r3, [r2, #0]
 80183c4:	4a09      	ldr	r2, [pc, #36]	; (80183ec <vTaskSwitchContext+0xc8>)
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80183ca:	4b07      	ldr	r3, [pc, #28]	; (80183e8 <vTaskSwitchContext+0xc4>)
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	2100      	movs	r1, #0
 80183d0:	4618      	mov	r0, r3
 80183d2:	f7ff ff85 	bl	80182e0 <xTaskCallApplicationTaskHook>
}
 80183d6:	bf00      	nop
 80183d8:	3710      	adds	r7, #16
 80183da:	46bd      	mov	sp, r7
 80183dc:	bd80      	pop	{r7, pc}
 80183de:	bf00      	nop
 80183e0:	24024b8c 	.word	0x24024b8c
 80183e4:	24024b78 	.word	0x24024b78
 80183e8:	24024690 	.word	0x24024690
 80183ec:	24024b6c 	.word	0x24024b6c
 80183f0:	24024694 	.word	0x24024694

080183f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b084      	sub	sp, #16
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	6078      	str	r0, [r7, #4]
 80183fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d10a      	bne.n	801841a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018408:	f383 8811 	msr	BASEPRI, r3
 801840c:	f3bf 8f6f 	isb	sy
 8018410:	f3bf 8f4f 	dsb	sy
 8018414:	60fb      	str	r3, [r7, #12]
}
 8018416:	bf00      	nop
 8018418:	e7fe      	b.n	8018418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801841a:	4b07      	ldr	r3, [pc, #28]	; (8018438 <vTaskPlaceOnEventList+0x44>)
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	3318      	adds	r3, #24
 8018420:	4619      	mov	r1, r3
 8018422:	6878      	ldr	r0, [r7, #4]
 8018424:	f7fe f80d 	bl	8016442 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018428:	2101      	movs	r1, #1
 801842a:	6838      	ldr	r0, [r7, #0]
 801842c:	f000 fb8c 	bl	8018b48 <prvAddCurrentTaskToDelayedList>
}
 8018430:	bf00      	nop
 8018432:	3710      	adds	r7, #16
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}
 8018438:	24024690 	.word	0x24024690

0801843c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801843c:	b580      	push	{r7, lr}
 801843e:	b086      	sub	sp, #24
 8018440:	af00      	add	r7, sp, #0
 8018442:	60f8      	str	r0, [r7, #12]
 8018444:	60b9      	str	r1, [r7, #8]
 8018446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d10a      	bne.n	8018464 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018452:	f383 8811 	msr	BASEPRI, r3
 8018456:	f3bf 8f6f 	isb	sy
 801845a:	f3bf 8f4f 	dsb	sy
 801845e:	617b      	str	r3, [r7, #20]
}
 8018460:	bf00      	nop
 8018462:	e7fe      	b.n	8018462 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018464:	4b0a      	ldr	r3, [pc, #40]	; (8018490 <vTaskPlaceOnEventListRestricted+0x54>)
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	3318      	adds	r3, #24
 801846a:	4619      	mov	r1, r3
 801846c:	68f8      	ldr	r0, [r7, #12]
 801846e:	f7fd ffc4 	bl	80163fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d002      	beq.n	801847e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018478:	f04f 33ff 	mov.w	r3, #4294967295
 801847c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801847e:	6879      	ldr	r1, [r7, #4]
 8018480:	68b8      	ldr	r0, [r7, #8]
 8018482:	f000 fb61 	bl	8018b48 <prvAddCurrentTaskToDelayedList>
	}
 8018486:	bf00      	nop
 8018488:	3718      	adds	r7, #24
 801848a:	46bd      	mov	sp, r7
 801848c:	bd80      	pop	{r7, pc}
 801848e:	bf00      	nop
 8018490:	24024690 	.word	0x24024690

08018494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b086      	sub	sp, #24
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	68db      	ldr	r3, [r3, #12]
 80184a0:	68db      	ldr	r3, [r3, #12]
 80184a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80184a4:	693b      	ldr	r3, [r7, #16]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d10a      	bne.n	80184c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80184aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184ae:	f383 8811 	msr	BASEPRI, r3
 80184b2:	f3bf 8f6f 	isb	sy
 80184b6:	f3bf 8f4f 	dsb	sy
 80184ba:	60fb      	str	r3, [r7, #12]
}
 80184bc:	bf00      	nop
 80184be:	e7fe      	b.n	80184be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80184c0:	693b      	ldr	r3, [r7, #16]
 80184c2:	3318      	adds	r3, #24
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7fd fff5 	bl	80164b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80184ca:	4b1e      	ldr	r3, [pc, #120]	; (8018544 <xTaskRemoveFromEventList+0xb0>)
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d11d      	bne.n	801850e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80184d2:	693b      	ldr	r3, [r7, #16]
 80184d4:	3304      	adds	r3, #4
 80184d6:	4618      	mov	r0, r3
 80184d8:	f7fd ffec 	bl	80164b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80184dc:	693b      	ldr	r3, [r7, #16]
 80184de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184e0:	4b19      	ldr	r3, [pc, #100]	; (8018548 <xTaskRemoveFromEventList+0xb4>)
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	429a      	cmp	r2, r3
 80184e6:	d903      	bls.n	80184f0 <xTaskRemoveFromEventList+0x5c>
 80184e8:	693b      	ldr	r3, [r7, #16]
 80184ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184ec:	4a16      	ldr	r2, [pc, #88]	; (8018548 <xTaskRemoveFromEventList+0xb4>)
 80184ee:	6013      	str	r3, [r2, #0]
 80184f0:	693b      	ldr	r3, [r7, #16]
 80184f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184f4:	4613      	mov	r3, r2
 80184f6:	009b      	lsls	r3, r3, #2
 80184f8:	4413      	add	r3, r2
 80184fa:	009b      	lsls	r3, r3, #2
 80184fc:	4a13      	ldr	r2, [pc, #76]	; (801854c <xTaskRemoveFromEventList+0xb8>)
 80184fe:	441a      	add	r2, r3
 8018500:	693b      	ldr	r3, [r7, #16]
 8018502:	3304      	adds	r3, #4
 8018504:	4619      	mov	r1, r3
 8018506:	4610      	mov	r0, r2
 8018508:	f7fd ff77 	bl	80163fa <vListInsertEnd>
 801850c:	e005      	b.n	801851a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801850e:	693b      	ldr	r3, [r7, #16]
 8018510:	3318      	adds	r3, #24
 8018512:	4619      	mov	r1, r3
 8018514:	480e      	ldr	r0, [pc, #56]	; (8018550 <xTaskRemoveFromEventList+0xbc>)
 8018516:	f7fd ff70 	bl	80163fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801851a:	693b      	ldr	r3, [r7, #16]
 801851c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801851e:	4b0d      	ldr	r3, [pc, #52]	; (8018554 <xTaskRemoveFromEventList+0xc0>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018524:	429a      	cmp	r2, r3
 8018526:	d905      	bls.n	8018534 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018528:	2301      	movs	r3, #1
 801852a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801852c:	4b0a      	ldr	r3, [pc, #40]	; (8018558 <xTaskRemoveFromEventList+0xc4>)
 801852e:	2201      	movs	r2, #1
 8018530:	601a      	str	r2, [r3, #0]
 8018532:	e001      	b.n	8018538 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018534:	2300      	movs	r3, #0
 8018536:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018538:	697b      	ldr	r3, [r7, #20]
}
 801853a:	4618      	mov	r0, r3
 801853c:	3718      	adds	r7, #24
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}
 8018542:	bf00      	nop
 8018544:	24024b8c 	.word	0x24024b8c
 8018548:	24024b6c 	.word	0x24024b6c
 801854c:	24024694 	.word	0x24024694
 8018550:	24024b24 	.word	0x24024b24
 8018554:	24024690 	.word	0x24024690
 8018558:	24024b78 	.word	0x24024b78

0801855c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801855c:	b480      	push	{r7}
 801855e:	b083      	sub	sp, #12
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018564:	4b06      	ldr	r3, [pc, #24]	; (8018580 <vTaskInternalSetTimeOutState+0x24>)
 8018566:	681a      	ldr	r2, [r3, #0]
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801856c:	4b05      	ldr	r3, [pc, #20]	; (8018584 <vTaskInternalSetTimeOutState+0x28>)
 801856e:	681a      	ldr	r2, [r3, #0]
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	605a      	str	r2, [r3, #4]
}
 8018574:	bf00      	nop
 8018576:	370c      	adds	r7, #12
 8018578:	46bd      	mov	sp, r7
 801857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857e:	4770      	bx	lr
 8018580:	24024b7c 	.word	0x24024b7c
 8018584:	24024b68 	.word	0x24024b68

08018588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b088      	sub	sp, #32
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
 8018590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d10a      	bne.n	80185ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801859c:	f383 8811 	msr	BASEPRI, r3
 80185a0:	f3bf 8f6f 	isb	sy
 80185a4:	f3bf 8f4f 	dsb	sy
 80185a8:	613b      	str	r3, [r7, #16]
}
 80185aa:	bf00      	nop
 80185ac:	e7fe      	b.n	80185ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d10a      	bne.n	80185ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80185b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185b8:	f383 8811 	msr	BASEPRI, r3
 80185bc:	f3bf 8f6f 	isb	sy
 80185c0:	f3bf 8f4f 	dsb	sy
 80185c4:	60fb      	str	r3, [r7, #12]
}
 80185c6:	bf00      	nop
 80185c8:	e7fe      	b.n	80185c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80185ca:	f7fe f8cb 	bl	8016764 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80185ce:	4b1d      	ldr	r3, [pc, #116]	; (8018644 <xTaskCheckForTimeOut+0xbc>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	685b      	ldr	r3, [r3, #4]
 80185d8:	69ba      	ldr	r2, [r7, #24]
 80185da:	1ad3      	subs	r3, r2, r3
 80185dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80185de:	683b      	ldr	r3, [r7, #0]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185e6:	d102      	bne.n	80185ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80185e8:	2300      	movs	r3, #0
 80185ea:	61fb      	str	r3, [r7, #28]
 80185ec:	e023      	b.n	8018636 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681a      	ldr	r2, [r3, #0]
 80185f2:	4b15      	ldr	r3, [pc, #84]	; (8018648 <xTaskCheckForTimeOut+0xc0>)
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	429a      	cmp	r2, r3
 80185f8:	d007      	beq.n	801860a <xTaskCheckForTimeOut+0x82>
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	685b      	ldr	r3, [r3, #4]
 80185fe:	69ba      	ldr	r2, [r7, #24]
 8018600:	429a      	cmp	r2, r3
 8018602:	d302      	bcc.n	801860a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018604:	2301      	movs	r3, #1
 8018606:	61fb      	str	r3, [r7, #28]
 8018608:	e015      	b.n	8018636 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801860a:	683b      	ldr	r3, [r7, #0]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	697a      	ldr	r2, [r7, #20]
 8018610:	429a      	cmp	r2, r3
 8018612:	d20b      	bcs.n	801862c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018614:	683b      	ldr	r3, [r7, #0]
 8018616:	681a      	ldr	r2, [r3, #0]
 8018618:	697b      	ldr	r3, [r7, #20]
 801861a:	1ad2      	subs	r2, r2, r3
 801861c:	683b      	ldr	r3, [r7, #0]
 801861e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018620:	6878      	ldr	r0, [r7, #4]
 8018622:	f7ff ff9b 	bl	801855c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018626:	2300      	movs	r3, #0
 8018628:	61fb      	str	r3, [r7, #28]
 801862a:	e004      	b.n	8018636 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	2200      	movs	r2, #0
 8018630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018632:	2301      	movs	r3, #1
 8018634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018636:	f7fe f8c5 	bl	80167c4 <vPortExitCritical>

	return xReturn;
 801863a:	69fb      	ldr	r3, [r7, #28]
}
 801863c:	4618      	mov	r0, r3
 801863e:	3720      	adds	r7, #32
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}
 8018644:	24024b68 	.word	0x24024b68
 8018648:	24024b7c 	.word	0x24024b7c

0801864c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801864c:	b480      	push	{r7}
 801864e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018650:	4b03      	ldr	r3, [pc, #12]	; (8018660 <vTaskMissedYield+0x14>)
 8018652:	2201      	movs	r2, #1
 8018654:	601a      	str	r2, [r3, #0]
}
 8018656:	bf00      	nop
 8018658:	46bd      	mov	sp, r7
 801865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865e:	4770      	bx	lr
 8018660:	24024b78 	.word	0x24024b78

08018664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b082      	sub	sp, #8
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801866c:	f000 f854 	bl	8018718 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018670:	4b07      	ldr	r3, [pc, #28]	; (8018690 <prvIdleTask+0x2c>)
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	2b01      	cmp	r3, #1
 8018676:	d907      	bls.n	8018688 <prvIdleTask+0x24>
			{
				taskYIELD();
 8018678:	4b06      	ldr	r3, [pc, #24]	; (8018694 <prvIdleTask+0x30>)
 801867a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801867e:	601a      	str	r2, [r3, #0]
 8018680:	f3bf 8f4f 	dsb	sy
 8018684:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8018688:	f7ed fbe8 	bl	8005e5c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801868c:	e7ee      	b.n	801866c <prvIdleTask+0x8>
 801868e:	bf00      	nop
 8018690:	24024694 	.word	0x24024694
 8018694:	e000ed04 	.word	0xe000ed04

08018698 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b082      	sub	sp, #8
 801869c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801869e:	2300      	movs	r3, #0
 80186a0:	607b      	str	r3, [r7, #4]
 80186a2:	e00c      	b.n	80186be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80186a4:	687a      	ldr	r2, [r7, #4]
 80186a6:	4613      	mov	r3, r2
 80186a8:	009b      	lsls	r3, r3, #2
 80186aa:	4413      	add	r3, r2
 80186ac:	009b      	lsls	r3, r3, #2
 80186ae:	4a12      	ldr	r2, [pc, #72]	; (80186f8 <prvInitialiseTaskLists+0x60>)
 80186b0:	4413      	add	r3, r2
 80186b2:	4618      	mov	r0, r3
 80186b4:	f7fd fe74 	bl	80163a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	3301      	adds	r3, #1
 80186bc:	607b      	str	r3, [r7, #4]
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	2b37      	cmp	r3, #55	; 0x37
 80186c2:	d9ef      	bls.n	80186a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80186c4:	480d      	ldr	r0, [pc, #52]	; (80186fc <prvInitialiseTaskLists+0x64>)
 80186c6:	f7fd fe6b 	bl	80163a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80186ca:	480d      	ldr	r0, [pc, #52]	; (8018700 <prvInitialiseTaskLists+0x68>)
 80186cc:	f7fd fe68 	bl	80163a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80186d0:	480c      	ldr	r0, [pc, #48]	; (8018704 <prvInitialiseTaskLists+0x6c>)
 80186d2:	f7fd fe65 	bl	80163a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80186d6:	480c      	ldr	r0, [pc, #48]	; (8018708 <prvInitialiseTaskLists+0x70>)
 80186d8:	f7fd fe62 	bl	80163a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80186dc:	480b      	ldr	r0, [pc, #44]	; (801870c <prvInitialiseTaskLists+0x74>)
 80186de:	f7fd fe5f 	bl	80163a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80186e2:	4b0b      	ldr	r3, [pc, #44]	; (8018710 <prvInitialiseTaskLists+0x78>)
 80186e4:	4a05      	ldr	r2, [pc, #20]	; (80186fc <prvInitialiseTaskLists+0x64>)
 80186e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80186e8:	4b0a      	ldr	r3, [pc, #40]	; (8018714 <prvInitialiseTaskLists+0x7c>)
 80186ea:	4a05      	ldr	r2, [pc, #20]	; (8018700 <prvInitialiseTaskLists+0x68>)
 80186ec:	601a      	str	r2, [r3, #0]
}
 80186ee:	bf00      	nop
 80186f0:	3708      	adds	r7, #8
 80186f2:	46bd      	mov	sp, r7
 80186f4:	bd80      	pop	{r7, pc}
 80186f6:	bf00      	nop
 80186f8:	24024694 	.word	0x24024694
 80186fc:	24024af4 	.word	0x24024af4
 8018700:	24024b08 	.word	0x24024b08
 8018704:	24024b24 	.word	0x24024b24
 8018708:	24024b38 	.word	0x24024b38
 801870c:	24024b50 	.word	0x24024b50
 8018710:	24024b1c 	.word	0x24024b1c
 8018714:	24024b20 	.word	0x24024b20

08018718 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801871e:	e019      	b.n	8018754 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018720:	f7fe f820 	bl	8016764 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018724:	4b10      	ldr	r3, [pc, #64]	; (8018768 <prvCheckTasksWaitingTermination+0x50>)
 8018726:	68db      	ldr	r3, [r3, #12]
 8018728:	68db      	ldr	r3, [r3, #12]
 801872a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	3304      	adds	r3, #4
 8018730:	4618      	mov	r0, r3
 8018732:	f7fd febf 	bl	80164b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018736:	4b0d      	ldr	r3, [pc, #52]	; (801876c <prvCheckTasksWaitingTermination+0x54>)
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	3b01      	subs	r3, #1
 801873c:	4a0b      	ldr	r2, [pc, #44]	; (801876c <prvCheckTasksWaitingTermination+0x54>)
 801873e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018740:	4b0b      	ldr	r3, [pc, #44]	; (8018770 <prvCheckTasksWaitingTermination+0x58>)
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	3b01      	subs	r3, #1
 8018746:	4a0a      	ldr	r2, [pc, #40]	; (8018770 <prvCheckTasksWaitingTermination+0x58>)
 8018748:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801874a:	f7fe f83b 	bl	80167c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801874e:	6878      	ldr	r0, [r7, #4]
 8018750:	f000 f810 	bl	8018774 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018754:	4b06      	ldr	r3, [pc, #24]	; (8018770 <prvCheckTasksWaitingTermination+0x58>)
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d1e1      	bne.n	8018720 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801875c:	bf00      	nop
 801875e:	bf00      	nop
 8018760:	3708      	adds	r7, #8
 8018762:	46bd      	mov	sp, r7
 8018764:	bd80      	pop	{r7, pc}
 8018766:	bf00      	nop
 8018768:	24024b38 	.word	0x24024b38
 801876c:	24024b64 	.word	0x24024b64
 8018770:	24024b4c 	.word	0x24024b4c

08018774 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018774:	b580      	push	{r7, lr}
 8018776:	b084      	sub	sp, #16
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018782:	2b00      	cmp	r3, #0
 8018784:	d108      	bne.n	8018798 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801878a:	4618      	mov	r0, r3
 801878c:	f7fd fce8 	bl	8016160 <vPortFree>
				vPortFree( pxTCB );
 8018790:	6878      	ldr	r0, [r7, #4]
 8018792:	f7fd fce5 	bl	8016160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018796:	e018      	b.n	80187ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801879e:	2b01      	cmp	r3, #1
 80187a0:	d103      	bne.n	80187aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80187a2:	6878      	ldr	r0, [r7, #4]
 80187a4:	f7fd fcdc 	bl	8016160 <vPortFree>
	}
 80187a8:	e00f      	b.n	80187ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80187b0:	2b02      	cmp	r3, #2
 80187b2:	d00a      	beq.n	80187ca <prvDeleteTCB+0x56>
	__asm volatile
 80187b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187b8:	f383 8811 	msr	BASEPRI, r3
 80187bc:	f3bf 8f6f 	isb	sy
 80187c0:	f3bf 8f4f 	dsb	sy
 80187c4:	60fb      	str	r3, [r7, #12]
}
 80187c6:	bf00      	nop
 80187c8:	e7fe      	b.n	80187c8 <prvDeleteTCB+0x54>
	}
 80187ca:	bf00      	nop
 80187cc:	3710      	adds	r7, #16
 80187ce:	46bd      	mov	sp, r7
 80187d0:	bd80      	pop	{r7, pc}
	...

080187d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80187d4:	b480      	push	{r7}
 80187d6:	b083      	sub	sp, #12
 80187d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80187da:	4b0c      	ldr	r3, [pc, #48]	; (801880c <prvResetNextTaskUnblockTime+0x38>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d104      	bne.n	80187ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80187e4:	4b0a      	ldr	r3, [pc, #40]	; (8018810 <prvResetNextTaskUnblockTime+0x3c>)
 80187e6:	f04f 32ff 	mov.w	r2, #4294967295
 80187ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80187ec:	e008      	b.n	8018800 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187ee:	4b07      	ldr	r3, [pc, #28]	; (801880c <prvResetNextTaskUnblockTime+0x38>)
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	68db      	ldr	r3, [r3, #12]
 80187f4:	68db      	ldr	r3, [r3, #12]
 80187f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	685b      	ldr	r3, [r3, #4]
 80187fc:	4a04      	ldr	r2, [pc, #16]	; (8018810 <prvResetNextTaskUnblockTime+0x3c>)
 80187fe:	6013      	str	r3, [r2, #0]
}
 8018800:	bf00      	nop
 8018802:	370c      	adds	r7, #12
 8018804:	46bd      	mov	sp, r7
 8018806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880a:	4770      	bx	lr
 801880c:	24024b1c 	.word	0x24024b1c
 8018810:	24024b84 	.word	0x24024b84

08018814 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018814:	b480      	push	{r7}
 8018816:	b083      	sub	sp, #12
 8018818:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801881a:	4b05      	ldr	r3, [pc, #20]	; (8018830 <xTaskGetCurrentTaskHandle+0x1c>)
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018820:	687b      	ldr	r3, [r7, #4]
	}
 8018822:	4618      	mov	r0, r3
 8018824:	370c      	adds	r7, #12
 8018826:	46bd      	mov	sp, r7
 8018828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801882c:	4770      	bx	lr
 801882e:	bf00      	nop
 8018830:	24024690 	.word	0x24024690

08018834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018834:	b480      	push	{r7}
 8018836:	b083      	sub	sp, #12
 8018838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801883a:	4b0b      	ldr	r3, [pc, #44]	; (8018868 <xTaskGetSchedulerState+0x34>)
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d102      	bne.n	8018848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018842:	2301      	movs	r3, #1
 8018844:	607b      	str	r3, [r7, #4]
 8018846:	e008      	b.n	801885a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018848:	4b08      	ldr	r3, [pc, #32]	; (801886c <xTaskGetSchedulerState+0x38>)
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d102      	bne.n	8018856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018850:	2302      	movs	r3, #2
 8018852:	607b      	str	r3, [r7, #4]
 8018854:	e001      	b.n	801885a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018856:	2300      	movs	r3, #0
 8018858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801885a:	687b      	ldr	r3, [r7, #4]
	}
 801885c:	4618      	mov	r0, r3
 801885e:	370c      	adds	r7, #12
 8018860:	46bd      	mov	sp, r7
 8018862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018866:	4770      	bx	lr
 8018868:	24024b70 	.word	0x24024b70
 801886c:	24024b8c 	.word	0x24024b8c

08018870 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018870:	b580      	push	{r7, lr}
 8018872:	b084      	sub	sp, #16
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801887c:	2300      	movs	r3, #0
 801887e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d051      	beq.n	801892a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801888a:	4b2a      	ldr	r3, [pc, #168]	; (8018934 <xTaskPriorityInherit+0xc4>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018890:	429a      	cmp	r2, r3
 8018892:	d241      	bcs.n	8018918 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018894:	68bb      	ldr	r3, [r7, #8]
 8018896:	699b      	ldr	r3, [r3, #24]
 8018898:	2b00      	cmp	r3, #0
 801889a:	db06      	blt.n	80188aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801889c:	4b25      	ldr	r3, [pc, #148]	; (8018934 <xTaskPriorityInherit+0xc4>)
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80188a6:	68bb      	ldr	r3, [r7, #8]
 80188a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80188aa:	68bb      	ldr	r3, [r7, #8]
 80188ac:	6959      	ldr	r1, [r3, #20]
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188b2:	4613      	mov	r3, r2
 80188b4:	009b      	lsls	r3, r3, #2
 80188b6:	4413      	add	r3, r2
 80188b8:	009b      	lsls	r3, r3, #2
 80188ba:	4a1f      	ldr	r2, [pc, #124]	; (8018938 <xTaskPriorityInherit+0xc8>)
 80188bc:	4413      	add	r3, r2
 80188be:	4299      	cmp	r1, r3
 80188c0:	d122      	bne.n	8018908 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80188c2:	68bb      	ldr	r3, [r7, #8]
 80188c4:	3304      	adds	r3, #4
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7fd fdf4 	bl	80164b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80188cc:	4b19      	ldr	r3, [pc, #100]	; (8018934 <xTaskPriorityInherit+0xc4>)
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188d2:	68bb      	ldr	r3, [r7, #8]
 80188d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80188d6:	68bb      	ldr	r3, [r7, #8]
 80188d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188da:	4b18      	ldr	r3, [pc, #96]	; (801893c <xTaskPriorityInherit+0xcc>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	429a      	cmp	r2, r3
 80188e0:	d903      	bls.n	80188ea <xTaskPriorityInherit+0x7a>
 80188e2:	68bb      	ldr	r3, [r7, #8]
 80188e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188e6:	4a15      	ldr	r2, [pc, #84]	; (801893c <xTaskPriorityInherit+0xcc>)
 80188e8:	6013      	str	r3, [r2, #0]
 80188ea:	68bb      	ldr	r3, [r7, #8]
 80188ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188ee:	4613      	mov	r3, r2
 80188f0:	009b      	lsls	r3, r3, #2
 80188f2:	4413      	add	r3, r2
 80188f4:	009b      	lsls	r3, r3, #2
 80188f6:	4a10      	ldr	r2, [pc, #64]	; (8018938 <xTaskPriorityInherit+0xc8>)
 80188f8:	441a      	add	r2, r3
 80188fa:	68bb      	ldr	r3, [r7, #8]
 80188fc:	3304      	adds	r3, #4
 80188fe:	4619      	mov	r1, r3
 8018900:	4610      	mov	r0, r2
 8018902:	f7fd fd7a 	bl	80163fa <vListInsertEnd>
 8018906:	e004      	b.n	8018912 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018908:	4b0a      	ldr	r3, [pc, #40]	; (8018934 <xTaskPriorityInherit+0xc4>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801890e:	68bb      	ldr	r3, [r7, #8]
 8018910:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018912:	2301      	movs	r3, #1
 8018914:	60fb      	str	r3, [r7, #12]
 8018916:	e008      	b.n	801892a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018918:	68bb      	ldr	r3, [r7, #8]
 801891a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801891c:	4b05      	ldr	r3, [pc, #20]	; (8018934 <xTaskPriorityInherit+0xc4>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018922:	429a      	cmp	r2, r3
 8018924:	d201      	bcs.n	801892a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018926:	2301      	movs	r3, #1
 8018928:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801892a:	68fb      	ldr	r3, [r7, #12]
	}
 801892c:	4618      	mov	r0, r3
 801892e:	3710      	adds	r7, #16
 8018930:	46bd      	mov	sp, r7
 8018932:	bd80      	pop	{r7, pc}
 8018934:	24024690 	.word	0x24024690
 8018938:	24024694 	.word	0x24024694
 801893c:	24024b6c 	.word	0x24024b6c

08018940 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018940:	b580      	push	{r7, lr}
 8018942:	b086      	sub	sp, #24
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801894c:	2300      	movs	r3, #0
 801894e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d056      	beq.n	8018a04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018956:	4b2e      	ldr	r3, [pc, #184]	; (8018a10 <xTaskPriorityDisinherit+0xd0>)
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	693a      	ldr	r2, [r7, #16]
 801895c:	429a      	cmp	r2, r3
 801895e:	d00a      	beq.n	8018976 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018964:	f383 8811 	msr	BASEPRI, r3
 8018968:	f3bf 8f6f 	isb	sy
 801896c:	f3bf 8f4f 	dsb	sy
 8018970:	60fb      	str	r3, [r7, #12]
}
 8018972:	bf00      	nop
 8018974:	e7fe      	b.n	8018974 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018976:	693b      	ldr	r3, [r7, #16]
 8018978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801897a:	2b00      	cmp	r3, #0
 801897c:	d10a      	bne.n	8018994 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018982:	f383 8811 	msr	BASEPRI, r3
 8018986:	f3bf 8f6f 	isb	sy
 801898a:	f3bf 8f4f 	dsb	sy
 801898e:	60bb      	str	r3, [r7, #8]
}
 8018990:	bf00      	nop
 8018992:	e7fe      	b.n	8018992 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018994:	693b      	ldr	r3, [r7, #16]
 8018996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018998:	1e5a      	subs	r2, r3, #1
 801899a:	693b      	ldr	r3, [r7, #16]
 801899c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801899e:	693b      	ldr	r3, [r7, #16]
 80189a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189a2:	693b      	ldr	r3, [r7, #16]
 80189a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189a6:	429a      	cmp	r2, r3
 80189a8:	d02c      	beq.n	8018a04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80189aa:	693b      	ldr	r3, [r7, #16]
 80189ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d128      	bne.n	8018a04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80189b2:	693b      	ldr	r3, [r7, #16]
 80189b4:	3304      	adds	r3, #4
 80189b6:	4618      	mov	r0, r3
 80189b8:	f7fd fd7c 	bl	80164b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80189bc:	693b      	ldr	r3, [r7, #16]
 80189be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80189c0:	693b      	ldr	r3, [r7, #16]
 80189c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80189c4:	693b      	ldr	r3, [r7, #16]
 80189c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80189cc:	693b      	ldr	r3, [r7, #16]
 80189ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80189d0:	693b      	ldr	r3, [r7, #16]
 80189d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189d4:	4b0f      	ldr	r3, [pc, #60]	; (8018a14 <xTaskPriorityDisinherit+0xd4>)
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	429a      	cmp	r2, r3
 80189da:	d903      	bls.n	80189e4 <xTaskPriorityDisinherit+0xa4>
 80189dc:	693b      	ldr	r3, [r7, #16]
 80189de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189e0:	4a0c      	ldr	r2, [pc, #48]	; (8018a14 <xTaskPriorityDisinherit+0xd4>)
 80189e2:	6013      	str	r3, [r2, #0]
 80189e4:	693b      	ldr	r3, [r7, #16]
 80189e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189e8:	4613      	mov	r3, r2
 80189ea:	009b      	lsls	r3, r3, #2
 80189ec:	4413      	add	r3, r2
 80189ee:	009b      	lsls	r3, r3, #2
 80189f0:	4a09      	ldr	r2, [pc, #36]	; (8018a18 <xTaskPriorityDisinherit+0xd8>)
 80189f2:	441a      	add	r2, r3
 80189f4:	693b      	ldr	r3, [r7, #16]
 80189f6:	3304      	adds	r3, #4
 80189f8:	4619      	mov	r1, r3
 80189fa:	4610      	mov	r0, r2
 80189fc:	f7fd fcfd 	bl	80163fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018a00:	2301      	movs	r3, #1
 8018a02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018a04:	697b      	ldr	r3, [r7, #20]
	}
 8018a06:	4618      	mov	r0, r3
 8018a08:	3718      	adds	r7, #24
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}
 8018a0e:	bf00      	nop
 8018a10:	24024690 	.word	0x24024690
 8018a14:	24024b6c 	.word	0x24024b6c
 8018a18:	24024694 	.word	0x24024694

08018a1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	b088      	sub	sp, #32
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
 8018a24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018a2a:	2301      	movs	r3, #1
 8018a2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d06a      	beq.n	8018b0a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018a34:	69bb      	ldr	r3, [r7, #24]
 8018a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d10a      	bne.n	8018a52 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8018a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a40:	f383 8811 	msr	BASEPRI, r3
 8018a44:	f3bf 8f6f 	isb	sy
 8018a48:	f3bf 8f4f 	dsb	sy
 8018a4c:	60fb      	str	r3, [r7, #12]
}
 8018a4e:	bf00      	nop
 8018a50:	e7fe      	b.n	8018a50 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018a52:	69bb      	ldr	r3, [r7, #24]
 8018a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a56:	683a      	ldr	r2, [r7, #0]
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d902      	bls.n	8018a62 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018a5c:	683b      	ldr	r3, [r7, #0]
 8018a5e:	61fb      	str	r3, [r7, #28]
 8018a60:	e002      	b.n	8018a68 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018a62:	69bb      	ldr	r3, [r7, #24]
 8018a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a66:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018a68:	69bb      	ldr	r3, [r7, #24]
 8018a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a6c:	69fa      	ldr	r2, [r7, #28]
 8018a6e:	429a      	cmp	r2, r3
 8018a70:	d04b      	beq.n	8018b0a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018a72:	69bb      	ldr	r3, [r7, #24]
 8018a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a76:	697a      	ldr	r2, [r7, #20]
 8018a78:	429a      	cmp	r2, r3
 8018a7a:	d146      	bne.n	8018b0a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018a7c:	4b25      	ldr	r3, [pc, #148]	; (8018b14 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	69ba      	ldr	r2, [r7, #24]
 8018a82:	429a      	cmp	r2, r3
 8018a84:	d10a      	bne.n	8018a9c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8018a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a8a:	f383 8811 	msr	BASEPRI, r3
 8018a8e:	f3bf 8f6f 	isb	sy
 8018a92:	f3bf 8f4f 	dsb	sy
 8018a96:	60bb      	str	r3, [r7, #8]
}
 8018a98:	bf00      	nop
 8018a9a:	e7fe      	b.n	8018a9a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018a9c:	69bb      	ldr	r3, [r7, #24]
 8018a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aa0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018aa2:	69bb      	ldr	r3, [r7, #24]
 8018aa4:	69fa      	ldr	r2, [r7, #28]
 8018aa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018aa8:	69bb      	ldr	r3, [r7, #24]
 8018aaa:	699b      	ldr	r3, [r3, #24]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	db04      	blt.n	8018aba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018ab0:	69fb      	ldr	r3, [r7, #28]
 8018ab2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018ab6:	69bb      	ldr	r3, [r7, #24]
 8018ab8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018aba:	69bb      	ldr	r3, [r7, #24]
 8018abc:	6959      	ldr	r1, [r3, #20]
 8018abe:	693a      	ldr	r2, [r7, #16]
 8018ac0:	4613      	mov	r3, r2
 8018ac2:	009b      	lsls	r3, r3, #2
 8018ac4:	4413      	add	r3, r2
 8018ac6:	009b      	lsls	r3, r3, #2
 8018ac8:	4a13      	ldr	r2, [pc, #76]	; (8018b18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018aca:	4413      	add	r3, r2
 8018acc:	4299      	cmp	r1, r3
 8018ace:	d11c      	bne.n	8018b0a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018ad0:	69bb      	ldr	r3, [r7, #24]
 8018ad2:	3304      	adds	r3, #4
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	f7fd fced 	bl	80164b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018ada:	69bb      	ldr	r3, [r7, #24]
 8018adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ade:	4b0f      	ldr	r3, [pc, #60]	; (8018b1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	d903      	bls.n	8018aee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8018ae6:	69bb      	ldr	r3, [r7, #24]
 8018ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aea:	4a0c      	ldr	r2, [pc, #48]	; (8018b1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018aec:	6013      	str	r3, [r2, #0]
 8018aee:	69bb      	ldr	r3, [r7, #24]
 8018af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018af2:	4613      	mov	r3, r2
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	4413      	add	r3, r2
 8018af8:	009b      	lsls	r3, r3, #2
 8018afa:	4a07      	ldr	r2, [pc, #28]	; (8018b18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018afc:	441a      	add	r2, r3
 8018afe:	69bb      	ldr	r3, [r7, #24]
 8018b00:	3304      	adds	r3, #4
 8018b02:	4619      	mov	r1, r3
 8018b04:	4610      	mov	r0, r2
 8018b06:	f7fd fc78 	bl	80163fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018b0a:	bf00      	nop
 8018b0c:	3720      	adds	r7, #32
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}
 8018b12:	bf00      	nop
 8018b14:	24024690 	.word	0x24024690
 8018b18:	24024694 	.word	0x24024694
 8018b1c:	24024b6c 	.word	0x24024b6c

08018b20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018b20:	b480      	push	{r7}
 8018b22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018b24:	4b07      	ldr	r3, [pc, #28]	; (8018b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d004      	beq.n	8018b36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018b2c:	4b05      	ldr	r3, [pc, #20]	; (8018b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018b32:	3201      	adds	r2, #1
 8018b34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018b36:	4b03      	ldr	r3, [pc, #12]	; (8018b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8018b38:	681b      	ldr	r3, [r3, #0]
	}
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	46bd      	mov	sp, r7
 8018b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b42:	4770      	bx	lr
 8018b44:	24024690 	.word	0x24024690

08018b48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b084      	sub	sp, #16
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
 8018b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018b52:	4b21      	ldr	r3, [pc, #132]	; (8018bd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018b58:	4b20      	ldr	r3, [pc, #128]	; (8018bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	3304      	adds	r3, #4
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f7fd fca8 	bl	80164b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b6a:	d10a      	bne.n	8018b82 <prvAddCurrentTaskToDelayedList+0x3a>
 8018b6c:	683b      	ldr	r3, [r7, #0]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d007      	beq.n	8018b82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018b72:	4b1a      	ldr	r3, [pc, #104]	; (8018bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	3304      	adds	r3, #4
 8018b78:	4619      	mov	r1, r3
 8018b7a:	4819      	ldr	r0, [pc, #100]	; (8018be0 <prvAddCurrentTaskToDelayedList+0x98>)
 8018b7c:	f7fd fc3d 	bl	80163fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018b80:	e026      	b.n	8018bd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018b82:	68fa      	ldr	r2, [r7, #12]
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	4413      	add	r3, r2
 8018b88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018b8a:	4b14      	ldr	r3, [pc, #80]	; (8018bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	68ba      	ldr	r2, [r7, #8]
 8018b90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018b92:	68ba      	ldr	r2, [r7, #8]
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	429a      	cmp	r2, r3
 8018b98:	d209      	bcs.n	8018bae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018b9a:	4b12      	ldr	r3, [pc, #72]	; (8018be4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018b9c:	681a      	ldr	r2, [r3, #0]
 8018b9e:	4b0f      	ldr	r3, [pc, #60]	; (8018bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	3304      	adds	r3, #4
 8018ba4:	4619      	mov	r1, r3
 8018ba6:	4610      	mov	r0, r2
 8018ba8:	f7fd fc4b 	bl	8016442 <vListInsert>
}
 8018bac:	e010      	b.n	8018bd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018bae:	4b0e      	ldr	r3, [pc, #56]	; (8018be8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018bb0:	681a      	ldr	r2, [r3, #0]
 8018bb2:	4b0a      	ldr	r3, [pc, #40]	; (8018bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	3304      	adds	r3, #4
 8018bb8:	4619      	mov	r1, r3
 8018bba:	4610      	mov	r0, r2
 8018bbc:	f7fd fc41 	bl	8016442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018bc0:	4b0a      	ldr	r3, [pc, #40]	; (8018bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	68ba      	ldr	r2, [r7, #8]
 8018bc6:	429a      	cmp	r2, r3
 8018bc8:	d202      	bcs.n	8018bd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018bca:	4a08      	ldr	r2, [pc, #32]	; (8018bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8018bcc:	68bb      	ldr	r3, [r7, #8]
 8018bce:	6013      	str	r3, [r2, #0]
}
 8018bd0:	bf00      	nop
 8018bd2:	3710      	adds	r7, #16
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}
 8018bd8:	24024b68 	.word	0x24024b68
 8018bdc:	24024690 	.word	0x24024690
 8018be0:	24024b50 	.word	0x24024b50
 8018be4:	24024b20 	.word	0x24024b20
 8018be8:	24024b1c 	.word	0x24024b1c
 8018bec:	24024b84 	.word	0x24024b84

08018bf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b08a      	sub	sp, #40	; 0x28
 8018bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018bfa:	f000 fb07 	bl	801920c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018bfe:	4b1c      	ldr	r3, [pc, #112]	; (8018c70 <xTimerCreateTimerTask+0x80>)
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d021      	beq.n	8018c4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018c06:	2300      	movs	r3, #0
 8018c08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018c0e:	1d3a      	adds	r2, r7, #4
 8018c10:	f107 0108 	add.w	r1, r7, #8
 8018c14:	f107 030c 	add.w	r3, r7, #12
 8018c18:	4618      	mov	r0, r3
 8018c1a:	f7fd f9bb 	bl	8015f94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018c1e:	6879      	ldr	r1, [r7, #4]
 8018c20:	68bb      	ldr	r3, [r7, #8]
 8018c22:	68fa      	ldr	r2, [r7, #12]
 8018c24:	9202      	str	r2, [sp, #8]
 8018c26:	9301      	str	r3, [sp, #4]
 8018c28:	2302      	movs	r3, #2
 8018c2a:	9300      	str	r3, [sp, #0]
 8018c2c:	2300      	movs	r3, #0
 8018c2e:	460a      	mov	r2, r1
 8018c30:	4910      	ldr	r1, [pc, #64]	; (8018c74 <xTimerCreateTimerTask+0x84>)
 8018c32:	4811      	ldr	r0, [pc, #68]	; (8018c78 <xTimerCreateTimerTask+0x88>)
 8018c34:	f7fe ff7c 	bl	8017b30 <xTaskCreateStatic>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	4a10      	ldr	r2, [pc, #64]	; (8018c7c <xTimerCreateTimerTask+0x8c>)
 8018c3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018c3e:	4b0f      	ldr	r3, [pc, #60]	; (8018c7c <xTimerCreateTimerTask+0x8c>)
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d001      	beq.n	8018c4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018c46:	2301      	movs	r3, #1
 8018c48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018c4a:	697b      	ldr	r3, [r7, #20]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d10a      	bne.n	8018c66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c54:	f383 8811 	msr	BASEPRI, r3
 8018c58:	f3bf 8f6f 	isb	sy
 8018c5c:	f3bf 8f4f 	dsb	sy
 8018c60:	613b      	str	r3, [r7, #16]
}
 8018c62:	bf00      	nop
 8018c64:	e7fe      	b.n	8018c64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018c66:	697b      	ldr	r3, [r7, #20]
}
 8018c68:	4618      	mov	r0, r3
 8018c6a:	3718      	adds	r7, #24
 8018c6c:	46bd      	mov	sp, r7
 8018c6e:	bd80      	pop	{r7, pc}
 8018c70:	24024bc0 	.word	0x24024bc0
 8018c74:	0802ac9c 	.word	0x0802ac9c
 8018c78:	08018db5 	.word	0x08018db5
 8018c7c:	24024bc4 	.word	0x24024bc4

08018c80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b08a      	sub	sp, #40	; 0x28
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	60f8      	str	r0, [r7, #12]
 8018c88:	60b9      	str	r1, [r7, #8]
 8018c8a:	607a      	str	r2, [r7, #4]
 8018c8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018c8e:	2300      	movs	r3, #0
 8018c90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d10a      	bne.n	8018cae <xTimerGenericCommand+0x2e>
	__asm volatile
 8018c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c9c:	f383 8811 	msr	BASEPRI, r3
 8018ca0:	f3bf 8f6f 	isb	sy
 8018ca4:	f3bf 8f4f 	dsb	sy
 8018ca8:	623b      	str	r3, [r7, #32]
}
 8018caa:	bf00      	nop
 8018cac:	e7fe      	b.n	8018cac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018cae:	4b1a      	ldr	r3, [pc, #104]	; (8018d18 <xTimerGenericCommand+0x98>)
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d02a      	beq.n	8018d0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018cb6:	68bb      	ldr	r3, [r7, #8]
 8018cb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018cc2:	68bb      	ldr	r3, [r7, #8]
 8018cc4:	2b05      	cmp	r3, #5
 8018cc6:	dc18      	bgt.n	8018cfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018cc8:	f7ff fdb4 	bl	8018834 <xTaskGetSchedulerState>
 8018ccc:	4603      	mov	r3, r0
 8018cce:	2b02      	cmp	r3, #2
 8018cd0:	d109      	bne.n	8018ce6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018cd2:	4b11      	ldr	r3, [pc, #68]	; (8018d18 <xTimerGenericCommand+0x98>)
 8018cd4:	6818      	ldr	r0, [r3, #0]
 8018cd6:	f107 0110 	add.w	r1, r7, #16
 8018cda:	2300      	movs	r3, #0
 8018cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018cde:	f7fe f8c1 	bl	8016e64 <xQueueGenericSend>
 8018ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8018ce4:	e012      	b.n	8018d0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018ce6:	4b0c      	ldr	r3, [pc, #48]	; (8018d18 <xTimerGenericCommand+0x98>)
 8018ce8:	6818      	ldr	r0, [r3, #0]
 8018cea:	f107 0110 	add.w	r1, r7, #16
 8018cee:	2300      	movs	r3, #0
 8018cf0:	2200      	movs	r2, #0
 8018cf2:	f7fe f8b7 	bl	8016e64 <xQueueGenericSend>
 8018cf6:	6278      	str	r0, [r7, #36]	; 0x24
 8018cf8:	e008      	b.n	8018d0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018cfa:	4b07      	ldr	r3, [pc, #28]	; (8018d18 <xTimerGenericCommand+0x98>)
 8018cfc:	6818      	ldr	r0, [r3, #0]
 8018cfe:	f107 0110 	add.w	r1, r7, #16
 8018d02:	2300      	movs	r3, #0
 8018d04:	683a      	ldr	r2, [r7, #0]
 8018d06:	f7fe f9ab 	bl	8017060 <xQueueGenericSendFromISR>
 8018d0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018d0e:	4618      	mov	r0, r3
 8018d10:	3728      	adds	r7, #40	; 0x28
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bd80      	pop	{r7, pc}
 8018d16:	bf00      	nop
 8018d18:	24024bc0 	.word	0x24024bc0

08018d1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b088      	sub	sp, #32
 8018d20:	af02      	add	r7, sp, #8
 8018d22:	6078      	str	r0, [r7, #4]
 8018d24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d26:	4b22      	ldr	r3, [pc, #136]	; (8018db0 <prvProcessExpiredTimer+0x94>)
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	68db      	ldr	r3, [r3, #12]
 8018d2c:	68db      	ldr	r3, [r3, #12]
 8018d2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	3304      	adds	r3, #4
 8018d34:	4618      	mov	r0, r3
 8018d36:	f7fd fbbd 	bl	80164b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018d3a:	697b      	ldr	r3, [r7, #20]
 8018d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d40:	f003 0304 	and.w	r3, r3, #4
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d022      	beq.n	8018d8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018d48:	697b      	ldr	r3, [r7, #20]
 8018d4a:	699a      	ldr	r2, [r3, #24]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	18d1      	adds	r1, r2, r3
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	683a      	ldr	r2, [r7, #0]
 8018d54:	6978      	ldr	r0, [r7, #20]
 8018d56:	f000 f8d1 	bl	8018efc <prvInsertTimerInActiveList>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d01f      	beq.n	8018da0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018d60:	2300      	movs	r3, #0
 8018d62:	9300      	str	r3, [sp, #0]
 8018d64:	2300      	movs	r3, #0
 8018d66:	687a      	ldr	r2, [r7, #4]
 8018d68:	2100      	movs	r1, #0
 8018d6a:	6978      	ldr	r0, [r7, #20]
 8018d6c:	f7ff ff88 	bl	8018c80 <xTimerGenericCommand>
 8018d70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018d72:	693b      	ldr	r3, [r7, #16]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d113      	bne.n	8018da0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d7c:	f383 8811 	msr	BASEPRI, r3
 8018d80:	f3bf 8f6f 	isb	sy
 8018d84:	f3bf 8f4f 	dsb	sy
 8018d88:	60fb      	str	r3, [r7, #12]
}
 8018d8a:	bf00      	nop
 8018d8c:	e7fe      	b.n	8018d8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018d8e:	697b      	ldr	r3, [r7, #20]
 8018d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d94:	f023 0301 	bic.w	r3, r3, #1
 8018d98:	b2da      	uxtb	r2, r3
 8018d9a:	697b      	ldr	r3, [r7, #20]
 8018d9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	6a1b      	ldr	r3, [r3, #32]
 8018da4:	6978      	ldr	r0, [r7, #20]
 8018da6:	4798      	blx	r3
}
 8018da8:	bf00      	nop
 8018daa:	3718      	adds	r7, #24
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd80      	pop	{r7, pc}
 8018db0:	24024bb8 	.word	0x24024bb8

08018db4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b084      	sub	sp, #16
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018dbc:	f107 0308 	add.w	r3, r7, #8
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	f000 f857 	bl	8018e74 <prvGetNextExpireTime>
 8018dc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	4619      	mov	r1, r3
 8018dcc:	68f8      	ldr	r0, [r7, #12]
 8018dce:	f000 f803 	bl	8018dd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018dd2:	f000 f8d5 	bl	8018f80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018dd6:	e7f1      	b.n	8018dbc <prvTimerTask+0x8>

08018dd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b084      	sub	sp, #16
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
 8018de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018de2:	f7ff f8eb 	bl	8017fbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018de6:	f107 0308 	add.w	r3, r7, #8
 8018dea:	4618      	mov	r0, r3
 8018dec:	f000 f866 	bl	8018ebc <prvSampleTimeNow>
 8018df0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018df2:	68bb      	ldr	r3, [r7, #8]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d130      	bne.n	8018e5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018df8:	683b      	ldr	r3, [r7, #0]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d10a      	bne.n	8018e14 <prvProcessTimerOrBlockTask+0x3c>
 8018dfe:	687a      	ldr	r2, [r7, #4]
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	429a      	cmp	r2, r3
 8018e04:	d806      	bhi.n	8018e14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018e06:	f7ff f8e7 	bl	8017fd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018e0a:	68f9      	ldr	r1, [r7, #12]
 8018e0c:	6878      	ldr	r0, [r7, #4]
 8018e0e:	f7ff ff85 	bl	8018d1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018e12:	e024      	b.n	8018e5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018e14:	683b      	ldr	r3, [r7, #0]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d008      	beq.n	8018e2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018e1a:	4b13      	ldr	r3, [pc, #76]	; (8018e68 <prvProcessTimerOrBlockTask+0x90>)
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d101      	bne.n	8018e28 <prvProcessTimerOrBlockTask+0x50>
 8018e24:	2301      	movs	r3, #1
 8018e26:	e000      	b.n	8018e2a <prvProcessTimerOrBlockTask+0x52>
 8018e28:	2300      	movs	r3, #0
 8018e2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018e2c:	4b0f      	ldr	r3, [pc, #60]	; (8018e6c <prvProcessTimerOrBlockTask+0x94>)
 8018e2e:	6818      	ldr	r0, [r3, #0]
 8018e30:	687a      	ldr	r2, [r7, #4]
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	1ad3      	subs	r3, r2, r3
 8018e36:	683a      	ldr	r2, [r7, #0]
 8018e38:	4619      	mov	r1, r3
 8018e3a:	f7fe fe45 	bl	8017ac8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018e3e:	f7ff f8cb 	bl	8017fd8 <xTaskResumeAll>
 8018e42:	4603      	mov	r3, r0
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d10a      	bne.n	8018e5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018e48:	4b09      	ldr	r3, [pc, #36]	; (8018e70 <prvProcessTimerOrBlockTask+0x98>)
 8018e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e4e:	601a      	str	r2, [r3, #0]
 8018e50:	f3bf 8f4f 	dsb	sy
 8018e54:	f3bf 8f6f 	isb	sy
}
 8018e58:	e001      	b.n	8018e5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018e5a:	f7ff f8bd 	bl	8017fd8 <xTaskResumeAll>
}
 8018e5e:	bf00      	nop
 8018e60:	3710      	adds	r7, #16
 8018e62:	46bd      	mov	sp, r7
 8018e64:	bd80      	pop	{r7, pc}
 8018e66:	bf00      	nop
 8018e68:	24024bbc 	.word	0x24024bbc
 8018e6c:	24024bc0 	.word	0x24024bc0
 8018e70:	e000ed04 	.word	0xe000ed04

08018e74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018e74:	b480      	push	{r7}
 8018e76:	b085      	sub	sp, #20
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018e7c:	4b0e      	ldr	r3, [pc, #56]	; (8018eb8 <prvGetNextExpireTime+0x44>)
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d101      	bne.n	8018e8a <prvGetNextExpireTime+0x16>
 8018e86:	2201      	movs	r2, #1
 8018e88:	e000      	b.n	8018e8c <prvGetNextExpireTime+0x18>
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d105      	bne.n	8018ea4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018e98:	4b07      	ldr	r3, [pc, #28]	; (8018eb8 <prvGetNextExpireTime+0x44>)
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	68db      	ldr	r3, [r3, #12]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	60fb      	str	r3, [r7, #12]
 8018ea2:	e001      	b.n	8018ea8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018ea8:	68fb      	ldr	r3, [r7, #12]
}
 8018eaa:	4618      	mov	r0, r3
 8018eac:	3714      	adds	r7, #20
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb4:	4770      	bx	lr
 8018eb6:	bf00      	nop
 8018eb8:	24024bb8 	.word	0x24024bb8

08018ebc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b084      	sub	sp, #16
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018ec4:	f7ff f926 	bl	8018114 <xTaskGetTickCount>
 8018ec8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018eca:	4b0b      	ldr	r3, [pc, #44]	; (8018ef8 <prvSampleTimeNow+0x3c>)
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	68fa      	ldr	r2, [r7, #12]
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d205      	bcs.n	8018ee0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018ed4:	f000 f936 	bl	8019144 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	2201      	movs	r2, #1
 8018edc:	601a      	str	r2, [r3, #0]
 8018ede:	e002      	b.n	8018ee6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018ee6:	4a04      	ldr	r2, [pc, #16]	; (8018ef8 <prvSampleTimeNow+0x3c>)
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018eec:	68fb      	ldr	r3, [r7, #12]
}
 8018eee:	4618      	mov	r0, r3
 8018ef0:	3710      	adds	r7, #16
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bd80      	pop	{r7, pc}
 8018ef6:	bf00      	nop
 8018ef8:	24024bc8 	.word	0x24024bc8

08018efc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b086      	sub	sp, #24
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	60b9      	str	r1, [r7, #8]
 8018f06:	607a      	str	r2, [r7, #4]
 8018f08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	68ba      	ldr	r2, [r7, #8]
 8018f12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	68fa      	ldr	r2, [r7, #12]
 8018f18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018f1a:	68ba      	ldr	r2, [r7, #8]
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	429a      	cmp	r2, r3
 8018f20:	d812      	bhi.n	8018f48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018f22:	687a      	ldr	r2, [r7, #4]
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	1ad2      	subs	r2, r2, r3
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	699b      	ldr	r3, [r3, #24]
 8018f2c:	429a      	cmp	r2, r3
 8018f2e:	d302      	bcc.n	8018f36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018f30:	2301      	movs	r3, #1
 8018f32:	617b      	str	r3, [r7, #20]
 8018f34:	e01b      	b.n	8018f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018f36:	4b10      	ldr	r3, [pc, #64]	; (8018f78 <prvInsertTimerInActiveList+0x7c>)
 8018f38:	681a      	ldr	r2, [r3, #0]
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	3304      	adds	r3, #4
 8018f3e:	4619      	mov	r1, r3
 8018f40:	4610      	mov	r0, r2
 8018f42:	f7fd fa7e 	bl	8016442 <vListInsert>
 8018f46:	e012      	b.n	8018f6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018f48:	687a      	ldr	r2, [r7, #4]
 8018f4a:	683b      	ldr	r3, [r7, #0]
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d206      	bcs.n	8018f5e <prvInsertTimerInActiveList+0x62>
 8018f50:	68ba      	ldr	r2, [r7, #8]
 8018f52:	683b      	ldr	r3, [r7, #0]
 8018f54:	429a      	cmp	r2, r3
 8018f56:	d302      	bcc.n	8018f5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018f58:	2301      	movs	r3, #1
 8018f5a:	617b      	str	r3, [r7, #20]
 8018f5c:	e007      	b.n	8018f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018f5e:	4b07      	ldr	r3, [pc, #28]	; (8018f7c <prvInsertTimerInActiveList+0x80>)
 8018f60:	681a      	ldr	r2, [r3, #0]
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	3304      	adds	r3, #4
 8018f66:	4619      	mov	r1, r3
 8018f68:	4610      	mov	r0, r2
 8018f6a:	f7fd fa6a 	bl	8016442 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018f6e:	697b      	ldr	r3, [r7, #20]
}
 8018f70:	4618      	mov	r0, r3
 8018f72:	3718      	adds	r7, #24
 8018f74:	46bd      	mov	sp, r7
 8018f76:	bd80      	pop	{r7, pc}
 8018f78:	24024bbc 	.word	0x24024bbc
 8018f7c:	24024bb8 	.word	0x24024bb8

08018f80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b08e      	sub	sp, #56	; 0x38
 8018f84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018f86:	e0ca      	b.n	801911e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	da18      	bge.n	8018fc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018f8e:	1d3b      	adds	r3, r7, #4
 8018f90:	3304      	adds	r3, #4
 8018f92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d10a      	bne.n	8018fb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f9e:	f383 8811 	msr	BASEPRI, r3
 8018fa2:	f3bf 8f6f 	isb	sy
 8018fa6:	f3bf 8f4f 	dsb	sy
 8018faa:	61fb      	str	r3, [r7, #28]
}
 8018fac:	bf00      	nop
 8018fae:	e7fe      	b.n	8018fae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018fb6:	6850      	ldr	r0, [r2, #4]
 8018fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018fba:	6892      	ldr	r2, [r2, #8]
 8018fbc:	4611      	mov	r1, r2
 8018fbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	f2c0 80aa 	blt.w	801911c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fce:	695b      	ldr	r3, [r3, #20]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d004      	beq.n	8018fde <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fd6:	3304      	adds	r3, #4
 8018fd8:	4618      	mov	r0, r3
 8018fda:	f7fd fa6b 	bl	80164b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018fde:	463b      	mov	r3, r7
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f7ff ff6b 	bl	8018ebc <prvSampleTimeNow>
 8018fe6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	2b09      	cmp	r3, #9
 8018fec:	f200 8097 	bhi.w	801911e <prvProcessReceivedCommands+0x19e>
 8018ff0:	a201      	add	r2, pc, #4	; (adr r2, 8018ff8 <prvProcessReceivedCommands+0x78>)
 8018ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ff6:	bf00      	nop
 8018ff8:	08019021 	.word	0x08019021
 8018ffc:	08019021 	.word	0x08019021
 8019000:	08019021 	.word	0x08019021
 8019004:	08019095 	.word	0x08019095
 8019008:	080190a9 	.word	0x080190a9
 801900c:	080190f3 	.word	0x080190f3
 8019010:	08019021 	.word	0x08019021
 8019014:	08019021 	.word	0x08019021
 8019018:	08019095 	.word	0x08019095
 801901c:	080190a9 	.word	0x080190a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019026:	f043 0301 	orr.w	r3, r3, #1
 801902a:	b2da      	uxtb	r2, r3
 801902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801902e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019032:	68ba      	ldr	r2, [r7, #8]
 8019034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019036:	699b      	ldr	r3, [r3, #24]
 8019038:	18d1      	adds	r1, r2, r3
 801903a:	68bb      	ldr	r3, [r7, #8]
 801903c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801903e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019040:	f7ff ff5c 	bl	8018efc <prvInsertTimerInActiveList>
 8019044:	4603      	mov	r3, r0
 8019046:	2b00      	cmp	r3, #0
 8019048:	d069      	beq.n	801911e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801904c:	6a1b      	ldr	r3, [r3, #32]
 801904e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019050:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019058:	f003 0304 	and.w	r3, r3, #4
 801905c:	2b00      	cmp	r3, #0
 801905e:	d05e      	beq.n	801911e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019060:	68ba      	ldr	r2, [r7, #8]
 8019062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019064:	699b      	ldr	r3, [r3, #24]
 8019066:	441a      	add	r2, r3
 8019068:	2300      	movs	r3, #0
 801906a:	9300      	str	r3, [sp, #0]
 801906c:	2300      	movs	r3, #0
 801906e:	2100      	movs	r1, #0
 8019070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019072:	f7ff fe05 	bl	8018c80 <xTimerGenericCommand>
 8019076:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019078:	6a3b      	ldr	r3, [r7, #32]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d14f      	bne.n	801911e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019082:	f383 8811 	msr	BASEPRI, r3
 8019086:	f3bf 8f6f 	isb	sy
 801908a:	f3bf 8f4f 	dsb	sy
 801908e:	61bb      	str	r3, [r7, #24]
}
 8019090:	bf00      	nop
 8019092:	e7fe      	b.n	8019092 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801909a:	f023 0301 	bic.w	r3, r3, #1
 801909e:	b2da      	uxtb	r2, r3
 80190a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80190a6:	e03a      	b.n	801911e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80190a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190ae:	f043 0301 	orr.w	r3, r3, #1
 80190b2:	b2da      	uxtb	r2, r3
 80190b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80190ba:	68ba      	ldr	r2, [r7, #8]
 80190bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80190c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c2:	699b      	ldr	r3, [r3, #24]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d10a      	bne.n	80190de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80190c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190cc:	f383 8811 	msr	BASEPRI, r3
 80190d0:	f3bf 8f6f 	isb	sy
 80190d4:	f3bf 8f4f 	dsb	sy
 80190d8:	617b      	str	r3, [r7, #20]
}
 80190da:	bf00      	nop
 80190dc:	e7fe      	b.n	80190dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80190de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190e0:	699a      	ldr	r2, [r3, #24]
 80190e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190e4:	18d1      	adds	r1, r2, r3
 80190e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80190ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190ec:	f7ff ff06 	bl	8018efc <prvInsertTimerInActiveList>
					break;
 80190f0:	e015      	b.n	801911e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80190f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190f8:	f003 0302 	and.w	r3, r3, #2
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d103      	bne.n	8019108 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019102:	f7fd f82d 	bl	8016160 <vPortFree>
 8019106:	e00a      	b.n	801911e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801910a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801910e:	f023 0301 	bic.w	r3, r3, #1
 8019112:	b2da      	uxtb	r2, r3
 8019114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801911a:	e000      	b.n	801911e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801911c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801911e:	4b08      	ldr	r3, [pc, #32]	; (8019140 <prvProcessReceivedCommands+0x1c0>)
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	1d39      	adds	r1, r7, #4
 8019124:	2200      	movs	r2, #0
 8019126:	4618      	mov	r0, r3
 8019128:	f7fe f8c2 	bl	80172b0 <xQueueReceive>
 801912c:	4603      	mov	r3, r0
 801912e:	2b00      	cmp	r3, #0
 8019130:	f47f af2a 	bne.w	8018f88 <prvProcessReceivedCommands+0x8>
	}
}
 8019134:	bf00      	nop
 8019136:	bf00      	nop
 8019138:	3730      	adds	r7, #48	; 0x30
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
 801913e:	bf00      	nop
 8019140:	24024bc0 	.word	0x24024bc0

08019144 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b088      	sub	sp, #32
 8019148:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801914a:	e048      	b.n	80191de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801914c:	4b2d      	ldr	r3, [pc, #180]	; (8019204 <prvSwitchTimerLists+0xc0>)
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	68db      	ldr	r3, [r3, #12]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019156:	4b2b      	ldr	r3, [pc, #172]	; (8019204 <prvSwitchTimerLists+0xc0>)
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	68db      	ldr	r3, [r3, #12]
 801915c:	68db      	ldr	r3, [r3, #12]
 801915e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	3304      	adds	r3, #4
 8019164:	4618      	mov	r0, r3
 8019166:	f7fd f9a5 	bl	80164b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	6a1b      	ldr	r3, [r3, #32]
 801916e:	68f8      	ldr	r0, [r7, #12]
 8019170:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019178:	f003 0304 	and.w	r3, r3, #4
 801917c:	2b00      	cmp	r3, #0
 801917e:	d02e      	beq.n	80191de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	699b      	ldr	r3, [r3, #24]
 8019184:	693a      	ldr	r2, [r7, #16]
 8019186:	4413      	add	r3, r2
 8019188:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801918a:	68ba      	ldr	r2, [r7, #8]
 801918c:	693b      	ldr	r3, [r7, #16]
 801918e:	429a      	cmp	r2, r3
 8019190:	d90e      	bls.n	80191b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	68ba      	ldr	r2, [r7, #8]
 8019196:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	68fa      	ldr	r2, [r7, #12]
 801919c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801919e:	4b19      	ldr	r3, [pc, #100]	; (8019204 <prvSwitchTimerLists+0xc0>)
 80191a0:	681a      	ldr	r2, [r3, #0]
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	3304      	adds	r3, #4
 80191a6:	4619      	mov	r1, r3
 80191a8:	4610      	mov	r0, r2
 80191aa:	f7fd f94a 	bl	8016442 <vListInsert>
 80191ae:	e016      	b.n	80191de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80191b0:	2300      	movs	r3, #0
 80191b2:	9300      	str	r3, [sp, #0]
 80191b4:	2300      	movs	r3, #0
 80191b6:	693a      	ldr	r2, [r7, #16]
 80191b8:	2100      	movs	r1, #0
 80191ba:	68f8      	ldr	r0, [r7, #12]
 80191bc:	f7ff fd60 	bl	8018c80 <xTimerGenericCommand>
 80191c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d10a      	bne.n	80191de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80191c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191cc:	f383 8811 	msr	BASEPRI, r3
 80191d0:	f3bf 8f6f 	isb	sy
 80191d4:	f3bf 8f4f 	dsb	sy
 80191d8:	603b      	str	r3, [r7, #0]
}
 80191da:	bf00      	nop
 80191dc:	e7fe      	b.n	80191dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80191de:	4b09      	ldr	r3, [pc, #36]	; (8019204 <prvSwitchTimerLists+0xc0>)
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d1b1      	bne.n	801914c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80191e8:	4b06      	ldr	r3, [pc, #24]	; (8019204 <prvSwitchTimerLists+0xc0>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80191ee:	4b06      	ldr	r3, [pc, #24]	; (8019208 <prvSwitchTimerLists+0xc4>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	4a04      	ldr	r2, [pc, #16]	; (8019204 <prvSwitchTimerLists+0xc0>)
 80191f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80191f6:	4a04      	ldr	r2, [pc, #16]	; (8019208 <prvSwitchTimerLists+0xc4>)
 80191f8:	697b      	ldr	r3, [r7, #20]
 80191fa:	6013      	str	r3, [r2, #0]
}
 80191fc:	bf00      	nop
 80191fe:	3718      	adds	r7, #24
 8019200:	46bd      	mov	sp, r7
 8019202:	bd80      	pop	{r7, pc}
 8019204:	24024bb8 	.word	0x24024bb8
 8019208:	24024bbc 	.word	0x24024bbc

0801920c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b082      	sub	sp, #8
 8019210:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019212:	f7fd faa7 	bl	8016764 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019216:	4b15      	ldr	r3, [pc, #84]	; (801926c <prvCheckForValidListAndQueue+0x60>)
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d120      	bne.n	8019260 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801921e:	4814      	ldr	r0, [pc, #80]	; (8019270 <prvCheckForValidListAndQueue+0x64>)
 8019220:	f7fd f8be 	bl	80163a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019224:	4813      	ldr	r0, [pc, #76]	; (8019274 <prvCheckForValidListAndQueue+0x68>)
 8019226:	f7fd f8bb 	bl	80163a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801922a:	4b13      	ldr	r3, [pc, #76]	; (8019278 <prvCheckForValidListAndQueue+0x6c>)
 801922c:	4a10      	ldr	r2, [pc, #64]	; (8019270 <prvCheckForValidListAndQueue+0x64>)
 801922e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019230:	4b12      	ldr	r3, [pc, #72]	; (801927c <prvCheckForValidListAndQueue+0x70>)
 8019232:	4a10      	ldr	r2, [pc, #64]	; (8019274 <prvCheckForValidListAndQueue+0x68>)
 8019234:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019236:	2300      	movs	r3, #0
 8019238:	9300      	str	r3, [sp, #0]
 801923a:	4b11      	ldr	r3, [pc, #68]	; (8019280 <prvCheckForValidListAndQueue+0x74>)
 801923c:	4a11      	ldr	r2, [pc, #68]	; (8019284 <prvCheckForValidListAndQueue+0x78>)
 801923e:	2110      	movs	r1, #16
 8019240:	200a      	movs	r0, #10
 8019242:	f7fd fc19 	bl	8016a78 <xQueueGenericCreateStatic>
 8019246:	4603      	mov	r3, r0
 8019248:	4a08      	ldr	r2, [pc, #32]	; (801926c <prvCheckForValidListAndQueue+0x60>)
 801924a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801924c:	4b07      	ldr	r3, [pc, #28]	; (801926c <prvCheckForValidListAndQueue+0x60>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	2b00      	cmp	r3, #0
 8019252:	d005      	beq.n	8019260 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019254:	4b05      	ldr	r3, [pc, #20]	; (801926c <prvCheckForValidListAndQueue+0x60>)
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	490b      	ldr	r1, [pc, #44]	; (8019288 <prvCheckForValidListAndQueue+0x7c>)
 801925a:	4618      	mov	r0, r3
 801925c:	f7fe fbe0 	bl	8017a20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019260:	f7fd fab0 	bl	80167c4 <vPortExitCritical>
}
 8019264:	bf00      	nop
 8019266:	46bd      	mov	sp, r7
 8019268:	bd80      	pop	{r7, pc}
 801926a:	bf00      	nop
 801926c:	24024bc0 	.word	0x24024bc0
 8019270:	24024b90 	.word	0x24024b90
 8019274:	24024ba4 	.word	0x24024ba4
 8019278:	24024bb8 	.word	0x24024bb8
 801927c:	24024bbc 	.word	0x24024bbc
 8019280:	24024c6c 	.word	0x24024c6c
 8019284:	24024bcc 	.word	0x24024bcc
 8019288:	0802aca4 	.word	0x0802aca4

0801928c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 801928c:	b480      	push	{r7}
 801928e:	b097      	sub	sp, #92	; 0x5c
 8019290:	af00      	add	r7, sp, #0
 8019292:	60f8      	str	r0, [r7, #12]
 8019294:	60b9      	str	r1, [r7, #8]
 8019296:	607a      	str	r2, [r7, #4]
 8019298:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 801929a:	683b      	ldr	r3, [r7, #0]
 801929c:	4a9a      	ldr	r2, [pc, #616]	; (8019508 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x27c>)
 801929e:	fba2 2303 	umull	r2, r3, r2, r3
 80192a2:	0a1b      	lsrs	r3, r3, #8
 80192a4:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 80192aa:	e11e      	b.n	80194ea <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25e>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80192ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80192ae:	011a      	lsls	r2, r3, #4
 80192b0:	4b96      	ldr	r3, [pc, #600]	; (801950c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80192b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80192b8:	011b      	lsls	r3, r3, #4
 80192ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80192bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80192be:	011b      	lsls	r3, r3, #4
 80192c0:	4a92      	ldr	r2, [pc, #584]	; (801950c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80192c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80192c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80192c8:	fb02 f201 	mul.w	r2, r2, r1
 80192cc:	1a9b      	subs	r3, r3, r2
 80192ce:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80192d0:	4b8e      	ldr	r3, [pc, #568]	; (801950c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80192d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192d6:	fb02 f103 	mul.w	r1, r2, r3
 80192da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192dc:	4613      	mov	r3, r2
 80192de:	005b      	lsls	r3, r3, #1
 80192e0:	4413      	add	r3, r2
 80192e2:	440b      	add	r3, r1
 80192e4:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80192e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80192e8:	3301      	adds	r3, #1
 80192ea:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80192f2:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  16; i+=2)
 80192f8:	2300      	movs	r3, #0
 80192fa:	657b      	str	r3, [r7, #84]	; 0x54
 80192fc:	e0ed      	b.n	80194da <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24e>
    {
      if(i == 8)
 80192fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019300:	2b08      	cmp	r3, #8
 8019302:	d102      	bne.n	801930a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      {
        pLum = pInBuffer + 128;
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	3380      	adds	r3, #128	; 0x80
 8019308:	637b      	str	r3, [r7, #52]	; 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801930a:	4b80      	ldr	r3, [pc, #512]	; (801950c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 801930c:	691b      	ldr	r3, [r3, #16]
 801930e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019310:	429a      	cmp	r2, r3
 8019312:	f080 80df 	bcs.w	80194d4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x248>
      {
        pOutAddr = pOutBuffer + refline;
 8019316:	68ba      	ldr	r2, [r7, #8]
 8019318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801931a:	4413      	add	r3, r2
 801931c:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 801931e:	4b7b      	ldr	r3, [pc, #492]	; (801950c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 8019320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019324:	4413      	add	r3, r2
 8019326:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        for(k= 0; k<2; k++)
 8019328:	2300      	movs	r3, #0
 801932a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801932c:	e0c5      	b.n	80194ba <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22e>
        {
          for(j=0; j < 8; j+=2)
 801932e:	2300      	movs	r3, #0
 8019330:	653b      	str	r3, [r7, #80]	; 0x50
 8019332:	e0b8      	b.n	80194a6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21a>
          {           
            cbcomp = (int32_t)(*(pChrom));
 8019334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801933c:	009b      	lsls	r3, r3, #2
 801933e:	4a74      	ldr	r2, [pc, #464]	; (8019510 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x284>)
 8019340:	4413      	add	r3, r2
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8019346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019348:	3340      	adds	r3, #64	; 0x40
 801934a:	781b      	ldrb	r3, [r3, #0]
 801934c:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 801934e:	69fb      	ldr	r3, [r7, #28]
 8019350:	009b      	lsls	r3, r3, #2
 8019352:	4a70      	ldr	r2, [pc, #448]	; (8019514 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x288>)
 8019354:	4413      	add	r3, r2
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801935a:	69fb      	ldr	r3, [r7, #28]
 801935c:	009b      	lsls	r3, r3, #2
 801935e:	4a6e      	ldr	r2, [pc, #440]	; (8019518 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 8019360:	4413      	add	r3, r2
 8019362:	681a      	ldr	r2, [r3, #0]
 8019364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019366:	009b      	lsls	r3, r3, #2
 8019368:	496c      	ldr	r1, [pc, #432]	; (801951c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 801936a:	440b      	add	r3, r1
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	4413      	add	r3, r2
 8019370:	141b      	asrs	r3, r3, #16
 8019372:	617b      	str	r3, [r7, #20]
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 8019374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019378:	4413      	add	r3, r2
 801937a:	781b      	ldrb	r3, [r3, #0]
 801937c:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801937e:	693a      	ldr	r2, [r7, #16]
 8019380:	69bb      	ldr	r3, [r7, #24]
 8019382:	4413      	add	r3, r2
 8019384:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801938a:	3302      	adds	r3, #2
 801938c:	4964      	ldr	r1, [pc, #400]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801938e:	5c8a      	ldrb	r2, [r1, r2]
 8019390:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019392:	693a      	ldr	r2, [r7, #16]
 8019394:	697b      	ldr	r3, [r7, #20]
 8019396:	4413      	add	r3, r2
 8019398:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801939c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801939e:	3301      	adds	r3, #1
 80193a0:	495f      	ldr	r1, [pc, #380]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80193a2:	5c8a      	ldrb	r2, [r1, r2]
 80193a4:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80193a6:	693a      	ldr	r2, [r7, #16]
 80193a8:	6a3b      	ldr	r3, [r7, #32]
 80193aa:	4413      	add	r3, r2
 80193ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80193b0:	4a5b      	ldr	r2, [pc, #364]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80193b2:	5cd2      	ldrb	r2, [r2, r3]
 80193b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193b6:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80193b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80193ba:	3301      	adds	r3, #1
 80193bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80193be:	4413      	add	r3, r2
 80193c0:	781b      	ldrb	r3, [r3, #0]
 80193c2:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80193c4:	693a      	ldr	r2, [r7, #16]
 80193c6:	69bb      	ldr	r3, [r7, #24]
 80193c8:	4413      	add	r3, r2
 80193ca:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80193ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193d0:	3305      	adds	r3, #5
 80193d2:	4953      	ldr	r1, [pc, #332]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80193d4:	5c8a      	ldrb	r2, [r1, r2]
 80193d6:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80193d8:	693a      	ldr	r2, [r7, #16]
 80193da:	697b      	ldr	r3, [r7, #20]
 80193dc:	4413      	add	r3, r2
 80193de:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80193e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193e4:	3304      	adds	r3, #4
 80193e6:	494e      	ldr	r1, [pc, #312]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80193e8:	5c8a      	ldrb	r2, [r1, r2]
 80193ea:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80193ec:	693a      	ldr	r2, [r7, #16]
 80193ee:	6a3b      	ldr	r3, [r7, #32]
 80193f0:	4413      	add	r3, r2
 80193f2:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80193f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193f8:	3303      	adds	r3, #3
 80193fa:	4949      	ldr	r1, [pc, #292]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80193fc:	5c8a      	ldrb	r2, [r1, r2]
 80193fe:	701a      	strb	r2, [r3, #0]

            /**********/            
            ycomp = (int32_t)(*(pLum +j +8));
 8019400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019402:	3308      	adds	r3, #8
 8019404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019406:	4413      	add	r3, r2
 8019408:	781b      	ldrb	r3, [r3, #0]
 801940a:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801940c:	693a      	ldr	r2, [r7, #16]
 801940e:	69bb      	ldr	r3, [r7, #24]
 8019410:	4413      	add	r3, r2
 8019412:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019418:	3302      	adds	r3, #2
 801941a:	4941      	ldr	r1, [pc, #260]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801941c:	5c8a      	ldrb	r2, [r1, r2]
 801941e:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019420:	693a      	ldr	r2, [r7, #16]
 8019422:	697b      	ldr	r3, [r7, #20]
 8019424:	4413      	add	r3, r2
 8019426:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801942c:	3301      	adds	r3, #1
 801942e:	493c      	ldr	r1, [pc, #240]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019430:	5c8a      	ldrb	r2, [r1, r2]
 8019432:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019434:	693a      	ldr	r2, [r7, #16]
 8019436:	6a3b      	ldr	r3, [r7, #32]
 8019438:	4413      	add	r3, r2
 801943a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801943e:	4a38      	ldr	r2, [pc, #224]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019440:	5cd2      	ldrb	r2, [r2, r3]
 8019442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019444:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));            
 8019446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019448:	3309      	adds	r3, #9
 801944a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801944c:	4413      	add	r3, r2
 801944e:	781b      	ldrb	r3, [r3, #0]
 8019450:	613b      	str	r3, [r7, #16]
            
            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8019452:	693a      	ldr	r2, [r7, #16]
 8019454:	69bb      	ldr	r3, [r7, #24]
 8019456:	4413      	add	r3, r2
 8019458:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801945c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801945e:	3305      	adds	r3, #5
 8019460:	492f      	ldr	r1, [pc, #188]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019462:	5c8a      	ldrb	r2, [r1, r2]
 8019464:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019466:	693a      	ldr	r2, [r7, #16]
 8019468:	697b      	ldr	r3, [r7, #20]
 801946a:	4413      	add	r3, r2
 801946c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019472:	3304      	adds	r3, #4
 8019474:	492a      	ldr	r1, [pc, #168]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019476:	5c8a      	ldrb	r2, [r1, r2]
 8019478:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 801947a:	693a      	ldr	r2, [r7, #16]
 801947c:	6a3b      	ldr	r3, [r7, #32]
 801947e:	4413      	add	r3, r2
 8019480:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019486:	3303      	adds	r3, #3
 8019488:	4925      	ldr	r1, [pc, #148]	; (8019520 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801948a:	5c8a      	ldrb	r2, [r1, r2]
 801948c:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801948e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019490:	3306      	adds	r3, #6
 8019492:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8019494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019496:	3306      	adds	r3, #6
 8019498:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 801949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801949c:	3301      	adds	r3, #1
 801949e:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 80194a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194a2:	3302      	adds	r3, #2
 80194a4:	653b      	str	r3, [r7, #80]	; 0x50
 80194a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194a8:	2b07      	cmp	r3, #7
 80194aa:	f67f af43 	bls.w	8019334 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>
          }
          pLum += 64;                      
 80194ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194b0:	3340      	adds	r3, #64	; 0x40
 80194b2:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 80194b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194b6:	3301      	adds	r3, #1
 80194b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80194ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194bc:	2b01      	cmp	r3, #1
 80194be:	f67f af36 	bls.w	801932e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
        }

        pLum = pLum - 128 + 16;
 80194c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194c4:	3b70      	subs	r3, #112	; 0x70
 80194c6:	637b      	str	r3, [r7, #52]	; 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 80194c8:	4b10      	ldr	r3, [pc, #64]	; (801950c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80194ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194cc:	005b      	lsls	r3, r3, #1
 80194ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80194d0:	4413      	add	r3, r2
 80194d2:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 80194d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194d6:	3302      	adds	r3, #2
 80194d8:	657b      	str	r3, [r7, #84]	; 0x54
 80194da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194dc:	2b0f      	cmp	r3, #15
 80194de:	f67f af0e 	bls.w	80192fe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x72>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80194e8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80194ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	4413      	add	r3, r2
 80194f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80194f2:	429a      	cmp	r2, r3
 80194f4:	f4ff aeda 	bcc.w	80192ac <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80194f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80194fa:	4618      	mov	r0, r3
 80194fc:	375c      	adds	r7, #92	; 0x5c
 80194fe:	46bd      	mov	sp, r7
 8019500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019504:	4770      	bx	lr
 8019506:	bf00      	nop
 8019508:	aaaaaaab 	.word	0xaaaaaaab
 801950c:	24024cbc 	.word	0x24024cbc
 8019510:	240250fc 	.word	0x240250fc
 8019514:	24024cfc 	.word	0x24024cfc
 8019518:	240254fc 	.word	0x240254fc
 801951c:	240258fc 	.word	0x240258fc
 8019520:	0802bdb4 	.word	0x0802bdb4

08019524 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8019524:	b480      	push	{r7}
 8019526:	b097      	sub	sp, #92	; 0x5c
 8019528:	af00      	add	r7, sp, #0
 801952a:	60f8      	str	r0, [r7, #12]
 801952c:	60b9      	str	r1, [r7, #8]
 801952e:	607a      	str	r2, [r7, #4]
 8019530:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	0a1b      	lsrs	r3, r3, #8
 8019536:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801953c:	e0c5      	b.n	80196ca <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801953e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019540:	011a      	lsls	r2, r3, #4
 8019542:	4b69      	ldr	r3, [pc, #420]	; (80196e8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019546:	fbb2 f3f3 	udiv	r3, r2, r3
 801954a:	00db      	lsls	r3, r3, #3
 801954c:	633b      	str	r3, [r7, #48]	; 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801954e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019550:	011b      	lsls	r3, r3, #4
 8019552:	4a65      	ldr	r2, [pc, #404]	; (80196e8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019556:	fbb3 f1f2 	udiv	r1, r3, r2
 801955a:	fb02 f201 	mul.w	r2, r2, r1
 801955e:	1a9b      	subs	r3, r3, r2
 8019560:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019562:	4b61      	ldr	r3, [pc, #388]	; (80196e8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019568:	fb02 f103 	mul.w	r1, r2, r3
 801956c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801956e:	4613      	mov	r3, r2
 8019570:	005b      	lsls	r3, r3, #1
 8019572:	4413      	add	r3, r2
 8019574:	440b      	add	r3, r1
 8019576:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8019578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801957a:	3301      	adds	r3, #1
 801957c:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	3380      	adds	r3, #128	; 0x80
 8019582:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pLum = pInBuffer;
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	63bb      	str	r3, [r7, #56]	; 0x38
    
    for(i= 0; i <  8; i++)
 8019588:	2300      	movs	r3, #0
 801958a:	657b      	str	r3, [r7, #84]	; 0x54
 801958c:	e095      	b.n	80196ba <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801958e:	4b56      	ldr	r3, [pc, #344]	; (80196e8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019590:	691b      	ldr	r3, [r3, #16]
 8019592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019594:	429a      	cmp	r2, r3
 8019596:	f080 808d 	bcs.w	80196b4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 801959a:	68ba      	ldr	r2, [r7, #8]
 801959c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801959e:	4413      	add	r3, r2
 80195a0:	643b      	str	r3, [r7, #64]	; 0x40
        
        for(k= 0; k<2; k++)
 80195a2:	2300      	movs	r3, #0
 80195a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80195a6:	e07a      	b.n	801969e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 80195a8:	2300      	movs	r3, #0
 80195aa:	653b      	str	r3, [r7, #80]	; 0x50
 80195ac:	e06e      	b.n	801968c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {           
            cbcomp = (int32_t)(*(pChrom));
 80195ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195b0:	781b      	ldrb	r3, [r3, #0]
 80195b2:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80195b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195b6:	009b      	lsls	r3, r3, #2
 80195b8:	4a4c      	ldr	r2, [pc, #304]	; (80196ec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 80195ba:	4413      	add	r3, r2
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	627b      	str	r3, [r7, #36]	; 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 80195c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195c2:	3340      	adds	r3, #64	; 0x40
 80195c4:	781b      	ldrb	r3, [r3, #0]
 80195c6:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80195c8:	6a3b      	ldr	r3, [r7, #32]
 80195ca:	009b      	lsls	r3, r3, #2
 80195cc:	4a48      	ldr	r2, [pc, #288]	; (80196f0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 80195ce:	4413      	add	r3, r2
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80195d4:	6a3b      	ldr	r3, [r7, #32]
 80195d6:	009b      	lsls	r3, r3, #2
 80195d8:	4a46      	ldr	r2, [pc, #280]	; (80196f4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 80195da:	4413      	add	r3, r2
 80195dc:	681a      	ldr	r2, [r3, #0]
 80195de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195e0:	009b      	lsls	r3, r3, #2
 80195e2:	4945      	ldr	r1, [pc, #276]	; (80196f8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 80195e4:	440b      	add	r3, r1
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	4413      	add	r3, r2
 80195ea:	141b      	asrs	r3, r3, #16
 80195ec:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 80195ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195f2:	4413      	add	r3, r2
 80195f4:	781b      	ldrb	r3, [r3, #0]
 80195f6:	617b      	str	r3, [r7, #20]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80195f8:	697a      	ldr	r2, [r7, #20]
 80195fa:	69fb      	ldr	r3, [r7, #28]
 80195fc:	4413      	add	r3, r2
 80195fe:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019604:	3302      	adds	r3, #2
 8019606:	493d      	ldr	r1, [pc, #244]	; (80196fc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8019608:	5c8a      	ldrb	r2, [r1, r2]
 801960a:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 801960c:	697a      	ldr	r2, [r7, #20]
 801960e:	69bb      	ldr	r3, [r7, #24]
 8019610:	4413      	add	r3, r2
 8019612:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019618:	3301      	adds	r3, #1
 801961a:	4938      	ldr	r1, [pc, #224]	; (80196fc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801961c:	5c8a      	ldrb	r2, [r1, r2]
 801961e:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019620:	697a      	ldr	r2, [r7, #20]
 8019622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019624:	4413      	add	r3, r2
 8019626:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801962a:	4a34      	ldr	r2, [pc, #208]	; (80196fc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801962c:	5cd2      	ldrb	r2, [r2, r3]
 801962e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019630:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8019632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019634:	3301      	adds	r3, #1
 8019636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019638:	4413      	add	r3, r2
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801963e:	697a      	ldr	r2, [r7, #20]
 8019640:	69fb      	ldr	r3, [r7, #28]
 8019642:	4413      	add	r3, r2
 8019644:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801964a:	3305      	adds	r3, #5
 801964c:	492b      	ldr	r1, [pc, #172]	; (80196fc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801964e:	5c8a      	ldrb	r2, [r1, r2]
 8019650:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019652:	697a      	ldr	r2, [r7, #20]
 8019654:	69bb      	ldr	r3, [r7, #24]
 8019656:	4413      	add	r3, r2
 8019658:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801965c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801965e:	3304      	adds	r3, #4
 8019660:	4926      	ldr	r1, [pc, #152]	; (80196fc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8019662:	5c8a      	ldrb	r2, [r1, r2]
 8019664:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019666:	697a      	ldr	r2, [r7, #20]
 8019668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801966a:	4413      	add	r3, r2
 801966c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019672:	3303      	adds	r3, #3
 8019674:	4921      	ldr	r1, [pc, #132]	; (80196fc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8019676:	5c8a      	ldrb	r2, [r1, r2]
 8019678:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801967a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801967c:	3306      	adds	r3, #6
 801967e:	643b      	str	r3, [r7, #64]	; 0x40
          
            pChrom++;
 8019680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019682:	3301      	adds	r3, #1
 8019684:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8019686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019688:	3302      	adds	r3, #2
 801968a:	653b      	str	r3, [r7, #80]	; 0x50
 801968c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801968e:	2b07      	cmp	r3, #7
 8019690:	d98d      	bls.n	80195ae <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;                      
 8019692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019694:	3340      	adds	r3, #64	; 0x40
 8019696:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8019698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801969a:	3301      	adds	r3, #1
 801969c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801969e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196a0:	2b01      	cmp	r3, #1
 80196a2:	d981      	bls.n	80195a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }
        
        pLum = pLum - 128 + 8;
 80196a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196a6:	3b78      	subs	r3, #120	; 0x78
 80196a8:	63bb      	str	r3, [r7, #56]	; 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80196aa:	4b0f      	ldr	r3, [pc, #60]	; (80196e8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80196ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80196b0:	4413      	add	r3, r2
 80196b2:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 80196b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80196b6:	3301      	adds	r3, #1
 80196b8:	657b      	str	r3, [r7, #84]	; 0x54
 80196ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80196bc:	2b07      	cmp	r3, #7
 80196be:	f67f af66 	bls.w	801958e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80196c8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80196ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	4413      	add	r3, r2
 80196d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80196d2:	429a      	cmp	r2, r3
 80196d4:	f4ff af33 	bcc.w	801953e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80196d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80196da:	4618      	mov	r0, r3
 80196dc:	375c      	adds	r7, #92	; 0x5c
 80196de:	46bd      	mov	sp, r7
 80196e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196e4:	4770      	bx	lr
 80196e6:	bf00      	nop
 80196e8:	24024cbc 	.word	0x24024cbc
 80196ec:	240250fc 	.word	0x240250fc
 80196f0:	24024cfc 	.word	0x24024cfc
 80196f4:	240254fc 	.word	0x240254fc
 80196f8:	240258fc 	.word	0x240258fc
 80196fc:	0802bdb4 	.word	0x0802bdb4

08019700 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8019700:	b480      	push	{r7}
 8019702:	b095      	sub	sp, #84	; 0x54
 8019704:	af00      	add	r7, sp, #0
 8019706:	60f8      	str	r0, [r7, #12]
 8019708:	60b9      	str	r1, [r7, #8]
 801970a:	607a      	str	r2, [r7, #4]
 801970c:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	4a54      	ldr	r2, [pc, #336]	; (8019864 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 8019712:	fba2 2303 	umull	r2, r3, r2, r3
 8019716:	09db      	lsrs	r3, r3, #7
 8019718:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	647b      	str	r3, [r7, #68]	; 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 801971e:	e092      	b.n	8019846 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8019720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019722:	00da      	lsls	r2, r3, #3
 8019724:	4b50      	ldr	r3, [pc, #320]	; (8019868 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019728:	fbb2 f3f3 	udiv	r3, r2, r3
 801972c:	00db      	lsls	r3, r3, #3
 801972e:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8019730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019732:	00db      	lsls	r3, r3, #3
 8019734:	4a4c      	ldr	r2, [pc, #304]	; (8019868 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019736:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019738:	fbb3 f1f2 	udiv	r1, r3, r2
 801973c:	fb02 f201 	mul.w	r2, r2, r1
 8019740:	1a9b      	subs	r3, r3, r2
 8019742:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019744:	4b48      	ldr	r3, [pc, #288]	; (8019868 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801974a:	fb02 f103 	mul.w	r1, r2, r3
 801974e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019750:	4613      	mov	r3, r2
 8019752:	005b      	lsls	r3, r3, #1
 8019754:	4413      	add	r3, r2
 8019756:	440b      	add	r3, r1
 8019758:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;   
 801975a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801975c:	3301      	adds	r3, #1
 801975e:	647b      	str	r3, [r7, #68]	; 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	3340      	adds	r3, #64	; 0x40
 8019764:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  8; i++)
 801976a:	2300      	movs	r3, #0
 801976c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801976e:	e064      	b.n	801983a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8019770:	4b3d      	ldr	r3, [pc, #244]	; (8019868 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019772:	691b      	ldr	r3, [r3, #16]
 8019774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019776:	429a      	cmp	r2, r3
 8019778:	d25c      	bcs.n	8019834 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 801977a:	68ba      	ldr	r2, [r7, #8]
 801977c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801977e:	4413      	add	r3, r2
 8019780:	63fb      	str	r3, [r7, #60]	; 0x3c
        

          for(j=0; j < 8; j++)
 8019782:	2300      	movs	r3, #0
 8019784:	64bb      	str	r3, [r7, #72]	; 0x48
 8019786:	e04a      	b.n	801981e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {           
            cbcomp = (int32_t)(*pChrom);
 8019788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801978a:	781b      	ldrb	r3, [r3, #0]
 801978c:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019790:	009b      	lsls	r3, r3, #2
 8019792:	4a36      	ldr	r2, [pc, #216]	; (801986c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 8019794:	4413      	add	r3, r2
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 801979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801979c:	3340      	adds	r3, #64	; 0x40
 801979e:	781b      	ldrb	r3, [r3, #0]
 80197a0:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80197a2:	69fb      	ldr	r3, [r7, #28]
 80197a4:	009b      	lsls	r3, r3, #2
 80197a6:	4a32      	ldr	r2, [pc, #200]	; (8019870 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 80197a8:	4413      	add	r3, r2
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80197ae:	69fb      	ldr	r3, [r7, #28]
 80197b0:	009b      	lsls	r3, r3, #2
 80197b2:	4a30      	ldr	r2, [pc, #192]	; (8019874 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 80197b4:	4413      	add	r3, r2
 80197b6:	681a      	ldr	r2, [r3, #0]
 80197b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ba:	009b      	lsls	r3, r3, #2
 80197bc:	492e      	ldr	r1, [pc, #184]	; (8019878 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80197be:	440b      	add	r3, r1
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	4413      	add	r3, r2
 80197c4:	141b      	asrs	r3, r3, #16
 80197c6:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
            ycomp = (int32_t)(*(pLum +j));
 80197c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80197ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197cc:	4413      	add	r3, r2
 80197ce:	781b      	ldrb	r3, [r3, #0]
 80197d0:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80197d2:	693a      	ldr	r2, [r7, #16]
 80197d4:	69bb      	ldr	r3, [r7, #24]
 80197d6:	4413      	add	r3, r2
 80197d8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80197dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197de:	3302      	adds	r3, #2
 80197e0:	4926      	ldr	r1, [pc, #152]	; (801987c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80197e2:	5c8a      	ldrb	r2, [r1, r2]
 80197e4:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80197e6:	693a      	ldr	r2, [r7, #16]
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	4413      	add	r3, r2
 80197ec:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80197f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197f2:	3301      	adds	r3, #1
 80197f4:	4921      	ldr	r1, [pc, #132]	; (801987c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80197f6:	5c8a      	ldrb	r2, [r1, r2]
 80197f8:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        
 80197fa:	693a      	ldr	r2, [r7, #16]
 80197fc:	6a3b      	ldr	r3, [r7, #32]
 80197fe:	4413      	add	r3, r2
 8019800:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019804:	4a1d      	ldr	r2, [pc, #116]	; (801987c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8019806:	5cd2      	ldrb	r2, [r2, r3]
 8019808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801980a:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 801980c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801980e:	3303      	adds	r3, #3
 8019810:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 8019812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019814:	3301      	adds	r3, #1
 8019816:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8019818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801981a:	3301      	adds	r3, #1
 801981c:	64bb      	str	r3, [r7, #72]	; 0x48
 801981e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019820:	2b07      	cmp	r3, #7
 8019822:	d9b1      	bls.n	8019788 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 8019824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019826:	3308      	adds	r3, #8
 8019828:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 801982a:	4b0f      	ldr	r3, [pc, #60]	; (8019868 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 801982c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801982e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019830:	4413      	add	r3, r2
 8019832:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 8019834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019836:	3301      	adds	r3, #1
 8019838:	64fb      	str	r3, [r7, #76]	; 0x4c
 801983a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801983c:	2b07      	cmp	r3, #7
 801983e:	d997      	bls.n	8019770 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	33c0      	adds	r3, #192	; 0xc0
 8019844:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8019846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	4413      	add	r3, r2
 801984c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801984e:	429a      	cmp	r2, r3
 8019850:	f4ff af66 	bcc.w	8019720 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8019854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8019856:	4618      	mov	r0, r3
 8019858:	3754      	adds	r7, #84	; 0x54
 801985a:	46bd      	mov	sp, r7
 801985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019860:	4770      	bx	lr
 8019862:	bf00      	nop
 8019864:	aaaaaaab 	.word	0xaaaaaaab
 8019868:	24024cbc 	.word	0x24024cbc
 801986c:	240250fc 	.word	0x240250fc
 8019870:	24024cfc 	.word	0x24024cfc
 8019874:	240254fc 	.word	0x240254fc
 8019878:	240258fc 	.word	0x240258fc
 801987c:	0802bdb4 	.word	0x0802bdb4

08019880 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8019880:	b480      	push	{r7}
 8019882:	b08f      	sub	sp, #60	; 0x3c
 8019884:	af00      	add	r7, sp, #0
 8019886:	60f8      	str	r0, [r7, #12]
 8019888:	60b9      	str	r1, [r7, #8]
 801988a:	607a      	str	r2, [r7, #4]
 801988c:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 801988e:	683b      	ldr	r3, [r7, #0]
 8019890:	099b      	lsrs	r3, r3, #6
 8019892:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	637b      	str	r3, [r7, #52]	; 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 8019898:	e05b      	b.n	8019952 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801989a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801989c:	00da      	lsls	r2, r3, #3
 801989e:	4b33      	ldr	r3, [pc, #204]	; (801996c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80198a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80198a6:	00db      	lsls	r3, r3, #3
 80198a8:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80198aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198ac:	00db      	lsls	r3, r3, #3
 80198ae:	4a2f      	ldr	r2, [pc, #188]	; (801996c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80198b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80198b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80198b6:	fb02 f201 	mul.w	r2, r2, r1
 80198ba:	1a9b      	subs	r3, r3, r2
 80198bc:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80198be:	4b2b      	ldr	r3, [pc, #172]	; (801996c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80198c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80198c2:	69ba      	ldr	r2, [r7, #24]
 80198c4:	fb02 f103 	mul.w	r1, r2, r3
 80198c8:	697a      	ldr	r2, [r7, #20]
 80198ca:	4613      	mov	r3, r2
 80198cc:	005b      	lsls	r3, r3, #1
 80198ce:	4413      	add	r3, r2
 80198d0:	440b      	add	r3, r1
 80198d2:	633b      	str	r3, [r7, #48]	; 0x30
    
    currentMCU++;
 80198d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198d6:	3301      	adds	r3, #1
 80198d8:	637b      	str	r3, [r7, #52]	; 0x34
  
    pLum = pInBuffer;
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 80198de:	2300      	movs	r3, #0
 80198e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80198e2:	e030      	b.n	8019946 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    { 
      pOutAddr = pOutBuffer + refline;
 80198e4:	68ba      	ldr	r2, [r7, #8]
 80198e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e8:	4413      	add	r3, r2
 80198ea:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80198ec:	4b1f      	ldr	r3, [pc, #124]	; (801996c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80198ee:	691b      	ldr	r3, [r3, #16]
 80198f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d224      	bcs.n	8019940 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {  
        for(j=0; j < 8; j++)
 80198f6:	2300      	movs	r3, #0
 80198f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80198fa:	e019      	b.n	8019930 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        { 
          ySample =   (uint32_t)(*pLum);
 80198fc:	6a3b      	ldr	r3, [r7, #32]
 80198fe:	781b      	ldrb	r3, [r3, #0]
 8019900:	613b      	str	r3, [r7, #16]
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
          pOutAddr[0] =  ySample;
 8019902:	693b      	ldr	r3, [r7, #16]
 8019904:	b2da      	uxtb	r2, r3
 8019906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019908:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 801990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801990c:	3301      	adds	r3, #1
 801990e:	693a      	ldr	r2, [r7, #16]
 8019910:	b2d2      	uxtb	r2, r2
 8019912:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;     
 8019914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019916:	3302      	adds	r3, #2
 8019918:	693a      	ldr	r2, [r7, #16]
 801991a:	b2d2      	uxtb	r2, r2
 801991c:	701a      	strb	r2, [r3, #0]
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 801991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019920:	3303      	adds	r3, #3
 8019922:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 8019924:	6a3b      	ldr	r3, [r7, #32]
 8019926:	3301      	adds	r3, #1
 8019928:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 801992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801992c:	3301      	adds	r3, #1
 801992e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019932:	2b07      	cmp	r3, #7
 8019934:	d9e2      	bls.n	80198fc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 8019936:	4b0d      	ldr	r3, [pc, #52]	; (801996c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801993a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801993c:	4413      	add	r3, r2
 801993e:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 8019940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019942:	3301      	adds	r3, #1
 8019944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019948:	2b07      	cmp	r3, #7
 801994a:	d9cb      	bls.n	80198e4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	3340      	adds	r3, #64	; 0x40
 8019950:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8019952:	69fa      	ldr	r2, [r7, #28]
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	4413      	add	r3, r2
 8019958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801995a:	429a      	cmp	r2, r3
 801995c:	d39d      	bcc.n	801989a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 801995e:	69fb      	ldr	r3, [r7, #28]
}
 8019960:	4618      	mov	r0, r3
 8019962:	373c      	adds	r7, #60	; 0x3c
 8019964:	46bd      	mov	sp, r7
 8019966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801996a:	4770      	bx	lr
 801996c:	24024cbc 	.word	0x24024cbc

08019970 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8019970:	b480      	push	{r7}
 8019972:	b093      	sub	sp, #76	; 0x4c
 8019974:	af00      	add	r7, sp, #0
 8019976:	60f8      	str	r0, [r7, #12]
 8019978:	60b9      	str	r1, [r7, #8]
 801997a:	607a      	str	r2, [r7, #4]
 801997c:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 801997e:	683b      	ldr	r3, [r7, #0]
 8019980:	0a1b      	lsrs	r3, r3, #8
 8019982:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	63fb      	str	r3, [r7, #60]	; 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 8019988:	e089      	b.n	8019a9e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801998a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801998c:	00da      	lsls	r2, r3, #3
 801998e:	4b4b      	ldr	r3, [pc, #300]	; (8019abc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019992:	fbb2 f3f3 	udiv	r3, r2, r3
 8019996:	00db      	lsls	r3, r3, #3
 8019998:	62bb      	str	r3, [r7, #40]	; 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801999a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801999c:	00db      	lsls	r3, r3, #3
 801999e:	4a47      	ldr	r2, [pc, #284]	; (8019abc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 80199a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80199a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80199a6:	fb02 f201 	mul.w	r2, r2, r1
 80199aa:	1a9b      	subs	r3, r3, r2
 80199ac:	627b      	str	r3, [r7, #36]	; 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80199ae:	4b43      	ldr	r3, [pc, #268]	; (8019abc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 80199b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80199b4:	fb02 f103 	mul.w	r1, r2, r3
 80199b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80199ba:	4613      	mov	r3, r2
 80199bc:	005b      	lsls	r3, r3, #1
 80199be:	4413      	add	r3, r2
 80199c0:	440b      	add	r3, r1
 80199c2:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 80199c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199c6:	3301      	adds	r3, #1
 80199c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pChrom = pInBuffer;
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	633b      	str	r3, [r7, #48]	; 0x30
    
    for(i= 0; i <  8; i++)
 80199ce:	2300      	movs	r3, #0
 80199d0:	647b      	str	r3, [r7, #68]	; 0x44
 80199d2:	e05d      	b.n	8019a90 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80199d4:	4b39      	ldr	r3, [pc, #228]	; (8019abc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 80199d6:	691b      	ldr	r3, [r3, #16]
 80199d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199da:	429a      	cmp	r2, r3
 80199dc:	d255      	bcs.n	8019a8a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;        
 80199de:	68ba      	ldr	r2, [r7, #8]
 80199e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199e2:	4413      	add	r3, r2
 80199e4:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 80199e6:	2300      	movs	r3, #0
 80199e8:	643b      	str	r3, [r7, #64]	; 0x40
 80199ea:	e046      	b.n	8019a7a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 80199ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199ee:	33c0      	adds	r3, #192	; 0xc0
 80199f0:	781b      	ldrb	r3, [r3, #0]
 80199f2:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80199f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f6:	781b      	ldrb	r3, [r3, #0]
 80199f8:	461a      	mov	r2, r3
 80199fa:	6a3b      	ldr	r3, [r7, #32]
 80199fc:	fb03 f302 	mul.w	r3, r3, r2
 8019a00:	4a2f      	ldr	r2, [pc, #188]	; (8019ac0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8019a02:	fb82 1203 	smull	r1, r2, r2, r3
 8019a06:	441a      	add	r2, r3
 8019a08:	11d2      	asrs	r2, r2, #7
 8019a0a:	17db      	asrs	r3, r3, #31
 8019a0c:	1ad3      	subs	r3, r2, r3
 8019a0e:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8019a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a12:	3340      	adds	r3, #64	; 0x40
 8019a14:	781b      	ldrb	r3, [r3, #0]
 8019a16:	461a      	mov	r2, r3
 8019a18:	6a3b      	ldr	r3, [r7, #32]
 8019a1a:	fb03 f302 	mul.w	r3, r3, r2
 8019a1e:	4a28      	ldr	r2, [pc, #160]	; (8019ac0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8019a20:	fb82 1203 	smull	r1, r2, r2, r3
 8019a24:	441a      	add	r2, r3
 8019a26:	11d2      	asrs	r2, r2, #7
 8019a28:	17db      	asrs	r3, r3, #31
 8019a2a:	1ad3      	subs	r3, r2, r3
 8019a2c:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8019a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a30:	3380      	adds	r3, #128	; 0x80
 8019a32:	781b      	ldrb	r3, [r3, #0]
 8019a34:	461a      	mov	r2, r3
 8019a36:	6a3b      	ldr	r3, [r7, #32]
 8019a38:	fb03 f302 	mul.w	r3, r3, r2
 8019a3c:	4a20      	ldr	r2, [pc, #128]	; (8019ac0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8019a3e:	fb82 1203 	smull	r1, r2, r2, r3
 8019a42:	441a      	add	r2, r3
 8019a44:	11d2      	asrs	r2, r2, #7
 8019a46:	17db      	asrs	r3, r3, #31
 8019a48:	1ad3      	subs	r3, r2, r3
 8019a4a:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);     
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 8019a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a4e:	3302      	adds	r3, #2
 8019a50:	69fa      	ldr	r2, [r7, #28]
 8019a52:	b2d2      	uxtb	r2, r2
 8019a54:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 8019a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a58:	3301      	adds	r3, #1
 8019a5a:	69ba      	ldr	r2, [r7, #24]
 8019a5c:	b2d2      	uxtb	r2, r2
 8019a5e:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 8019a60:	697b      	ldr	r3, [r7, #20]
 8019a62:	b2da      	uxtb	r2, r3
 8019a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a66:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8019a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a6a:	3303      	adds	r3, #3
 8019a6c:	637b      	str	r3, [r7, #52]	; 0x34
          
            pChrom++;
 8019a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a70:	3301      	adds	r3, #1
 8019a72:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8019a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a76:	3301      	adds	r3, #1
 8019a78:	643b      	str	r3, [r7, #64]	; 0x40
 8019a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a7c:	2b07      	cmp	r3, #7
 8019a7e:	d9b5      	bls.n	80199ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8019a80:	4b0e      	ldr	r3, [pc, #56]	; (8019abc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a86:	4413      	add	r3, r2
 8019a88:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 8019a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a8c:	3301      	adds	r3, #1
 8019a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8019a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a92:	2b07      	cmp	r3, #7
 8019a94:	d99e      	bls.n	80199d4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a9c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8019a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	4413      	add	r3, r2
 8019aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019aa6:	429a      	cmp	r2, r3
 8019aa8:	f4ff af6f 	bcc.w	801998a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8019aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8019aae:	4618      	mov	r0, r3
 8019ab0:	374c      	adds	r7, #76	; 0x4c
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ab8:	4770      	bx	lr
 8019aba:	bf00      	nop
 8019abc:	24024cbc 	.word	0x24024cbc
 8019ac0:	80808081 	.word	0x80808081

08019ac4 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8019ac4:	b480      	push	{r7}
 8019ac6:	b087      	sub	sp, #28
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	60f8      	str	r0, [r7, #12]
 8019acc:	60b9      	str	r1, [r7, #8]
 8019ace:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	4a7c      	ldr	r2, [pc, #496]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ad6:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	68db      	ldr	r3, [r3, #12]
 8019adc:	4a7a      	ldr	r2, [pc, #488]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ade:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	689b      	ldr	r3, [r3, #8]
 8019ae4:	4a78      	ldr	r2, [pc, #480]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ae6:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	68db      	ldr	r3, [r3, #12]
 8019aec:	68fa      	ldr	r2, [r7, #12]
 8019aee:	6892      	ldr	r2, [r2, #8]
 8019af0:	fb02 f203 	mul.w	r2, r2, r3
 8019af4:	4613      	mov	r3, r2
 8019af6:	005b      	lsls	r3, r3, #1
 8019af8:	4413      	add	r3, r2
 8019afa:	4a73      	ldr	r2, [pc, #460]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019afc:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	685b      	ldr	r3, [r3, #4]
 8019b02:	4a71      	ldr	r2, [pc, #452]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b04:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8019b06:	4b70      	ldr	r3, [pc, #448]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	2b10      	cmp	r3, #16
 8019b0c:	d155      	bne.n	8019bba <JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8019b0e:	4b6e      	ldr	r3, [pc, #440]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b10:	685b      	ldr	r3, [r3, #4]
 8019b12:	2b01      	cmp	r3, #1
 8019b14:	d119      	bne.n	8019b4a <JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8019b16:	68bb      	ldr	r3, [r7, #8]
 8019b18:	4a6c      	ldr	r2, [pc, #432]	; (8019ccc <JPEG_GetDecodeColorConvertFunc+0x208>)
 8019b1a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8019b1c:	4b6a      	ldr	r3, [pc, #424]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b1e:	689b      	ldr	r3, [r3, #8]
 8019b20:	f003 030f 	and.w	r3, r3, #15
 8019b24:	4a68      	ldr	r2, [pc, #416]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b26:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8019b28:	4b67      	ldr	r3, [pc, #412]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b2a:	695b      	ldr	r3, [r3, #20]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d005      	beq.n	8019b3c <JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8019b30:	4b65      	ldr	r3, [pc, #404]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b32:	695b      	ldr	r3, [r3, #20]
 8019b34:	f1c3 0310 	rsb	r3, r3, #16
 8019b38:	4a63      	ldr	r2, [pc, #396]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b3a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8019b3c:	4b62      	ldr	r3, [pc, #392]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b3e:	2210      	movs	r2, #16
 8019b40:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8019b42:	4b61      	ldr	r3, [pc, #388]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b44:	2210      	movs	r2, #16
 8019b46:	621a      	str	r2, [r3, #32]
 8019b48:	e075      	b.n	8019c36 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8019b4a:	4b5f      	ldr	r3, [pc, #380]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b4c:	685b      	ldr	r3, [r3, #4]
 8019b4e:	2b02      	cmp	r3, #2
 8019b50:	d119      	bne.n	8019b86 <JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8019b52:	68bb      	ldr	r3, [r7, #8]
 8019b54:	4a5e      	ldr	r2, [pc, #376]	; (8019cd0 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 8019b56:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8019b58:	4b5b      	ldr	r3, [pc, #364]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b5a:	689b      	ldr	r3, [r3, #8]
 8019b5c:	f003 030f 	and.w	r3, r3, #15
 8019b60:	4a59      	ldr	r2, [pc, #356]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b62:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8019b64:	4b58      	ldr	r3, [pc, #352]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b66:	695b      	ldr	r3, [r3, #20]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d005      	beq.n	8019b78 <JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8019b6c:	4b56      	ldr	r3, [pc, #344]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b6e:	695b      	ldr	r3, [r3, #20]
 8019b70:	f1c3 0310 	rsb	r3, r3, #16
 8019b74:	4a54      	ldr	r2, [pc, #336]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b76:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8019b78:	4b53      	ldr	r3, [pc, #332]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b7a:	2210      	movs	r2, #16
 8019b7c:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8019b7e:	4b52      	ldr	r3, [pc, #328]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b80:	2208      	movs	r2, #8
 8019b82:	621a      	str	r2, [r3, #32]
 8019b84:	e057      	b.n	8019c36 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8019b86:	68bb      	ldr	r3, [r7, #8]
 8019b88:	4a52      	ldr	r2, [pc, #328]	; (8019cd4 <JPEG_GetDecodeColorConvertFunc+0x210>)
 8019b8a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8019b8c:	4b4e      	ldr	r3, [pc, #312]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b8e:	689b      	ldr	r3, [r3, #8]
 8019b90:	f003 0307 	and.w	r3, r3, #7
 8019b94:	4a4c      	ldr	r2, [pc, #304]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b96:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8019b98:	4b4b      	ldr	r3, [pc, #300]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b9a:	695b      	ldr	r3, [r3, #20]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d005      	beq.n	8019bac <JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019ba0:	4b49      	ldr	r3, [pc, #292]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ba2:	695b      	ldr	r3, [r3, #20]
 8019ba4:	f1c3 0308 	rsb	r3, r3, #8
 8019ba8:	4a47      	ldr	r2, [pc, #284]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019baa:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8019bac:	4b46      	ldr	r3, [pc, #280]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019bae:	2208      	movs	r2, #8
 8019bb0:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8019bb2:	4b45      	ldr	r3, [pc, #276]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019bb4:	2208      	movs	r2, #8
 8019bb6:	621a      	str	r2, [r3, #32]
 8019bb8:	e03d      	b.n	8019c36 <JPEG_GetDecodeColorConvertFunc+0x172>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8019bba:	4b43      	ldr	r3, [pc, #268]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d119      	bne.n	8019bf6 <JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8019bc2:	68bb      	ldr	r3, [r7, #8]
 8019bc4:	4a44      	ldr	r2, [pc, #272]	; (8019cd8 <JPEG_GetDecodeColorConvertFunc+0x214>)
 8019bc6:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8019bc8:	4b3f      	ldr	r3, [pc, #252]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019bca:	689b      	ldr	r3, [r3, #8]
 8019bcc:	f003 0307 	and.w	r3, r3, #7
 8019bd0:	4a3d      	ldr	r2, [pc, #244]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019bd2:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8019bd4:	4b3c      	ldr	r3, [pc, #240]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019bd6:	695b      	ldr	r3, [r3, #20]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d005      	beq.n	8019be8 <JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019bdc:	4b3a      	ldr	r3, [pc, #232]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019bde:	695b      	ldr	r3, [r3, #20]
 8019be0:	f1c3 0308 	rsb	r3, r3, #8
 8019be4:	4a38      	ldr	r2, [pc, #224]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019be6:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8019be8:	4b37      	ldr	r3, [pc, #220]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019bea:	2208      	movs	r2, #8
 8019bec:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8019bee:	4b36      	ldr	r3, [pc, #216]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019bf0:	2208      	movs	r2, #8
 8019bf2:	621a      	str	r2, [r3, #32]
 8019bf4:	e01f      	b.n	8019c36 <JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8019bf6:	4b34      	ldr	r3, [pc, #208]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	2b30      	cmp	r3, #48	; 0x30
 8019bfc:	d119      	bne.n	8019c32 <JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8019bfe:	68bb      	ldr	r3, [r7, #8]
 8019c00:	4a36      	ldr	r2, [pc, #216]	; (8019cdc <JPEG_GetDecodeColorConvertFunc+0x218>)
 8019c02:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8019c04:	4b30      	ldr	r3, [pc, #192]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c06:	689b      	ldr	r3, [r3, #8]
 8019c08:	f003 0307 	and.w	r3, r3, #7
 8019c0c:	4a2e      	ldr	r2, [pc, #184]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c0e:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8019c10:	4b2d      	ldr	r3, [pc, #180]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c12:	695b      	ldr	r3, [r3, #20]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d005      	beq.n	8019c24 <JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019c18:	4b2b      	ldr	r3, [pc, #172]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c1a:	695b      	ldr	r3, [r3, #20]
 8019c1c:	f1c3 0308 	rsb	r3, r3, #8
 8019c20:	4a29      	ldr	r2, [pc, #164]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c22:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8019c24:	4b28      	ldr	r3, [pc, #160]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c26:	2208      	movs	r2, #8
 8019c28:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8019c2a:	4b27      	ldr	r3, [pc, #156]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c2c:	2208      	movs	r2, #8
 8019c2e:	621a      	str	r2, [r3, #32]
 8019c30:	e001      	b.n	8019c36 <JPEG_GetDecodeColorConvertFunc+0x172>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 8019c32:	2301      	movs	r3, #1
 8019c34:	e042      	b.n	8019cbc <JPEG_GetDecodeColorConvertFunc+0x1f8>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8019c36:	4b24      	ldr	r3, [pc, #144]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c38:	689a      	ldr	r2, [r3, #8]
 8019c3a:	4b23      	ldr	r3, [pc, #140]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c3c:	695b      	ldr	r3, [r3, #20]
 8019c3e:	4413      	add	r3, r2
 8019c40:	4a21      	ldr	r2, [pc, #132]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c42:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8019c44:	4b20      	ldr	r3, [pc, #128]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c46:	689a      	ldr	r2, [r3, #8]
 8019c48:	4613      	mov	r3, r2
 8019c4a:	005b      	lsls	r3, r3, #1
 8019c4c:	4413      	add	r3, r2
 8019c4e:	4a1e      	ldr	r2, [pc, #120]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c50:	6293      	str	r3, [r2, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8019c52:	4b1d      	ldr	r3, [pc, #116]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c54:	689a      	ldr	r2, [r3, #8]
 8019c56:	4b1c      	ldr	r3, [pc, #112]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c58:	69db      	ldr	r3, [r3, #28]
 8019c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c5e:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8019c60:	4b19      	ldr	r3, [pc, #100]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c62:	689b      	ldr	r3, [r3, #8]
 8019c64:	4a18      	ldr	r2, [pc, #96]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c66:	69d2      	ldr	r2, [r2, #28]
 8019c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8019c6c:	fb02 f201 	mul.w	r2, r2, r1
 8019c70:	1a9b      	subs	r3, r3, r2
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d002      	beq.n	8019c7c <JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	3301      	adds	r3, #1
 8019c7a:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8019c7c:	4b12      	ldr	r3, [pc, #72]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c7e:	68da      	ldr	r2, [r3, #12]
 8019c80:	4b11      	ldr	r3, [pc, #68]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c82:	6a1b      	ldr	r3, [r3, #32]
 8019c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c88:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8019c8a:	4b0f      	ldr	r3, [pc, #60]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c8c:	68db      	ldr	r3, [r3, #12]
 8019c8e:	4a0e      	ldr	r2, [pc, #56]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019c90:	6a12      	ldr	r2, [r2, #32]
 8019c92:	fbb3 f1f2 	udiv	r1, r3, r2
 8019c96:	fb02 f201 	mul.w	r2, r2, r1
 8019c9a:	1a9b      	subs	r3, r3, r2
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d002      	beq.n	8019ca6 <JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8019ca0:	693b      	ldr	r3, [r7, #16]
 8019ca2:	3301      	adds	r3, #1
 8019ca4:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8019ca6:	697b      	ldr	r3, [r7, #20]
 8019ca8:	693a      	ldr	r2, [r7, #16]
 8019caa:	fb02 f303 	mul.w	r3, r2, r3
 8019cae:	4a06      	ldr	r2, [pc, #24]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8019cb2:	4b05      	ldr	r3, [pc, #20]	; (8019cc8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8019cba:	2300      	movs	r3, #0
}
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	371c      	adds	r7, #28
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc6:	4770      	bx	lr
 8019cc8:	24024cbc 	.word	0x24024cbc
 8019ccc:	0801928d 	.word	0x0801928d
 8019cd0:	08019525 	.word	0x08019525
 8019cd4:	08019701 	.word	0x08019701
 8019cd8:	08019881 	.word	0x08019881
 8019cdc:	08019971 	.word	0x08019971

08019ce0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8019ce0:	8880      	ldrh	r0, [r0, #4]
 8019ce2:	4770      	bx	lr

08019ce4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8019ce4:	b570      	push	{r4, r5, r6, lr}
 8019ce6:	6803      	ldr	r3, [r0, #0]
 8019ce8:	460c      	mov	r4, r1
 8019cea:	2100      	movs	r1, #0
 8019cec:	4605      	mov	r5, r0
 8019cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cf0:	4798      	blx	r3
 8019cf2:	4606      	mov	r6, r0
 8019cf4:	682b      	ldr	r3, [r5, #0]
 8019cf6:	4628      	mov	r0, r5
 8019cf8:	1ba4      	subs	r4, r4, r6
 8019cfa:	6a1b      	ldr	r3, [r3, #32]
 8019cfc:	b2a4      	uxth	r4, r4
 8019cfe:	4798      	blx	r3
 8019d00:	fbb4 f0f0 	udiv	r0, r4, r0
 8019d04:	bd70      	pop	{r4, r5, r6, pc}

08019d06 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8019d06:	2300      	movs	r3, #0
 8019d08:	8083      	strh	r3, [r0, #4]
 8019d0a:	4770      	bx	lr

08019d0c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8019d0c:	b510      	push	{r4, lr}
 8019d0e:	6803      	ldr	r3, [r0, #0]
 8019d10:	4604      	mov	r4, r0
 8019d12:	8881      	ldrh	r1, [r0, #4]
 8019d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d16:	4798      	blx	r3
 8019d18:	88a3      	ldrh	r3, [r4, #4]
 8019d1a:	3301      	adds	r3, #1
 8019d1c:	80a3      	strh	r3, [r4, #4]
 8019d1e:	bd10      	pop	{r4, pc}

08019d20 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8019d20:	6803      	ldr	r3, [r0, #0]
 8019d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d24:	4718      	bx	r3

08019d26 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8019d26:	4770      	bx	lr

08019d28 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8019d28:	4a02      	ldr	r2, [pc, #8]	; (8019d34 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8019d2a:	6002      	str	r2, [r0, #0]
 8019d2c:	2200      	movs	r2, #0
 8019d2e:	8082      	strh	r2, [r0, #4]
 8019d30:	4770      	bx	lr
 8019d32:	bf00      	nop
 8019d34:	0802c0bc 	.word	0x0802c0bc

08019d38 <_ZN8touchgfx9Container13getFirstChildEv>:
 8019d38:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019d3a:	4770      	bx	lr

08019d3c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8019d3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019d3e:	2000      	movs	r0, #0
 8019d40:	b12b      	cbz	r3, 8019d4e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019d42:	b920      	cbnz	r0, 8019d4e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019d44:	1a5a      	subs	r2, r3, r1
 8019d46:	699b      	ldr	r3, [r3, #24]
 8019d48:	4250      	negs	r0, r2
 8019d4a:	4150      	adcs	r0, r2
 8019d4c:	e7f8      	b.n	8019d40 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8019d4e:	4770      	bx	lr

08019d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8019d50:	2300      	movs	r3, #0
 8019d52:	6148      	str	r0, [r1, #20]
 8019d54:	618b      	str	r3, [r1, #24]
 8019d56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019d58:	b913      	cbnz	r3, 8019d60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8019d5a:	6281      	str	r1, [r0, #40]	; 0x28
 8019d5c:	4770      	bx	lr
 8019d5e:	4613      	mov	r3, r2
 8019d60:	699a      	ldr	r2, [r3, #24]
 8019d62:	2a00      	cmp	r2, #0
 8019d64:	d1fb      	bne.n	8019d5e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8019d66:	6199      	str	r1, [r3, #24]
 8019d68:	4770      	bx	lr

08019d6a <_ZN8touchgfx9Container9removeAllEv>:
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019d6e:	b123      	cbz	r3, 8019d7a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8019d70:	6999      	ldr	r1, [r3, #24]
 8019d72:	6281      	str	r1, [r0, #40]	; 0x28
 8019d74:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8019d78:	e7f8      	b.n	8019d6c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8019d7a:	4770      	bx	lr

08019d7c <_ZN8touchgfx9Container6unlinkEv>:
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	6283      	str	r3, [r0, #40]	; 0x28
 8019d80:	4770      	bx	lr

08019d82 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8019d82:	2200      	movs	r2, #0
 8019d84:	8002      	strh	r2, [r0, #0]
 8019d86:	8042      	strh	r2, [r0, #2]
 8019d88:	8082      	strh	r2, [r0, #4]
 8019d8a:	80c2      	strh	r2, [r0, #6]
 8019d8c:	4770      	bx	lr

08019d8e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8019d8e:	b570      	push	{r4, r5, r6, lr}
 8019d90:	460d      	mov	r5, r1
 8019d92:	4616      	mov	r6, r2
 8019d94:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019d96:	b13c      	cbz	r4, 8019da8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8019d98:	6823      	ldr	r3, [r4, #0]
 8019d9a:	4620      	mov	r0, r4
 8019d9c:	4632      	mov	r2, r6
 8019d9e:	4629      	mov	r1, r5
 8019da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019da2:	4798      	blx	r3
 8019da4:	69a4      	ldr	r4, [r4, #24]
 8019da6:	e7f6      	b.n	8019d96 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8019da8:	bd70      	pop	{r4, r5, r6, pc}

08019daa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8019daa:	b538      	push	{r3, r4, r5, lr}
 8019dac:	460d      	mov	r5, r1
 8019dae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019db0:	b134      	cbz	r4, 8019dc0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8019db2:	682b      	ldr	r3, [r5, #0]
 8019db4:	4621      	mov	r1, r4
 8019db6:	4628      	mov	r0, r5
 8019db8:	689b      	ldr	r3, [r3, #8]
 8019dba:	4798      	blx	r3
 8019dbc:	69a4      	ldr	r4, [r4, #24]
 8019dbe:	e7f7      	b.n	8019db0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8019dc0:	bd38      	pop	{r3, r4, r5, pc}

08019dc2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8019dc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019dc4:	b19b      	cbz	r3, 8019dee <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8019dc6:	428b      	cmp	r3, r1
 8019dc8:	d109      	bne.n	8019dde <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8019dca:	699a      	ldr	r2, [r3, #24]
 8019dcc:	2100      	movs	r1, #0
 8019dce:	6159      	str	r1, [r3, #20]
 8019dd0:	6282      	str	r2, [r0, #40]	; 0x28
 8019dd2:	b902      	cbnz	r2, 8019dd6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8019dd4:	4770      	bx	lr
 8019dd6:	6199      	str	r1, [r3, #24]
 8019dd8:	4770      	bx	lr
 8019dda:	4613      	mov	r3, r2
 8019ddc:	b13a      	cbz	r2, 8019dee <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8019dde:	699a      	ldr	r2, [r3, #24]
 8019de0:	428a      	cmp	r2, r1
 8019de2:	d1fa      	bne.n	8019dda <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8019de4:	698a      	ldr	r2, [r1, #24]
 8019de6:	619a      	str	r2, [r3, #24]
 8019de8:	2300      	movs	r3, #0
 8019dea:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8019dee:	4770      	bx	lr

08019df0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8019df0:	b410      	push	{r4}
 8019df2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019df4:	4604      	mov	r4, r0
 8019df6:	b92b      	cbnz	r3, 8019e04 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8019df8:	6803      	ldr	r3, [r0, #0]
 8019dfa:	4611      	mov	r1, r2
 8019dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e02:	4718      	bx	r3
 8019e04:	b941      	cbnz	r1, 8019e18 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8019e06:	6193      	str	r3, [r2, #24]
 8019e08:	6282      	str	r2, [r0, #40]	; 0x28
 8019e0a:	6154      	str	r4, [r2, #20]
 8019e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e10:	4770      	bx	lr
 8019e12:	4603      	mov	r3, r0
 8019e14:	2800      	cmp	r0, #0
 8019e16:	d0f9      	beq.n	8019e0c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8019e18:	4299      	cmp	r1, r3
 8019e1a:	6998      	ldr	r0, [r3, #24]
 8019e1c:	d1f9      	bne.n	8019e12 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8019e1e:	6190      	str	r0, [r2, #24]
 8019e20:	618a      	str	r2, [r1, #24]
 8019e22:	e7f2      	b.n	8019e0a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08019e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8019e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e28:	461f      	mov	r7, r3
 8019e2a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8019e2e:	460d      	mov	r5, r1
 8019e30:	4616      	mov	r6, r2
 8019e32:	b103      	cbz	r3, 8019e36 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8019e34:	6038      	str	r0, [r7, #0]
 8019e36:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019e38:	b314      	cbz	r4, 8019e80 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8019e3a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019e3e:	b1eb      	cbz	r3, 8019e7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019e40:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019e44:	428d      	cmp	r5, r1
 8019e46:	db19      	blt.n	8019e7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019e48:	b289      	uxth	r1, r1
 8019e4a:	8923      	ldrh	r3, [r4, #8]
 8019e4c:	440b      	add	r3, r1
 8019e4e:	b21b      	sxth	r3, r3
 8019e50:	429d      	cmp	r5, r3
 8019e52:	da13      	bge.n	8019e7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019e54:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019e58:	4296      	cmp	r6, r2
 8019e5a:	db0f      	blt.n	8019e7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019e5c:	b292      	uxth	r2, r2
 8019e5e:	8963      	ldrh	r3, [r4, #10]
 8019e60:	4413      	add	r3, r2
 8019e62:	b21b      	sxth	r3, r3
 8019e64:	429e      	cmp	r6, r3
 8019e66:	da09      	bge.n	8019e7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019e68:	6823      	ldr	r3, [r4, #0]
 8019e6a:	1ab2      	subs	r2, r6, r2
 8019e6c:	1a69      	subs	r1, r5, r1
 8019e6e:	4620      	mov	r0, r4
 8019e70:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8019e74:	b212      	sxth	r2, r2
 8019e76:	463b      	mov	r3, r7
 8019e78:	b209      	sxth	r1, r1
 8019e7a:	47c0      	blx	r8
 8019e7c:	69a4      	ldr	r4, [r4, #24]
 8019e7e:	e7db      	b.n	8019e38 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8019e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e84 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8019e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e88:	4c6d      	ldr	r4, [pc, #436]	; (801a040 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8019e8a:	b0a1      	sub	sp, #132	; 0x84
 8019e8c:	4606      	mov	r6, r0
 8019e8e:	6824      	ldr	r4, [r4, #0]
 8019e90:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8019e92:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8019e96:	2400      	movs	r4, #0
 8019e98:	9303      	str	r3, [sp, #12]
 8019e9a:	802c      	strh	r4, [r5, #0]
 8019e9c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8019e9e:	802c      	strh	r4, [r5, #0]
 8019ea0:	601c      	str	r4, [r3, #0]
 8019ea2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8019ea6:	f7ff ffbd 	bl	8019e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019eaa:	f1b9 0f03 	cmp.w	r9, #3
 8019eae:	f340 80c1 	ble.w	801a034 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8019eb2:	4631      	mov	r1, r6
 8019eb4:	a80c      	add	r0, sp, #48	; 0x30
 8019eb6:	f003 ff1d 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019eba:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8019ebe:	9306      	str	r3, [sp, #24]
 8019ec0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8019ec4:	9307      	str	r3, [sp, #28]
 8019ec6:	9b03      	ldr	r3, [sp, #12]
 8019ec8:	f8d3 a000 	ldr.w	sl, [r3]
 8019ecc:	f1ba 0f00 	cmp.w	sl, #0
 8019ed0:	f000 80b3 	beq.w	801a03a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8019ed4:	4651      	mov	r1, sl
 8019ed6:	a810      	add	r0, sp, #64	; 0x40
 8019ed8:	f003 ff0c 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019edc:	2002      	movs	r0, #2
 8019ede:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8019ee2:	9b01      	ldr	r3, [sp, #4]
 8019ee4:	9a06      	ldr	r2, [sp, #24]
 8019ee6:	fb91 f1f0 	sdiv	r1, r1, r0
 8019eea:	189d      	adds	r5, r3, r2
 8019eec:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8019ef0:	9a07      	ldr	r2, [sp, #28]
 8019ef2:	4419      	add	r1, r3
 8019ef4:	9b02      	ldr	r3, [sp, #8]
 8019ef6:	4413      	add	r3, r2
 8019ef8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8019efc:	1a6d      	subs	r5, r5, r1
 8019efe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019f02:	fb92 f2f0 	sdiv	r2, r2, r0
 8019f06:	440a      	add	r2, r1
 8019f08:	1a9b      	subs	r3, r3, r2
 8019f0a:	435b      	muls	r3, r3
 8019f0c:	fb05 3505 	mla	r5, r5, r5, r3
 8019f10:	4f4c      	ldr	r7, [pc, #304]	; (801a044 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8019f12:	ac10      	add	r4, sp, #64	; 0x40
 8019f14:	f1b9 0f0c 	cmp.w	r9, #12
 8019f18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019f1c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019f20:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019f24:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8019f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019f2c:	f04f 0303 	mov.w	r3, #3
 8019f30:	bfd8      	it	le
 8019f32:	f109 32ff 	addle.w	r2, r9, #4294967295
 8019f36:	f04f 0400 	mov.w	r4, #0
 8019f3a:	f8cd 9000 	str.w	r9, [sp]
 8019f3e:	bfcc      	ite	gt
 8019f40:	4698      	movgt	r8, r3
 8019f42:	fb92 f8f3 	sdivle	r8, r2, r3
 8019f46:	1c63      	adds	r3, r4, #1
 8019f48:	aa10      	add	r2, sp, #64	; 0x40
 8019f4a:	f004 0401 	and.w	r4, r4, #1
 8019f4e:	f04f 0b00 	mov.w	fp, #0
 8019f52:	9308      	str	r3, [sp, #32]
 8019f54:	9b00      	ldr	r3, [sp, #0]
 8019f56:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8019f5a:	fb93 f3f8 	sdiv	r3, r3, r8
 8019f5e:	3404      	adds	r4, #4
 8019f60:	b29b      	uxth	r3, r3
 8019f62:	9304      	str	r3, [sp, #16]
 8019f64:	9a04      	ldr	r2, [sp, #16]
 8019f66:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019f6a:	fb13 f302 	smulbb	r3, r3, r2
 8019f6e:	9a01      	ldr	r2, [sp, #4]
 8019f70:	b29b      	uxth	r3, r3
 8019f72:	1899      	adds	r1, r3, r2
 8019f74:	9305      	str	r3, [sp, #20]
 8019f76:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8019f7a:	b209      	sxth	r1, r1
 8019f7c:	4299      	cmp	r1, r3
 8019f7e:	db4d      	blt.n	801a01c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019f80:	8932      	ldrh	r2, [r6, #8]
 8019f82:	4413      	add	r3, r2
 8019f84:	b21b      	sxth	r3, r3
 8019f86:	4299      	cmp	r1, r3
 8019f88:	da48      	bge.n	801a01c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019f8a:	9b04      	ldr	r3, [sp, #16]
 8019f8c:	6827      	ldr	r7, [r4, #0]
 8019f8e:	fb17 f703 	smulbb	r7, r7, r3
 8019f92:	9b02      	ldr	r3, [sp, #8]
 8019f94:	b2bf      	uxth	r7, r7
 8019f96:	18fa      	adds	r2, r7, r3
 8019f98:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8019f9c:	b212      	sxth	r2, r2
 8019f9e:	429a      	cmp	r2, r3
 8019fa0:	db3c      	blt.n	801a01c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019fa2:	8970      	ldrh	r0, [r6, #10]
 8019fa4:	4403      	add	r3, r0
 8019fa6:	b21b      	sxth	r3, r3
 8019fa8:	429a      	cmp	r2, r3
 8019faa:	da37      	bge.n	801a01c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019fac:	2300      	movs	r3, #0
 8019fae:	4630      	mov	r0, r6
 8019fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8019fb2:	ab0b      	add	r3, sp, #44	; 0x2c
 8019fb4:	f7ff ff36 	bl	8019e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019fb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019fba:	b37a      	cbz	r2, 801a01c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019fbc:	4552      	cmp	r2, sl
 8019fbe:	d02d      	beq.n	801a01c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019fc0:	4611      	mov	r1, r2
 8019fc2:	a80e      	add	r0, sp, #56	; 0x38
 8019fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8019fc6:	f003 fe95 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fca:	f04f 0e02 	mov.w	lr, #2
 8019fce:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8019fd2:	9a06      	ldr	r2, [sp, #24]
 8019fd4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8019fd8:	9b01      	ldr	r3, [sp, #4]
 8019fda:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8019fde:	4413      	add	r3, r2
 8019fe0:	9a07      	ldr	r2, [sp, #28]
 8019fe2:	fb91 f1fe 	sdiv	r1, r1, lr
 8019fe6:	fb9c fcfe 	sdiv	ip, ip, lr
 8019fea:	4401      	add	r1, r0
 8019fec:	1a58      	subs	r0, r3, r1
 8019fee:	9b02      	ldr	r3, [sp, #8]
 8019ff0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8019ff4:	4413      	add	r3, r2
 8019ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ff8:	448c      	add	ip, r1
 8019ffa:	eba3 030c 	sub.w	r3, r3, ip
 8019ffe:	435b      	muls	r3, r3
 801a000:	fb00 3300 	mla	r3, r0, r0, r3
 801a004:	42ab      	cmp	r3, r5
 801a006:	d208      	bcs.n	801a01a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 801a008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a00a:	461d      	mov	r5, r3
 801a00c:	9803      	ldr	r0, [sp, #12]
 801a00e:	6001      	str	r1, [r0, #0]
 801a010:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a012:	9805      	ldr	r0, [sp, #20]
 801a014:	8008      	strh	r0, [r1, #0]
 801a016:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a018:	800f      	strh	r7, [r1, #0]
 801a01a:	4692      	mov	sl, r2
 801a01c:	f10b 0b01 	add.w	fp, fp, #1
 801a020:	3408      	adds	r4, #8
 801a022:	f1bb 0f04 	cmp.w	fp, #4
 801a026:	d19d      	bne.n	8019f64 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 801a028:	9b00      	ldr	r3, [sp, #0]
 801a02a:	9c08      	ldr	r4, [sp, #32]
 801a02c:	444b      	add	r3, r9
 801a02e:	4544      	cmp	r4, r8
 801a030:	9300      	str	r3, [sp, #0]
 801a032:	d188      	bne.n	8019f46 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801a034:	b021      	add	sp, #132	; 0x84
 801a036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a03a:	f04f 35ff 	mov.w	r5, #4294967295
 801a03e:	e767      	b.n	8019f10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801a040:	24025d08 	.word	0x24025d08
 801a044:	0802acac 	.word	0x0802acac

0801a048 <_ZN8touchgfx4RectaNERKS0_>:
 801a048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a04c:	f9b1 7000 	ldrsh.w	r7, [r1]
 801a050:	888c      	ldrh	r4, [r1, #4]
 801a052:	f9b0 9000 	ldrsh.w	r9, [r0]
 801a056:	443c      	add	r4, r7
 801a058:	b2a4      	uxth	r4, r4
 801a05a:	fa0f f884 	sxth.w	r8, r4
 801a05e:	45c1      	cmp	r9, r8
 801a060:	da2f      	bge.n	801a0c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a062:	8882      	ldrh	r2, [r0, #4]
 801a064:	444a      	add	r2, r9
 801a066:	b292      	uxth	r2, r2
 801a068:	fa0f fe82 	sxth.w	lr, r2
 801a06c:	4577      	cmp	r7, lr
 801a06e:	da28      	bge.n	801a0c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a070:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801a074:	88cb      	ldrh	r3, [r1, #6]
 801a076:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801a07a:	442b      	add	r3, r5
 801a07c:	b21b      	sxth	r3, r3
 801a07e:	429e      	cmp	r6, r3
 801a080:	da1f      	bge.n	801a0c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a082:	88c3      	ldrh	r3, [r0, #6]
 801a084:	4433      	add	r3, r6
 801a086:	b29b      	uxth	r3, r3
 801a088:	fa0f fc83 	sxth.w	ip, r3
 801a08c:	4565      	cmp	r5, ip
 801a08e:	da18      	bge.n	801a0c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a090:	454f      	cmp	r7, r9
 801a092:	bfb8      	it	lt
 801a094:	464f      	movlt	r7, r9
 801a096:	42b5      	cmp	r5, r6
 801a098:	bfb8      	it	lt
 801a09a:	4635      	movlt	r5, r6
 801a09c:	45f0      	cmp	r8, lr
 801a09e:	bfd8      	it	le
 801a0a0:	4622      	movle	r2, r4
 801a0a2:	1bd2      	subs	r2, r2, r7
 801a0a4:	8082      	strh	r2, [r0, #4]
 801a0a6:	884a      	ldrh	r2, [r1, #2]
 801a0a8:	88c9      	ldrh	r1, [r1, #6]
 801a0aa:	8007      	strh	r7, [r0, #0]
 801a0ac:	440a      	add	r2, r1
 801a0ae:	8045      	strh	r5, [r0, #2]
 801a0b0:	b292      	uxth	r2, r2
 801a0b2:	b211      	sxth	r1, r2
 801a0b4:	458c      	cmp	ip, r1
 801a0b6:	bfa8      	it	ge
 801a0b8:	4613      	movge	r3, r2
 801a0ba:	1b5b      	subs	r3, r3, r5
 801a0bc:	80c3      	strh	r3, [r0, #6]
 801a0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	8003      	strh	r3, [r0, #0]
 801a0c6:	8043      	strh	r3, [r0, #2]
 801a0c8:	8083      	strh	r3, [r0, #4]
 801a0ca:	80c3      	strh	r3, [r0, #6]
 801a0cc:	e7f7      	b.n	801a0be <_ZN8touchgfx4RectaNERKS0_+0x76>

0801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>:
 801a0ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	dd06      	ble.n	801a0e4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801a0d6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801a0da:	2800      	cmp	r0, #0
 801a0dc:	bfcc      	ite	gt
 801a0de:	2000      	movgt	r0, #0
 801a0e0:	2001      	movle	r0, #1
 801a0e2:	4770      	bx	lr
 801a0e4:	2001      	movs	r0, #1
 801a0e6:	4770      	bx	lr

0801a0e8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801a0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	4604      	mov	r4, r0
 801a0f0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a0f2:	8003      	strh	r3, [r0, #0]
 801a0f4:	8043      	strh	r3, [r0, #2]
 801a0f6:	8083      	strh	r3, [r0, #4]
 801a0f8:	80c3      	strh	r3, [r0, #6]
 801a0fa:	2d00      	cmp	r5, #0
 801a0fc:	d040      	beq.n	801a180 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801a0fe:	1d28      	adds	r0, r5, #4
 801a100:	f7ff ffe5 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801a104:	b988      	cbnz	r0, 801a12a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801a106:	4620      	mov	r0, r4
 801a108:	f7ff ffe1 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801a10c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801a110:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a114:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801a118:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801a11c:	b138      	cbz	r0, 801a12e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801a11e:	8022      	strh	r2, [r4, #0]
 801a120:	8063      	strh	r3, [r4, #2]
 801a122:	f8a4 e004 	strh.w	lr, [r4, #4]
 801a126:	f8a4 c006 	strh.w	ip, [r4, #6]
 801a12a:	69ad      	ldr	r5, [r5, #24]
 801a12c:	e7e5      	b.n	801a0fa <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801a12e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a132:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a136:	4290      	cmp	r0, r2
 801a138:	4607      	mov	r7, r0
 801a13a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801a13e:	460e      	mov	r6, r1
 801a140:	bfa8      	it	ge
 801a142:	4617      	movge	r7, r2
 801a144:	4299      	cmp	r1, r3
 801a146:	4472      	add	r2, lr
 801a148:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801a14c:	bfa8      	it	ge
 801a14e:	461e      	movge	r6, r3
 801a150:	4440      	add	r0, r8
 801a152:	4471      	add	r1, lr
 801a154:	4463      	add	r3, ip
 801a156:	b200      	sxth	r0, r0
 801a158:	8027      	strh	r7, [r4, #0]
 801a15a:	b212      	sxth	r2, r2
 801a15c:	8066      	strh	r6, [r4, #2]
 801a15e:	b209      	sxth	r1, r1
 801a160:	b21b      	sxth	r3, r3
 801a162:	4290      	cmp	r0, r2
 801a164:	bfac      	ite	ge
 801a166:	ebc7 0200 	rsbge	r2, r7, r0
 801a16a:	ebc7 0202 	rsblt	r2, r7, r2
 801a16e:	4299      	cmp	r1, r3
 801a170:	bfac      	ite	ge
 801a172:	ebc6 0301 	rsbge	r3, r6, r1
 801a176:	ebc6 0303 	rsblt	r3, r6, r3
 801a17a:	80a2      	strh	r2, [r4, #4]
 801a17c:	80e3      	strh	r3, [r4, #6]
 801a17e:	e7d4      	b.n	801a12a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801a180:	4620      	mov	r0, r4
 801a182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a186 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801a186:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a18a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a18e:	b383      	cbz	r3, 801a1f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801a190:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a192:	b374      	cbz	r4, 801a1f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801a194:	f9b1 5000 	ldrsh.w	r5, [r1]
 801a198:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801a19c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801a1a0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801a1a4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a1a8:	b303      	cbz	r3, 801a1ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801a1aa:	4668      	mov	r0, sp
 801a1ac:	1d21      	adds	r1, r4, #4
 801a1ae:	f8ad 5000 	strh.w	r5, [sp]
 801a1b2:	f8ad 6002 	strh.w	r6, [sp, #2]
 801a1b6:	f8ad 7004 	strh.w	r7, [sp, #4]
 801a1ba:	f8ad 8006 	strh.w	r8, [sp, #6]
 801a1be:	f7ff ff43 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801a1c2:	4668      	mov	r0, sp
 801a1c4:	f7ff ff83 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801a1c8:	b980      	cbnz	r0, 801a1ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801a1ca:	f8bd 3000 	ldrh.w	r3, [sp]
 801a1ce:	4669      	mov	r1, sp
 801a1d0:	88a2      	ldrh	r2, [r4, #4]
 801a1d2:	4620      	mov	r0, r4
 801a1d4:	1a9b      	subs	r3, r3, r2
 801a1d6:	88e2      	ldrh	r2, [r4, #6]
 801a1d8:	f8ad 3000 	strh.w	r3, [sp]
 801a1dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a1e0:	1a9b      	subs	r3, r3, r2
 801a1e2:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a1e6:	6823      	ldr	r3, [r4, #0]
 801a1e8:	689b      	ldr	r3, [r3, #8]
 801a1ea:	4798      	blx	r3
 801a1ec:	69a4      	ldr	r4, [r4, #24]
 801a1ee:	2c00      	cmp	r4, #0
 801a1f0:	d1d8      	bne.n	801a1a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801a1f2:	b002      	add	sp, #8
 801a1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a1f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801a1f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a1fa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a1fe:	460d      	mov	r5, r1
 801a200:	4616      	mov	r6, r2
 801a202:	b323      	cbz	r3, 801a24e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801a204:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a206:	b314      	cbz	r4, 801a24e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801a208:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a20c:	b1eb      	cbz	r3, 801a24a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801a20e:	6828      	ldr	r0, [r5, #0]
 801a210:	466b      	mov	r3, sp
 801a212:	6869      	ldr	r1, [r5, #4]
 801a214:	c303      	stmia	r3!, {r0, r1}
 801a216:	4668      	mov	r0, sp
 801a218:	1d21      	adds	r1, r4, #4
 801a21a:	f7ff ff15 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801a21e:	4668      	mov	r0, sp
 801a220:	f7ff ff55 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801a224:	b988      	cbnz	r0, 801a24a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801a226:	f8bd 3000 	ldrh.w	r3, [sp]
 801a22a:	4669      	mov	r1, sp
 801a22c:	88a2      	ldrh	r2, [r4, #4]
 801a22e:	4620      	mov	r0, r4
 801a230:	1a9b      	subs	r3, r3, r2
 801a232:	88e2      	ldrh	r2, [r4, #6]
 801a234:	f8ad 3000 	strh.w	r3, [sp]
 801a238:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a23c:	1a9b      	subs	r3, r3, r2
 801a23e:	4632      	mov	r2, r6
 801a240:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a244:	6823      	ldr	r3, [r4, #0]
 801a246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a248:	4798      	blx	r3
 801a24a:	69a4      	ldr	r4, [r4, #24]
 801a24c:	e7db      	b.n	801a206 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801a24e:	b002      	add	sp, #8
 801a250:	bd70      	pop	{r4, r5, r6, pc}

0801a252 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801a252:	4770      	bx	lr

0801a254 <_ZN8touchgfx3HAL10FlushCacheEv>:
 801a254:	4770      	bx	lr

0801a256 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801a256:	6803      	ldr	r3, [r0, #0]
 801a258:	b513      	push	{r0, r1, r4, lr}
 801a25a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 801a25e:	2300      	movs	r3, #0
 801a260:	e9cd 3300 	strd	r3, r3, [sp]
 801a264:	466b      	mov	r3, sp
 801a266:	47a0      	blx	r4
 801a268:	b002      	add	sp, #8
 801a26a:	bd10      	pop	{r4, pc}

0801a26c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801a26c:	2301      	movs	r3, #1
 801a26e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801a272:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801a276:	4770      	bx	lr

0801a278 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801a278:	2301      	movs	r3, #1
 801a27a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801a27e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801a282:	4770      	bx	lr

0801a284 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801a284:	6843      	ldr	r3, [r0, #4]
 801a286:	2201      	movs	r2, #1
 801a288:	725a      	strb	r2, [r3, #9]
 801a28a:	6840      	ldr	r0, [r0, #4]
 801a28c:	6803      	ldr	r3, [r0, #0]
 801a28e:	691b      	ldr	r3, [r3, #16]
 801a290:	4718      	bx	r3

0801a292 <_ZN8touchgfx3HAL8flushDMAEv>:
 801a292:	6840      	ldr	r0, [r0, #4]
 801a294:	6803      	ldr	r3, [r0, #0]
 801a296:	689b      	ldr	r3, [r3, #8]
 801a298:	4718      	bx	r3

0801a29a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801a29a:	b530      	push	{r4, r5, lr}
 801a29c:	b08b      	sub	sp, #44	; 0x2c
 801a29e:	6804      	ldr	r4, [r0, #0]
 801a2a0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801a2a4:	9509      	str	r5, [sp, #36]	; 0x24
 801a2a6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801a2aa:	9508      	str	r5, [sp, #32]
 801a2ac:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801a2b0:	9507      	str	r5, [sp, #28]
 801a2b2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801a2b6:	9506      	str	r5, [sp, #24]
 801a2b8:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801a2bc:	9505      	str	r5, [sp, #20]
 801a2be:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801a2c2:	9504      	str	r5, [sp, #16]
 801a2c4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801a2c8:	9503      	str	r5, [sp, #12]
 801a2ca:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801a2ce:	9502      	str	r5, [sp, #8]
 801a2d0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801a2d4:	e9cd 3500 	strd	r3, r5, [sp]
 801a2d8:	4613      	mov	r3, r2
 801a2da:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801a2dc:	2200      	movs	r2, #0
 801a2de:	47a0      	blx	r4
 801a2e0:	b00b      	add	sp, #44	; 0x2c
 801a2e2:	bd30      	pop	{r4, r5, pc}

0801a2e4 <_ZN8touchgfx3HAL10beginFrameEv>:
 801a2e4:	4b04      	ldr	r3, [pc, #16]	; (801a2f8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801a2e6:	781b      	ldrb	r3, [r3, #0]
 801a2e8:	b123      	cbz	r3, 801a2f4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801a2ea:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801a2ee:	f080 0001 	eor.w	r0, r0, #1
 801a2f2:	4770      	bx	lr
 801a2f4:	2001      	movs	r0, #1
 801a2f6:	4770      	bx	lr
 801a2f8:	24025d06 	.word	0x24025d06

0801a2fc <_ZN8touchgfx3HAL8endFrameEv>:
 801a2fc:	b510      	push	{r4, lr}
 801a2fe:	4604      	mov	r4, r0
 801a300:	6840      	ldr	r0, [r0, #4]
 801a302:	6803      	ldr	r3, [r0, #0]
 801a304:	689b      	ldr	r3, [r3, #8]
 801a306:	4798      	blx	r3
 801a308:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801a30c:	b113      	cbz	r3, 801a314 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801a30e:	2301      	movs	r3, #1
 801a310:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801a314:	bd10      	pop	{r4, pc}

0801a316 <_ZN8touchgfx3HAL10initializeEv>:
 801a316:	b510      	push	{r4, lr}
 801a318:	4604      	mov	r4, r0
 801a31a:	f7e7 ffbd 	bl	8002298 <_ZN8touchgfx10OSWrappers10initializeEv>
 801a31e:	f7e6 fa0b 	bl	8000738 <_ZN8touchgfx4GPIO4initEv>
 801a322:	6860      	ldr	r0, [r4, #4]
 801a324:	6803      	ldr	r3, [r0, #0]
 801a326:	68db      	ldr	r3, [r3, #12]
 801a328:	4798      	blx	r3
 801a32a:	68e0      	ldr	r0, [r4, #12]
 801a32c:	6803      	ldr	r3, [r0, #0]
 801a32e:	689b      	ldr	r3, [r3, #8]
 801a330:	4798      	blx	r3
 801a332:	6823      	ldr	r3, [r4, #0]
 801a334:	4620      	mov	r0, r4
 801a336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a33c:	4718      	bx	r3

0801a33e <_ZN8touchgfx3HAL9taskEntryEv>:
 801a33e:	b508      	push	{r3, lr}
 801a340:	6803      	ldr	r3, [r0, #0]
 801a342:	4604      	mov	r4, r0
 801a344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a348:	4798      	blx	r3
 801a34a:	6823      	ldr	r3, [r4, #0]
 801a34c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a34e:	4620      	mov	r0, r4
 801a350:	4798      	blx	r3
 801a352:	f7e8 f817 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801a356:	6823      	ldr	r3, [r4, #0]
 801a358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a35a:	e7f8      	b.n	801a34e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801a35c <_ZN8touchgfx3HAL4tickEv>:
 801a35c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a35e:	6803      	ldr	r3, [r0, #0]
 801a360:	4604      	mov	r4, r0
 801a362:	4d5b      	ldr	r5, [pc, #364]	; (801a4d0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801a364:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a368:	4798      	blx	r3
 801a36a:	2800      	cmp	r0, #0
 801a36c:	f000 8095 	beq.w	801a49a <_ZN8touchgfx3HAL4tickEv+0x13e>
 801a370:	2001      	movs	r0, #1
 801a372:	2600      	movs	r6, #0
 801a374:	f7e6 fa06 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a378:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801a37c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801a380:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a384:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801a388:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801a38c:	b133      	cbz	r3, 801a39c <_ZN8touchgfx3HAL4tickEv+0x40>
 801a38e:	6823      	ldr	r3, [r4, #0]
 801a390:	4620      	mov	r0, r4
 801a392:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a396:	4798      	blx	r3
 801a398:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801a39c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a3a0:	2601      	movs	r6, #1
 801a3a2:	6862      	ldr	r2, [r4, #4]
 801a3a4:	f083 0301 	eor.w	r3, r3, #1
 801a3a8:	702e      	strb	r6, [r5, #0]
 801a3aa:	7253      	strb	r3, [r2, #9]
 801a3ac:	f002 fb9a 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 801a3b0:	6803      	ldr	r3, [r0, #0]
 801a3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a3b4:	4798      	blx	r3
 801a3b6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a3ba:	b90b      	cbnz	r3, 801a3c0 <_ZN8touchgfx3HAL4tickEv+0x64>
 801a3bc:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801a3c0:	f002 fb90 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 801a3c4:	6803      	ldr	r3, [r0, #0]
 801a3c6:	695b      	ldr	r3, [r3, #20]
 801a3c8:	4798      	blx	r3
 801a3ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3cc:	6803      	ldr	r3, [r0, #0]
 801a3ce:	691b      	ldr	r3, [r3, #16]
 801a3d0:	4798      	blx	r3
 801a3d2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a3d6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801a3da:	3b01      	subs	r3, #1
 801a3dc:	b2db      	uxtb	r3, r3
 801a3de:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a3e2:	b10a      	cbz	r2, 801a3e8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d1eb      	bne.n	801a3c0 <_ZN8touchgfx3HAL4tickEv+0x64>
 801a3e8:	4a3a      	ldr	r2, [pc, #232]	; (801a4d4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801a3ea:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801a3ee:	7813      	ldrb	r3, [r2, #0]
 801a3f0:	3301      	adds	r3, #1
 801a3f2:	b25b      	sxtb	r3, r3
 801a3f4:	4299      	cmp	r1, r3
 801a3f6:	7013      	strb	r3, [r2, #0]
 801a3f8:	dc10      	bgt.n	801a41c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	68e0      	ldr	r0, [r4, #12]
 801a3fe:	a902      	add	r1, sp, #8
 801a400:	7013      	strb	r3, [r2, #0]
 801a402:	aa03      	add	r2, sp, #12
 801a404:	6803      	ldr	r3, [r0, #0]
 801a406:	68db      	ldr	r3, [r3, #12]
 801a408:	4798      	blx	r3
 801a40a:	6823      	ldr	r3, [r4, #0]
 801a40c:	2800      	cmp	r0, #0
 801a40e:	d050      	beq.n	801a4b2 <_ZN8touchgfx3HAL4tickEv+0x156>
 801a410:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a414:	4620      	mov	r0, r4
 801a416:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a41a:	4798      	blx	r3
 801a41c:	2300      	movs	r3, #0
 801a41e:	6960      	ldr	r0, [r4, #20]
 801a420:	f88d 3007 	strb.w	r3, [sp, #7]
 801a424:	b158      	cbz	r0, 801a43e <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a426:	6803      	ldr	r3, [r0, #0]
 801a428:	f10d 0107 	add.w	r1, sp, #7
 801a42c:	68db      	ldr	r3, [r3, #12]
 801a42e:	4798      	blx	r3
 801a430:	b128      	cbz	r0, 801a43e <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a432:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a434:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a438:	6803      	ldr	r3, [r0, #0]
 801a43a:	68db      	ldr	r3, [r3, #12]
 801a43c:	4798      	blx	r3
 801a43e:	f104 001c 	add.w	r0, r4, #28
 801a442:	f00d f913 	bl	802766c <_ZN8touchgfx8Gestures4tickEv>
 801a446:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801a44a:	b30b      	cbz	r3, 801a490 <_ZN8touchgfx3HAL4tickEv+0x134>
 801a44c:	6920      	ldr	r0, [r4, #16]
 801a44e:	6803      	ldr	r3, [r0, #0]
 801a450:	691b      	ldr	r3, [r3, #16]
 801a452:	4798      	blx	r3
 801a454:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a456:	4606      	mov	r6, r0
 801a458:	b903      	cbnz	r3, 801a45c <_ZN8touchgfx3HAL4tickEv+0x100>
 801a45a:	6720      	str	r0, [r4, #112]	; 0x70
 801a45c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a45e:	4a1e      	ldr	r2, [pc, #120]	; (801a4d8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801a460:	1af3      	subs	r3, r6, r3
 801a462:	4293      	cmp	r3, r2
 801a464:	d914      	bls.n	801a490 <_ZN8touchgfx3HAL4tickEv+0x134>
 801a466:	6920      	ldr	r0, [r4, #16]
 801a468:	6803      	ldr	r3, [r0, #0]
 801a46a:	699b      	ldr	r3, [r3, #24]
 801a46c:	4798      	blx	r3
 801a46e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a470:	2264      	movs	r2, #100	; 0x64
 801a472:	1af3      	subs	r3, r6, r3
 801a474:	fbb3 f3f2 	udiv	r3, r3, r2
 801a478:	fbb0 f0f3 	udiv	r0, r0, r3
 801a47c:	2800      	cmp	r0, #0
 801a47e:	dc1d      	bgt.n	801a4bc <_ZN8touchgfx3HAL4tickEv+0x160>
 801a480:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801a484:	6920      	ldr	r0, [r4, #16]
 801a486:	2100      	movs	r1, #0
 801a488:	6803      	ldr	r3, [r0, #0]
 801a48a:	69db      	ldr	r3, [r3, #28]
 801a48c:	4798      	blx	r3
 801a48e:	6726      	str	r6, [r4, #112]	; 0x70
 801a490:	f002 fb28 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 801a494:	6803      	ldr	r3, [r0, #0]
 801a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a498:	4798      	blx	r3
 801a49a:	6823      	ldr	r3, [r4, #0]
 801a49c:	4620      	mov	r0, r4
 801a49e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a4a2:	4798      	blx	r3
 801a4a4:	2001      	movs	r0, #1
 801a4a6:	f7e6 f9cb 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a4aa:	2300      	movs	r3, #0
 801a4ac:	702b      	strb	r3, [r5, #0]
 801a4ae:	b004      	add	sp, #16
 801a4b0:	bd70      	pop	{r4, r5, r6, pc}
 801a4b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a4b6:	4620      	mov	r0, r4
 801a4b8:	4798      	blx	r3
 801a4ba:	e7af      	b.n	801a41c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a4bc:	2863      	cmp	r0, #99	; 0x63
 801a4be:	bfcb      	itete	gt
 801a4c0:	2300      	movgt	r3, #0
 801a4c2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801a4c6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801a4ca:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801a4ce:	e7d9      	b.n	801a484 <_ZN8touchgfx3HAL4tickEv+0x128>
 801a4d0:	24025d0c 	.word	0x24025d0c
 801a4d4:	24025d0d 	.word	0x24025d0d
 801a4d8:	05f5e100 	.word	0x05f5e100

0801a4dc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801a4dc:	f7e7 bf1e 	b.w	800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a4e0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801a4e0:	6581      	str	r1, [r0, #88]	; 0x58
 801a4e2:	301c      	adds	r0, #28
 801a4e4:	f00d b8c0 	b.w	8027668 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801a4e8 <_ZN8touchgfx3HAL5touchEll>:
 801a4e8:	b530      	push	{r4, r5, lr}
 801a4ea:	b087      	sub	sp, #28
 801a4ec:	4604      	mov	r4, r0
 801a4ee:	a804      	add	r0, sp, #16
 801a4f0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801a4f4:	f002 f8e4 	bl	801c6c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801a4f8:	9b04      	ldr	r3, [sp, #16]
 801a4fa:	a906      	add	r1, sp, #24
 801a4fc:	a803      	add	r0, sp, #12
 801a4fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a502:	9b05      	ldr	r3, [sp, #20]
 801a504:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801a508:	f002 f92c 	bl	801c764 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801a50c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801a510:	f104 001c 	add.w	r0, r4, #28
 801a514:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a518:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a51c:	b189      	cbz	r1, 801a542 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801a51e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801a522:	9300      	str	r3, [sp, #0]
 801a524:	4613      	mov	r3, r2
 801a526:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a52a:	462a      	mov	r2, r5
 801a52c:	f00d f8ac 	bl	8027688 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801a530:	b128      	cbz	r0, 801a53e <_ZN8touchgfx3HAL5touchEll+0x56>
 801a532:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a536:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a538:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a53c:	6623      	str	r3, [r4, #96]	; 0x60
 801a53e:	b007      	add	sp, #28
 801a540:	bd30      	pop	{r4, r5, pc}
 801a542:	f00d f8e1 	bl	8027708 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a546:	2301      	movs	r3, #1
 801a548:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a54c:	e7f1      	b.n	801a532 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801a54e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801a54e:	b510      	push	{r4, lr}
 801a550:	2b00      	cmp	r3, #0
 801a552:	d046      	beq.n	801a5e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a554:	ea81 0002 	eor.w	r0, r1, r2
 801a558:	07c4      	lsls	r4, r0, #31
 801a55a:	d508      	bpl.n	801a56e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801a55c:	440b      	add	r3, r1
 801a55e:	3a01      	subs	r2, #1
 801a560:	428b      	cmp	r3, r1
 801a562:	d93e      	bls.n	801a5e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a564:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a568:	f801 0b01 	strb.w	r0, [r1], #1
 801a56c:	e7f8      	b.n	801a560 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801a56e:	07d0      	lsls	r0, r2, #31
 801a570:	bf42      	ittt	mi
 801a572:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801a576:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801a57a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801a57e:	2b01      	cmp	r3, #1
 801a580:	d911      	bls.n	801a5a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a582:	ea81 0402 	eor.w	r4, r1, r2
 801a586:	4610      	mov	r0, r2
 801a588:	07a4      	lsls	r4, r4, #30
 801a58a:	d022      	beq.n	801a5d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801a58c:	f023 0401 	bic.w	r4, r3, #1
 801a590:	440c      	add	r4, r1
 801a592:	428c      	cmp	r4, r1
 801a594:	4602      	mov	r2, r0
 801a596:	d904      	bls.n	801a5a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801a598:	8812      	ldrh	r2, [r2, #0]
 801a59a:	3002      	adds	r0, #2
 801a59c:	f821 2b02 	strh.w	r2, [r1], #2
 801a5a0:	e7f7      	b.n	801a592 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801a5a2:	f003 0301 	and.w	r3, r3, #1
 801a5a6:	f023 0003 	bic.w	r0, r3, #3
 801a5aa:	4408      	add	r0, r1
 801a5ac:	4288      	cmp	r0, r1
 801a5ae:	4614      	mov	r4, r2
 801a5b0:	d904      	bls.n	801a5bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801a5b2:	6824      	ldr	r4, [r4, #0]
 801a5b4:	3204      	adds	r2, #4
 801a5b6:	f841 4b04 	str.w	r4, [r1], #4
 801a5ba:	e7f7      	b.n	801a5ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801a5bc:	f003 0303 	and.w	r3, r3, #3
 801a5c0:	3a01      	subs	r2, #1
 801a5c2:	440b      	add	r3, r1
 801a5c4:	428b      	cmp	r3, r1
 801a5c6:	d90c      	bls.n	801a5e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a5c8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a5cc:	f801 0b01 	strb.w	r0, [r1], #1
 801a5d0:	e7f8      	b.n	801a5c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801a5d2:	0790      	lsls	r0, r2, #30
 801a5d4:	d0e7      	beq.n	801a5a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a5d6:	f832 0b02 	ldrh.w	r0, [r2], #2
 801a5da:	3b02      	subs	r3, #2
 801a5dc:	f821 0b02 	strh.w	r0, [r1], #2
 801a5e0:	e7e1      	b.n	801a5a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a5e2:	2001      	movs	r0, #1
 801a5e4:	bd10      	pop	{r4, pc}

0801a5e6 <_ZN8touchgfx3HAL7noTouchEv>:
 801a5e6:	b510      	push	{r4, lr}
 801a5e8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801a5ec:	4604      	mov	r4, r0
 801a5ee:	b153      	cbz	r3, 801a606 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801a5f0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801a5f4:	2101      	movs	r1, #1
 801a5f6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801a5fa:	301c      	adds	r0, #28
 801a5fc:	f00d f884 	bl	8027708 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a600:	2300      	movs	r3, #0
 801a602:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a606:	bd10      	pop	{r4, pc}

0801a608 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801a608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a60c:	b085      	sub	sp, #20
 801a60e:	4604      	mov	r4, r0
 801a610:	2000      	movs	r0, #0
 801a612:	4699      	mov	r9, r3
 801a614:	ad04      	add	r5, sp, #16
 801a616:	460f      	mov	r7, r1
 801a618:	4690      	mov	r8, r2
 801a61a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801a61e:	69a0      	ldr	r0, [r4, #24]
 801a620:	6806      	ldr	r6, [r0, #0]
 801a622:	9501      	str	r5, [sp, #4]
 801a624:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801a628:	9500      	str	r5, [sp, #0]
 801a62a:	6835      	ldr	r5, [r6, #0]
 801a62c:	47a8      	blx	r5
 801a62e:	4d10      	ldr	r5, [pc, #64]	; (801a670 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 801a630:	4606      	mov	r6, r0
 801a632:	f8a5 9000 	strh.w	r9, [r5]
 801a636:	f7e9 fc6b 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801a63a:	6803      	ldr	r3, [r0, #0]
 801a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a63e:	4798      	blx	r3
 801a640:	b128      	cbz	r0, 801a64e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801a642:	2801      	cmp	r0, #1
 801a644:	d00b      	beq.n	801a65e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801a646:	4630      	mov	r0, r6
 801a648:	b005      	add	sp, #20
 801a64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a64e:	882b      	ldrh	r3, [r5, #0]
 801a650:	fb08 7203 	mla	r2, r8, r3, r7
 801a654:	9b03      	ldr	r3, [sp, #12]
 801a656:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801a65a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801a65c:	e7f3      	b.n	801a646 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a65e:	882a      	ldrh	r2, [r5, #0]
 801a660:	9b03      	ldr	r3, [sp, #12]
 801a662:	fb08 7202 	mla	r2, r8, r2, r7
 801a666:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a66a:	1a9a      	subs	r2, r3, r2
 801a66c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801a66e:	e7ea      	b.n	801a646 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a670:	24025d02 	.word	0x24025d02

0801a674 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801a674:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a676:	b08b      	sub	sp, #44	; 0x2c
 801a678:	4617      	mov	r7, r2
 801a67a:	4604      	mov	r4, r0
 801a67c:	460e      	mov	r6, r1
 801a67e:	461d      	mov	r5, r3
 801a680:	f7e9 fc46 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801a684:	6803      	ldr	r3, [r0, #0]
 801a686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a688:	4798      	blx	r3
 801a68a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801a68e:	9007      	str	r0, [sp, #28]
 801a690:	4631      	mov	r1, r6
 801a692:	6822      	ldr	r2, [r4, #0]
 801a694:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801a698:	4b0c      	ldr	r3, [pc, #48]	; (801a6cc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801a69a:	4620      	mov	r0, r4
 801a69c:	881b      	ldrh	r3, [r3, #0]
 801a69e:	9306      	str	r3, [sp, #24]
 801a6a0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801a6a4:	9305      	str	r3, [sp, #20]
 801a6a6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801a6aa:	9304      	str	r3, [sp, #16]
 801a6ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a6b0:	9303      	str	r3, [sp, #12]
 801a6b2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a6b6:	9302      	str	r3, [sp, #8]
 801a6b8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a6bc:	e9cd 5300 	strd	r5, r3, [sp]
 801a6c0:	463b      	mov	r3, r7
 801a6c2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801a6c4:	2200      	movs	r2, #0
 801a6c6:	47a8      	blx	r5
 801a6c8:	b00b      	add	sp, #44	; 0x2c
 801a6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6cc:	24025d02 	.word	0x24025d02

0801a6d0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801a6d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6d4:	4698      	mov	r8, r3
 801a6d6:	6803      	ldr	r3, [r0, #0]
 801a6d8:	b08b      	sub	sp, #44	; 0x2c
 801a6da:	4617      	mov	r7, r2
 801a6dc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801a6de:	460e      	mov	r6, r1
 801a6e0:	4b13      	ldr	r3, [pc, #76]	; (801a730 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801a6e2:	4604      	mov	r4, r0
 801a6e4:	f8b3 9000 	ldrh.w	r9, [r3]
 801a6e8:	f7e9 fc12 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801a6ec:	6803      	ldr	r3, [r0, #0]
 801a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6f0:	4798      	blx	r3
 801a6f2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801a6f6:	2200      	movs	r2, #0
 801a6f8:	4631      	mov	r1, r6
 801a6fa:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801a6fe:	2302      	movs	r3, #2
 801a700:	4620      	mov	r0, r4
 801a702:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801a706:	2301      	movs	r3, #1
 801a708:	9305      	str	r3, [sp, #20]
 801a70a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801a70e:	9304      	str	r3, [sp, #16]
 801a710:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a714:	9303      	str	r3, [sp, #12]
 801a716:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a71a:	9302      	str	r3, [sp, #8]
 801a71c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a720:	e9cd 8300 	strd	r8, r3, [sp]
 801a724:	463b      	mov	r3, r7
 801a726:	47a8      	blx	r5
 801a728:	b00b      	add	sp, #44	; 0x2c
 801a72a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a72e:	bf00      	nop
 801a730:	24025d02 	.word	0x24025d02

0801a734 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801a734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a738:	4698      	mov	r8, r3
 801a73a:	6803      	ldr	r3, [r0, #0]
 801a73c:	b087      	sub	sp, #28
 801a73e:	460e      	mov	r6, r1
 801a740:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801a742:	4617      	mov	r7, r2
 801a744:	4b0f      	ldr	r3, [pc, #60]	; (801a784 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801a746:	4604      	mov	r4, r0
 801a748:	f8b3 9000 	ldrh.w	r9, [r3]
 801a74c:	f7e9 fbe0 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801a750:	6803      	ldr	r3, [r0, #0]
 801a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a754:	4798      	blx	r3
 801a756:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801a75a:	463a      	mov	r2, r7
 801a75c:	4631      	mov	r1, r6
 801a75e:	f8cd 900c 	str.w	r9, [sp, #12]
 801a762:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801a766:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801a76a:	4620      	mov	r0, r4
 801a76c:	9302      	str	r3, [sp, #8]
 801a76e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a772:	9301      	str	r3, [sp, #4]
 801a774:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a778:	9300      	str	r3, [sp, #0]
 801a77a:	4643      	mov	r3, r8
 801a77c:	47a8      	blx	r5
 801a77e:	b007      	add	sp, #28
 801a780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a784:	24025d02 	.word	0x24025d02

0801a788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a78c:	4604      	mov	r4, r0
 801a78e:	b08f      	sub	sp, #60	; 0x3c
 801a790:	4610      	mov	r0, r2
 801a792:	460d      	mov	r5, r1
 801a794:	4691      	mov	r9, r2
 801a796:	461e      	mov	r6, r3
 801a798:	f004 fdd0 	bl	801f33c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801a79c:	2800      	cmp	r0, #0
 801a79e:	f000 809d 	beq.w	801a8dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801a7a2:	6823      	ldr	r3, [r4, #0]
 801a7a4:	4620      	mov	r0, r4
 801a7a6:	f8df b198 	ldr.w	fp, [pc, #408]	; 801a940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801a7aa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801a7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a7b0:	4798      	blx	r3
 801a7b2:	6823      	ldr	r3, [r4, #0]
 801a7b4:	4620      	mov	r0, r4
 801a7b6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801a944 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7bc:	4798      	blx	r3
 801a7be:	f8bb 3000 	ldrh.w	r3, [fp]
 801a7c2:	4f5c      	ldr	r7, [pc, #368]	; (801a934 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a7c4:	9301      	str	r3, [sp, #4]
 801a7c6:	f8ba 3000 	ldrh.w	r3, [sl]
 801a7ca:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801a7ce:	4640      	mov	r0, r8
 801a7d0:	9302      	str	r3, [sp, #8]
 801a7d2:	883b      	ldrh	r3, [r7, #0]
 801a7d4:	9303      	str	r3, [sp, #12]
 801a7d6:	4b58      	ldr	r3, [pc, #352]	; (801a938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a7d8:	881a      	ldrh	r2, [r3, #0]
 801a7da:	9305      	str	r3, [sp, #20]
 801a7dc:	9204      	str	r2, [sp, #16]
 801a7de:	f004 fef1 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a7e2:	8038      	strh	r0, [r7, #0]
 801a7e4:	4640      	mov	r0, r8
 801a7e6:	f004 ff21 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a7ea:	9b05      	ldr	r3, [sp, #20]
 801a7ec:	b280      	uxth	r0, r0
 801a7ee:	8018      	strh	r0, [r3, #0]
 801a7f0:	4b52      	ldr	r3, [pc, #328]	; (801a93c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801a7f2:	781b      	ldrb	r3, [r3, #0]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d174      	bne.n	801a8e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801a7f8:	883b      	ldrh	r3, [r7, #0]
 801a7fa:	f8aa 0000 	strh.w	r0, [sl]
 801a7fe:	f8ab 3000 	strh.w	r3, [fp]
 801a802:	4648      	mov	r0, r9
 801a804:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801a808:	f004 fd98 	bl	801f33c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801a80c:	2200      	movs	r2, #0
 801a80e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801a812:	4611      	mov	r1, r2
 801a814:	4628      	mov	r0, r5
 801a816:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801a81a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801a81e:	f7ec ff21 	bl	8007664 <_ZN8touchgfx8Drawable5setXYEss>
 801a822:	2301      	movs	r3, #1
 801a824:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801a828:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801a82c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801a830:	2b00      	cmp	r3, #0
 801a832:	dd5c      	ble.n	801a8ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801a834:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	dd58      	ble.n	801a8ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801a83c:	462a      	mov	r2, r5
 801a83e:	ab0a      	add	r3, sp, #40	; 0x28
 801a840:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a844:	6851      	ldr	r1, [r2, #4]
 801a846:	c303      	stmia	r3!, {r0, r1}
 801a848:	4631      	mov	r1, r6
 801a84a:	a80a      	add	r0, sp, #40	; 0x28
 801a84c:	f7ff fbfc 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801a850:	4b38      	ldr	r3, [pc, #224]	; (801a934 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a852:	2100      	movs	r1, #0
 801a854:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a858:	4b37      	ldr	r3, [pc, #220]	; (801a938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a85a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a85e:	aa0a      	add	r2, sp, #40	; 0x28
 801a860:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a864:	910c      	str	r1, [sp, #48]	; 0x30
 801a866:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a86a:	ab08      	add	r3, sp, #32
 801a86c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a870:	e883 0003 	stmia.w	r3, {r0, r1}
 801a874:	4618      	mov	r0, r3
 801a876:	a90c      	add	r1, sp, #48	; 0x30
 801a878:	f7ff fbe6 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801a87c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d13c      	bne.n	801a8fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801a882:	2000      	movs	r0, #0
 801a884:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801a888:	2600      	movs	r6, #0
 801a88a:	696b      	ldr	r3, [r5, #20]
 801a88c:	a908      	add	r1, sp, #32
 801a88e:	682a      	ldr	r2, [r5, #0]
 801a890:	4628      	mov	r0, r5
 801a892:	9305      	str	r3, [sp, #20]
 801a894:	616e      	str	r6, [r5, #20]
 801a896:	6892      	ldr	r2, [r2, #8]
 801a898:	4790      	blx	r2
 801a89a:	9b05      	ldr	r3, [sp, #20]
 801a89c:	4652      	mov	r2, sl
 801a89e:	4649      	mov	r1, r9
 801a8a0:	616b      	str	r3, [r5, #20]
 801a8a2:	4628      	mov	r0, r5
 801a8a4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801a8a8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801a8ac:	f7ec feda 	bl	8007664 <_ZN8touchgfx8Drawable5setXYEss>
 801a8b0:	9a01      	ldr	r2, [sp, #4]
 801a8b2:	4b23      	ldr	r3, [pc, #140]	; (801a940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	801a      	strh	r2, [r3, #0]
 801a8b8:	9a02      	ldr	r2, [sp, #8]
 801a8ba:	4b22      	ldr	r3, [pc, #136]	; (801a944 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801a8bc:	801a      	strh	r2, [r3, #0]
 801a8be:	9a03      	ldr	r2, [sp, #12]
 801a8c0:	4b1c      	ldr	r3, [pc, #112]	; (801a934 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a8c2:	801a      	strh	r2, [r3, #0]
 801a8c4:	4b1c      	ldr	r3, [pc, #112]	; (801a938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a8c6:	9a04      	ldr	r2, [sp, #16]
 801a8c8:	801a      	strh	r2, [r3, #0]
 801a8ca:	6823      	ldr	r3, [r4, #0]
 801a8cc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801a8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8d2:	4798      	blx	r3
 801a8d4:	6823      	ldr	r3, [r4, #0]
 801a8d6:	4620      	mov	r0, r4
 801a8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8da:	4798      	blx	r3
 801a8dc:	b00f      	add	sp, #60	; 0x3c
 801a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8e2:	883b      	ldrh	r3, [r7, #0]
 801a8e4:	f8ab 0000 	strh.w	r0, [fp]
 801a8e8:	f8aa 3000 	strh.w	r3, [sl]
 801a8ec:	e789      	b.n	801a802 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801a8ee:	462a      	mov	r2, r5
 801a8f0:	ab0a      	add	r3, sp, #40	; 0x28
 801a8f2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a8f6:	6851      	ldr	r1, [r2, #4]
 801a8f8:	c303      	stmia	r3!, {r0, r1}
 801a8fa:	e7a9      	b.n	801a850 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801a8fc:	a807      	add	r0, sp, #28
 801a8fe:	f004 ffd1 	bl	801f8a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a902:	4606      	mov	r6, r0
 801a904:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801a906:	6803      	ldr	r3, [r0, #0]
 801a908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a90a:	4798      	blx	r3
 801a90c:	4286      	cmp	r6, r0
 801a90e:	d1b8      	bne.n	801a882 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801a910:	f7e9 fafe 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801a914:	6803      	ldr	r3, [r0, #0]
 801a916:	4606      	mov	r6, r0
 801a918:	a807      	add	r0, sp, #28
 801a91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a91c:	9305      	str	r3, [sp, #20]
 801a91e:	f004 ffc1 	bl	801f8a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a922:	9b05      	ldr	r3, [sp, #20]
 801a924:	4601      	mov	r1, r0
 801a926:	4630      	mov	r0, r6
 801a928:	4798      	blx	r3
 801a92a:	f080 0001 	eor.w	r0, r0, #1
 801a92e:	b2c0      	uxtb	r0, r0
 801a930:	e7a8      	b.n	801a884 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801a932:	bf00      	nop
 801a934:	24025cfc 	.word	0x24025cfc
 801a938:	24025cfe 	.word	0x24025cfe
 801a93c:	24025d00 	.word	0x24025d00
 801a940:	24025d02 	.word	0x24025d02
 801a944:	24025d04 	.word	0x24025d04

0801a948 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801a948:	4b07      	ldr	r3, [pc, #28]	; (801a968 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801a94a:	b510      	push	{r4, lr}
 801a94c:	781b      	ldrb	r3, [r3, #0]
 801a94e:	4604      	mov	r4, r0
 801a950:	b13b      	cbz	r3, 801a962 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a952:	6803      	ldr	r3, [r0, #0]
 801a954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a956:	4798      	blx	r3
 801a958:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a95a:	4283      	cmp	r3, r0
 801a95c:	d101      	bne.n	801a962 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a95e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a960:	bd10      	pop	{r4, pc}
 801a962:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801a964:	e7fc      	b.n	801a960 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801a966:	bf00      	nop
 801a968:	24025d06 	.word	0x24025d06

0801a96c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801a96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a970:	461d      	mov	r5, r3
 801a972:	b08a      	sub	sp, #40	; 0x28
 801a974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a978:	4690      	mov	r8, r2
 801a97a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801a97e:	2400      	movs	r4, #0
 801a980:	4607      	mov	r7, r0
 801a982:	fb06 8505 	mla	r5, r6, r5, r8
 801a986:	9404      	str	r4, [sp, #16]
 801a988:	f88d 4020 	strb.w	r4, [sp, #32]
 801a98c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a990:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a994:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a998:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a99c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a9a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a9a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a9a8:	f7ff ffce 	bl	801a948 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a9ac:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a9b0:	6878      	ldr	r0, [r7, #4]
 801a9b2:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a9b6:	a901      	add	r1, sp, #4
 801a9b8:	9505      	str	r5, [sp, #20]
 801a9ba:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a9be:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801a9c2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801a9c6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801a9ca:	6803      	ldr	r3, [r0, #0]
 801a9cc:	685b      	ldr	r3, [r3, #4]
 801a9ce:	4798      	blx	r3
 801a9d0:	b00a      	add	sp, #40	; 0x28
 801a9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a9d6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801a9d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9da:	b08b      	sub	sp, #44	; 0x2c
 801a9dc:	2400      	movs	r4, #0
 801a9de:	4691      	mov	r9, r2
 801a9e0:	461d      	mov	r5, r3
 801a9e2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801a9e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a9ea:	4688      	mov	r8, r1
 801a9ec:	4607      	mov	r7, r0
 801a9ee:	9404      	str	r4, [sp, #16]
 801a9f0:	fb06 9505 	mla	r5, r6, r5, r9
 801a9f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a9f8:	f7ff ffa6 	bl	801a948 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a9fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801aa00:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801aa04:	6878      	ldr	r0, [r7, #4]
 801aa06:	f8ad 3018 	strh.w	r3, [sp, #24]
 801aa0a:	a901      	add	r1, sp, #4
 801aa0c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801aa10:	9505      	str	r5, [sp, #20]
 801aa12:	f8ad 301a 	strh.w	r3, [sp, #26]
 801aa16:	f8ad 401c 	strh.w	r4, [sp, #28]
 801aa1a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801aa1e:	f8cd 8010 	str.w	r8, [sp, #16]
 801aa22:	f8ad 4020 	strh.w	r4, [sp, #32]
 801aa26:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801aa2a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801aa2e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801aa32:	6803      	ldr	r3, [r0, #0]
 801aa34:	685b      	ldr	r3, [r3, #4]
 801aa36:	4798      	blx	r3
 801aa38:	b00b      	add	sp, #44	; 0x2c
 801aa3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801aa40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801aa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa44:	b08a      	sub	sp, #40	; 0x28
 801aa46:	4698      	mov	r8, r3
 801aa48:	2300      	movs	r3, #0
 801aa4a:	4606      	mov	r6, r0
 801aa4c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801aa50:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801aa54:	2d0b      	cmp	r5, #11
 801aa56:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801aa5a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801aa5e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801aa62:	9304      	str	r3, [sp, #16]
 801aa64:	d137      	bne.n	801aad6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801aa66:	2380      	movs	r3, #128	; 0x80
 801aa68:	f88d 0020 	strb.w	r0, [sp, #32]
 801aa6c:	4630      	mov	r0, r6
 801aa6e:	9203      	str	r2, [sp, #12]
 801aa70:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801aa74:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801aa78:	f8ad 3018 	strh.w	r3, [sp, #24]
 801aa7c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801aa80:	f8ad 301a 	strh.w	r3, [sp, #26]
 801aa84:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801aa88:	f8ad 301c 	strh.w	r3, [sp, #28]
 801aa8c:	f7ff ff5c 	bl	801a948 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801aa90:	2c0b      	cmp	r4, #11
 801aa92:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801aa96:	f8ad 701e 	strh.w	r7, [sp, #30]
 801aa9a:	bf94      	ite	ls
 801aa9c:	4b19      	ldrls	r3, [pc, #100]	; (801ab04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801aa9e:	2100      	movhi	r1, #0
 801aaa0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801aaa4:	bf98      	it	ls
 801aaa6:	5d19      	ldrbls	r1, [r3, r4]
 801aaa8:	fb02 8307 	mla	r3, r2, r7, r8
 801aaac:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801aab0:	10c9      	asrs	r1, r1, #3
 801aab2:	fb01 0003 	mla	r0, r1, r3, r0
 801aab6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801aaba:	a901      	add	r1, sp, #4
 801aabc:	9005      	str	r0, [sp, #20]
 801aabe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801aac2:	2300      	movs	r3, #0
 801aac4:	6870      	ldr	r0, [r6, #4]
 801aac6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801aaca:	6803      	ldr	r3, [r0, #0]
 801aacc:	685b      	ldr	r3, [r3, #4]
 801aace:	4798      	blx	r3
 801aad0:	b00a      	add	sp, #40	; 0x28
 801aad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aad6:	2d02      	cmp	r5, #2
 801aad8:	d109      	bne.n	801aaee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801aada:	28ff      	cmp	r0, #255	; 0xff
 801aadc:	d105      	bne.n	801aaea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801aade:	f1bc 0f00 	cmp.w	ip, #0
 801aae2:	bf14      	ite	ne
 801aae4:	2340      	movne	r3, #64	; 0x40
 801aae6:	2320      	moveq	r3, #32
 801aae8:	e7be      	b.n	801aa68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801aaea:	2340      	movs	r3, #64	; 0x40
 801aaec:	e7bc      	b.n	801aa68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801aaee:	28ff      	cmp	r0, #255	; 0xff
 801aaf0:	d105      	bne.n	801aafe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801aaf2:	f1bc 0f00 	cmp.w	ip, #0
 801aaf6:	bf14      	ite	ne
 801aaf8:	2304      	movne	r3, #4
 801aafa:	2301      	moveq	r3, #1
 801aafc:	e7b4      	b.n	801aa68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801aafe:	2304      	movs	r3, #4
 801ab00:	e7b2      	b.n	801aa68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ab02:	bf00      	nop
 801ab04:	0802c178 	.word	0x0802c178

0801ab08 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab0c:	b08b      	sub	sp, #44	; 0x2c
 801ab0e:	461d      	mov	r5, r3
 801ab10:	2400      	movs	r4, #0
 801ab12:	4688      	mov	r8, r1
 801ab14:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801ab18:	4693      	mov	fp, r2
 801ab1a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801ab1e:	4607      	mov	r7, r0
 801ab20:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ab24:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801ab28:	9404      	str	r4, [sp, #16]
 801ab2a:	bf14      	ite	ne
 801ab2c:	2308      	movne	r3, #8
 801ab2e:	2302      	moveq	r3, #2
 801ab30:	fb05 b50a 	mla	r5, r5, sl, fp
 801ab34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ab38:	f7ff ff06 	bl	801a948 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ab3c:	2e0b      	cmp	r6, #11
 801ab3e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ab42:	a901      	add	r1, sp, #4
 801ab44:	bf98      	it	ls
 801ab46:	4b13      	ldrls	r3, [pc, #76]	; (801ab94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801ab48:	f8ad a01e 	strh.w	sl, [sp, #30]
 801ab4c:	bf98      	it	ls
 801ab4e:	5d9c      	ldrbls	r4, [r3, r6]
 801ab50:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801ab54:	10e4      	asrs	r4, r4, #3
 801ab56:	f8cd 8010 	str.w	r8, [sp, #16]
 801ab5a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ab5e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801ab62:	fb04 0405 	mla	r4, r4, r5, r0
 801ab66:	6878      	ldr	r0, [r7, #4]
 801ab68:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	9405      	str	r4, [sp, #20]
 801ab70:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ab74:	f88d 9020 	strb.w	r9, [sp, #32]
 801ab78:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801ab7c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801ab80:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801ab84:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801ab88:	6803      	ldr	r3, [r0, #0]
 801ab8a:	685b      	ldr	r3, [r3, #4]
 801ab8c:	4798      	blx	r3
 801ab8e:	b00b      	add	sp, #44	; 0x2c
 801ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab94:	0802c178 	.word	0x0802c178

0801ab98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801ab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab9c:	461e      	mov	r6, r3
 801ab9e:	4b0a      	ldr	r3, [pc, #40]	; (801abc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801aba0:	460f      	mov	r7, r1
 801aba2:	4690      	mov	r8, r2
 801aba4:	881d      	ldrh	r5, [r3, #0]
 801aba6:	f7e9 f9b3 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801abaa:	6803      	ldr	r3, [r0, #0]
 801abac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abae:	4798      	blx	r3
 801abb0:	280b      	cmp	r0, #11
 801abb2:	bf96      	itet	ls
 801abb4:	4b05      	ldrls	r3, [pc, #20]	; (801abcc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801abb6:	2400      	movhi	r4, #0
 801abb8:	5c1c      	ldrbls	r4, [r3, r0]
 801abba:	fb08 7005 	mla	r0, r8, r5, r7
 801abbe:	10e4      	asrs	r4, r4, #3
 801abc0:	fb04 6000 	mla	r0, r4, r0, r6
 801abc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abc8:	24025d02 	.word	0x24025d02
 801abcc:	0802c178 	.word	0x0802c178

0801abd0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abd2:	b08b      	sub	sp, #44	; 0x2c
 801abd4:	461f      	mov	r7, r3
 801abd6:	4604      	mov	r4, r0
 801abd8:	4616      	mov	r6, r2
 801abda:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801abde:	2500      	movs	r5, #0
 801abe0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801abe4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801abe8:	9504      	str	r5, [sp, #16]
 801abea:	f8ad 3018 	strh.w	r3, [sp, #24]
 801abee:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801abf2:	f8ad 301a 	strh.w	r3, [sp, #26]
 801abf6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801abfa:	f8ad 301c 	strh.w	r3, [sp, #28]
 801abfe:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801ac02:	f88d 3020 	strb.w	r3, [sp, #32]
 801ac06:	f7ff fe9f 	bl	801a948 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ac0a:	463a      	mov	r2, r7
 801ac0c:	4631      	mov	r1, r6
 801ac0e:	4603      	mov	r3, r0
 801ac10:	4620      	mov	r0, r4
 801ac12:	f7ff ffc1 	bl	801ab98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801ac16:	4b0e      	ldr	r3, [pc, #56]	; (801ac50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801ac18:	9005      	str	r0, [sp, #20]
 801ac1a:	881b      	ldrh	r3, [r3, #0]
 801ac1c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ac20:	f7e9 f976 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801ac24:	6803      	ldr	r3, [r0, #0]
 801ac26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac28:	4798      	blx	r3
 801ac2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ac2c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801ac30:	a901      	add	r1, sp, #4
 801ac32:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801ac36:	9304      	str	r3, [sp, #16]
 801ac38:	6860      	ldr	r0, [r4, #4]
 801ac3a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801ac3e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801ac42:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801ac46:	6803      	ldr	r3, [r0, #0]
 801ac48:	685b      	ldr	r3, [r3, #4]
 801ac4a:	4798      	blx	r3
 801ac4c:	b00b      	add	sp, #44	; 0x2c
 801ac4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac50:	24025d02 	.word	0x24025d02

0801ac54 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801ac54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac56:	b08d      	sub	sp, #52	; 0x34
 801ac58:	2501      	movs	r5, #1
 801ac5a:	4604      	mov	r4, r0
 801ac5c:	466b      	mov	r3, sp
 801ac5e:	9503      	str	r5, [sp, #12]
 801ac60:	e883 0006 	stmia.w	r3, {r1, r2}
 801ac64:	2300      	movs	r3, #0
 801ac66:	f8bd 6000 	ldrh.w	r6, [sp]
 801ac6a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801ac6e:	9306      	str	r3, [sp, #24]
 801ac70:	6803      	ldr	r3, [r0, #0]
 801ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac74:	4798      	blx	r3
 801ac76:	463a      	mov	r2, r7
 801ac78:	4631      	mov	r1, r6
 801ac7a:	4603      	mov	r3, r0
 801ac7c:	4620      	mov	r0, r4
 801ac7e:	f7ff ff8b 	bl	801ab98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801ac82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801ac84:	9004      	str	r0, [sp, #16]
 801ac86:	9307      	str	r3, [sp, #28]
 801ac88:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ac8c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ac90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ac94:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ac98:	4b0e      	ldr	r3, [pc, #56]	; (801acd4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801ac9a:	881b      	ldrh	r3, [r3, #0]
 801ac9c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801aca0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801aca4:	f7e9 f934 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801aca8:	6803      	ldr	r3, [r0, #0]
 801acaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acac:	4798      	blx	r3
 801acae:	23ff      	movs	r3, #255	; 0xff
 801acb0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801acb4:	a903      	add	r1, sp, #12
 801acb6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801acba:	6860      	ldr	r0, [r4, #4]
 801acbc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801acc0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801acc4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801acc8:	6803      	ldr	r3, [r0, #0]
 801acca:	685b      	ldr	r3, [r3, #4]
 801accc:	4798      	blx	r3
 801acce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801acd0:	b00d      	add	sp, #52	; 0x34
 801acd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801acd4:	24025d02 	.word	0x24025d02

0801acd8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801acd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acdc:	b08c      	sub	sp, #48	; 0x30
 801acde:	461e      	mov	r6, r3
 801ace0:	2300      	movs	r3, #0
 801ace2:	4604      	mov	r4, r0
 801ace4:	466d      	mov	r5, sp
 801ace6:	9306      	str	r3, [sp, #24]
 801ace8:	6803      	ldr	r3, [r0, #0]
 801acea:	e885 0006 	stmia.w	r5, {r1, r2}
 801acee:	2501      	movs	r5, #1
 801acf0:	f8bd 7000 	ldrh.w	r7, [sp]
 801acf4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801acf8:	9503      	str	r5, [sp, #12]
 801acfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801acfc:	4798      	blx	r3
 801acfe:	4642      	mov	r2, r8
 801ad00:	4639      	mov	r1, r7
 801ad02:	4603      	mov	r3, r0
 801ad04:	4620      	mov	r0, r4
 801ad06:	f7ff ff47 	bl	801ab98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801ad0a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ad0e:	9004      	str	r0, [sp, #16]
 801ad10:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ad14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ad18:	9607      	str	r6, [sp, #28]
 801ad1a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ad1e:	4b10      	ldr	r3, [pc, #64]	; (801ad60 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801ad20:	881b      	ldrh	r3, [r3, #0]
 801ad22:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801ad26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ad28:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ad2c:	f7e9 f8f0 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801ad30:	6803      	ldr	r3, [r0, #0]
 801ad32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad34:	4798      	blx	r3
 801ad36:	23ff      	movs	r3, #255	; 0xff
 801ad38:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801ad3c:	a903      	add	r1, sp, #12
 801ad3e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801ad42:	6860      	ldr	r0, [r4, #4]
 801ad44:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801ad48:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801ad4c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801ad50:	6803      	ldr	r3, [r0, #0]
 801ad52:	685b      	ldr	r3, [r3, #4]
 801ad54:	4798      	blx	r3
 801ad56:	4630      	mov	r0, r6
 801ad58:	b00c      	add	sp, #48	; 0x30
 801ad5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad5e:	bf00      	nop
 801ad60:	24025d02 	.word	0x24025d02

0801ad64 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801ad64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad66:	b085      	sub	sp, #20
 801ad68:	4605      	mov	r5, r0
 801ad6a:	ac02      	add	r4, sp, #8
 801ad6c:	e884 0006 	stmia.w	r4, {r1, r2}
 801ad70:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801ad74:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801ad78:	f7ff fde6 	bl	801a948 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ad7c:	4631      	mov	r1, r6
 801ad7e:	4603      	mov	r3, r0
 801ad80:	463a      	mov	r2, r7
 801ad82:	4628      	mov	r0, r5
 801ad84:	f7ff ff08 	bl	801ab98 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801ad88:	4a05      	ldr	r2, [pc, #20]	; (801ada0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801ad8a:	682b      	ldr	r3, [r5, #0]
 801ad8c:	8812      	ldrh	r2, [r2, #0]
 801ad8e:	9200      	str	r2, [sp, #0]
 801ad90:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801ad92:	4603      	mov	r3, r0
 801ad94:	4628      	mov	r0, r5
 801ad96:	e894 0006 	ldmia.w	r4, {r1, r2}
 801ad9a:	47b0      	blx	r6
 801ad9c:	b005      	add	sp, #20
 801ad9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ada0:	24025d02 	.word	0x24025d02

0801ada4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801ada4:	b570      	push	{r4, r5, r6, lr}
 801ada6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801adaa:	4604      	mov	r4, r0
 801adac:	b19b      	cbz	r3, 801add6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801adae:	2002      	movs	r0, #2
 801adb0:	f7e5 fda4 	bl	80008fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801adb4:	2300      	movs	r3, #0
 801adb6:	4620      	mov	r0, r4
 801adb8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801adbc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801adc0:	6823      	ldr	r3, [r4, #0]
 801adc2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801adc6:	f7ff fdbf 	bl	801a948 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801adca:	4601      	mov	r1, r0
 801adcc:	4620      	mov	r0, r4
 801adce:	462b      	mov	r3, r5
 801add0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801add4:	4718      	bx	r3
 801add6:	bd70      	pop	{r4, r5, r6, pc}

0801add8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801add8:	b570      	push	{r4, r5, r6, lr}
 801adda:	4605      	mov	r5, r0
 801addc:	460c      	mov	r4, r1
 801adde:	2003      	movs	r0, #3
 801ade0:	b149      	cbz	r1, 801adf6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801ade2:	f7e5 fccf 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801ade6:	6928      	ldr	r0, [r5, #16]
 801ade8:	b168      	cbz	r0, 801ae06 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801adea:	6803      	ldr	r3, [r0, #0]
 801adec:	2101      	movs	r1, #1
 801adee:	695b      	ldr	r3, [r3, #20]
 801adf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801adf4:	4718      	bx	r3
 801adf6:	f7e5 fd23 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801adfa:	6928      	ldr	r0, [r5, #16]
 801adfc:	b118      	cbz	r0, 801ae06 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801adfe:	6803      	ldr	r3, [r0, #0]
 801ae00:	4621      	mov	r1, r4
 801ae02:	695b      	ldr	r3, [r3, #20]
 801ae04:	e7f4      	b.n	801adf0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801ae06:	bd70      	pop	{r4, r5, r6, pc}

0801ae08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801ae08:	b538      	push	{r3, r4, r5, lr}
 801ae0a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801ae0e:	4604      	mov	r4, r0
 801ae10:	460d      	mov	r5, r1
 801ae12:	428b      	cmp	r3, r1
 801ae14:	d006      	beq.n	801ae24 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801ae16:	6803      	ldr	r3, [r0, #0]
 801ae18:	b929      	cbnz	r1, 801ae26 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801ae1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801ae1e:	4798      	blx	r3
 801ae20:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801ae24:	bd38      	pop	{r3, r4, r5, pc}
 801ae26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801ae2a:	e7f8      	b.n	801ae1e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801ae2c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801ae2c:	4b0d      	ldr	r3, [pc, #52]	; (801ae64 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801ae2e:	b510      	push	{r4, lr}
 801ae30:	781b      	ldrb	r3, [r3, #0]
 801ae32:	4604      	mov	r4, r0
 801ae34:	b95b      	cbnz	r3, 801ae4e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801ae36:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801ae3a:	2b02      	cmp	r3, #2
 801ae3c:	d007      	beq.n	801ae4e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801ae3e:	6840      	ldr	r0, [r0, #4]
 801ae40:	f000 f90e 	bl	801b060 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801ae44:	b118      	cbz	r0, 801ae4e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801ae46:	6862      	ldr	r2, [r4, #4]
 801ae48:	7a53      	ldrb	r3, [r2, #9]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d0fc      	beq.n	801ae48 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801ae4e:	f7e7 fa57 	bl	8002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801ae52:	4620      	mov	r0, r4
 801ae54:	2100      	movs	r1, #0
 801ae56:	f7ff ffd7 	bl	801ae08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801ae5a:	4620      	mov	r0, r4
 801ae5c:	f7ff fd74 	bl	801a948 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ae60:	bd10      	pop	{r4, pc}
 801ae62:	bf00      	nop
 801ae64:	24025d06 	.word	0x24025d06

0801ae68 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801ae68:	4770      	bx	lr

0801ae6a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801ae6a:	2000      	movs	r0, #0
 801ae6c:	4770      	bx	lr

0801ae6e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801ae6e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801ae72:	1a13      	subs	r3, r2, r0
 801ae74:	4258      	negs	r0, r3
 801ae76:	4158      	adcs	r0, r3
 801ae78:	4770      	bx	lr

0801ae7a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801ae7a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801ae7e:	1a9b      	subs	r3, r3, r2
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	bfdc      	itt	le
 801ae84:	6882      	ldrle	r2, [r0, #8]
 801ae86:	189b      	addle	r3, r3, r2
 801ae88:	2b01      	cmp	r3, #1
 801ae8a:	bfcc      	ite	gt
 801ae8c:	2000      	movgt	r0, #0
 801ae8e:	2001      	movle	r0, #1
 801ae90:	4770      	bx	lr

0801ae92 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801ae92:	6902      	ldr	r2, [r0, #16]
 801ae94:	6843      	ldr	r3, [r0, #4]
 801ae96:	2024      	movs	r0, #36	; 0x24
 801ae98:	fb00 3002 	mla	r0, r0, r2, r3
 801ae9c:	4770      	bx	lr

0801ae9e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801ae9e:	6803      	ldr	r3, [r0, #0]
 801aea0:	691b      	ldr	r3, [r3, #16]
 801aea2:	4718      	bx	r3

0801aea4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801aea4:	2301      	movs	r3, #1
 801aea6:	b570      	push	{r4, r5, r6, lr}
 801aea8:	7203      	strb	r3, [r0, #8]
 801aeaa:	4604      	mov	r4, r0
 801aeac:	6840      	ldr	r0, [r0, #4]
 801aeae:	6803      	ldr	r3, [r0, #0]
 801aeb0:	699b      	ldr	r3, [r3, #24]
 801aeb2:	4798      	blx	r3
 801aeb4:	6803      	ldr	r3, [r0, #0]
 801aeb6:	4605      	mov	r5, r0
 801aeb8:	2b40      	cmp	r3, #64	; 0x40
 801aeba:	d00c      	beq.n	801aed6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801aebc:	d810      	bhi.n	801aee0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801aebe:	2b04      	cmp	r3, #4
 801aec0:	d01d      	beq.n	801aefe <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801aec2:	d804      	bhi.n	801aece <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801aec4:	2b01      	cmp	r3, #1
 801aec6:	d006      	beq.n	801aed6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801aec8:	2b02      	cmp	r3, #2
 801aeca:	d02c      	beq.n	801af26 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801aecc:	bd70      	pop	{r4, r5, r6, pc}
 801aece:	2b08      	cmp	r3, #8
 801aed0:	d01d      	beq.n	801af0e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801aed2:	2b20      	cmp	r3, #32
 801aed4:	d1fa      	bne.n	801aecc <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801aed6:	6823      	ldr	r3, [r4, #0]
 801aed8:	4620      	mov	r0, r4
 801aeda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aedc:	4798      	blx	r3
 801aede:	e013      	b.n	801af08 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801aee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aee4:	d0f7      	beq.n	801aed6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801aee6:	d804      	bhi.n	801aef2 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801aee8:	2b80      	cmp	r3, #128	; 0x80
 801aeea:	d0f4      	beq.n	801aed6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801aeec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aef0:	e7f0      	b.n	801aed4 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801aef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aef6:	d0ee      	beq.n	801aed6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801aef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801aefc:	e7e5      	b.n	801aeca <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801aefe:	6823      	ldr	r3, [r4, #0]
 801af00:	7f01      	ldrb	r1, [r0, #28]
 801af02:	4620      	mov	r0, r4
 801af04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af06:	4798      	blx	r3
 801af08:	6823      	ldr	r3, [r4, #0]
 801af0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af0c:	e006      	b.n	801af1c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801af0e:	6823      	ldr	r3, [r4, #0]
 801af10:	7f01      	ldrb	r1, [r0, #28]
 801af12:	4620      	mov	r0, r4
 801af14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af16:	4798      	blx	r3
 801af18:	6823      	ldr	r3, [r4, #0]
 801af1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af1c:	4629      	mov	r1, r5
 801af1e:	4620      	mov	r0, r4
 801af20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af24:	4718      	bx	r3
 801af26:	6823      	ldr	r3, [r4, #0]
 801af28:	4620      	mov	r0, r4
 801af2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af2c:	4798      	blx	r3
 801af2e:	e7f3      	b.n	801af18 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801af30 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801af30:	4770      	bx	lr

0801af32 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801af32:	4770      	bx	lr

0801af34 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801af34:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801af38:	b510      	push	{r4, lr}
 801af3a:	1ad2      	subs	r2, r2, r3
 801af3c:	2a00      	cmp	r2, #0
 801af3e:	bfdc      	itt	le
 801af40:	6884      	ldrle	r4, [r0, #8]
 801af42:	1912      	addle	r2, r2, r4
 801af44:	2a01      	cmp	r2, #1
 801af46:	dd16      	ble.n	801af76 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801af48:	6842      	ldr	r2, [r0, #4]
 801af4a:	2424      	movs	r4, #36	; 0x24
 801af4c:	fb04 2303 	mla	r3, r4, r3, r2
 801af50:	f101 0220 	add.w	r2, r1, #32
 801af54:	f851 4b04 	ldr.w	r4, [r1], #4
 801af58:	4291      	cmp	r1, r2
 801af5a:	f843 4b04 	str.w	r4, [r3], #4
 801af5e:	d1f9      	bne.n	801af54 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801af60:	780a      	ldrb	r2, [r1, #0]
 801af62:	701a      	strb	r2, [r3, #0]
 801af64:	68c3      	ldr	r3, [r0, #12]
 801af66:	6882      	ldr	r2, [r0, #8]
 801af68:	f3bf 8f5b 	dmb	ish
 801af6c:	3301      	adds	r3, #1
 801af6e:	429a      	cmp	r2, r3
 801af70:	bfd8      	it	le
 801af72:	1a9b      	suble	r3, r3, r2
 801af74:	60c3      	str	r3, [r0, #12]
 801af76:	bd10      	pop	{r4, pc}

0801af78 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801af78:	6903      	ldr	r3, [r0, #16]
 801af7a:	6882      	ldr	r2, [r0, #8]
 801af7c:	f3bf 8f5b 	dmb	ish
 801af80:	3301      	adds	r3, #1
 801af82:	429a      	cmp	r2, r3
 801af84:	bfd8      	it	le
 801af86:	1a9b      	suble	r3, r3, r2
 801af88:	6103      	str	r3, [r0, #16]
 801af8a:	4770      	bx	lr

0801af8c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801af8c:	b570      	push	{r4, r5, r6, lr}
 801af8e:	4604      	mov	r4, r0
 801af90:	460e      	mov	r6, r1
 801af92:	6860      	ldr	r0, [r4, #4]
 801af94:	6803      	ldr	r3, [r0, #0]
 801af96:	685b      	ldr	r3, [r3, #4]
 801af98:	4798      	blx	r3
 801af9a:	2800      	cmp	r0, #0
 801af9c:	d1f9      	bne.n	801af92 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801af9e:	4d0d      	ldr	r5, [pc, #52]	; (801afd4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801afa0:	6828      	ldr	r0, [r5, #0]
 801afa2:	6803      	ldr	r3, [r0, #0]
 801afa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801afa6:	4798      	blx	r3
 801afa8:	f7e7 f9c4 	bl	8002334 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801afac:	6828      	ldr	r0, [r5, #0]
 801afae:	2101      	movs	r1, #1
 801afb0:	f7ff ff2a 	bl	801ae08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801afb4:	6860      	ldr	r0, [r4, #4]
 801afb6:	4631      	mov	r1, r6
 801afb8:	6803      	ldr	r3, [r0, #0]
 801afba:	689b      	ldr	r3, [r3, #8]
 801afbc:	4798      	blx	r3
 801afbe:	6823      	ldr	r3, [r4, #0]
 801afc0:	4620      	mov	r0, r4
 801afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afc4:	4798      	blx	r3
 801afc6:	6828      	ldr	r0, [r5, #0]
 801afc8:	6803      	ldr	r3, [r0, #0]
 801afca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801afce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801afd0:	4718      	bx	r3
 801afd2:	bf00      	nop
 801afd4:	24025d08 	.word	0x24025d08

0801afd8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801afd8:	b508      	push	{r3, lr}
 801afda:	f7e7 f991 	bl	8002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801afde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801afe2:	f7e7 b99b 	b.w	800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801afe6 <_ZN8touchgfx13DMA_Interface5startEv>:
 801afe6:	b510      	push	{r4, lr}
 801afe8:	4604      	mov	r4, r0
 801afea:	6840      	ldr	r0, [r0, #4]
 801afec:	6803      	ldr	r3, [r0, #0]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	4798      	blx	r3
 801aff2:	b948      	cbnz	r0, 801b008 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801aff4:	7a63      	ldrb	r3, [r4, #9]
 801aff6:	b13b      	cbz	r3, 801b008 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801aff8:	7a23      	ldrb	r3, [r4, #8]
 801affa:	b92b      	cbnz	r3, 801b008 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801affc:	6823      	ldr	r3, [r4, #0]
 801affe:	4620      	mov	r0, r4
 801b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b006:	4718      	bx	r3
 801b008:	bd10      	pop	{r4, pc}

0801b00a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801b00a:	b570      	push	{r4, r5, r6, lr}
 801b00c:	4604      	mov	r4, r0
 801b00e:	6840      	ldr	r0, [r0, #4]
 801b010:	6803      	ldr	r3, [r0, #0]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	4798      	blx	r3
 801b016:	4605      	mov	r5, r0
 801b018:	b930      	cbnz	r0, 801b028 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801b01a:	7a23      	ldrb	r3, [r4, #8]
 801b01c:	b123      	cbz	r3, 801b028 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801b01e:	6860      	ldr	r0, [r4, #4]
 801b020:	6803      	ldr	r3, [r0, #0]
 801b022:	695b      	ldr	r3, [r3, #20]
 801b024:	4798      	blx	r3
 801b026:	7225      	strb	r5, [r4, #8]
 801b028:	6860      	ldr	r0, [r4, #4]
 801b02a:	6803      	ldr	r3, [r0, #0]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	4798      	blx	r3
 801b030:	b928      	cbnz	r0, 801b03e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801b032:	6823      	ldr	r3, [r4, #0]
 801b034:	4620      	mov	r0, r4
 801b036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b03c:	4718      	bx	r3
 801b03e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b042:	f7e7 b983 	b.w	800234c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801b048 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801b048:	b510      	push	{r4, lr}
 801b04a:	6082      	str	r2, [r0, #8]
 801b04c:	2200      	movs	r2, #0
 801b04e:	4c03      	ldr	r4, [pc, #12]	; (801b05c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801b050:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801b054:	e9c0 4100 	strd	r4, r1, [r0]
 801b058:	bd10      	pop	{r4, pc}
 801b05a:	bf00      	nop
 801b05c:	0802c2b4 	.word	0x0802c2b4

0801b060 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801b060:	6840      	ldr	r0, [r0, #4]
 801b062:	6803      	ldr	r3, [r0, #0]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	4718      	bx	r3

0801b068 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801b068:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801b06c:	4770      	bx	lr

0801b06e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801b06e:	b510      	push	{r4, lr}
 801b070:	4604      	mov	r4, r0
 801b072:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b074:	b150      	cbz	r0, 801b08c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801b076:	6803      	ldr	r3, [r0, #0]
 801b078:	68db      	ldr	r3, [r3, #12]
 801b07a:	4798      	blx	r3
 801b07c:	b130      	cbz	r0, 801b08c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801b07e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b080:	4621      	mov	r1, r4
 801b082:	6803      	ldr	r3, [r0, #0]
 801b084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b088:	689b      	ldr	r3, [r3, #8]
 801b08a:	4718      	bx	r3
 801b08c:	bd10      	pop	{r4, pc}

0801b08e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801b08e:	790b      	ldrb	r3, [r1, #4]
 801b090:	2b00      	cmp	r3, #0
 801b092:	bf0c      	ite	eq
 801b094:	2301      	moveq	r3, #1
 801b096:	2300      	movne	r3, #0
 801b098:	b570      	push	{r4, r5, r6, lr}
 801b09a:	4604      	mov	r4, r0
 801b09c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801b0a0:	460e      	mov	r6, r1
 801b0a2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801b0a6:	d109      	bne.n	801b0bc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801b0a8:	b14d      	cbz	r5, 801b0be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801b0aa:	7933      	ldrb	r3, [r6, #4]
 801b0ac:	2b01      	cmp	r3, #1
 801b0ae:	d10c      	bne.n	801b0ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801b0b0:	6823      	ldr	r3, [r4, #0]
 801b0b2:	4620      	mov	r0, r4
 801b0b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b0b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0ba:	4718      	bx	r3
 801b0bc:	b12d      	cbz	r5, 801b0ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801b0be:	6823      	ldr	r3, [r4, #0]
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	695b      	ldr	r3, [r3, #20]
 801b0c4:	4798      	blx	r3
 801b0c6:	2d00      	cmp	r5, #0
 801b0c8:	d1ef      	bne.n	801b0aa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801b0ca:	bd70      	pop	{r4, r5, r6, pc}

0801b0cc <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 801b0cc:	b508      	push	{r3, lr}
 801b0ce:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801b0d2:	b10b      	cbz	r3, 801b0d8 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 801b0d4:	f7e8 fe18 	bl	8003d08 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801b0d8:	bd08      	pop	{r3, pc}

0801b0da <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801b0da:	6803      	ldr	r3, [r0, #0]
 801b0dc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801b0e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b0e2:	4718      	bx	r3

0801b0e4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801b0e4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b0e8:	2bff      	cmp	r3, #255	; 0xff
 801b0ea:	b510      	push	{r4, lr}
 801b0ec:	d104      	bne.n	801b0f8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801b0ee:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801b0f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b0f4:	429a      	cmp	r2, r3
 801b0f6:	d105      	bne.n	801b104 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	8003      	strh	r3, [r0, #0]
 801b0fc:	8043      	strh	r3, [r0, #2]
 801b0fe:	8083      	strh	r3, [r0, #4]
 801b100:	80c3      	strh	r3, [r0, #6]
 801b102:	bd10      	pop	{r4, pc}
 801b104:	2300      	movs	r3, #0
 801b106:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801b10a:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801b10e:	8003      	strh	r3, [r0, #0]
 801b110:	8043      	strh	r3, [r0, #2]
 801b112:	8084      	strh	r4, [r0, #4]
 801b114:	80c2      	strh	r2, [r0, #6]
 801b116:	e7f4      	b.n	801b102 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801b118 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801b118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b11c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801b120:	b087      	sub	sp, #28
 801b122:	4604      	mov	r4, r0
 801b124:	4689      	mov	r9, r1
 801b126:	b363      	cbz	r3, 801b182 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801b128:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801b12a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b12e:	429a      	cmp	r2, r3
 801b130:	d027      	beq.n	801b182 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801b132:	ad06      	add	r5, sp, #24
 801b134:	2700      	movs	r7, #0
 801b136:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801b13a:	4628      	mov	r0, r5
 801b13c:	f004 fa42 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b140:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801b144:	a904      	add	r1, sp, #16
 801b146:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b14a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b14e:	4620      	mov	r0, r4
 801b150:	6823      	ldr	r3, [r4, #0]
 801b152:	9704      	str	r7, [sp, #16]
 801b154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b156:	4798      	blx	r3
 801b158:	f7e8 feda 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801b15c:	6803      	ldr	r3, [r0, #0]
 801b15e:	4606      	mov	r6, r0
 801b160:	4628      	mov	r0, r5
 801b162:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801b166:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801b168:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b16c:	f004 fb16 	bl	801f79c <_ZNK8touchgfx6Bitmap7getDataEv>
 801b170:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801b174:	4601      	mov	r1, r0
 801b176:	9701      	str	r7, [sp, #4]
 801b178:	aa04      	add	r2, sp, #16
 801b17a:	9300      	str	r3, [sp, #0]
 801b17c:	4630      	mov	r0, r6
 801b17e:	464b      	mov	r3, r9
 801b180:	47c0      	blx	r8
 801b182:	b007      	add	sp, #28
 801b184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801b188 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801b188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b18a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b18e:	460d      	mov	r5, r1
 801b190:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801b194:	2100      	movs	r1, #0
 801b196:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b19a:	4604      	mov	r4, r0
 801b19c:	6803      	ldr	r3, [r0, #0]
 801b19e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1a4:	9100      	str	r1, [sp, #0]
 801b1a6:	4669      	mov	r1, sp
 801b1a8:	4798      	blx	r3
 801b1aa:	4621      	mov	r1, r4
 801b1ac:	a802      	add	r0, sp, #8
 801b1ae:	f002 fda1 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b1b2:	f7e8 fead 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801b1b6:	6803      	ldr	r3, [r0, #0]
 801b1b8:	aa02      	add	r2, sp, #8
 801b1ba:	4669      	mov	r1, sp
 801b1bc:	695e      	ldr	r6, [r3, #20]
 801b1be:	462b      	mov	r3, r5
 801b1c0:	47b0      	blx	r6
 801b1c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b1c6:	2800      	cmp	r0, #0
 801b1c8:	bf08      	it	eq
 801b1ca:	461d      	moveq	r5, r3
 801b1cc:	84e5      	strh	r5, [r4, #38]	; 0x26
 801b1ce:	b004      	add	sp, #16
 801b1d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b1d4 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	8082      	strh	r2, [r0, #4]
 801b1d8:	80c2      	strh	r2, [r0, #6]
 801b1da:	8102      	strh	r2, [r0, #8]
 801b1dc:	8142      	strh	r2, [r0, #10]
 801b1de:	8182      	strh	r2, [r0, #12]
 801b1e0:	81c2      	strh	r2, [r0, #14]
 801b1e2:	8202      	strh	r2, [r0, #16]
 801b1e4:	8242      	strh	r2, [r0, #18]
 801b1e6:	61c2      	str	r2, [r0, #28]
 801b1e8:	8402      	strh	r2, [r0, #32]
 801b1ea:	8442      	strh	r2, [r0, #34]	; 0x22
 801b1ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801b1f0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b1f4:	2201      	movs	r2, #1
 801b1f6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801b1fa:	4a04      	ldr	r2, [pc, #16]	; (801b20c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 801b1fc:	6002      	str	r2, [r0, #0]
 801b1fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b202:	84c2      	strh	r2, [r0, #38]	; 0x26
 801b204:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801b208:	4770      	bx	lr
 801b20a:	bf00      	nop
 801b20c:	0802c348 	.word	0x0802c348

0801b210 <_ZNK8touchgfx5Image17invalidateContentEv>:
 801b210:	b508      	push	{r3, lr}
 801b212:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801b216:	b10b      	cbz	r3, 801b21c <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 801b218:	f7e8 fd76 	bl	8003d08 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801b21c:	bd08      	pop	{r3, pc}

0801b21e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801b21e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b222:	4770      	bx	lr

0801b224 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 801b224:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801b228:	4770      	bx	lr

0801b22a <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 801b22a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b22c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b230:	4605      	mov	r5, r0
 801b232:	2bff      	cmp	r3, #255	; 0xff
 801b234:	d11e      	bne.n	801b274 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801b236:	f101 0426 	add.w	r4, r1, #38	; 0x26
 801b23a:	4668      	mov	r0, sp
 801b23c:	4621      	mov	r1, r4
 801b23e:	f004 fa29 	bl	801f694 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b242:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 801b246:	4620      	mov	r0, r4
 801b248:	f004 f9bc 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b24c:	4286      	cmp	r6, r0
 801b24e:	d111      	bne.n	801b274 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801b250:	4621      	mov	r1, r4
 801b252:	a802      	add	r0, sp, #8
 801b254:	f004 fa1e 	bl	801f694 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b258:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b25c:	4620      	mov	r0, r4
 801b25e:	f004 f9e5 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b262:	4286      	cmp	r6, r0
 801b264:	d106      	bne.n	801b274 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801b266:	4621      	mov	r1, r4
 801b268:	4628      	mov	r0, r5
 801b26a:	f004 fa13 	bl	801f694 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b26e:	4628      	mov	r0, r5
 801b270:	b004      	add	sp, #16
 801b272:	bd70      	pop	{r4, r5, r6, pc}
 801b274:	2300      	movs	r3, #0
 801b276:	802b      	strh	r3, [r5, #0]
 801b278:	806b      	strh	r3, [r5, #2]
 801b27a:	80ab      	strh	r3, [r5, #4]
 801b27c:	80eb      	strh	r3, [r5, #6]
 801b27e:	e7f6      	b.n	801b26e <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

0801b280 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 801b280:	b538      	push	{r3, r4, r5, lr}
 801b282:	2300      	movs	r3, #0
 801b284:	2501      	movs	r5, #1
 801b286:	4604      	mov	r4, r0
 801b288:	8083      	strh	r3, [r0, #4]
 801b28a:	80c3      	strh	r3, [r0, #6]
 801b28c:	8103      	strh	r3, [r0, #8]
 801b28e:	8143      	strh	r3, [r0, #10]
 801b290:	8183      	strh	r3, [r0, #12]
 801b292:	81c3      	strh	r3, [r0, #14]
 801b294:	8203      	strh	r3, [r0, #16]
 801b296:	8243      	strh	r3, [r0, #18]
 801b298:	61c3      	str	r3, [r0, #28]
 801b29a:	8403      	strh	r3, [r0, #32]
 801b29c:	8443      	strh	r3, [r0, #34]	; 0x22
 801b29e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801b2a2:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 801b2a6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801b2aa:	4b07      	ldr	r3, [pc, #28]	; (801b2c8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 801b2ac:	6003      	str	r3, [r0, #0]
 801b2ae:	880b      	ldrh	r3, [r1, #0]
 801b2b0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b2b2:	23ff      	movs	r3, #255	; 0xff
 801b2b4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b2b8:	f000 fb7a 	bl	801b9b0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b2bc:	4b03      	ldr	r3, [pc, #12]	; (801b2cc <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 801b2be:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801b2c2:	4620      	mov	r0, r4
 801b2c4:	6023      	str	r3, [r4, #0]
 801b2c6:	bd38      	pop	{r3, r4, r5, pc}
 801b2c8:	0802c580 	.word	0x0802c580
 801b2cc:	0802c3b8 	.word	0x0802c3b8

0801b2d0 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 801b2d0:	4603      	mov	r3, r0
 801b2d2:	3026      	adds	r0, #38	; 0x26
 801b2d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801b2d8:	b90b      	cbnz	r3, 801b2de <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801b2da:	f002 bdaf 	b.w	801de3c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801b2de:	f002 bdbd 	b.w	801de5c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0801b2e4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801b2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2e8:	4604      	mov	r4, r0
 801b2ea:	469b      	mov	fp, r3
 801b2ec:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801b2f0:	b0b3      	sub	sp, #204	; 0xcc
 801b2f2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b2f6:	f9b1 6000 	ldrsh.w	r6, [r1]
 801b2fa:	8888      	ldrh	r0, [r1, #4]
 801b2fc:	9206      	str	r2, [sp, #24]
 801b2fe:	2200      	movs	r2, #0
 801b300:	4430      	add	r0, r6
 801b302:	9211      	str	r2, [sp, #68]	; 0x44
 801b304:	b280      	uxth	r0, r0
 801b306:	fa0f fe80 	sxth.w	lr, r0
 801b30a:	4596      	cmp	lr, r2
 801b30c:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 801b310:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 801b314:	f340 811a 	ble.w	801b54c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b318:	45b4      	cmp	ip, r6
 801b31a:	f340 8117 	ble.w	801b54c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b31e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801b322:	88ca      	ldrh	r2, [r1, #6]
 801b324:	442a      	add	r2, r5
 801b326:	b292      	uxth	r2, r2
 801b328:	b211      	sxth	r1, r2
 801b32a:	2900      	cmp	r1, #0
 801b32c:	f340 810e 	ble.w	801b54c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b330:	42ab      	cmp	r3, r5
 801b332:	f340 810b 	ble.w	801b54c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b336:	45f4      	cmp	ip, lr
 801b338:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801b33c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801b340:	bfb8      	it	lt
 801b342:	fa1f f08c 	uxthlt.w	r0, ip
 801b346:	428b      	cmp	r3, r1
 801b348:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b34c:	bfb8      	it	lt
 801b34e:	b29a      	uxthlt	r2, r3
 801b350:	1b80      	subs	r0, r0, r6
 801b352:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801b356:	1b52      	subs	r2, r2, r5
 801b358:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801b35c:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801b360:	ab11      	add	r3, sp, #68	; 0x44
 801b362:	ad13      	add	r5, sp, #76	; 0x4c
 801b364:	6822      	ldr	r2, [r4, #0]
 801b366:	1d26      	adds	r6, r4, #4
 801b368:	9307      	str	r3, [sp, #28]
 801b36a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b36c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b370:	e885 0003 	stmia.w	r5, {r0, r1}
 801b374:	4629      	mov	r1, r5
 801b376:	4620      	mov	r0, r4
 801b378:	4790      	blx	r2
 801b37a:	4621      	mov	r1, r4
 801b37c:	a815      	add	r0, sp, #84	; 0x54
 801b37e:	f002 fcb9 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b382:	a815      	add	r0, sp, #84	; 0x54
 801b384:	f001 fa1c 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b388:	9b07      	ldr	r3, [sp, #28]
 801b38a:	4631      	mov	r1, r6
 801b38c:	4618      	mov	r0, r3
 801b38e:	f001 fa5b 	bl	801c848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b392:	4628      	mov	r0, r5
 801b394:	f104 0526 	add.w	r5, r4, #38	; 0x26
 801b398:	f001 fa12 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b39c:	4628      	mov	r0, r5
 801b39e:	f004 f9fd 	bl	801f79c <_ZNK8touchgfx6Bitmap7getDataEv>
 801b3a2:	9007      	str	r0, [sp, #28]
 801b3a4:	2800      	cmp	r0, #0
 801b3a6:	f000 80ce 	beq.w	801b546 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 801b3aa:	f8db 2000 	ldr.w	r2, [fp]
 801b3ae:	a90d      	add	r1, sp, #52	; 0x34
 801b3b0:	a809      	add	r0, sp, #36	; 0x24
 801b3b2:	9209      	str	r2, [sp, #36]	; 0x24
 801b3b4:	f8db 2004 	ldr.w	r2, [fp, #4]
 801b3b8:	920a      	str	r2, [sp, #40]	; 0x28
 801b3ba:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b3be:	920b      	str	r2, [sp, #44]	; 0x2c
 801b3c0:	f8db 200c 	ldr.w	r2, [fp, #12]
 801b3c4:	920c      	str	r2, [sp, #48]	; 0x30
 801b3c6:	f8da 2000 	ldr.w	r2, [sl]
 801b3ca:	920d      	str	r2, [sp, #52]	; 0x34
 801b3cc:	f8da 2004 	ldr.w	r2, [sl, #4]
 801b3d0:	920e      	str	r2, [sp, #56]	; 0x38
 801b3d2:	f8da 2008 	ldr.w	r2, [sl, #8]
 801b3d6:	920f      	str	r2, [sp, #60]	; 0x3c
 801b3d8:	f8da 200c 	ldr.w	r2, [sl, #12]
 801b3dc:	9210      	str	r2, [sp, #64]	; 0x40
 801b3de:	4632      	mov	r2, r6
 801b3e0:	f001 fa16 	bl	801c810 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b3e4:	4632      	mov	r2, r6
 801b3e6:	a90e      	add	r1, sp, #56	; 0x38
 801b3e8:	a80a      	add	r0, sp, #40	; 0x28
 801b3ea:	f001 fa11 	bl	801c810 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b3ee:	4632      	mov	r2, r6
 801b3f0:	a90f      	add	r1, sp, #60	; 0x3c
 801b3f2:	a80b      	add	r0, sp, #44	; 0x2c
 801b3f4:	f001 fa0c 	bl	801c810 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b3f8:	4632      	mov	r2, r6
 801b3fa:	a910      	add	r1, sp, #64	; 0x40
 801b3fc:	a80c      	add	r0, sp, #48	; 0x30
 801b3fe:	f001 fa07 	bl	801c810 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b402:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801b406:	edd7 3a00 	vldr	s7, [r7]
 801b40a:	eef0 6a67 	vmov.f32	s13, s15
 801b40e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801b412:	ed97 5a01 	vldr	s10, [r7, #4]
 801b416:	eeb0 7a67 	vmov.f32	s14, s15
 801b41a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801b41e:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801b422:	edd9 2a00 	vldr	s5, [r9]
 801b426:	eeb0 6a67 	vmov.f32	s12, s15
 801b42a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801b42e:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801b432:	ed98 3a00 	vldr	s6, [r8]
 801b436:	ed99 4a01 	vldr	s8, [r9, #4]
 801b43a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b43e:	edd8 4a01 	vldr	s9, [r8, #4]
 801b442:	edd9 5a02 	vldr	s11, [r9, #8]
 801b446:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801b44a:	ee16 6a10 	vmov	r6, s12
 801b44e:	eeb0 6a67 	vmov.f32	s12, s15
 801b452:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801b456:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801b45a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b45e:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801b462:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 801b466:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 801b46a:	ee16 0a10 	vmov	r0, s12
 801b46e:	eeb0 6a67 	vmov.f32	s12, s15
 801b472:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801b476:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 801b47a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b47e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801b482:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 801b486:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 801b48a:	ee16 1a10 	vmov	r1, s12
 801b48e:	eeb0 6a67 	vmov.f32	s12, s15
 801b492:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801b496:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 801b49a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b49e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801b4a2:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801b4a6:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801b4aa:	68ff      	ldr	r7, [r7, #12]
 801b4ac:	ee16 2a10 	vmov	r2, s12
 801b4b0:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801b4b4:	9624      	str	r6, [sp, #144]	; 0x90
 801b4b6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b4ba:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801b4be:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801b4c2:	4628      	mov	r0, r5
 801b4c4:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 801b4c8:	9b06      	ldr	r3, [sp, #24]
 801b4ca:	922d      	str	r2, [sp, #180]	; 0xb4
 801b4cc:	4a21      	ldr	r2, [pc, #132]	; (801b554 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 801b4ce:	9317      	str	r3, [sp, #92]	; 0x5c
 801b4d0:	8812      	ldrh	r2, [r2, #0]
 801b4d2:	9b07      	ldr	r3, [sp, #28]
 801b4d4:	9218      	str	r2, [sp, #96]	; 0x60
 801b4d6:	9319      	str	r3, [sp, #100]	; 0x64
 801b4d8:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801b4dc:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 801b4e0:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801b4e4:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801b4e8:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801b4ec:	9731      	str	r7, [sp, #196]	; 0xc4
 801b4ee:	f004 f985 	bl	801f7fc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b4f2:	901a      	str	r0, [sp, #104]	; 0x68
 801b4f4:	4628      	mov	r0, r5
 801b4f6:	f004 f865 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b4fa:	901b      	str	r0, [sp, #108]	; 0x6c
 801b4fc:	4628      	mov	r0, r5
 801b4fe:	f004 f895 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b502:	901c      	str	r0, [sp, #112]	; 0x70
 801b504:	4628      	mov	r0, r5
 801b506:	f004 f85d 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b50a:	4b13      	ldr	r3, [pc, #76]	; (801b558 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 801b50c:	901d      	str	r0, [sp, #116]	; 0x74
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b514:	b10a      	cbz	r2, 801b51a <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 801b516:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801b518:	b905      	cbnz	r5, 801b51c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 801b51a:	689d      	ldr	r5, [r3, #8]
 801b51c:	682b      	ldr	r3, [r5, #0]
 801b51e:	4620      	mov	r0, r4
 801b520:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801b522:	f7ff fed5 	bl	801b2d0 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801b526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b52a:	aa1e      	add	r2, sp, #120	; 0x78
 801b52c:	a917      	add	r1, sp, #92	; 0x5c
 801b52e:	9304      	str	r3, [sp, #16]
 801b530:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801b534:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801b538:	ab13      	add	r3, sp, #76	; 0x4c
 801b53a:	4628      	mov	r0, r5
 801b53c:	9301      	str	r3, [sp, #4]
 801b53e:	ab15      	add	r3, sp, #84	; 0x54
 801b540:	9300      	str	r3, [sp, #0]
 801b542:	ab19      	add	r3, sp, #100	; 0x64
 801b544:	47b0      	blx	r6
 801b546:	b033      	add	sp, #204	; 0xcc
 801b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b54c:	2300      	movs	r3, #0
 801b54e:	9312      	str	r3, [sp, #72]	; 0x48
 801b550:	e706      	b.n	801b360 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 801b552:	bf00      	nop
 801b554:	24025d02 	.word	0x24025d02
 801b558:	24025d08 	.word	0x24025d08

0801b55c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 801b55c:	b570      	push	{r4, r5, r6, lr}
 801b55e:	ed2d 8b04 	vpush	{d8-d9}
 801b562:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801b566:	b098      	sub	sp, #96	; 0x60
 801b568:	4604      	mov	r4, r0
 801b56a:	460e      	mov	r6, r1
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d065      	beq.n	801b63c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 801b570:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b574:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801b578:	ed9f 8a37 	vldr	s16, [pc, #220]	; 801b658 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 801b57c:	ee09 3a10 	vmov	s18, r3
 801b580:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b584:	4628      	mov	r0, r5
 801b586:	ee08 3a90 	vmov	s17, r3
 801b58a:	4b34      	ldr	r3, [pc, #208]	; (801b65c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 801b58c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801b590:	930c      	str	r3, [sp, #48]	; 0x30
 801b592:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801b596:	930d      	str	r3, [sp, #52]	; 0x34
 801b598:	930e      	str	r3, [sp, #56]	; 0x38
 801b59a:	ee39 9a08 	vadd.f32	s18, s18, s16
 801b59e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b5a0:	f004 f810 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b5a4:	ee07 0a90 	vmov	s15, r0
 801b5a8:	4628      	mov	r0, r5
 801b5aa:	ee78 8a88 	vadd.f32	s17, s17, s16
 801b5ae:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801b5b2:	f004 f83b 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b5b6:	4b2a      	ldr	r3, [pc, #168]	; (801b660 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 801b5b8:	ee07 0a90 	vmov	s15, r0
 801b5bc:	781b      	ldrb	r3, [r3, #0]
 801b5be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b5c2:	eef0 7a48 	vmov.f32	s15, s16
 801b5c6:	2b01      	cmp	r3, #1
 801b5c8:	d13c      	bne.n	801b644 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 801b5ca:	eef0 6a69 	vmov.f32	s13, s19
 801b5ce:	ee19 3a90 	vmov	r3, s19
 801b5d2:	eeb0 6a47 	vmov.f32	s12, s14
 801b5d6:	eef0 5a47 	vmov.f32	s11, s14
 801b5da:	eef0 9a48 	vmov.f32	s19, s16
 801b5de:	eeb0 7a48 	vmov.f32	s14, s16
 801b5e2:	9314      	str	r3, [sp, #80]	; 0x50
 801b5e4:	ab14      	add	r3, sp, #80	; 0x50
 801b5e6:	2200      	movs	r2, #0
 801b5e8:	4631      	mov	r1, r6
 801b5ea:	9303      	str	r3, [sp, #12]
 801b5ec:	ab10      	add	r3, sp, #64	; 0x40
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	edcd 7a04 	vstr	s15, [sp, #16]
 801b5f4:	9302      	str	r3, [sp, #8]
 801b5f6:	ab0c      	add	r3, sp, #48	; 0x30
 801b5f8:	ed8d 9a05 	vstr	s18, [sp, #20]
 801b5fc:	9301      	str	r3, [sp, #4]
 801b5fe:	ab08      	add	r3, sp, #32
 801b600:	ed8d 9a06 	vstr	s18, [sp, #24]
 801b604:	9300      	str	r3, [sp, #0]
 801b606:	ab04      	add	r3, sp, #16
 801b608:	edcd 7a07 	vstr	s15, [sp, #28]
 801b60c:	edcd 7a08 	vstr	s15, [sp, #32]
 801b610:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801b614:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 801b618:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 801b61c:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801b620:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 801b624:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 801b628:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801b62c:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801b630:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 801b634:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 801b638:	f7ff fe54 	bl	801b2e4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801b63c:	b018      	add	sp, #96	; 0x60
 801b63e:	ecbd 8b04 	vpop	{d8-d9}
 801b642:	bd70      	pop	{r4, r5, r6, pc}
 801b644:	eef0 6a47 	vmov.f32	s13, s14
 801b648:	ee18 3a10 	vmov	r3, s16
 801b64c:	eef0 5a69 	vmov.f32	s11, s19
 801b650:	eeb0 6a48 	vmov.f32	s12, s16
 801b654:	e7c5      	b.n	801b5e2 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 801b656:	bf00      	nop
 801b658:	00000000 	.word	0x00000000
 801b65c:	42c80000 	.word	0x42c80000
 801b660:	24025d00 	.word	0x24025d00

0801b664 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801b664:	2300      	movs	r3, #0
 801b666:	8083      	strh	r3, [r0, #4]
 801b668:	80c3      	strh	r3, [r0, #6]
 801b66a:	8003      	strh	r3, [r0, #0]
 801b66c:	8043      	strh	r3, [r0, #2]
 801b66e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801b672:	2bff      	cmp	r3, #255	; 0xff
 801b674:	bf01      	itttt	eq
 801b676:	890b      	ldrheq	r3, [r1, #8]
 801b678:	8083      	strheq	r3, [r0, #4]
 801b67a:	894b      	ldrheq	r3, [r1, #10]
 801b67c:	80c3      	strheq	r3, [r0, #6]
 801b67e:	4770      	bx	lr

0801b680 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801b680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b682:	4604      	mov	r4, r0
 801b684:	466b      	mov	r3, sp
 801b686:	6808      	ldr	r0, [r1, #0]
 801b688:	6849      	ldr	r1, [r1, #4]
 801b68a:	c303      	stmia	r3!, {r0, r1}
 801b68c:	6823      	ldr	r3, [r4, #0]
 801b68e:	4669      	mov	r1, sp
 801b690:	4620      	mov	r0, r4
 801b692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b694:	4798      	blx	r3
 801b696:	4b08      	ldr	r3, [pc, #32]	; (801b6b8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b69e:	b10a      	cbz	r2, 801b6a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801b6a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b6a2:	b900      	cbnz	r0, 801b6a6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801b6a4:	6898      	ldr	r0, [r3, #8]
 801b6a6:	6803      	ldr	r3, [r0, #0]
 801b6a8:	4669      	mov	r1, sp
 801b6aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801b6ac:	6a1d      	ldr	r5, [r3, #32]
 801b6ae:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b6b2:	47a8      	blx	r5
 801b6b4:	b003      	add	sp, #12
 801b6b6:	bd30      	pop	{r4, r5, pc}
 801b6b8:	24025d08 	.word	0x24025d08

0801b6bc <_ZNK8touchgfx3Box17invalidateContentEv>:
 801b6bc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801b6c0:	b12a      	cbz	r2, 801b6ce <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b6c2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801b6c6:	b112      	cbz	r2, 801b6ce <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b6c8:	6803      	ldr	r3, [r0, #0]
 801b6ca:	695b      	ldr	r3, [r3, #20]
 801b6cc:	4718      	bx	r3
 801b6ce:	4770      	bx	lr

0801b6d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801b6d0:	b570      	push	{r4, r5, r6, lr}
 801b6d2:	880b      	ldrh	r3, [r1, #0]
 801b6d4:	4605      	mov	r5, r0
 801b6d6:	4604      	mov	r4, r0
 801b6d8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b6da:	8813      	ldrh	r3, [r2, #0]
 801b6dc:	f825 3f30 	strh.w	r3, [r5, #48]!
 801b6e0:	4628      	mov	r0, r5
 801b6e2:	f003 ff6f 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b6e6:	4606      	mov	r6, r0
 801b6e8:	4628      	mov	r0, r5
 801b6ea:	f003 ff9f 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b6ee:	6823      	ldr	r3, [r4, #0]
 801b6f0:	4605      	mov	r5, r0
 801b6f2:	4631      	mov	r1, r6
 801b6f4:	4620      	mov	r0, r4
 801b6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6f8:	4798      	blx	r3
 801b6fa:	6823      	ldr	r3, [r4, #0]
 801b6fc:	4629      	mov	r1, r5
 801b6fe:	4620      	mov	r0, r4
 801b700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b706:	4718      	bx	r3

0801b708 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801b708:	b510      	push	{r4, lr}
 801b70a:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801b70e:	4604      	mov	r4, r0
 801b710:	2bff      	cmp	r3, #255	; 0xff
 801b712:	d006      	beq.n	801b722 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801b714:	2300      	movs	r3, #0
 801b716:	8003      	strh	r3, [r0, #0]
 801b718:	8043      	strh	r3, [r0, #2]
 801b71a:	8083      	strh	r3, [r0, #4]
 801b71c:	80c3      	strh	r3, [r0, #6]
 801b71e:	4620      	mov	r0, r4
 801b720:	bd10      	pop	{r4, pc}
 801b722:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801b726:	b11b      	cbz	r3, 801b730 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801b728:	3130      	adds	r1, #48	; 0x30
 801b72a:	f003 ffb3 	bl	801f694 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b72e:	e7f6      	b.n	801b71e <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801b730:	312e      	adds	r1, #46	; 0x2e
 801b732:	e7fa      	b.n	801b72a <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801b734 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801b734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b738:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801b73c:	b08a      	sub	sp, #40	; 0x28
 801b73e:	4604      	mov	r4, r0
 801b740:	4688      	mov	r8, r1
 801b742:	2b00      	cmp	r3, #0
 801b744:	d066      	beq.n	801b814 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801b746:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b748:	a805      	add	r0, sp, #20
 801b74a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b74e:	f003 ff39 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b752:	4607      	mov	r7, r0
 801b754:	a805      	add	r0, sp, #20
 801b756:	f003 ff69 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b75a:	f9b8 6000 	ldrsh.w	r6, [r8]
 801b75e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801b762:	2300      	movs	r3, #0
 801b764:	4432      	add	r2, r6
 801b766:	9306      	str	r3, [sp, #24]
 801b768:	b292      	uxth	r2, r2
 801b76a:	fa0f fc82 	sxth.w	ip, r2
 801b76e:	459c      	cmp	ip, r3
 801b770:	dd52      	ble.n	801b818 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b772:	42b7      	cmp	r7, r6
 801b774:	dd50      	ble.n	801b818 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b776:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801b77a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b77e:	442b      	add	r3, r5
 801b780:	b29b      	uxth	r3, r3
 801b782:	b219      	sxth	r1, r3
 801b784:	2900      	cmp	r1, #0
 801b786:	dd47      	ble.n	801b818 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b788:	42a8      	cmp	r0, r5
 801b78a:	dd45      	ble.n	801b818 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b78c:	4567      	cmp	r7, ip
 801b78e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801b792:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801b796:	bfb8      	it	lt
 801b798:	b2ba      	uxthlt	r2, r7
 801b79a:	4288      	cmp	r0, r1
 801b79c:	f8ad 6018 	strh.w	r6, [sp, #24]
 801b7a0:	bfb8      	it	lt
 801b7a2:	b283      	uxthlt	r3, r0
 801b7a4:	1b92      	subs	r2, r2, r6
 801b7a6:	f8ad 501a 	strh.w	r5, [sp, #26]
 801b7aa:	1b5b      	subs	r3, r3, r5
 801b7ac:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b7b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b7b4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b7b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	d026      	beq.n	801b80e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801b7c0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	dd22      	ble.n	801b80e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801b7c8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	dd1e      	ble.n	801b80e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	a908      	add	r1, sp, #32
 801b7d4:	4620      	mov	r0, r4
 801b7d6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801b7da:	6823      	ldr	r3, [r4, #0]
 801b7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7de:	4798      	blx	r3
 801b7e0:	4b0f      	ldr	r3, [pc, #60]	; (801b820 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b7e8:	b10a      	cbz	r2, 801b7ee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801b7ea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b7ec:	b900      	cbnz	r0, 801b7f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801b7ee:	6898      	ldr	r0, [r3, #8]
 801b7f0:	2501      	movs	r5, #1
 801b7f2:	6801      	ldr	r1, [r0, #0]
 801b7f4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b7f8:	9502      	str	r5, [sp, #8]
 801b7fa:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801b7fe:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b802:	9401      	str	r4, [sp, #4]
 801b804:	ac06      	add	r4, sp, #24
 801b806:	9400      	str	r4, [sp, #0]
 801b808:	688c      	ldr	r4, [r1, #8]
 801b80a:	a905      	add	r1, sp, #20
 801b80c:	47a0      	blx	r4
 801b80e:	b00a      	add	sp, #40	; 0x28
 801b810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b814:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b816:	e797      	b.n	801b748 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801b818:	2300      	movs	r3, #0
 801b81a:	9307      	str	r3, [sp, #28]
 801b81c:	e7ca      	b.n	801b7b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801b81e:	bf00      	nop
 801b820:	24025d08 	.word	0x24025d08

0801b824 <_ZNK8touchgfx6Button17invalidateContentEv>:
 801b824:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 801b828:	b12a      	cbz	r2, 801b836 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801b82a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801b82e:	b112      	cbz	r2, 801b836 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801b830:	6803      	ldr	r3, [r0, #0]
 801b832:	695b      	ldr	r3, [r3, #20]
 801b834:	4718      	bx	r3
 801b836:	4770      	bx	lr

0801b838 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_>:
 801b838:	4770      	bx	lr

0801b83a <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 801b83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b83e:	461c      	mov	r4, r3
 801b840:	4606      	mov	r6, r0
 801b842:	9f06      	ldr	r7, [sp, #24]
 801b844:	f7ff ff44 	bl	801b6d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 801b848:	8823      	ldrh	r3, [r4, #0]
 801b84a:	f04f 0802 	mov.w	r8, #2
 801b84e:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 801b852:	4638      	mov	r0, r7
 801b854:	86b3      	strh	r3, [r6, #52]	; 0x34
 801b856:	883b      	ldrh	r3, [r7, #0]
 801b858:	fb95 f5f8 	sdiv	r5, r5, r8
 801b85c:	86f3      	strh	r3, [r6, #54]	; 0x36
 801b85e:	b2ad      	uxth	r5, r5
 801b860:	f003 feb0 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b864:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 801b868:	fb90 f0f8 	sdiv	r0, r0, r8
 801b86c:	1a2d      	subs	r5, r5, r0
 801b86e:	4638      	mov	r0, r7
 801b870:	fb94 f4f8 	sdiv	r4, r4, r8
 801b874:	8735      	strh	r5, [r6, #56]	; 0x38
 801b876:	b2a4      	uxth	r4, r4
 801b878:	f003 fed8 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b87c:	fb90 f0f8 	sdiv	r0, r0, r8
 801b880:	1a24      	subs	r4, r4, r0
 801b882:	8774      	strh	r4, [r6, #58]	; 0x3a
 801b884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b888 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 801b888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b88c:	4604      	mov	r4, r0
 801b88e:	b08c      	sub	sp, #48	; 0x30
 801b890:	460d      	mov	r5, r1
 801b892:	f7ff ff4f 	bl	801b734 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801b896:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d05d      	beq.n	801b95a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd2>
 801b89e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b8a0:	a805      	add	r0, sp, #20
 801b8a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b8a6:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 801b8aa:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 801b8ae:	f003 fe89 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b8b2:	4606      	mov	r6, r0
 801b8b4:	a805      	add	r0, sp, #20
 801b8b6:	f003 feb9 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b8ba:	6869      	ldr	r1, [r5, #4]
 801b8bc:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b8c0:	ab08      	add	r3, sp, #32
 801b8c2:	6828      	ldr	r0, [r5, #0]
 801b8c4:	ad08      	add	r5, sp, #32
 801b8c6:	f8ad 8018 	strh.w	r8, [sp, #24]
 801b8ca:	f8ad 701a 	strh.w	r7, [sp, #26]
 801b8ce:	f8ad 601c 	strh.w	r6, [sp, #28]
 801b8d2:	c303      	stmia	r3!, {r0, r1}
 801b8d4:	a906      	add	r1, sp, #24
 801b8d6:	4628      	mov	r0, r5
 801b8d8:	f7fe fbb6 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801b8dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b8e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b8e4:	429a      	cmp	r2, r3
 801b8e6:	d035      	beq.n	801b954 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 801b8e8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	dd31      	ble.n	801b954 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 801b8f0:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	dd2d      	ble.n	801b954 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	a90a      	add	r1, sp, #40	; 0x28
 801b8fc:	4620      	mov	r0, r4
 801b8fe:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 801b902:	6823      	ldr	r3, [r4, #0]
 801b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b906:	4798      	blx	r3
 801b908:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b90c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801b90e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b912:	1a9b      	subs	r3, r3, r2
 801b914:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b918:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801b91a:	1ac9      	subs	r1, r1, r3
 801b91c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801b920:	490f      	ldr	r1, [pc, #60]	; (801b960 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd8>)
 801b922:	6809      	ldr	r1, [r1, #0]
 801b924:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 801b928:	b108      	cbz	r0, 801b92e <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
 801b92a:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 801b92c:	b900      	cbnz	r0, 801b930 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa8>
 801b92e:	6888      	ldr	r0, [r1, #8]
 801b930:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 801b934:	2601      	movs	r6, #1
 801b936:	440b      	add	r3, r1
 801b938:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801b93c:	440a      	add	r2, r1
 801b93e:	6801      	ldr	r1, [r0, #0]
 801b940:	9602      	str	r6, [sp, #8]
 801b942:	b21b      	sxth	r3, r3
 801b944:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801b948:	b212      	sxth	r2, r2
 801b94a:	e9cd 5400 	strd	r5, r4, [sp]
 801b94e:	688c      	ldr	r4, [r1, #8]
 801b950:	a905      	add	r1, sp, #20
 801b952:	47a0      	blx	r4
 801b954:	b00c      	add	sp, #48	; 0x30
 801b956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b95a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b95c:	e7a0      	b.n	801b8a0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x18>
 801b95e:	bf00      	nop
 801b960:	24025d08 	.word	0x24025d08

0801b964 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 801b964:	2101      	movs	r1, #1
 801b966:	2200      	movs	r2, #0
 801b968:	b510      	push	{r4, lr}
 801b96a:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801b96e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801b972:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b976:	4c0d      	ldr	r4, [pc, #52]	; (801b9ac <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 801b978:	8082      	strh	r2, [r0, #4]
 801b97a:	80c2      	strh	r2, [r0, #6]
 801b97c:	8102      	strh	r2, [r0, #8]
 801b97e:	8142      	strh	r2, [r0, #10]
 801b980:	8182      	strh	r2, [r0, #12]
 801b982:	81c2      	strh	r2, [r0, #14]
 801b984:	8202      	strh	r2, [r0, #16]
 801b986:	8242      	strh	r2, [r0, #18]
 801b988:	61c2      	str	r2, [r0, #28]
 801b98a:	8402      	strh	r2, [r0, #32]
 801b98c:	8442      	strh	r2, [r0, #34]	; 0x22
 801b98e:	6282      	str	r2, [r0, #40]	; 0x28
 801b990:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801b994:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b996:	8601      	strh	r1, [r0, #48]	; 0x30
 801b998:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801b99c:	6004      	str	r4, [r0, #0]
 801b99e:	8681      	strh	r1, [r0, #52]	; 0x34
 801b9a0:	86c1      	strh	r1, [r0, #54]	; 0x36
 801b9a2:	8702      	strh	r2, [r0, #56]	; 0x38
 801b9a4:	8742      	strh	r2, [r0, #58]	; 0x3a
 801b9a6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b9aa:	bd10      	pop	{r4, pc}
 801b9ac:	0802c508 	.word	0x0802c508

0801b9b0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801b9b0:	b570      	push	{r4, r5, r6, lr}
 801b9b2:	880b      	ldrh	r3, [r1, #0]
 801b9b4:	460d      	mov	r5, r1
 801b9b6:	4604      	mov	r4, r0
 801b9b8:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b9ba:	4608      	mov	r0, r1
 801b9bc:	f003 fe02 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b9c0:	4606      	mov	r6, r0
 801b9c2:	4628      	mov	r0, r5
 801b9c4:	f003 fe32 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b9c8:	6823      	ldr	r3, [r4, #0]
 801b9ca:	4605      	mov	r5, r0
 801b9cc:	4631      	mov	r1, r6
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b9d2:	4798      	blx	r3
 801b9d4:	6823      	ldr	r3, [r4, #0]
 801b9d6:	4629      	mov	r1, r5
 801b9d8:	4620      	mov	r0, r4
 801b9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b9dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b9e0:	4718      	bx	r3

0801b9e2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801b9e2:	b510      	push	{r4, lr}
 801b9e4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b9e8:	4604      	mov	r4, r0
 801b9ea:	2bff      	cmp	r3, #255	; 0xff
 801b9ec:	d006      	beq.n	801b9fc <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	8003      	strh	r3, [r0, #0]
 801b9f2:	8043      	strh	r3, [r0, #2]
 801b9f4:	8083      	strh	r3, [r0, #4]
 801b9f6:	80c3      	strh	r3, [r0, #6]
 801b9f8:	4620      	mov	r0, r4
 801b9fa:	bd10      	pop	{r4, pc}
 801b9fc:	3126      	adds	r1, #38	; 0x26
 801b9fe:	f003 fe49 	bl	801f694 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ba02:	e7f9      	b.n	801b9f8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801ba04 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801ba04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba08:	4604      	mov	r4, r0
 801ba0a:	b088      	sub	sp, #32
 801ba0c:	2500      	movs	r5, #0
 801ba0e:	460f      	mov	r7, r1
 801ba10:	f854 3b26 	ldr.w	r3, [r4], #38
 801ba14:	a904      	add	r1, sp, #16
 801ba16:	4606      	mov	r6, r0
 801ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ba1e:	4798      	blx	r3
 801ba20:	4620      	mov	r0, r4
 801ba22:	f003 fdcf 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ba26:	4680      	mov	r8, r0
 801ba28:	4620      	mov	r0, r4
 801ba2a:	f003 fdff 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ba2e:	9506      	str	r5, [sp, #24]
 801ba30:	ad06      	add	r5, sp, #24
 801ba32:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ba36:	4639      	mov	r1, r7
 801ba38:	f8ad 801c 	strh.w	r8, [sp, #28]
 801ba3c:	4628      	mov	r0, r5
 801ba3e:	f7fe fb03 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801ba42:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	dd19      	ble.n	801ba7e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801ba4a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	dd15      	ble.n	801ba7e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801ba52:	4b0c      	ldr	r3, [pc, #48]	; (801ba84 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ba5a:	b10a      	cbz	r2, 801ba60 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801ba5c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ba5e:	b900      	cbnz	r0, 801ba62 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801ba60:	6898      	ldr	r0, [r3, #8]
 801ba62:	2701      	movs	r7, #1
 801ba64:	6801      	ldr	r1, [r0, #0]
 801ba66:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ba6a:	9702      	str	r7, [sp, #8]
 801ba6c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801ba70:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ba74:	e9cd 5600 	strd	r5, r6, [sp]
 801ba78:	688d      	ldr	r5, [r1, #8]
 801ba7a:	4621      	mov	r1, r4
 801ba7c:	47a8      	blx	r5
 801ba7e:	b008      	add	sp, #32
 801ba80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba84:	24025d08 	.word	0x24025d08

0801ba88 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801ba88:	b510      	push	{r4, lr}
 801ba8a:	6803      	ldr	r3, [r0, #0]
 801ba8c:	460c      	mov	r4, r1
 801ba8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba90:	4798      	blx	r3
 801ba92:	1b03      	subs	r3, r0, r4
 801ba94:	4258      	negs	r0, r3
 801ba96:	4158      	adcs	r0, r3
 801ba98:	bd10      	pop	{r4, pc}
	...

0801ba9c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801ba9c:	4b01      	ldr	r3, [pc, #4]	; (801baa4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801ba9e:	6019      	str	r1, [r3, #0]
 801baa0:	4770      	bx	lr
 801baa2:	bf00      	nop
 801baa4:	24025d10 	.word	0x24025d10

0801baa8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baac:	4696      	mov	lr, r2
 801baae:	b097      	sub	sp, #92	; 0x5c
 801bab0:	4605      	mov	r5, r0
 801bab2:	4614      	mov	r4, r2
 801bab4:	460e      	mov	r6, r1
 801bab6:	461f      	mov	r7, r3
 801bab8:	f10d 0c1c 	add.w	ip, sp, #28
 801babc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801bac0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801bac4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801bac8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bacc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bad0:	f8de 3000 	ldr.w	r3, [lr]
 801bad4:	f104 0e14 	add.w	lr, r4, #20
 801bad8:	f8cc 3000 	str.w	r3, [ip]
 801badc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801bae0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bae4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bae8:	f8de 3000 	ldr.w	r3, [lr]
 801baec:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801baf0:	f8cc 3000 	str.w	r3, [ip]
 801baf4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801baf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bafc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb00:	f8de 3000 	ldr.w	r3, [lr]
 801bb04:	4631      	mov	r1, r6
 801bb06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bb08:	4628      	mov	r0, r5
 801bb0a:	f8cc 3000 	str.w	r3, [ip]
 801bb0e:	682b      	ldr	r3, [r5, #0]
 801bb10:	9201      	str	r2, [sp, #4]
 801bb12:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bb14:	f8cd 8008 	str.w	r8, [sp, #8]
 801bb18:	9200      	str	r2, [sp, #0]
 801bb1a:	aa07      	add	r2, sp, #28
 801bb1c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801bb20:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801bb24:	463b      	mov	r3, r7
 801bb26:	47d8      	blx	fp
 801bb28:	46a6      	mov	lr, r4
 801bb2a:	f10d 0c1c 	add.w	ip, sp, #28
 801bb2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb36:	f8de 3000 	ldr.w	r3, [lr]
 801bb3a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801bb3e:	343c      	adds	r4, #60	; 0x3c
 801bb40:	f8cc 3000 	str.w	r3, [ip]
 801bb44:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801bb48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb50:	f8de 3000 	ldr.w	r3, [lr]
 801bb54:	f8cc 3000 	str.w	r3, [ip]
 801bb58:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801bb5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bb5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb62:	6823      	ldr	r3, [r4, #0]
 801bb64:	4631      	mov	r1, r6
 801bb66:	4628      	mov	r0, r5
 801bb68:	f8cc 3000 	str.w	r3, [ip]
 801bb6c:	682b      	ldr	r3, [r5, #0]
 801bb6e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801bb72:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bb74:	f8cd 8008 	str.w	r8, [sp, #8]
 801bb78:	9201      	str	r2, [sp, #4]
 801bb7a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bb7c:	9200      	str	r2, [sp, #0]
 801bb7e:	aa07      	add	r2, sp, #28
 801bb80:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801bb82:	463b      	mov	r3, r7
 801bb84:	47a0      	blx	r4
 801bb86:	b017      	add	sp, #92	; 0x5c
 801bb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb8c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801bb8c:	2000      	movs	r0, #0
 801bb8e:	4770      	bx	lr

0801bb90 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb94:	b08d      	sub	sp, #52	; 0x34
 801bb96:	4688      	mov	r8, r1
 801bb98:	f8d3 c000 	ldr.w	ip, [r3]
 801bb9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801bb9e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801bba2:	680f      	ldr	r7, [r1, #0]
 801bba4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801bba8:	eba7 070c 	sub.w	r7, r7, ip
 801bbac:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801bbb0:	edd3 6a07 	vldr	s13, [r3, #28]
 801bbb4:	42bc      	cmp	r4, r7
 801bbb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bbb8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801bbbc:	bfa8      	it	ge
 801bbbe:	463c      	movge	r4, r7
 801bbc0:	f9b1 9000 	ldrsh.w	r9, [r1]
 801bbc4:	f9ba 1000 	ldrsh.w	r1, [sl]
 801bbc8:	ee07 4a90 	vmov	s15, r4
 801bbcc:	eb09 0e0c 	add.w	lr, r9, ip
 801bbd0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801bbd4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801bbd8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801bbdc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801bbe0:	4571      	cmp	r1, lr
 801bbe2:	ee25 4a04 	vmul.f32	s8, s10, s8
 801bbe6:	ee65 4a24 	vmul.f32	s9, s10, s9
 801bbea:	ee25 5a27 	vmul.f32	s10, s10, s15
 801bbee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801bbf2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801bbf6:	ee32 1a05 	vadd.f32	s2, s4, s10
 801bbfa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801bbfe:	ee36 0a84 	vadd.f32	s0, s13, s8
 801bc02:	ee61 1a87 	vmul.f32	s3, s3, s14
 801bc06:	ee22 2a07 	vmul.f32	s4, s4, s14
 801bc0a:	f340 808c 	ble.w	801bd26 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801bc0e:	eba1 060e 	sub.w	r6, r1, lr
 801bc12:	fb96 f5f4 	sdiv	r5, r6, r4
 801bc16:	ee07 5a10 	vmov	s14, r5
 801bc1a:	2d00      	cmp	r5, #0
 801bc1c:	fb04 6615 	mls	r6, r4, r5, r6
 801bc20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bc24:	eea7 0a04 	vfma.f32	s0, s14, s8
 801bc28:	eee7 0a24 	vfma.f32	s1, s14, s9
 801bc2c:	eea7 1a05 	vfma.f32	s2, s14, s10
 801bc30:	dd12      	ble.n	801bc58 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801bc32:	ee70 6a44 	vsub.f32	s13, s0, s8
 801bc36:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801bc3a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801bc3e:	eef5 6a40 	vcmp.f32	s13, #0.0
 801bc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc46:	bf14      	ite	ne
 801bc48:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801bc4c:	eeb0 7a67 	vmoveq.f32	s14, s15
 801bc50:	ee61 1a87 	vmul.f32	s3, s3, s14
 801bc54:	ee22 2a07 	vmul.f32	s4, s4, s14
 801bc58:	fb05 f204 	mul.w	r2, r5, r4
 801bc5c:	1abf      	subs	r7, r7, r2
 801bc5e:	4494      	add	ip, r2
 801bc60:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801bc64:	4411      	add	r1, r2
 801bc66:	eb09 020c 	add.w	r2, r9, ip
 801bc6a:	b209      	sxth	r1, r1
 801bc6c:	443a      	add	r2, r7
 801bc6e:	428a      	cmp	r2, r1
 801bc70:	bfc4      	itt	gt
 801bc72:	eba1 0209 	subgt.w	r2, r1, r9
 801bc76:	eba2 070c 	subgt.w	r7, r2, ip
 801bc7a:	2f00      	cmp	r7, #0
 801bc7c:	dd50      	ble.n	801bd20 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801bc7e:	fb97 f1f4 	sdiv	r1, r7, r4
 801bc82:	fb04 7211 	mls	r2, r4, r1, r7
 801bc86:	b90a      	cbnz	r2, 801bc8c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801bc88:	3901      	subs	r1, #1
 801bc8a:	4622      	mov	r2, r4
 801bc8c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801bc90:	6840      	ldr	r0, [r0, #4]
 801bc92:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801bc96:	44b6      	add	lr, r6
 801bc98:	f8d0 a000 	ldr.w	sl, [r0]
 801bc9c:	2900      	cmp	r1, #0
 801bc9e:	bfcc      	ite	gt
 801bca0:	46a1      	movgt	r9, r4
 801bca2:	4691      	movle	r9, r2
 801bca4:	900b      	str	r0, [sp, #44]	; 0x2c
 801bca6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801bca8:	fb04 e505 	mla	r5, r4, r5, lr
 801bcac:	eef0 6a42 	vmov.f32	s13, s4
 801bcb0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801bcb4:	9008      	str	r0, [sp, #32]
 801bcb6:	eeb0 7a61 	vmov.f32	s14, s3
 801bcba:	9818      	ldr	r0, [sp, #96]	; 0x60
 801bcbc:	695b      	ldr	r3, [r3, #20]
 801bcbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bcc2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801bcc6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801bcca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bccc:	445b      	add	r3, fp
 801bcce:	9307      	str	r3, [sp, #28]
 801bcd0:	ee16 3a90 	vmov	r3, s13
 801bcd4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801bcd8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801bcdc:	ee21 3a23 	vmul.f32	s6, s2, s7
 801bce0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801bce4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801bce8:	ee17 7a90 	vmov	r7, s15
 801bcec:	ee73 7a42 	vsub.f32	s15, s6, s4
 801bcf0:	fb97 f7f4 	sdiv	r7, r7, r4
 801bcf4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801bcf8:	ee17 ca90 	vmov	ip, s15
 801bcfc:	fb9c fcf4 	sdiv	ip, ip, r4
 801bd00:	fb0c 3306 	mla	r3, ip, r6, r3
 801bd04:	9302      	str	r3, [sp, #8]
 801bd06:	ee17 3a10 	vmov	r3, s14
 801bd0a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801bd0e:	fb07 3706 	mla	r7, r7, r6, r3
 801bd12:	eba9 0306 	sub.w	r3, r9, r6
 801bd16:	e9cd 4700 	strd	r4, r7, [sp]
 801bd1a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801bd1e:	47a0      	blx	r4
 801bd20:	b00d      	add	sp, #52	; 0x34
 801bd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd26:	2500      	movs	r5, #0
 801bd28:	462e      	mov	r6, r5
 801bd2a:	e799      	b.n	801bc60 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801bd2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801bd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd30:	b0db      	sub	sp, #364	; 0x16c
 801bd32:	461d      	mov	r5, r3
 801bd34:	4614      	mov	r4, r2
 801bd36:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801bd3a:	910f      	str	r1, [sp, #60]	; 0x3c
 801bd3c:	4629      	mov	r1, r5
 801bd3e:	930a      	str	r3, [sp, #40]	; 0x28
 801bd40:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801bd44:	9009      	str	r0, [sp, #36]	; 0x24
 801bd46:	930b      	str	r3, [sp, #44]	; 0x2c
 801bd48:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801bd4c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801bd50:	9310      	str	r3, [sp, #64]	; 0x40
 801bd52:	6803      	ldr	r3, [r0, #0]
 801bd54:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801bd56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bd5a:	47b8      	blx	r7
 801bd5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd5e:	6058      	str	r0, [r3, #4]
 801bd60:	2800      	cmp	r0, #0
 801bd62:	f000 83a1 	beq.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bd66:	682b      	ldr	r3, [r5, #0]
 801bd68:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801bd6c:	ed94 7a02 	vldr	s14, [r4, #8]
 801bd70:	9314      	str	r3, [sp, #80]	; 0x50
 801bd72:	686b      	ldr	r3, [r5, #4]
 801bd74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bd78:	9315      	str	r3, [sp, #84]	; 0x54
 801bd7a:	4bc1      	ldr	r3, [pc, #772]	; (801c080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801bd7c:	7819      	ldrb	r1, [r3, #0]
 801bd7e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801bd82:	2900      	cmp	r1, #0
 801bd84:	bf16      	itet	ne
 801bd86:	4619      	movne	r1, r3
 801bd88:	4611      	moveq	r1, r2
 801bd8a:	4613      	movne	r3, r2
 801bd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd90:	9116      	str	r1, [sp, #88]	; 0x58
 801bd92:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801bd96:	f240 8387 	bls.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bd9a:	ed94 7a07 	vldr	s14, [r4, #28]
 801bd9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bda6:	f240 837f 	bls.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdaa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801bdae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdb6:	f240 8377 	bls.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdba:	6822      	ldr	r2, [r4, #0]
 801bdbc:	4bb1      	ldr	r3, [pc, #708]	; (801c084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801bdbe:	429a      	cmp	r2, r3
 801bdc0:	f2c0 8372 	blt.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdc4:	49b0      	ldr	r1, [pc, #704]	; (801c088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801bdc6:	6963      	ldr	r3, [r4, #20]
 801bdc8:	428a      	cmp	r2, r1
 801bdca:	f300 836d 	bgt.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdce:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801bdd2:	48ae      	ldr	r0, [pc, #696]	; (801c08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801bdd4:	33ff      	adds	r3, #255	; 0xff
 801bdd6:	4283      	cmp	r3, r0
 801bdd8:	f200 8366 	bhi.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bddc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bdde:	4dac      	ldr	r5, [pc, #688]	; (801c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801bde0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801bde4:	33ff      	adds	r3, #255	; 0xff
 801bde6:	42ab      	cmp	r3, r5
 801bde8:	f200 835e 	bhi.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdec:	6862      	ldr	r2, [r4, #4]
 801bdee:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801bdf2:	33ff      	adds	r3, #255	; 0xff
 801bdf4:	4283      	cmp	r3, r0
 801bdf6:	f200 8357 	bhi.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdfa:	69a1      	ldr	r1, [r4, #24]
 801bdfc:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801be00:	33ff      	adds	r3, #255	; 0xff
 801be02:	4283      	cmp	r3, r0
 801be04:	f200 8350 	bhi.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801be08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801be0a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801be0e:	30ff      	adds	r0, #255	; 0xff
 801be10:	42a8      	cmp	r0, r5
 801be12:	f200 8349 	bhi.w	801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801be16:	428a      	cmp	r2, r1
 801be18:	f280 8110 	bge.w	801c03c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801be1c:	429a      	cmp	r2, r3
 801be1e:	f300 8119 	bgt.w	801c054 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801be22:	4299      	cmp	r1, r3
 801be24:	f280 811d 	bge.w	801c062 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801be28:	2502      	movs	r5, #2
 801be2a:	2701      	movs	r7, #1
 801be2c:	46a9      	mov	r9, r5
 801be2e:	46b8      	mov	r8, r7
 801be30:	f04f 0a00 	mov.w	sl, #0
 801be34:	4621      	mov	r1, r4
 801be36:	a849      	add	r0, sp, #292	; 0x124
 801be38:	f003 f84c 	bl	801eed4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801be3c:	4622      	mov	r2, r4
 801be3e:	4653      	mov	r3, sl
 801be40:	a949      	add	r1, sp, #292	; 0x124
 801be42:	f8cd 9000 	str.w	r9, [sp]
 801be46:	a819      	add	r0, sp, #100	; 0x64
 801be48:	f003 f974 	bl	801f134 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801be4c:	4622      	mov	r2, r4
 801be4e:	4653      	mov	r3, sl
 801be50:	a949      	add	r1, sp, #292	; 0x124
 801be52:	f8cd 8000 	str.w	r8, [sp]
 801be56:	a829      	add	r0, sp, #164	; 0xa4
 801be58:	f003 f96c 	bl	801f134 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801be5c:	4643      	mov	r3, r8
 801be5e:	4622      	mov	r2, r4
 801be60:	a949      	add	r1, sp, #292	; 0x124
 801be62:	f8cd 9000 	str.w	r9, [sp]
 801be66:	a839      	add	r0, sp, #228	; 0xe4
 801be68:	f003 f964 	bl	801f134 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801be6c:	42af      	cmp	r7, r5
 801be6e:	af12      	add	r7, sp, #72	; 0x48
 801be70:	bfb7      	itett	lt
 801be72:	2300      	movlt	r3, #0
 801be74:	2301      	movge	r3, #1
 801be76:	ad29      	addlt	r5, sp, #164	; 0xa4
 801be78:	ac19      	addlt	r4, sp, #100	; 0x64
 801be7a:	bfb1      	iteee	lt
 801be7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801be7e:	ad19      	addge	r5, sp, #100	; 0x64
 801be80:	930e      	strge	r3, [sp, #56]	; 0x38
 801be82:	ac29      	addge	r4, sp, #164	; 0xa4
 801be84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be86:	e893 0003 	ldmia.w	r3, {r0, r1}
 801be8a:	e887 0003 	stmia.w	r7, {r0, r1}
 801be8e:	b928      	cbnz	r0, 801be9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801be90:	4b80      	ldr	r3, [pc, #512]	; (801c094 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801be92:	6818      	ldr	r0, [r3, #0]
 801be94:	6803      	ldr	r3, [r0, #0]
 801be96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be98:	4798      	blx	r3
 801be9a:	6038      	str	r0, [r7, #0]
 801be9c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801be9e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801bea2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bea6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801bea8:	930c      	str	r3, [sp, #48]	; 0x30
 801beaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801beac:	6963      	ldr	r3, [r4, #20]
 801beae:	440b      	add	r3, r1
 801beb0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801beb4:	4408      	add	r0, r1
 801beb6:	b200      	sxth	r0, r0
 801beb8:	4283      	cmp	r3, r0
 801beba:	900d      	str	r0, [sp, #52]	; 0x34
 801bebc:	f280 80dd 	bge.w	801c07a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801bec0:	428b      	cmp	r3, r1
 801bec2:	da08      	bge.n	801bed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bec4:	2a00      	cmp	r2, #0
 801bec6:	dd06      	ble.n	801bed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bec8:	1acb      	subs	r3, r1, r3
 801beca:	429a      	cmp	r2, r3
 801becc:	f2c0 80e4 	blt.w	801c098 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	f300 80e2 	bgt.w	801c09a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801bed6:	6967      	ldr	r7, [r4, #20]
 801bed8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801bedc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bede:	443b      	add	r3, r7
 801bee0:	461f      	mov	r7, r3
 801bee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bee4:	1bdf      	subs	r7, r3, r7
 801bee6:	4297      	cmp	r7, r2
 801bee8:	bfa8      	it	ge
 801beea:	4617      	movge	r7, r2
 801beec:	2f00      	cmp	r7, #0
 801beee:	f340 8166 	ble.w	801c1be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801bef2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801bef4:	6829      	ldr	r1, [r5, #0]
 801bef6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801befa:	f9bb 3000 	ldrsh.w	r3, [fp]
 801befe:	4411      	add	r1, r2
 801bf00:	6820      	ldr	r0, [r4, #0]
 801bf02:	4299      	cmp	r1, r3
 801bf04:	dd1a      	ble.n	801bf3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801bf06:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801bf0a:	4402      	add	r2, r0
 801bf0c:	440b      	add	r3, r1
 801bf0e:	b21b      	sxth	r3, r3
 801bf10:	429a      	cmp	r2, r3
 801bf12:	dc13      	bgt.n	801bf3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801bf14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bf16:	a912      	add	r1, sp, #72	; 0x48
 801bf18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	9206      	str	r2, [sp, #24]
 801bf20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bf22:	9500      	str	r5, [sp, #0]
 801bf24:	9205      	str	r2, [sp, #20]
 801bf26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bf28:	e9cd b203 	strd	fp, r2, [sp, #12]
 801bf2c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bf2e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801bf32:	aa49      	add	r2, sp, #292	; 0x124
 801bf34:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801bf38:	4623      	mov	r3, r4
 801bf3a:	47c8      	blx	r9
 801bf3c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801bf40:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801bf44:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801bf48:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bf4c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801bf50:	68a1      	ldr	r1, [r4, #8]
 801bf52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bf56:	ed94 6a08 	vldr	s12, [r4, #32]
 801bf5a:	edd4 6a07 	vldr	s13, [r4, #28]
 801bf5e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801bf62:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bf66:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801bf6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bf6e:	edc4 6a07 	vstr	s13, [r4, #28]
 801bf72:	441a      	add	r2, r3
 801bf74:	6963      	ldr	r3, [r4, #20]
 801bf76:	3301      	adds	r3, #1
 801bf78:	6022      	str	r2, [r4, #0]
 801bf7a:	6163      	str	r3, [r4, #20]
 801bf7c:	69a3      	ldr	r3, [r4, #24]
 801bf7e:	3b01      	subs	r3, #1
 801bf80:	61a3      	str	r3, [r4, #24]
 801bf82:	6923      	ldr	r3, [r4, #16]
 801bf84:	440b      	add	r3, r1
 801bf86:	68e1      	ldr	r1, [r4, #12]
 801bf88:	428b      	cmp	r3, r1
 801bf8a:	6123      	str	r3, [r4, #16]
 801bf8c:	db15      	blt.n	801bfba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801bf8e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801bf92:	3201      	adds	r2, #1
 801bf94:	1a5b      	subs	r3, r3, r1
 801bf96:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bf9a:	6022      	str	r2, [r4, #0]
 801bf9c:	6123      	str	r3, [r4, #16]
 801bf9e:	edc4 6a07 	vstr	s13, [r4, #28]
 801bfa2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801bfa6:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bfaa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801bfae:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801bfb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bfb6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801bfba:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801bfbe:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801bfc2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801bfc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bfca:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801bfce:	68a9      	ldr	r1, [r5, #8]
 801bfd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bfd4:	ed95 6a08 	vldr	s12, [r5, #32]
 801bfd8:	edd5 6a07 	vldr	s13, [r5, #28]
 801bfdc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801bfe0:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bfe4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801bfe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bfec:	edc5 6a07 	vstr	s13, [r5, #28]
 801bff0:	441a      	add	r2, r3
 801bff2:	696b      	ldr	r3, [r5, #20]
 801bff4:	3301      	adds	r3, #1
 801bff6:	602a      	str	r2, [r5, #0]
 801bff8:	616b      	str	r3, [r5, #20]
 801bffa:	69ab      	ldr	r3, [r5, #24]
 801bffc:	3b01      	subs	r3, #1
 801bffe:	61ab      	str	r3, [r5, #24]
 801c000:	692b      	ldr	r3, [r5, #16]
 801c002:	440b      	add	r3, r1
 801c004:	68e9      	ldr	r1, [r5, #12]
 801c006:	428b      	cmp	r3, r1
 801c008:	612b      	str	r3, [r5, #16]
 801c00a:	db15      	blt.n	801c038 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801c00c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c010:	3201      	adds	r2, #1
 801c012:	1a5b      	subs	r3, r3, r1
 801c014:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c018:	602a      	str	r2, [r5, #0]
 801c01a:	612b      	str	r3, [r5, #16]
 801c01c:	edc5 6a07 	vstr	s13, [r5, #28]
 801c020:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801c024:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c028:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c02c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801c030:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c034:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c038:	3f01      	subs	r7, #1
 801c03a:	e757      	b.n	801beec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801c03c:	4299      	cmp	r1, r3
 801c03e:	dc13      	bgt.n	801c068 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801c040:	429a      	cmp	r2, r3
 801c042:	da14      	bge.n	801c06e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801c044:	2502      	movs	r5, #2
 801c046:	2703      	movs	r7, #3
 801c048:	f04f 0800 	mov.w	r8, #0
 801c04c:	46a9      	mov	r9, r5
 801c04e:	f04f 0a01 	mov.w	sl, #1
 801c052:	e6ef      	b.n	801be34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801c054:	2501      	movs	r5, #1
 801c056:	2700      	movs	r7, #0
 801c058:	46a9      	mov	r9, r5
 801c05a:	46b8      	mov	r8, r7
 801c05c:	f04f 0a02 	mov.w	sl, #2
 801c060:	e6e8      	b.n	801be34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801c062:	2501      	movs	r5, #1
 801c064:	2702      	movs	r7, #2
 801c066:	e6e1      	b.n	801be2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801c068:	2500      	movs	r5, #0
 801c06a:	2701      	movs	r7, #1
 801c06c:	e7f4      	b.n	801c058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801c06e:	2702      	movs	r7, #2
 801c070:	2503      	movs	r5, #3
 801c072:	f04f 0900 	mov.w	r9, #0
 801c076:	46b8      	mov	r8, r7
 801c078:	e7e9      	b.n	801c04e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801c07a:	4613      	mov	r3, r2
 801c07c:	e728      	b.n	801bed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801c07e:	bf00      	nop
 801c080:	24025d00 	.word	0x24025d00
 801c084:	fffd8f01 	.word	0xfffd8f01
 801c088:	00027100 	.word	0x00027100
 801c08c:	0004e1ff 	.word	0x0004e1ff
 801c090:	0004e1fe 	.word	0x0004e1fe
 801c094:	24025d08 	.word	0x24025d08
 801c098:	4613      	mov	r3, r2
 801c09a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801c09c:	469e      	mov	lr, r3
 801c09e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801c0a0:	469c      	mov	ip, r3
 801c0a2:	9111      	str	r1, [sp, #68]	; 0x44
 801c0a4:	f04f 0900 	mov.w	r9, #0
 801c0a8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801c0ac:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801c0b0:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801c0b4:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801c0b8:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801c0bc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801c0c0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801c0c4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801c0c8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801c0cc:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801c0d0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801c0d4:	f1bc 0f00 	cmp.w	ip, #0
 801c0d8:	d147      	bne.n	801c16a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801c0da:	eb03 0c07 	add.w	ip, r3, r7
 801c0de:	1ad7      	subs	r7, r2, r3
 801c0e0:	f1b9 0f00 	cmp.w	r9, #0
 801c0e4:	d009      	beq.n	801c0fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801c0e6:	9029      	str	r0, [sp, #164]	; 0xa4
 801c0e8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801c0ec:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801c0f0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801c0f4:	912d      	str	r1, [sp, #180]	; 0xb4
 801c0f6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801c0fa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801c0fc:	f04f 0800 	mov.w	r8, #0
 801c100:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801c104:	9111      	str	r1, [sp, #68]	; 0x44
 801c106:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801c10a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801c10e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801c112:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801c116:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801c11a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801c11e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801c122:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801c126:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801c12a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801c12e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801c132:	f1be 0f00 	cmp.w	lr, #0
 801c136:	d031      	beq.n	801c19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801c138:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c13a:	4450      	add	r0, sl
 801c13c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801c140:	4431      	add	r1, r6
 801c142:	ee37 7a04 	vadd.f32	s14, s14, s8
 801c146:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c14a:	4549      	cmp	r1, r9
 801c14c:	db08      	blt.n	801c160 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801c14e:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c152:	3001      	adds	r0, #1
 801c154:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801c158:	eba1 0109 	sub.w	r1, r1, r9
 801c15c:	ee37 7a06 	vadd.f32	s14, s14, s12
 801c160:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c164:	f04f 0801 	mov.w	r8, #1
 801c168:	e7e3      	b.n	801c132 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801c16a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c16c:	4450      	add	r0, sl
 801c16e:	ee37 7a24 	vadd.f32	s14, s14, s9
 801c172:	4431      	add	r1, r6
 801c174:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c178:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801c17c:	4541      	cmp	r1, r8
 801c17e:	db08      	blt.n	801c192 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801c180:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c184:	3001      	adds	r0, #1
 801c186:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c18a:	eba1 0108 	sub.w	r1, r1, r8
 801c18e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c192:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c196:	f04f 0901 	mov.w	r9, #1
 801c19a:	e79b      	b.n	801c0d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801c19c:	449c      	add	ip, r3
 801c19e:	1aff      	subs	r7, r7, r3
 801c1a0:	f1b8 0f00 	cmp.w	r8, #0
 801c1a4:	d009      	beq.n	801c1ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801c1a6:	9019      	str	r0, [sp, #100]	; 0x64
 801c1a8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801c1ac:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801c1b0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801c1b4:	911d      	str	r1, [sp, #116]	; 0x74
 801c1b6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801c1ba:	1ad2      	subs	r2, r2, r3
 801c1bc:	e68b      	b.n	801bed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801c1be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1c0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	f000 80d1 	beq.w	801c36a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801c1c8:	ad19      	add	r5, sp, #100	; 0x64
 801c1ca:	ac39      	add	r4, sp, #228	; 0xe4
 801c1cc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c1ce:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801c1d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c1d6:	930c      	str	r3, [sp, #48]	; 0x30
 801c1d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c1da:	6963      	ldr	r3, [r4, #20]
 801c1dc:	440b      	add	r3, r1
 801c1de:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801c1e2:	4408      	add	r0, r1
 801c1e4:	b200      	sxth	r0, r0
 801c1e6:	4283      	cmp	r3, r0
 801c1e8:	900d      	str	r0, [sp, #52]	; 0x34
 801c1ea:	f280 80c1 	bge.w	801c370 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801c1ee:	428b      	cmp	r3, r1
 801c1f0:	da08      	bge.n	801c204 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c1f2:	2a00      	cmp	r2, #0
 801c1f4:	dd06      	ble.n	801c204 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c1f6:	1acb      	subs	r3, r1, r3
 801c1f8:	429a      	cmp	r2, r3
 801c1fa:	f2c0 80bb 	blt.w	801c374 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	f300 80b9 	bgt.w	801c376 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801c204:	6967      	ldr	r7, [r4, #20]
 801c206:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801c20a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c20c:	443b      	add	r3, r7
 801c20e:	461f      	mov	r7, r3
 801c210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c212:	1bdf      	subs	r7, r3, r7
 801c214:	4297      	cmp	r7, r2
 801c216:	bfa8      	it	ge
 801c218:	4617      	movge	r7, r2
 801c21a:	2f00      	cmp	r7, #0
 801c21c:	f340 813c 	ble.w	801c498 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801c220:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c222:	6829      	ldr	r1, [r5, #0]
 801c224:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c228:	f9bb 3000 	ldrsh.w	r3, [fp]
 801c22c:	4411      	add	r1, r2
 801c22e:	6820      	ldr	r0, [r4, #0]
 801c230:	4299      	cmp	r1, r3
 801c232:	dd1a      	ble.n	801c26a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801c234:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801c238:	4402      	add	r2, r0
 801c23a:	440b      	add	r3, r1
 801c23c:	b21b      	sxth	r3, r3
 801c23e:	429a      	cmp	r2, r3
 801c240:	dc13      	bgt.n	801c26a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801c242:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c244:	a912      	add	r1, sp, #72	; 0x48
 801c246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c248:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	9206      	str	r2, [sp, #24]
 801c24e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c250:	9500      	str	r5, [sp, #0]
 801c252:	9205      	str	r2, [sp, #20]
 801c254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c256:	e9cd b203 	strd	fp, r2, [sp, #12]
 801c25a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801c25c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801c260:	aa49      	add	r2, sp, #292	; 0x124
 801c262:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801c266:	4623      	mov	r3, r4
 801c268:	47c8      	blx	r9
 801c26a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801c26e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801c272:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801c276:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c27a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801c27e:	68a1      	ldr	r1, [r4, #8]
 801c280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c284:	ed94 6a08 	vldr	s12, [r4, #32]
 801c288:	edd4 6a07 	vldr	s13, [r4, #28]
 801c28c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801c290:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c294:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801c298:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c29c:	edc4 6a07 	vstr	s13, [r4, #28]
 801c2a0:	441a      	add	r2, r3
 801c2a2:	6963      	ldr	r3, [r4, #20]
 801c2a4:	3301      	adds	r3, #1
 801c2a6:	6022      	str	r2, [r4, #0]
 801c2a8:	6163      	str	r3, [r4, #20]
 801c2aa:	69a3      	ldr	r3, [r4, #24]
 801c2ac:	3b01      	subs	r3, #1
 801c2ae:	61a3      	str	r3, [r4, #24]
 801c2b0:	6923      	ldr	r3, [r4, #16]
 801c2b2:	440b      	add	r3, r1
 801c2b4:	68e1      	ldr	r1, [r4, #12]
 801c2b6:	428b      	cmp	r3, r1
 801c2b8:	6123      	str	r3, [r4, #16]
 801c2ba:	db15      	blt.n	801c2e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801c2bc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801c2c0:	3201      	adds	r2, #1
 801c2c2:	1a5b      	subs	r3, r3, r1
 801c2c4:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c2c8:	6022      	str	r2, [r4, #0]
 801c2ca:	6123      	str	r3, [r4, #16]
 801c2cc:	edc4 6a07 	vstr	s13, [r4, #28]
 801c2d0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801c2d4:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c2d8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801c2dc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801c2e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c2e4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801c2e8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801c2ec:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801c2f0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801c2f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c2f8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801c2fc:	68a9      	ldr	r1, [r5, #8]
 801c2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c302:	ed95 6a08 	vldr	s12, [r5, #32]
 801c306:	edd5 6a07 	vldr	s13, [r5, #28]
 801c30a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c30e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c312:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c316:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c31a:	edc5 6a07 	vstr	s13, [r5, #28]
 801c31e:	441a      	add	r2, r3
 801c320:	696b      	ldr	r3, [r5, #20]
 801c322:	3301      	adds	r3, #1
 801c324:	602a      	str	r2, [r5, #0]
 801c326:	616b      	str	r3, [r5, #20]
 801c328:	69ab      	ldr	r3, [r5, #24]
 801c32a:	3b01      	subs	r3, #1
 801c32c:	61ab      	str	r3, [r5, #24]
 801c32e:	692b      	ldr	r3, [r5, #16]
 801c330:	440b      	add	r3, r1
 801c332:	68e9      	ldr	r1, [r5, #12]
 801c334:	428b      	cmp	r3, r1
 801c336:	612b      	str	r3, [r5, #16]
 801c338:	db15      	blt.n	801c366 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801c33a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c33e:	3201      	adds	r2, #1
 801c340:	1a5b      	subs	r3, r3, r1
 801c342:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c346:	602a      	str	r2, [r5, #0]
 801c348:	612b      	str	r3, [r5, #16]
 801c34a:	edc5 6a07 	vstr	s13, [r5, #28]
 801c34e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801c352:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c356:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c35a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801c35e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c362:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c366:	3f01      	subs	r7, #1
 801c368:	e757      	b.n	801c21a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801c36a:	ad39      	add	r5, sp, #228	; 0xe4
 801c36c:	ac19      	add	r4, sp, #100	; 0x64
 801c36e:	e72d      	b.n	801c1cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801c370:	4613      	mov	r3, r2
 801c372:	e744      	b.n	801c1fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801c374:	4613      	mov	r3, r2
 801c376:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801c378:	469e      	mov	lr, r3
 801c37a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801c37e:	461f      	mov	r7, r3
 801c380:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801c384:	f04f 0900 	mov.w	r9, #0
 801c388:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801c38c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801c390:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801c394:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801c398:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801c39c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801c39e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801c3a2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801c3a6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801c3aa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801c3ae:	960e      	str	r6, [sp, #56]	; 0x38
 801c3b0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801c3b4:	2f00      	cmp	r7, #0
 801c3b6:	d146      	bne.n	801c446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801c3b8:	449c      	add	ip, r3
 801c3ba:	1ad7      	subs	r7, r2, r3
 801c3bc:	f1b9 0f00 	cmp.w	r9, #0
 801c3c0:	d009      	beq.n	801c3d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801c3c2:	9039      	str	r0, [sp, #228]	; 0xe4
 801c3c4:	913d      	str	r1, [sp, #244]	; 0xf4
 801c3c6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801c3ca:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801c3ce:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801c3d2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801c3d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801c3d8:	f04f 0800 	mov.w	r8, #0
 801c3dc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801c3e0:	910e      	str	r1, [sp, #56]	; 0x38
 801c3e2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801c3e6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801c3ea:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801c3ee:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801c3f2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801c3f6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801c3fa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801c3fe:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801c402:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801c406:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801c40a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801c40e:	f1be 0f00 	cmp.w	lr, #0
 801c412:	d030      	beq.n	801c476 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801c414:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801c416:	4450      	add	r0, sl
 801c418:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801c41c:	4431      	add	r1, r6
 801c41e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801c422:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c426:	4549      	cmp	r1, r9
 801c428:	db08      	blt.n	801c43c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801c42a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c42e:	3001      	adds	r0, #1
 801c430:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801c434:	eba1 0109 	sub.w	r1, r1, r9
 801c438:	ee37 7a06 	vadd.f32	s14, s14, s12
 801c43c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c440:	f04f 0801 	mov.w	r8, #1
 801c444:	e7e3      	b.n	801c40e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801c446:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801c448:	4450      	add	r0, sl
 801c44a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801c44e:	4431      	add	r1, r6
 801c450:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c454:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801c458:	4541      	cmp	r1, r8
 801c45a:	db08      	blt.n	801c46e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801c45c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c460:	3001      	adds	r0, #1
 801c462:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c466:	eba1 0108 	sub.w	r1, r1, r8
 801c46a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c46e:	3f01      	subs	r7, #1
 801c470:	f04f 0901 	mov.w	r9, #1
 801c474:	e79e      	b.n	801c3b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801c476:	449c      	add	ip, r3
 801c478:	1aff      	subs	r7, r7, r3
 801c47a:	f1b8 0f00 	cmp.w	r8, #0
 801c47e:	d009      	beq.n	801c494 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801c480:	9019      	str	r0, [sp, #100]	; 0x64
 801c482:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801c486:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801c48a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801c48e:	911d      	str	r1, [sp, #116]	; 0x74
 801c490:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801c494:	1ad2      	subs	r2, r2, r3
 801c496:	e6b5      	b.n	801c204 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	b923      	cbnz	r3, 801c4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c49e:	4b04      	ldr	r3, [pc, #16]	; (801c4b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801c4a0:	6818      	ldr	r0, [r3, #0]
 801c4a2:	6803      	ldr	r3, [r0, #0]
 801c4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4a6:	4798      	blx	r3
 801c4a8:	b05b      	add	sp, #364	; 0x16c
 801c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4ae:	bf00      	nop
 801c4b0:	24025d08 	.word	0x24025d08

0801c4b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801c4b4:	2b03      	cmp	r3, #3
 801c4b6:	d818      	bhi.n	801c4ea <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801c4b8:	e8df f003 	tbb	[pc, r3]
 801c4bc:	130d0602 	.word	0x130d0602
 801c4c0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c4c4:	1850      	adds	r0, r2, r1
 801c4c6:	4770      	bx	lr
 801c4c8:	8803      	ldrh	r3, [r0, #0]
 801c4ca:	8880      	ldrh	r0, [r0, #4]
 801c4cc:	4418      	add	r0, r3
 801c4ce:	b200      	sxth	r0, r0
 801c4d0:	1a80      	subs	r0, r0, r2
 801c4d2:	3801      	subs	r0, #1
 801c4d4:	4770      	bx	lr
 801c4d6:	8803      	ldrh	r3, [r0, #0]
 801c4d8:	8880      	ldrh	r0, [r0, #4]
 801c4da:	4418      	add	r0, r3
 801c4dc:	b200      	sxth	r0, r0
 801c4de:	1a40      	subs	r0, r0, r1
 801c4e0:	e7f7      	b.n	801c4d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801c4e2:	f9b0 0000 	ldrsh.w	r0, [r0]
 801c4e6:	4410      	add	r0, r2
 801c4e8:	4770      	bx	lr
 801c4ea:	2000      	movs	r0, #0
 801c4ec:	4770      	bx	lr

0801c4ee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801c4ee:	2b03      	cmp	r3, #3
 801c4f0:	d817      	bhi.n	801c522 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801c4f2:	e8df f003 	tbb	[pc, r3]
 801c4f6:	0602      	.short	0x0602
 801c4f8:	1009      	.short	0x1009
 801c4fa:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801c4fe:	1850      	adds	r0, r2, r1
 801c500:	4770      	bx	lr
 801c502:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c506:	e7fa      	b.n	801c4fe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801c508:	8843      	ldrh	r3, [r0, #2]
 801c50a:	88c0      	ldrh	r0, [r0, #6]
 801c50c:	4418      	add	r0, r3
 801c50e:	b200      	sxth	r0, r0
 801c510:	1a80      	subs	r0, r0, r2
 801c512:	3801      	subs	r0, #1
 801c514:	4770      	bx	lr
 801c516:	8843      	ldrh	r3, [r0, #2]
 801c518:	88c0      	ldrh	r0, [r0, #6]
 801c51a:	4418      	add	r0, r3
 801c51c:	b200      	sxth	r0, r0
 801c51e:	1a40      	subs	r0, r0, r1
 801c520:	e7f7      	b.n	801c512 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801c522:	2000      	movs	r0, #0
 801c524:	4770      	bx	lr
	...

0801c528 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801c528:	4b01      	ldr	r3, [pc, #4]	; (801c530 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801c52a:	2200      	movs	r2, #0
 801c52c:	601a      	str	r2, [r3, #0]
 801c52e:	4770      	bx	lr
 801c530:	24025d10 	.word	0x24025d10

0801c534 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801c534:	4603      	mov	r3, r0
 801c536:	b1c8      	cbz	r0, 801c56c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801c538:	0c02      	lsrs	r2, r0, #16
 801c53a:	0412      	lsls	r2, r2, #16
 801c53c:	b9a2      	cbnz	r2, 801c568 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801c53e:	0403      	lsls	r3, r0, #16
 801c540:	2010      	movs	r0, #16
 801c542:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c546:	bf04      	itt	eq
 801c548:	021b      	lsleq	r3, r3, #8
 801c54a:	3008      	addeq	r0, #8
 801c54c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c550:	bf04      	itt	eq
 801c552:	011b      	lsleq	r3, r3, #4
 801c554:	3004      	addeq	r0, #4
 801c556:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c55a:	bf04      	itt	eq
 801c55c:	009b      	lsleq	r3, r3, #2
 801c55e:	3002      	addeq	r0, #2
 801c560:	2b00      	cmp	r3, #0
 801c562:	db04      	blt.n	801c56e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801c564:	3001      	adds	r0, #1
 801c566:	4770      	bx	lr
 801c568:	2000      	movs	r0, #0
 801c56a:	e7ea      	b.n	801c542 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801c56c:	2020      	movs	r0, #32
 801c56e:	4770      	bx	lr

0801c570 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c574:	b087      	sub	sp, #28
 801c576:	4681      	mov	r9, r0
 801c578:	4698      	mov	r8, r3
 801c57a:	4610      	mov	r0, r2
 801c57c:	460d      	mov	r5, r1
 801c57e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801c582:	b981      	cbnz	r1, 801c5a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801c584:	b14b      	cbz	r3, 801c59a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801c586:	460b      	mov	r3, r1
 801c588:	464a      	mov	r2, r9
 801c58a:	4641      	mov	r1, r8
 801c58c:	e9cd 4700 	strd	r4, r7, [sp]
 801c590:	f7ff ffee 	bl	801c570 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c594:	b007      	add	sp, #28
 801c596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c59a:	f04f 33ff 	mov.w	r3, #4294967295
 801c59e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801c5a2:	603b      	str	r3, [r7, #0]
 801c5a4:	e7f6      	b.n	801c594 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801c5a6:	fa32 fa01 	lsrs.w	sl, r2, r1
 801c5aa:	d107      	bne.n	801c5bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801c5ac:	fb09 f602 	mul.w	r6, r9, r2
 801c5b0:	fbb6 f0f4 	udiv	r0, r6, r4
 801c5b4:	fb04 6610 	mls	r6, r4, r0, r6
 801c5b8:	603e      	str	r6, [r7, #0]
 801c5ba:	e7eb      	b.n	801c594 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801c5bc:	2601      	movs	r6, #1
 801c5be:	fa09 fb01 	lsl.w	fp, r9, r1
 801c5c2:	408e      	lsls	r6, r1
 801c5c4:	fbbb f3f4 	udiv	r3, fp, r4
 801c5c8:	3e01      	subs	r6, #1
 801c5ca:	9302      	str	r3, [sp, #8]
 801c5cc:	fb0a f303 	mul.w	r3, sl, r3
 801c5d0:	4016      	ands	r6, r2
 801c5d2:	9303      	str	r3, [sp, #12]
 801c5d4:	4630      	mov	r0, r6
 801c5d6:	f7ff ffad 	bl	801c534 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c5da:	464a      	mov	r2, r9
 801c5dc:	460b      	mov	r3, r1
 801c5de:	4601      	mov	r1, r0
 801c5e0:	4630      	mov	r0, r6
 801c5e2:	e9cd 4700 	strd	r4, r7, [sp]
 801c5e6:	f7ff ffc3 	bl	801c570 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c5ea:	9b02      	ldr	r3, [sp, #8]
 801c5ec:	4606      	mov	r6, r0
 801c5ee:	eb05 0108 	add.w	r1, r5, r8
 801c5f2:	fb04 bb13 	mls	fp, r4, r3, fp
 801c5f6:	4658      	mov	r0, fp
 801c5f8:	f7ff ff9c 	bl	801c534 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c5fc:	ab05      	add	r3, sp, #20
 801c5fe:	465a      	mov	r2, fp
 801c600:	e9cd 4300 	strd	r4, r3, [sp]
 801c604:	4603      	mov	r3, r0
 801c606:	4650      	mov	r0, sl
 801c608:	f7ff ffb2 	bl	801c570 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c60c:	6839      	ldr	r1, [r7, #0]
 801c60e:	9a05      	ldr	r2, [sp, #20]
 801c610:	9b03      	ldr	r3, [sp, #12]
 801c612:	4411      	add	r1, r2
 801c614:	fbb1 f2f4 	udiv	r2, r1, r4
 801c618:	18d3      	adds	r3, r2, r3
 801c61a:	fb04 1412 	mls	r4, r4, r2, r1
 801c61e:	441e      	add	r6, r3
 801c620:	603c      	str	r4, [r7, #0]
 801c622:	4430      	add	r0, r6
 801c624:	e7b6      	b.n	801c594 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801c626 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801c626:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c62a:	b085      	sub	sp, #20
 801c62c:	f1b0 0900 	subs.w	r9, r0, #0
 801c630:	461d      	mov	r5, r3
 801c632:	4617      	mov	r7, r2
 801c634:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c636:	bfbb      	ittet	lt
 801c638:	f1c9 0900 	rsblt	r9, r9, #0
 801c63c:	f04f 36ff 	movlt.w	r6, #4294967295
 801c640:	2601      	movge	r6, #1
 801c642:	6823      	ldrlt	r3, [r4, #0]
 801c644:	bfbc      	itt	lt
 801c646:	425b      	neglt	r3, r3
 801c648:	6023      	strlt	r3, [r4, #0]
 801c64a:	2a00      	cmp	r2, #0
 801c64c:	da04      	bge.n	801c658 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801c64e:	6823      	ldr	r3, [r4, #0]
 801c650:	4257      	negs	r7, r2
 801c652:	4276      	negs	r6, r6
 801c654:	425b      	negs	r3, r3
 801c656:	6023      	str	r3, [r4, #0]
 801c658:	2d00      	cmp	r5, #0
 801c65a:	4638      	mov	r0, r7
 801c65c:	bfba      	itte	lt
 801c65e:	426d      	neglt	r5, r5
 801c660:	f04f 38ff 	movlt.w	r8, #4294967295
 801c664:	f04f 0801 	movge.w	r8, #1
 801c668:	f7ff ff64 	bl	801c534 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c66c:	ab03      	add	r3, sp, #12
 801c66e:	463a      	mov	r2, r7
 801c670:	e9cd 5300 	strd	r5, r3, [sp]
 801c674:	4603      	mov	r3, r0
 801c676:	4648      	mov	r0, r9
 801c678:	f7ff ff7a 	bl	801c570 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c67c:	6823      	ldr	r3, [r4, #0]
 801c67e:	9a03      	ldr	r2, [sp, #12]
 801c680:	4546      	cmp	r6, r8
 801c682:	441a      	add	r2, r3
 801c684:	fb92 f3f5 	sdiv	r3, r2, r5
 801c688:	4418      	add	r0, r3
 801c68a:	fb05 2313 	mls	r3, r5, r3, r2
 801c68e:	bf18      	it	ne
 801c690:	4240      	negne	r0, r0
 801c692:	1c72      	adds	r2, r6, #1
 801c694:	6023      	str	r3, [r4, #0]
 801c696:	d105      	bne.n	801c6a4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801c698:	2b00      	cmp	r3, #0
 801c69a:	f1c3 0200 	rsb	r2, r3, #0
 801c69e:	db0b      	blt.n	801c6b8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801c6a0:	6022      	str	r2, [r4, #0]
 801c6a2:	e006      	b.n	801c6b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c6a4:	2e01      	cmp	r6, #1
 801c6a6:	d104      	bne.n	801c6b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	da02      	bge.n	801c6b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c6ac:	442b      	add	r3, r5
 801c6ae:	3801      	subs	r0, #1
 801c6b0:	6023      	str	r3, [r4, #0]
 801c6b2:	b005      	add	sp, #20
 801c6b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c6b8:	3801      	subs	r0, #1
 801c6ba:	1b52      	subs	r2, r2, r5
 801c6bc:	e7f0      	b.n	801c6a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801c6c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801c6c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801c6c4:	4c1c      	ldr	r4, [pc, #112]	; (801c738 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801c6c6:	4605      	mov	r5, r0
 801c6c8:	6807      	ldr	r7, [r0, #0]
 801c6ca:	69a3      	ldr	r3, [r4, #24]
 801c6cc:	b92b      	cbnz	r3, 801c6da <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801c6ce:	6840      	ldr	r0, [r0, #4]
 801c6d0:	e9c5 7000 	strd	r7, r0, [r5]
 801c6d4:	b004      	add	sp, #16
 801c6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6da:	f04f 0802 	mov.w	r8, #2
 801c6de:	68a2      	ldr	r2, [r4, #8]
 801c6e0:	ae04      	add	r6, sp, #16
 801c6e2:	6820      	ldr	r0, [r4, #0]
 801c6e4:	fb93 f1f8 	sdiv	r1, r3, r8
 801c6e8:	440a      	add	r2, r1
 801c6ea:	69e1      	ldr	r1, [r4, #28]
 801c6ec:	f846 2d04 	str.w	r2, [r6, #-4]!
 801c6f0:	463a      	mov	r2, r7
 801c6f2:	9600      	str	r6, [sp, #0]
 801c6f4:	f7ff ff97 	bl	801c626 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c6f8:	69a3      	ldr	r3, [r4, #24]
 801c6fa:	4607      	mov	r7, r0
 801c6fc:	686a      	ldr	r2, [r5, #4]
 801c6fe:	6a21      	ldr	r1, [r4, #32]
 801c700:	9600      	str	r6, [sp, #0]
 801c702:	6860      	ldr	r0, [r4, #4]
 801c704:	f7ff ff8f 	bl	801c626 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c708:	69a3      	ldr	r3, [r4, #24]
 801c70a:	6962      	ldr	r2, [r4, #20]
 801c70c:	4407      	add	r7, r0
 801c70e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c710:	9600      	str	r6, [sp, #0]
 801c712:	68e0      	ldr	r0, [r4, #12]
 801c714:	fb93 f8f8 	sdiv	r8, r3, r8
 801c718:	4442      	add	r2, r8
 801c71a:	9203      	str	r2, [sp, #12]
 801c71c:	682a      	ldr	r2, [r5, #0]
 801c71e:	f7ff ff82 	bl	801c626 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c722:	4680      	mov	r8, r0
 801c724:	9600      	str	r6, [sp, #0]
 801c726:	69a3      	ldr	r3, [r4, #24]
 801c728:	686a      	ldr	r2, [r5, #4]
 801c72a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801c72c:	6920      	ldr	r0, [r4, #16]
 801c72e:	f7ff ff7a 	bl	801c626 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c732:	4440      	add	r0, r8
 801c734:	e7cc      	b.n	801c6d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801c736:	bf00      	nop
 801c738:	24025d14 	.word	0x24025d14

0801c73c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801c73c:	4b07      	ldr	r3, [pc, #28]	; (801c75c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801c73e:	781b      	ldrb	r3, [r3, #0]
 801c740:	2b01      	cmp	r3, #1
 801c742:	d109      	bne.n	801c758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801c744:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c748:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c74c:	8003      	strh	r3, [r0, #0]
 801c74e:	4b04      	ldr	r3, [pc, #16]	; (801c760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801c750:	881b      	ldrh	r3, [r3, #0]
 801c752:	3b01      	subs	r3, #1
 801c754:	1a9b      	subs	r3, r3, r2
 801c756:	800b      	strh	r3, [r1, #0]
 801c758:	4770      	bx	lr
 801c75a:	bf00      	nop
 801c75c:	24025d00 	.word	0x24025d00
 801c760:	24025cfc 	.word	0x24025cfc

0801c764 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c764:	4b07      	ldr	r3, [pc, #28]	; (801c784 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c766:	b510      	push	{r4, lr}
 801c768:	781b      	ldrb	r3, [r3, #0]
 801c76a:	2b01      	cmp	r3, #1
 801c76c:	d108      	bne.n	801c780 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c76e:	4b06      	ldr	r3, [pc, #24]	; (801c788 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c770:	880c      	ldrh	r4, [r1, #0]
 801c772:	881b      	ldrh	r3, [r3, #0]
 801c774:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c778:	3b01      	subs	r3, #1
 801c77a:	1b1b      	subs	r3, r3, r4
 801c77c:	8003      	strh	r3, [r0, #0]
 801c77e:	800a      	strh	r2, [r1, #0]
 801c780:	bd10      	pop	{r4, pc}
 801c782:	bf00      	nop
 801c784:	24025d00 	.word	0x24025d00
 801c788:	24025cfc 	.word	0x24025cfc

0801c78c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801c78c:	4b0a      	ldr	r3, [pc, #40]	; (801c7b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801c78e:	b510      	push	{r4, lr}
 801c790:	781b      	ldrb	r3, [r3, #0]
 801c792:	2b01      	cmp	r3, #1
 801c794:	d10e      	bne.n	801c7b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801c796:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c79a:	8843      	ldrh	r3, [r0, #2]
 801c79c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c7a0:	18ca      	adds	r2, r1, r3
 801c7a2:	4b06      	ldr	r3, [pc, #24]	; (801c7bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801c7a4:	8044      	strh	r4, [r0, #2]
 801c7a6:	881b      	ldrh	r3, [r3, #0]
 801c7a8:	1a9b      	subs	r3, r3, r2
 801c7aa:	8003      	strh	r3, [r0, #0]
 801c7ac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c7b0:	8081      	strh	r1, [r0, #4]
 801c7b2:	80c3      	strh	r3, [r0, #6]
 801c7b4:	bd10      	pop	{r4, pc}
 801c7b6:	bf00      	nop
 801c7b8:	24025d00 	.word	0x24025d00
 801c7bc:	24025cfc 	.word	0x24025cfc

0801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801c7c0:	4b08      	ldr	r3, [pc, #32]	; (801c7e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801c7c2:	781b      	ldrb	r3, [r3, #0]
 801c7c4:	2b01      	cmp	r3, #1
 801c7c6:	d10c      	bne.n	801c7e2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801c7c8:	8803      	ldrh	r3, [r0, #0]
 801c7ca:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c7ce:	8842      	ldrh	r2, [r0, #2]
 801c7d0:	8002      	strh	r2, [r0, #0]
 801c7d2:	185a      	adds	r2, r3, r1
 801c7d4:	4b04      	ldr	r3, [pc, #16]	; (801c7e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801c7d6:	881b      	ldrh	r3, [r3, #0]
 801c7d8:	1a9b      	subs	r3, r3, r2
 801c7da:	8043      	strh	r3, [r0, #2]
 801c7dc:	88c3      	ldrh	r3, [r0, #6]
 801c7de:	80c1      	strh	r1, [r0, #6]
 801c7e0:	8083      	strh	r3, [r0, #4]
 801c7e2:	4770      	bx	lr
 801c7e4:	24025d00 	.word	0x24025d00
 801c7e8:	24025cfc 	.word	0x24025cfc

0801c7ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801c7ec:	4b07      	ldr	r3, [pc, #28]	; (801c80c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801c7ee:	b510      	push	{r4, lr}
 801c7f0:	781b      	ldrb	r3, [r3, #0]
 801c7f2:	2b01      	cmp	r3, #1
 801c7f4:	d108      	bne.n	801c808 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801c7f6:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c7fa:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c7fe:	8003      	strh	r3, [r0, #0]
 801c800:	8893      	ldrh	r3, [r2, #4]
 801c802:	3b01      	subs	r3, #1
 801c804:	1b1b      	subs	r3, r3, r4
 801c806:	800b      	strh	r3, [r1, #0]
 801c808:	bd10      	pop	{r4, pc}
 801c80a:	bf00      	nop
 801c80c:	24025d00 	.word	0x24025d00

0801c810 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801c810:	4b0b      	ldr	r3, [pc, #44]	; (801c840 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801c812:	781b      	ldrb	r3, [r3, #0]
 801c814:	2b01      	cmp	r3, #1
 801c816:	d111      	bne.n	801c83c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801c818:	680b      	ldr	r3, [r1, #0]
 801c81a:	ed90 7a00 	vldr	s14, [r0]
 801c81e:	6003      	str	r3, [r0, #0]
 801c820:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801c824:	eddf 6a07 	vldr	s13, [pc, #28]	; 801c844 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801c828:	ee07 3a90 	vmov	s15, r3
 801c82c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c830:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c838:	edc1 7a00 	vstr	s15, [r1]
 801c83c:	4770      	bx	lr
 801c83e:	bf00      	nop
 801c840:	24025d00 	.word	0x24025d00
 801c844:	38d1b717 	.word	0x38d1b717

0801c848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801c848:	4b0a      	ldr	r3, [pc, #40]	; (801c874 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801c84a:	460a      	mov	r2, r1
 801c84c:	b510      	push	{r4, lr}
 801c84e:	781b      	ldrb	r3, [r3, #0]
 801c850:	2b01      	cmp	r3, #1
 801c852:	d10d      	bne.n	801c870 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801c854:	8881      	ldrh	r1, [r0, #4]
 801c856:	8803      	ldrh	r3, [r0, #0]
 801c858:	440b      	add	r3, r1
 801c85a:	4601      	mov	r1, r0
 801c85c:	3b01      	subs	r3, #1
 801c85e:	f821 3b02 	strh.w	r3, [r1], #2
 801c862:	f7ff ffc3 	bl	801c7ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c866:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c86a:	88c2      	ldrh	r2, [r0, #6]
 801c86c:	80c3      	strh	r3, [r0, #6]
 801c86e:	8082      	strh	r2, [r0, #4]
 801c870:	bd10      	pop	{r4, pc}
 801c872:	bf00      	nop
 801c874:	24025d00 	.word	0x24025d00

0801c878 <_ZN8touchgfx11Application13requestRedrawEv>:
 801c878:	4b06      	ldr	r3, [pc, #24]	; (801c894 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801c87a:	2100      	movs	r1, #0
 801c87c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c880:	4b05      	ldr	r3, [pc, #20]	; (801c898 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801c882:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801c886:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c88a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801c88e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801c892:	4770      	bx	lr
 801c894:	24025cfc 	.word	0x24025cfc
 801c898:	24025cfe 	.word	0x24025cfe

0801c89c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801c89c:	4b03      	ldr	r3, [pc, #12]	; (801c8ac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801c89e:	6818      	ldr	r0, [r3, #0]
 801c8a0:	b110      	cbz	r0, 801c8a8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801c8a2:	6803      	ldr	r3, [r0, #0]
 801c8a4:	699b      	ldr	r3, [r3, #24]
 801c8a6:	4718      	bx	r3
 801c8a8:	4770      	bx	lr
 801c8aa:	bf00      	nop
 801c8ac:	24025d44 	.word	0x24025d44

0801c8b0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801c8b0:	4770      	bx	lr
	...

0801c8b4 <_ZN8touchgfx11Application4drawEv>:
 801c8b4:	4b09      	ldr	r3, [pc, #36]	; (801c8dc <_ZN8touchgfx11Application4drawEv+0x28>)
 801c8b6:	b507      	push	{r0, r1, r2, lr}
 801c8b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c8bc:	2100      	movs	r1, #0
 801c8be:	4b08      	ldr	r3, [pc, #32]	; (801c8e0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801c8c0:	9100      	str	r1, [sp, #0]
 801c8c2:	4669      	mov	r1, sp
 801c8c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c8c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c8cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c8d0:	6803      	ldr	r3, [r0, #0]
 801c8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8d4:	4798      	blx	r3
 801c8d6:	b003      	add	sp, #12
 801c8d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801c8dc:	24025cfc 	.word	0x24025cfc
 801c8e0:	24025cfe 	.word	0x24025cfe

0801c8e4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801c8e4:	4b03      	ldr	r3, [pc, #12]	; (801c8f4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801c8e6:	6818      	ldr	r0, [r3, #0]
 801c8e8:	b110      	cbz	r0, 801c8f0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801c8ea:	6803      	ldr	r3, [r0, #0]
 801c8ec:	69db      	ldr	r3, [r3, #28]
 801c8ee:	4718      	bx	r3
 801c8f0:	4770      	bx	lr
 801c8f2:	bf00      	nop
 801c8f4:	24025d44 	.word	0x24025d44

0801c8f8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801c8f8:	4b03      	ldr	r3, [pc, #12]	; (801c908 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801c8fa:	6818      	ldr	r0, [r3, #0]
 801c8fc:	b110      	cbz	r0, 801c904 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801c8fe:	6803      	ldr	r3, [r0, #0]
 801c900:	6a1b      	ldr	r3, [r3, #32]
 801c902:	4718      	bx	r3
 801c904:	4770      	bx	lr
 801c906:	bf00      	nop
 801c908:	24025d44 	.word	0x24025d44

0801c90c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801c90c:	2300      	movs	r3, #0
 801c90e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801c912:	4770      	bx	lr

0801c914 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801c914:	4b03      	ldr	r3, [pc, #12]	; (801c924 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801c916:	6818      	ldr	r0, [r3, #0]
 801c918:	b110      	cbz	r0, 801c920 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801c91a:	6803      	ldr	r3, [r0, #0]
 801c91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c91e:	4718      	bx	r3
 801c920:	4770      	bx	lr
 801c922:	bf00      	nop
 801c924:	24025d44 	.word	0x24025d44

0801c928 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801c928:	b510      	push	{r4, lr}
 801c92a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c92e:	888a      	ldrh	r2, [r1, #4]
 801c930:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c934:	4422      	add	r2, r4
 801c936:	b212      	sxth	r2, r2
 801c938:	4293      	cmp	r3, r2
 801c93a:	da15      	bge.n	801c968 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c93c:	8882      	ldrh	r2, [r0, #4]
 801c93e:	4413      	add	r3, r2
 801c940:	b21b      	sxth	r3, r3
 801c942:	429c      	cmp	r4, r3
 801c944:	da10      	bge.n	801c968 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c946:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c94a:	88c9      	ldrh	r1, [r1, #6]
 801c94c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c950:	4419      	add	r1, r3
 801c952:	b209      	sxth	r1, r1
 801c954:	428a      	cmp	r2, r1
 801c956:	da07      	bge.n	801c968 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c958:	88c0      	ldrh	r0, [r0, #6]
 801c95a:	4410      	add	r0, r2
 801c95c:	b200      	sxth	r0, r0
 801c95e:	4283      	cmp	r3, r0
 801c960:	bfac      	ite	ge
 801c962:	2000      	movge	r0, #0
 801c964:	2001      	movlt	r0, #1
 801c966:	bd10      	pop	{r4, pc}
 801c968:	2000      	movs	r0, #0
 801c96a:	e7fc      	b.n	801c966 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801c96c <_ZN8touchgfx4Rect10restrictToEss>:
 801c96c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c970:	2b00      	cmp	r3, #0
 801c972:	b510      	push	{r4, lr}
 801c974:	da04      	bge.n	801c980 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801c976:	8884      	ldrh	r4, [r0, #4]
 801c978:	4423      	add	r3, r4
 801c97a:	8083      	strh	r3, [r0, #4]
 801c97c:	2300      	movs	r3, #0
 801c97e:	8003      	strh	r3, [r0, #0]
 801c980:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c984:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c988:	1b09      	subs	r1, r1, r4
 801c98a:	428b      	cmp	r3, r1
 801c98c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c990:	bfc8      	it	gt
 801c992:	8081      	strhgt	r1, [r0, #4]
 801c994:	2b00      	cmp	r3, #0
 801c996:	da04      	bge.n	801c9a2 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801c998:	88c1      	ldrh	r1, [r0, #6]
 801c99a:	440b      	add	r3, r1
 801c99c:	80c3      	strh	r3, [r0, #6]
 801c99e:	2300      	movs	r3, #0
 801c9a0:	8043      	strh	r3, [r0, #2]
 801c9a2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801c9a6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801c9aa:	1a52      	subs	r2, r2, r1
 801c9ac:	4293      	cmp	r3, r2
 801c9ae:	bfc8      	it	gt
 801c9b0:	80c2      	strhgt	r2, [r0, #6]
 801c9b2:	bd10      	pop	{r4, pc}

0801c9b4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c9b4:	4b10      	ldr	r3, [pc, #64]	; (801c9f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801c9b6:	b510      	push	{r4, lr}
 801c9b8:	460c      	mov	r4, r1
 801c9ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c9be:	4b0f      	ldr	r3, [pc, #60]	; (801c9fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801c9c0:	4620      	mov	r0, r4
 801c9c2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c9c6:	f7ff ffd1 	bl	801c96c <_ZN8touchgfx4Rect10restrictToEss>
 801c9ca:	4b0d      	ldr	r3, [pc, #52]	; (801ca00 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801c9cc:	6818      	ldr	r0, [r3, #0]
 801c9ce:	b190      	cbz	r0, 801c9f6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801c9d0:	6803      	ldr	r3, [r0, #0]
 801c9d2:	4621      	mov	r1, r4
 801c9d4:	689b      	ldr	r3, [r3, #8]
 801c9d6:	4798      	blx	r3
 801c9d8:	4b0a      	ldr	r3, [pc, #40]	; (801ca04 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801c9da:	6818      	ldr	r0, [r3, #0]
 801c9dc:	b118      	cbz	r0, 801c9e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801c9de:	6803      	ldr	r3, [r0, #0]
 801c9e0:	4621      	mov	r1, r4
 801c9e2:	689b      	ldr	r3, [r3, #8]
 801c9e4:	4798      	blx	r3
 801c9e6:	4b08      	ldr	r3, [pc, #32]	; (801ca08 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801c9e8:	4621      	mov	r1, r4
 801c9ea:	6818      	ldr	r0, [r3, #0]
 801c9ec:	6803      	ldr	r3, [r0, #0]
 801c9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9f2:	69db      	ldr	r3, [r3, #28]
 801c9f4:	4718      	bx	r3
 801c9f6:	bd10      	pop	{r4, pc}
 801c9f8:	24025cfe 	.word	0x24025cfe
 801c9fc:	24025cfc 	.word	0x24025cfc
 801ca00:	24025d44 	.word	0x24025d44
 801ca04:	24025d40 	.word	0x24025d40
 801ca08:	24025d08 	.word	0x24025d08

0801ca0c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca0e:	4606      	mov	r6, r0
 801ca10:	4608      	mov	r0, r1
 801ca12:	460f      	mov	r7, r1
 801ca14:	f7fd fb5b 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801ca18:	b9e8      	cbnz	r0, 801ca56 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801ca1a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801ca1e:	f9b6 4000 	ldrsh.w	r4, [r6]
 801ca22:	42a5      	cmp	r5, r4
 801ca24:	db17      	blt.n	801ca56 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801ca26:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801ca2a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801ca2e:	429a      	cmp	r2, r3
 801ca30:	db11      	blt.n	801ca56 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801ca32:	88b9      	ldrh	r1, [r7, #4]
 801ca34:	440d      	add	r5, r1
 801ca36:	88b1      	ldrh	r1, [r6, #4]
 801ca38:	440c      	add	r4, r1
 801ca3a:	b22d      	sxth	r5, r5
 801ca3c:	b224      	sxth	r4, r4
 801ca3e:	42a5      	cmp	r5, r4
 801ca40:	dc09      	bgt.n	801ca56 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801ca42:	88f8      	ldrh	r0, [r7, #6]
 801ca44:	4410      	add	r0, r2
 801ca46:	88f2      	ldrh	r2, [r6, #6]
 801ca48:	4413      	add	r3, r2
 801ca4a:	b200      	sxth	r0, r0
 801ca4c:	b21b      	sxth	r3, r3
 801ca4e:	4298      	cmp	r0, r3
 801ca50:	bfcc      	ite	gt
 801ca52:	2000      	movgt	r0, #0
 801ca54:	2001      	movle	r0, #1
 801ca56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ca58 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca5a:	4604      	mov	r4, r0
 801ca5c:	4608      	mov	r0, r1
 801ca5e:	460d      	mov	r5, r1
 801ca60:	f7fd fb35 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801ca64:	b978      	cbnz	r0, 801ca86 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801ca66:	4620      	mov	r0, r4
 801ca68:	f7fd fb31 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801ca6c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801ca70:	b150      	cbz	r0, 801ca88 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801ca72:	8026      	strh	r6, [r4, #0]
 801ca74:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801ca78:	8063      	strh	r3, [r4, #2]
 801ca7a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801ca7e:	80a3      	strh	r3, [r4, #4]
 801ca80:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ca84:	80e3      	strh	r3, [r4, #6]
 801ca86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca88:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ca8c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801ca90:	42b1      	cmp	r1, r6
 801ca92:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ca96:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801ca9a:	460f      	mov	r7, r1
 801ca9c:	88ed      	ldrh	r5, [r5, #6]
 801ca9e:	bfa8      	it	ge
 801caa0:	4637      	movge	r7, r6
 801caa2:	4293      	cmp	r3, r2
 801caa4:	4618      	mov	r0, r3
 801caa6:	4466      	add	r6, ip
 801caa8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801caac:	bfa8      	it	ge
 801caae:	4610      	movge	r0, r2
 801cab0:	442a      	add	r2, r5
 801cab2:	88e5      	ldrh	r5, [r4, #6]
 801cab4:	4461      	add	r1, ip
 801cab6:	b236      	sxth	r6, r6
 801cab8:	8027      	strh	r7, [r4, #0]
 801caba:	442b      	add	r3, r5
 801cabc:	b209      	sxth	r1, r1
 801cabe:	b212      	sxth	r2, r2
 801cac0:	8060      	strh	r0, [r4, #2]
 801cac2:	b21b      	sxth	r3, r3
 801cac4:	428e      	cmp	r6, r1
 801cac6:	bfac      	ite	ge
 801cac8:	ebc7 0106 	rsbge	r1, r7, r6
 801cacc:	ebc7 0101 	rsblt	r1, r7, r1
 801cad0:	429a      	cmp	r2, r3
 801cad2:	bfac      	ite	ge
 801cad4:	ebc0 0202 	rsbge	r2, r0, r2
 801cad8:	ebc0 0203 	rsblt	r2, r0, r3
 801cadc:	80a1      	strh	r1, [r4, #4]
 801cade:	80e2      	strh	r2, [r4, #6]
 801cae0:	e7d1      	b.n	801ca86 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801cae4 <_ZN8touchgfx11Application11getInstanceEv>:
 801cae4:	4b01      	ldr	r3, [pc, #4]	; (801caec <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801cae6:	6818      	ldr	r0, [r3, #0]
 801cae8:	4770      	bx	lr
 801caea:	bf00      	nop
 801caec:	24025d54 	.word	0x24025d54

0801caf0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 801caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801caf2:	4b10      	ldr	r3, [pc, #64]	; (801cb34 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 801caf4:	4605      	mov	r5, r0
 801caf6:	781b      	ldrb	r3, [r3, #0]
 801caf8:	b1d3      	cbz	r3, 801cb30 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 801cafa:	4b0f      	ldr	r3, [pc, #60]	; (801cb38 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 801cafc:	f100 06ee 	add.w	r6, r0, #238	; 0xee
 801cb00:	4f0e      	ldr	r7, [pc, #56]	; (801cb3c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 801cb02:	881c      	ldrh	r4, [r3, #0]
 801cb04:	f8b5 312e 	ldrh.w	r3, [r5, #302]	; 0x12e
 801cb08:	42a3      	cmp	r3, r4
 801cb0a:	d90e      	bls.n	801cb2a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 801cb0c:	683b      	ldr	r3, [r7, #0]
 801cb0e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801cb12:	b10a      	cbz	r2, 801cb18 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 801cb14:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801cb16:	b900      	cbnz	r0, 801cb1a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 801cb18:	6898      	ldr	r0, [r3, #8]
 801cb1a:	6803      	ldr	r3, [r0, #0]
 801cb1c:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 801cb20:	3401      	adds	r4, #1
 801cb22:	69db      	ldr	r3, [r3, #28]
 801cb24:	4798      	blx	r3
 801cb26:	b2a4      	uxth	r4, r4
 801cb28:	e7ec      	b.n	801cb04 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 801cb2a:	2300      	movs	r3, #0
 801cb2c:	f8a5 312e 	strh.w	r3, [r5, #302]	; 0x12e
 801cb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb32:	bf00      	nop
 801cb34:	24025d06 	.word	0x24025d06
 801cb38:	24000068 	.word	0x24000068
 801cb3c:	24025d08 	.word	0x24025d08

0801cb40 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801cb40:	2300      	movs	r3, #0
 801cb42:	b510      	push	{r4, lr}
 801cb44:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801cb48:	4604      	mov	r4, r0
 801cb4a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801cb4e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801cb52:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801cb56:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801cb5a:	429a      	cmp	r2, r3
 801cb5c:	d90e      	bls.n	801cb7c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801cb5e:	18e2      	adds	r2, r4, r3
 801cb60:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801cb64:	b122      	cbz	r2, 801cb70 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801cb66:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801cb6a:	6803      	ldr	r3, [r0, #0]
 801cb6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cb6e:	4798      	blx	r3
 801cb70:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801cb74:	3301      	adds	r3, #1
 801cb76:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801cb7a:	e7ea      	b.n	801cb52 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801cb7c:	bd10      	pop	{r4, pc}

0801cb7e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801cb7e:	2300      	movs	r3, #0
 801cb80:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801cb84:	30a4      	adds	r0, #164	; 0xa4
 801cb86:	f820 3c24 	strh.w	r3, [r0, #-36]
 801cb8a:	f802 3b01 	strb.w	r3, [r2], #1
 801cb8e:	4282      	cmp	r2, r0
 801cb90:	d1fb      	bne.n	801cb8a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801cb92:	4770      	bx	lr

0801cb94 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801cb94:	b570      	push	{r4, r5, r6, lr}
 801cb96:	4c0b      	ldr	r4, [pc, #44]	; (801cbc4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801cb98:	4605      	mov	r5, r0
 801cb9a:	460e      	mov	r6, r1
 801cb9c:	6820      	ldr	r0, [r4, #0]
 801cb9e:	b110      	cbz	r0, 801cba6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801cba0:	6803      	ldr	r3, [r0, #0]
 801cba2:	695b      	ldr	r3, [r3, #20]
 801cba4:	4798      	blx	r3
 801cba6:	1d28      	adds	r0, r5, #4
 801cba8:	f7ff ffe9 	bl	801cb7e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801cbac:	6026      	str	r6, [r4, #0]
 801cbae:	6833      	ldr	r3, [r6, #0]
 801cbb0:	4630      	mov	r0, r6
 801cbb2:	68db      	ldr	r3, [r3, #12]
 801cbb4:	4798      	blx	r3
 801cbb6:	682b      	ldr	r3, [r5, #0]
 801cbb8:	4628      	mov	r0, r5
 801cbba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cbbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cbc0:	4718      	bx	r3
 801cbc2:	bf00      	nop
 801cbc4:	24025d44 	.word	0x24025d44

0801cbc8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801cbc8:	2300      	movs	r3, #0
 801cbca:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801cbce:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801cbd2:	461a      	mov	r2, r3
 801cbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbd6:	461c      	mov	r4, r3
 801cbd8:	461d      	mov	r5, r3
 801cbda:	459c      	cmp	ip, r3
 801cbdc:	dd1a      	ble.n	801cc14 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801cbde:	18c6      	adds	r6, r0, r3
 801cbe0:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801cbe4:	b16e      	cbz	r6, 801cc02 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801cbe6:	429a      	cmp	r2, r3
 801cbe8:	d008      	beq.n	801cbfc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801cbea:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801cbee:	fa1f fe82 	uxth.w	lr, r2
 801cbf2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801cbf6:	1887      	adds	r7, r0, r2
 801cbf8:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801cbfc:	3201      	adds	r2, #1
 801cbfe:	3301      	adds	r3, #1
 801cc00:	e7eb      	b.n	801cbda <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801cc02:	4299      	cmp	r1, r3
 801cc04:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801cc08:	bfa8      	it	ge
 801cc0a:	3501      	addge	r5, #1
 801cc0c:	429e      	cmp	r6, r3
 801cc0e:	bfc8      	it	gt
 801cc10:	3401      	addgt	r4, #1
 801cc12:	e7f4      	b.n	801cbfe <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801cc14:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801cc18:	1b49      	subs	r1, r1, r5
 801cc1a:	1b1b      	subs	r3, r3, r4
 801cc1c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801cc20:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801cc24:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801cc28:	4293      	cmp	r3, r2
 801cc2a:	dd03      	ble.n	801cc34 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801cc2c:	3b01      	subs	r3, #1
 801cc2e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801cc32:	e7f7      	b.n	801cc24 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801cc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801cc38 <_ZN8touchgfx11Application15handleTickEventEv>:
 801cc38:	b570      	push	{r4, r5, r6, lr}
 801cc3a:	4d16      	ldr	r5, [pc, #88]	; (801cc94 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801cc3c:	4604      	mov	r4, r0
 801cc3e:	6828      	ldr	r0, [r5, #0]
 801cc40:	b140      	cbz	r0, 801cc54 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801cc42:	7a03      	ldrb	r3, [r0, #8]
 801cc44:	b933      	cbnz	r3, 801cc54 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801cc46:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801cc4a:	6803      	ldr	r3, [r0, #0]
 801cc4c:	689b      	ldr	r3, [r3, #8]
 801cc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc52:	4718      	bx	r3
 801cc54:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801cc58:	4e0f      	ldr	r6, [pc, #60]	; (801cc98 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801cc5a:	b973      	cbnz	r3, 801cc7a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801cc5c:	b168      	cbz	r0, 801cc7a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801cc5e:	7a03      	ldrb	r3, [r0, #8]
 801cc60:	b15b      	cbz	r3, 801cc7a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801cc62:	6830      	ldr	r0, [r6, #0]
 801cc64:	b110      	cbz	r0, 801cc6c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801cc66:	6803      	ldr	r3, [r0, #0]
 801cc68:	691b      	ldr	r3, [r3, #16]
 801cc6a:	4798      	blx	r3
 801cc6c:	6828      	ldr	r0, [r5, #0]
 801cc6e:	6803      	ldr	r3, [r0, #0]
 801cc70:	68db      	ldr	r3, [r3, #12]
 801cc72:	4798      	blx	r3
 801cc74:	2301      	movs	r3, #1
 801cc76:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801cc7a:	3404      	adds	r4, #4
 801cc7c:	4620      	mov	r0, r4
 801cc7e:	f7ff ff5f 	bl	801cb40 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801cc82:	4620      	mov	r0, r4
 801cc84:	f7ff ffa0 	bl	801cbc8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801cc88:	6830      	ldr	r0, [r6, #0]
 801cc8a:	b110      	cbz	r0, 801cc92 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801cc8c:	6803      	ldr	r3, [r0, #0]
 801cc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc90:	e7dd      	b.n	801cc4e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801cc92:	bd70      	pop	{r4, r5, r6, pc}
 801cc94:	24025d48 	.word	0x24025d48
 801cc98:	24025d44 	.word	0x24025d44

0801cc9c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801cc9c:	4603      	mov	r3, r0
 801cc9e:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801cca2:	2200      	movs	r2, #0
 801cca4:	801a      	strh	r2, [r3, #0]
 801cca6:	3308      	adds	r3, #8
 801cca8:	f823 2c06 	strh.w	r2, [r3, #-6]
 801ccac:	f823 2c04 	strh.w	r2, [r3, #-4]
 801ccb0:	f823 2c02 	strh.w	r2, [r3, #-2]
 801ccb4:	428b      	cmp	r3, r1
 801ccb6:	d1f5      	bne.n	801cca4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801ccb8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801ccbc:	4770      	bx	lr
	...

0801ccc0 <_ZN8touchgfx11ApplicationC1Ev>:
 801ccc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccc2:	4b1d      	ldr	r3, [pc, #116]	; (801cd38 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801ccc4:	4606      	mov	r6, r0
 801ccc6:	4604      	mov	r4, r0
 801ccc8:	2500      	movs	r5, #0
 801ccca:	f846 3b04 	str.w	r3, [r6], #4
 801ccce:	22a8      	movs	r2, #168	; 0xa8
 801ccd0:	2100      	movs	r1, #0
 801ccd2:	4630      	mov	r0, r6
 801ccd4:	f00a fe3e 	bl	8027954 <memset>
 801ccd8:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801ccdc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801cce0:	4f16      	ldr	r7, [pc, #88]	; (801cd3c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801cce2:	f7ff ffdb 	bl	801cc9c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801cce6:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801ccea:	f7ff ffd7 	bl	801cc9c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ccee:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801ccf2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801ccf6:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801ccfa:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801ccfe:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801cd02:	490f      	ldr	r1, [pc, #60]	; (801cd40 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801cd04:	480f      	ldr	r0, [pc, #60]	; (801cd44 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801cd06:	f00a fc5d 	bl	80275c4 <CRC_Lock>
 801cd0a:	4b0f      	ldr	r3, [pc, #60]	; (801cd48 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801cd0c:	b158      	cbz	r0, 801cd26 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801cd0e:	801d      	strh	r5, [r3, #0]
 801cd10:	2300      	movs	r3, #0
 801cd12:	4a0e      	ldr	r2, [pc, #56]	; (801cd4c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801cd14:	4630      	mov	r0, r6
 801cd16:	6013      	str	r3, [r2, #0]
 801cd18:	4a0d      	ldr	r2, [pc, #52]	; (801cd50 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801cd1a:	603b      	str	r3, [r7, #0]
 801cd1c:	6013      	str	r3, [r2, #0]
 801cd1e:	f7ff ff2e 	bl	801cb7e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801cd22:	4620      	mov	r0, r4
 801cd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cd2a:	2002      	movs	r0, #2
 801cd2c:	801a      	strh	r2, [r3, #0]
 801cd2e:	6038      	str	r0, [r7, #0]
 801cd30:	f001 fa3e 	bl	801e1b0 <_ZN8touchgfx6Screen4drawEv>
 801cd34:	e7ec      	b.n	801cd10 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801cd36:	bf00      	nop
 801cd38:	0802c644 	.word	0x0802c644
 801cd3c:	24025d44 	.word	0x24025d44
 801cd40:	b5e8b5cd 	.word	0xb5e8b5cd
 801cd44:	f407a5c2 	.word	0xf407a5c2
 801cd48:	24000068 	.word	0x24000068
 801cd4c:	24025d54 	.word	0x24025d54
 801cd50:	24025d48 	.word	0x24025d48

0801cd54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801cd54:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801cd58:	3b01      	subs	r3, #1
 801cd5a:	b29b      	uxth	r3, r3
 801cd5c:	428b      	cmp	r3, r1
 801cd5e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801cd62:	b510      	push	{r4, lr}
 801cd64:	d908      	bls.n	801cd78 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801cd66:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801cd6a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801cd6e:	681a      	ldr	r2, [r3, #0]
 801cd70:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801cd74:	685a      	ldr	r2, [r3, #4]
 801cd76:	6062      	str	r2, [r4, #4]
 801cd78:	bd10      	pop	{r4, pc}
	...

0801cd7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801cd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd80:	b08f      	sub	sp, #60	; 0x3c
 801cd82:	4b8f      	ldr	r3, [pc, #572]	; (801cfc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801cd84:	4683      	mov	fp, r0
 801cd86:	ac0a      	add	r4, sp, #40	; 0x28
 801cd88:	e884 0006 	stmia.w	r4, {r1, r2}
 801cd8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cd90:	4620      	mov	r0, r4
 801cd92:	4b8c      	ldr	r3, [pc, #560]	; (801cfc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801cd94:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cd98:	f7ff fde8 	bl	801c96c <_ZN8touchgfx4Rect10restrictToEss>
 801cd9c:	4620      	mov	r0, r4
 801cd9e:	f7fd f996 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801cda2:	2800      	cmp	r0, #0
 801cda4:	d16a      	bne.n	801ce7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801cda6:	9403      	str	r4, [sp, #12]
 801cda8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801cdac:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801cdb0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801cdb4:	9301      	str	r3, [sp, #4]
 801cdb6:	35a4      	adds	r5, #164	; 0xa4
 801cdb8:	b15c      	cbz	r4, 801cdd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801cdba:	4629      	mov	r1, r5
 801cdbc:	9803      	ldr	r0, [sp, #12]
 801cdbe:	f7ff fe25 	bl	801ca0c <_ZNK8touchgfx4Rect8includesERKS0_>
 801cdc2:	3c01      	subs	r4, #1
 801cdc4:	b118      	cbz	r0, 801cdce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801cdc6:	b2a1      	uxth	r1, r4
 801cdc8:	9801      	ldr	r0, [sp, #4]
 801cdca:	f7ff ffc3 	bl	801cd54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cdce:	3d08      	subs	r5, #8
 801cdd0:	e7f2      	b.n	801cdb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801cdd2:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801cdd6:	f108 33ff 	add.w	r3, r8, #4294967295
 801cdda:	f8cd 8010 	str.w	r8, [sp, #16]
 801cdde:	9302      	str	r3, [sp, #8]
 801cde0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801cde4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801cde8:	9306      	str	r3, [sp, #24]
 801cdea:	445c      	add	r4, fp
 801cdec:	2500      	movs	r5, #0
 801cdee:	4626      	mov	r6, r4
 801cdf0:	f8cd 8014 	str.w	r8, [sp, #20]
 801cdf4:	462f      	mov	r7, r5
 801cdf6:	9b05      	ldr	r3, [sp, #20]
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d073      	beq.n	801cee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801cdfc:	9903      	ldr	r1, [sp, #12]
 801cdfe:	4630      	mov	r0, r6
 801ce00:	f7ff fd92 	bl	801c928 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ce04:	b350      	cbz	r0, 801ce5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801ce06:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801ce0a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801ce0e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801ce12:	45e6      	cmp	lr, ip
 801ce14:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801ce18:	db33      	blt.n	801ce82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ce1a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801ce1e:	88b3      	ldrh	r3, [r6, #4]
 801ce20:	4472      	add	r2, lr
 801ce22:	4463      	add	r3, ip
 801ce24:	b212      	sxth	r2, r2
 801ce26:	b21b      	sxth	r3, r3
 801ce28:	429a      	cmp	r2, r3
 801ce2a:	dc2a      	bgt.n	801ce82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ce2c:	fa1f f289 	uxth.w	r2, r9
 801ce30:	88f3      	ldrh	r3, [r6, #6]
 801ce32:	45ca      	cmp	sl, r9
 801ce34:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ce38:	4413      	add	r3, r2
 801ce3a:	fa1f fc8a 	uxth.w	ip, sl
 801ce3e:	b29b      	uxth	r3, r3
 801ce40:	fa0f fe83 	sxth.w	lr, r3
 801ce44:	db0f      	blt.n	801ce66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ce46:	eba3 030c 	sub.w	r3, r3, ip
 801ce4a:	1ac9      	subs	r1, r1, r3
 801ce4c:	b209      	sxth	r1, r1
 801ce4e:	2900      	cmp	r1, #0
 801ce50:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801ce54:	dd12      	ble.n	801ce7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ce56:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801ce5a:	4605      	mov	r5, r0
 801ce5c:	9b05      	ldr	r3, [sp, #20]
 801ce5e:	3e08      	subs	r6, #8
 801ce60:	3b01      	subs	r3, #1
 801ce62:	9305      	str	r3, [sp, #20]
 801ce64:	e7c7      	b.n	801cdf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801ce66:	4461      	add	r1, ip
 801ce68:	b209      	sxth	r1, r1
 801ce6a:	4571      	cmp	r1, lr
 801ce6c:	dc38      	bgt.n	801cee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ce6e:	eba2 020c 	sub.w	r2, r2, ip
 801ce72:	b212      	sxth	r2, r2
 801ce74:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801ce78:	2a00      	cmp	r2, #0
 801ce7a:	dcee      	bgt.n	801ce5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801ce7c:	b00f      	add	sp, #60	; 0x3c
 801ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce82:	45ca      	cmp	sl, r9
 801ce84:	db2c      	blt.n	801cee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ce86:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801ce8a:	449a      	add	sl, r3
 801ce8c:	88f3      	ldrh	r3, [r6, #6]
 801ce8e:	4499      	add	r9, r3
 801ce90:	fa0f fa8a 	sxth.w	sl, sl
 801ce94:	fa0f f989 	sxth.w	r9, r9
 801ce98:	45ca      	cmp	sl, r9
 801ce9a:	dc21      	bgt.n	801cee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ce9c:	fa1f f28c 	uxth.w	r2, ip
 801cea0:	88b3      	ldrh	r3, [r6, #4]
 801cea2:	45e6      	cmp	lr, ip
 801cea4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cea8:	4413      	add	r3, r2
 801ceaa:	fa1f f98e 	uxth.w	r9, lr
 801ceae:	b29b      	uxth	r3, r3
 801ceb0:	fa0f fa83 	sxth.w	sl, r3
 801ceb4:	db0a      	blt.n	801cecc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801ceb6:	eba3 0309 	sub.w	r3, r3, r9
 801ceba:	1ac9      	subs	r1, r1, r3
 801cebc:	b209      	sxth	r1, r1
 801cebe:	2900      	cmp	r1, #0
 801cec0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801cec4:	ddda      	ble.n	801ce7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801cec6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ceca:	e7c6      	b.n	801ce5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801cecc:	4449      	add	r1, r9
 801cece:	b209      	sxth	r1, r1
 801ced0:	4551      	cmp	r1, sl
 801ced2:	dc05      	bgt.n	801cee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ced4:	eba2 0209 	sub.w	r2, r2, r9
 801ced8:	b212      	sxth	r2, r2
 801ceda:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801cede:	e7cb      	b.n	801ce78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801cee0:	4607      	mov	r7, r0
 801cee2:	e7bb      	b.n	801ce5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801cee4:	2d00      	cmp	r5, #0
 801cee6:	d181      	bne.n	801cdec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801cee8:	2f00      	cmp	r7, #0
 801ceea:	f000 81dd 	beq.w	801d2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801ceee:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801cef2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801cef6:	b2b3      	uxth	r3, r6
 801cef8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801cefc:	b2b9      	uxth	r1, r7
 801cefe:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801cf02:	441a      	add	r2, r3
 801cf04:	448a      	add	sl, r1
 801cf06:	9105      	str	r1, [sp, #20]
 801cf08:	b292      	uxth	r2, r2
 801cf0a:	fa1f fa8a 	uxth.w	sl, sl
 801cf0e:	fa0f f882 	sxth.w	r8, r2
 801cf12:	fa0f f98a 	sxth.w	r9, sl
 801cf16:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801cf1a:	9b04      	ldr	r3, [sp, #16]
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d053      	beq.n	801cfc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801cf20:	9903      	ldr	r1, [sp, #12]
 801cf22:	4620      	mov	r0, r4
 801cf24:	f7ff fd00 	bl	801c928 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cf28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801cf2c:	b1c0      	cbz	r0, 801cf60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801cf2e:	f9b4 e000 	ldrsh.w	lr, [r4]
 801cf32:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801cf36:	4576      	cmp	r6, lr
 801cf38:	dc23      	bgt.n	801cf82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801cf3a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801cf3e:	44f4      	add	ip, lr
 801cf40:	fa0f fc8c 	sxth.w	ip, ip
 801cf44:	45e0      	cmp	r8, ip
 801cf46:	db1c      	blt.n	801cf82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801cf48:	428f      	cmp	r7, r1
 801cf4a:	fa1f fc81 	uxth.w	ip, r1
 801cf4e:	88e1      	ldrh	r1, [r4, #6]
 801cf50:	dc0d      	bgt.n	801cf6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801cf52:	ebaa 0c0c 	sub.w	ip, sl, ip
 801cf56:	f8a4 9002 	strh.w	r9, [r4, #2]
 801cf5a:	eba1 010c 	sub.w	r1, r1, ip
 801cf5e:	80e1      	strh	r1, [r4, #6]
 801cf60:	4628      	mov	r0, r5
 801cf62:	9904      	ldr	r1, [sp, #16]
 801cf64:	3c08      	subs	r4, #8
 801cf66:	4605      	mov	r5, r0
 801cf68:	3901      	subs	r1, #1
 801cf6a:	9104      	str	r1, [sp, #16]
 801cf6c:	e7d3      	b.n	801cf16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801cf6e:	4461      	add	r1, ip
 801cf70:	b209      	sxth	r1, r1
 801cf72:	4549      	cmp	r1, r9
 801cf74:	dcf5      	bgt.n	801cf62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801cf76:	9905      	ldr	r1, [sp, #20]
 801cf78:	eba1 0c0c 	sub.w	ip, r1, ip
 801cf7c:	f8a4 c006 	strh.w	ip, [r4, #6]
 801cf80:	e7ee      	b.n	801cf60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801cf82:	428f      	cmp	r7, r1
 801cf84:	dced      	bgt.n	801cf62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801cf86:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801cf8a:	4461      	add	r1, ip
 801cf8c:	b209      	sxth	r1, r1
 801cf8e:	4589      	cmp	r9, r1
 801cf90:	dbe7      	blt.n	801cf62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801cf92:	4576      	cmp	r6, lr
 801cf94:	fa1f fc8e 	uxth.w	ip, lr
 801cf98:	88a1      	ldrh	r1, [r4, #4]
 801cf9a:	dc07      	bgt.n	801cfac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801cf9c:	eba2 0c0c 	sub.w	ip, r2, ip
 801cfa0:	f8a4 8000 	strh.w	r8, [r4]
 801cfa4:	eba1 010c 	sub.w	r1, r1, ip
 801cfa8:	80a1      	strh	r1, [r4, #4]
 801cfaa:	e7d9      	b.n	801cf60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801cfac:	4461      	add	r1, ip
 801cfae:	b209      	sxth	r1, r1
 801cfb0:	4588      	cmp	r8, r1
 801cfb2:	dbd6      	blt.n	801cf62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801cfb4:	eba3 0c0c 	sub.w	ip, r3, ip
 801cfb8:	f8a4 c004 	strh.w	ip, [r4, #4]
 801cfbc:	e7d0      	b.n	801cf60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801cfbe:	bf00      	nop
 801cfc0:	24025cfe 	.word	0x24025cfe
 801cfc4:	24025cfc 	.word	0x24025cfc
 801cfc8:	2d00      	cmp	r5, #0
 801cfca:	f000 816d 	beq.w	801d2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801cfce:	9b06      	ldr	r3, [sp, #24]
 801cfd0:	445b      	add	r3, fp
 801cfd2:	461c      	mov	r4, r3
 801cfd4:	9b02      	ldr	r3, [sp, #8]
 801cfd6:	3301      	adds	r3, #1
 801cfd8:	f000 8166 	beq.w	801d2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801cfdc:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801cfe0:	9803      	ldr	r0, [sp, #12]
 801cfe2:	4629      	mov	r1, r5
 801cfe4:	f7ff fd12 	bl	801ca0c <_ZNK8touchgfx4Rect8includesERKS0_>
 801cfe8:	b120      	cbz	r0, 801cff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801cfea:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801cfee:	9801      	ldr	r0, [sp, #4]
 801cff0:	f7ff feb0 	bl	801cd54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cff4:	9903      	ldr	r1, [sp, #12]
 801cff6:	4628      	mov	r0, r5
 801cff8:	f7ff fc96 	bl	801c928 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cffc:	2800      	cmp	r0, #0
 801cffe:	f000 809c 	beq.w	801d13a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801d002:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801d006:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801d00a:	fa1f f189 	uxth.w	r1, r9
 801d00e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801d012:	9309      	str	r3, [sp, #36]	; 0x24
 801d014:	eb01 0c03 	add.w	ip, r1, r3
 801d018:	b283      	uxth	r3, r0
 801d01a:	4548      	cmp	r0, r9
 801d01c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801d020:	fa1f fa8c 	uxth.w	sl, ip
 801d024:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801d028:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801d02c:	eb03 050c 	add.w	r5, r3, ip
 801d030:	b2ad      	uxth	r5, r5
 801d032:	9505      	str	r5, [sp, #20]
 801d034:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801d038:	9504      	str	r5, [sp, #16]
 801d03a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801d03e:	f340 8099 	ble.w	801d174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801d042:	1a5b      	subs	r3, r3, r1
 801d044:	4596      	cmp	lr, r2
 801d046:	fa0f f08a 	sxth.w	r0, sl
 801d04a:	b29b      	uxth	r3, r3
 801d04c:	b21e      	sxth	r6, r3
 801d04e:	dd2e      	ble.n	801d0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801d050:	9f02      	ldr	r7, [sp, #8]
 801d052:	fa1f fe8e 	uxth.w	lr, lr
 801d056:	b292      	uxth	r2, r2
 801d058:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801d05c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801d060:	9f04      	ldr	r7, [sp, #16]
 801d062:	ebae 0102 	sub.w	r1, lr, r2
 801d066:	44a6      	add	lr, r4
 801d068:	1a3f      	subs	r7, r7, r0
 801d06a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801d06e:	b289      	uxth	r1, r1
 801d070:	4402      	add	r2, r0
 801d072:	fa0f fe8e 	sxth.w	lr, lr
 801d076:	b20d      	sxth	r5, r1
 801d078:	b212      	sxth	r2, r2
 801d07a:	436f      	muls	r7, r5
 801d07c:	ebae 0202 	sub.w	r2, lr, r2
 801d080:	4372      	muls	r2, r6
 801d082:	4297      	cmp	r7, r2
 801d084:	db09      	blt.n	801d09a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801d086:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801d08a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801d08e:	449c      	add	ip, r3
 801d090:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d094:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801d098:	e686      	b.n	801cda8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d09a:	4421      	add	r1, r4
 801d09c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801d0a0:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801d0a4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d0a8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d0ac:	e67c      	b.n	801cda8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d0ae:	9f04      	ldr	r7, [sp, #16]
 801d0b0:	42b8      	cmp	r0, r7
 801d0b2:	da27      	bge.n	801d104 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801d0b4:	9902      	ldr	r1, [sp, #8]
 801d0b6:	1a3f      	subs	r7, r7, r0
 801d0b8:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801d0bc:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801d0c0:	eb05 010e 	add.w	r1, r5, lr
 801d0c4:	fa1f f881 	uxth.w	r8, r1
 801d0c8:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801d0cc:	4411      	add	r1, r2
 801d0ce:	fa0f f988 	sxth.w	r9, r8
 801d0d2:	eba2 020e 	sub.w	r2, r2, lr
 801d0d6:	eba1 0108 	sub.w	r1, r1, r8
 801d0da:	4372      	muls	r2, r6
 801d0dc:	b289      	uxth	r1, r1
 801d0de:	fa0f f881 	sxth.w	r8, r1
 801d0e2:	fb08 f707 	mul.w	r7, r8, r7
 801d0e6:	42ba      	cmp	r2, r7
 801d0e8:	dc06      	bgt.n	801d0f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801d0ea:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801d0ee:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801d0f2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801d0f6:	e7ca      	b.n	801d08e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801d0f8:	4429      	add	r1, r5
 801d0fa:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801d0fe:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d102:	e651      	b.n	801cda8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d104:	9805      	ldr	r0, [sp, #20]
 801d106:	2d06      	cmp	r5, #6
 801d108:	ebaa 0000 	sub.w	r0, sl, r0
 801d10c:	b280      	uxth	r0, r0
 801d10e:	fa0f fe80 	sxth.w	lr, r0
 801d112:	d817      	bhi.n	801d144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801d114:	9b04      	ldr	r3, [sp, #16]
 801d116:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801d11a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801d11e:	1c6b      	adds	r3, r5, #1
 801d120:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801d124:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801d128:	9b01      	ldr	r3, [sp, #4]
 801d12a:	9801      	ldr	r0, [sp, #4]
 801d12c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d130:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801d134:	805a      	strh	r2, [r3, #2]
 801d136:	809e      	strh	r6, [r3, #4]
 801d138:	80d9      	strh	r1, [r3, #6]
 801d13a:	9b02      	ldr	r3, [sp, #8]
 801d13c:	3c08      	subs	r4, #8
 801d13e:	3b01      	subs	r3, #1
 801d140:	9302      	str	r3, [sp, #8]
 801d142:	e747      	b.n	801cfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801d144:	9a02      	ldr	r2, [sp, #8]
 801d146:	45b6      	cmp	lr, r6
 801d148:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801d14c:	db0d      	blt.n	801d16a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801d14e:	449c      	add	ip, r3
 801d150:	445a      	add	r2, fp
 801d152:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801d156:	fa1f fc8c 	uxth.w	ip, ip
 801d15a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801d15e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801d162:	448c      	add	ip, r1
 801d164:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801d168:	e61e      	b.n	801cda8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d16a:	445a      	add	r2, fp
 801d16c:	4484      	add	ip, r0
 801d16e:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801d172:	e78f      	b.n	801d094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d174:	fa1f f18e 	uxth.w	r1, lr
 801d178:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801d17c:	b293      	uxth	r3, r2
 801d17e:	4596      	cmp	lr, r2
 801d180:	eb01 0806 	add.w	r8, r1, r6
 801d184:	9306      	str	r3, [sp, #24]
 801d186:	fa1f f888 	uxth.w	r8, r8
 801d18a:	9f06      	ldr	r7, [sp, #24]
 801d18c:	fa0f f388 	sxth.w	r3, r8
 801d190:	9307      	str	r3, [sp, #28]
 801d192:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801d196:	443b      	add	r3, r7
 801d198:	b29b      	uxth	r3, r3
 801d19a:	9308      	str	r3, [sp, #32]
 801d19c:	da24      	bge.n	801d1e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801d19e:	9905      	ldr	r1, [sp, #20]
 801d1a0:	eba3 0308 	sub.w	r3, r3, r8
 801d1a4:	eba2 020e 	sub.w	r2, r2, lr
 801d1a8:	eba9 0000 	sub.w	r0, r9, r0
 801d1ac:	ebaa 0401 	sub.w	r4, sl, r1
 801d1b0:	b29b      	uxth	r3, r3
 801d1b2:	b2a4      	uxth	r4, r4
 801d1b4:	b219      	sxth	r1, r3
 801d1b6:	b225      	sxth	r5, r4
 801d1b8:	4348      	muls	r0, r1
 801d1ba:	436a      	muls	r2, r5
 801d1bc:	4282      	cmp	r2, r0
 801d1be:	9a02      	ldr	r2, [sp, #8]
 801d1c0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801d1c4:	445a      	add	r2, fp
 801d1c6:	dc06      	bgt.n	801d1d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801d1c8:	9b07      	ldr	r3, [sp, #28]
 801d1ca:	44a4      	add	ip, r4
 801d1cc:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801d1d0:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801d1d4:	e75e      	b.n	801d094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d1d6:	9904      	ldr	r1, [sp, #16]
 801d1d8:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801d1dc:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801d1e0:	4433      	add	r3, r6
 801d1e2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d1e6:	e5df      	b.n	801cda8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d1e8:	9f06      	ldr	r7, [sp, #24]
 801d1ea:	9b04      	ldr	r3, [sp, #16]
 801d1ec:	1bc9      	subs	r1, r1, r7
 801d1ee:	fa0f f78a 	sxth.w	r7, sl
 801d1f2:	b289      	uxth	r1, r1
 801d1f4:	429f      	cmp	r7, r3
 801d1f6:	fa0f fe81 	sxth.w	lr, r1
 801d1fa:	dd23      	ble.n	801d244 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801d1fc:	9a05      	ldr	r2, [sp, #20]
 801d1fe:	eba9 0000 	sub.w	r0, r9, r0
 801d202:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d206:	ebaa 0202 	sub.w	r2, sl, r2
 801d20a:	9d07      	ldr	r5, [sp, #28]
 801d20c:	fb0e f000 	mul.w	r0, lr, r0
 801d210:	b292      	uxth	r2, r2
 801d212:	eba5 0a03 	sub.w	sl, r5, r3
 801d216:	9b02      	ldr	r3, [sp, #8]
 801d218:	b214      	sxth	r4, r2
 801d21a:	00db      	lsls	r3, r3, #3
 801d21c:	fb04 fa0a 	mul.w	sl, r4, sl
 801d220:	445b      	add	r3, fp
 801d222:	4550      	cmp	r0, sl
 801d224:	db03      	blt.n	801d22e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801d226:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801d22a:	4494      	add	ip, r2
 801d22c:	e732      	b.n	801d094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d22e:	9a04      	ldr	r2, [sp, #16]
 801d230:	4431      	add	r1, r6
 801d232:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801d236:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801d23a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801d23e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d242:	e75c      	b.n	801d0fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801d244:	9b08      	ldr	r3, [sp, #32]
 801d246:	2d06      	cmp	r5, #6
 801d248:	eba3 0308 	sub.w	r3, r3, r8
 801d24c:	b29b      	uxth	r3, r3
 801d24e:	b218      	sxth	r0, r3
 801d250:	d813      	bhi.n	801d27a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801d252:	9b07      	ldr	r3, [sp, #28]
 801d254:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801d258:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801d25c:	1c6b      	adds	r3, r5, #1
 801d25e:	9901      	ldr	r1, [sp, #4]
 801d260:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801d264:	9b01      	ldr	r3, [sp, #4]
 801d266:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801d26a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d26e:	805a      	strh	r2, [r3, #2]
 801d270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d272:	f8a3 e006 	strh.w	lr, [r3, #6]
 801d276:	809a      	strh	r2, [r3, #4]
 801d278:	e75f      	b.n	801d13a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801d27a:	9c02      	ldr	r4, [sp, #8]
 801d27c:	4570      	cmp	r0, lr
 801d27e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801d282:	db0d      	blt.n	801d2a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801d284:	4431      	add	r1, r6
 801d286:	9b06      	ldr	r3, [sp, #24]
 801d288:	445c      	add	r4, fp
 801d28a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801d28e:	b289      	uxth	r1, r1
 801d290:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801d294:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d298:	4419      	add	r1, r3
 801d29a:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801d29e:	e583      	b.n	801cda8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d2a0:	445c      	add	r4, fp
 801d2a2:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801d2a6:	e79b      	b.n	801d1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801d2a8:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801d2ac:	2e07      	cmp	r6, #7
 801d2ae:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801d2b2:	d812      	bhi.n	801d2da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 801d2b4:	1c75      	adds	r5, r6, #1
 801d2b6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801d2ba:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801d2be:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801d2c2:	9d01      	ldr	r5, [sp, #4]
 801d2c4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801d2c8:	442c      	add	r4, r5
 801d2ca:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801d2ce:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801d2d2:	8061      	strh	r1, [r4, #2]
 801d2d4:	80a2      	strh	r2, [r4, #4]
 801d2d6:	80e3      	strh	r3, [r4, #6]
 801d2d8:	e5d0      	b.n	801ce7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d2da:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801d2de:	3e01      	subs	r6, #1
 801d2e0:	445c      	add	r4, fp
 801d2e2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801d2e6:	f04f 37ff 	mov.w	r7, #4294967295
 801d2ea:	2500      	movs	r5, #0
 801d2ec:	9305      	str	r3, [sp, #20]
 801d2ee:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801d2f2:	1e72      	subs	r2, r6, #1
 801d2f4:	9302      	str	r3, [sp, #8]
 801d2f6:	4691      	mov	r9, r2
 801d2f8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801d2fc:	9304      	str	r3, [sp, #16]
 801d2fe:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801d302:	f1b9 3fff 	cmp.w	r9, #4294967295
 801d306:	6818      	ldr	r0, [r3, #0]
 801d308:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801d30c:	9207      	str	r2, [sp, #28]
 801d30e:	bf16      	itet	ne
 801d310:	9905      	ldrne	r1, [sp, #20]
 801d312:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801d316:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801d31a:	9306      	str	r3, [sp, #24]
 801d31c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801d320:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801d324:	fb18 f801 	smulbb	r8, r8, r1
 801d328:	6859      	ldr	r1, [r3, #4]
 801d32a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d32e:	4671      	mov	r1, lr
 801d330:	a80c      	add	r0, sp, #48	; 0x30
 801d332:	f7ff fb91 	bl	801ca58 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d336:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801d33a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801d33e:	f04f 0c08 	mov.w	ip, #8
 801d342:	9b04      	ldr	r3, [sp, #16]
 801d344:	9a02      	ldr	r2, [sp, #8]
 801d346:	fb10 f001 	smulbb	r0, r0, r1
 801d34a:	fb02 8803 	mla	r8, r2, r3, r8
 801d34e:	eba0 0108 	sub.w	r1, r0, r8
 801d352:	fb90 f0fc 	sdiv	r0, r0, ip
 801d356:	4288      	cmp	r0, r1
 801d358:	dc20      	bgt.n	801d39c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801d35a:	4551      	cmp	r1, sl
 801d35c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801d360:	da03      	bge.n	801d36a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801d362:	b1d9      	cbz	r1, 801d39c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801d364:	468a      	mov	sl, r1
 801d366:	464f      	mov	r7, r9
 801d368:	4635      	mov	r5, r6
 801d36a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d36e:	f119 0f02 	cmn.w	r9, #2
 801d372:	d1c6      	bne.n	801d302 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801d374:	4616      	mov	r6, r2
 801d376:	3201      	adds	r2, #1
 801d378:	f1a4 0408 	sub.w	r4, r4, #8
 801d37c:	d1b7      	bne.n	801d2ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801d37e:	9b01      	ldr	r3, [sp, #4]
 801d380:	b2ac      	uxth	r4, r5
 801d382:	00ed      	lsls	r5, r5, #3
 801d384:	1958      	adds	r0, r3, r5
 801d386:	1c7b      	adds	r3, r7, #1
 801d388:	d10b      	bne.n	801d3a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801d38a:	4601      	mov	r1, r0
 801d38c:	9803      	ldr	r0, [sp, #12]
 801d38e:	f7ff fb63 	bl	801ca58 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d392:	4621      	mov	r1, r4
 801d394:	9801      	ldr	r0, [sp, #4]
 801d396:	f7ff fcdd 	bl	801cd54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d39a:	e505      	b.n	801cda8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d39c:	464f      	mov	r7, r9
 801d39e:	4635      	mov	r5, r6
 801d3a0:	e7ed      	b.n	801d37e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801d3a2:	9b01      	ldr	r3, [sp, #4]
 801d3a4:	00ff      	lsls	r7, r7, #3
 801d3a6:	445d      	add	r5, fp
 801d3a8:	19d9      	adds	r1, r3, r7
 801d3aa:	445f      	add	r7, fp
 801d3ac:	f7ff fb54 	bl	801ca58 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d3b0:	9b03      	ldr	r3, [sp, #12]
 801d3b2:	cb03      	ldmia	r3!, {r0, r1}
 801d3b4:	9b03      	ldr	r3, [sp, #12]
 801d3b6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801d3ba:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801d3be:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801d3c2:	6869      	ldr	r1, [r5, #4]
 801d3c4:	c303      	stmia	r3!, {r0, r1}
 801d3c6:	e7e4      	b.n	801d392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0801d3c8 <_ZN8touchgfx11Application10invalidateEv>:
 801d3c8:	4b09      	ldr	r3, [pc, #36]	; (801d3f0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801d3ca:	b082      	sub	sp, #8
 801d3cc:	2100      	movs	r1, #0
 801d3ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d3d2:	4b08      	ldr	r3, [pc, #32]	; (801d3f4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801d3d4:	9100      	str	r1, [sp, #0]
 801d3d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3da:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d3de:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d3e2:	ab02      	add	r3, sp, #8
 801d3e4:	e913 0006 	ldmdb	r3, {r1, r2}
 801d3e8:	b002      	add	sp, #8
 801d3ea:	f7ff bcc7 	b.w	801cd7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d3ee:	bf00      	nop
 801d3f0:	24025cfc 	.word	0x24025cfc
 801d3f4:	24025cfe 	.word	0x24025cfe

0801d3f8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3fc:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801d400:	b09b      	sub	sp, #108	; 0x6c
 801d402:	4604      	mov	r4, r0
 801d404:	4630      	mov	r0, r6
 801d406:	f7fc fe62 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801d40a:	4605      	mov	r5, r0
 801d40c:	b940      	cbnz	r0, 801d420 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801d40e:	4620      	mov	r0, r4
 801d410:	e896 0006 	ldmia.w	r6, {r1, r2}
 801d414:	f7ff fcb2 	bl	801cd7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d418:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801d41c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801d420:	4bc8      	ldr	r3, [pc, #800]	; (801d744 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	2b00      	cmp	r3, #0
 801d426:	d03e      	beq.n	801d4a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801d428:	4dc7      	ldr	r5, [pc, #796]	; (801d748 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801d42a:	4628      	mov	r0, r5
 801d42c:	f7fc fe4f 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801d430:	4606      	mov	r6, r0
 801d432:	2800      	cmp	r0, #0
 801d434:	d137      	bne.n	801d4a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801d436:	4628      	mov	r0, r5
 801d438:	f7ff f9a8 	bl	801c78c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d43c:	6829      	ldr	r1, [r5, #0]
 801d43e:	686a      	ldr	r2, [r5, #4]
 801d440:	4620      	mov	r0, r4
 801d442:	f7ff fc9b 	bl	801cd7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d446:	802e      	strh	r6, [r5, #0]
 801d448:	806e      	strh	r6, [r5, #2]
 801d44a:	80ae      	strh	r6, [r5, #4]
 801d44c:	80ee      	strh	r6, [r5, #6]
 801d44e:	ae09      	add	r6, sp, #36	; 0x24
 801d450:	4630      	mov	r0, r6
 801d452:	f7ff fc23 	bl	801cc9c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d456:	4abd      	ldr	r2, [pc, #756]	; (801d74c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801d458:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801d45c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801d460:	8815      	ldrh	r5, [r2, #0]
 801d462:	9202      	str	r2, [sp, #8]
 801d464:	462b      	mov	r3, r5
 801d466:	429f      	cmp	r7, r3
 801d468:	d924      	bls.n	801d4b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801d46a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801d46e:	2907      	cmp	r1, #7
 801d470:	d816      	bhi.n	801d4a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801d472:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801d476:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801d47a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801d47e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801d482:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801d486:	1c4a      	adds	r2, r1, #1
 801d488:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801d48c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801d490:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801d494:	f8a2 9002 	strh.w	r9, [r2, #2]
 801d498:	f8a2 e004 	strh.w	lr, [r2, #4]
 801d49c:	f8a2 c006 	strh.w	ip, [r2, #6]
 801d4a0:	3301      	adds	r3, #1
 801d4a2:	b29b      	uxth	r3, r3
 801d4a4:	e7df      	b.n	801d466 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801d4a6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d1cf      	bne.n	801d44e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801d4ae:	b01b      	add	sp, #108	; 0x6c
 801d4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4b4:	462f      	mov	r7, r5
 801d4b6:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801d4ba:	42bb      	cmp	r3, r7
 801d4bc:	d90b      	bls.n	801d4d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801d4be:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801d4c2:	3701      	adds	r7, #1
 801d4c4:	4620      	mov	r0, r4
 801d4c6:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801d4ca:	b2bf      	uxth	r7, r7
 801d4cc:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801d4d0:	f7ff fc54 	bl	801cd7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d4d4:	e7ef      	b.n	801d4b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801d4d6:	4a9e      	ldr	r2, [pc, #632]	; (801d750 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801d4d8:	6813      	ldr	r3, [r2, #0]
 801d4da:	4690      	mov	r8, r2
 801d4dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801d4e0:	2b01      	cmp	r3, #1
 801d4e2:	f040 80e4 	bne.w	801d6ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801d4e6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801d4ea:	4629      	mov	r1, r5
 801d4ec:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801d4f0:	2500      	movs	r5, #0
 801d4f2:	33ae      	adds	r3, #174	; 0xae
 801d4f4:	428f      	cmp	r7, r1
 801d4f6:	f103 0308 	add.w	r3, r3, #8
 801d4fa:	dd0a      	ble.n	801d512 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801d4fc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801d500:	3101      	adds	r1, #1
 801d502:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801d506:	4402      	add	r2, r0
 801d508:	b212      	sxth	r2, r2
 801d50a:	4295      	cmp	r5, r2
 801d50c:	bfb8      	it	lt
 801d50e:	4615      	movlt	r5, r2
 801d510:	e7f0      	b.n	801d4f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801d512:	4b90      	ldr	r3, [pc, #576]	; (801d754 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801d514:	f8df b238 	ldr.w	fp, [pc, #568]	; 801d750 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801d518:	881b      	ldrh	r3, [r3, #0]
 801d51a:	46d8      	mov	r8, fp
 801d51c:	2b0f      	cmp	r3, #15
 801d51e:	bf8c      	ite	hi
 801d520:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801d524:	f04f 0a01 	movls.w	sl, #1
 801d528:	2300      	movs	r3, #0
 801d52a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801d52e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801d532:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801d536:	4438      	add	r0, r7
 801d538:	b207      	sxth	r7, r0
 801d53a:	f8db 0000 	ldr.w	r0, [fp]
 801d53e:	42bd      	cmp	r5, r7
 801d540:	6803      	ldr	r3, [r0, #0]
 801d542:	f340 8084 	ble.w	801d64e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801d546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d54a:	4798      	blx	r3
 801d54c:	eb07 030a 	add.w	r3, r7, sl
 801d550:	4298      	cmp	r0, r3
 801d552:	da07      	bge.n	801d564 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801d554:	4285      	cmp	r5, r0
 801d556:	dd05      	ble.n	801d564 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801d558:	4287      	cmp	r7, r0
 801d55a:	dd6d      	ble.n	801d638 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801d55c:	2f00      	cmp	r7, #0
 801d55e:	dd6b      	ble.n	801d638 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801d560:	4628      	mov	r0, r5
 801d562:	e004      	b.n	801d56e <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801d564:	4287      	cmp	r7, r0
 801d566:	dcfb      	bgt.n	801d560 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801d568:	42a8      	cmp	r0, r5
 801d56a:	bfa8      	it	ge
 801d56c:	4628      	movge	r0, r5
 801d56e:	4b7a      	ldr	r3, [pc, #488]	; (801d758 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801d570:	1bc0      	subs	r0, r0, r7
 801d572:	2200      	movs	r2, #0
 801d574:	f8ad 7016 	strh.w	r7, [sp, #22]
 801d578:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d57c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d580:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d584:	9b02      	ldr	r3, [sp, #8]
 801d586:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d58a:	881f      	ldrh	r7, [r3, #0]
 801d58c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801d590:	42bb      	cmp	r3, r7
 801d592:	d9cc      	bls.n	801d52e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801d594:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801d598:	ab07      	add	r3, sp, #28
 801d59a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801d59e:	6851      	ldr	r1, [r2, #4]
 801d5a0:	c303      	stmia	r3!, {r0, r1}
 801d5a2:	a905      	add	r1, sp, #20
 801d5a4:	a807      	add	r0, sp, #28
 801d5a6:	f7ff f9bf 	bl	801c928 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d5aa:	2800      	cmp	r0, #0
 801d5ac:	d04c      	beq.n	801d648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801d5ae:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801d5b2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801d5b6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801d5ba:	4686      	mov	lr, r0
 801d5bc:	4290      	cmp	r0, r2
 801d5be:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801d5c2:	4448      	add	r0, r9
 801d5c4:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801d5c8:	bfb8      	it	lt
 801d5ca:	4696      	movlt	lr, r2
 801d5cc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d5d0:	444a      	add	r2, r9
 801d5d2:	b280      	uxth	r0, r0
 801d5d4:	4299      	cmp	r1, r3
 801d5d6:	468c      	mov	ip, r1
 801d5d8:	b292      	uxth	r2, r2
 801d5da:	9303      	str	r3, [sp, #12]
 801d5dc:	bfb8      	it	lt
 801d5de:	469c      	movlt	ip, r3
 801d5e0:	b203      	sxth	r3, r0
 801d5e2:	fa0f f982 	sxth.w	r9, r2
 801d5e6:	f8ad e01c 	strh.w	lr, [sp, #28]
 801d5ea:	f8ad c01e 	strh.w	ip, [sp, #30]
 801d5ee:	454b      	cmp	r3, r9
 801d5f0:	bfb8      	it	lt
 801d5f2:	4602      	movlt	r2, r0
 801d5f4:	9b03      	ldr	r3, [sp, #12]
 801d5f6:	eba2 020e 	sub.w	r2, r2, lr
 801d5fa:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d5fe:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d602:	4411      	add	r1, r2
 801d604:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d608:	4413      	add	r3, r2
 801d60a:	b289      	uxth	r1, r1
 801d60c:	b29b      	uxth	r3, r3
 801d60e:	b208      	sxth	r0, r1
 801d610:	b21a      	sxth	r2, r3
 801d612:	4290      	cmp	r0, r2
 801d614:	bfb8      	it	lt
 801d616:	460b      	movlt	r3, r1
 801d618:	eba3 030c 	sub.w	r3, r3, ip
 801d61c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d620:	a807      	add	r0, sp, #28
 801d622:	f7fc fd54 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801d626:	b920      	cbnz	r0, 801d632 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801d628:	6823      	ldr	r3, [r4, #0]
 801d62a:	a907      	add	r1, sp, #28
 801d62c:	4620      	mov	r0, r4
 801d62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d630:	4798      	blx	r3
 801d632:	3701      	adds	r7, #1
 801d634:	b2bf      	uxth	r7, r7
 801d636:	e7a9      	b.n	801d58c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801d638:	f8d8 0000 	ldr.w	r0, [r8]
 801d63c:	2101      	movs	r1, #1
 801d63e:	6803      	ldr	r3, [r0, #0]
 801d640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d644:	4798      	blx	r3
 801d646:	e772      	b.n	801d52e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801d648:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801d64c:	e7e8      	b.n	801d620 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801d64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d650:	4798      	blx	r3
 801d652:	4b42      	ldr	r3, [pc, #264]	; (801d75c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801d654:	781b      	ldrb	r3, [r3, #0]
 801d656:	2b00      	cmp	r3, #0
 801d658:	f43f af29 	beq.w	801d4ae <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801d65c:	2300      	movs	r3, #0
 801d65e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801d662:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801d666:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801d66a:	9b02      	ldr	r3, [sp, #8]
 801d66c:	881b      	ldrh	r3, [r3, #0]
 801d66e:	429d      	cmp	r5, r3
 801d670:	f67f af1d 	bls.w	801d4ae <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801d674:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801d678:	2907      	cmp	r1, #7
 801d67a:	d815      	bhi.n	801d6a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801d67c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801d680:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801d684:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801d688:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801d68c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801d690:	1c4a      	adds	r2, r1, #1
 801d692:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801d696:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801d69a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801d69e:	f8a2 e002 	strh.w	lr, [r2, #2]
 801d6a2:	f8a2 c004 	strh.w	ip, [r2, #4]
 801d6a6:	80d7      	strh	r7, [r2, #6]
 801d6a8:	3301      	adds	r3, #1
 801d6aa:	b29b      	uxth	r3, r3
 801d6ac:	e7df      	b.n	801d66e <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801d6ae:	2b02      	cmp	r3, #2
 801d6b0:	f040 8135 	bne.w	801d91e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801d6b4:	4b2a      	ldr	r3, [pc, #168]	; (801d760 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801d6b6:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801d6ba:	781b      	ldrb	r3, [r3, #0]
 801d6bc:	2b01      	cmp	r3, #1
 801d6be:	f000 809c 	beq.w	801d7fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801d6c2:	9b02      	ldr	r3, [sp, #8]
 801d6c4:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801d6c8:	f8b3 b000 	ldrh.w	fp, [r3]
 801d6cc:	f10b 0b01 	add.w	fp, fp, #1
 801d6d0:	fa1f fb8b 	uxth.w	fp, fp
 801d6d4:	2a00      	cmp	r2, #0
 801d6d6:	d0bc      	beq.n	801d652 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d6d8:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801d6dc:	4659      	mov	r1, fp
 801d6de:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801d6e2:	f04f 0800 	mov.w	r8, #0
 801d6e6:	441d      	add	r5, r3
 801d6e8:	b22d      	sxth	r5, r5
 801d6ea:	b28b      	uxth	r3, r1
 801d6ec:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801d6f0:	429a      	cmp	r2, r3
 801d6f2:	f240 80c0 	bls.w	801d876 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801d6f6:	4427      	add	r7, r4
 801d6f8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801d6fc:	4608      	mov	r0, r1
 801d6fe:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801d702:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 801d706:	4563      	cmp	r3, ip
 801d708:	f340 80a2 	ble.w	801d850 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801d70c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 801d710:	4465      	add	r5, ip
 801d712:	b22d      	sxth	r5, r5
 801d714:	429d      	cmp	r5, r3
 801d716:	bfa8      	it	ge
 801d718:	461d      	movge	r5, r3
 801d71a:	3101      	adds	r1, #1
 801d71c:	4680      	mov	r8, r0
 801d71e:	e7e4      	b.n	801d6ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801d720:	d10b      	bne.n	801d73a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801d722:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801d726:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801d72a:	458c      	cmp	ip, r1
 801d72c:	bfb4      	ite	lt
 801d72e:	469c      	movlt	ip, r3
 801d730:	46bc      	movge	ip, r7
 801d732:	4572      	cmp	r2, lr
 801d734:	bfb8      	it	lt
 801d736:	4672      	movlt	r2, lr
 801d738:	e087      	b.n	801d84a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801d73a:	428a      	cmp	r2, r1
 801d73c:	46bc      	mov	ip, r7
 801d73e:	bfb8      	it	lt
 801d740:	460a      	movlt	r2, r1
 801d742:	e082      	b.n	801d84a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801d744:	24025d40 	.word	0x24025d40
 801d748:	24025d4c 	.word	0x24025d4c
 801d74c:	24000068 	.word	0x24000068
 801d750:	24025d08 	.word	0x24025d08
 801d754:	24025cfe 	.word	0x24025cfe
 801d758:	24025cfc 	.word	0x24025cfc
 801d75c:	24025d06 	.word	0x24025d06
 801d760:	24025d00 	.word	0x24025d00
 801d764:	1961      	adds	r1, r4, r5
 801d766:	ab07      	add	r3, sp, #28
 801d768:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801d76c:	6849      	ldr	r1, [r1, #4]
 801d76e:	c303      	stmia	r3!, {r0, r1}
 801d770:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d774:	a807      	add	r0, sp, #28
 801d776:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d77a:	2b13      	cmp	r3, #19
 801d77c:	440b      	add	r3, r1
 801d77e:	bfd8      	it	le
 801d780:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801d784:	1a9b      	subs	r3, r3, r2
 801d786:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d78a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d78e:	f7ff f817 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d792:	a807      	add	r0, sp, #28
 801d794:	f7fc fc9b 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801d798:	bb78      	cbnz	r0, 801d7fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801d79a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801d79e:	4425      	add	r5, r4
 801d7a0:	f8d8 0000 	ldr.w	r0, [r8]
 801d7a4:	f1bc 0f14 	cmp.w	ip, #20
 801d7a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d7ac:	f8d0 e000 	ldr.w	lr, [r0]
 801d7b0:	bfa8      	it	ge
 801d7b2:	f04f 0c14 	movge.w	ip, #20
 801d7b6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801d7ba:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d7be:	fa1f fc8c 	uxth.w	ip, ip
 801d7c2:	f8cd c000 	str.w	ip, [sp]
 801d7c6:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801d7ca:	47d0      	blx	sl
 801d7cc:	4682      	mov	sl, r0
 801d7ce:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d7d2:	a807      	add	r0, sp, #28
 801d7d4:	f7fe ffda 	bl	801c78c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d7d8:	6823      	ldr	r3, [r4, #0]
 801d7da:	4620      	mov	r0, r4
 801d7dc:	a907      	add	r1, sp, #28
 801d7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d7e0:	4798      	blx	r3
 801d7e2:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801d7e6:	eba0 000a 	sub.w	r0, r0, sl
 801d7ea:	b200      	sxth	r0, r0
 801d7ec:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801d7f0:	b918      	cbnz	r0, 801d7fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801d7f2:	b2b9      	uxth	r1, r7
 801d7f4:	4648      	mov	r0, r9
 801d7f6:	f7ff faad 	bl	801cd54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d7fa:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801d7fe:	f1bb 0f00 	cmp.w	fp, #0
 801d802:	f43f af26 	beq.w	801d652 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d806:	9b02      	ldr	r3, [sp, #8]
 801d808:	2700      	movs	r7, #0
 801d80a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801d80e:	881b      	ldrh	r3, [r3, #0]
 801d810:	3301      	adds	r3, #1
 801d812:	b29b      	uxth	r3, r3
 801d814:	b299      	uxth	r1, r3
 801d816:	00fd      	lsls	r5, r7, #3
 801d818:	458b      	cmp	fp, r1
 801d81a:	d9a3      	bls.n	801d764 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801d81c:	4425      	add	r5, r4
 801d81e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801d822:	469c      	mov	ip, r3
 801d824:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801d828:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801d82c:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801d830:	4408      	add	r0, r1
 801d832:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801d836:	4471      	add	r1, lr
 801d838:	b200      	sxth	r0, r0
 801d83a:	b209      	sxth	r1, r1
 801d83c:	4288      	cmp	r0, r1
 801d83e:	f6bf af6f 	bge.w	801d720 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801d842:	4586      	cmp	lr, r0
 801d844:	4672      	mov	r2, lr
 801d846:	bfb8      	it	lt
 801d848:	4602      	movlt	r2, r0
 801d84a:	3301      	adds	r3, #1
 801d84c:	4667      	mov	r7, ip
 801d84e:	e7e1      	b.n	801d814 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801d850:	d10c      	bne.n	801d86c <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801d852:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801d856:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801d85a:	4287      	cmp	r7, r0
 801d85c:	bfb4      	ite	lt
 801d85e:	4608      	movlt	r0, r1
 801d860:	4640      	movge	r0, r8
 801d862:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801d866:	443b      	add	r3, r7
 801d868:	b21b      	sxth	r3, r3
 801d86a:	e753      	b.n	801d714 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801d86c:	4565      	cmp	r5, ip
 801d86e:	4640      	mov	r0, r8
 801d870:	bfa8      	it	ge
 801d872:	4665      	movge	r5, ip
 801d874:	e751      	b.n	801d71a <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801d876:	eb09 0007 	add.w	r0, r9, r7
 801d87a:	4427      	add	r7, r4
 801d87c:	9203      	str	r2, [sp, #12]
 801d87e:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801d882:	f1ba 0f13 	cmp.w	sl, #19
 801d886:	bfde      	ittt	le
 801d888:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801d88c:	4455      	addle	r5, sl
 801d88e:	b22d      	sxthle	r5, r5
 801d890:	f7fc fc1d 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801d894:	9a03      	ldr	r2, [sp, #12]
 801d896:	2800      	cmp	r0, #0
 801d898:	f47f af1c 	bne.w	801d6d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801d89c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801d8a0:	fa1f fa8a 	uxth.w	sl, sl
 801d8a4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d8a8:	1aad      	subs	r5, r5, r2
 801d8aa:	4829      	ldr	r0, [pc, #164]	; (801d950 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801d8ac:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801d8b0:	2d14      	cmp	r5, #20
 801d8b2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801d8b6:	6800      	ldr	r0, [r0, #0]
 801d8b8:	bfa8      	it	ge
 801d8ba:	2514      	movge	r5, #20
 801d8bc:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d8c0:	f8ad 201e 	strh.w	r2, [sp, #30]
 801d8c4:	b289      	uxth	r1, r1
 801d8c6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d8ca:	b2ad      	uxth	r5, r5
 801d8cc:	f8d0 c000 	ldr.w	ip, [r0]
 801d8d0:	b292      	uxth	r2, r2
 801d8d2:	4555      	cmp	r5, sl
 801d8d4:	bf94      	ite	ls
 801d8d6:	9500      	strls	r5, [sp, #0]
 801d8d8:	f8cd a000 	strhi.w	sl, [sp]
 801d8dc:	b29b      	uxth	r3, r3
 801d8de:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801d8e2:	47a8      	blx	r5
 801d8e4:	6823      	ldr	r3, [r4, #0]
 801d8e6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d8ea:	a907      	add	r1, sp, #28
 801d8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8ee:	4620      	mov	r0, r4
 801d8f0:	4798      	blx	r3
 801d8f2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d8f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d8fa:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801d8fe:	1a5b      	subs	r3, r3, r1
 801d900:	440a      	add	r2, r1
 801d902:	b21b      	sxth	r3, r3
 801d904:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801d908:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	f47f aed8 	bne.w	801d6c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801d912:	fa1f f188 	uxth.w	r1, r8
 801d916:	4648      	mov	r0, r9
 801d918:	f7ff fa1c 	bl	801cd54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d91c:	e6d1      	b.n	801d6c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801d91e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801d922:	42ab      	cmp	r3, r5
 801d924:	f67f ae95 	bls.w	801d652 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d928:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801d92c:	ab07      	add	r3, sp, #28
 801d92e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801d932:	6851      	ldr	r1, [r2, #4]
 801d934:	c303      	stmia	r3!, {r0, r1}
 801d936:	a807      	add	r0, sp, #28
 801d938:	f7fc fbc9 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801d93c:	b920      	cbnz	r0, 801d948 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801d93e:	6823      	ldr	r3, [r4, #0]
 801d940:	a907      	add	r1, sp, #28
 801d942:	4620      	mov	r0, r4
 801d944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d946:	4798      	blx	r3
 801d948:	3501      	adds	r5, #1
 801d94a:	b2ad      	uxth	r5, r5
 801d94c:	e7e7      	b.n	801d91e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801d94e:	bf00      	nop
 801d950:	24025d08 	.word	0x24025d08

0801d954 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801d954:	4b03      	ldr	r3, [pc, #12]	; (801d964 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801d956:	2200      	movs	r2, #0
 801d958:	801a      	strh	r2, [r3, #0]
 801d95a:	805a      	strh	r2, [r3, #2]
 801d95c:	809a      	strh	r2, [r3, #4]
 801d95e:	80da      	strh	r2, [r3, #6]
 801d960:	4770      	bx	lr
 801d962:	bf00      	nop
 801d964:	24025d4c 	.word	0x24025d4c

0801d968 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801d968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d96c:	b09d      	sub	sp, #116	; 0x74
 801d96e:	4606      	mov	r6, r0
 801d970:	4614      	mov	r4, r2
 801d972:	468a      	mov	sl, r1
 801d974:	a803      	add	r0, sp, #12
 801d976:	461d      	mov	r5, r3
 801d978:	f000 fdc7 	bl	801e50a <_ZN8touchgfx12TextProviderC1Ev>
 801d97c:	6833      	ldr	r3, [r6, #0]
 801d97e:	4630      	mov	r0, r6
 801d980:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801d984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d986:	4798      	blx	r3
 801d988:	6833      	ldr	r3, [r6, #0]
 801d98a:	4607      	mov	r7, r0
 801d98c:	4630      	mov	r0, r6
 801d98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d990:	4798      	blx	r3
 801d992:	462a      	mov	r2, r5
 801d994:	2500      	movs	r5, #0
 801d996:	4621      	mov	r1, r4
 801d998:	9000      	str	r0, [sp, #0]
 801d99a:	463b      	mov	r3, r7
 801d99c:	462c      	mov	r4, r5
 801d99e:	46a9      	mov	r9, r5
 801d9a0:	46a8      	mov	r8, r5
 801d9a2:	a803      	add	r0, sp, #12
 801d9a4:	f000 fe04 	bl	801e5b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d9a8:	2300      	movs	r3, #0
 801d9aa:	9302      	str	r3, [sp, #8]
 801d9ac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d9b0:	429c      	cmp	r4, r3
 801d9b2:	d002      	beq.n	801d9ba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801d9b4:	455c      	cmp	r4, fp
 801d9b6:	bf18      	it	ne
 801d9b8:	4625      	movne	r5, r4
 801d9ba:	ab02      	add	r3, sp, #8
 801d9bc:	4632      	mov	r2, r6
 801d9be:	4651      	mov	r1, sl
 801d9c0:	a803      	add	r0, sp, #12
 801d9c2:	f001 f8e9 	bl	801eb98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d9c6:	4604      	mov	r4, r0
 801d9c8:	b108      	cbz	r0, 801d9ce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801d9ca:	280a      	cmp	r0, #10
 801d9cc:	d10a      	bne.n	801d9e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801d9ce:	45c1      	cmp	r9, r8
 801d9d0:	bf38      	it	cc
 801d9d2:	46c1      	movcc	r9, r8
 801d9d4:	f04f 0800 	mov.w	r8, #0
 801d9d8:	2c00      	cmp	r4, #0
 801d9da:	d1e5      	bne.n	801d9a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d9dc:	4648      	mov	r0, r9
 801d9de:	b01d      	add	sp, #116	; 0x74
 801d9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9e4:	9a02      	ldr	r2, [sp, #8]
 801d9e6:	2a00      	cmp	r2, #0
 801d9e8:	d0de      	beq.n	801d9a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d9ea:	7b57      	ldrb	r7, [r2, #13]
 801d9ec:	4629      	mov	r1, r5
 801d9ee:	6833      	ldr	r3, [r6, #0]
 801d9f0:	007f      	lsls	r7, r7, #1
 801d9f2:	8894      	ldrh	r4, [r2, #4]
 801d9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9f6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801d9fa:	7a97      	ldrb	r7, [r2, #10]
 801d9fc:	4307      	orrs	r7, r0
 801d9fe:	4630      	mov	r0, r6
 801da00:	4798      	blx	r3
 801da02:	4438      	add	r0, r7
 801da04:	4480      	add	r8, r0
 801da06:	fa1f f888 	uxth.w	r8, r8
 801da0a:	e7e5      	b.n	801d9d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801da0c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801da0c:	b508      	push	{r3, lr}
 801da0e:	6803      	ldr	r3, [r0, #0]
 801da10:	68db      	ldr	r3, [r3, #12]
 801da12:	4798      	blx	r3
 801da14:	b128      	cbz	r0, 801da22 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801da16:	7b43      	ldrb	r3, [r0, #13]
 801da18:	7a80      	ldrb	r0, [r0, #10]
 801da1a:	005b      	lsls	r3, r3, #1
 801da1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801da20:	4318      	orrs	r0, r3
 801da22:	bd08      	pop	{r3, pc}

0801da24 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801da24:	b40e      	push	{r1, r2, r3}
 801da26:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da28:	b09e      	sub	sp, #120	; 0x78
 801da2a:	4605      	mov	r5, r0
 801da2c:	ab23      	add	r3, sp, #140	; 0x8c
 801da2e:	a805      	add	r0, sp, #20
 801da30:	f853 4b04 	ldr.w	r4, [r3], #4
 801da34:	9303      	str	r3, [sp, #12]
 801da36:	f000 fd68 	bl	801e50a <_ZN8touchgfx12TextProviderC1Ev>
 801da3a:	682b      	ldr	r3, [r5, #0]
 801da3c:	4628      	mov	r0, r5
 801da3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801da40:	4798      	blx	r3
 801da42:	682b      	ldr	r3, [r5, #0]
 801da44:	4606      	mov	r6, r0
 801da46:	4628      	mov	r0, r5
 801da48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801da4a:	4798      	blx	r3
 801da4c:	4633      	mov	r3, r6
 801da4e:	4621      	mov	r1, r4
 801da50:	ae1e      	add	r6, sp, #120	; 0x78
 801da52:	2400      	movs	r4, #0
 801da54:	9000      	str	r0, [sp, #0]
 801da56:	9a03      	ldr	r2, [sp, #12]
 801da58:	a805      	add	r0, sp, #20
 801da5a:	f000 fda9 	bl	801e5b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801da5e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801da62:	462a      	mov	r2, r5
 801da64:	4633      	mov	r3, r6
 801da66:	4621      	mov	r1, r4
 801da68:	a805      	add	r0, sp, #20
 801da6a:	f001 f895 	bl	801eb98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801da6e:	b300      	cbz	r0, 801dab2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801da70:	280a      	cmp	r0, #10
 801da72:	d01a      	beq.n	801daaa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801da74:	9f04      	ldr	r7, [sp, #16]
 801da76:	b1c7      	cbz	r7, 801daaa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801da78:	7b78      	ldrb	r0, [r7, #13]
 801da7a:	7a3b      	ldrb	r3, [r7, #8]
 801da7c:	00c1      	lsls	r1, r0, #3
 801da7e:	88ea      	ldrh	r2, [r5, #6]
 801da80:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801da84:	4319      	orrs	r1, r3
 801da86:	0643      	lsls	r3, r0, #25
 801da88:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801da8c:	bf48      	it	mi
 801da8e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801da92:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801da96:	bf48      	it	mi
 801da98:	b219      	sxthmi	r1, r3
 801da9a:	79fb      	ldrb	r3, [r7, #7]
 801da9c:	4303      	orrs	r3, r0
 801da9e:	4413      	add	r3, r2
 801daa0:	1a5b      	subs	r3, r3, r1
 801daa2:	b21b      	sxth	r3, r3
 801daa4:	429c      	cmp	r4, r3
 801daa6:	bfb8      	it	lt
 801daa8:	461c      	movlt	r4, r3
 801daaa:	4633      	mov	r3, r6
 801daac:	462a      	mov	r2, r5
 801daae:	2100      	movs	r1, #0
 801dab0:	e7da      	b.n	801da68 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801dab2:	b2a0      	uxth	r0, r4
 801dab4:	b01e      	add	sp, #120	; 0x78
 801dab6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801daba:	b003      	add	sp, #12
 801dabc:	4770      	bx	lr

0801dabe <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801dabe:	7a43      	ldrb	r3, [r0, #9]
 801dac0:	8880      	ldrh	r0, [r0, #4]
 801dac2:	4418      	add	r0, r3
 801dac4:	b280      	uxth	r0, r0
 801dac6:	4770      	bx	lr

0801dac8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801dac8:	6803      	ldr	r3, [r0, #0]
 801daca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dacc:	4718      	bx	r3

0801dace <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801dace:	b40e      	push	{r1, r2, r3}
 801dad0:	b570      	push	{r4, r5, r6, lr}
 801dad2:	b09d      	sub	sp, #116	; 0x74
 801dad4:	4604      	mov	r4, r0
 801dad6:	ab21      	add	r3, sp, #132	; 0x84
 801dad8:	a803      	add	r0, sp, #12
 801dada:	f853 5b04 	ldr.w	r5, [r3], #4
 801dade:	9302      	str	r3, [sp, #8]
 801dae0:	f000 fd13 	bl	801e50a <_ZN8touchgfx12TextProviderC1Ev>
 801dae4:	6823      	ldr	r3, [r4, #0]
 801dae6:	4620      	mov	r0, r4
 801dae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801daea:	4798      	blx	r3
 801daec:	6823      	ldr	r3, [r4, #0]
 801daee:	4606      	mov	r6, r0
 801daf0:	4620      	mov	r0, r4
 801daf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801daf4:	2401      	movs	r4, #1
 801daf6:	4798      	blx	r3
 801daf8:	4633      	mov	r3, r6
 801dafa:	9000      	str	r0, [sp, #0]
 801dafc:	4629      	mov	r1, r5
 801dafe:	9a02      	ldr	r2, [sp, #8]
 801db00:	a803      	add	r0, sp, #12
 801db02:	f000 fd55 	bl	801e5b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801db06:	a803      	add	r0, sp, #12
 801db08:	f001 f8c6 	bl	801ec98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801db0c:	b2a3      	uxth	r3, r4
 801db0e:	b138      	cbz	r0, 801db20 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801db10:	280a      	cmp	r0, #10
 801db12:	a803      	add	r0, sp, #12
 801db14:	bf04      	itt	eq
 801db16:	3301      	addeq	r3, #1
 801db18:	b21c      	sxtheq	r4, r3
 801db1a:	f001 f8bd 	bl	801ec98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801db1e:	e7f5      	b.n	801db0c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801db20:	4618      	mov	r0, r3
 801db22:	b01d      	add	sp, #116	; 0x74
 801db24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db28:	b003      	add	sp, #12
 801db2a:	4770      	bx	lr

0801db2c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801db2c:	b40e      	push	{r1, r2, r3}
 801db2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db30:	b09e      	sub	sp, #120	; 0x78
 801db32:	4604      	mov	r4, r0
 801db34:	ab23      	add	r3, sp, #140	; 0x8c
 801db36:	a805      	add	r0, sp, #20
 801db38:	f853 5b04 	ldr.w	r5, [r3], #4
 801db3c:	9303      	str	r3, [sp, #12]
 801db3e:	f000 fce4 	bl	801e50a <_ZN8touchgfx12TextProviderC1Ev>
 801db42:	6823      	ldr	r3, [r4, #0]
 801db44:	4620      	mov	r0, r4
 801db46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801db48:	4798      	blx	r3
 801db4a:	6823      	ldr	r3, [r4, #0]
 801db4c:	4606      	mov	r6, r0
 801db4e:	4620      	mov	r0, r4
 801db50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801db52:	4798      	blx	r3
 801db54:	4633      	mov	r3, r6
 801db56:	4629      	mov	r1, r5
 801db58:	9000      	str	r0, [sp, #0]
 801db5a:	9a03      	ldr	r2, [sp, #12]
 801db5c:	a805      	add	r0, sp, #20
 801db5e:	f000 fd27 	bl	801e5b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801db62:	ad1e      	add	r5, sp, #120	; 0x78
 801db64:	2100      	movs	r1, #0
 801db66:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801db6a:	4622      	mov	r2, r4
 801db6c:	a805      	add	r0, sp, #20
 801db6e:	f845 1d68 	str.w	r1, [r5, #-104]!
 801db72:	462b      	mov	r3, r5
 801db74:	f001 f810 	bl	801eb98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801db78:	b1d8      	cbz	r0, 801dbb2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801db7a:	280a      	cmp	r0, #10
 801db7c:	d012      	beq.n	801dba4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801db7e:	9804      	ldr	r0, [sp, #16]
 801db80:	b180      	cbz	r0, 801dba4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801db82:	7b47      	ldrb	r7, [r0, #13]
 801db84:	88e2      	ldrh	r2, [r4, #6]
 801db86:	00fb      	lsls	r3, r7, #3
 801db88:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801db8c:	7a03      	ldrb	r3, [r0, #8]
 801db8e:	430b      	orrs	r3, r1
 801db90:	0679      	lsls	r1, r7, #25
 801db92:	bf44      	itt	mi
 801db94:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801db98:	b21b      	sxthmi	r3, r3
 801db9a:	1ad3      	subs	r3, r2, r3
 801db9c:	b21b      	sxth	r3, r3
 801db9e:	429e      	cmp	r6, r3
 801dba0:	bfa8      	it	ge
 801dba2:	461e      	movge	r6, r3
 801dba4:	462b      	mov	r3, r5
 801dba6:	4622      	mov	r2, r4
 801dba8:	2100      	movs	r1, #0
 801dbaa:	a805      	add	r0, sp, #20
 801dbac:	f000 fff4 	bl	801eb98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801dbb0:	e7e2      	b.n	801db78 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801dbb2:	4630      	mov	r0, r6
 801dbb4:	b01e      	add	sp, #120	; 0x78
 801dbb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dbba:	b003      	add	sp, #12
 801dbbc:	4770      	bx	lr

0801dbbe <_ZNK8touchgfx8Drawable10invalidateEv>:
 801dbbe:	b513      	push	{r0, r1, r4, lr}
 801dbc0:	6803      	ldr	r3, [r0, #0]
 801dbc2:	2400      	movs	r4, #0
 801dbc4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801dbc8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801dbcc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801dbd0:	4669      	mov	r1, sp
 801dbd2:	691b      	ldr	r3, [r3, #16]
 801dbd4:	9400      	str	r4, [sp, #0]
 801dbd6:	f8ad 2006 	strh.w	r2, [sp, #6]
 801dbda:	4798      	blx	r3
 801dbdc:	b002      	add	sp, #8
 801dbde:	bd10      	pop	{r4, pc}

0801dbe0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801dbe0:	b538      	push	{r3, r4, r5, lr}
 801dbe2:	680b      	ldr	r3, [r1, #0]
 801dbe4:	460c      	mov	r4, r1
 801dbe6:	4605      	mov	r5, r0
 801dbe8:	68db      	ldr	r3, [r3, #12]
 801dbea:	4798      	blx	r3
 801dbec:	6823      	ldr	r3, [r4, #0]
 801dbee:	4620      	mov	r0, r4
 801dbf0:	4629      	mov	r1, r5
 801dbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbf4:	4798      	blx	r3
 801dbf6:	4628      	mov	r0, r5
 801dbf8:	bd38      	pop	{r3, r4, r5, pc}

0801dbfa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801dbfa:	b410      	push	{r4}
 801dbfc:	880a      	ldrh	r2, [r1, #0]
 801dbfe:	8884      	ldrh	r4, [r0, #4]
 801dc00:	4422      	add	r2, r4
 801dc02:	800a      	strh	r2, [r1, #0]
 801dc04:	884a      	ldrh	r2, [r1, #2]
 801dc06:	88c4      	ldrh	r4, [r0, #6]
 801dc08:	4422      	add	r2, r4
 801dc0a:	804a      	strh	r2, [r1, #2]
 801dc0c:	6940      	ldr	r0, [r0, #20]
 801dc0e:	b120      	cbz	r0, 801dc1a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801dc10:	6803      	ldr	r3, [r0, #0]
 801dc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc18:	4718      	bx	r3
 801dc1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc1e:	4770      	bx	lr

0801dc20 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801dc20:	b570      	push	{r4, r5, r6, lr}
 801dc22:	8882      	ldrh	r2, [r0, #4]
 801dc24:	460c      	mov	r4, r1
 801dc26:	880b      	ldrh	r3, [r1, #0]
 801dc28:	4605      	mov	r5, r0
 801dc2a:	4413      	add	r3, r2
 801dc2c:	800b      	strh	r3, [r1, #0]
 801dc2e:	884b      	ldrh	r3, [r1, #2]
 801dc30:	88c2      	ldrh	r2, [r0, #6]
 801dc32:	4413      	add	r3, r2
 801dc34:	804b      	strh	r3, [r1, #2]
 801dc36:	1d01      	adds	r1, r0, #4
 801dc38:	4620      	mov	r0, r4
 801dc3a:	f7fc fa05 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801dc3e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	dd0b      	ble.n	801dc5e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801dc46:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	dd07      	ble.n	801dc5e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801dc4e:	6968      	ldr	r0, [r5, #20]
 801dc50:	b128      	cbz	r0, 801dc5e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801dc52:	6803      	ldr	r3, [r0, #0]
 801dc54:	4621      	mov	r1, r4
 801dc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc5c:	4718      	bx	r3
 801dc5e:	bd70      	pop	{r4, r5, r6, pc}

0801dc60 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801dc60:	b570      	push	{r4, r5, r6, lr}
 801dc62:	8882      	ldrh	r2, [r0, #4]
 801dc64:	460c      	mov	r4, r1
 801dc66:	880b      	ldrh	r3, [r1, #0]
 801dc68:	4605      	mov	r5, r0
 801dc6a:	4413      	add	r3, r2
 801dc6c:	800b      	strh	r3, [r1, #0]
 801dc6e:	884b      	ldrh	r3, [r1, #2]
 801dc70:	88c2      	ldrh	r2, [r0, #6]
 801dc72:	4413      	add	r3, r2
 801dc74:	804b      	strh	r3, [r1, #2]
 801dc76:	1d01      	adds	r1, r0, #4
 801dc78:	4620      	mov	r0, r4
 801dc7a:	f7fc f9e5 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801dc7e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	dd18      	ble.n	801dcb8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801dc86:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	dd14      	ble.n	801dcb8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801dc8e:	6968      	ldr	r0, [r5, #20]
 801dc90:	b128      	cbz	r0, 801dc9e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801dc92:	6803      	ldr	r3, [r0, #0]
 801dc94:	4621      	mov	r1, r4
 801dc96:	691b      	ldr	r3, [r3, #16]
 801dc98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc9c:	4718      	bx	r3
 801dc9e:	4b07      	ldr	r3, [pc, #28]	; (801dcbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801dca0:	681b      	ldr	r3, [r3, #0]
 801dca2:	3304      	adds	r3, #4
 801dca4:	429d      	cmp	r5, r3
 801dca6:	d107      	bne.n	801dcb8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801dca8:	f7fe ff1c 	bl	801cae4 <_ZN8touchgfx11Application11getInstanceEv>
 801dcac:	6821      	ldr	r1, [r4, #0]
 801dcae:	6862      	ldr	r2, [r4, #4]
 801dcb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dcb4:	f7ff b862 	b.w	801cd7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801dcb8:	bd70      	pop	{r4, r5, r6, pc}
 801dcba:	bf00      	nop
 801dcbc:	24025d44 	.word	0x24025d44

0801dcc0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801dcc0:	b570      	push	{r4, r5, r6, lr}
 801dcc2:	4604      	mov	r4, r0
 801dcc4:	4616      	mov	r6, r2
 801dcc6:	460d      	mov	r5, r1
 801dcc8:	b901      	cbnz	r1, 801dccc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801dcca:	b192      	cbz	r2, 801dcf2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801dccc:	6823      	ldr	r3, [r4, #0]
 801dcce:	4620      	mov	r0, r4
 801dcd0:	699b      	ldr	r3, [r3, #24]
 801dcd2:	4798      	blx	r3
 801dcd4:	88e2      	ldrh	r2, [r4, #6]
 801dcd6:	88a1      	ldrh	r1, [r4, #4]
 801dcd8:	4620      	mov	r0, r4
 801dcda:	4432      	add	r2, r6
 801dcdc:	4429      	add	r1, r5
 801dcde:	b212      	sxth	r2, r2
 801dce0:	b209      	sxth	r1, r1
 801dce2:	f7e9 fcbf 	bl	8007664 <_ZN8touchgfx8Drawable5setXYEss>
 801dce6:	6823      	ldr	r3, [r4, #0]
 801dce8:	4620      	mov	r0, r4
 801dcea:	699b      	ldr	r3, [r3, #24]
 801dcec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dcf0:	4718      	bx	r3
 801dcf2:	bd70      	pop	{r4, r5, r6, pc}

0801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801dcf4:	b510      	push	{r4, lr}
 801dcf6:	2300      	movs	r3, #0
 801dcf8:	4604      	mov	r4, r0
 801dcfa:	4608      	mov	r0, r1
 801dcfc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801dd00:	8023      	strh	r3, [r4, #0]
 801dd02:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801dd06:	8063      	strh	r3, [r4, #2]
 801dd08:	6803      	ldr	r3, [r0, #0]
 801dd0a:	80a1      	strh	r1, [r4, #4]
 801dd0c:	4621      	mov	r1, r4
 801dd0e:	80e2      	strh	r2, [r4, #6]
 801dd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd12:	4798      	blx	r3
 801dd14:	4620      	mov	r0, r4
 801dd16:	bd10      	pop	{r4, pc}

0801dd18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801dd18:	b530      	push	{r4, r5, lr}
 801dd1a:	8083      	strh	r3, [r0, #4]
 801dd1c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801dd20:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801dd24:	80c3      	strh	r3, [r0, #6]
 801dd26:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801dd2a:	6141      	str	r1, [r0, #20]
 801dd2c:	7203      	strb	r3, [r0, #8]
 801dd2e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dd32:	8302      	strh	r2, [r0, #24]
 801dd34:	7243      	strb	r3, [r0, #9]
 801dd36:	7a83      	ldrb	r3, [r0, #10]
 801dd38:	f365 0306 	bfi	r3, r5, #0, #7
 801dd3c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801dd40:	f365 13c7 	bfi	r3, r5, #7, #1
 801dd44:	7283      	strb	r3, [r0, #10]
 801dd46:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801dd4a:	72c3      	strb	r3, [r0, #11]
 801dd4c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801dd50:	7303      	strb	r3, [r0, #12]
 801dd52:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801dd56:	81c3      	strh	r3, [r0, #14]
 801dd58:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801dd5c:	8203      	strh	r3, [r0, #16]
 801dd5e:	4b01      	ldr	r3, [pc, #4]	; (801dd64 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801dd60:	6003      	str	r3, [r0, #0]
 801dd62:	bd30      	pop	{r4, r5, pc}
 801dd64:	0802c6f8 	.word	0x0802c6f8

0801dd68 <_ZNK8touchgfx9ConstFont4findEt>:
 801dd68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd6a:	6944      	ldr	r4, [r0, #20]
 801dd6c:	b3bc      	cbz	r4, 801ddde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dd6e:	88a3      	ldrh	r3, [r4, #4]
 801dd70:	8b02      	ldrh	r2, [r0, #24]
 801dd72:	1acb      	subs	r3, r1, r3
 801dd74:	f102 32ff 	add.w	r2, r2, #4294967295
 801dd78:	d431      	bmi.n	801ddde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dd7a:	4293      	cmp	r3, r2
 801dd7c:	dd0c      	ble.n	801dd98 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801dd7e:	230e      	movs	r3, #14
 801dd80:	fb03 4302 	mla	r3, r3, r2, r4
 801dd84:	889b      	ldrh	r3, [r3, #4]
 801dd86:	1a5b      	subs	r3, r3, r1
 801dd88:	1ad3      	subs	r3, r2, r3
 801dd8a:	429a      	cmp	r2, r3
 801dd8c:	db27      	blt.n	801ddde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	bfbc      	itt	lt
 801dd92:	2302      	movlt	r3, #2
 801dd94:	fb92 f3f3 	sdivlt	r3, r2, r3
 801dd98:	2500      	movs	r5, #0
 801dd9a:	260e      	movs	r6, #14
 801dd9c:	4295      	cmp	r5, r2
 801dd9e:	dc1e      	bgt.n	801ddde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dda0:	fb06 4003 	mla	r0, r6, r3, r4
 801dda4:	8887      	ldrh	r7, [r0, #4]
 801dda6:	42b9      	cmp	r1, r7
 801dda8:	d01a      	beq.n	801dde0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801ddaa:	d20d      	bcs.n	801ddc8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801ddac:	1e5a      	subs	r2, r3, #1
 801ddae:	4295      	cmp	r5, r2
 801ddb0:	dc15      	bgt.n	801ddde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ddb2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801ddb6:	1a5b      	subs	r3, r3, r1
 801ddb8:	1ad3      	subs	r3, r2, r3
 801ddba:	429a      	cmp	r2, r3
 801ddbc:	db0f      	blt.n	801ddde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ddbe:	429d      	cmp	r5, r3
 801ddc0:	ddec      	ble.n	801dd9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ddc2:	1953      	adds	r3, r2, r5
 801ddc4:	105b      	asrs	r3, r3, #1
 801ddc6:	e7e9      	b.n	801dd9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ddc8:	1c5d      	adds	r5, r3, #1
 801ddca:	42aa      	cmp	r2, r5
 801ddcc:	db07      	blt.n	801ddde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ddce:	8a43      	ldrh	r3, [r0, #18]
 801ddd0:	1acb      	subs	r3, r1, r3
 801ddd2:	442b      	add	r3, r5
 801ddd4:	429d      	cmp	r5, r3
 801ddd6:	dc02      	bgt.n	801ddde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ddd8:	429a      	cmp	r2, r3
 801ddda:	dadf      	bge.n	801dd9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dddc:	e7f1      	b.n	801ddc2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801ddde:	2000      	movs	r0, #0
 801dde0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dde2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801dde2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dde4:	4604      	mov	r4, r0
 801dde6:	4617      	mov	r7, r2
 801dde8:	461e      	mov	r6, r3
 801ddea:	b911      	cbnz	r1, 801ddf2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801ddec:	2500      	movs	r5, #0
 801ddee:	4628      	mov	r0, r5
 801ddf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddf2:	290a      	cmp	r1, #10
 801ddf4:	d0fa      	beq.n	801ddec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ddf6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801ddfa:	4291      	cmp	r1, r2
 801ddfc:	d0f6      	beq.n	801ddec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ddfe:	f242 020b 	movw	r2, #8203	; 0x200b
 801de02:	4291      	cmp	r1, r2
 801de04:	d0f2      	beq.n	801ddec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801de06:	f7ff ffaf 	bl	801dd68 <_ZNK8touchgfx9ConstFont4findEt>
 801de0a:	4605      	mov	r5, r0
 801de0c:	b950      	cbnz	r0, 801de24 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801de0e:	6823      	ldr	r3, [r4, #0]
 801de10:	4620      	mov	r0, r4
 801de12:	691b      	ldr	r3, [r3, #16]
 801de14:	4798      	blx	r3
 801de16:	4601      	mov	r1, r0
 801de18:	4620      	mov	r0, r4
 801de1a:	f7ff ffa5 	bl	801dd68 <_ZNK8touchgfx9ConstFont4findEt>
 801de1e:	4605      	mov	r5, r0
 801de20:	2800      	cmp	r0, #0
 801de22:	d0e3      	beq.n	801ddec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801de24:	6823      	ldr	r3, [r4, #0]
 801de26:	4629      	mov	r1, r5
 801de28:	4620      	mov	r0, r4
 801de2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801de2c:	4798      	blx	r3
 801de2e:	6038      	str	r0, [r7, #0]
 801de30:	6823      	ldr	r3, [r4, #0]
 801de32:	4620      	mov	r0, r4
 801de34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801de36:	4798      	blx	r3
 801de38:	7030      	strb	r0, [r6, #0]
 801de3a:	e7d8      	b.n	801ddee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801de3c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801de3c:	b538      	push	{r3, r4, r5, lr}
 801de3e:	4605      	mov	r5, r0
 801de40:	f001 fd30 	bl	801f8a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801de44:	4604      	mov	r4, r0
 801de46:	4628      	mov	r0, r5
 801de48:	f001 fc70 	bl	801f72c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801de4c:	2800      	cmp	r0, #0
 801de4e:	bf14      	ite	ne
 801de50:	2002      	movne	r0, #2
 801de52:	2000      	moveq	r0, #0
 801de54:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801de58:	b280      	uxth	r0, r0
 801de5a:	bd38      	pop	{r3, r4, r5, pc}

0801de5c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801de5c:	b538      	push	{r3, r4, r5, lr}
 801de5e:	4605      	mov	r5, r0
 801de60:	f001 fd20 	bl	801f8a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801de64:	4604      	mov	r4, r0
 801de66:	4628      	mov	r0, r5
 801de68:	f001 fc60 	bl	801f72c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801de6c:	2800      	cmp	r0, #0
 801de6e:	bf14      	ite	ne
 801de70:	2002      	movne	r0, #2
 801de72:	2000      	moveq	r0, #0
 801de74:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801de78:	f040 0001 	orr.w	r0, r0, #1
 801de7c:	b280      	uxth	r0, r0
 801de7e:	bd38      	pop	{r3, r4, r5, pc}

0801de80 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801de80:	2000      	movs	r0, #0
 801de82:	4770      	bx	lr

0801de84 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801de84:	2001      	movs	r0, #1
 801de86:	4770      	bx	lr

0801de88 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801de88:	2002      	movs	r0, #2
 801de8a:	4770      	bx	lr

0801de8c <_ZN8touchgfx12GestureEventD1Ev>:
 801de8c:	4770      	bx	lr

0801de8e <_ZN8touchgfx9DragEventD1Ev>:
 801de8e:	4770      	bx	lr

0801de90 <_ZN8touchgfx10ClickEventD1Ev>:
 801de90:	4770      	bx	lr

0801de92 <_ZN8touchgfx10ClickEventD0Ev>:
 801de92:	b510      	push	{r4, lr}
 801de94:	4604      	mov	r4, r0
 801de96:	210c      	movs	r1, #12
 801de98:	f009 fc9d 	bl	80277d6 <_ZdlPvj>
 801de9c:	4620      	mov	r0, r4
 801de9e:	bd10      	pop	{r4, pc}

0801dea0 <_ZN8touchgfx9DragEventD0Ev>:
 801dea0:	b510      	push	{r4, lr}
 801dea2:	4604      	mov	r4, r0
 801dea4:	2110      	movs	r1, #16
 801dea6:	f009 fc96 	bl	80277d6 <_ZdlPvj>
 801deaa:	4620      	mov	r0, r4
 801deac:	bd10      	pop	{r4, pc}

0801deae <_ZN8touchgfx12GestureEventD0Ev>:
 801deae:	b510      	push	{r4, lr}
 801deb0:	4604      	mov	r4, r0
 801deb2:	210c      	movs	r1, #12
 801deb4:	f009 fc8f 	bl	80277d6 <_ZdlPvj>
 801deb8:	4620      	mov	r0, r4
 801deba:	bd10      	pop	{r4, pc}

0801debc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801debc:	b530      	push	{r4, r5, lr}
 801debe:	460d      	mov	r5, r1
 801dec0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801dec2:	b087      	sub	sp, #28
 801dec4:	4604      	mov	r4, r0
 801dec6:	b301      	cbz	r1, 801df0a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801dec8:	a801      	add	r0, sp, #4
 801deca:	f7ff ff13 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dece:	892a      	ldrh	r2, [r5, #8]
 801ded0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ded4:	7928      	ldrb	r0, [r5, #4]
 801ded6:	1ad2      	subs	r2, r2, r3
 801ded8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801deda:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801dede:	441a      	add	r2, r3
 801dee0:	896b      	ldrh	r3, [r5, #10]
 801dee2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801dee6:	f88d 0010 	strb.w	r0, [sp, #16]
 801deea:	1b5b      	subs	r3, r3, r5
 801deec:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801deee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801def0:	442b      	add	r3, r5
 801def2:	4d07      	ldr	r5, [pc, #28]	; (801df10 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801def4:	f8ad 1012 	strh.w	r1, [sp, #18]
 801def8:	a903      	add	r1, sp, #12
 801defa:	9503      	str	r5, [sp, #12]
 801defc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801df00:	f8ad 3016 	strh.w	r3, [sp, #22]
 801df04:	6803      	ldr	r3, [r0, #0]
 801df06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801df08:	4798      	blx	r3
 801df0a:	b007      	add	sp, #28
 801df0c:	bd30      	pop	{r4, r5, pc}
 801df0e:	bf00      	nop
 801df10:	0802c780 	.word	0x0802c780

0801df14 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801df14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801df1a:	b08a      	sub	sp, #40	; 0x28
 801df1c:	4604      	mov	r4, r0
 801df1e:	460d      	mov	r5, r1
 801df20:	b113      	cbz	r3, 801df28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801df22:	790b      	ldrb	r3, [r1, #4]
 801df24:	2b00      	cmp	r3, #0
 801df26:	d044      	beq.n	801dfb2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801df28:	f104 0804 	add.w	r8, r4, #4
 801df2c:	a803      	add	r0, sp, #12
 801df2e:	4641      	mov	r1, r8
 801df30:	f7ff fee0 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801df34:	792b      	ldrb	r3, [r5, #4]
 801df36:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801df3a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801df3e:	b983      	cbnz	r3, 801df62 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801df40:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801df44:	892a      	ldrh	r2, [r5, #8]
 801df46:	88e9      	ldrh	r1, [r5, #6]
 801df48:	4640      	mov	r0, r8
 801df4a:	1b92      	subs	r2, r2, r6
 801df4c:	9301      	str	r3, [sp, #4]
 801df4e:	1bc9      	subs	r1, r1, r7
 801df50:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801df54:	b212      	sxth	r2, r2
 801df56:	9300      	str	r3, [sp, #0]
 801df58:	b209      	sxth	r1, r1
 801df5a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801df5e:	f7fb ff91 	bl	8019e84 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801df62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801df64:	b329      	cbz	r1, 801dfb2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801df66:	a805      	add	r0, sp, #20
 801df68:	f7ff fec4 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801df6c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801df70:	792b      	ldrb	r3, [r5, #4]
 801df72:	a907      	add	r1, sp, #28
 801df74:	1abf      	subs	r7, r7, r2
 801df76:	88ea      	ldrh	r2, [r5, #6]
 801df78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801df7a:	4417      	add	r7, r2
 801df7c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801df7e:	f88d 3020 	strb.w	r3, [sp, #32]
 801df82:	4417      	add	r7, r2
 801df84:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801df88:	1ab6      	subs	r6, r6, r2
 801df8a:	892a      	ldrh	r2, [r5, #8]
 801df8c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801df90:	4416      	add	r6, r2
 801df92:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801df94:	4416      	add	r6, r2
 801df96:	4a08      	ldr	r2, [pc, #32]	; (801dfb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801df98:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801df9c:	2600      	movs	r6, #0
 801df9e:	9207      	str	r2, [sp, #28]
 801dfa0:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801dfa4:	6803      	ldr	r3, [r0, #0]
 801dfa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dfa8:	4798      	blx	r3
 801dfaa:	792b      	ldrb	r3, [r5, #4]
 801dfac:	b10b      	cbz	r3, 801dfb2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801dfae:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801dfb2:	b00a      	add	sp, #40	; 0x28
 801dfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfb8:	0802c758 	.word	0x0802c758

0801dfbc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801dfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfc0:	460c      	mov	r4, r1
 801dfc2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801dfc4:	b088      	sub	sp, #32
 801dfc6:	4605      	mov	r5, r0
 801dfc8:	2900      	cmp	r1, #0
 801dfca:	d06d      	beq.n	801e0a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801dfcc:	4668      	mov	r0, sp
 801dfce:	f7ff fe91 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dfd2:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801dfd4:	88e3      	ldrh	r3, [r4, #6]
 801dfd6:	f9bd 8000 	ldrsh.w	r8, [sp]
 801dfda:	440b      	add	r3, r1
 801dfdc:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801dfe0:	b21b      	sxth	r3, r3
 801dfe2:	4543      	cmp	r3, r8
 801dfe4:	db31      	blt.n	801e04a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801dfe6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801dfea:	44c4      	add	ip, r8
 801dfec:	fa0f fc8c 	sxth.w	ip, ip
 801dff0:	4563      	cmp	r3, ip
 801dff2:	da2a      	bge.n	801e04a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801dff4:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801dff6:	8926      	ldrh	r6, [r4, #8]
 801dff8:	4416      	add	r6, r2
 801dffa:	b236      	sxth	r6, r6
 801dffc:	42be      	cmp	r6, r7
 801dffe:	db24      	blt.n	801e04a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e000:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801e004:	4438      	add	r0, r7
 801e006:	b200      	sxth	r0, r0
 801e008:	4286      	cmp	r6, r0
 801e00a:	da1e      	bge.n	801e04a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e00c:	8963      	ldrh	r3, [r4, #10]
 801e00e:	4419      	add	r1, r3
 801e010:	b209      	sxth	r1, r1
 801e012:	4541      	cmp	r1, r8
 801e014:	db08      	blt.n	801e028 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e016:	4561      	cmp	r1, ip
 801e018:	da06      	bge.n	801e028 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e01a:	89a3      	ldrh	r3, [r4, #12]
 801e01c:	441a      	add	r2, r3
 801e01e:	b212      	sxth	r2, r2
 801e020:	42ba      	cmp	r2, r7
 801e022:	db01      	blt.n	801e028 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e024:	4282      	cmp	r2, r0
 801e026:	db10      	blt.n	801e04a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e028:	4b21      	ldr	r3, [pc, #132]	; (801e0b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801e02a:	a904      	add	r1, sp, #16
 801e02c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e02e:	9304      	str	r3, [sp, #16]
 801e030:	2302      	movs	r3, #2
 801e032:	f88d 3014 	strb.w	r3, [sp, #20]
 801e036:	2300      	movs	r3, #0
 801e038:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e03c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e040:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e044:	6803      	ldr	r3, [r0, #0]
 801e046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e048:	4798      	blx	r3
 801e04a:	1d29      	adds	r1, r5, #4
 801e04c:	a802      	add	r0, sp, #8
 801e04e:	f7ff fe51 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e052:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e056:	88e0      	ldrh	r0, [r4, #6]
 801e058:	eba3 0808 	sub.w	r8, r3, r8
 801e05c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e060:	7921      	ldrb	r1, [r4, #4]
 801e062:	fa1f f888 	uxth.w	r8, r8
 801e066:	1bdf      	subs	r7, r3, r7
 801e068:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801e06c:	b2bb      	uxth	r3, r7
 801e06e:	4440      	add	r0, r8
 801e070:	8922      	ldrh	r2, [r4, #8]
 801e072:	8967      	ldrh	r7, [r4, #10]
 801e074:	4460      	add	r0, ip
 801e076:	89a4      	ldrh	r4, [r4, #12]
 801e078:	441a      	add	r2, r3
 801e07a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801e07c:	44b8      	add	r8, r7
 801e07e:	4423      	add	r3, r4
 801e080:	f8ad 0016 	strh.w	r0, [sp, #22]
 801e084:	4432      	add	r2, r6
 801e086:	44e0      	add	r8, ip
 801e088:	4433      	add	r3, r6
 801e08a:	4c0a      	ldr	r4, [pc, #40]	; (801e0b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801e08c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e08e:	f88d 1014 	strb.w	r1, [sp, #20]
 801e092:	a904      	add	r1, sp, #16
 801e094:	9404      	str	r4, [sp, #16]
 801e096:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e09a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801e09e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e0a2:	6803      	ldr	r3, [r0, #0]
 801e0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e0a6:	4798      	blx	r3
 801e0a8:	b008      	add	sp, #32
 801e0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0ae:	bf00      	nop
 801e0b0:	0802c758 	.word	0x0802c758
 801e0b4:	0802c76c 	.word	0x0802c76c

0801e0b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801e0b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e0ba:	4604      	mov	r4, r0
 801e0bc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801e0c0:	3201      	adds	r2, #1
 801e0c2:	d112      	bne.n	801e0ea <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801e0c4:	2500      	movs	r5, #0
 801e0c6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e0ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e0ce:	6803      	ldr	r3, [r0, #0]
 801e0d0:	9500      	str	r5, [sp, #0]
 801e0d2:	466d      	mov	r5, sp
 801e0d4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e0d8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e0dc:	4629      	mov	r1, r5
 801e0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0e0:	4798      	blx	r3
 801e0e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e0e6:	e884 0003 	stmia.w	r4, {r0, r1}
 801e0ea:	4620      	mov	r0, r4
 801e0ec:	b003      	add	sp, #12
 801e0ee:	bd30      	pop	{r4, r5, pc}

0801e0f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801e0f0:	b513      	push	{r0, r1, r4, lr}
 801e0f2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801e0f6:	4604      	mov	r4, r0
 801e0f8:	3301      	adds	r3, #1
 801e0fa:	d109      	bne.n	801e110 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801e0fc:	4601      	mov	r1, r0
 801e0fe:	4668      	mov	r0, sp
 801e100:	f7ff fdf8 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e104:	f8bd 3000 	ldrh.w	r3, [sp]
 801e108:	8423      	strh	r3, [r4, #32]
 801e10a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e10e:	8463      	strh	r3, [r4, #34]	; 0x22
 801e110:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801e114:	b002      	add	sp, #8
 801e116:	bd10      	pop	{r4, pc}

0801e118 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801e118:	b513      	push	{r0, r1, r4, lr}
 801e11a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801e11e:	4604      	mov	r4, r0
 801e120:	3301      	adds	r3, #1
 801e122:	d109      	bne.n	801e138 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801e124:	4601      	mov	r1, r0
 801e126:	4668      	mov	r0, sp
 801e128:	f7ff fde4 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e12c:	f8bd 3000 	ldrh.w	r3, [sp]
 801e130:	8423      	strh	r3, [r4, #32]
 801e132:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e136:	8463      	strh	r3, [r4, #34]	; 0x22
 801e138:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801e13c:	b002      	add	sp, #8
 801e13e:	bd10      	pop	{r4, pc}

0801e140 <_ZN8touchgfx6ScreenC1Ev>:
 801e140:	b570      	push	{r4, r5, r6, lr}
 801e142:	4b17      	ldr	r3, [pc, #92]	; (801e1a0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801e144:	4605      	mov	r5, r0
 801e146:	4a17      	ldr	r2, [pc, #92]	; (801e1a4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801e148:	2101      	movs	r1, #1
 801e14a:	f845 3b04 	str.w	r3, [r5], #4
 801e14e:	2300      	movs	r3, #0
 801e150:	6042      	str	r2, [r0, #4]
 801e152:	4604      	mov	r4, r0
 801e154:	8103      	strh	r3, [r0, #8]
 801e156:	8143      	strh	r3, [r0, #10]
 801e158:	8183      	strh	r3, [r0, #12]
 801e15a:	81c3      	strh	r3, [r0, #14]
 801e15c:	8203      	strh	r3, [r0, #16]
 801e15e:	8243      	strh	r3, [r0, #18]
 801e160:	8283      	strh	r3, [r0, #20]
 801e162:	82c3      	strh	r3, [r0, #22]
 801e164:	6203      	str	r3, [r0, #32]
 801e166:	8483      	strh	r3, [r0, #36]	; 0x24
 801e168:	84c3      	strh	r3, [r0, #38]	; 0x26
 801e16a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801e16e:	6343      	str	r3, [r0, #52]	; 0x34
 801e170:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801e174:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801e178:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801e17c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801e180:	4b09      	ldr	r3, [pc, #36]	; (801e1a8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801e182:	4628      	mov	r0, r5
 801e184:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e188:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801e18a:	4a08      	ldr	r2, [pc, #32]	; (801e1ac <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801e18c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e190:	4798      	blx	r3
 801e192:	6863      	ldr	r3, [r4, #4]
 801e194:	4628      	mov	r0, r5
 801e196:	4631      	mov	r1, r6
 801e198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e19a:	4798      	blx	r3
 801e19c:	4620      	mov	r0, r4
 801e19e:	bd70      	pop	{r4, r5, r6, pc}
 801e1a0:	0802c794 	.word	0x0802c794
 801e1a4:	0802c0f0 	.word	0x0802c0f0
 801e1a8:	24025cfe 	.word	0x24025cfe
 801e1ac:	24025cfc 	.word	0x24025cfc

0801e1b0 <_ZN8touchgfx6Screen4drawEv>:
 801e1b0:	4b09      	ldr	r3, [pc, #36]	; (801e1d8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801e1b2:	b507      	push	{r0, r1, r2, lr}
 801e1b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e1b8:	2100      	movs	r1, #0
 801e1ba:	4b08      	ldr	r3, [pc, #32]	; (801e1dc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801e1bc:	9100      	str	r1, [sp, #0]
 801e1be:	4669      	mov	r1, sp
 801e1c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e1c4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e1c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e1cc:	6803      	ldr	r3, [r0, #0]
 801e1ce:	689b      	ldr	r3, [r3, #8]
 801e1d0:	4798      	blx	r3
 801e1d2:	b003      	add	sp, #12
 801e1d4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e1d8:	24025cfc 	.word	0x24025cfc
 801e1dc:	24025cfe 	.word	0x24025cfe

0801e1e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e1e8:	b089      	sub	sp, #36	; 0x24
 801e1ea:	4680      	mov	r8, r0
 801e1ec:	460c      	mov	r4, r1
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	4615      	mov	r5, r2
 801e1f2:	dd0e      	ble.n	801e212 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e1f4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	dd0a      	ble.n	801e212 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e1fc:	4628      	mov	r0, r5
 801e1fe:	f7ff ff5b 	bl	801e0b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e202:	4621      	mov	r1, r4
 801e204:	f7fe fb90 	bl	801c928 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e208:	69eb      	ldr	r3, [r5, #28]
 801e20a:	b928      	cbnz	r0, 801e218 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801e20c:	461d      	mov	r5, r3
 801e20e:	2b00      	cmp	r3, #0
 801e210:	d1f4      	bne.n	801e1fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801e212:	b009      	add	sp, #36	; 0x24
 801e214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e218:	ae04      	add	r6, sp, #16
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	f000 80b5 	beq.w	801e38a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e220:	682b      	ldr	r3, [r5, #0]
 801e222:	4629      	mov	r1, r5
 801e224:	a802      	add	r0, sp, #8
 801e226:	68db      	ldr	r3, [r3, #12]
 801e228:	4798      	blx	r3
 801e22a:	4628      	mov	r0, r5
 801e22c:	f7ff ff60 	bl	801e0f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e230:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801e234:	4407      	add	r7, r0
 801e236:	4628      	mov	r0, r5
 801e238:	f7ff ff6e 	bl	801e118 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e23c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e240:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801e244:	b23f      	sxth	r7, r7
 801e246:	4418      	add	r0, r3
 801e248:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801e24c:	4621      	mov	r1, r4
 801e24e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e252:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e256:	4630      	mov	r0, r6
 801e258:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e25c:	f8ad 7010 	strh.w	r7, [sp, #16]
 801e260:	f7fb fef2 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801e264:	4628      	mov	r0, r5
 801e266:	f7ff ff27 	bl	801e0b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e26a:	ab06      	add	r3, sp, #24
 801e26c:	4602      	mov	r2, r0
 801e26e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e272:	e883 0003 	stmia.w	r3, {r0, r1}
 801e276:	4611      	mov	r1, r2
 801e278:	4618      	mov	r0, r3
 801e27a:	f7fb fee5 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801e27e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801e282:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e286:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801e28a:	4299      	cmp	r1, r3
 801e28c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801e290:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801e294:	d10b      	bne.n	801e2ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e296:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e29a:	4552      	cmp	r2, sl
 801e29c:	d107      	bne.n	801e2ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e29e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e2a2:	455a      	cmp	r2, fp
 801e2a4:	d103      	bne.n	801e2ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e2a6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e2aa:	454a      	cmp	r2, r9
 801e2ac:	d06d      	beq.n	801e38a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e2ae:	f1bb 0f00 	cmp.w	fp, #0
 801e2b2:	dd65      	ble.n	801e380 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e2b4:	f1b9 0f00 	cmp.w	r9, #0
 801e2b8:	dd62      	ble.n	801e380 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e2ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e2be:	fa1f f08a 	uxth.w	r0, sl
 801e2c2:	4552      	cmp	r2, sl
 801e2c4:	9000      	str	r0, [sp, #0]
 801e2c6:	da12      	bge.n	801e2ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801e2c8:	9301      	str	r3, [sp, #4]
 801e2ca:	9b00      	ldr	r3, [sp, #0]
 801e2cc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e2d0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e2d4:	1a9a      	subs	r2, r3, r2
 801e2d6:	f8ad 1010 	strh.w	r1, [sp, #16]
 801e2da:	4631      	mov	r1, r6
 801e2dc:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e2e0:	4640      	mov	r0, r8
 801e2e2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801e2e6:	69ea      	ldr	r2, [r5, #28]
 801e2e8:	f7ff ff7a 	bl	801e1e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e2ec:	9b01      	ldr	r3, [sp, #4]
 801e2ee:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e2f2:	b29f      	uxth	r7, r3
 801e2f4:	429a      	cmp	r2, r3
 801e2f6:	da0d      	bge.n	801e314 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801e2f8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e2fc:	1aba      	subs	r2, r7, r2
 801e2fe:	f8ad a012 	strh.w	sl, [sp, #18]
 801e302:	4631      	mov	r1, r6
 801e304:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e308:	4640      	mov	r0, r8
 801e30a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e30e:	69ea      	ldr	r2, [r5, #28]
 801e310:	f7ff ff66 	bl	801e1e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e314:	8822      	ldrh	r2, [r4, #0]
 801e316:	445f      	add	r7, fp
 801e318:	88a3      	ldrh	r3, [r4, #4]
 801e31a:	b2bf      	uxth	r7, r7
 801e31c:	4413      	add	r3, r2
 801e31e:	b23a      	sxth	r2, r7
 801e320:	b29b      	uxth	r3, r3
 801e322:	b219      	sxth	r1, r3
 801e324:	4291      	cmp	r1, r2
 801e326:	dd0d      	ble.n	801e344 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801e328:	1bdb      	subs	r3, r3, r7
 801e32a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e32e:	f8ad a012 	strh.w	sl, [sp, #18]
 801e332:	4631      	mov	r1, r6
 801e334:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e338:	4640      	mov	r0, r8
 801e33a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e33e:	69ea      	ldr	r2, [r5, #28]
 801e340:	f7ff ff4e 	bl	801e1e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e344:	88e2      	ldrh	r2, [r4, #6]
 801e346:	8863      	ldrh	r3, [r4, #2]
 801e348:	4413      	add	r3, r2
 801e34a:	9a00      	ldr	r2, [sp, #0]
 801e34c:	444a      	add	r2, r9
 801e34e:	b29b      	uxth	r3, r3
 801e350:	fa1f f982 	uxth.w	r9, r2
 801e354:	b219      	sxth	r1, r3
 801e356:	fa0f f289 	sxth.w	r2, r9
 801e35a:	428a      	cmp	r2, r1
 801e35c:	da15      	bge.n	801e38a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e35e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e362:	eba3 0309 	sub.w	r3, r3, r9
 801e366:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e36a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e36e:	4631      	mov	r1, r6
 801e370:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e374:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e378:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e37c:	69ea      	ldr	r2, [r5, #28]
 801e37e:	e001      	b.n	801e384 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801e380:	69ea      	ldr	r2, [r5, #28]
 801e382:	4621      	mov	r1, r4
 801e384:	4640      	mov	r0, r8
 801e386:	f7ff ff2b 	bl	801e1e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e38a:	4628      	mov	r0, r5
 801e38c:	f7ff fe94 	bl	801e0b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e390:	6861      	ldr	r1, [r4, #4]
 801e392:	4602      	mov	r2, r0
 801e394:	4633      	mov	r3, r6
 801e396:	6820      	ldr	r0, [r4, #0]
 801e398:	c303      	stmia	r3!, {r0, r1}
 801e39a:	4611      	mov	r1, r2
 801e39c:	4630      	mov	r0, r6
 801e39e:	f7fb fe53 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801e3a2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	f77f af33 	ble.w	801e212 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e3ac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	f77f af2e 	ble.w	801e212 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e3b6:	4628      	mov	r0, r5
 801e3b8:	f7ff fe9a 	bl	801e0f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e3bc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e3c0:	1a18      	subs	r0, r3, r0
 801e3c2:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e3c6:	4628      	mov	r0, r5
 801e3c8:	f7ff fea6 	bl	801e118 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e3cc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e3d0:	4631      	mov	r1, r6
 801e3d2:	1a18      	subs	r0, r3, r0
 801e3d4:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e3d8:	4628      	mov	r0, r5
 801e3da:	682b      	ldr	r3, [r5, #0]
 801e3dc:	689b      	ldr	r3, [r3, #8]
 801e3de:	4798      	blx	r3
 801e3e0:	e717      	b.n	801e212 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801e3e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801e3e2:	b570      	push	{r4, r5, r6, lr}
 801e3e4:	1d06      	adds	r6, r0, #4
 801e3e6:	b086      	sub	sp, #24
 801e3e8:	460c      	mov	r4, r1
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	4631      	mov	r1, r6
 801e3ee:	4605      	mov	r5, r0
 801e3f0:	a802      	add	r0, sp, #8
 801e3f2:	9301      	str	r3, [sp, #4]
 801e3f4:	f7ff fc7e 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e3f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e3fc:	8822      	ldrh	r2, [r4, #0]
 801e3fe:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801e402:	1ad2      	subs	r2, r2, r3
 801e404:	8863      	ldrh	r3, [r4, #2]
 801e406:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e40a:	1a5b      	subs	r3, r3, r1
 801e40c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e410:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e414:	aa01      	add	r2, sp, #4
 801e416:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e41a:	4630      	mov	r0, r6
 801e41c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e420:	a904      	add	r1, sp, #16
 801e422:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e426:	f7fb fee7 	bl	801a1f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801e42a:	9a01      	ldr	r2, [sp, #4]
 801e42c:	b11a      	cbz	r2, 801e436 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801e42e:	4621      	mov	r1, r4
 801e430:	4628      	mov	r0, r5
 801e432:	f7ff fed5 	bl	801e1e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e436:	b006      	add	sp, #24
 801e438:	bd70      	pop	{r4, r5, r6, pc}

0801e43a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801e43a:	4602      	mov	r2, r0
 801e43c:	b530      	push	{r4, r5, lr}
 801e43e:	4604      	mov	r4, r0
 801e440:	b085      	sub	sp, #20
 801e442:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801e446:	460d      	mov	r5, r1
 801e448:	466b      	mov	r3, sp
 801e44a:	6851      	ldr	r1, [r2, #4]
 801e44c:	c303      	stmia	r3!, {r0, r1}
 801e44e:	4629      	mov	r1, r5
 801e450:	4668      	mov	r0, sp
 801e452:	f7fb fdf9 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 801e456:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801e45a:	b12b      	cbz	r3, 801e468 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801e45c:	4669      	mov	r1, sp
 801e45e:	4620      	mov	r0, r4
 801e460:	f7ff ffbf 	bl	801e3e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801e464:	b005      	add	sp, #20
 801e466:	bd30      	pop	{r4, r5, pc}
 801e468:	3404      	adds	r4, #4
 801e46a:	a802      	add	r0, sp, #8
 801e46c:	4621      	mov	r1, r4
 801e46e:	f7ff fc41 	bl	801dcf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e472:	f8bd 3000 	ldrh.w	r3, [sp]
 801e476:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801e47a:	4669      	mov	r1, sp
 801e47c:	4620      	mov	r0, r4
 801e47e:	1a9b      	subs	r3, r3, r2
 801e480:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e484:	f8ad 3000 	strh.w	r3, [sp]
 801e488:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e48c:	1a9b      	subs	r3, r3, r2
 801e48e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e492:	f7fb fe78 	bl	801a186 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801e496:	e7e5      	b.n	801e464 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801e498 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801e498:	460b      	mov	r3, r1
 801e49a:	680a      	ldr	r2, [r1, #0]
 801e49c:	1d01      	adds	r1, r0, #4
 801e49e:	6992      	ldr	r2, [r2, #24]
 801e4a0:	4618      	mov	r0, r3
 801e4a2:	4710      	bx	r2

0801e4a4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801e4a4:	4298      	cmp	r0, r3
 801e4a6:	d200      	bcs.n	801e4aa <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801e4a8:	b913      	cbnz	r3, 801e4b0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801e4aa:	440a      	add	r2, r1
 801e4ac:	b210      	sxth	r0, r2
 801e4ae:	4770      	bx	lr
 801e4b0:	ee07 0a90 	vmov	s15, r0
 801e4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e4b8:	ee07 3a90 	vmov	s15, r3
 801e4bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e4c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e4c4:	ee07 2a90 	vmov	s15, r2
 801e4c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e4cc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801e4d0:	ee07 1a90 	vmov	s15, r1
 801e4d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e4d8:	ee37 7a66 	vsub.f32	s14, s14, s13
 801e4dc:	ee67 5a07 	vmul.f32	s11, s14, s14
 801e4e0:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e4e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801e4e8:	eee6 7a26 	vfma.f32	s15, s12, s13
 801e4ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4f4:	bfcc      	ite	gt
 801e4f6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801e4fa:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801e4fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e502:	ee17 3a90 	vmov	r3, s15
 801e506:	b218      	sxth	r0, r3
 801e508:	4770      	bx	lr

0801e50a <_ZN8touchgfx12TextProviderC1Ev>:
 801e50a:	b538      	push	{r3, r4, r5, lr}
 801e50c:	2500      	movs	r5, #0
 801e50e:	2302      	movs	r3, #2
 801e510:	4604      	mov	r4, r0
 801e512:	220e      	movs	r2, #14
 801e514:	7403      	strb	r3, [r0, #16]
 801e516:	4629      	mov	r1, r5
 801e518:	6145      	str	r5, [r0, #20]
 801e51a:	7605      	strb	r5, [r0, #24]
 801e51c:	83c5      	strh	r5, [r0, #30]
 801e51e:	8405      	strh	r5, [r0, #32]
 801e520:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e522:	8705      	strh	r5, [r0, #56]	; 0x38
 801e524:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801e526:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801e52a:	e9c0 5500 	strd	r5, r5, [r0]
 801e52e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801e532:	304c      	adds	r0, #76	; 0x4c
 801e534:	f009 fa0e 	bl	8027954 <memset>
 801e538:	2301      	movs	r3, #1
 801e53a:	4620      	mov	r0, r4
 801e53c:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801e540:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e544:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801e548:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801e54c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801e550:	f7eb fb3e 	bl	8009bd0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801e554:	4620      	mov	r0, r4
 801e556:	bd38      	pop	{r3, r4, r5, pc}

0801e558 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801e558:	b530      	push	{r4, r5, lr}
 801e55a:	2500      	movs	r5, #0
 801e55c:	2401      	movs	r4, #1
 801e55e:	6843      	ldr	r3, [r0, #4]
 801e560:	b913      	cbnz	r3, 801e568 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801e562:	6803      	ldr	r3, [r0, #0]
 801e564:	b313      	cbz	r3, 801e5ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e566:	6043      	str	r3, [r0, #4]
 801e568:	7e03      	ldrb	r3, [r0, #24]
 801e56a:	b143      	cbz	r3, 801e57e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801e56c:	6943      	ldr	r3, [r0, #20]
 801e56e:	b12b      	cbz	r3, 801e57c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e570:	881a      	ldrh	r2, [r3, #0]
 801e572:	b11a      	cbz	r2, 801e57c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e574:	1c9a      	adds	r2, r3, #2
 801e576:	6142      	str	r2, [r0, #20]
 801e578:	8818      	ldrh	r0, [r3, #0]
 801e57a:	bd30      	pop	{r4, r5, pc}
 801e57c:	7605      	strb	r5, [r0, #24]
 801e57e:	6843      	ldr	r3, [r0, #4]
 801e580:	8819      	ldrh	r1, [r3, #0]
 801e582:	b199      	cbz	r1, 801e5ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e584:	1c9a      	adds	r2, r3, #2
 801e586:	2902      	cmp	r1, #2
 801e588:	6042      	str	r2, [r0, #4]
 801e58a:	d1f5      	bne.n	801e578 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801e58c:	7c03      	ldrb	r3, [r0, #16]
 801e58e:	2b01      	cmp	r3, #1
 801e590:	d8e5      	bhi.n	801e55e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e592:	1c5a      	adds	r2, r3, #1
 801e594:	3302      	adds	r3, #2
 801e596:	7402      	strb	r2, [r0, #16]
 801e598:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801e59c:	6143      	str	r3, [r0, #20]
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	d0dd      	beq.n	801e55e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e5a2:	881b      	ldrh	r3, [r3, #0]
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d0da      	beq.n	801e55e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e5a8:	7604      	strb	r4, [r0, #24]
 801e5aa:	e7d8      	b.n	801e55e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	e7e4      	b.n	801e57a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801e5b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801e5b0:	6001      	str	r1, [r0, #0]
 801e5b2:	2100      	movs	r1, #0
 801e5b4:	b430      	push	{r4, r5}
 801e5b6:	6041      	str	r1, [r0, #4]
 801e5b8:	6815      	ldr	r5, [r2, #0]
 801e5ba:	6085      	str	r5, [r0, #8]
 801e5bc:	6852      	ldr	r2, [r2, #4]
 801e5be:	6443      	str	r3, [r0, #68]	; 0x44
 801e5c0:	9b02      	ldr	r3, [sp, #8]
 801e5c2:	60c2      	str	r2, [r0, #12]
 801e5c4:	7401      	strb	r1, [r0, #16]
 801e5c6:	6141      	str	r1, [r0, #20]
 801e5c8:	7601      	strb	r1, [r0, #24]
 801e5ca:	8701      	strh	r1, [r0, #56]	; 0x38
 801e5cc:	8401      	strh	r1, [r0, #32]
 801e5ce:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801e5d2:	6483      	str	r3, [r0, #72]	; 0x48
 801e5d4:	bc30      	pop	{r4, r5}
 801e5d6:	f7eb bafb 	b.w	8009bd0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801e5da <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801e5da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5dc:	4605      	mov	r5, r0
 801e5de:	4608      	mov	r0, r1
 801e5e0:	b1f1      	cbz	r1, 801e620 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801e5e2:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801e5e6:	460b      	mov	r3, r1
 801e5e8:	f101 0708 	add.w	r7, r1, #8
 801e5ec:	4622      	mov	r2, r4
 801e5ee:	6818      	ldr	r0, [r3, #0]
 801e5f0:	3308      	adds	r3, #8
 801e5f2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e5f6:	4626      	mov	r6, r4
 801e5f8:	42bb      	cmp	r3, r7
 801e5fa:	c603      	stmia	r6!, {r0, r1}
 801e5fc:	4634      	mov	r4, r6
 801e5fe:	d1f6      	bne.n	801e5ee <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801e600:	6818      	ldr	r0, [r3, #0]
 801e602:	6030      	str	r0, [r6, #0]
 801e604:	4610      	mov	r0, r2
 801e606:	889b      	ldrh	r3, [r3, #4]
 801e608:	80b3      	strh	r3, [r6, #4]
 801e60a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801e60e:	015b      	lsls	r3, r3, #5
 801e610:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e614:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801e618:	430b      	orrs	r3, r1
 801e61a:	425b      	negs	r3, r3
 801e61c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801e620:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e622 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801e622:	b538      	push	{r3, r4, r5, lr}
 801e624:	460c      	mov	r4, r1
 801e626:	6811      	ldr	r1, [r2, #0]
 801e628:	4610      	mov	r0, r2
 801e62a:	68cd      	ldr	r5, [r1, #12]
 801e62c:	4619      	mov	r1, r3
 801e62e:	47a8      	blx	r5
 801e630:	2800      	cmp	r0, #0
 801e632:	bf08      	it	eq
 801e634:	4620      	moveq	r0, r4
 801e636:	bd38      	pop	{r3, r4, r5, pc}

0801e638 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e63a:	4604      	mov	r4, r0
 801e63c:	4615      	mov	r5, r2
 801e63e:	4608      	mov	r0, r1
 801e640:	b93a      	cbnz	r2, 801e652 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801e642:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801e646:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801e64a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801e64e:	4628      	mov	r0, r5
 801e650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e652:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801e656:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801e65a:	8893      	ldrh	r3, [r2, #4]
 801e65c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801e660:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801e664:	79ee      	ldrb	r6, [r5, #7]
 801e666:	4316      	orrs	r6, r2
 801e668:	19da      	adds	r2, r3, r7
 801e66a:	b291      	uxth	r1, r2
 801e66c:	b2b7      	uxth	r7, r6
 801e66e:	291d      	cmp	r1, #29
 801e670:	d87b      	bhi.n	801e76a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801e672:	2201      	movs	r2, #1
 801e674:	10f6      	asrs	r6, r6, #3
 801e676:	408a      	lsls	r2, r1
 801e678:	4974      	ldr	r1, [pc, #464]	; (801e84c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801e67a:	420a      	tst	r2, r1
 801e67c:	d12e      	bne.n	801e6dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801e67e:	f412 7f60 	tst.w	r2, #896	; 0x380
 801e682:	d072      	beq.n	801e76a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801e684:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801e688:	462b      	mov	r3, r5
 801e68a:	f105 0e08 	add.w	lr, r5, #8
 801e68e:	4615      	mov	r5, r2
 801e690:	6818      	ldr	r0, [r3, #0]
 801e692:	3308      	adds	r3, #8
 801e694:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e698:	4694      	mov	ip, r2
 801e69a:	4573      	cmp	r3, lr
 801e69c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801e6a0:	4662      	mov	r2, ip
 801e6a2:	d1f5      	bne.n	801e690 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801e6a4:	6818      	ldr	r0, [r3, #0]
 801e6a6:	f8cc 0000 	str.w	r0, [ip]
 801e6aa:	889b      	ldrh	r3, [r3, #4]
 801e6ac:	f8ac 3004 	strh.w	r3, [ip, #4]
 801e6b0:	b2b3      	uxth	r3, r6
 801e6b2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801e6b6:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801e6ba:	1aca      	subs	r2, r1, r3
 801e6bc:	1bcf      	subs	r7, r1, r7
 801e6be:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801e6c2:	b292      	uxth	r2, r2
 801e6c4:	1afb      	subs	r3, r7, r3
 801e6c6:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801e6ca:	10d2      	asrs	r2, r2, #3
 801e6cc:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801e6d0:	4302      	orrs	r2, r0
 801e6d2:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801e6d6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801e6da:	e7b8      	b.n	801e64e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e6dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e6de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e6e2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801e6e4:	f640 6333 	movw	r3, #3635	; 0xe33
 801e6e8:	4299      	cmp	r1, r3
 801e6ea:	d110      	bne.n	801e70e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801e6ec:	6803      	ldr	r3, [r0, #0]
 801e6ee:	68db      	ldr	r3, [r3, #12]
 801e6f0:	4798      	blx	r3
 801e6f2:	7b41      	ldrb	r1, [r0, #13]
 801e6f4:	00cb      	lsls	r3, r1, #3
 801e6f6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e6fa:	7a03      	ldrb	r3, [r0, #8]
 801e6fc:	0648      	lsls	r0, r1, #25
 801e6fe:	ea43 0302 	orr.w	r3, r3, r2
 801e702:	bf44      	itt	mi
 801e704:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e708:	b21b      	sxthmi	r3, r3
 801e70a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e70e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801e712:	462a      	mov	r2, r5
 801e714:	f105 0c08 	add.w	ip, r5, #8
 801e718:	443b      	add	r3, r7
 801e71a:	4433      	add	r3, r6
 801e71c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801e720:	b29b      	uxth	r3, r3
 801e722:	4635      	mov	r5, r6
 801e724:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e728:	6810      	ldr	r0, [r2, #0]
 801e72a:	3208      	adds	r2, #8
 801e72c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801e730:	4637      	mov	r7, r6
 801e732:	4562      	cmp	r2, ip
 801e734:	c703      	stmia	r7!, {r0, r1}
 801e736:	463e      	mov	r6, r7
 801e738:	d1f6      	bne.n	801e728 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801e73a:	6810      	ldr	r0, [r2, #0]
 801e73c:	6038      	str	r0, [r7, #0]
 801e73e:	8892      	ldrh	r2, [r2, #4]
 801e740:	80ba      	strh	r2, [r7, #4]
 801e742:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e746:	10db      	asrs	r3, r3, #3
 801e748:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e74c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e750:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e754:	4313      	orrs	r3, r2
 801e756:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801e75a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e75e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801e762:	1a9b      	subs	r3, r3, r2
 801e764:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801e768:	e771      	b.n	801e64e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e76a:	f023 0204 	bic.w	r2, r3, #4
 801e76e:	f640 611b 	movw	r1, #3611	; 0xe1b
 801e772:	428a      	cmp	r2, r1
 801e774:	d003      	beq.n	801e77e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801e776:	f640 621d 	movw	r2, #3613	; 0xe1d
 801e77a:	4293      	cmp	r3, r2
 801e77c:	d120      	bne.n	801e7c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801e77e:	3b01      	subs	r3, #1
 801e780:	4602      	mov	r2, r0
 801e782:	4629      	mov	r1, r5
 801e784:	4620      	mov	r0, r4
 801e786:	b29b      	uxth	r3, r3
 801e788:	f7ff ff4b 	bl	801e622 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e78c:	7b41      	ldrb	r1, [r0, #13]
 801e78e:	00cb      	lsls	r3, r1, #3
 801e790:	0649      	lsls	r1, r1, #25
 801e792:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e796:	7a03      	ldrb	r3, [r0, #8]
 801e798:	ea43 0302 	orr.w	r3, r3, r2
 801e79c:	bf44      	itt	mi
 801e79e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e7a2:	b21b      	sxthmi	r3, r3
 801e7a4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e7a8:	7b6b      	ldrb	r3, [r5, #13]
 801e7aa:	7aaa      	ldrb	r2, [r5, #10]
 801e7ac:	005b      	lsls	r3, r3, #1
 801e7ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e7b2:	4313      	orrs	r3, r2
 801e7b4:	115a      	asrs	r2, r3, #5
 801e7b6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801e7ba:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801e7be:	e035      	b.n	801e82c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801e7c0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801e7c4:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801e7c8:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801e7cc:	7a2a      	ldrb	r2, [r5, #8]
 801e7ce:	ea42 0201 	orr.w	r2, r2, r1
 801e7d2:	f640 6109 	movw	r1, #3593	; 0xe09
 801e7d6:	bf1c      	itt	ne
 801e7d8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801e7dc:	b212      	sxthne	r2, r2
 801e7de:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801e7e2:	f023 0210 	bic.w	r2, r3, #16
 801e7e6:	428a      	cmp	r2, r1
 801e7e8:	d003      	beq.n	801e7f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801e7ea:	f640 6213 	movw	r2, #3603	; 0xe13
 801e7ee:	4293      	cmp	r3, r2
 801e7f0:	d129      	bne.n	801e846 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801e7f2:	7b6e      	ldrb	r6, [r5, #13]
 801e7f4:	4629      	mov	r1, r5
 801e7f6:	0076      	lsls	r6, r6, #1
 801e7f8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801e7fc:	7aae      	ldrb	r6, [r5, #10]
 801e7fe:	4316      	orrs	r6, r2
 801e800:	f640 6213 	movw	r2, #3603	; 0xe13
 801e804:	4293      	cmp	r3, r2
 801e806:	4602      	mov	r2, r0
 801e808:	4620      	mov	r0, r4
 801e80a:	bf16      	itet	ne
 801e80c:	f103 33ff 	addne.w	r3, r3, #4294967295
 801e810:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801e814:	b29b      	uxthne	r3, r3
 801e816:	f7ff ff04 	bl	801e622 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e81a:	7b43      	ldrb	r3, [r0, #13]
 801e81c:	7a82      	ldrb	r2, [r0, #10]
 801e81e:	005b      	lsls	r3, r3, #1
 801e820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e824:	4313      	orrs	r3, r2
 801e826:	1af6      	subs	r6, r6, r3
 801e828:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801e82c:	7b69      	ldrb	r1, [r5, #13]
 801e82e:	00cb      	lsls	r3, r1, #3
 801e830:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e834:	7a2b      	ldrb	r3, [r5, #8]
 801e836:	4313      	orrs	r3, r2
 801e838:	064a      	lsls	r2, r1, #25
 801e83a:	bf44      	itt	mi
 801e83c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e840:	b21b      	sxthmi	r3, r3
 801e842:	1bdb      	subs	r3, r3, r7
 801e844:	e747      	b.n	801e6d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801e846:	2300      	movs	r3, #0
 801e848:	e7b7      	b.n	801e7ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801e84a:	bf00      	nop
 801e84c:	3fc00079 	.word	0x3fc00079

0801e850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801e850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e854:	4604      	mov	r4, r0
 801e856:	b942      	cbnz	r2, 801e86a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801e858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e85c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801e860:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801e864:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801e868:	e047      	b.n	801e8fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801e86a:	7b51      	ldrb	r1, [r2, #13]
 801e86c:	8893      	ldrh	r3, [r2, #4]
 801e86e:	010d      	lsls	r5, r1, #4
 801e870:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801e874:	79d5      	ldrb	r5, [r2, #7]
 801e876:	4305      	orrs	r5, r0
 801e878:	2d04      	cmp	r5, #4
 801e87a:	bfcc      	ite	gt
 801e87c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801e880:	f04f 0e01 	movle.w	lr, #1
 801e884:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801e888:	f200 80ab 	bhi.w	801e9e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801e88c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801e890:	4283      	cmp	r3, r0
 801e892:	d216      	bcs.n	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e894:	f240 605b 	movw	r0, #1627	; 0x65b
 801e898:	4283      	cmp	r3, r0
 801e89a:	d859      	bhi.n	801e950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801e89c:	f240 6057 	movw	r0, #1623	; 0x657
 801e8a0:	4283      	cmp	r3, r0
 801e8a2:	d20e      	bcs.n	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e8a4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801e8a8:	d24a      	bcs.n	801e940 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801e8aa:	f240 604e 	movw	r0, #1614	; 0x64e
 801e8ae:	4283      	cmp	r3, r0
 801e8b0:	d207      	bcs.n	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e8b2:	f240 601a 	movw	r0, #1562	; 0x61a
 801e8b6:	4283      	cmp	r3, r0
 801e8b8:	d02a      	beq.n	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e8ba:	d821      	bhi.n	801e900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801e8bc:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801e8c0:	d35b      	bcc.n	801e97a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e8c2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801e8c6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e8ca:	f040 80d0 	bne.w	801ea6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801e8ce:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801e8d2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e8d6:	f040 80ca 	bne.w	801ea6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801e8da:	00cb      	lsls	r3, r1, #3
 801e8dc:	0649      	lsls	r1, r1, #25
 801e8de:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e8e2:	7a13      	ldrb	r3, [r2, #8]
 801e8e4:	ea43 0300 	orr.w	r3, r3, r0
 801e8e8:	bf44      	itt	mi
 801e8ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e8ee:	b21b      	sxthmi	r3, r3
 801e8f0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e8f4:	1b5d      	subs	r5, r3, r5
 801e8f6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e8fa:	4610      	mov	r0, r2
 801e8fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e900:	f240 604b 	movw	r0, #1611	; 0x64b
 801e904:	4283      	cmp	r3, r0
 801e906:	d338      	bcc.n	801e97a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e908:	f240 604c 	movw	r0, #1612	; 0x64c
 801e90c:	4283      	cmp	r3, r0
 801e90e:	d9d8      	bls.n	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e910:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801e914:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801e918:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e91c:	f040 80f3 	bne.w	801eb06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801e920:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e924:	f040 80ef 	bne.w	801eb06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801e928:	00cb      	lsls	r3, r1, #3
 801e92a:	064e      	lsls	r6, r1, #25
 801e92c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e930:	7a13      	ldrb	r3, [r2, #8]
 801e932:	ea43 0300 	orr.w	r3, r3, r0
 801e936:	bf44      	itt	mi
 801e938:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e93c:	b21b      	sxthmi	r3, r3
 801e93e:	e7d9      	b.n	801e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801e940:	f240 6054 	movw	r0, #1620	; 0x654
 801e944:	4283      	cmp	r3, r0
 801e946:	d8e3      	bhi.n	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e948:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801e94c:	d9e0      	bls.n	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e94e:	e7b8      	b.n	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e950:	f240 6074 	movw	r0, #1652	; 0x674
 801e954:	4283      	cmp	r3, r0
 801e956:	d0b4      	beq.n	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e958:	d82d      	bhi.n	801e9b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801e95a:	f240 605e 	movw	r0, #1630	; 0x65e
 801e95e:	4283      	cmp	r3, r0
 801e960:	d804      	bhi.n	801e96c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801e962:	f240 605d 	movw	r0, #1629	; 0x65d
 801e966:	4283      	cmp	r3, r0
 801e968:	d3d2      	bcc.n	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e96a:	e7aa      	b.n	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e96c:	f240 605f 	movw	r0, #1631	; 0x65f
 801e970:	4283      	cmp	r3, r0
 801e972:	d0cd      	beq.n	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e974:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801e978:	d0a3      	beq.n	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e97a:	00cb      	lsls	r3, r1, #3
 801e97c:	0649      	lsls	r1, r1, #25
 801e97e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e982:	7a13      	ldrb	r3, [r2, #8]
 801e984:	ea43 0300 	orr.w	r3, r3, r0
 801e988:	bf44      	itt	mi
 801e98a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e98e:	b21b      	sxthmi	r3, r3
 801e990:	1b5d      	subs	r5, r3, r5
 801e992:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e996:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e99a:	7b53      	ldrb	r3, [r2, #13]
 801e99c:	015b      	lsls	r3, r3, #5
 801e99e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e9a2:	7993      	ldrb	r3, [r2, #6]
 801e9a4:	430b      	orrs	r3, r1
 801e9a6:	2105      	movs	r1, #5
 801e9a8:	005b      	lsls	r3, r3, #1
 801e9aa:	fb93 f3f1 	sdiv	r3, r3, r1
 801e9ae:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801e9b2:	440b      	add	r3, r1
 801e9b4:	e756      	b.n	801e864 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801e9b6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801e9ba:	4283      	cmp	r3, r0
 801e9bc:	d809      	bhi.n	801e9d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801e9be:	f240 60df 	movw	r0, #1759	; 0x6df
 801e9c2:	4283      	cmp	r3, r0
 801e9c4:	f4bf af7d 	bcs.w	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e9c8:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801e9cc:	2b05      	cmp	r3, #5
 801e9ce:	d8d4      	bhi.n	801e97a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e9d0:	e777      	b.n	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e9d2:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801e9d6:	4283      	cmp	r3, r0
 801e9d8:	d09a      	beq.n	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e9da:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801e9de:	4283      	cmp	r3, r0
 801e9e0:	e7ca      	b.n	801e978 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e9e2:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801e9e6:	d22b      	bcs.n	801ea40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801e9e8:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801e9ec:	4283      	cmp	r3, r0
 801e9ee:	d28f      	bcs.n	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e9f0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e9f4:	4283      	cmp	r3, r0
 801e9f6:	d816      	bhi.n	801ea26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801e9f8:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801e9fc:	4283      	cmp	r3, r0
 801e9fe:	f4bf af60 	bcs.w	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ea02:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ea06:	4283      	cmp	r3, r0
 801ea08:	d80a      	bhi.n	801ea20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801ea0a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ea0e:	4283      	cmp	r3, r0
 801ea10:	f4bf af57 	bcs.w	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ea14:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ea18:	4283      	cmp	r3, r0
 801ea1a:	f43f af79 	beq.w	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ea1e:	e7ac      	b.n	801e97a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ea20:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ea24:	e7f8      	b.n	801ea18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801ea26:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ea2a:	4283      	cmp	r3, r0
 801ea2c:	d802      	bhi.n	801ea34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801ea2e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ea32:	e798      	b.n	801e966 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801ea34:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ea38:	4283      	cmp	r3, r0
 801ea3a:	f47f af42 	bne.w	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ea3e:	e767      	b.n	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ea40:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ea44:	4283      	cmp	r3, r0
 801ea46:	f43f af63 	beq.w	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ea4a:	d802      	bhi.n	801ea52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801ea4c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ea50:	e7f2      	b.n	801ea38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801ea52:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ea56:	4283      	cmp	r3, r0
 801ea58:	d805      	bhi.n	801ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801ea5a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ea5e:	4283      	cmp	r3, r0
 801ea60:	f4ff af2f 	bcc.w	801e8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ea64:	e754      	b.n	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ea66:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ea6a:	4283      	cmp	r3, r0
 801ea6c:	e7af      	b.n	801e9ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801ea6e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ea72:	4617      	mov	r7, r2
 801ea74:	f102 0808 	add.w	r8, r2, #8
 801ea78:	4666      	mov	r6, ip
 801ea7a:	6838      	ldr	r0, [r7, #0]
 801ea7c:	3708      	adds	r7, #8
 801ea7e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ea82:	46e6      	mov	lr, ip
 801ea84:	4547      	cmp	r7, r8
 801ea86:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ea8a:	46f4      	mov	ip, lr
 801ea8c:	d1f5      	bne.n	801ea7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801ea8e:	6838      	ldr	r0, [r7, #0]
 801ea90:	f8ce 0000 	str.w	r0, [lr]
 801ea94:	88b9      	ldrh	r1, [r7, #4]
 801ea96:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ea9a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ea9e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801eaa2:	d009      	beq.n	801eab8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801eaa4:	7b51      	ldrb	r1, [r2, #13]
 801eaa6:	7992      	ldrb	r2, [r2, #6]
 801eaa8:	0149      	lsls	r1, r1, #5
 801eaaa:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801eaae:	4311      	orrs	r1, r2
 801eab0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801eab4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801eab8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801eabc:	b2ad      	uxth	r5, r5
 801eabe:	d00d      	beq.n	801eadc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801eac0:	442b      	add	r3, r5
 801eac2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801eac6:	b29b      	uxth	r3, r3
 801eac8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801eacc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ead0:	10db      	asrs	r3, r3, #3
 801ead2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ead6:	4313      	orrs	r3, r2
 801ead8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801eadc:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801eae0:	00cb      	lsls	r3, r1, #3
 801eae2:	064f      	lsls	r7, r1, #25
 801eae4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801eae8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801eaec:	ea43 0302 	orr.w	r3, r3, r2
 801eaf0:	bf44      	itt	mi
 801eaf2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801eaf6:	b21b      	sxthmi	r3, r3
 801eaf8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801eafc:	1b5b      	subs	r3, r3, r5
 801eafe:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801eb02:	4632      	mov	r2, r6
 801eb04:	e6f9      	b.n	801e8fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801eb06:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801eb0a:	4617      	mov	r7, r2
 801eb0c:	f102 0908 	add.w	r9, r2, #8
 801eb10:	4666      	mov	r6, ip
 801eb12:	6838      	ldr	r0, [r7, #0]
 801eb14:	3708      	adds	r7, #8
 801eb16:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801eb1a:	46e0      	mov	r8, ip
 801eb1c:	454f      	cmp	r7, r9
 801eb1e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801eb22:	46c4      	mov	ip, r8
 801eb24:	d1f5      	bne.n	801eb12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801eb26:	6838      	ldr	r0, [r7, #0]
 801eb28:	f8c8 0000 	str.w	r0, [r8]
 801eb2c:	88b9      	ldrh	r1, [r7, #4]
 801eb2e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801eb32:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801eb36:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801eb3a:	d009      	beq.n	801eb50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801eb3c:	7b51      	ldrb	r1, [r2, #13]
 801eb3e:	7992      	ldrb	r2, [r2, #6]
 801eb40:	0149      	lsls	r1, r1, #5
 801eb42:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801eb46:	4311      	orrs	r1, r2
 801eb48:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801eb4c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801eb50:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801eb54:	d00e      	beq.n	801eb74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801eb56:	eba3 030e 	sub.w	r3, r3, lr
 801eb5a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801eb5e:	b29b      	uxth	r3, r3
 801eb60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801eb64:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801eb68:	10db      	asrs	r3, r3, #3
 801eb6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801eb6e:	4313      	orrs	r3, r2
 801eb70:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801eb74:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801eb78:	00cb      	lsls	r3, r1, #3
 801eb7a:	0648      	lsls	r0, r1, #25
 801eb7c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801eb80:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801eb84:	ea43 0302 	orr.w	r3, r3, r2
 801eb88:	bf44      	itt	mi
 801eb8a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801eb8e:	b21b      	sxthmi	r3, r3
 801eb90:	1b5d      	subs	r5, r3, r5
 801eb92:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801eb96:	e7b4      	b.n	801eb02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801eb98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801eb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb9c:	461e      	mov	r6, r3
 801eb9e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801eba0:	4604      	mov	r4, r0
 801eba2:	4617      	mov	r7, r2
 801eba4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801eba8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ebac:	f7ea ff6a 	bl	8009a84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ebb0:	4605      	mov	r5, r0
 801ebb2:	b918      	cbnz	r0, 801ebbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801ebb4:	6030      	str	r0, [r6, #0]
 801ebb6:	4628      	mov	r0, r5
 801ebb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ebbc:	683b      	ldr	r3, [r7, #0]
 801ebbe:	4601      	mov	r1, r0
 801ebc0:	4638      	mov	r0, r7
 801ebc2:	68db      	ldr	r3, [r3, #12]
 801ebc4:	4798      	blx	r3
 801ebc6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ebca:	4602      	mov	r2, r0
 801ebcc:	6030      	str	r0, [r6, #0]
 801ebce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ebd2:	d213      	bcs.n	801ebfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801ebd4:	4643      	mov	r3, r8
 801ebd6:	4639      	mov	r1, r7
 801ebd8:	4620      	mov	r0, r4
 801ebda:	f7ff fe39 	bl	801e850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ebde:	6030      	str	r0, [r6, #0]
 801ebe0:	6833      	ldr	r3, [r6, #0]
 801ebe2:	b143      	cbz	r3, 801ebf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801ebe4:	7b5a      	ldrb	r2, [r3, #13]
 801ebe6:	7a9b      	ldrb	r3, [r3, #10]
 801ebe8:	0052      	lsls	r2, r2, #1
 801ebea:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ebee:	4313      	orrs	r3, r2
 801ebf0:	bf0c      	ite	eq
 801ebf2:	2301      	moveq	r3, #1
 801ebf4:	2300      	movne	r3, #0
 801ebf6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ebfa:	e7dc      	b.n	801ebb6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801ebfc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ec00:	b29b      	uxth	r3, r3
 801ec02:	2b7f      	cmp	r3, #127	; 0x7f
 801ec04:	d804      	bhi.n	801ec10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801ec06:	4639      	mov	r1, r7
 801ec08:	4620      	mov	r0, r4
 801ec0a:	f7ff fd15 	bl	801e638 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ec0e:	e7e6      	b.n	801ebde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801ec10:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d0e3      	beq.n	801ebe0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ec18:	f640 1302 	movw	r3, #2306	; 0x902
 801ec1c:	429d      	cmp	r5, r3
 801ec1e:	d1df      	bne.n	801ebe0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ec20:	4601      	mov	r1, r0
 801ec22:	4620      	mov	r0, r4
 801ec24:	f7ff fcd9 	bl	801e5da <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ec28:	e7d9      	b.n	801ebde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801ec2a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ec2a:	b510      	push	{r4, lr}
 801ec2c:	4604      	mov	r4, r0
 801ec2e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801ec32:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ec34:	b1e1      	cbz	r1, 801ec70 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801ec36:	2b0a      	cmp	r3, #10
 801ec38:	d02d      	beq.n	801ec96 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ec3a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801ec3c:	3901      	subs	r1, #1
 801ec3e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ec42:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801ec44:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801ec48:	1c51      	adds	r1, r2, #1
 801ec4a:	b289      	uxth	r1, r1
 801ec4c:	2901      	cmp	r1, #1
 801ec4e:	bf8a      	itet	hi
 801ec50:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ec54:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801ec56:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801ec58:	1c5a      	adds	r2, r3, #1
 801ec5a:	8722      	strh	r2, [r4, #56]	; 0x38
 801ec5c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ec5e:	4413      	add	r3, r2
 801ec60:	b29b      	uxth	r3, r3
 801ec62:	2b09      	cmp	r3, #9
 801ec64:	bf88      	it	hi
 801ec66:	3b0a      	subhi	r3, #10
 801ec68:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ec6c:	8458      	strh	r0, [r3, #34]	; 0x22
 801ec6e:	e7de      	b.n	801ec2e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ec70:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ec72:	2b0a      	cmp	r3, #10
 801ec74:	d00f      	beq.n	801ec96 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ec76:	4620      	mov	r0, r4
 801ec78:	f7ff fc6e 	bl	801e558 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ec7c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ec7e:	1c5a      	adds	r2, r3, #1
 801ec80:	8722      	strh	r2, [r4, #56]	; 0x38
 801ec82:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ec84:	4413      	add	r3, r2
 801ec86:	b29b      	uxth	r3, r3
 801ec88:	2b09      	cmp	r3, #9
 801ec8a:	bf88      	it	hi
 801ec8c:	3b0a      	subhi	r3, #10
 801ec8e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ec92:	8458      	strh	r0, [r3, #34]	; 0x22
 801ec94:	e7ec      	b.n	801ec70 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801ec96:	bd10      	pop	{r4, pc}

0801ec98 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ec98:	b538      	push	{r3, r4, r5, lr}
 801ec9a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ec9c:	4604      	mov	r4, r0
 801ec9e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801eca2:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801eca4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801eca6:	3a01      	subs	r2, #1
 801eca8:	8702      	strh	r2, [r0, #56]	; 0x38
 801ecaa:	1c5a      	adds	r2, r3, #1
 801ecac:	b292      	uxth	r2, r2
 801ecae:	2a09      	cmp	r2, #9
 801ecb0:	bf8a      	itet	hi
 801ecb2:	3b09      	subhi	r3, #9
 801ecb4:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801ecb6:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801ecb8:	f7ff ffb7 	bl	801ec2a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ecbc:	8c23      	ldrh	r3, [r4, #32]
 801ecbe:	2b01      	cmp	r3, #1
 801ecc0:	bf9c      	itt	ls
 801ecc2:	3301      	addls	r3, #1
 801ecc4:	8423      	strhls	r3, [r4, #32]
 801ecc6:	8be3      	ldrh	r3, [r4, #30]
 801ecc8:	b90b      	cbnz	r3, 801ecce <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801ecca:	2302      	movs	r3, #2
 801eccc:	83e3      	strh	r3, [r4, #30]
 801ecce:	8be3      	ldrh	r3, [r4, #30]
 801ecd0:	4628      	mov	r0, r5
 801ecd2:	3b01      	subs	r3, #1
 801ecd4:	b29b      	uxth	r3, r3
 801ecd6:	83e3      	strh	r3, [r4, #30]
 801ecd8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ecdc:	8365      	strh	r5, [r4, #26]
 801ecde:	bd38      	pop	{r3, r4, r5, pc}

0801ece0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ece0:	428a      	cmp	r2, r1
 801ece2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ece6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801ece8:	d932      	bls.n	801ed50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801ecea:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801ecec:	1a54      	subs	r4, r2, r1
 801ecee:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801ecf2:	19ee      	adds	r6, r5, r7
 801ecf4:	fa1f fe84 	uxth.w	lr, r4
 801ecf8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801ecfc:	3e01      	subs	r6, #1
 801ecfe:	b2b4      	uxth	r4, r6
 801ed00:	eba4 090e 	sub.w	r9, r4, lr
 801ed04:	fa1f f989 	uxth.w	r9, r9
 801ed08:	2c09      	cmp	r4, #9
 801ed0a:	4626      	mov	r6, r4
 801ed0c:	bf88      	it	hi
 801ed0e:	f1a4 060a 	subhi.w	r6, r4, #10
 801ed12:	f1bc 0f00 	cmp.w	ip, #0
 801ed16:	f104 34ff 	add.w	r4, r4, #4294967295
 801ed1a:	bf08      	it	eq
 801ed1c:	f04f 0c02 	moveq.w	ip, #2
 801ed20:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ed24:	b2a4      	uxth	r4, r4
 801ed26:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ed2a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801ed2e:	454c      	cmp	r4, r9
 801ed30:	fa1f fc8c 	uxth.w	ip, ip
 801ed34:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ed38:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801ed3c:	d1e4      	bne.n	801ed08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801ed3e:	eba5 050e 	sub.w	r5, r5, lr
 801ed42:	eb0e 0408 	add.w	r4, lr, r8
 801ed46:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801ed4a:	8705      	strh	r5, [r0, #56]	; 0x38
 801ed4c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801ed50:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801ed52:	250a      	movs	r5, #10
 801ed54:	1a64      	subs	r4, r4, r1
 801ed56:	4439      	add	r1, r7
 801ed58:	b289      	uxth	r1, r1
 801ed5a:	8704      	strh	r4, [r0, #56]	; 0x38
 801ed5c:	2909      	cmp	r1, #9
 801ed5e:	bf88      	it	hi
 801ed60:	390a      	subhi	r1, #10
 801ed62:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ed64:	b18a      	cbz	r2, 801ed8a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801ed66:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801ed68:	3a01      	subs	r2, #1
 801ed6a:	3101      	adds	r1, #1
 801ed6c:	b292      	uxth	r2, r2
 801ed6e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ed72:	8701      	strh	r1, [r0, #56]	; 0x38
 801ed74:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ed76:	b901      	cbnz	r1, 801ed7a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801ed78:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ed7a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ed7c:	3901      	subs	r1, #1
 801ed7e:	b289      	uxth	r1, r1
 801ed80:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ed82:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ed86:	844c      	strh	r4, [r1, #34]	; 0x22
 801ed88:	e7ec      	b.n	801ed64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801ed8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ed8e:	f7ff bf4c 	b.w	801ec2a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801ed92 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ed92:	b570      	push	{r4, r5, r6, lr}
 801ed94:	2500      	movs	r5, #0
 801ed96:	4295      	cmp	r5, r2
 801ed98:	d011      	beq.n	801edbe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801ed9a:	8bc4      	ldrh	r4, [r0, #30]
 801ed9c:	f831 6b02 	ldrh.w	r6, [r1], #2
 801eda0:	4414      	add	r4, r2
 801eda2:	3c01      	subs	r4, #1
 801eda4:	1b64      	subs	r4, r4, r5
 801eda6:	b2a4      	uxth	r4, r4
 801eda8:	2c01      	cmp	r4, #1
 801edaa:	bf88      	it	hi
 801edac:	3c02      	subhi	r4, #2
 801edae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801edb2:	8b64      	ldrh	r4, [r4, #26]
 801edb4:	42b4      	cmp	r4, r6
 801edb6:	d117      	bne.n	801ede8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801edb8:	3501      	adds	r5, #1
 801edba:	b2ad      	uxth	r5, r5
 801edbc:	e7eb      	b.n	801ed96 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801edbe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801edc2:	2400      	movs	r4, #0
 801edc4:	4413      	add	r3, r2
 801edc6:	b2a2      	uxth	r2, r4
 801edc8:	429a      	cmp	r2, r3
 801edca:	da0f      	bge.n	801edec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801edcc:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801edce:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801edd2:	3401      	adds	r4, #1
 801edd4:	4432      	add	r2, r6
 801edd6:	b292      	uxth	r2, r2
 801edd8:	2a09      	cmp	r2, #9
 801edda:	bf88      	it	hi
 801eddc:	3a0a      	subhi	r2, #10
 801edde:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ede2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801ede4:	42aa      	cmp	r2, r5
 801ede6:	d0ee      	beq.n	801edc6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801ede8:	2000      	movs	r0, #0
 801edea:	bd70      	pop	{r4, r5, r6, pc}
 801edec:	2001      	movs	r0, #1
 801edee:	e7fc      	b.n	801edea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801edf0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801edf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edf4:	4605      	mov	r5, r0
 801edf6:	4616      	mov	r6, r2
 801edf8:	1c8c      	adds	r4, r1, #2
 801edfa:	8809      	ldrh	r1, [r1, #0]
 801edfc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ee00:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ee04:	42b3      	cmp	r3, r6
 801ee06:	d124      	bne.n	801ee52 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ee08:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ee0c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ee10:	f001 070f 	and.w	r7, r1, #15
 801ee14:	4652      	mov	r2, sl
 801ee16:	f8cd 8000 	str.w	r8, [sp]
 801ee1a:	464b      	mov	r3, r9
 801ee1c:	4621      	mov	r1, r4
 801ee1e:	4628      	mov	r0, r5
 801ee20:	f7ff ffb7 	bl	801ed92 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ee24:	4683      	mov	fp, r0
 801ee26:	b168      	cbz	r0, 801ee44 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ee28:	eb0a 0109 	add.w	r1, sl, r9
 801ee2c:	463a      	mov	r2, r7
 801ee2e:	4628      	mov	r0, r5
 801ee30:	4441      	add	r1, r8
 801ee32:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ee36:	4649      	mov	r1, r9
 801ee38:	f7ff ff52 	bl	801ece0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ee3c:	4658      	mov	r0, fp
 801ee3e:	b003      	add	sp, #12
 801ee40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee44:	eb07 010a 	add.w	r1, r7, sl
 801ee48:	4449      	add	r1, r9
 801ee4a:	4441      	add	r1, r8
 801ee4c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ee50:	e7d2      	b.n	801edf8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ee52:	f04f 0b00 	mov.w	fp, #0
 801ee56:	e7f1      	b.n	801ee3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ee58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ee58:	b570      	push	{r4, r5, r6, lr}
 801ee5a:	8810      	ldrh	r0, [r2, #0]
 801ee5c:	4298      	cmp	r0, r3
 801ee5e:	d817      	bhi.n	801ee90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ee60:	1e48      	subs	r0, r1, #1
 801ee62:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ee66:	4298      	cmp	r0, r3
 801ee68:	d312      	bcc.n	801ee90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ee6a:	2400      	movs	r4, #0
 801ee6c:	428c      	cmp	r4, r1
 801ee6e:	d20f      	bcs.n	801ee90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ee70:	1860      	adds	r0, r4, r1
 801ee72:	1040      	asrs	r0, r0, #1
 801ee74:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ee78:	0085      	lsls	r5, r0, #2
 801ee7a:	42b3      	cmp	r3, r6
 801ee7c:	d902      	bls.n	801ee84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ee7e:	3001      	adds	r0, #1
 801ee80:	b284      	uxth	r4, r0
 801ee82:	e7f3      	b.n	801ee6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ee84:	d201      	bcs.n	801ee8a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ee86:	b281      	uxth	r1, r0
 801ee88:	e7f0      	b.n	801ee6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ee8a:	442a      	add	r2, r5
 801ee8c:	8850      	ldrh	r0, [r2, #2]
 801ee8e:	bd70      	pop	{r4, r5, r6, pc}
 801ee90:	2000      	movs	r0, #0
 801ee92:	e7fc      	b.n	801ee8e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801ee94 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ee94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee98:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801ee9a:	4604      	mov	r4, r0
 801ee9c:	260b      	movs	r6, #11
 801ee9e:	886f      	ldrh	r7, [r5, #2]
 801eea0:	087f      	lsrs	r7, r7, #1
 801eea2:	3e01      	subs	r6, #1
 801eea4:	d013      	beq.n	801eece <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801eea6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801eea8:	462a      	mov	r2, r5
 801eeaa:	4639      	mov	r1, r7
 801eeac:	4620      	mov	r0, r4
 801eeae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eeb2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801eeb6:	4643      	mov	r3, r8
 801eeb8:	f7ff ffce 	bl	801ee58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801eebc:	b138      	cbz	r0, 801eece <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801eebe:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801eec2:	4642      	mov	r2, r8
 801eec4:	4620      	mov	r0, r4
 801eec6:	f7ff ff93 	bl	801edf0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801eeca:	2800      	cmp	r0, #0
 801eecc:	d1e9      	bne.n	801eea2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801eece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801eed4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801eed4:	b570      	push	{r4, r5, r6, lr}
 801eed6:	694a      	ldr	r2, [r1, #20]
 801eed8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801eeda:	684b      	ldr	r3, [r1, #4]
 801eedc:	1b54      	subs	r4, r2, r5
 801eede:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801eee0:	f000 8106 	beq.w	801f0f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801eee4:	1b9b      	subs	r3, r3, r6
 801eee6:	d003      	beq.n	801eef0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801eee8:	4363      	muls	r3, r4
 801eeea:	2210      	movs	r2, #16
 801eeec:	fb93 f3f2 	sdiv	r3, r3, r2
 801eef0:	680c      	ldr	r4, [r1, #0]
 801eef2:	698a      	ldr	r2, [r1, #24]
 801eef4:	1b65      	subs	r5, r4, r5
 801eef6:	f000 80fd 	beq.w	801f0f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801eefa:	1b92      	subs	r2, r2, r6
 801eefc:	d003      	beq.n	801ef06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801eefe:	436a      	muls	r2, r5
 801ef00:	2410      	movs	r4, #16
 801ef02:	fb92 f2f4 	sdiv	r2, r2, r4
 801ef06:	1a9b      	subs	r3, r3, r2
 801ef08:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801f130 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ef0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ef10:	460a      	mov	r2, r1
 801ef12:	ee07 3a90 	vmov	s15, r3
 801ef16:	f100 040c 	add.w	r4, r0, #12
 801ef1a:	4603      	mov	r3, r0
 801ef1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef20:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ef24:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ef28:	eeb1 6a43 	vneg.f32	s12, s6
 801ef2c:	edd2 7a02 	vldr	s15, [r2, #8]
 801ef30:	3214      	adds	r2, #20
 801ef32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ef36:	ece3 6a01 	vstmia	r3!, {s13}
 801ef3a:	429c      	cmp	r4, r3
 801ef3c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801ef40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ef44:	edc3 7a02 	vstr	s15, [r3, #8]
 801ef48:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ef4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ef50:	edc3 7a05 	vstr	s15, [r3, #20]
 801ef54:	d1ea      	bne.n	801ef2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801ef56:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ef58:	698b      	ldr	r3, [r1, #24]
 801ef5a:	edd0 4a02 	vldr	s9, [r0, #8]
 801ef5e:	1a9b      	subs	r3, r3, r2
 801ef60:	edd0 3a00 	vldr	s7, [r0]
 801ef64:	edd0 6a01 	vldr	s13, [r0, #4]
 801ef68:	ee07 3a90 	vmov	s15, r3
 801ef6c:	684b      	ldr	r3, [r1, #4]
 801ef6e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ef72:	ed90 5a05 	vldr	s10, [r0, #20]
 801ef76:	1a9b      	subs	r3, r3, r2
 801ef78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef7c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ef80:	ed90 2a03 	vldr	s4, [r0, #12]
 801ef84:	ee07 3a10 	vmov	s14, r3
 801ef88:	edd0 5a04 	vldr	s11, [r0, #16]
 801ef8c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ef90:	ed90 1a07 	vldr	s2, [r0, #28]
 801ef94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ef98:	edd0 2a06 	vldr	s5, [r0, #24]
 801ef9c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801efa0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801efa4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801efa8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801efac:	eee6 7a87 	vfma.f32	s15, s13, s14
 801efb0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801efb4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801efb8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801efba:	694a      	ldr	r2, [r1, #20]
 801efbc:	1b13      	subs	r3, r2, r4
 801efbe:	ee07 3a10 	vmov	s14, r3
 801efc2:	680b      	ldr	r3, [r1, #0]
 801efc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801efc8:	1b1b      	subs	r3, r3, r4
 801efca:	ee27 7a04 	vmul.f32	s14, s14, s8
 801efce:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801efd2:	ee07 3a10 	vmov	s14, r3
 801efd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801efda:	ee27 7a04 	vmul.f32	s14, s14, s8
 801efde:	eee6 4a87 	vfma.f32	s9, s13, s14
 801efe2:	ee64 4a86 	vmul.f32	s9, s9, s12
 801efe6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801efea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801efec:	698b      	ldr	r3, [r1, #24]
 801efee:	1a9b      	subs	r3, r3, r2
 801eff0:	ee06 3a90 	vmov	s13, r3
 801eff4:	684b      	ldr	r3, [r1, #4]
 801eff6:	1a9b      	subs	r3, r3, r2
 801eff8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801effc:	ee07 3a10 	vmov	s14, r3
 801f000:	ee66 6a84 	vmul.f32	s13, s13, s8
 801f004:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f008:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801f00c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f010:	eee5 6a87 	vfma.f32	s13, s11, s14
 801f014:	ee66 6a83 	vmul.f32	s13, s13, s6
 801f018:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801f01c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f01e:	694a      	ldr	r2, [r1, #20]
 801f020:	1b13      	subs	r3, r2, r4
 801f022:	ee07 3a10 	vmov	s14, r3
 801f026:	680b      	ldr	r3, [r1, #0]
 801f028:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f02c:	1b1b      	subs	r3, r3, r4
 801f02e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f032:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801f036:	ee07 3a10 	vmov	s14, r3
 801f03a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f03e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f042:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f046:	edd0 5a08 	vldr	s11, [r0, #32]
 801f04a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801f04e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801f052:	ee25 5a06 	vmul.f32	s10, s10, s12
 801f056:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801f05a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f05c:	698b      	ldr	r3, [r1, #24]
 801f05e:	1a9b      	subs	r3, r3, r2
 801f060:	ee07 3a10 	vmov	s14, r3
 801f064:	684b      	ldr	r3, [r1, #4]
 801f066:	1a9b      	subs	r3, r3, r2
 801f068:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f06c:	ee01 3a90 	vmov	s3, r3
 801f070:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f074:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801f078:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801f07c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801f080:	eea1 7a21 	vfma.f32	s14, s2, s3
 801f084:	ee27 7a03 	vmul.f32	s14, s14, s6
 801f088:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801f08c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f08e:	694a      	ldr	r2, [r1, #20]
 801f090:	1b13      	subs	r3, r2, r4
 801f092:	ee03 3a10 	vmov	s6, r3
 801f096:	680b      	ldr	r3, [r1, #0]
 801f098:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f09c:	1b1b      	subs	r3, r3, r4
 801f09e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801f0a2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801f0a6:	ee03 3a10 	vmov	s6, r3
 801f0aa:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f0ae:	ee23 4a04 	vmul.f32	s8, s6, s8
 801f0b2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801f0b6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801f0ba:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801f0be:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801f0c2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801f0c6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801f0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0ce:	dd13      	ble.n	801f0f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801f0d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f0d4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801f0d8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f0da:	eee3 7a87 	vfma.f32	s15, s7, s14
 801f0de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0e6:	dd15      	ble.n	801f114 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801f0e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f0ec:	6403      	str	r3, [r0, #64]	; 0x40
 801f0ee:	bd70      	pop	{r4, r5, r6, pc}
 801f0f0:	4623      	mov	r3, r4
 801f0f2:	e6fd      	b.n	801eef0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f0f4:	462a      	mov	r2, r5
 801f0f6:	e706      	b.n	801ef06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f0f8:	d502      	bpl.n	801f100 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801f0fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f0fe:	e7e9      	b.n	801f0d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801f100:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801f104:	eea3 2a85 	vfma.f32	s4, s7, s10
 801f108:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801f10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f110:	dade      	bge.n	801f0d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801f112:	e7f2      	b.n	801f0fa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801f114:	d502      	bpl.n	801f11c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801f116:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f11a:	e7e7      	b.n	801f0ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801f11c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801f120:	eee3 4a86 	vfma.f32	s9, s7, s12
 801f124:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801f128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f12c:	dadc      	bge.n	801f0e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801f12e:	e7f2      	b.n	801f116 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801f130:	3d800000 	.word	0x3d800000

0801f134 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801f134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f138:	2714      	movs	r7, #20
 801f13a:	435f      	muls	r7, r3
 801f13c:	eb02 0c07 	add.w	ip, r2, r7
 801f140:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801f144:	f115 0e0f 	adds.w	lr, r5, #15
 801f148:	f100 80a2 	bmi.w	801f290 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801f14c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801f150:	9c08      	ldr	r4, [sp, #32]
 801f152:	2614      	movs	r6, #20
 801f154:	f8c0 e014 	str.w	lr, [r0, #20]
 801f158:	4366      	muls	r6, r4
 801f15a:	eb02 0806 	add.w	r8, r2, r6
 801f15e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f162:	f115 040f 	adds.w	r4, r5, #15
 801f166:	f100 809f 	bmi.w	801f2a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801f16a:	1124      	asrs	r4, r4, #4
 801f16c:	eba4 040e 	sub.w	r4, r4, lr
 801f170:	6184      	str	r4, [r0, #24]
 801f172:	2c00      	cmp	r4, #0
 801f174:	f000 808a 	beq.w	801f28c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801f178:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801f17c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801f180:	5995      	ldr	r5, [r2, r6]
 801f182:	eba4 0809 	sub.w	r8, r4, r9
 801f186:	59d4      	ldr	r4, [r2, r7]
 801f188:	eba5 0a04 	sub.w	sl, r5, r4
 801f18c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801f190:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801f194:	fb0e fe05 	mul.w	lr, lr, r5
 801f198:	fb0a ee19 	mls	lr, sl, r9, lr
 801f19c:	fb08 e404 	mla	r4, r8, r4, lr
 801f1a0:	3c01      	subs	r4, #1
 801f1a2:	19a4      	adds	r4, r4, r6
 801f1a4:	f100 808c 	bmi.w	801f2c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801f1a8:	fb94 fef6 	sdiv	lr, r4, r6
 801f1ac:	fb06 441e 	mls	r4, r6, lr, r4
 801f1b0:	f8c0 e000 	str.w	lr, [r0]
 801f1b4:	6104      	str	r4, [r0, #16]
 801f1b6:	2d00      	cmp	r5, #0
 801f1b8:	f2c0 8095 	blt.w	801f2e6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801f1bc:	fb95 f4f6 	sdiv	r4, r5, r6
 801f1c0:	fb06 5514 	mls	r5, r6, r4, r5
 801f1c4:	6044      	str	r4, [r0, #4]
 801f1c6:	6085      	str	r5, [r0, #8]
 801f1c8:	60c6      	str	r6, [r0, #12]
 801f1ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f1ce:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f1d2:	6945      	ldr	r5, [r0, #20]
 801f1d4:	59d2      	ldr	r2, [r2, r7]
 801f1d6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801f1da:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801f308 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801f1de:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801f1e2:	ee07 4a10 	vmov	s14, r4
 801f1e6:	6804      	ldr	r4, [r0, #0]
 801f1e8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801f1ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f1f0:	ee07 2a90 	vmov	s15, r2
 801f1f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801f1f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f1fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f200:	edd3 6a00 	vldr	s13, [r3]
 801f204:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f208:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801f20c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f210:	edc0 6a07 	vstr	s13, [r0, #28]
 801f214:	edd0 6a01 	vldr	s13, [r0, #4]
 801f218:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801f21c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f220:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801f224:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f228:	ed80 6a08 	vstr	s12, [r0, #32]
 801f22c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801f22e:	6242      	str	r2, [r0, #36]	; 0x24
 801f230:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801f234:	ed93 6a03 	vldr	s12, [r3, #12]
 801f238:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f23c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801f240:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f244:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801f248:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801f24c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801f250:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f254:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801f258:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f25a:	6302      	str	r2, [r0, #48]	; 0x30
 801f25c:	ed93 6a06 	vldr	s12, [r3, #24]
 801f260:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801f264:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f268:	eeb0 7a46 	vmov.f32	s14, s12
 801f26c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801f270:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f274:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801f278:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801f27c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801f280:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f284:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801f288:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801f28a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f290:	2410      	movs	r4, #16
 801f292:	f1c5 0501 	rsb	r5, r5, #1
 801f296:	fb9e fef4 	sdiv	lr, lr, r4
 801f29a:	f015 050f 	ands.w	r5, r5, #15
 801f29e:	bf18      	it	ne
 801f2a0:	2501      	movne	r5, #1
 801f2a2:	ebae 0e05 	sub.w	lr, lr, r5
 801f2a6:	e753      	b.n	801f150 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801f2a8:	f04f 0910 	mov.w	r9, #16
 801f2ac:	f1c5 0501 	rsb	r5, r5, #1
 801f2b0:	fb94 f4f9 	sdiv	r4, r4, r9
 801f2b4:	f015 050f 	ands.w	r5, r5, #15
 801f2b8:	bf18      	it	ne
 801f2ba:	2501      	movne	r5, #1
 801f2bc:	1b64      	subs	r4, r4, r5
 801f2be:	e755      	b.n	801f16c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801f2c0:	4264      	negs	r4, r4
 801f2c2:	fb94 fef6 	sdiv	lr, r4, r6
 801f2c6:	f1ce 0800 	rsb	r8, lr, #0
 801f2ca:	fb06 441e 	mls	r4, r6, lr, r4
 801f2ce:	f8c0 8000 	str.w	r8, [r0]
 801f2d2:	6104      	str	r4, [r0, #16]
 801f2d4:	2c00      	cmp	r4, #0
 801f2d6:	f43f af6e 	beq.w	801f1b6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801f2da:	ea6f 0e0e 	mvn.w	lr, lr
 801f2de:	1b34      	subs	r4, r6, r4
 801f2e0:	f8c0 e000 	str.w	lr, [r0]
 801f2e4:	e766      	b.n	801f1b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801f2e6:	426d      	negs	r5, r5
 801f2e8:	fb95 f4f6 	sdiv	r4, r5, r6
 801f2ec:	f1c4 0e00 	rsb	lr, r4, #0
 801f2f0:	fb06 5514 	mls	r5, r6, r4, r5
 801f2f4:	f8c0 e004 	str.w	lr, [r0, #4]
 801f2f8:	6085      	str	r5, [r0, #8]
 801f2fa:	2d00      	cmp	r5, #0
 801f2fc:	f43f af64 	beq.w	801f1c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801f300:	43e4      	mvns	r4, r4
 801f302:	1b75      	subs	r5, r6, r5
 801f304:	6044      	str	r4, [r0, #4]
 801f306:	e75e      	b.n	801f1c6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801f308:	3d800000 	.word	0x3d800000

0801f30c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801f30c:	4b01      	ldr	r3, [pc, #4]	; (801f314 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801f30e:	6018      	str	r0, [r3, #0]
 801f310:	4770      	bx	lr
 801f312:	bf00      	nop
 801f314:	24025d68 	.word	0x24025d68

0801f318 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801f318:	4b06      	ldr	r3, [pc, #24]	; (801f334 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801f31a:	881a      	ldrh	r2, [r3, #0]
 801f31c:	4282      	cmp	r2, r0
 801f31e:	d807      	bhi.n	801f330 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801f320:	4b05      	ldr	r3, [pc, #20]	; (801f338 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801f322:	881b      	ldrh	r3, [r3, #0]
 801f324:	4413      	add	r3, r2
 801f326:	4298      	cmp	r0, r3
 801f328:	bfac      	ite	ge
 801f32a:	2000      	movge	r0, #0
 801f32c:	2001      	movlt	r0, #1
 801f32e:	4770      	bx	lr
 801f330:	2000      	movs	r0, #0
 801f332:	4770      	bx	lr
 801f334:	24025d88 	.word	0x24025d88
 801f338:	24025d8c 	.word	0x24025d8c

0801f33c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801f33c:	b508      	push	{r3, lr}
 801f33e:	4601      	mov	r1, r0
 801f340:	f7ff ffea 	bl	801f318 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f344:	b118      	cbz	r0, 801f34e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801f346:	4b02      	ldr	r3, [pc, #8]	; (801f350 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801f348:	681b      	ldr	r3, [r3, #0]
 801f34a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801f34e:	bd08      	pop	{r3, pc}
 801f350:	24025d6c 	.word	0x24025d6c

0801f354 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801f354:	b538      	push	{r3, r4, r5, lr}
 801f356:	4604      	mov	r4, r0
 801f358:	f7ff ffde 	bl	801f318 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f35c:	b188      	cbz	r0, 801f382 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801f35e:	4b09      	ldr	r3, [pc, #36]	; (801f384 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801f360:	881a      	ldrh	r2, [r3, #0]
 801f362:	4b09      	ldr	r3, [pc, #36]	; (801f388 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801f364:	1aa4      	subs	r4, r4, r2
 801f366:	220e      	movs	r2, #14
 801f368:	681d      	ldr	r5, [r3, #0]
 801f36a:	4362      	muls	r2, r4
 801f36c:	18ac      	adds	r4, r5, r2
 801f36e:	7b23      	ldrb	r3, [r4, #12]
 801f370:	f013 0320 	ands.w	r3, r3, #32
 801f374:	bf17      	itett	ne
 801f376:	680b      	ldrne	r3, [r1, #0]
 801f378:	4618      	moveq	r0, r3
 801f37a:	50ab      	strne	r3, [r5, r2]
 801f37c:	684b      	ldrne	r3, [r1, #4]
 801f37e:	bf18      	it	ne
 801f380:	6063      	strne	r3, [r4, #4]
 801f382:	bd38      	pop	{r3, r4, r5, pc}
 801f384:	24025d88 	.word	0x24025d88
 801f388:	24025d70 	.word	0x24025d70

0801f38c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801f38c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f390:	4606      	mov	r6, r0
 801f392:	460c      	mov	r4, r1
 801f394:	f7ff ffc0 	bl	801f318 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f398:	b918      	cbnz	r0, 801f3a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801f39a:	2000      	movs	r0, #0
 801f39c:	b002      	add	sp, #8
 801f39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3a2:	4608      	mov	r0, r1
 801f3a4:	f7fa fe93 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801f3a8:	2800      	cmp	r0, #0
 801f3aa:	d1f6      	bne.n	801f39a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f3ac:	4b3f      	ldr	r3, [pc, #252]	; (801f4ac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801f3ae:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801f4b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801f3b2:	881d      	ldrh	r5, [r3, #0]
 801f3b4:	f8d9 a000 	ldr.w	sl, [r9]
 801f3b8:	46c8      	mov	r8, r9
 801f3ba:	1b73      	subs	r3, r6, r5
 801f3bc:	250e      	movs	r5, #14
 801f3be:	435d      	muls	r5, r3
 801f3c0:	eb0a 0705 	add.w	r7, sl, r5
 801f3c4:	7b3b      	ldrb	r3, [r7, #12]
 801f3c6:	f013 0f20 	tst.w	r3, #32
 801f3ca:	d0e6      	beq.n	801f39a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f3cc:	4621      	mov	r1, r4
 801f3ce:	4638      	mov	r0, r7
 801f3d0:	f7fd fb1c 	bl	801ca0c <_ZNK8touchgfx4Rect8includesERKS0_>
 801f3d4:	2800      	cmp	r0, #0
 801f3d6:	d1e1      	bne.n	801f39c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f3d8:	4639      	mov	r1, r7
 801f3da:	4620      	mov	r0, r4
 801f3dc:	f7fd fb16 	bl	801ca0c <_ZNK8touchgfx4Rect8includesERKS0_>
 801f3e0:	b108      	cbz	r0, 801f3e6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801f3e2:	4621      	mov	r1, r4
 801f3e4:	e020      	b.n	801f428 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801f3e6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f3ea:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801f3ee:	429a      	cmp	r2, r3
 801f3f0:	d11e      	bne.n	801f430 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f3f2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f3f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801f3fa:	429a      	cmp	r2, r3
 801f3fc:	d118      	bne.n	801f430 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f3fe:	6820      	ldr	r0, [r4, #0]
 801f400:	466b      	mov	r3, sp
 801f402:	6861      	ldr	r1, [r4, #4]
 801f404:	c303      	stmia	r3!, {r0, r1}
 801f406:	4639      	mov	r1, r7
 801f408:	4668      	mov	r0, sp
 801f40a:	f7fd fb25 	bl	801ca58 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f40e:	f8d9 3000 	ldr.w	r3, [r9]
 801f412:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801f416:	442b      	add	r3, r5
 801f418:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f41c:	4413      	add	r3, r2
 801f41e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801f422:	4293      	cmp	r3, r2
 801f424:	dc04      	bgt.n	801f430 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f426:	4669      	mov	r1, sp
 801f428:	4630      	mov	r0, r6
 801f42a:	f7ff ff93 	bl	801f354 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801f42e:	e7b5      	b.n	801f39c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f430:	f8d8 3000 	ldr.w	r3, [r8]
 801f434:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f438:	442b      	add	r3, r5
 801f43a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f43e:	4291      	cmp	r1, r2
 801f440:	d119      	bne.n	801f476 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f442:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f446:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f44a:	4291      	cmp	r1, r2
 801f44c:	d113      	bne.n	801f476 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f44e:	6820      	ldr	r0, [r4, #0]
 801f450:	466a      	mov	r2, sp
 801f452:	6861      	ldr	r1, [r4, #4]
 801f454:	c203      	stmia	r2!, {r0, r1}
 801f456:	4619      	mov	r1, r3
 801f458:	4668      	mov	r0, sp
 801f45a:	f7fd fafd 	bl	801ca58 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f45e:	f8d8 3000 	ldr.w	r3, [r8]
 801f462:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f466:	442b      	add	r3, r5
 801f468:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f46c:	4413      	add	r3, r2
 801f46e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f472:	4293      	cmp	r3, r2
 801f474:	ddd7      	ble.n	801f426 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801f476:	4620      	mov	r0, r4
 801f478:	f7fa fe29 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801f47c:	b990      	cbnz	r0, 801f4a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801f47e:	88a7      	ldrh	r7, [r4, #4]
 801f480:	88e3      	ldrh	r3, [r4, #6]
 801f482:	fb17 f703 	smulbb	r7, r7, r3
 801f486:	f8d8 3000 	ldr.w	r3, [r8]
 801f48a:	441d      	add	r5, r3
 801f48c:	4628      	mov	r0, r5
 801f48e:	f7fa fe1e 	bl	801a0ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801f492:	b948      	cbnz	r0, 801f4a8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801f494:	88ab      	ldrh	r3, [r5, #4]
 801f496:	88ea      	ldrh	r2, [r5, #6]
 801f498:	fb13 f302 	smulbb	r3, r3, r2
 801f49c:	42bb      	cmp	r3, r7
 801f49e:	f6bf af7c 	bge.w	801f39a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f4a2:	e79e      	b.n	801f3e2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801f4a4:	2700      	movs	r7, #0
 801f4a6:	e7ee      	b.n	801f486 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801f4a8:	2300      	movs	r3, #0
 801f4aa:	e7f7      	b.n	801f49c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801f4ac:	24025d88 	.word	0x24025d88
 801f4b0:	24025d70 	.word	0x24025d70

0801f4b4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4b6:	4c24      	ldr	r4, [pc, #144]	; (801f548 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801f4b8:	6823      	ldr	r3, [r4, #0]
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d042      	beq.n	801f544 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f4be:	4a23      	ldr	r2, [pc, #140]	; (801f54c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801f4c0:	4d23      	ldr	r5, [pc, #140]	; (801f550 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801f4c2:	8811      	ldrh	r1, [r2, #0]
 801f4c4:	f8b5 c000 	ldrh.w	ip, [r5]
 801f4c8:	4822      	ldr	r0, [pc, #136]	; (801f554 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801f4ca:	4461      	add	r1, ip
 801f4cc:	1c4a      	adds	r2, r1, #1
 801f4ce:	008f      	lsls	r7, r1, #2
 801f4d0:	f022 0201 	bic.w	r2, r2, #1
 801f4d4:	19de      	adds	r6, r3, r7
 801f4d6:	0412      	lsls	r2, r2, #16
 801f4d8:	6006      	str	r6, [r0, #0]
 801f4da:	4e1f      	ldr	r6, [pc, #124]	; (801f558 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801f4dc:	0c12      	lsrs	r2, r2, #16
 801f4de:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801f4e2:	19da      	adds	r2, r3, r7
 801f4e4:	6032      	str	r2, [r6, #0]
 801f4e6:	220e      	movs	r2, #14
 801f4e8:	fb02 f20c 	mul.w	r2, r2, ip
 801f4ec:	3203      	adds	r2, #3
 801f4ee:	f022 0203 	bic.w	r2, r2, #3
 801f4f2:	443a      	add	r2, r7
 801f4f4:	4f19      	ldr	r7, [pc, #100]	; (801f55c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f4f6:	4413      	add	r3, r2
 801f4f8:	603b      	str	r3, [r7, #0]
 801f4fa:	2300      	movs	r3, #0
 801f4fc:	4f18      	ldr	r7, [pc, #96]	; (801f560 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f4fe:	469c      	mov	ip, r3
 801f500:	803b      	strh	r3, [r7, #0]
 801f502:	4f18      	ldr	r7, [pc, #96]	; (801f564 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f504:	683f      	ldr	r7, [r7, #0]
 801f506:	1aba      	subs	r2, r7, r2
 801f508:	4f17      	ldr	r7, [pc, #92]	; (801f568 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f50a:	603a      	str	r2, [r7, #0]
 801f50c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801f510:	4a16      	ldr	r2, [pc, #88]	; (801f56c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f512:	8013      	strh	r3, [r2, #0]
 801f514:	428b      	cmp	r3, r1
 801f516:	d10d      	bne.n	801f534 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801f518:	882d      	ldrh	r5, [r5, #0]
 801f51a:	2300      	movs	r3, #0
 801f51c:	6830      	ldr	r0, [r6, #0]
 801f51e:	240e      	movs	r4, #14
 801f520:	429d      	cmp	r5, r3
 801f522:	d90f      	bls.n	801f544 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f524:	fb04 0203 	mla	r2, r4, r3, r0
 801f528:	3301      	adds	r3, #1
 801f52a:	7b11      	ldrb	r1, [r2, #12]
 801f52c:	f36f 1145 	bfc	r1, #5, #1
 801f530:	7311      	strb	r1, [r2, #12]
 801f532:	e7f5      	b.n	801f520 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801f534:	6822      	ldr	r2, [r4, #0]
 801f536:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801f53a:	6802      	ldr	r2, [r0, #0]
 801f53c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801f540:	3301      	adds	r3, #1
 801f542:	e7e7      	b.n	801f514 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801f544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f546:	bf00      	nop
 801f548:	24025d6c 	.word	0x24025d6c
 801f54c:	24025d88 	.word	0x24025d88
 801f550:	24025d8c 	.word	0x24025d8c
 801f554:	24025d80 	.word	0x24025d80
 801f558:	24025d70 	.word	0x24025d70
 801f55c:	24025d78 	.word	0x24025d78
 801f560:	24025d8a 	.word	0x24025d8a
 801f564:	24025d74 	.word	0x24025d74
 801f568:	24025d84 	.word	0x24025d84
 801f56c:	24025d7c 	.word	0x24025d7c

0801f570 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801f570:	4b06      	ldr	r3, [pc, #24]	; (801f58c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	b943      	cbnz	r3, 801f588 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f576:	b139      	cbz	r1, 801f588 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f578:	4b05      	ldr	r3, [pc, #20]	; (801f590 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801f57a:	801a      	strh	r2, [r3, #0]
 801f57c:	4b05      	ldr	r3, [pc, #20]	; (801f594 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801f57e:	6019      	str	r1, [r3, #0]
 801f580:	4b05      	ldr	r3, [pc, #20]	; (801f598 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801f582:	6018      	str	r0, [r3, #0]
 801f584:	f7ff bf96 	b.w	801f4b4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801f588:	4770      	bx	lr
 801f58a:	bf00      	nop
 801f58c:	24025d78 	.word	0x24025d78
 801f590:	24025d8c 	.word	0x24025d8c
 801f594:	24025d74 	.word	0x24025d74
 801f598:	24025d6c 	.word	0x24025d6c

0801f59c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801f59c:	b470      	push	{r4, r5, r6}
 801f59e:	4c07      	ldr	r4, [pc, #28]	; (801f5bc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801f5a0:	4605      	mov	r5, r0
 801f5a2:	4610      	mov	r0, r2
 801f5a4:	9a03      	ldr	r2, [sp, #12]
 801f5a6:	6826      	ldr	r6, [r4, #0]
 801f5a8:	b936      	cbnz	r6, 801f5b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801f5aa:	6025      	str	r5, [r4, #0]
 801f5ac:	4c04      	ldr	r4, [pc, #16]	; (801f5c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801f5ae:	8021      	strh	r1, [r4, #0]
 801f5b0:	4619      	mov	r1, r3
 801f5b2:	bc70      	pop	{r4, r5, r6}
 801f5b4:	f7ff bfdc 	b.w	801f570 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801f5b8:	bc70      	pop	{r4, r5, r6}
 801f5ba:	4770      	bx	lr
 801f5bc:	24025d90 	.word	0x24025d90
 801f5c0:	24025d88 	.word	0x24025d88

0801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801f5c4:	4a12      	ldr	r2, [pc, #72]	; (801f610 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801f5c6:	8803      	ldrh	r3, [r0, #0]
 801f5c8:	8812      	ldrh	r2, [r2, #0]
 801f5ca:	4293      	cmp	r3, r2
 801f5cc:	d207      	bcs.n	801f5de <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801f5ce:	4a11      	ldr	r2, [pc, #68]	; (801f614 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801f5d0:	2114      	movs	r1, #20
 801f5d2:	6812      	ldr	r2, [r2, #0]
 801f5d4:	fb01 2303 	mla	r3, r1, r3, r2
 801f5d8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801f5dc:	4770      	bx	lr
 801f5de:	490e      	ldr	r1, [pc, #56]	; (801f618 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801f5e0:	8809      	ldrh	r1, [r1, #0]
 801f5e2:	4411      	add	r1, r2
 801f5e4:	428b      	cmp	r3, r1
 801f5e6:	da04      	bge.n	801f5f2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801f5e8:	1a9b      	subs	r3, r3, r2
 801f5ea:	4a0c      	ldr	r2, [pc, #48]	; (801f61c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801f5ec:	210e      	movs	r1, #14
 801f5ee:	6812      	ldr	r2, [r2, #0]
 801f5f0:	e7f0      	b.n	801f5d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801f5f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f5f6:	4293      	cmp	r3, r2
 801f5f8:	d108      	bne.n	801f60c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801f5fa:	4b09      	ldr	r3, [pc, #36]	; (801f620 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801f5fc:	781b      	ldrb	r3, [r3, #0]
 801f5fe:	b91b      	cbnz	r3, 801f608 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801f600:	4b08      	ldr	r3, [pc, #32]	; (801f624 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801f602:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f606:	4770      	bx	lr
 801f608:	4b07      	ldr	r3, [pc, #28]	; (801f628 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801f60a:	e7fa      	b.n	801f602 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801f60c:	2000      	movs	r0, #0
 801f60e:	4770      	bx	lr
 801f610:	24025d88 	.word	0x24025d88
 801f614:	24025d90 	.word	0x24025d90
 801f618:	24025d8c 	.word	0x24025d8c
 801f61c:	24025d70 	.word	0x24025d70
 801f620:	24025d00 	.word	0x24025d00
 801f624:	24025d02 	.word	0x24025d02
 801f628:	24025d04 	.word	0x24025d04

0801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801f62c:	4a12      	ldr	r2, [pc, #72]	; (801f678 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801f62e:	8803      	ldrh	r3, [r0, #0]
 801f630:	8812      	ldrh	r2, [r2, #0]
 801f632:	4293      	cmp	r3, r2
 801f634:	d207      	bcs.n	801f646 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801f636:	4a11      	ldr	r2, [pc, #68]	; (801f67c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801f638:	2114      	movs	r1, #20
 801f63a:	6812      	ldr	r2, [r2, #0]
 801f63c:	fb01 2303 	mla	r3, r1, r3, r2
 801f640:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801f644:	4770      	bx	lr
 801f646:	490e      	ldr	r1, [pc, #56]	; (801f680 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801f648:	8809      	ldrh	r1, [r1, #0]
 801f64a:	4411      	add	r1, r2
 801f64c:	428b      	cmp	r3, r1
 801f64e:	da04      	bge.n	801f65a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801f650:	1a9b      	subs	r3, r3, r2
 801f652:	4a0c      	ldr	r2, [pc, #48]	; (801f684 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801f654:	210e      	movs	r1, #14
 801f656:	6812      	ldr	r2, [r2, #0]
 801f658:	e7f0      	b.n	801f63c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801f65a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f65e:	4293      	cmp	r3, r2
 801f660:	d108      	bne.n	801f674 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801f662:	4b09      	ldr	r3, [pc, #36]	; (801f688 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801f664:	781b      	ldrb	r3, [r3, #0]
 801f666:	b91b      	cbnz	r3, 801f670 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801f668:	4b08      	ldr	r3, [pc, #32]	; (801f68c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801f66a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f66e:	4770      	bx	lr
 801f670:	4b07      	ldr	r3, [pc, #28]	; (801f690 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801f672:	e7fa      	b.n	801f66a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801f674:	2000      	movs	r0, #0
 801f676:	4770      	bx	lr
 801f678:	24025d88 	.word	0x24025d88
 801f67c:	24025d90 	.word	0x24025d90
 801f680:	24025d8c 	.word	0x24025d8c
 801f684:	24025d70 	.word	0x24025d70
 801f688:	24025d00 	.word	0x24025d00
 801f68c:	24025d04 	.word	0x24025d04
 801f690:	24025d02 	.word	0x24025d02

0801f694 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801f694:	4a1f      	ldr	r2, [pc, #124]	; (801f714 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801f696:	b510      	push	{r4, lr}
 801f698:	880b      	ldrh	r3, [r1, #0]
 801f69a:	8812      	ldrh	r2, [r2, #0]
 801f69c:	4293      	cmp	r3, r2
 801f69e:	d213      	bcs.n	801f6c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801f6a0:	4a1d      	ldr	r2, [pc, #116]	; (801f718 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801f6a2:	2114      	movs	r1, #20
 801f6a4:	6812      	ldr	r2, [r2, #0]
 801f6a6:	fb01 2303 	mla	r3, r1, r3, r2
 801f6aa:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801f6ae:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801f6b2:	8a1a      	ldrh	r2, [r3, #16]
 801f6b4:	8a5b      	ldrh	r3, [r3, #18]
 801f6b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f6ba:	8004      	strh	r4, [r0, #0]
 801f6bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f6c0:	8041      	strh	r1, [r0, #2]
 801f6c2:	8082      	strh	r2, [r0, #4]
 801f6c4:	80c3      	strh	r3, [r0, #6]
 801f6c6:	e00e      	b.n	801f6e6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801f6c8:	4914      	ldr	r1, [pc, #80]	; (801f71c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801f6ca:	8809      	ldrh	r1, [r1, #0]
 801f6cc:	4411      	add	r1, r2
 801f6ce:	428b      	cmp	r3, r1
 801f6d0:	da0a      	bge.n	801f6e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801f6d2:	1a9b      	subs	r3, r3, r2
 801f6d4:	4a12      	ldr	r2, [pc, #72]	; (801f720 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801f6d6:	210e      	movs	r1, #14
 801f6d8:	6812      	ldr	r2, [r2, #0]
 801f6da:	fb01 2303 	mla	r3, r1, r3, r2
 801f6de:	681a      	ldr	r2, [r3, #0]
 801f6e0:	6002      	str	r2, [r0, #0]
 801f6e2:	685a      	ldr	r2, [r3, #4]
 801f6e4:	6042      	str	r2, [r0, #4]
 801f6e6:	bd10      	pop	{r4, pc}
 801f6e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f6ec:	4293      	cmp	r3, r2
 801f6ee:	d10b      	bne.n	801f708 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801f6f0:	4b0c      	ldr	r3, [pc, #48]	; (801f724 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801f6f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f6f6:	4b0c      	ldr	r3, [pc, #48]	; (801f728 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801f6f8:	8081      	strh	r1, [r0, #4]
 801f6fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f6fe:	2300      	movs	r3, #0
 801f700:	80c2      	strh	r2, [r0, #6]
 801f702:	8003      	strh	r3, [r0, #0]
 801f704:	8043      	strh	r3, [r0, #2]
 801f706:	e7ee      	b.n	801f6e6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801f708:	2300      	movs	r3, #0
 801f70a:	8003      	strh	r3, [r0, #0]
 801f70c:	8043      	strh	r3, [r0, #2]
 801f70e:	8083      	strh	r3, [r0, #4]
 801f710:	e7d8      	b.n	801f6c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801f712:	bf00      	nop
 801f714:	24025d88 	.word	0x24025d88
 801f718:	24025d90 	.word	0x24025d90
 801f71c:	24025d8c 	.word	0x24025d8c
 801f720:	24025d70 	.word	0x24025d70
 801f724:	24025cfc 	.word	0x24025cfc
 801f728:	24025cfe 	.word	0x24025cfe

0801f72c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801f72c:	4a17      	ldr	r2, [pc, #92]	; (801f78c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801f72e:	8803      	ldrh	r3, [r0, #0]
 801f730:	8812      	ldrh	r2, [r2, #0]
 801f732:	4293      	cmp	r3, r2
 801f734:	d213      	bcs.n	801f75e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801f736:	4a16      	ldr	r2, [pc, #88]	; (801f790 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801f738:	2114      	movs	r1, #20
 801f73a:	6812      	ldr	r2, [r2, #0]
 801f73c:	fb01 2303 	mla	r3, r1, r3, r2
 801f740:	8a1a      	ldrh	r2, [r3, #16]
 801f742:	8919      	ldrh	r1, [r3, #8]
 801f744:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f748:	428a      	cmp	r2, r1
 801f74a:	db1d      	blt.n	801f788 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801f74c:	8a58      	ldrh	r0, [r3, #18]
 801f74e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801f752:	895b      	ldrh	r3, [r3, #10]
 801f754:	4298      	cmp	r0, r3
 801f756:	bfac      	ite	ge
 801f758:	2000      	movge	r0, #0
 801f75a:	2001      	movlt	r0, #1
 801f75c:	4770      	bx	lr
 801f75e:	490d      	ldr	r1, [pc, #52]	; (801f794 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801f760:	8809      	ldrh	r1, [r1, #0]
 801f762:	4411      	add	r1, r2
 801f764:	428b      	cmp	r3, r1
 801f766:	da0d      	bge.n	801f784 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801f768:	1a9b      	subs	r3, r3, r2
 801f76a:	4a0b      	ldr	r2, [pc, #44]	; (801f798 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801f76c:	210e      	movs	r1, #14
 801f76e:	6812      	ldr	r2, [r2, #0]
 801f770:	fb01 2303 	mla	r3, r1, r3, r2
 801f774:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801f778:	891a      	ldrh	r2, [r3, #8]
 801f77a:	4291      	cmp	r1, r2
 801f77c:	db04      	blt.n	801f788 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801f77e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801f782:	e7e6      	b.n	801f752 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801f784:	2000      	movs	r0, #0
 801f786:	4770      	bx	lr
 801f788:	2001      	movs	r0, #1
 801f78a:	4770      	bx	lr
 801f78c:	24025d88 	.word	0x24025d88
 801f790:	24025d90 	.word	0x24025d90
 801f794:	24025d8c 	.word	0x24025d8c
 801f798:	24025d70 	.word	0x24025d70

0801f79c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801f79c:	4a12      	ldr	r2, [pc, #72]	; (801f7e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801f79e:	8803      	ldrh	r3, [r0, #0]
 801f7a0:	8811      	ldrh	r1, [r2, #0]
 801f7a2:	428b      	cmp	r3, r1
 801f7a4:	d20b      	bcs.n	801f7be <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801f7a6:	4a11      	ldr	r2, [pc, #68]	; (801f7ec <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801f7a8:	6812      	ldr	r2, [r2, #0]
 801f7aa:	b112      	cbz	r2, 801f7b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801f7ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f7b0:	b9c0      	cbnz	r0, 801f7e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801f7b2:	4a0f      	ldr	r2, [pc, #60]	; (801f7f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801f7b4:	6811      	ldr	r1, [r2, #0]
 801f7b6:	2214      	movs	r2, #20
 801f7b8:	4353      	muls	r3, r2
 801f7ba:	58c8      	ldr	r0, [r1, r3]
 801f7bc:	4770      	bx	lr
 801f7be:	4a0d      	ldr	r2, [pc, #52]	; (801f7f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801f7c0:	8812      	ldrh	r2, [r2, #0]
 801f7c2:	440a      	add	r2, r1
 801f7c4:	4293      	cmp	r3, r2
 801f7c6:	da04      	bge.n	801f7d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801f7c8:	4a08      	ldr	r2, [pc, #32]	; (801f7ec <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801f7ca:	6812      	ldr	r2, [r2, #0]
 801f7cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f7d0:	4770      	bx	lr
 801f7d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f7d6:	4293      	cmp	r3, r2
 801f7d8:	d103      	bne.n	801f7e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801f7da:	4b07      	ldr	r3, [pc, #28]	; (801f7f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801f7e0:	4770      	bx	lr
 801f7e2:	2000      	movs	r0, #0
 801f7e4:	4770      	bx	lr
 801f7e6:	bf00      	nop
 801f7e8:	24025d88 	.word	0x24025d88
 801f7ec:	24025d6c 	.word	0x24025d6c
 801f7f0:	24025d90 	.word	0x24025d90
 801f7f4:	24025d8c 	.word	0x24025d8c
 801f7f8:	24025d08 	.word	0x24025d08

0801f7fc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801f7fc:	4b24      	ldr	r3, [pc, #144]	; (801f890 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801f7fe:	8802      	ldrh	r2, [r0, #0]
 801f800:	8818      	ldrh	r0, [r3, #0]
 801f802:	4282      	cmp	r2, r0
 801f804:	d221      	bcs.n	801f84a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801f806:	4b23      	ldr	r3, [pc, #140]	; (801f894 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801f808:	6819      	ldr	r1, [r3, #0]
 801f80a:	2314      	movs	r3, #20
 801f80c:	fb03 1302 	mla	r3, r3, r2, r1
 801f810:	6858      	ldr	r0, [r3, #4]
 801f812:	2800      	cmp	r0, #0
 801f814:	d03a      	beq.n	801f88c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f816:	4920      	ldr	r1, [pc, #128]	; (801f898 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f818:	6809      	ldr	r1, [r1, #0]
 801f81a:	2900      	cmp	r1, #0
 801f81c:	d036      	beq.n	801f88c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f81e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f822:	2900      	cmp	r1, #0
 801f824:	d032      	beq.n	801f88c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f826:	891a      	ldrh	r2, [r3, #8]
 801f828:	8958      	ldrh	r0, [r3, #10]
 801f82a:	4350      	muls	r0, r2
 801f82c:	7c5a      	ldrb	r2, [r3, #17]
 801f82e:	7cdb      	ldrb	r3, [r3, #19]
 801f830:	0952      	lsrs	r2, r2, #5
 801f832:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801f836:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801f83a:	2b0b      	cmp	r3, #11
 801f83c:	bf18      	it	ne
 801f83e:	0040      	lslne	r0, r0, #1
 801f840:	3003      	adds	r0, #3
 801f842:	f020 0003 	bic.w	r0, r0, #3
 801f846:	4408      	add	r0, r1
 801f848:	4770      	bx	lr
 801f84a:	4b14      	ldr	r3, [pc, #80]	; (801f89c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801f84c:	881b      	ldrh	r3, [r3, #0]
 801f84e:	4403      	add	r3, r0
 801f850:	429a      	cmp	r2, r3
 801f852:	da1a      	bge.n	801f88a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f854:	4b12      	ldr	r3, [pc, #72]	; (801f8a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f856:	1a10      	subs	r0, r2, r0
 801f858:	210e      	movs	r1, #14
 801f85a:	681b      	ldr	r3, [r3, #0]
 801f85c:	fb01 3000 	mla	r0, r1, r0, r3
 801f860:	7b03      	ldrb	r3, [r0, #12]
 801f862:	f003 031f 	and.w	r3, r3, #31
 801f866:	2b0b      	cmp	r3, #11
 801f868:	d10b      	bne.n	801f882 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801f86a:	8903      	ldrh	r3, [r0, #8]
 801f86c:	8940      	ldrh	r0, [r0, #10]
 801f86e:	4358      	muls	r0, r3
 801f870:	4b09      	ldr	r3, [pc, #36]	; (801f898 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f872:	3003      	adds	r0, #3
 801f874:	6819      	ldr	r1, [r3, #0]
 801f876:	f020 0303 	bic.w	r3, r0, #3
 801f87a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801f87e:	4418      	add	r0, r3
 801f880:	4770      	bx	lr
 801f882:	2b0d      	cmp	r3, #13
 801f884:	d101      	bne.n	801f88a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f886:	300d      	adds	r0, #13
 801f888:	4770      	bx	lr
 801f88a:	2000      	movs	r0, #0
 801f88c:	4770      	bx	lr
 801f88e:	bf00      	nop
 801f890:	24025d88 	.word	0x24025d88
 801f894:	24025d90 	.word	0x24025d90
 801f898:	24025d6c 	.word	0x24025d6c
 801f89c:	24025d8c 	.word	0x24025d8c
 801f8a0:	24025d70 	.word	0x24025d70

0801f8a4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801f8a4:	4a17      	ldr	r2, [pc, #92]	; (801f904 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801f8a6:	b510      	push	{r4, lr}
 801f8a8:	8803      	ldrh	r3, [r0, #0]
 801f8aa:	8812      	ldrh	r2, [r2, #0]
 801f8ac:	4293      	cmp	r3, r2
 801f8ae:	d20c      	bcs.n	801f8ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801f8b0:	4a15      	ldr	r2, [pc, #84]	; (801f908 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801f8b2:	2114      	movs	r1, #20
 801f8b4:	6812      	ldr	r2, [r2, #0]
 801f8b6:	fb01 2303 	mla	r3, r1, r3, r2
 801f8ba:	7c58      	ldrb	r0, [r3, #17]
 801f8bc:	0942      	lsrs	r2, r0, #5
 801f8be:	7cd8      	ldrb	r0, [r3, #19]
 801f8c0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801f8c4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801f8c8:	bd10      	pop	{r4, pc}
 801f8ca:	4910      	ldr	r1, [pc, #64]	; (801f90c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801f8cc:	8809      	ldrh	r1, [r1, #0]
 801f8ce:	4411      	add	r1, r2
 801f8d0:	428b      	cmp	r3, r1
 801f8d2:	da09      	bge.n	801f8e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801f8d4:	1a9b      	subs	r3, r3, r2
 801f8d6:	4a0e      	ldr	r2, [pc, #56]	; (801f910 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801f8d8:	210e      	movs	r1, #14
 801f8da:	6812      	ldr	r2, [r2, #0]
 801f8dc:	fb01 2303 	mla	r3, r1, r3, r2
 801f8e0:	7b18      	ldrb	r0, [r3, #12]
 801f8e2:	f000 001f 	and.w	r0, r0, #31
 801f8e6:	e7ef      	b.n	801f8c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f8e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f8ec:	4293      	cmp	r3, r2
 801f8ee:	d106      	bne.n	801f8fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801f8f0:	f7e4 fb0e 	bl	8003f10 <_ZN8touchgfx3HAL3lcdEv>
 801f8f4:	6803      	ldr	r3, [r0, #0]
 801f8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f8fc:	4718      	bx	r3
 801f8fe:	2000      	movs	r0, #0
 801f900:	e7e2      	b.n	801f8c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f902:	bf00      	nop
 801f904:	24025d88 	.word	0x24025d88
 801f908:	24025d90 	.word	0x24025d90
 801f90c:	24025d8c 	.word	0x24025d8c
 801f910:	24025d70 	.word	0x24025d70

0801f914 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801f914:	2018      	movs	r0, #24
 801f916:	4770      	bx	lr

0801f918 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801f918:	2001      	movs	r0, #1
 801f91a:	4770      	bx	lr

0801f91c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801f91c:	4b02      	ldr	r3, [pc, #8]	; (801f928 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801f91e:	8818      	ldrh	r0, [r3, #0]
 801f920:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f924:	b280      	uxth	r0, r0
 801f926:	4770      	bx	lr
 801f928:	24025d02 	.word	0x24025d02

0801f92c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f92c:	2bff      	cmp	r3, #255	; 0xff
 801f92e:	d040      	beq.n	801f9b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801f930:	2a2c      	cmp	r2, #44	; 0x2c
 801f932:	d02a      	beq.n	801f98a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801f934:	d80f      	bhi.n	801f956 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801f936:	2a08      	cmp	r2, #8
 801f938:	d037      	beq.n	801f9aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f93a:	d805      	bhi.n	801f948 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801f93c:	2a04      	cmp	r2, #4
 801f93e:	d032      	beq.n	801f9a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801f940:	2a05      	cmp	r2, #5
 801f942:	d02e      	beq.n	801f9a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801f944:	2000      	movs	r0, #0
 801f946:	4770      	bx	lr
 801f948:	2a0a      	cmp	r2, #10
 801f94a:	d02e      	beq.n	801f9aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f94c:	d301      	bcc.n	801f952 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801f94e:	2a0b      	cmp	r2, #11
 801f950:	d1f8      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f952:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f954:	4770      	bx	lr
 801f956:	2a30      	cmp	r2, #48	; 0x30
 801f958:	d029      	beq.n	801f9ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f95a:	d808      	bhi.n	801f96e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801f95c:	2a2e      	cmp	r2, #46	; 0x2e
 801f95e:	684b      	ldr	r3, [r1, #4]
 801f960:	d01a      	beq.n	801f998 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801f962:	d90b      	bls.n	801f97c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801f964:	781b      	ldrb	r3, [r3, #0]
 801f966:	2b00      	cmp	r3, #0
 801f968:	d1ec      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f96a:	6a00      	ldr	r0, [r0, #32]
 801f96c:	4770      	bx	lr
 801f96e:	2a32      	cmp	r2, #50	; 0x32
 801f970:	d01d      	beq.n	801f9ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f972:	d301      	bcc.n	801f978 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801f974:	2a33      	cmp	r2, #51	; 0x33
 801f976:	d1e5      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f978:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801f97a:	4770      	bx	lr
 801f97c:	781b      	ldrb	r3, [r3, #0]
 801f97e:	2b00      	cmp	r3, #0
 801f980:	d0f3      	beq.n	801f96a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801f982:	2b01      	cmp	r3, #1
 801f984:	d1de      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f986:	6900      	ldr	r0, [r0, #16]
 801f988:	4770      	bx	lr
 801f98a:	684b      	ldr	r3, [r1, #4]
 801f98c:	781b      	ldrb	r3, [r3, #0]
 801f98e:	b133      	cbz	r3, 801f99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801f990:	2b01      	cmp	r3, #1
 801f992:	d1d7      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f994:	6880      	ldr	r0, [r0, #8]
 801f996:	4770      	bx	lr
 801f998:	781b      	ldrb	r3, [r3, #0]
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	d1d2      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f99e:	6980      	ldr	r0, [r0, #24]
 801f9a0:	4770      	bx	lr
 801f9a2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801f9a4:	4770      	bx	lr
 801f9a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801f9a8:	4770      	bx	lr
 801f9aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801f9ac:	4770      	bx	lr
 801f9ae:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801f9b0:	4770      	bx	lr
 801f9b2:	2a2c      	cmp	r2, #44	; 0x2c
 801f9b4:	d02a      	beq.n	801fa0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801f9b6:	d80f      	bhi.n	801f9d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801f9b8:	2a08      	cmp	r2, #8
 801f9ba:	d035      	beq.n	801fa28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801f9bc:	d805      	bhi.n	801f9ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f9be:	2a04      	cmp	r2, #4
 801f9c0:	d030      	beq.n	801fa24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801f9c2:	2a05      	cmp	r2, #5
 801f9c4:	d1be      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f9c6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f9c8:	4770      	bx	lr
 801f9ca:	2a0a      	cmp	r2, #10
 801f9cc:	d02c      	beq.n	801fa28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801f9ce:	d301      	bcc.n	801f9d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801f9d0:	2a0b      	cmp	r2, #11
 801f9d2:	d1b7      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f9d4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f9d6:	4770      	bx	lr
 801f9d8:	2a30      	cmp	r2, #48	; 0x30
 801f9da:	d027      	beq.n	801fa2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f9dc:	d808      	bhi.n	801f9f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801f9de:	2a2e      	cmp	r2, #46	; 0x2e
 801f9e0:	684b      	ldr	r3, [r1, #4]
 801f9e2:	d01a      	beq.n	801fa1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801f9e4:	d90b      	bls.n	801f9fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801f9e6:	781b      	ldrb	r3, [r3, #0]
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	d1ab      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f9ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f9ee:	4770      	bx	lr
 801f9f0:	2a32      	cmp	r2, #50	; 0x32
 801f9f2:	d01b      	beq.n	801fa2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f9f4:	d301      	bcc.n	801f9fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801f9f6:	2a33      	cmp	r2, #51	; 0x33
 801f9f8:	d1a4      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f9fa:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f9fc:	4770      	bx	lr
 801f9fe:	781b      	ldrb	r3, [r3, #0]
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d0f3      	beq.n	801f9ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801fa04:	2b01      	cmp	r3, #1
 801fa06:	d19d      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fa08:	6940      	ldr	r0, [r0, #20]
 801fa0a:	4770      	bx	lr
 801fa0c:	684b      	ldr	r3, [r1, #4]
 801fa0e:	781b      	ldrb	r3, [r3, #0]
 801fa10:	b133      	cbz	r3, 801fa20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801fa12:	2b01      	cmp	r3, #1
 801fa14:	d196      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fa16:	68c0      	ldr	r0, [r0, #12]
 801fa18:	4770      	bx	lr
 801fa1a:	781b      	ldrb	r3, [r3, #0]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d191      	bne.n	801f944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fa20:	69c0      	ldr	r0, [r0, #28]
 801fa22:	4770      	bx	lr
 801fa24:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801fa26:	4770      	bx	lr
 801fa28:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801fa2a:	4770      	bx	lr
 801fa2c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801fa2e:	4770      	bx	lr

0801fa30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa34:	b085      	sub	sp, #20
 801fa36:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fa38:	9203      	str	r2, [sp, #12]
 801fa3a:	6870      	ldr	r0, [r6, #4]
 801fa3c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801fa40:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801fa44:	9101      	str	r1, [sp, #4]
 801fa46:	fa1f f885 	uxth.w	r8, r5
 801fa4a:	43ed      	mvns	r5, r5
 801fa4c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fa50:	b2ed      	uxtb	r5, r5
 801fa52:	fb00 2404 	mla	r4, r0, r4, r2
 801fa56:	6832      	ldr	r2, [r6, #0]
 801fa58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fa5c:	4414      	add	r4, r2
 801fa5e:	f8dc 2000 	ldr.w	r2, [ip]
 801fa62:	9202      	str	r2, [sp, #8]
 801fa64:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fa68:	f102 0e04 	add.w	lr, r2, #4
 801fa6c:	9a01      	ldr	r2, [sp, #4]
 801fa6e:	2a00      	cmp	r2, #0
 801fa70:	dc03      	bgt.n	801fa7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fa72:	9a03      	ldr	r2, [sp, #12]
 801fa74:	2a00      	cmp	r2, #0
 801fa76:	f340 8116 	ble.w	801fca6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801fa7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fa7c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801fa80:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fa84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fa86:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801fa8a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	dd0e      	ble.n	801fab0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fa92:	1406      	asrs	r6, r0, #16
 801fa94:	d405      	bmi.n	801faa2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fa96:	4556      	cmp	r6, sl
 801fa98:	da03      	bge.n	801faa2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fa9a:	1416      	asrs	r6, r2, #16
 801fa9c:	d401      	bmi.n	801faa2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fa9e:	454e      	cmp	r6, r9
 801faa0:	db07      	blt.n	801fab2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801faa2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801faa4:	3b01      	subs	r3, #1
 801faa6:	3403      	adds	r4, #3
 801faa8:	4430      	add	r0, r6
 801faaa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801faac:	4432      	add	r2, r6
 801faae:	e7ee      	b.n	801fa8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801fab0:	d063      	beq.n	801fb7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fab2:	1e5e      	subs	r6, r3, #1
 801fab4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801fab6:	fb07 0706 	mla	r7, r7, r6, r0
 801faba:	143f      	asrs	r7, r7, #16
 801fabc:	d454      	bmi.n	801fb68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fabe:	4557      	cmp	r7, sl
 801fac0:	da52      	bge.n	801fb68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fac2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801fac4:	fb07 2606 	mla	r6, r7, r6, r2
 801fac8:	1436      	asrs	r6, r6, #16
 801faca:	d44d      	bmi.n	801fb68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801facc:	454e      	cmp	r6, r9
 801face:	da4b      	bge.n	801fb68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fad0:	1ce6      	adds	r6, r4, #3
 801fad2:	4699      	mov	r9, r3
 801fad4:	f1b9 0f00 	cmp.w	r9, #0
 801fad8:	f106 0603 	add.w	r6, r6, #3
 801fadc:	dd48      	ble.n	801fb70 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801fade:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801fae2:	1417      	asrs	r7, r2, #16
 801fae4:	9902      	ldr	r1, [sp, #8]
 801fae6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801faea:	f109 39ff 	add.w	r9, r9, #4294967295
 801faee:	fb0b 1707 	mla	r7, fp, r7, r1
 801faf2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801faf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801faf8:	f817 700a 	ldrb.w	r7, [r7, sl]
 801fafc:	fb1b fb05 	smulbb	fp, fp, r5
 801fb00:	4408      	add	r0, r1
 801fb02:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fb04:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fb08:	440a      	add	r2, r1
 801fb0a:	eb0e 0a07 	add.w	sl, lr, r7
 801fb0e:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801fb12:	fb07 b708 	mla	r7, r7, r8, fp
 801fb16:	b2bf      	uxth	r7, r7
 801fb18:	f107 0b01 	add.w	fp, r7, #1
 801fb1c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fb20:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801fb24:	fb1b fb05 	smulbb	fp, fp, r5
 801fb28:	123f      	asrs	r7, r7, #8
 801fb2a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801fb2e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801fb32:	fb07 b708 	mla	r7, r7, r8, fp
 801fb36:	b2bf      	uxth	r7, r7
 801fb38:	f107 0b01 	add.w	fp, r7, #1
 801fb3c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fb40:	123f      	asrs	r7, r7, #8
 801fb42:	f806 7c05 	strb.w	r7, [r6, #-5]
 801fb46:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801fb4a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801fb4e:	fb1a fa05 	smulbb	sl, sl, r5
 801fb52:	fb07 a708 	mla	r7, r7, r8, sl
 801fb56:	b2bf      	uxth	r7, r7
 801fb58:	f107 0a01 	add.w	sl, r7, #1
 801fb5c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801fb60:	123f      	asrs	r7, r7, #8
 801fb62:	f806 7c04 	strb.w	r7, [r6, #-4]
 801fb66:	e7b5      	b.n	801fad4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801fb68:	2700      	movs	r7, #0
 801fb6a:	1bde      	subs	r6, r3, r7
 801fb6c:	2e00      	cmp	r6, #0
 801fb6e:	dc42      	bgt.n	801fbf6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801fb70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb78:	441c      	add	r4, r3
 801fb7a:	9b01      	ldr	r3, [sp, #4]
 801fb7c:	2b00      	cmp	r3, #0
 801fb7e:	f340 8092 	ble.w	801fca6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801fb82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fb86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb88:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb90:	eef0 6a62 	vmov.f32	s13, s5
 801fb94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fb98:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fb9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fba0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801fba4:	eef0 6a43 	vmov.f32	s13, s6
 801fba8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fbac:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801fbb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fbb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fbb8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fbbc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fbc0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fbc4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fbc8:	ee12 2a90 	vmov	r2, s5
 801fbcc:	eef0 2a47 	vmov.f32	s5, s14
 801fbd0:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbd4:	ee13 2a10 	vmov	r2, s6
 801fbd8:	9311      	str	r3, [sp, #68]	; 0x44
 801fbda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fbdc:	eeb0 3a67 	vmov.f32	s6, s15
 801fbe0:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbe4:	9312      	str	r3, [sp, #72]	; 0x48
 801fbe6:	9b01      	ldr	r3, [sp, #4]
 801fbe8:	9a03      	ldr	r2, [sp, #12]
 801fbea:	3b01      	subs	r3, #1
 801fbec:	9301      	str	r3, [sp, #4]
 801fbee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fbf0:	bf08      	it	eq
 801fbf2:	4613      	moveq	r3, r2
 801fbf4:	e73a      	b.n	801fa6c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fbf6:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801fbfa:	d44e      	bmi.n	801fc9a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fbfc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801fc00:	4556      	cmp	r6, sl
 801fc02:	dd4a      	ble.n	801fc9a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fc04:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801fc08:	d447      	bmi.n	801fc9a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fc0a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801fc0e:	4559      	cmp	r1, fp
 801fc10:	dd43      	ble.n	801fc9a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fc12:	fa0f f986 	sxth.w	r9, r6
 801fc16:	9902      	ldr	r1, [sp, #8]
 801fc18:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801fc1c:	fb0b 1909 	mla	r9, fp, r9, r1
 801fc20:	f814 b006 	ldrb.w	fp, [r4, r6]
 801fc24:	f819 900a 	ldrb.w	r9, [r9, sl]
 801fc28:	fb1b fb05 	smulbb	fp, fp, r5
 801fc2c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fc30:	eb0e 0a09 	add.w	sl, lr, r9
 801fc34:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801fc38:	fb09 b908 	mla	r9, r9, r8, fp
 801fc3c:	fa1f f989 	uxth.w	r9, r9
 801fc40:	f109 0b01 	add.w	fp, r9, #1
 801fc44:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fc48:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc4c:	f804 9006 	strb.w	r9, [r4, r6]
 801fc50:	4426      	add	r6, r4
 801fc52:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801fc56:	f896 b001 	ldrb.w	fp, [r6, #1]
 801fc5a:	fb1b fb05 	smulbb	fp, fp, r5
 801fc5e:	fb09 b908 	mla	r9, r9, r8, fp
 801fc62:	fa1f f989 	uxth.w	r9, r9
 801fc66:	f109 0b01 	add.w	fp, r9, #1
 801fc6a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fc6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc72:	f886 9001 	strb.w	r9, [r6, #1]
 801fc76:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fc7a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801fc7e:	fb1a fa05 	smulbb	sl, sl, r5
 801fc82:	fb09 a908 	mla	r9, r9, r8, sl
 801fc86:	fa1f f989 	uxth.w	r9, r9
 801fc8a:	f109 0a01 	add.w	sl, r9, #1
 801fc8e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801fc92:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc96:	f886 9002 	strb.w	r9, [r6, #2]
 801fc9a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fc9c:	3701      	adds	r7, #1
 801fc9e:	4408      	add	r0, r1
 801fca0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fca2:	440a      	add	r2, r1
 801fca4:	e761      	b.n	801fb6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fca6:	b005      	add	sp, #20
 801fca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fcac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fcac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcb0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fcb2:	4693      	mov	fp, r2
 801fcb4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801fcb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fcba:	6868      	ldr	r0, [r5, #4]
 801fcbc:	6877      	ldr	r7, [r6, #4]
 801fcbe:	9100      	str	r1, [sp, #0]
 801fcc0:	3704      	adds	r7, #4
 801fcc2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801fcc6:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801fcca:	fb00 2404 	mla	r4, r0, r4, r2
 801fcce:	682a      	ldr	r2, [r5, #0]
 801fcd0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcd4:	4414      	add	r4, r2
 801fcd6:	6832      	ldr	r2, [r6, #0]
 801fcd8:	9201      	str	r2, [sp, #4]
 801fcda:	9a00      	ldr	r2, [sp, #0]
 801fcdc:	2a00      	cmp	r2, #0
 801fcde:	dc03      	bgt.n	801fce8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fce0:	f1bb 0f00 	cmp.w	fp, #0
 801fce4:	f340 80bc 	ble.w	801fe60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801fce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fcea:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801fcee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fcf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fcf4:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801fcf8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	dd0c      	ble.n	801fd1a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fd00:	1405      	asrs	r5, r0, #16
 801fd02:	d405      	bmi.n	801fd10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fd04:	4555      	cmp	r5, sl
 801fd06:	da03      	bge.n	801fd10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fd08:	1415      	asrs	r5, r2, #16
 801fd0a:	d401      	bmi.n	801fd10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fd0c:	454d      	cmp	r5, r9
 801fd0e:	db05      	blt.n	801fd1c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd10:	4440      	add	r0, r8
 801fd12:	4472      	add	r2, lr
 801fd14:	3b01      	subs	r3, #1
 801fd16:	3403      	adds	r4, #3
 801fd18:	e7f0      	b.n	801fcfc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801fd1a:	d03f      	beq.n	801fd9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801fd1c:	1e5d      	subs	r5, r3, #1
 801fd1e:	fb08 0c05 	mla	ip, r8, r5, r0
 801fd22:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801fd26:	d42e      	bmi.n	801fd86 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fd28:	45d4      	cmp	ip, sl
 801fd2a:	da2c      	bge.n	801fd86 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fd2c:	fb0e 2505 	mla	r5, lr, r5, r2
 801fd30:	142d      	asrs	r5, r5, #16
 801fd32:	d428      	bmi.n	801fd86 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fd34:	454d      	cmp	r5, r9
 801fd36:	da26      	bge.n	801fd86 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fd38:	1ce5      	adds	r5, r4, #3
 801fd3a:	469c      	mov	ip, r3
 801fd3c:	f1bc 0f00 	cmp.w	ip, #0
 801fd40:	f105 0503 	add.w	r5, r5, #3
 801fd44:	dd25      	ble.n	801fd92 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801fd46:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801fd4a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801fd4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fd52:	4472      	add	r2, lr
 801fd54:	468a      	mov	sl, r1
 801fd56:	9901      	ldr	r1, [sp, #4]
 801fd58:	fb0a 1909 	mla	r9, sl, r9, r1
 801fd5c:	1401      	asrs	r1, r0, #16
 801fd5e:	4440      	add	r0, r8
 801fd60:	f819 9001 	ldrb.w	r9, [r9, r1]
 801fd64:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fd68:	eb07 0a09 	add.w	sl, r7, r9
 801fd6c:	f817 9009 	ldrb.w	r9, [r7, r9]
 801fd70:	f805 9c06 	strb.w	r9, [r5, #-6]
 801fd74:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801fd78:	f805 9c05 	strb.w	r9, [r5, #-5]
 801fd7c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fd80:	f805 9c04 	strb.w	r9, [r5, #-4]
 801fd84:	e7da      	b.n	801fd3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd86:	2500      	movs	r5, #0
 801fd88:	eba3 0c05 	sub.w	ip, r3, r5
 801fd8c:	f1bc 0f00 	cmp.w	ip, #0
 801fd90:	dc3b      	bgt.n	801fe0a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801fd92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd9a:	441c      	add	r4, r3
 801fd9c:	9b00      	ldr	r3, [sp, #0]
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	dd5e      	ble.n	801fe60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801fda2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fda6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fda8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fdac:	eeb0 6a62 	vmov.f32	s12, s5
 801fdb0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fdb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fdb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fdbc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801fdc0:	eeb0 6a43 	vmov.f32	s12, s6
 801fdc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fdc8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801fdcc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fdd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fdd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fdd8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fddc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fde0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fde4:	ee12 2a90 	vmov	r2, s5
 801fde8:	eef0 2a47 	vmov.f32	s5, s14
 801fdec:	fb92 f8f3 	sdiv	r8, r2, r3
 801fdf0:	ee13 2a10 	vmov	r2, s6
 801fdf4:	eeb0 3a67 	vmov.f32	s6, s15
 801fdf8:	fb92 fef3 	sdiv	lr, r2, r3
 801fdfc:	9b00      	ldr	r3, [sp, #0]
 801fdfe:	3b01      	subs	r3, #1
 801fe00:	9300      	str	r3, [sp, #0]
 801fe02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe04:	bf08      	it	eq
 801fe06:	465b      	moveq	r3, fp
 801fe08:	e767      	b.n	801fcda <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fe0a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fe0e:	d423      	bmi.n	801fe58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fe10:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801fe14:	45cc      	cmp	ip, r9
 801fe16:	dd1f      	ble.n	801fe58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fe18:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801fe1c:	d41c      	bmi.n	801fe58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fe1e:	68f1      	ldr	r1, [r6, #12]
 801fe20:	4551      	cmp	r1, sl
 801fe22:	dd19      	ble.n	801fe58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fe24:	fa0f fc8c 	sxth.w	ip, ip
 801fe28:	9901      	ldr	r1, [sp, #4]
 801fe2a:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801fe2e:	f81c c009 	ldrb.w	ip, [ip, r9]
 801fe32:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fe36:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801fe3a:	eb07 090c 	add.w	r9, r7, ip
 801fe3e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801fe42:	f804 a00c 	strb.w	sl, [r4, ip]
 801fe46:	44a4      	add	ip, r4
 801fe48:	f899 a001 	ldrb.w	sl, [r9, #1]
 801fe4c:	f88c a001 	strb.w	sl, [ip, #1]
 801fe50:	f899 9002 	ldrb.w	r9, [r9, #2]
 801fe54:	f88c 9002 	strb.w	r9, [ip, #2]
 801fe58:	4440      	add	r0, r8
 801fe5a:	4472      	add	r2, lr
 801fe5c:	3501      	adds	r5, #1
 801fe5e:	e793      	b.n	801fd88 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801fe60:	b003      	add	sp, #12
 801fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe6a:	b085      	sub	sp, #20
 801fe6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fe70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fe72:	9202      	str	r2, [sp, #8]
 801fe74:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801fe78:	6860      	ldr	r0, [r4, #4]
 801fe7a:	9203      	str	r2, [sp, #12]
 801fe7c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801fe80:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801fe84:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801fe88:	fb00 2505 	mla	r5, r0, r5, r2
 801fe8c:	6822      	ldr	r2, [r4, #0]
 801fe8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fe92:	4415      	add	r5, r2
 801fe94:	f8dc 2000 	ldr.w	r2, [ip]
 801fe98:	9200      	str	r2, [sp, #0]
 801fe9a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fe9e:	3204      	adds	r2, #4
 801fea0:	9201      	str	r2, [sp, #4]
 801fea2:	2900      	cmp	r1, #0
 801fea4:	dc03      	bgt.n	801feae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fea6:	9a02      	ldr	r2, [sp, #8]
 801fea8:	2a00      	cmp	r2, #0
 801feaa:	f340 8127 	ble.w	80200fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801feae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801feb0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801feb4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801feb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801feba:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801febe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fec2:	2b00      	cmp	r3, #0
 801fec4:	dd0d      	ble.n	801fee2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fec6:	1422      	asrs	r2, r4, #16
 801fec8:	d405      	bmi.n	801fed6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801feca:	4542      	cmp	r2, r8
 801fecc:	da03      	bge.n	801fed6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fece:	1402      	asrs	r2, r0, #16
 801fed0:	d401      	bmi.n	801fed6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fed2:	42ba      	cmp	r2, r7
 801fed4:	db06      	blt.n	801fee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fed6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fed8:	4474      	add	r4, lr
 801feda:	3b01      	subs	r3, #1
 801fedc:	3503      	adds	r5, #3
 801fede:	4410      	add	r0, r2
 801fee0:	e7ef      	b.n	801fec2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fee2:	d075      	beq.n	801ffd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801fee4:	1e5a      	subs	r2, r3, #1
 801fee6:	fb0e 4602 	mla	r6, lr, r2, r4
 801feea:	1436      	asrs	r6, r6, #16
 801feec:	d465      	bmi.n	801ffba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801feee:	4546      	cmp	r6, r8
 801fef0:	da63      	bge.n	801ffba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fef2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fef4:	fb06 0202 	mla	r2, r6, r2, r0
 801fef8:	1412      	asrs	r2, r2, #16
 801fefa:	d45e      	bmi.n	801ffba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fefc:	42ba      	cmp	r2, r7
 801fefe:	da5c      	bge.n	801ffba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ff00:	1cef      	adds	r7, r5, #3
 801ff02:	4699      	mov	r9, r3
 801ff04:	f1b9 0f00 	cmp.w	r9, #0
 801ff08:	dd5d      	ble.n	801ffc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801ff0a:	1402      	asrs	r2, r0, #16
 801ff0c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ff10:	1426      	asrs	r6, r4, #16
 801ff12:	4692      	mov	sl, r2
 801ff14:	9a00      	ldr	r2, [sp, #0]
 801ff16:	fb08 220a 	mla	r2, r8, sl, r2
 801ff1a:	5d92      	ldrb	r2, [r2, r6]
 801ff1c:	9e01      	ldr	r6, [sp, #4]
 801ff1e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ff22:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801ff26:	d041      	beq.n	801ffac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ff28:	9a03      	ldr	r2, [sp, #12]
 801ff2a:	fa5f fb86 	uxtb.w	fp, r6
 801ff2e:	fb02 f808 	mul.w	r8, r2, r8
 801ff32:	f108 0201 	add.w	r2, r8, #1
 801ff36:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801ff3a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801ff3e:	1212      	asrs	r2, r2, #8
 801ff40:	fa1f fa82 	uxth.w	sl, r2
 801ff44:	43d2      	mvns	r2, r2
 801ff46:	fb1b fb0a 	smulbb	fp, fp, sl
 801ff4a:	b2d2      	uxtb	r2, r2
 801ff4c:	fb08 b802 	mla	r8, r8, r2, fp
 801ff50:	fa1f f888 	uxth.w	r8, r8
 801ff54:	f108 0b01 	add.w	fp, r8, #1
 801ff58:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ff5c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ff60:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ff64:	fb1b fb0a 	smulbb	fp, fp, sl
 801ff68:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ff6c:	fb16 fa0a 	smulbb	sl, r6, sl
 801ff70:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ff74:	f807 8c03 	strb.w	r8, [r7, #-3]
 801ff78:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801ff7c:	fb06 aa02 	mla	sl, r6, r2, sl
 801ff80:	fb08 b802 	mla	r8, r8, r2, fp
 801ff84:	fa1f fa8a 	uxth.w	sl, sl
 801ff88:	fa1f f888 	uxth.w	r8, r8
 801ff8c:	f10a 0601 	add.w	r6, sl, #1
 801ff90:	f108 0b01 	add.w	fp, r8, #1
 801ff94:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ff98:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ff9c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ffa0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ffa4:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ffa8:	f807 8c02 	strb.w	r8, [r7, #-2]
 801ffac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ffae:	4474      	add	r4, lr
 801ffb0:	3703      	adds	r7, #3
 801ffb2:	f109 39ff 	add.w	r9, r9, #4294967295
 801ffb6:	4410      	add	r0, r2
 801ffb8:	e7a4      	b.n	801ff04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ffba:	f04f 0800 	mov.w	r8, #0
 801ffbe:	eba3 0208 	sub.w	r2, r3, r8
 801ffc2:	2a00      	cmp	r2, #0
 801ffc4:	dc3b      	bgt.n	802003e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801ffc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ffce:	441d      	add	r5, r3
 801ffd0:	2900      	cmp	r1, #0
 801ffd2:	f340 8093 	ble.w	80200fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ffd6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ffda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffdc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ffe0:	3901      	subs	r1, #1
 801ffe2:	eeb0 6a62 	vmov.f32	s12, s5
 801ffe6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ffea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ffee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fff2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fff6:	eeb0 6a43 	vmov.f32	s12, s6
 801fffa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fffe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020002:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020006:	ee61 7a27 	vmul.f32	s15, s2, s15
 802000a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802000e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020012:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020016:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802001a:	ee12 2a90 	vmov	r2, s5
 802001e:	eef0 2a47 	vmov.f32	s5, s14
 8020022:	fb92 fef3 	sdiv	lr, r2, r3
 8020026:	ee13 2a10 	vmov	r2, s6
 802002a:	eeb0 3a67 	vmov.f32	s6, s15
 802002e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020032:	9a02      	ldr	r2, [sp, #8]
 8020034:	9312      	str	r3, [sp, #72]	; 0x48
 8020036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020038:	bf08      	it	eq
 802003a:	4613      	moveq	r3, r2
 802003c:	e731      	b.n	801fea2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802003e:	1427      	asrs	r7, r4, #16
 8020040:	d456      	bmi.n	80200f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020042:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020046:	42be      	cmp	r6, r7
 8020048:	dd52      	ble.n	80200f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802004a:	ea5f 4920 	movs.w	r9, r0, asr #16
 802004e:	d44f      	bmi.n	80200f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020050:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020054:	454a      	cmp	r2, r9
 8020056:	dd4b      	ble.n	80200f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020058:	9a00      	ldr	r2, [sp, #0]
 802005a:	b236      	sxth	r6, r6
 802005c:	fb09 2606 	mla	r6, r9, r6, r2
 8020060:	5df2      	ldrb	r2, [r6, r7]
 8020062:	9e01      	ldr	r6, [sp, #4]
 8020064:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8020068:	0e3a      	lsrs	r2, r7, #24
 802006a:	d041      	beq.n	80200f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802006c:	9e03      	ldr	r6, [sp, #12]
 802006e:	fa5f fb87 	uxtb.w	fp, r7
 8020072:	4372      	muls	r2, r6
 8020074:	1c56      	adds	r6, r2, #1
 8020076:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802007a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 802007e:	1212      	asrs	r2, r2, #8
 8020080:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020084:	fa1f fa82 	uxth.w	sl, r2
 8020088:	43d2      	mvns	r2, r2
 802008a:	fb1b fb0a 	smulbb	fp, fp, sl
 802008e:	b2d2      	uxtb	r2, r2
 8020090:	fb09 b902 	mla	r9, r9, r2, fp
 8020094:	fa1f f989 	uxth.w	r9, r9
 8020098:	f109 0b01 	add.w	fp, r9, #1
 802009c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80200a0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80200a4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80200a8:	fb1b fb0a 	smulbb	fp, fp, sl
 80200ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 80200b0:	fb17 fa0a 	smulbb	sl, r7, sl
 80200b4:	f805 9006 	strb.w	r9, [r5, r6]
 80200b8:	442e      	add	r6, r5
 80200ba:	78b7      	ldrb	r7, [r6, #2]
 80200bc:	f896 9001 	ldrb.w	r9, [r6, #1]
 80200c0:	fb07 aa02 	mla	sl, r7, r2, sl
 80200c4:	fb09 b902 	mla	r9, r9, r2, fp
 80200c8:	fa1f fa8a 	uxth.w	sl, sl
 80200cc:	fa1f f989 	uxth.w	r9, r9
 80200d0:	f10a 0701 	add.w	r7, sl, #1
 80200d4:	f109 0b01 	add.w	fp, r9, #1
 80200d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80200dc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80200e0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80200e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80200e8:	f886 a002 	strb.w	sl, [r6, #2]
 80200ec:	f886 9001 	strb.w	r9, [r6, #1]
 80200f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80200f2:	4474      	add	r4, lr
 80200f4:	f108 0801 	add.w	r8, r8, #1
 80200f8:	4410      	add	r0, r2
 80200fa:	e760      	b.n	801ffbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80200fc:	b005      	add	sp, #20
 80200fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020102 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020106:	b085      	sub	sp, #20
 8020108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802010c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802010e:	9203      	str	r2, [sp, #12]
 8020110:	6868      	ldr	r0, [r5, #4]
 8020112:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8020116:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 802011a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802011e:	fb00 2404 	mla	r4, r0, r4, r2
 8020122:	682a      	ldr	r2, [r5, #0]
 8020124:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020128:	4414      	add	r4, r2
 802012a:	f8dc 2000 	ldr.w	r2, [ip]
 802012e:	9201      	str	r2, [sp, #4]
 8020130:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020134:	3204      	adds	r2, #4
 8020136:	9202      	str	r2, [sp, #8]
 8020138:	2900      	cmp	r1, #0
 802013a:	dc03      	bgt.n	8020144 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802013c:	9a03      	ldr	r2, [sp, #12]
 802013e:	2a00      	cmp	r2, #0
 8020140:	f340 8137 	ble.w	80203b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020144:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020146:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802014a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802014e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020150:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020154:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020158:	2b00      	cmp	r3, #0
 802015a:	dd0d      	ble.n	8020178 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802015c:	1405      	asrs	r5, r0, #16
 802015e:	d405      	bmi.n	802016c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020160:	4545      	cmp	r5, r8
 8020162:	da03      	bge.n	802016c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020164:	1415      	asrs	r5, r2, #16
 8020166:	d401      	bmi.n	802016c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020168:	42bd      	cmp	r5, r7
 802016a:	db06      	blt.n	802017a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802016c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802016e:	4470      	add	r0, lr
 8020170:	3b01      	subs	r3, #1
 8020172:	3403      	adds	r4, #3
 8020174:	442a      	add	r2, r5
 8020176:	e7ef      	b.n	8020158 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8020178:	d070      	beq.n	802025c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 802017a:	1e5d      	subs	r5, r3, #1
 802017c:	fb0e 0605 	mla	r6, lr, r5, r0
 8020180:	1436      	asrs	r6, r6, #16
 8020182:	d462      	bmi.n	802024a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020184:	4546      	cmp	r6, r8
 8020186:	da60      	bge.n	802024a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020188:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802018a:	fb06 2505 	mla	r5, r6, r5, r2
 802018e:	142d      	asrs	r5, r5, #16
 8020190:	d45b      	bmi.n	802024a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020192:	42bd      	cmp	r5, r7
 8020194:	da59      	bge.n	802024a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020196:	1ce5      	adds	r5, r4, #3
 8020198:	469a      	mov	sl, r3
 802019a:	f1ba 0f00 	cmp.w	sl, #0
 802019e:	dd58      	ble.n	8020252 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80201a0:	1416      	asrs	r6, r2, #16
 80201a2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80201a6:	1407      	asrs	r7, r0, #16
 80201a8:	46b1      	mov	r9, r6
 80201aa:	9e01      	ldr	r6, [sp, #4]
 80201ac:	fb08 6609 	mla	r6, r8, r9, r6
 80201b0:	5df6      	ldrb	r6, [r6, r7]
 80201b2:	9f02      	ldr	r7, [sp, #8]
 80201b4:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80201b8:	0e37      	lsrs	r7, r6, #24
 80201ba:	2fff      	cmp	r7, #255	; 0xff
 80201bc:	f000 80f0 	beq.w	80203a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80201c0:	fa5f f887 	uxtb.w	r8, r7
 80201c4:	b3d7      	cbz	r7, 802023c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80201c6:	fa1f f788 	uxth.w	r7, r8
 80201ca:	ea6f 0808 	mvn.w	r8, r8
 80201ce:	fa5f fb86 	uxtb.w	fp, r6
 80201d2:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80201d6:	fa5f f888 	uxtb.w	r8, r8
 80201da:	fb1b fb07 	smulbb	fp, fp, r7
 80201de:	fb09 b908 	mla	r9, r9, r8, fp
 80201e2:	fa1f f989 	uxth.w	r9, r9
 80201e6:	f109 0b01 	add.w	fp, r9, #1
 80201ea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80201ee:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80201f2:	fb1b fb08 	smulbb	fp, fp, r8
 80201f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80201fa:	f805 9c03 	strb.w	r9, [r5, #-3]
 80201fe:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8020202:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020206:	fb09 b907 	mla	r9, r9, r7, fp
 802020a:	fa1f f989 	uxth.w	r9, r9
 802020e:	f109 0b01 	add.w	fp, r9, #1
 8020212:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020216:	ea4f 2929 	mov.w	r9, r9, asr #8
 802021a:	f805 9c02 	strb.w	r9, [r5, #-2]
 802021e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8020222:	fb19 f808 	smulbb	r8, r9, r8
 8020226:	fb06 8607 	mla	r6, r6, r7, r8
 802022a:	b2b6      	uxth	r6, r6
 802022c:	f106 0801 	add.w	r8, r6, #1
 8020230:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8020234:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020238:	f805 8c01 	strb.w	r8, [r5, #-1]
 802023c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802023e:	4470      	add	r0, lr
 8020240:	3503      	adds	r5, #3
 8020242:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020246:	4432      	add	r2, r6
 8020248:	e7a7      	b.n	802019a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802024a:	2600      	movs	r6, #0
 802024c:	1b9d      	subs	r5, r3, r6
 802024e:	2d00      	cmp	r5, #0
 8020250:	dc3b      	bgt.n	80202ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020252:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020256:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802025a:	441c      	add	r4, r3
 802025c:	2900      	cmp	r1, #0
 802025e:	f340 80a8 	ble.w	80203b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020262:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020268:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802026c:	3901      	subs	r1, #1
 802026e:	eeb0 6a62 	vmov.f32	s12, s5
 8020272:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020276:	ee31 1a05 	vadd.f32	s2, s2, s10
 802027a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802027e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020282:	eeb0 6a43 	vmov.f32	s12, s6
 8020286:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802028a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802028e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020292:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020296:	ee77 2a62 	vsub.f32	s5, s14, s5
 802029a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802029e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202a6:	ee12 2a90 	vmov	r2, s5
 80202aa:	eef0 2a47 	vmov.f32	s5, s14
 80202ae:	fb92 fef3 	sdiv	lr, r2, r3
 80202b2:	ee13 2a10 	vmov	r2, s6
 80202b6:	eeb0 3a67 	vmov.f32	s6, s15
 80202ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80202be:	9a03      	ldr	r2, [sp, #12]
 80202c0:	9312      	str	r3, [sp, #72]	; 0x48
 80202c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80202c4:	bf08      	it	eq
 80202c6:	4613      	moveq	r3, r2
 80202c8:	e736      	b.n	8020138 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80202ca:	ea5f 4820 	movs.w	r8, r0, asr #16
 80202ce:	d457      	bmi.n	8020380 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80202d0:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80202d4:	4547      	cmp	r7, r8
 80202d6:	dd53      	ble.n	8020380 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80202d8:	ea5f 4922 	movs.w	r9, r2, asr #16
 80202dc:	d450      	bmi.n	8020380 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80202de:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80202e2:	454d      	cmp	r5, r9
 80202e4:	dd4c      	ble.n	8020380 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80202e6:	9d01      	ldr	r5, [sp, #4]
 80202e8:	b23f      	sxth	r7, r7
 80202ea:	fb09 5707 	mla	r7, r9, r7, r5
 80202ee:	f817 5008 	ldrb.w	r5, [r7, r8]
 80202f2:	9f02      	ldr	r7, [sp, #8]
 80202f4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80202f8:	0e2f      	lsrs	r7, r5, #24
 80202fa:	2fff      	cmp	r7, #255	; 0xff
 80202fc:	d045      	beq.n	802038a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80202fe:	fa5f f987 	uxtb.w	r9, r7
 8020302:	b3ef      	cbz	r7, 8020380 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020304:	fa1f f889 	uxth.w	r8, r9
 8020308:	ea6f 0909 	mvn.w	r9, r9
 802030c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8020310:	fa5f fb85 	uxtb.w	fp, r5
 8020314:	f814 a007 	ldrb.w	sl, [r4, r7]
 8020318:	fa5f f989 	uxtb.w	r9, r9
 802031c:	fb1b fb08 	smulbb	fp, fp, r8
 8020320:	fb0a ba09 	mla	sl, sl, r9, fp
 8020324:	fa1f fa8a 	uxth.w	sl, sl
 8020328:	f10a 0b01 	add.w	fp, sl, #1
 802032c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8020330:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020334:	f804 a007 	strb.w	sl, [r4, r7]
 8020338:	4427      	add	r7, r4
 802033a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802033e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8020342:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020346:	fb1b fb09 	smulbb	fp, fp, r9
 802034a:	fb0a ba08 	mla	sl, sl, r8, fp
 802034e:	fa1f fa8a 	uxth.w	sl, sl
 8020352:	f10a 0b01 	add.w	fp, sl, #1
 8020356:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 802035a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802035e:	f887 a001 	strb.w	sl, [r7, #1]
 8020362:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020366:	fb1a f909 	smulbb	r9, sl, r9
 802036a:	fb05 9508 	mla	r5, r5, r8, r9
 802036e:	b2ad      	uxth	r5, r5
 8020370:	f105 0901 	add.w	r9, r5, #1
 8020374:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8020378:	ea4f 2929 	mov.w	r9, r9, asr #8
 802037c:	f887 9002 	strb.w	r9, [r7, #2]
 8020380:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020382:	4470      	add	r0, lr
 8020384:	3601      	adds	r6, #1
 8020386:	442a      	add	r2, r5
 8020388:	e760      	b.n	802024c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802038a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 802038e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8020392:	55e5      	strb	r5, [r4, r7]
 8020394:	4427      	add	r7, r4
 8020396:	0c2d      	lsrs	r5, r5, #16
 8020398:	f887 8001 	strb.w	r8, [r7, #1]
 802039c:	70bd      	strb	r5, [r7, #2]
 802039e:	e7ef      	b.n	8020380 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80203a0:	0a37      	lsrs	r7, r6, #8
 80203a2:	f805 6c03 	strb.w	r6, [r5, #-3]
 80203a6:	0c36      	lsrs	r6, r6, #16
 80203a8:	f805 7c02 	strb.w	r7, [r5, #-2]
 80203ac:	f805 6c01 	strb.w	r6, [r5, #-1]
 80203b0:	e744      	b.n	802023c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80203b2:	b005      	add	sp, #20
 80203b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080203b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80203b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203bc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80203be:	9201      	str	r2, [sp, #4]
 80203c0:	6870      	ldr	r0, [r6, #4]
 80203c2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80203c6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80203ca:	fa1f fe85 	uxth.w	lr, r5
 80203ce:	43ed      	mvns	r5, r5
 80203d0:	f8dc 8000 	ldr.w	r8, [ip]
 80203d4:	b2ed      	uxtb	r5, r5
 80203d6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80203da:	fb00 2404 	mla	r4, r0, r4, r2
 80203de:	6832      	ldr	r2, [r6, #0]
 80203e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80203e4:	4414      	add	r4, r2
 80203e6:	2900      	cmp	r1, #0
 80203e8:	dc03      	bgt.n	80203f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80203ea:	9a01      	ldr	r2, [sp, #4]
 80203ec:	2a00      	cmp	r2, #0
 80203ee:	f340 810d 	ble.w	802060c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80203f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80203f4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80203f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80203fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80203fe:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8020402:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020406:	2b00      	cmp	r3, #0
 8020408:	dd0e      	ble.n	8020428 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802040a:	1406      	asrs	r6, r0, #16
 802040c:	d405      	bmi.n	802041a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802040e:	4556      	cmp	r6, sl
 8020410:	da03      	bge.n	802041a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020412:	1416      	asrs	r6, r2, #16
 8020414:	d401      	bmi.n	802041a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020416:	454e      	cmp	r6, r9
 8020418:	db07      	blt.n	802042a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802041a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802041c:	3b01      	subs	r3, #1
 802041e:	3403      	adds	r4, #3
 8020420:	4430      	add	r0, r6
 8020422:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020424:	4432      	add	r2, r6
 8020426:	e7ee      	b.n	8020406 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020428:	d060      	beq.n	80204ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802042a:	1e5e      	subs	r6, r3, #1
 802042c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802042e:	fb07 0706 	mla	r7, r7, r6, r0
 8020432:	143f      	asrs	r7, r7, #16
 8020434:	d451      	bmi.n	80204da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020436:	4557      	cmp	r7, sl
 8020438:	da4f      	bge.n	80204da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802043a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802043c:	fb07 2606 	mla	r6, r7, r6, r2
 8020440:	1436      	asrs	r6, r6, #16
 8020442:	d44a      	bmi.n	80204da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020444:	454e      	cmp	r6, r9
 8020446:	da48      	bge.n	80204da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020448:	1ce6      	adds	r6, r4, #3
 802044a:	4699      	mov	r9, r3
 802044c:	f1b9 0f00 	cmp.w	r9, #0
 8020450:	f106 0603 	add.w	r6, r6, #3
 8020454:	dd45      	ble.n	80204e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8020456:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 802045a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 802045e:	1417      	asrs	r7, r2, #16
 8020460:	f109 39ff 	add.w	r9, r9, #4294967295
 8020464:	fb0b a707 	mla	r7, fp, r7, sl
 8020468:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 802046c:	fb1b fb05 	smulbb	fp, fp, r5
 8020470:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020474:	eb08 0a07 	add.w	sl, r8, r7
 8020478:	f818 7007 	ldrb.w	r7, [r8, r7]
 802047c:	fb07 b70e 	mla	r7, r7, lr, fp
 8020480:	b2bf      	uxth	r7, r7
 8020482:	f107 0b01 	add.w	fp, r7, #1
 8020486:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 802048a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 802048e:	fb1b fb05 	smulbb	fp, fp, r5
 8020492:	123f      	asrs	r7, r7, #8
 8020494:	f806 7c06 	strb.w	r7, [r6, #-6]
 8020498:	f89a 7001 	ldrb.w	r7, [sl, #1]
 802049c:	fb07 b70e 	mla	r7, r7, lr, fp
 80204a0:	b2bf      	uxth	r7, r7
 80204a2:	f107 0b01 	add.w	fp, r7, #1
 80204a6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80204aa:	123f      	asrs	r7, r7, #8
 80204ac:	f806 7c05 	strb.w	r7, [r6, #-5]
 80204b0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80204b4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80204b8:	fb1a fa05 	smulbb	sl, sl, r5
 80204bc:	fb07 a70e 	mla	r7, r7, lr, sl
 80204c0:	b2bf      	uxth	r7, r7
 80204c2:	f107 0a01 	add.w	sl, r7, #1
 80204c6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80204ca:	123f      	asrs	r7, r7, #8
 80204cc:	f806 7c04 	strb.w	r7, [r6, #-4]
 80204d0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80204d2:	4438      	add	r0, r7
 80204d4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80204d6:	443a      	add	r2, r7
 80204d8:	e7b8      	b.n	802044c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80204da:	2700      	movs	r7, #0
 80204dc:	1bde      	subs	r6, r3, r7
 80204de:	2e00      	cmp	r6, #0
 80204e0:	dc3f      	bgt.n	8020562 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80204e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80204ea:	441c      	add	r4, r3
 80204ec:	2900      	cmp	r1, #0
 80204ee:	f340 808d 	ble.w	802060c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80204f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80204f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204fc:	3901      	subs	r1, #1
 80204fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020502:	eef0 6a62 	vmov.f32	s13, s5
 8020506:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802050a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802050e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020512:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8020516:	eef0 6a43 	vmov.f32	s13, s6
 802051a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802051e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8020522:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020526:	ee61 7a27 	vmul.f32	s15, s2, s15
 802052a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802052e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020532:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020536:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802053a:	ee12 2a90 	vmov	r2, s5
 802053e:	eef0 2a47 	vmov.f32	s5, s14
 8020542:	fb92 f3f3 	sdiv	r3, r2, r3
 8020546:	ee13 2a10 	vmov	r2, s6
 802054a:	930f      	str	r3, [sp, #60]	; 0x3c
 802054c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802054e:	eeb0 3a67 	vmov.f32	s6, s15
 8020552:	fb92 f3f3 	sdiv	r3, r2, r3
 8020556:	9a01      	ldr	r2, [sp, #4]
 8020558:	9310      	str	r3, [sp, #64]	; 0x40
 802055a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802055c:	bf08      	it	eq
 802055e:	4613      	moveq	r3, r2
 8020560:	e741      	b.n	80203e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020562:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020566:	d44b      	bmi.n	8020600 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020568:	f8dc b008 	ldr.w	fp, [ip, #8]
 802056c:	45cb      	cmp	fp, r9
 802056e:	dd47      	ble.n	8020600 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020570:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020574:	d444      	bmi.n	8020600 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020576:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802057a:	4556      	cmp	r6, sl
 802057c:	dd40      	ble.n	8020600 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802057e:	fa0f f68b 	sxth.w	r6, fp
 8020582:	fb0a 9906 	mla	r9, sl, r6, r9
 8020586:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 802058a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802058e:	f814 b006 	ldrb.w	fp, [r4, r6]
 8020592:	fb1b fb05 	smulbb	fp, fp, r5
 8020596:	eb08 0a09 	add.w	sl, r8, r9
 802059a:	f818 9009 	ldrb.w	r9, [r8, r9]
 802059e:	fb09 b90e 	mla	r9, r9, lr, fp
 80205a2:	fa1f f989 	uxth.w	r9, r9
 80205a6:	f109 0b01 	add.w	fp, r9, #1
 80205aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80205ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 80205b2:	f804 9006 	strb.w	r9, [r4, r6]
 80205b6:	4426      	add	r6, r4
 80205b8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80205bc:	f896 b001 	ldrb.w	fp, [r6, #1]
 80205c0:	fb1b fb05 	smulbb	fp, fp, r5
 80205c4:	fb09 b90e 	mla	r9, r9, lr, fp
 80205c8:	fa1f f989 	uxth.w	r9, r9
 80205cc:	f109 0b01 	add.w	fp, r9, #1
 80205d0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80205d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80205d8:	f886 9001 	strb.w	r9, [r6, #1]
 80205dc:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80205e0:	f896 a002 	ldrb.w	sl, [r6, #2]
 80205e4:	fb1a fa05 	smulbb	sl, sl, r5
 80205e8:	fb09 a90e 	mla	r9, r9, lr, sl
 80205ec:	fa1f f989 	uxth.w	r9, r9
 80205f0:	f109 0a01 	add.w	sl, r9, #1
 80205f4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80205f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80205fc:	f886 9002 	strb.w	r9, [r6, #2]
 8020600:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020602:	3701      	adds	r7, #1
 8020604:	4430      	add	r0, r6
 8020606:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020608:	4432      	add	r2, r6
 802060a:	e767      	b.n	80204dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802060c:	b003      	add	sp, #12
 802060e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020612 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020612:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020616:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802061c:	9201      	str	r2, [sp, #4]
 802061e:	6868      	ldr	r0, [r5, #4]
 8020620:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8020622:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8020626:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 802062a:	fb00 2404 	mla	r4, r0, r4, r2
 802062e:	682a      	ldr	r2, [r5, #0]
 8020630:	f8d7 8000 	ldr.w	r8, [r7]
 8020634:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020638:	4414      	add	r4, r2
 802063a:	2900      	cmp	r1, #0
 802063c:	dc03      	bgt.n	8020646 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802063e:	9a01      	ldr	r2, [sp, #4]
 8020640:	2a00      	cmp	r2, #0
 8020642:	f340 80af 	ble.w	80207a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020646:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020648:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 802064c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020652:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8020656:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802065a:	2b00      	cmp	r3, #0
 802065c:	dd0c      	ble.n	8020678 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802065e:	1405      	asrs	r5, r0, #16
 8020660:	d405      	bmi.n	802066e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020662:	4555      	cmp	r5, sl
 8020664:	da03      	bge.n	802066e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020666:	1415      	asrs	r5, r2, #16
 8020668:	d401      	bmi.n	802066e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802066a:	454d      	cmp	r5, r9
 802066c:	db05      	blt.n	802067a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802066e:	4470      	add	r0, lr
 8020670:	4462      	add	r2, ip
 8020672:	3b01      	subs	r3, #1
 8020674:	3403      	adds	r4, #3
 8020676:	e7f0      	b.n	802065a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020678:	d038      	beq.n	80206ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 802067a:	1e5d      	subs	r5, r3, #1
 802067c:	fb0e 0605 	mla	r6, lr, r5, r0
 8020680:	1436      	asrs	r6, r6, #16
 8020682:	d42a      	bmi.n	80206da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020684:	4556      	cmp	r6, sl
 8020686:	da28      	bge.n	80206da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020688:	fb0c 2505 	mla	r5, ip, r5, r2
 802068c:	142d      	asrs	r5, r5, #16
 802068e:	d424      	bmi.n	80206da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020690:	454d      	cmp	r5, r9
 8020692:	da22      	bge.n	80206da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020694:	1ce6      	adds	r6, r4, #3
 8020696:	4699      	mov	r9, r3
 8020698:	f1b9 0f00 	cmp.w	r9, #0
 802069c:	f106 0603 	add.w	r6, r6, #3
 80206a0:	dd1f      	ble.n	80206e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80206a2:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80206a6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80206aa:	1415      	asrs	r5, r2, #16
 80206ac:	4470      	add	r0, lr
 80206ae:	4462      	add	r2, ip
 80206b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80206b4:	fb0b a505 	mla	r5, fp, r5, sl
 80206b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80206bc:	eb08 0a05 	add.w	sl, r8, r5
 80206c0:	f818 5005 	ldrb.w	r5, [r8, r5]
 80206c4:	f806 5c06 	strb.w	r5, [r6, #-6]
 80206c8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80206cc:	f806 5c05 	strb.w	r5, [r6, #-5]
 80206d0:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80206d4:	f806 5c04 	strb.w	r5, [r6, #-4]
 80206d8:	e7de      	b.n	8020698 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80206da:	2600      	movs	r6, #0
 80206dc:	1b9d      	subs	r5, r3, r6
 80206de:	2d00      	cmp	r5, #0
 80206e0:	dc38      	bgt.n	8020754 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80206e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80206e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80206ea:	441c      	add	r4, r3
 80206ec:	2900      	cmp	r1, #0
 80206ee:	dd59      	ble.n	80207a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80206f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80206f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80206f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80206fa:	3901      	subs	r1, #1
 80206fc:	eeb0 6a62 	vmov.f32	s12, s5
 8020700:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020704:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020708:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802070c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8020710:	eeb0 6a43 	vmov.f32	s12, s6
 8020714:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020718:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 802071c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020720:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020724:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020728:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802072c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020730:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020734:	ee12 2a90 	vmov	r2, s5
 8020738:	eef0 2a47 	vmov.f32	s5, s14
 802073c:	fb92 fef3 	sdiv	lr, r2, r3
 8020740:	ee13 2a10 	vmov	r2, s6
 8020744:	eeb0 3a67 	vmov.f32	s6, s15
 8020748:	fb92 fcf3 	sdiv	ip, r2, r3
 802074c:	9a01      	ldr	r2, [sp, #4]
 802074e:	bf08      	it	eq
 8020750:	4613      	moveq	r3, r2
 8020752:	e772      	b.n	802063a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8020754:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020758:	d420      	bmi.n	802079c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802075a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 802075e:	45cb      	cmp	fp, r9
 8020760:	dd1c      	ble.n	802079c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020762:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020766:	d419      	bmi.n	802079c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020768:	68fd      	ldr	r5, [r7, #12]
 802076a:	4555      	cmp	r5, sl
 802076c:	dd16      	ble.n	802079c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802076e:	fa0f f58b 	sxth.w	r5, fp
 8020772:	fb0a 9505 	mla	r5, sl, r5, r9
 8020776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802077a:	f818 9005 	ldrb.w	r9, [r8, r5]
 802077e:	eb08 0b05 	add.w	fp, r8, r5
 8020782:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8020786:	f804 9005 	strb.w	r9, [r4, r5]
 802078a:	4425      	add	r5, r4
 802078c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8020790:	f885 9001 	strb.w	r9, [r5, #1]
 8020794:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8020798:	f885 9002 	strb.w	r9, [r5, #2]
 802079c:	4470      	add	r0, lr
 802079e:	4462      	add	r2, ip
 80207a0:	3601      	adds	r6, #1
 80207a2:	e79b      	b.n	80206dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80207a4:	b003      	add	sp, #12
 80207a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080207aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207ae:	b085      	sub	sp, #20
 80207b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80207b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80207b6:	9202      	str	r2, [sp, #8]
 80207b8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80207bc:	6860      	ldr	r0, [r4, #4]
 80207be:	9203      	str	r2, [sp, #12]
 80207c0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80207c4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80207c8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80207cc:	fb00 2505 	mla	r5, r0, r5, r2
 80207d0:	6822      	ldr	r2, [r4, #0]
 80207d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80207d6:	4415      	add	r5, r2
 80207d8:	f8dc 2000 	ldr.w	r2, [ip]
 80207dc:	9201      	str	r2, [sp, #4]
 80207de:	2900      	cmp	r1, #0
 80207e0:	dc03      	bgt.n	80207ea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80207e2:	9a02      	ldr	r2, [sp, #8]
 80207e4:	2a00      	cmp	r2, #0
 80207e6:	f340 8122 	ble.w	8020a2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80207ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80207ec:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80207f0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80207f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80207f6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80207fa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80207fe:	2b00      	cmp	r3, #0
 8020800:	dd0d      	ble.n	802081e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020802:	1422      	asrs	r2, r4, #16
 8020804:	d405      	bmi.n	8020812 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020806:	4542      	cmp	r2, r8
 8020808:	da03      	bge.n	8020812 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802080a:	1402      	asrs	r2, r0, #16
 802080c:	d401      	bmi.n	8020812 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802080e:	42ba      	cmp	r2, r7
 8020810:	db06      	blt.n	8020820 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020812:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020814:	4474      	add	r4, lr
 8020816:	3b01      	subs	r3, #1
 8020818:	3503      	adds	r5, #3
 802081a:	4410      	add	r0, r2
 802081c:	e7ef      	b.n	80207fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802081e:	d072      	beq.n	8020906 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8020820:	1e5a      	subs	r2, r3, #1
 8020822:	fb0e 4602 	mla	r6, lr, r2, r4
 8020826:	1436      	asrs	r6, r6, #16
 8020828:	d462      	bmi.n	80208f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802082a:	4546      	cmp	r6, r8
 802082c:	da60      	bge.n	80208f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802082e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020830:	fb06 0202 	mla	r2, r6, r2, r0
 8020834:	1412      	asrs	r2, r2, #16
 8020836:	d45b      	bmi.n	80208f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020838:	42ba      	cmp	r2, r7
 802083a:	da59      	bge.n	80208f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802083c:	1cef      	adds	r7, r5, #3
 802083e:	4699      	mov	r9, r3
 8020840:	f1b9 0f00 	cmp.w	r9, #0
 8020844:	dd5a      	ble.n	80208fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020846:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802084a:	1426      	asrs	r6, r4, #16
 802084c:	1402      	asrs	r2, r0, #16
 802084e:	fb08 6202 	mla	r2, r8, r2, r6
 8020852:	9e01      	ldr	r6, [sp, #4]
 8020854:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8020858:	ea5f 6816 	movs.w	r8, r6, lsr #24
 802085c:	d041      	beq.n	80208e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802085e:	9a03      	ldr	r2, [sp, #12]
 8020860:	fa5f fb86 	uxtb.w	fp, r6
 8020864:	fb02 f808 	mul.w	r8, r2, r8
 8020868:	f108 0201 	add.w	r2, r8, #1
 802086c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8020870:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8020874:	1212      	asrs	r2, r2, #8
 8020876:	fa1f fa82 	uxth.w	sl, r2
 802087a:	43d2      	mvns	r2, r2
 802087c:	fb1b fb0a 	smulbb	fp, fp, sl
 8020880:	b2d2      	uxtb	r2, r2
 8020882:	fb08 b802 	mla	r8, r8, r2, fp
 8020886:	fa1f f888 	uxth.w	r8, r8
 802088a:	f108 0b01 	add.w	fp, r8, #1
 802088e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020892:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8020896:	f3c6 4607 	ubfx	r6, r6, #16, #8
 802089a:	fb1b fb0a 	smulbb	fp, fp, sl
 802089e:	ea4f 2828 	mov.w	r8, r8, asr #8
 80208a2:	fb16 fa0a 	smulbb	sl, r6, sl
 80208a6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80208aa:	f807 8c03 	strb.w	r8, [r7, #-3]
 80208ae:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80208b2:	fb06 aa02 	mla	sl, r6, r2, sl
 80208b6:	fb08 b802 	mla	r8, r8, r2, fp
 80208ba:	fa1f fa8a 	uxth.w	sl, sl
 80208be:	fa1f f888 	uxth.w	r8, r8
 80208c2:	f10a 0601 	add.w	r6, sl, #1
 80208c6:	f108 0b01 	add.w	fp, r8, #1
 80208ca:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80208ce:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80208d2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80208d6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80208da:	f807 ac01 	strb.w	sl, [r7, #-1]
 80208de:	f807 8c02 	strb.w	r8, [r7, #-2]
 80208e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80208e4:	4474      	add	r4, lr
 80208e6:	3703      	adds	r7, #3
 80208e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80208ec:	4410      	add	r0, r2
 80208ee:	e7a7      	b.n	8020840 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208f0:	f04f 0800 	mov.w	r8, #0
 80208f4:	eba3 0208 	sub.w	r2, r3, r8
 80208f8:	2a00      	cmp	r2, #0
 80208fa:	dc3b      	bgt.n	8020974 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80208fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020900:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020904:	441d      	add	r5, r3
 8020906:	2900      	cmp	r1, #0
 8020908:	f340 8091 	ble.w	8020a2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802090c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020912:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020916:	3901      	subs	r1, #1
 8020918:	eeb0 6a62 	vmov.f32	s12, s5
 802091c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020920:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020924:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020928:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802092c:	eeb0 6a43 	vmov.f32	s12, s6
 8020930:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020934:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020938:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802093c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020940:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020944:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020948:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802094c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020950:	ee12 2a90 	vmov	r2, s5
 8020954:	eef0 2a47 	vmov.f32	s5, s14
 8020958:	fb92 fef3 	sdiv	lr, r2, r3
 802095c:	ee13 2a10 	vmov	r2, s6
 8020960:	eeb0 3a67 	vmov.f32	s6, s15
 8020964:	fb92 f3f3 	sdiv	r3, r2, r3
 8020968:	9a02      	ldr	r2, [sp, #8]
 802096a:	9312      	str	r3, [sp, #72]	; 0x48
 802096c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802096e:	bf08      	it	eq
 8020970:	4613      	moveq	r3, r2
 8020972:	e734      	b.n	80207de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020974:	1427      	asrs	r7, r4, #16
 8020976:	d454      	bmi.n	8020a22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020978:	f8dc 6008 	ldr.w	r6, [ip, #8]
 802097c:	42be      	cmp	r6, r7
 802097e:	dd50      	ble.n	8020a22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020980:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020984:	d44d      	bmi.n	8020a22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020986:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802098a:	454a      	cmp	r2, r9
 802098c:	dd49      	ble.n	8020a22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802098e:	b236      	sxth	r6, r6
 8020990:	9a01      	ldr	r2, [sp, #4]
 8020992:	fb09 7606 	mla	r6, r9, r6, r7
 8020996:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 802099a:	0e3a      	lsrs	r2, r7, #24
 802099c:	d041      	beq.n	8020a22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802099e:	9e03      	ldr	r6, [sp, #12]
 80209a0:	fa5f fb87 	uxtb.w	fp, r7
 80209a4:	4372      	muls	r2, r6
 80209a6:	1c56      	adds	r6, r2, #1
 80209a8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80209ac:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80209b0:	1212      	asrs	r2, r2, #8
 80209b2:	f815 9006 	ldrb.w	r9, [r5, r6]
 80209b6:	fa1f fa82 	uxth.w	sl, r2
 80209ba:	43d2      	mvns	r2, r2
 80209bc:	fb1b fb0a 	smulbb	fp, fp, sl
 80209c0:	b2d2      	uxtb	r2, r2
 80209c2:	fb09 b902 	mla	r9, r9, r2, fp
 80209c6:	fa1f f989 	uxth.w	r9, r9
 80209ca:	f109 0b01 	add.w	fp, r9, #1
 80209ce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80209d2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80209d6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80209da:	fb1b fb0a 	smulbb	fp, fp, sl
 80209de:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209e2:	fb17 fa0a 	smulbb	sl, r7, sl
 80209e6:	f805 9006 	strb.w	r9, [r5, r6]
 80209ea:	442e      	add	r6, r5
 80209ec:	78b7      	ldrb	r7, [r6, #2]
 80209ee:	f896 9001 	ldrb.w	r9, [r6, #1]
 80209f2:	fb07 aa02 	mla	sl, r7, r2, sl
 80209f6:	fb09 b902 	mla	r9, r9, r2, fp
 80209fa:	fa1f fa8a 	uxth.w	sl, sl
 80209fe:	fa1f f989 	uxth.w	r9, r9
 8020a02:	f10a 0701 	add.w	r7, sl, #1
 8020a06:	f109 0b01 	add.w	fp, r9, #1
 8020a0a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a0e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020a12:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020a16:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020a1a:	f886 a002 	strb.w	sl, [r6, #2]
 8020a1e:	f886 9001 	strb.w	r9, [r6, #1]
 8020a22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020a24:	4474      	add	r4, lr
 8020a26:	f108 0801 	add.w	r8, r8, #1
 8020a2a:	4410      	add	r0, r2
 8020a2c:	e762      	b.n	80208f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020a2e:	b005      	add	sp, #20
 8020a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a34 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a38:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020a3e:	9201      	str	r2, [sp, #4]
 8020a40:	6860      	ldr	r0, [r4, #4]
 8020a42:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8020a46:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8020a4a:	fb00 2505 	mla	r5, r0, r5, r2
 8020a4e:	6822      	ldr	r2, [r4, #0]
 8020a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020a54:	4415      	add	r5, r2
 8020a56:	f8dc 2000 	ldr.w	r2, [ip]
 8020a5a:	9200      	str	r2, [sp, #0]
 8020a5c:	2900      	cmp	r1, #0
 8020a5e:	dc03      	bgt.n	8020a68 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020a60:	9a01      	ldr	r2, [sp, #4]
 8020a62:	2a00      	cmp	r2, #0
 8020a64:	f340 812b 	ble.w	8020cbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020a68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020a6a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020a6e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020a72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a74:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020a78:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	dd0e      	ble.n	8020a9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020a80:	1422      	asrs	r2, r4, #16
 8020a82:	d405      	bmi.n	8020a90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020a84:	4572      	cmp	r2, lr
 8020a86:	da03      	bge.n	8020a90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020a88:	1402      	asrs	r2, r0, #16
 8020a8a:	d401      	bmi.n	8020a90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020a8c:	42ba      	cmp	r2, r7
 8020a8e:	db07      	blt.n	8020aa0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020a92:	3b01      	subs	r3, #1
 8020a94:	3503      	adds	r5, #3
 8020a96:	4414      	add	r4, r2
 8020a98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020a9a:	4410      	add	r0, r2
 8020a9c:	e7ee      	b.n	8020a7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020a9e:	d06f      	beq.n	8020b80 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020aa0:	1e5a      	subs	r2, r3, #1
 8020aa2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020aa4:	fb06 4602 	mla	r6, r6, r2, r4
 8020aa8:	1436      	asrs	r6, r6, #16
 8020aaa:	d45e      	bmi.n	8020b6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020aac:	4576      	cmp	r6, lr
 8020aae:	da5c      	bge.n	8020b6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020ab0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020ab2:	fb06 0202 	mla	r2, r6, r2, r0
 8020ab6:	1412      	asrs	r2, r2, #16
 8020ab8:	d457      	bmi.n	8020b6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020aba:	42ba      	cmp	r2, r7
 8020abc:	da55      	bge.n	8020b6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020abe:	1cee      	adds	r6, r5, #3
 8020ac0:	469a      	mov	sl, r3
 8020ac2:	f1ba 0f00 	cmp.w	sl, #0
 8020ac6:	dd56      	ble.n	8020b76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020ac8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020acc:	1427      	asrs	r7, r4, #16
 8020ace:	1402      	asrs	r2, r0, #16
 8020ad0:	fb0e 7202 	mla	r2, lr, r2, r7
 8020ad4:	9f00      	ldr	r7, [sp, #0]
 8020ad6:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8020ada:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8020ade:	d03c      	beq.n	8020b5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020ae0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020ae4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020ae8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020aec:	fa5f f28e 	uxtb.w	r2, lr
 8020af0:	b2ff      	uxtb	r7, r7
 8020af2:	f000 80dd 	beq.w	8020cb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020af6:	fa1f f882 	uxth.w	r8, r2
 8020afa:	43d2      	mvns	r2, r2
 8020afc:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8020b00:	fb17 f708 	smulbb	r7, r7, r8
 8020b04:	b2d2      	uxtb	r2, r2
 8020b06:	fb19 f908 	smulbb	r9, r9, r8
 8020b0a:	fb0e 7702 	mla	r7, lr, r2, r7
 8020b0e:	fb1b f808 	smulbb	r8, fp, r8
 8020b12:	b2bf      	uxth	r7, r7
 8020b14:	f107 0e01 	add.w	lr, r7, #1
 8020b18:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020b1c:	123f      	asrs	r7, r7, #8
 8020b1e:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020b22:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8020b26:	fb07 9902 	mla	r9, r7, r2, r9
 8020b2a:	fa1f f989 	uxth.w	r9, r9
 8020b2e:	f109 0701 	add.w	r7, r9, #1
 8020b32:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020b36:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8020b3a:	fb07 8802 	mla	r8, r7, r2, r8
 8020b3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020b42:	fa1f f888 	uxth.w	r8, r8
 8020b46:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020b4a:	f108 0201 	add.w	r2, r8, #1
 8020b4e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020b52:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020b56:	f806 8c01 	strb.w	r8, [r6, #-1]
 8020b5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020b5c:	3603      	adds	r6, #3
 8020b5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020b62:	4414      	add	r4, r2
 8020b64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b66:	4410      	add	r0, r2
 8020b68:	e7ab      	b.n	8020ac2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020b6a:	f04f 0e00 	mov.w	lr, #0
 8020b6e:	eba3 020e 	sub.w	r2, r3, lr
 8020b72:	2a00      	cmp	r2, #0
 8020b74:	dc3d      	bgt.n	8020bf2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020b76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b7e:	441d      	add	r5, r3
 8020b80:	2900      	cmp	r1, #0
 8020b82:	f340 809c 	ble.w	8020cbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020b86:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b90:	3901      	subs	r1, #1
 8020b92:	eeb0 6a62 	vmov.f32	s12, s5
 8020b96:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020b9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ba2:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8020ba6:	eeb0 6a43 	vmov.f32	s12, s6
 8020baa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020bae:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8020bb2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020bb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020bba:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020bbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020bc2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020bc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020bca:	ee12 2a90 	vmov	r2, s5
 8020bce:	eef0 2a47 	vmov.f32	s5, s14
 8020bd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bd6:	ee13 2a10 	vmov	r2, s6
 8020bda:	930f      	str	r3, [sp, #60]	; 0x3c
 8020bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020bde:	eeb0 3a67 	vmov.f32	s6, s15
 8020be2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020be6:	9a01      	ldr	r2, [sp, #4]
 8020be8:	9310      	str	r3, [sp, #64]	; 0x40
 8020bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020bec:	bf08      	it	eq
 8020bee:	4613      	moveq	r3, r2
 8020bf0:	e734      	b.n	8020a5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8020bf2:	1427      	asrs	r7, r4, #16
 8020bf4:	d44d      	bmi.n	8020c92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020bf6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020bfa:	42be      	cmp	r6, r7
 8020bfc:	dd49      	ble.n	8020c92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020bfe:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020c02:	d446      	bmi.n	8020c92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020c04:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020c08:	4542      	cmp	r2, r8
 8020c0a:	dd42      	ble.n	8020c92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020c0c:	b236      	sxth	r6, r6
 8020c0e:	9a00      	ldr	r2, [sp, #0]
 8020c10:	fb08 7606 	mla	r6, r8, r6, r7
 8020c14:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020c18:	0e3a      	lsrs	r2, r7, #24
 8020c1a:	d03a      	beq.n	8020c92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020c1c:	2aff      	cmp	r2, #255	; 0xff
 8020c1e:	b2d6      	uxtb	r6, r2
 8020c20:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020c24:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020c28:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8020c2c:	b2ff      	uxtb	r7, r7
 8020c2e:	d037      	beq.n	8020ca0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020c30:	fa1f f986 	uxth.w	r9, r6
 8020c34:	4472      	add	r2, lr
 8020c36:	43f6      	mvns	r6, r6
 8020c38:	f815 8002 	ldrb.w	r8, [r5, r2]
 8020c3c:	fb17 f709 	smulbb	r7, r7, r9
 8020c40:	fb1a fa09 	smulbb	sl, sl, r9
 8020c44:	b2f6      	uxtb	r6, r6
 8020c46:	fb1b f909 	smulbb	r9, fp, r9
 8020c4a:	fb08 7706 	mla	r7, r8, r6, r7
 8020c4e:	b2bf      	uxth	r7, r7
 8020c50:	f107 0801 	add.w	r8, r7, #1
 8020c54:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8020c58:	123f      	asrs	r7, r7, #8
 8020c5a:	54af      	strb	r7, [r5, r2]
 8020c5c:	442a      	add	r2, r5
 8020c5e:	7857      	ldrb	r7, [r2, #1]
 8020c60:	fb07 aa06 	mla	sl, r7, r6, sl
 8020c64:	fa1f fa8a 	uxth.w	sl, sl
 8020c68:	f10a 0701 	add.w	r7, sl, #1
 8020c6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020c70:	7897      	ldrb	r7, [r2, #2]
 8020c72:	fb07 9906 	mla	r9, r7, r6, r9
 8020c76:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020c7a:	fa1f f989 	uxth.w	r9, r9
 8020c7e:	f882 a001 	strb.w	sl, [r2, #1]
 8020c82:	f109 0601 	add.w	r6, r9, #1
 8020c86:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020c8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c8e:	f882 9002 	strb.w	r9, [r2, #2]
 8020c92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c94:	f10e 0e01 	add.w	lr, lr, #1
 8020c98:	4414      	add	r4, r2
 8020c9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020c9c:	4410      	add	r0, r2
 8020c9e:	e766      	b.n	8020b6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020ca0:	4472      	add	r2, lr
 8020ca2:	54af      	strb	r7, [r5, r2]
 8020ca4:	442a      	add	r2, r5
 8020ca6:	f882 a001 	strb.w	sl, [r2, #1]
 8020caa:	f882 b002 	strb.w	fp, [r2, #2]
 8020cae:	e7f0      	b.n	8020c92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020cb0:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020cb4:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020cb8:	f806 bc01 	strb.w	fp, [r6, #-1]
 8020cbc:	e74d      	b.n	8020b5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020cbe:	b003      	add	sp, #12
 8020cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020cc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cc8:	b087      	sub	sp, #28
 8020cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020cce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020cd0:	9204      	str	r2, [sp, #16]
 8020cd2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020cd6:	6860      	ldr	r0, [r4, #4]
 8020cd8:	9205      	str	r2, [sp, #20]
 8020cda:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8020cde:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8020ce2:	9101      	str	r1, [sp, #4]
 8020ce4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020ce8:	fb00 2505 	mla	r5, r0, r5, r2
 8020cec:	6822      	ldr	r2, [r4, #0]
 8020cee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020cf2:	4415      	add	r5, r2
 8020cf4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020cf8:	3201      	adds	r2, #1
 8020cfa:	f022 0201 	bic.w	r2, r2, #1
 8020cfe:	9202      	str	r2, [sp, #8]
 8020d00:	f8dc 2000 	ldr.w	r2, [ip]
 8020d04:	9203      	str	r2, [sp, #12]
 8020d06:	9a01      	ldr	r2, [sp, #4]
 8020d08:	2a00      	cmp	r2, #0
 8020d0a:	dc03      	bgt.n	8020d14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8020d0c:	9a04      	ldr	r2, [sp, #16]
 8020d0e:	2a00      	cmp	r2, #0
 8020d10:	f340 8135 	ble.w	8020f7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020d14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020d16:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020d1a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020d1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020d20:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020d24:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	dd0d      	ble.n	8020d48 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020d2c:	1422      	asrs	r2, r4, #16
 8020d2e:	d405      	bmi.n	8020d3c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020d30:	4542      	cmp	r2, r8
 8020d32:	da03      	bge.n	8020d3c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020d34:	1402      	asrs	r2, r0, #16
 8020d36:	d401      	bmi.n	8020d3c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020d38:	42ba      	cmp	r2, r7
 8020d3a:	db06      	blt.n	8020d4a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020d3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020d3e:	4474      	add	r4, lr
 8020d40:	3b01      	subs	r3, #1
 8020d42:	3503      	adds	r5, #3
 8020d44:	4410      	add	r0, r2
 8020d46:	e7ef      	b.n	8020d28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020d48:	d077      	beq.n	8020e3a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020d4a:	1e5a      	subs	r2, r3, #1
 8020d4c:	fb0e 4602 	mla	r6, lr, r2, r4
 8020d50:	1436      	asrs	r6, r6, #16
 8020d52:	d469      	bmi.n	8020e28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020d54:	4546      	cmp	r6, r8
 8020d56:	da67      	bge.n	8020e28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020d58:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8020d5a:	fb06 0202 	mla	r2, r6, r2, r0
 8020d5e:	1412      	asrs	r2, r2, #16
 8020d60:	d462      	bmi.n	8020e28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020d62:	42ba      	cmp	r2, r7
 8020d64:	da60      	bge.n	8020e28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020d66:	1cee      	adds	r6, r5, #3
 8020d68:	4699      	mov	r9, r3
 8020d6a:	f1b9 0f00 	cmp.w	r9, #0
 8020d6e:	dd5f      	ble.n	8020e30 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020d70:	1422      	asrs	r2, r4, #16
 8020d72:	9902      	ldr	r1, [sp, #8]
 8020d74:	1407      	asrs	r7, r0, #16
 8020d76:	fb01 2707 	mla	r7, r1, r7, r2
 8020d7a:	9903      	ldr	r1, [sp, #12]
 8020d7c:	087a      	lsrs	r2, r7, #1
 8020d7e:	5c8a      	ldrb	r2, [r1, r2]
 8020d80:	07f9      	lsls	r1, r7, #31
 8020d82:	bf54      	ite	pl
 8020d84:	f002 020f 	andpl.w	r2, r2, #15
 8020d88:	1112      	asrmi	r2, r2, #4
 8020d8a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020d8e:	b2d2      	uxtb	r2, r2
 8020d90:	2a00      	cmp	r2, #0
 8020d92:	d042      	beq.n	8020e1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020d94:	497b      	ldr	r1, [pc, #492]	; (8020f84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8020d96:	680f      	ldr	r7, [r1, #0]
 8020d98:	9905      	ldr	r1, [sp, #20]
 8020d9a:	fa5f fb87 	uxtb.w	fp, r7
 8020d9e:	434a      	muls	r2, r1
 8020da0:	f102 0801 	add.w	r8, r2, #1
 8020da4:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8020da8:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8020dac:	1212      	asrs	r2, r2, #8
 8020dae:	fa1f fa82 	uxth.w	sl, r2
 8020db2:	43d2      	mvns	r2, r2
 8020db4:	fb1b fb0a 	smulbb	fp, fp, sl
 8020db8:	b2d2      	uxtb	r2, r2
 8020dba:	fb08 b802 	mla	r8, r8, r2, fp
 8020dbe:	fa1f f888 	uxth.w	r8, r8
 8020dc2:	f108 0b01 	add.w	fp, r8, #1
 8020dc6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020dca:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020dce:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020dd2:	fb1b fb0a 	smulbb	fp, fp, sl
 8020dd6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020dda:	fb17 fa0a 	smulbb	sl, r7, sl
 8020dde:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8020de2:	f806 8c03 	strb.w	r8, [r6, #-3]
 8020de6:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8020dea:	fb07 aa02 	mla	sl, r7, r2, sl
 8020dee:	fb08 b802 	mla	r8, r8, r2, fp
 8020df2:	fa1f fa8a 	uxth.w	sl, sl
 8020df6:	fa1f f888 	uxth.w	r8, r8
 8020dfa:	f10a 0701 	add.w	r7, sl, #1
 8020dfe:	f108 0b01 	add.w	fp, r8, #1
 8020e02:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e06:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020e0a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020e0e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020e12:	f806 ac01 	strb.w	sl, [r6, #-1]
 8020e16:	f806 8c02 	strb.w	r8, [r6, #-2]
 8020e1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020e1c:	4474      	add	r4, lr
 8020e1e:	3603      	adds	r6, #3
 8020e20:	f109 39ff 	add.w	r9, r9, #4294967295
 8020e24:	4410      	add	r0, r2
 8020e26:	e7a0      	b.n	8020d6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020e28:	2700      	movs	r7, #0
 8020e2a:	1bda      	subs	r2, r3, r7
 8020e2c:	2a00      	cmp	r2, #0
 8020e2e:	dc3e      	bgt.n	8020eae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020e30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020e34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e38:	441d      	add	r5, r3
 8020e3a:	9b01      	ldr	r3, [sp, #4]
 8020e3c:	2b00      	cmp	r3, #0
 8020e3e:	f340 809e 	ble.w	8020f7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020e42:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020e48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e4c:	eeb0 6a62 	vmov.f32	s12, s5
 8020e50:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020e54:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e5c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020e60:	eeb0 6a43 	vmov.f32	s12, s6
 8020e64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e68:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020e6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e70:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e74:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e84:	ee12 2a90 	vmov	r2, s5
 8020e88:	eef0 2a47 	vmov.f32	s5, s14
 8020e8c:	fb92 fef3 	sdiv	lr, r2, r3
 8020e90:	ee13 2a10 	vmov	r2, s6
 8020e94:	eeb0 3a67 	vmov.f32	s6, s15
 8020e98:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e9c:	9314      	str	r3, [sp, #80]	; 0x50
 8020e9e:	9b01      	ldr	r3, [sp, #4]
 8020ea0:	9a04      	ldr	r2, [sp, #16]
 8020ea2:	3b01      	subs	r3, #1
 8020ea4:	9301      	str	r3, [sp, #4]
 8020ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ea8:	bf08      	it	eq
 8020eaa:	4613      	moveq	r3, r2
 8020eac:	e72b      	b.n	8020d06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8020eae:	1426      	asrs	r6, r4, #16
 8020eb0:	d460      	bmi.n	8020f74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020eb2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020eb6:	42b2      	cmp	r2, r6
 8020eb8:	dd5c      	ble.n	8020f74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020eba:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020ebe:	d459      	bmi.n	8020f74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020ec0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020ec4:	4542      	cmp	r2, r8
 8020ec6:	dd55      	ble.n	8020f74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020ec8:	9a02      	ldr	r2, [sp, #8]
 8020eca:	9903      	ldr	r1, [sp, #12]
 8020ecc:	fb08 6602 	mla	r6, r8, r2, r6
 8020ed0:	0872      	lsrs	r2, r6, #1
 8020ed2:	07f6      	lsls	r6, r6, #31
 8020ed4:	5c8a      	ldrb	r2, [r1, r2]
 8020ed6:	bf54      	ite	pl
 8020ed8:	f002 020f 	andpl.w	r2, r2, #15
 8020edc:	1112      	asrmi	r2, r2, #4
 8020ede:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020ee2:	b2d2      	uxtb	r2, r2
 8020ee4:	2a00      	cmp	r2, #0
 8020ee6:	d045      	beq.n	8020f74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020ee8:	4926      	ldr	r1, [pc, #152]	; (8020f84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8020eea:	f8d1 8000 	ldr.w	r8, [r1]
 8020eee:	9905      	ldr	r1, [sp, #20]
 8020ef0:	fa5f fb88 	uxtb.w	fp, r8
 8020ef4:	434a      	muls	r2, r1
 8020ef6:	1c56      	adds	r6, r2, #1
 8020ef8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020efc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8020f00:	1212      	asrs	r2, r2, #8
 8020f02:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020f06:	fa1f fa82 	uxth.w	sl, r2
 8020f0a:	43d2      	mvns	r2, r2
 8020f0c:	fb1b fb0a 	smulbb	fp, fp, sl
 8020f10:	b2d2      	uxtb	r2, r2
 8020f12:	fb09 b902 	mla	r9, r9, r2, fp
 8020f16:	fa1f f989 	uxth.w	r9, r9
 8020f1a:	f109 0b01 	add.w	fp, r9, #1
 8020f1e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020f22:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8020f26:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8020f2a:	fb1b fb0a 	smulbb	fp, fp, sl
 8020f2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020f32:	fb18 fa0a 	smulbb	sl, r8, sl
 8020f36:	f805 9006 	strb.w	r9, [r5, r6]
 8020f3a:	442e      	add	r6, r5
 8020f3c:	f896 8002 	ldrb.w	r8, [r6, #2]
 8020f40:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020f44:	fb08 aa02 	mla	sl, r8, r2, sl
 8020f48:	fb09 b902 	mla	r9, r9, r2, fp
 8020f4c:	fa1f fa8a 	uxth.w	sl, sl
 8020f50:	fa1f f989 	uxth.w	r9, r9
 8020f54:	f10a 0801 	add.w	r8, sl, #1
 8020f58:	f109 0b01 	add.w	fp, r9, #1
 8020f5c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8020f60:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020f64:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020f68:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020f6c:	f886 a002 	strb.w	sl, [r6, #2]
 8020f70:	f886 9001 	strb.w	r9, [r6, #1]
 8020f74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020f76:	4474      	add	r4, lr
 8020f78:	3701      	adds	r7, #1
 8020f7a:	4410      	add	r0, r2
 8020f7c:	e755      	b.n	8020e2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8020f7e:	b007      	add	sp, #28
 8020f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f84:	24025d10 	.word	0x24025d10

08020f88 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f8c:	b085      	sub	sp, #20
 8020f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020f92:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f94:	9203      	str	r2, [sp, #12]
 8020f96:	6860      	ldr	r0, [r4, #4]
 8020f98:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8020f9c:	9100      	str	r1, [sp, #0]
 8020f9e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8020fa2:	fb00 2606 	mla	r6, r0, r6, r2
 8020fa6:	6822      	ldr	r2, [r4, #0]
 8020fa8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020fac:	4416      	add	r6, r2
 8020fae:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020fb2:	3201      	adds	r2, #1
 8020fb4:	f022 0201 	bic.w	r2, r2, #1
 8020fb8:	9201      	str	r2, [sp, #4]
 8020fba:	f8dc 2000 	ldr.w	r2, [ip]
 8020fbe:	9202      	str	r2, [sp, #8]
 8020fc0:	9a00      	ldr	r2, [sp, #0]
 8020fc2:	2a00      	cmp	r2, #0
 8020fc4:	dc03      	bgt.n	8020fce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020fc6:	9a03      	ldr	r2, [sp, #12]
 8020fc8:	2a00      	cmp	r2, #0
 8020fca:	f340 8140 	ble.w	802124e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8020fce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020fd0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020fd4:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8020fd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020fda:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020fde:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	dd0e      	ble.n	8021004 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020fe6:	142a      	asrs	r2, r5, #16
 8020fe8:	d405      	bmi.n	8020ff6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020fea:	4572      	cmp	r2, lr
 8020fec:	da03      	bge.n	8020ff6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020fee:	1422      	asrs	r2, r4, #16
 8020ff0:	d401      	bmi.n	8020ff6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020ff2:	42ba      	cmp	r2, r7
 8020ff4:	db07      	blt.n	8021006 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020ff6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ff8:	3b01      	subs	r3, #1
 8020ffa:	3603      	adds	r6, #3
 8020ffc:	4415      	add	r5, r2
 8020ffe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021000:	4414      	add	r4, r2
 8021002:	e7ee      	b.n	8020fe2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021004:	d072      	beq.n	80210ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021006:	1e5a      	subs	r2, r3, #1
 8021008:	9811      	ldr	r0, [sp, #68]	; 0x44
 802100a:	fb00 5002 	mla	r0, r0, r2, r5
 802100e:	1400      	asrs	r0, r0, #16
 8021010:	d463      	bmi.n	80210da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021012:	4570      	cmp	r0, lr
 8021014:	da61      	bge.n	80210da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021016:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021018:	fb00 4202 	mla	r2, r0, r2, r4
 802101c:	1412      	asrs	r2, r2, #16
 802101e:	d45c      	bmi.n	80210da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021020:	42ba      	cmp	r2, r7
 8021022:	da5a      	bge.n	80210da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021024:	1cf0      	adds	r0, r6, #3
 8021026:	469a      	mov	sl, r3
 8021028:	f1ba 0f00 	cmp.w	sl, #0
 802102c:	dd59      	ble.n	80210e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 802102e:	142a      	asrs	r2, r5, #16
 8021030:	9901      	ldr	r1, [sp, #4]
 8021032:	1427      	asrs	r7, r4, #16
 8021034:	fb01 2707 	mla	r7, r1, r7, r2
 8021038:	9902      	ldr	r1, [sp, #8]
 802103a:	087a      	lsrs	r2, r7, #1
 802103c:	5c8a      	ldrb	r2, [r1, r2]
 802103e:	07f9      	lsls	r1, r7, #31
 8021040:	bf54      	ite	pl
 8021042:	f002 020f 	andpl.w	r2, r2, #15
 8021046:	1112      	asrmi	r2, r2, #4
 8021048:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802104c:	b2d2      	uxtb	r2, r2
 802104e:	2a00      	cmp	r2, #0
 8021050:	d03b      	beq.n	80210ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021052:	4980      	ldr	r1, [pc, #512]	; (8021254 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8021054:	2aff      	cmp	r2, #255	; 0xff
 8021056:	680f      	ldr	r7, [r1, #0]
 8021058:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 802105c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8021060:	b2ff      	uxtb	r7, r7
 8021062:	f000 80ed 	beq.w	8021240 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8021066:	fa1f f882 	uxth.w	r8, r2
 802106a:	43d2      	mvns	r2, r2
 802106c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8021070:	fb17 f708 	smulbb	r7, r7, r8
 8021074:	b2d2      	uxtb	r2, r2
 8021076:	fb19 f908 	smulbb	r9, r9, r8
 802107a:	fb0e 7702 	mla	r7, lr, r2, r7
 802107e:	fb1b f808 	smulbb	r8, fp, r8
 8021082:	b2bf      	uxth	r7, r7
 8021084:	f107 0e01 	add.w	lr, r7, #1
 8021088:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 802108c:	123f      	asrs	r7, r7, #8
 802108e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8021092:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8021096:	fb07 9902 	mla	r9, r7, r2, r9
 802109a:	fa1f f989 	uxth.w	r9, r9
 802109e:	f109 0701 	add.w	r7, r9, #1
 80210a2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80210a6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80210aa:	fb07 8802 	mla	r8, r7, r2, r8
 80210ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 80210b2:	fa1f f888 	uxth.w	r8, r8
 80210b6:	f800 9c02 	strb.w	r9, [r0, #-2]
 80210ba:	f108 0201 	add.w	r2, r8, #1
 80210be:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80210c2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80210c6:	f800 8c01 	strb.w	r8, [r0, #-1]
 80210ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80210cc:	3003      	adds	r0, #3
 80210ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80210d2:	4415      	add	r5, r2
 80210d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80210d6:	4414      	add	r4, r2
 80210d8:	e7a6      	b.n	8021028 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80210da:	2700      	movs	r7, #0
 80210dc:	1bda      	subs	r2, r3, r7
 80210de:	2a00      	cmp	r2, #0
 80210e0:	dc40      	bgt.n	8021164 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80210e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80210e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80210ea:	441e      	add	r6, r3
 80210ec:	9b00      	ldr	r3, [sp, #0]
 80210ee:	2b00      	cmp	r3, #0
 80210f0:	f340 80ad 	ble.w	802124e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80210f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80210f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80210fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80210fe:	eeb0 6a62 	vmov.f32	s12, s5
 8021102:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021106:	ee31 1a05 	vadd.f32	s2, s2, s10
 802110a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802110e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021112:	eeb0 6a43 	vmov.f32	s12, s6
 8021116:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802111a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802111e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021122:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021126:	ee77 2a62 	vsub.f32	s5, s14, s5
 802112a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802112e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021132:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021136:	ee12 2a90 	vmov	r2, s5
 802113a:	eef0 2a47 	vmov.f32	s5, s14
 802113e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021142:	ee13 2a10 	vmov	r2, s6
 8021146:	9311      	str	r3, [sp, #68]	; 0x44
 8021148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802114a:	eeb0 3a67 	vmov.f32	s6, s15
 802114e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021152:	9312      	str	r3, [sp, #72]	; 0x48
 8021154:	9b00      	ldr	r3, [sp, #0]
 8021156:	9a03      	ldr	r2, [sp, #12]
 8021158:	3b01      	subs	r3, #1
 802115a:	9300      	str	r3, [sp, #0]
 802115c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802115e:	bf08      	it	eq
 8021160:	4613      	moveq	r3, r2
 8021162:	e72d      	b.n	8020fc0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021164:	1428      	asrs	r0, r5, #16
 8021166:	d45c      	bmi.n	8021222 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021168:	f8dc 2008 	ldr.w	r2, [ip, #8]
 802116c:	4282      	cmp	r2, r0
 802116e:	dd58      	ble.n	8021222 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021170:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021174:	d455      	bmi.n	8021222 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021176:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802117a:	4572      	cmp	r2, lr
 802117c:	dd51      	ble.n	8021222 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802117e:	9a01      	ldr	r2, [sp, #4]
 8021180:	9902      	ldr	r1, [sp, #8]
 8021182:	fb0e 0002 	mla	r0, lr, r2, r0
 8021186:	0842      	lsrs	r2, r0, #1
 8021188:	07c0      	lsls	r0, r0, #31
 802118a:	5c8a      	ldrb	r2, [r1, r2]
 802118c:	bf54      	ite	pl
 802118e:	f002 020f 	andpl.w	r2, r2, #15
 8021192:	1112      	asrmi	r2, r2, #4
 8021194:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021198:	b2d2      	uxtb	r2, r2
 802119a:	2a00      	cmp	r2, #0
 802119c:	d041      	beq.n	8021222 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802119e:	492d      	ldr	r1, [pc, #180]	; (8021254 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80211a0:	2aff      	cmp	r2, #255	; 0xff
 80211a2:	6808      	ldr	r0, [r1, #0]
 80211a4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80211a8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80211ac:	fa5f fe80 	uxtb.w	lr, r0
 80211b0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80211b4:	d03b      	beq.n	802122e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80211b6:	fa1f f982 	uxth.w	r9, r2
 80211ba:	4438      	add	r0, r7
 80211bc:	43d2      	mvns	r2, r2
 80211be:	f816 8000 	ldrb.w	r8, [r6, r0]
 80211c2:	fb1e fe09 	smulbb	lr, lr, r9
 80211c6:	fb1a fa09 	smulbb	sl, sl, r9
 80211ca:	b2d2      	uxtb	r2, r2
 80211cc:	fb1b f909 	smulbb	r9, fp, r9
 80211d0:	fb08 ee02 	mla	lr, r8, r2, lr
 80211d4:	fa1f fe8e 	uxth.w	lr, lr
 80211d8:	f10e 0801 	add.w	r8, lr, #1
 80211dc:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80211e0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80211e4:	f806 e000 	strb.w	lr, [r6, r0]
 80211e8:	4430      	add	r0, r6
 80211ea:	f890 e001 	ldrb.w	lr, [r0, #1]
 80211ee:	fb0e aa02 	mla	sl, lr, r2, sl
 80211f2:	fa1f fa8a 	uxth.w	sl, sl
 80211f6:	f10a 0e01 	add.w	lr, sl, #1
 80211fa:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80211fe:	f890 e002 	ldrb.w	lr, [r0, #2]
 8021202:	fb0e 9902 	mla	r9, lr, r2, r9
 8021206:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802120a:	fa1f f989 	uxth.w	r9, r9
 802120e:	f880 a001 	strb.w	sl, [r0, #1]
 8021212:	f109 0201 	add.w	r2, r9, #1
 8021216:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802121a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802121e:	f880 9002 	strb.w	r9, [r0, #2]
 8021222:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021224:	3701      	adds	r7, #1
 8021226:	4415      	add	r5, r2
 8021228:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802122a:	4414      	add	r4, r2
 802122c:	e756      	b.n	80210dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802122e:	4438      	add	r0, r7
 8021230:	f806 e000 	strb.w	lr, [r6, r0]
 8021234:	4430      	add	r0, r6
 8021236:	f880 a001 	strb.w	sl, [r0, #1]
 802123a:	f880 b002 	strb.w	fp, [r0, #2]
 802123e:	e7f0      	b.n	8021222 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021240:	f800 7c03 	strb.w	r7, [r0, #-3]
 8021244:	f800 9c02 	strb.w	r9, [r0, #-2]
 8021248:	f800 bc01 	strb.w	fp, [r0, #-1]
 802124c:	e73d      	b.n	80210ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802124e:	b005      	add	sp, #20
 8021250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021254:	24025d10 	.word	0x24025d10

08021258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8021258:	4770      	bx	lr

0802125a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 802125a:	4770      	bx	lr

0802125c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 802125c:	4770      	bx	lr

0802125e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802125e:	4770      	bx	lr

08021260 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021260:	4770      	bx	lr

08021262 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021262:	4770      	bx	lr

08021264 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021264:	4770      	bx	lr

08021266 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021266:	4770      	bx	lr

08021268 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021268:	4770      	bx	lr

0802126a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802126a:	4770      	bx	lr

0802126c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802126c:	4770      	bx	lr

0802126e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802126e:	4770      	bx	lr

08021270 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021270:	4770      	bx	lr

08021272 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021272:	4770      	bx	lr

08021274 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021274:	4770      	bx	lr

08021276 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021276:	4770      	bx	lr

08021278 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021278:	4770      	bx	lr

0802127a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802127a:	4770      	bx	lr

0802127c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802127c:	4770      	bx	lr

0802127e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802127e:	4770      	bx	lr

08021280 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021282:	4606      	mov	r6, r0
 8021284:	b087      	sub	sp, #28
 8021286:	4615      	mov	r5, r2
 8021288:	461f      	mov	r7, r3
 802128a:	b353      	cbz	r3, 80212e2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802128c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8021290:	2b00      	cmp	r3, #0
 8021292:	dd26      	ble.n	80212e2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021294:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8021298:	2b00      	cmp	r3, #0
 802129a:	dd22      	ble.n	80212e2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802129c:	6808      	ldr	r0, [r1, #0]
 802129e:	aa04      	add	r2, sp, #16
 80212a0:	6849      	ldr	r1, [r1, #4]
 80212a2:	4c1b      	ldr	r4, [pc, #108]	; (8021310 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80212a4:	c203      	stmia	r2!, {r0, r1}
 80212a6:	a804      	add	r0, sp, #16
 80212a8:	f7fb fa8a 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80212ac:	6820      	ldr	r0, [r4, #0]
 80212ae:	6803      	ldr	r3, [r0, #0]
 80212b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80212b2:	4798      	blx	r3
 80212b4:	2fff      	cmp	r7, #255	; 0xff
 80212b6:	d016      	beq.n	80212e6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80212b8:	f010 0f08 	tst.w	r0, #8
 80212bc:	6820      	ldr	r0, [r4, #0]
 80212be:	d015      	beq.n	80212ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80212c0:	2400      	movs	r4, #0
 80212c2:	6801      	ldr	r1, [r0, #0]
 80212c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80212c8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80212cc:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80212d0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80212d4:	9401      	str	r4, [sp, #4]
 80212d6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80212da:	9400      	str	r4, [sp, #0]
 80212dc:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80212de:	4629      	mov	r1, r5
 80212e0:	47a0      	blx	r4
 80212e2:	b007      	add	sp, #28
 80212e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212e6:	f010 0f02 	tst.w	r0, #2
 80212ea:	e7e7      	b.n	80212bc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80212ec:	6803      	ldr	r3, [r0, #0]
 80212ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80212f0:	4798      	blx	r3
 80212f2:	4b08      	ldr	r3, [pc, #32]	; (8021314 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80212f4:	4601      	mov	r1, r0
 80212f6:	4630      	mov	r0, r6
 80212f8:	881a      	ldrh	r2, [r3, #0]
 80212fa:	6833      	ldr	r3, [r6, #0]
 80212fc:	e9cd 5700 	strd	r5, r7, [sp]
 8021300:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8021302:	ab04      	add	r3, sp, #16
 8021304:	47a8      	blx	r5
 8021306:	6820      	ldr	r0, [r4, #0]
 8021308:	6803      	ldr	r3, [r0, #0]
 802130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802130c:	4798      	blx	r3
 802130e:	e7e8      	b.n	80212e2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021310:	24025d08 	.word	0x24025d08
 8021314:	24025d02 	.word	0x24025d02

08021318 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8021318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802131c:	b08b      	sub	sp, #44	; 0x2c
 802131e:	460d      	mov	r5, r1
 8021320:	4616      	mov	r6, r2
 8021322:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8021326:	f1b8 0f00 	cmp.w	r8, #0
 802132a:	d047      	beq.n	80213bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 802132c:	6810      	ldr	r0, [r2, #0]
 802132e:	ac06      	add	r4, sp, #24
 8021330:	6851      	ldr	r1, [r2, #4]
 8021332:	4f51      	ldr	r7, [pc, #324]	; (8021478 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8021334:	c403      	stmia	r4!, {r0, r1}
 8021336:	6818      	ldr	r0, [r3, #0]
 8021338:	ac08      	add	r4, sp, #32
 802133a:	6859      	ldr	r1, [r3, #4]
 802133c:	c403      	stmia	r4!, {r0, r1}
 802133e:	a806      	add	r0, sp, #24
 8021340:	f7fb fa3e 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021344:	4631      	mov	r1, r6
 8021346:	a808      	add	r0, sp, #32
 8021348:	f7fb fa7e 	bl	801c848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802134c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021350:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021354:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021358:	6838      	ldr	r0, [r7, #0]
 802135a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802135e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8021362:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8021366:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802136a:	440d      	add	r5, r1
 802136c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021370:	440a      	add	r2, r1
 8021372:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021376:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802137a:	4413      	add	r3, r2
 802137c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8021380:	6803      	ldr	r3, [r0, #0]
 8021382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021384:	4798      	blx	r3
 8021386:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802138a:	d01a      	beq.n	80213c2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 802138c:	f010 0f04 	tst.w	r0, #4
 8021390:	6838      	ldr	r0, [r7, #0]
 8021392:	d019      	beq.n	80213c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8021394:	2100      	movs	r1, #0
 8021396:	6807      	ldr	r7, [r0, #0]
 8021398:	b2a4      	uxth	r4, r4
 802139a:	f8cd 800c 	str.w	r8, [sp, #12]
 802139e:	b2b6      	uxth	r6, r6
 80213a0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80213a4:	9401      	str	r4, [sp, #4]
 80213a6:	9600      	str	r6, [sp, #0]
 80213a8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80213ac:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80213b0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80213b4:	9102      	str	r1, [sp, #8]
 80213b6:	4629      	mov	r1, r5
 80213b8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80213ba:	47a0      	blx	r4
 80213bc:	b00b      	add	sp, #44	; 0x2c
 80213be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80213c2:	f010 0f01 	tst.w	r0, #1
 80213c6:	e7e3      	b.n	8021390 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80213c8:	6803      	ldr	r3, [r0, #0]
 80213ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80213cc:	4798      	blx	r3
 80213ce:	4a2b      	ldr	r2, [pc, #172]	; (802147c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80213d0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80213d4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80213d8:	8813      	ldrh	r3, [r2, #0]
 80213da:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80213de:	fb03 f404 	mul.w	r4, r3, r4
 80213e2:	fb03 c101 	mla	r1, r3, r1, ip
 80213e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80213ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80213ee:	4408      	add	r0, r1
 80213f0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80213f4:	4404      	add	r4, r0
 80213f6:	d02e      	beq.n	8021456 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80213f8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80213fc:	1b9b      	subs	r3, r3, r6
 80213fe:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8021402:	1b96      	subs	r6, r2, r6
 8021404:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021408:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802140c:	42a0      	cmp	r0, r4
 802140e:	d22d      	bcs.n	802146c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8021410:	eb00 0e01 	add.w	lr, r0, r1
 8021414:	4570      	cmp	r0, lr
 8021416:	d210      	bcs.n	802143a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8021418:	f890 9000 	ldrb.w	r9, [r0]
 802141c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8021420:	fb19 f90c 	smulbb	r9, r9, ip
 8021424:	fb02 9208 	mla	r2, r2, r8, r9
 8021428:	b292      	uxth	r2, r2
 802142a:	f102 0901 	add.w	r9, r2, #1
 802142e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8021432:	1212      	asrs	r2, r2, #8
 8021434:	f800 2b01 	strb.w	r2, [r0], #1
 8021438:	e7ec      	b.n	8021414 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 802143a:	4418      	add	r0, r3
 802143c:	4435      	add	r5, r6
 802143e:	e7e5      	b.n	802140c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8021440:	8813      	ldrh	r3, [r2, #0]
 8021442:	1b9b      	subs	r3, r3, r6
 8021444:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021448:	4418      	add	r0, r3
 802144a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802144e:	1b9b      	subs	r3, r3, r6
 8021450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021454:	441d      	add	r5, r3
 8021456:	42a0      	cmp	r0, r4
 8021458:	d208      	bcs.n	802146c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 802145a:	eb00 0c01 	add.w	ip, r0, r1
 802145e:	4560      	cmp	r0, ip
 8021460:	d2ee      	bcs.n	8021440 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8021462:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021466:	f800 3b01 	strb.w	r3, [r0], #1
 802146a:	e7f8      	b.n	802145e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 802146c:	6838      	ldr	r0, [r7, #0]
 802146e:	6803      	ldr	r3, [r0, #0]
 8021470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021472:	4798      	blx	r3
 8021474:	e7a2      	b.n	80213bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8021476:	bf00      	nop
 8021478:	24025d08 	.word	0x24025d08
 802147c:	24025d02 	.word	0x24025d02

08021480 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8021480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021482:	2300      	movs	r3, #0
 8021484:	b085      	sub	sp, #20
 8021486:	9300      	str	r3, [sp, #0]
 8021488:	4b41      	ldr	r3, [pc, #260]	; (8021590 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 802148a:	781b      	ldrb	r3, [r3, #0]
 802148c:	2b00      	cmp	r3, #0
 802148e:	d136      	bne.n	80214fe <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8021490:	4a40      	ldr	r2, [pc, #256]	; (8021594 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8021492:	f9b2 2000 	ldrsh.w	r2, [r2]
 8021496:	f8ad 2004 	strh.w	r2, [sp, #4]
 802149a:	2b00      	cmp	r3, #0
 802149c:	d131      	bne.n	8021502 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 802149e:	4b3e      	ldr	r3, [pc, #248]	; (8021598 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80214a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80214a4:	ac02      	add	r4, sp, #8
 80214a6:	6808      	ldr	r0, [r1, #0]
 80214a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80214ac:	ab02      	add	r3, sp, #8
 80214ae:	6849      	ldr	r1, [r1, #4]
 80214b0:	4d3a      	ldr	r5, [pc, #232]	; (802159c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80214b2:	c303      	stmia	r3!, {r0, r1}
 80214b4:	4669      	mov	r1, sp
 80214b6:	4620      	mov	r0, r4
 80214b8:	f7fb f9c6 	bl	801c848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80214bc:	4668      	mov	r0, sp
 80214be:	f7fb f97f 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214c2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80214c6:	f8bd 2000 	ldrh.w	r2, [sp]
 80214ca:	462e      	mov	r6, r5
 80214cc:	6828      	ldr	r0, [r5, #0]
 80214ce:	4413      	add	r3, r2
 80214d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80214d4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80214d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80214dc:	4413      	add	r3, r2
 80214de:	f8ad 300a 	strh.w	r3, [sp, #10]
 80214e2:	6803      	ldr	r3, [r0, #0]
 80214e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80214e6:	4798      	blx	r3
 80214e8:	f010 0f01 	tst.w	r0, #1
 80214ec:	d00b      	beq.n	8021506 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80214ee:	6828      	ldr	r0, [r5, #0]
 80214f0:	6803      	ldr	r3, [r0, #0]
 80214f2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80214f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80214f8:	4798      	blx	r3
 80214fa:	b005      	add	sp, #20
 80214fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214fe:	4a26      	ldr	r2, [pc, #152]	; (8021598 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8021500:	e7c7      	b.n	8021492 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8021502:	4b24      	ldr	r3, [pc, #144]	; (8021594 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8021504:	e7cc      	b.n	80214a0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8021506:	6830      	ldr	r0, [r6, #0]
 8021508:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 802150c:	6803      	ldr	r3, [r0, #0]
 802150e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8021512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021514:	4798      	blx	r3
 8021516:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 802151a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802151e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8021522:	fb14 3402 	smlabb	r4, r4, r2, r3
 8021526:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802152a:	4404      	add	r4, r0
 802152c:	6830      	ldr	r0, [r6, #0]
 802152e:	6803      	ldr	r3, [r0, #0]
 8021530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021532:	4798      	blx	r3
 8021534:	4917      	ldr	r1, [pc, #92]	; (8021594 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8021536:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802153a:	880b      	ldrh	r3, [r1, #0]
 802153c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8021540:	fb03 c202 	mla	r2, r3, r2, ip
 8021544:	437b      	muls	r3, r7
 8021546:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 802154a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802154e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021552:	4410      	add	r0, r2
 8021554:	18c2      	adds	r2, r0, r3
 8021556:	4290      	cmp	r0, r2
 8021558:	d214      	bcs.n	8021584 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 802155a:	eb00 0c07 	add.w	ip, r0, r7
 802155e:	4560      	cmp	r0, ip
 8021560:	d204      	bcs.n	802156c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8021562:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021566:	f800 3b01 	strb.w	r3, [r0], #1
 802156a:	e7f8      	b.n	802155e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 802156c:	880b      	ldrh	r3, [r1, #0]
 802156e:	1b5b      	subs	r3, r3, r5
 8021570:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021574:	4418      	add	r0, r3
 8021576:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802157a:	1b5b      	subs	r3, r3, r5
 802157c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021580:	441c      	add	r4, r3
 8021582:	e7e8      	b.n	8021556 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8021584:	6830      	ldr	r0, [r6, #0]
 8021586:	6803      	ldr	r3, [r0, #0]
 8021588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802158a:	4798      	blx	r3
 802158c:	e7b5      	b.n	80214fa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 802158e:	bf00      	nop
 8021590:	24025d00 	.word	0x24025d00
 8021594:	24025d02 	.word	0x24025d02
 8021598:	24025d04 	.word	0x24025d04
 802159c:	24025d08 	.word	0x24025d08

080215a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80215a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215a4:	b089      	sub	sp, #36	; 0x24
 80215a6:	4607      	mov	r7, r0
 80215a8:	4689      	mov	r9, r1
 80215aa:	4692      	mov	sl, r2
 80215ac:	ac08      	add	r4, sp, #32
 80215ae:	461e      	mov	r6, r3
 80215b0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80215b4:	4620      	mov	r0, r4
 80215b6:	f7fe f8f1 	bl	801f79c <_ZNK8touchgfx6Bitmap7getDataEv>
 80215ba:	683b      	ldr	r3, [r7, #0]
 80215bc:	4605      	mov	r5, r0
 80215be:	4620      	mov	r0, r4
 80215c0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80215c4:	f7fd fffe 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80215c8:	4683      	mov	fp, r0
 80215ca:	4620      	mov	r0, r4
 80215cc:	f7fe f82e 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80215d0:	4653      	mov	r3, sl
 80215d2:	464a      	mov	r2, r9
 80215d4:	4639      	mov	r1, r7
 80215d6:	9500      	str	r5, [sp, #0]
 80215d8:	e9cd b001 	strd	fp, r0, [sp, #4]
 80215dc:	a806      	add	r0, sp, #24
 80215de:	47c0      	blx	r8
 80215e0:	a906      	add	r1, sp, #24
 80215e2:	4630      	mov	r0, r6
 80215e4:	f7fd fed2 	bl	801f38c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 80215e8:	4628      	mov	r0, r5
 80215ea:	b009      	add	sp, #36	; 0x24
 80215ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080215f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80215f0:	b510      	push	{r4, lr}
 80215f2:	4604      	mov	r4, r0
 80215f4:	2104      	movs	r1, #4
 80215f6:	f006 f8ee 	bl	80277d6 <_ZdlPvj>
 80215fa:	4620      	mov	r0, r4
 80215fc:	bd10      	pop	{r4, pc}

080215fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80215fe:	b510      	push	{r4, lr}
 8021600:	4604      	mov	r4, r0
 8021602:	2104      	movs	r1, #4
 8021604:	f006 f8e7 	bl	80277d6 <_ZdlPvj>
 8021608:	4620      	mov	r0, r4
 802160a:	bd10      	pop	{r4, pc}

0802160c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802160c:	b510      	push	{r4, lr}
 802160e:	4604      	mov	r4, r0
 8021610:	2104      	movs	r1, #4
 8021612:	f006 f8e0 	bl	80277d6 <_ZdlPvj>
 8021616:	4620      	mov	r0, r4
 8021618:	bd10      	pop	{r4, pc}

0802161a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802161a:	b510      	push	{r4, lr}
 802161c:	4604      	mov	r4, r0
 802161e:	2104      	movs	r1, #4
 8021620:	f006 f8d9 	bl	80277d6 <_ZdlPvj>
 8021624:	4620      	mov	r0, r4
 8021626:	bd10      	pop	{r4, pc}

08021628 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021628:	b510      	push	{r4, lr}
 802162a:	4604      	mov	r4, r0
 802162c:	2104      	movs	r1, #4
 802162e:	f006 f8d2 	bl	80277d6 <_ZdlPvj>
 8021632:	4620      	mov	r0, r4
 8021634:	bd10      	pop	{r4, pc}

08021636 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021636:	b510      	push	{r4, lr}
 8021638:	4604      	mov	r4, r0
 802163a:	2104      	movs	r1, #4
 802163c:	f006 f8cb 	bl	80277d6 <_ZdlPvj>
 8021640:	4620      	mov	r0, r4
 8021642:	bd10      	pop	{r4, pc}

08021644 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021644:	b510      	push	{r4, lr}
 8021646:	4604      	mov	r4, r0
 8021648:	2104      	movs	r1, #4
 802164a:	f006 f8c4 	bl	80277d6 <_ZdlPvj>
 802164e:	4620      	mov	r0, r4
 8021650:	bd10      	pop	{r4, pc}

08021652 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021652:	b510      	push	{r4, lr}
 8021654:	4604      	mov	r4, r0
 8021656:	2104      	movs	r1, #4
 8021658:	f006 f8bd 	bl	80277d6 <_ZdlPvj>
 802165c:	4620      	mov	r0, r4
 802165e:	bd10      	pop	{r4, pc}

08021660 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021660:	b510      	push	{r4, lr}
 8021662:	4604      	mov	r4, r0
 8021664:	2104      	movs	r1, #4
 8021666:	f006 f8b6 	bl	80277d6 <_ZdlPvj>
 802166a:	4620      	mov	r0, r4
 802166c:	bd10      	pop	{r4, pc}

0802166e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802166e:	b510      	push	{r4, lr}
 8021670:	4604      	mov	r4, r0
 8021672:	2104      	movs	r1, #4
 8021674:	f006 f8af 	bl	80277d6 <_ZdlPvj>
 8021678:	4620      	mov	r0, r4
 802167a:	bd10      	pop	{r4, pc}

0802167c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802167c:	b510      	push	{r4, lr}
 802167e:	4604      	mov	r4, r0
 8021680:	2104      	movs	r1, #4
 8021682:	f006 f8a8 	bl	80277d6 <_ZdlPvj>
 8021686:	4620      	mov	r0, r4
 8021688:	bd10      	pop	{r4, pc}

0802168a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802168a:	b510      	push	{r4, lr}
 802168c:	4604      	mov	r4, r0
 802168e:	2104      	movs	r1, #4
 8021690:	f006 f8a1 	bl	80277d6 <_ZdlPvj>
 8021694:	4620      	mov	r0, r4
 8021696:	bd10      	pop	{r4, pc}

08021698 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021698:	b510      	push	{r4, lr}
 802169a:	4604      	mov	r4, r0
 802169c:	2104      	movs	r1, #4
 802169e:	f006 f89a 	bl	80277d6 <_ZdlPvj>
 80216a2:	4620      	mov	r0, r4
 80216a4:	bd10      	pop	{r4, pc}

080216a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80216a6:	b510      	push	{r4, lr}
 80216a8:	4604      	mov	r4, r0
 80216aa:	2104      	movs	r1, #4
 80216ac:	f006 f893 	bl	80277d6 <_ZdlPvj>
 80216b0:	4620      	mov	r0, r4
 80216b2:	bd10      	pop	{r4, pc}

080216b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80216b4:	b510      	push	{r4, lr}
 80216b6:	4604      	mov	r4, r0
 80216b8:	2104      	movs	r1, #4
 80216ba:	f006 f88c 	bl	80277d6 <_ZdlPvj>
 80216be:	4620      	mov	r0, r4
 80216c0:	bd10      	pop	{r4, pc}

080216c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80216c2:	b510      	push	{r4, lr}
 80216c4:	4604      	mov	r4, r0
 80216c6:	2104      	movs	r1, #4
 80216c8:	f006 f885 	bl	80277d6 <_ZdlPvj>
 80216cc:	4620      	mov	r0, r4
 80216ce:	bd10      	pop	{r4, pc}

080216d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80216d0:	b510      	push	{r4, lr}
 80216d2:	4604      	mov	r4, r0
 80216d4:	2104      	movs	r1, #4
 80216d6:	f006 f87e 	bl	80277d6 <_ZdlPvj>
 80216da:	4620      	mov	r0, r4
 80216dc:	bd10      	pop	{r4, pc}

080216de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80216de:	b510      	push	{r4, lr}
 80216e0:	4604      	mov	r4, r0
 80216e2:	2104      	movs	r1, #4
 80216e4:	f006 f877 	bl	80277d6 <_ZdlPvj>
 80216e8:	4620      	mov	r0, r4
 80216ea:	bd10      	pop	{r4, pc}

080216ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80216ec:	b510      	push	{r4, lr}
 80216ee:	4604      	mov	r4, r0
 80216f0:	2104      	movs	r1, #4
 80216f2:	f006 f870 	bl	80277d6 <_ZdlPvj>
 80216f6:	4620      	mov	r0, r4
 80216f8:	bd10      	pop	{r4, pc}

080216fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80216fa:	b510      	push	{r4, lr}
 80216fc:	4604      	mov	r4, r0
 80216fe:	2104      	movs	r1, #4
 8021700:	f006 f869 	bl	80277d6 <_ZdlPvj>
 8021704:	4620      	mov	r0, r4
 8021706:	bd10      	pop	{r4, pc}

08021708 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802170c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8021710:	9c06      	ldr	r4, [sp, #24]
 8021712:	2800      	cmp	r0, #0
 8021714:	d06e      	beq.n	80217f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021716:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 802171a:	2d00      	cmp	r5, #0
 802171c:	dd6a      	ble.n	80217f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802171e:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8021722:	f1bc 0f00 	cmp.w	ip, #0
 8021726:	dd65      	ble.n	80217f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021728:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 802172c:	28ff      	cmp	r0, #255	; 0xff
 802172e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021732:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8021736:	fb02 3306 	mla	r3, r2, r6, r3
 802173a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 802173e:	b2e4      	uxtb	r4, r4
 8021740:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021744:	4419      	add	r1, r3
 8021746:	fb02 f30c 	mul.w	r3, r2, ip
 802174a:	eba2 0205 	sub.w	r2, r2, r5
 802174e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021752:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021756:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802175a:	440b      	add	r3, r1
 802175c:	d03e      	beq.n	80217dc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 802175e:	fa1f fc80 	uxth.w	ip, r0
 8021762:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8021766:	fb06 f60c 	mul.w	r6, r6, ip
 802176a:	b280      	uxth	r0, r0
 802176c:	fb07 f70c 	mul.w	r7, r7, ip
 8021770:	fb04 f40c 	mul.w	r4, r4, ip
 8021774:	4299      	cmp	r1, r3
 8021776:	d23d      	bcs.n	80217f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021778:	eb01 0c05 	add.w	ip, r1, r5
 802177c:	458c      	cmp	ip, r1
 802177e:	f101 0e03 	add.w	lr, r1, #3
 8021782:	d928      	bls.n	80217d6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8021784:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8021788:	fb11 f100 	smulbb	r1, r1, r0
 802178c:	4421      	add	r1, r4
 802178e:	b289      	uxth	r1, r1
 8021790:	f101 0801 	add.w	r8, r1, #1
 8021794:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021798:	1209      	asrs	r1, r1, #8
 802179a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802179e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80217a2:	fb11 f100 	smulbb	r1, r1, r0
 80217a6:	4439      	add	r1, r7
 80217a8:	b289      	uxth	r1, r1
 80217aa:	f101 0801 	add.w	r8, r1, #1
 80217ae:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80217b2:	1209      	asrs	r1, r1, #8
 80217b4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80217b8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80217bc:	fb11 f100 	smulbb	r1, r1, r0
 80217c0:	4431      	add	r1, r6
 80217c2:	b289      	uxth	r1, r1
 80217c4:	f101 0801 	add.w	r8, r1, #1
 80217c8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80217cc:	1209      	asrs	r1, r1, #8
 80217ce:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80217d2:	4671      	mov	r1, lr
 80217d4:	e7d2      	b.n	802177c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80217d6:	4411      	add	r1, r2
 80217d8:	e7cc      	b.n	8021774 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80217da:	4411      	add	r1, r2
 80217dc:	4299      	cmp	r1, r3
 80217de:	d209      	bcs.n	80217f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80217e0:	1948      	adds	r0, r1, r5
 80217e2:	4281      	cmp	r1, r0
 80217e4:	d2f9      	bcs.n	80217da <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 80217e6:	700c      	strb	r4, [r1, #0]
 80217e8:	3103      	adds	r1, #3
 80217ea:	f801 7c02 	strb.w	r7, [r1, #-2]
 80217ee:	f801 6c01 	strb.w	r6, [r1, #-1]
 80217f2:	e7f6      	b.n	80217e2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 80217f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080217f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80217f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217fc:	b093      	sub	sp, #76	; 0x4c
 80217fe:	4699      	mov	r9, r3
 8021800:	4617      	mov	r7, r2
 8021802:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021806:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 802180a:	4604      	mov	r4, r0
 802180c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021810:	a80c      	add	r0, sp, #48	; 0x30
 8021812:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8021816:	460d      	mov	r5, r1
 8021818:	4649      	mov	r1, r9
 802181a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802181e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021822:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8021826:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 802182a:	f7f8 fc0d 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 802182e:	4639      	mov	r1, r7
 8021830:	a80c      	add	r0, sp, #48	; 0x30
 8021832:	f7f8 fc09 	bl	801a048 <_ZN8touchgfx4RectaNERKS0_>
 8021836:	4b78      	ldr	r3, [pc, #480]	; (8021a18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021838:	8818      	ldrh	r0, [r3, #0]
 802183a:	4b78      	ldr	r3, [pc, #480]	; (8021a1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 802183c:	b202      	sxth	r2, r0
 802183e:	8819      	ldrh	r1, [r3, #0]
 8021840:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8021844:	b20f      	sxth	r7, r1
 8021846:	2b00      	cmp	r3, #0
 8021848:	da07      	bge.n	802185a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 802184a:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 802184e:	4463      	add	r3, ip
 8021850:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8021854:	2300      	movs	r3, #0
 8021856:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 802185a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802185e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8021862:	1ad2      	subs	r2, r2, r3
 8021864:	4594      	cmp	ip, r2
 8021866:	bfc4      	itt	gt
 8021868:	1ac2      	subgt	r2, r0, r3
 802186a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 802186e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8021872:	2a00      	cmp	r2, #0
 8021874:	da07      	bge.n	8021886 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8021876:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 802187a:	4462      	add	r2, ip
 802187c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8021880:	2200      	movs	r2, #0
 8021882:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8021886:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802188a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 802188e:	1abf      	subs	r7, r7, r2
 8021890:	45bc      	cmp	ip, r7
 8021892:	f8df c190 	ldr.w	ip, [pc, #400]	; 8021a24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8021896:	bfc8      	it	gt
 8021898:	1a8f      	subgt	r7, r1, r2
 802189a:	f89c c000 	ldrb.w	ip, [ip]
 802189e:	bfc8      	it	gt
 80218a0:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 80218a4:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80218a8:	f1bc 0f00 	cmp.w	ip, #0
 80218ac:	d176      	bne.n	802199c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80218ae:	4287      	cmp	r7, r0
 80218b0:	bf14      	ite	ne
 80218b2:	2100      	movne	r1, #0
 80218b4:	2101      	moveq	r1, #1
 80218b6:	2f00      	cmp	r7, #0
 80218b8:	9107      	str	r1, [sp, #28]
 80218ba:	dd73      	ble.n	80219a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80218bc:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80218c0:	2900      	cmp	r1, #0
 80218c2:	9104      	str	r1, [sp, #16]
 80218c4:	dd6e      	ble.n	80219a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80218c6:	f8b9 1000 	ldrh.w	r1, [r9]
 80218ca:	a80e      	add	r0, sp, #56	; 0x38
 80218cc:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 80218d0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80218d4:	1a5b      	subs	r3, r3, r1
 80218d6:	a910      	add	r1, sp, #64	; 0x40
 80218d8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80218dc:	b21b      	sxth	r3, r3
 80218de:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 80218e2:	f8df a144 	ldr.w	sl, [pc, #324]	; 8021a28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80218e6:	9305      	str	r3, [sp, #20]
 80218e8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80218ec:	1ad2      	subs	r2, r2, r3
 80218ee:	b213      	sxth	r3, r2
 80218f0:	9306      	str	r3, [sp, #24]
 80218f2:	9b05      	ldr	r3, [sp, #20]
 80218f4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80218f8:	9b06      	ldr	r3, [sp, #24]
 80218fa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80218fe:	9b04      	ldr	r3, [sp, #16]
 8021900:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8021904:	2300      	movs	r3, #0
 8021906:	9310      	str	r3, [sp, #64]	; 0x40
 8021908:	f7fa ff9e 	bl	801c848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802190c:	4640      	mov	r0, r8
 802190e:	f7fa ff57 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021912:	a810      	add	r0, sp, #64	; 0x40
 8021914:	f7fa ff54 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021918:	4b41      	ldr	r3, [pc, #260]	; (8021a20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 802191a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 802191e:	4628      	mov	r0, r5
 8021920:	881b      	ldrh	r3, [r3, #0]
 8021922:	9308      	str	r3, [sp, #32]
 8021924:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8021928:	b21b      	sxth	r3, r3
 802192a:	9303      	str	r3, [sp, #12]
 802192c:	682b      	ldr	r3, [r5, #0]
 802192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021930:	4798      	blx	r3
 8021932:	9a03      	ldr	r2, [sp, #12]
 8021934:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8021938:	4681      	mov	r9, r0
 802193a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 802193e:	fb13 f302 	smulbb	r3, r3, r2
 8021942:	2203      	movs	r2, #3
 8021944:	f8da 0000 	ldr.w	r0, [sl]
 8021948:	fb15 3302 	smlabb	r3, r5, r2, r3
 802194c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 802194e:	920b      	str	r2, [sp, #44]	; 0x2c
 8021950:	441d      	add	r5, r3
 8021952:	6803      	ldr	r3, [r0, #0]
 8021954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021956:	4798      	blx	r3
 8021958:	9009      	str	r0, [sp, #36]	; 0x24
 802195a:	f8da 0000 	ldr.w	r0, [sl]
 802195e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021962:	6803      	ldr	r3, [r0, #0]
 8021964:	910a      	str	r1, [sp, #40]	; 0x28
 8021966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021968:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 802196c:	4798      	blx	r3
 802196e:	f010 0f01 	tst.w	r0, #1
 8021972:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8021976:	d01e      	beq.n	80219b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8021978:	f8da 0000 	ldr.w	r0, [sl]
 802197c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021980:	6803      	ldr	r3, [r0, #0]
 8021982:	9200      	str	r2, [sp, #0]
 8021984:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8021986:	462b      	mov	r3, r5
 8021988:	e898 0006 	ldmia.w	r8, {r1, r2}
 802198c:	47b0      	blx	r6
 802198e:	9b05      	ldr	r3, [sp, #20]
 8021990:	80a7      	strh	r7, [r4, #4]
 8021992:	8023      	strh	r3, [r4, #0]
 8021994:	9b06      	ldr	r3, [sp, #24]
 8021996:	8063      	strh	r3, [r4, #2]
 8021998:	9b04      	ldr	r3, [sp, #16]
 802199a:	e007      	b.n	80219ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 802199c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 80219a0:	4288      	cmp	r0, r1
 80219a2:	e785      	b.n	80218b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 80219a4:	2300      	movs	r3, #0
 80219a6:	8023      	strh	r3, [r4, #0]
 80219a8:	8063      	strh	r3, [r4, #2]
 80219aa:	80a3      	strh	r3, [r4, #4]
 80219ac:	4620      	mov	r0, r4
 80219ae:	80e3      	strh	r3, [r4, #6]
 80219b0:	b013      	add	sp, #76	; 0x4c
 80219b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219b6:	fb09 f606 	mul.w	r6, r9, r6
 80219ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219bc:	fb11 6602 	smlabb	r6, r1, r2, r6
 80219c0:	9a07      	ldr	r2, [sp, #28]
 80219c2:	4433      	add	r3, r6
 80219c4:	461e      	mov	r6, r3
 80219c6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80219ca:	b16a      	cbz	r2, 80219e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80219cc:	9a08      	ldr	r2, [sp, #32]
 80219ce:	4593      	cmp	fp, r2
 80219d0:	d10a      	bne.n	80219e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80219d2:	f8da 0000 	ldr.w	r0, [sl]
 80219d6:	fb09 f303 	mul.w	r3, r9, r3
 80219da:	4629      	mov	r1, r5
 80219dc:	6802      	ldr	r2, [r0, #0]
 80219de:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80219e2:	4632      	mov	r2, r6
 80219e4:	47d0      	blx	sl
 80219e6:	e7d2      	b.n	802198e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80219e8:	9a03      	ldr	r2, [sp, #12]
 80219ea:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8021a28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80219ee:	fb02 5803 	mla	r8, r2, r3, r5
 80219f2:	4545      	cmp	r5, r8
 80219f4:	d2cb      	bcs.n	802198e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80219f6:	f8db 0000 	ldr.w	r0, [fp]
 80219fa:	4629      	mov	r1, r5
 80219fc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8021a00:	6802      	ldr	r2, [r0, #0]
 8021a02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021a06:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8021a0a:	4632      	mov	r2, r6
 8021a0c:	47d0      	blx	sl
 8021a0e:	9b03      	ldr	r3, [sp, #12]
 8021a10:	444e      	add	r6, r9
 8021a12:	441d      	add	r5, r3
 8021a14:	e7ed      	b.n	80219f2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8021a16:	bf00      	nop
 8021a18:	24025cfc 	.word	0x24025cfc
 8021a1c:	24025cfe 	.word	0x24025cfe
 8021a20:	24025d02 	.word	0x24025d02
 8021a24:	24025d00 	.word	0x24025d00
 8021a28:	24025d08 	.word	0x24025d08

08021a2c <_ZN8touchgfx8LCD24bppC1Ev>:
 8021a2c:	2200      	movs	r2, #0
 8021a2e:	490c      	ldr	r1, [pc, #48]	; (8021a60 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8021a30:	6042      	str	r2, [r0, #4]
 8021a32:	6001      	str	r1, [r0, #0]
 8021a34:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021a38:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021a3c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8021a40:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021a44:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8021a48:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021a4c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8021a50:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8021a54:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8021a58:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021a5c:	4770      	bx	lr
 8021a5e:	bf00      	nop
 8021a60:	0802c958 	.word	0x0802c958

08021a64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a68:	b091      	sub	sp, #68	; 0x44
 8021a6a:	4607      	mov	r7, r0
 8021a6c:	4688      	mov	r8, r1
 8021a6e:	6810      	ldr	r0, [r2, #0]
 8021a70:	6851      	ldr	r1, [r2, #4]
 8021a72:	ac0c      	add	r4, sp, #48	; 0x30
 8021a74:	4616      	mov	r6, r2
 8021a76:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8021a7a:	4d64      	ldr	r5, [pc, #400]	; (8021c0c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021a7c:	f8df a190 	ldr.w	sl, [pc, #400]	; 8021c10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8021a80:	c403      	stmia	r4!, {r0, r1}
 8021a82:	6818      	ldr	r0, [r3, #0]
 8021a84:	ac0e      	add	r4, sp, #56	; 0x38
 8021a86:	6859      	ldr	r1, [r3, #4]
 8021a88:	c403      	stmia	r4!, {r0, r1}
 8021a8a:	a80c      	add	r0, sp, #48	; 0x30
 8021a8c:	f7fa fe98 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021a90:	4631      	mov	r1, r6
 8021a92:	a80e      	add	r0, sp, #56	; 0x38
 8021a94:	f7fa fed8 	bl	801c848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021a98:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021a9c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021aa0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021aa4:	6828      	ldr	r0, [r5, #0]
 8021aa6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021aaa:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8021aae:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8021ab2:	440f      	add	r7, r1
 8021ab4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021ab8:	440a      	add	r2, r1
 8021aba:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021abe:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021ac2:	4413      	add	r3, r2
 8021ac4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021ac8:	6803      	ldr	r3, [r0, #0]
 8021aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021acc:	4798      	blx	r3
 8021ace:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021ad2:	6828      	ldr	r0, [r5, #0]
 8021ad4:	d01f      	beq.n	8021b16 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8021ad6:	2201      	movs	r2, #1
 8021ad8:	2500      	movs	r5, #0
 8021ada:	6801      	ldr	r1, [r0, #0]
 8021adc:	b2a4      	uxth	r4, r4
 8021ade:	b2b6      	uxth	r6, r6
 8021ae0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021ae4:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8021ae8:	250b      	movs	r5, #11
 8021aea:	9507      	str	r5, [sp, #28]
 8021aec:	f8ba 5000 	ldrh.w	r5, [sl]
 8021af0:	f8cd 9010 	str.w	r9, [sp, #16]
 8021af4:	9602      	str	r6, [sp, #8]
 8021af6:	9401      	str	r4, [sp, #4]
 8021af8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8021afc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021b00:	9203      	str	r2, [sp, #12]
 8021b02:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021b06:	9200      	str	r2, [sp, #0]
 8021b08:	4642      	mov	r2, r8
 8021b0a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8021b0c:	4639      	mov	r1, r7
 8021b0e:	47a0      	blx	r4
 8021b10:	b011      	add	sp, #68	; 0x44
 8021b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b16:	6803      	ldr	r3, [r0, #0]
 8021b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b1a:	4798      	blx	r3
 8021b1c:	f8ba 5000 	ldrh.w	r5, [sl]
 8021b20:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021b24:	f04f 0e04 	mov.w	lr, #4
 8021b28:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021b2c:	436e      	muls	r6, r5
 8021b2e:	fb05 2303 	mla	r3, r5, r3, r2
 8021b32:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021b36:	1b2d      	subs	r5, r5, r4
 8021b38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021b40:	4418      	add	r0, r3
 8021b42:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021b46:	1982      	adds	r2, r0, r6
 8021b48:	1b1b      	subs	r3, r3, r4
 8021b4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021b50:	4290      	cmp	r0, r2
 8021b52:	d254      	bcs.n	8021bfe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8021b54:	eb00 0a04 	add.w	sl, r0, r4
 8021b58:	4550      	cmp	r0, sl
 8021b5a:	d24c      	bcs.n	8021bf6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8021b5c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8021b60:	fb1e e101 	smlabb	r1, lr, r1, lr
 8021b64:	eb08 0c01 	add.w	ip, r8, r1
 8021b68:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021b6c:	b173      	cbz	r3, 8021b8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8021b6e:	2bff      	cmp	r3, #255	; 0xff
 8021b70:	f818 b001 	ldrb.w	fp, [r8, r1]
 8021b74:	d10c      	bne.n	8021b90 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021b76:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021b7a:	d109      	bne.n	8021b90 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021b7c:	f880 b000 	strb.w	fp, [r0]
 8021b80:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021b84:	7043      	strb	r3, [r0, #1]
 8021b86:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8021b8a:	7083      	strb	r3, [r0, #2]
 8021b8c:	3003      	adds	r0, #3
 8021b8e:	e7e3      	b.n	8021b58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8021b90:	fb09 f103 	mul.w	r1, r9, r3
 8021b94:	1c4b      	adds	r3, r1, #1
 8021b96:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021b9a:	7801      	ldrb	r1, [r0, #0]
 8021b9c:	121b      	asrs	r3, r3, #8
 8021b9e:	b29e      	uxth	r6, r3
 8021ba0:	43db      	mvns	r3, r3
 8021ba2:	fb1b fb06 	smulbb	fp, fp, r6
 8021ba6:	b2db      	uxtb	r3, r3
 8021ba8:	fb01 b103 	mla	r1, r1, r3, fp
 8021bac:	b289      	uxth	r1, r1
 8021bae:	f101 0b01 	add.w	fp, r1, #1
 8021bb2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021bb6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021bba:	fb1b fb03 	smulbb	fp, fp, r3
 8021bbe:	1209      	asrs	r1, r1, #8
 8021bc0:	7001      	strb	r1, [r0, #0]
 8021bc2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021bc6:	fb01 b106 	mla	r1, r1, r6, fp
 8021bca:	b289      	uxth	r1, r1
 8021bcc:	f101 0b01 	add.w	fp, r1, #1
 8021bd0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021bd4:	1209      	asrs	r1, r1, #8
 8021bd6:	7041      	strb	r1, [r0, #1]
 8021bd8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8021bdc:	f890 c002 	ldrb.w	ip, [r0, #2]
 8021be0:	fb1c f303 	smulbb	r3, ip, r3
 8021be4:	fb01 3606 	mla	r6, r1, r6, r3
 8021be8:	b2b6      	uxth	r6, r6
 8021bea:	1c73      	adds	r3, r6, #1
 8021bec:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021bf0:	1236      	asrs	r6, r6, #8
 8021bf2:	7086      	strb	r6, [r0, #2]
 8021bf4:	e7ca      	b.n	8021b8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8021bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021bf8:	4428      	add	r0, r5
 8021bfa:	441f      	add	r7, r3
 8021bfc:	e7a8      	b.n	8021b50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8021bfe:	4b03      	ldr	r3, [pc, #12]	; (8021c0c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021c00:	6818      	ldr	r0, [r3, #0]
 8021c02:	6803      	ldr	r3, [r0, #0]
 8021c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c06:	4798      	blx	r3
 8021c08:	e782      	b.n	8021b10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8021c0a:	bf00      	nop
 8021c0c:	24025d08 	.word	0x24025d08
 8021c10:	24025d02 	.word	0x24025d02

08021c14 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c18:	b091      	sub	sp, #68	; 0x44
 8021c1a:	4680      	mov	r8, r0
 8021c1c:	460e      	mov	r6, r1
 8021c1e:	6810      	ldr	r0, [r2, #0]
 8021c20:	6851      	ldr	r1, [r2, #4]
 8021c22:	ad0c      	add	r5, sp, #48	; 0x30
 8021c24:	4614      	mov	r4, r2
 8021c26:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8021c2a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8021dc4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8021c2e:	f8df a198 	ldr.w	sl, [pc, #408]	; 8021dc8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8021c32:	c503      	stmia	r5!, {r0, r1}
 8021c34:	6818      	ldr	r0, [r3, #0]
 8021c36:	ad0e      	add	r5, sp, #56	; 0x38
 8021c38:	6859      	ldr	r1, [r3, #4]
 8021c3a:	c503      	stmia	r5!, {r0, r1}
 8021c3c:	a80c      	add	r0, sp, #48	; 0x30
 8021c3e:	f7fa fdbf 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c42:	4621      	mov	r1, r4
 8021c44:	a80e      	add	r0, sp, #56	; 0x38
 8021c46:	f7fa fdff 	bl	801c848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021c4a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021c4e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021c52:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021c56:	f8d9 0000 	ldr.w	r0, [r9]
 8021c5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021c5e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8021c62:	eb08 0401 	add.w	r4, r8, r1
 8021c66:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021c6a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8021c6e:	440a      	add	r2, r1
 8021c70:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021c74:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021c78:	4413      	add	r3, r2
 8021c7a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021c7e:	6803      	ldr	r3, [r0, #0]
 8021c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021c82:	4798      	blx	r3
 8021c84:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021c88:	f8d9 0000 	ldr.w	r0, [r9]
 8021c8c:	d022      	beq.n	8021cd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8021c8e:	2200      	movs	r2, #0
 8021c90:	f04f 0c01 	mov.w	ip, #1
 8021c94:	6801      	ldr	r1, [r0, #0]
 8021c96:	b2ad      	uxth	r5, r5
 8021c98:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021c9c:	e9cd c208 	strd	ip, r2, [sp, #32]
 8021ca0:	f04f 0c0b 	mov.w	ip, #11
 8021ca4:	f8cd c01c 	str.w	ip, [sp, #28]
 8021ca8:	f8ba c000 	ldrh.w	ip, [sl]
 8021cac:	9704      	str	r7, [sp, #16]
 8021cae:	9502      	str	r5, [sp, #8]
 8021cb0:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8021cb4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021cb8:	9203      	str	r2, [sp, #12]
 8021cba:	fa1f f288 	uxth.w	r2, r8
 8021cbe:	9201      	str	r2, [sp, #4]
 8021cc0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021cc4:	9200      	str	r2, [sp, #0]
 8021cc6:	4632      	mov	r2, r6
 8021cc8:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8021cca:	4621      	mov	r1, r4
 8021ccc:	47a8      	blx	r5
 8021cce:	b011      	add	sp, #68	; 0x44
 8021cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cd4:	6803      	ldr	r3, [r0, #0]
 8021cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021cd8:	4798      	blx	r3
 8021cda:	f8ba 2000 	ldrh.w	r2, [sl]
 8021cde:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021ce2:	f04f 0e03 	mov.w	lr, #3
 8021ce6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8021cea:	4355      	muls	r5, r2
 8021cec:	fa1f fc87 	uxth.w	ip, r7
 8021cf0:	fb02 1303 	mla	r3, r2, r3, r1
 8021cf4:	eba2 0208 	sub.w	r2, r2, r8
 8021cf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021cfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021d04:	4418      	add	r0, r3
 8021d06:	920b      	str	r2, [sp, #44]	; 0x2c
 8021d08:	1943      	adds	r3, r0, r5
 8021d0a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8021d0e:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8021d12:	eba2 0208 	sub.w	r2, r2, r8
 8021d16:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021d1a:	b2ad      	uxth	r5, r5
 8021d1c:	4298      	cmp	r0, r3
 8021d1e:	d24a      	bcs.n	8021db6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8021d20:	eb00 0908 	add.w	r9, r0, r8
 8021d24:	4621      	mov	r1, r4
 8021d26:	4548      	cmp	r0, r9
 8021d28:	460c      	mov	r4, r1
 8021d2a:	d240      	bcs.n	8021dae <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8021d2c:	f04f 0a04 	mov.w	sl, #4
 8021d30:	7824      	ldrb	r4, [r4, #0]
 8021d32:	2fff      	cmp	r7, #255	; 0xff
 8021d34:	f101 0101 	add.w	r1, r1, #1
 8021d38:	fb1e a404 	smlabb	r4, lr, r4, sl
 8021d3c:	eb06 0a04 	add.w	sl, r6, r4
 8021d40:	f816 b004 	ldrb.w	fp, [r6, r4]
 8021d44:	d02b      	beq.n	8021d9e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8021d46:	7804      	ldrb	r4, [r0, #0]
 8021d48:	fb14 f405 	smulbb	r4, r4, r5
 8021d4c:	fb0b 440c 	mla	r4, fp, ip, r4
 8021d50:	b2a4      	uxth	r4, r4
 8021d52:	f104 0b01 	add.w	fp, r4, #1
 8021d56:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021d5a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021d5e:	fb1b fb05 	smulbb	fp, fp, r5
 8021d62:	1224      	asrs	r4, r4, #8
 8021d64:	7004      	strb	r4, [r0, #0]
 8021d66:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8021d6a:	fb04 b40c 	mla	r4, r4, ip, fp
 8021d6e:	b2a4      	uxth	r4, r4
 8021d70:	f104 0b01 	add.w	fp, r4, #1
 8021d74:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021d78:	1224      	asrs	r4, r4, #8
 8021d7a:	7044      	strb	r4, [r0, #1]
 8021d7c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8021d80:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021d84:	fb1a fa05 	smulbb	sl, sl, r5
 8021d88:	fb04 a40c 	mla	r4, r4, ip, sl
 8021d8c:	b2a4      	uxth	r4, r4
 8021d8e:	f104 0a01 	add.w	sl, r4, #1
 8021d92:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021d96:	1224      	asrs	r4, r4, #8
 8021d98:	7084      	strb	r4, [r0, #2]
 8021d9a:	3003      	adds	r0, #3
 8021d9c:	e7c3      	b.n	8021d26 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8021d9e:	f880 b000 	strb.w	fp, [r0]
 8021da2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8021da6:	7044      	strb	r4, [r0, #1]
 8021da8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8021dac:	e7f4      	b.n	8021d98 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8021dae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021db0:	4420      	add	r0, r4
 8021db2:	188c      	adds	r4, r1, r2
 8021db4:	e7b2      	b.n	8021d1c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8021db6:	4b03      	ldr	r3, [pc, #12]	; (8021dc4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021db8:	6818      	ldr	r0, [r3, #0]
 8021dba:	6803      	ldr	r3, [r0, #0]
 8021dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021dbe:	4798      	blx	r3
 8021dc0:	e785      	b.n	8021cce <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8021dc2:	bf00      	nop
 8021dc4:	24025d08 	.word	0x24025d08
 8021dc8:	24025d02 	.word	0x24025d02

08021dcc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021dcc:	b430      	push	{r4, r5}
 8021dce:	780d      	ldrb	r5, [r1, #0]
 8021dd0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8021dd4:	b11d      	cbz	r5, 8021dde <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8021dd6:	2d01      	cmp	r5, #1
 8021dd8:	d005      	beq.n	8021de6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8021dda:	bc30      	pop	{r4, r5}
 8021ddc:	4770      	bx	lr
 8021dde:	9402      	str	r4, [sp, #8]
 8021de0:	bc30      	pop	{r4, r5}
 8021de2:	f7ff be3f 	b.w	8021a64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021de6:	9402      	str	r4, [sp, #8]
 8021de8:	bc30      	pop	{r4, r5}
 8021dea:	f7ff bf13 	b.w	8021c14 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08021df0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8021df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021df4:	4605      	mov	r5, r0
 8021df6:	b08f      	sub	sp, #60	; 0x3c
 8021df8:	460c      	mov	r4, r1
 8021dfa:	461f      	mov	r7, r3
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	d052      	beq.n	8021ea6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8021e00:	6808      	ldr	r0, [r1, #0]
 8021e02:	ab0a      	add	r3, sp, #40	; 0x28
 8021e04:	6849      	ldr	r1, [r1, #4]
 8021e06:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8021fd0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8021e0a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8021fd4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8021e0e:	c303      	stmia	r3!, {r0, r1}
 8021e10:	6810      	ldr	r0, [r2, #0]
 8021e12:	ab0c      	add	r3, sp, #48	; 0x30
 8021e14:	6851      	ldr	r1, [r2, #4]
 8021e16:	c303      	stmia	r3!, {r0, r1}
 8021e18:	a80a      	add	r0, sp, #40	; 0x28
 8021e1a:	f7fa fcd1 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e1e:	4621      	mov	r1, r4
 8021e20:	a80c      	add	r0, sp, #48	; 0x30
 8021e22:	f7fa fd11 	bl	801c848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021e26:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021e2a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021e2e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021e32:	f8d8 0000 	ldr.w	r0, [r8]
 8021e36:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021e3a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8021e3e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8021e42:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8021e46:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021e4a:	440a      	add	r2, r1
 8021e4c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8021e50:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8021e54:	4413      	add	r3, r2
 8021e56:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021e5a:	6803      	ldr	r3, [r0, #0]
 8021e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021e5e:	4798      	blx	r3
 8021e60:	2fff      	cmp	r7, #255	; 0xff
 8021e62:	d023      	beq.n	8021eac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8021e64:	f010 0f04 	tst.w	r0, #4
 8021e68:	f8d8 0000 	ldr.w	r0, [r8]
 8021e6c:	d021      	beq.n	8021eb2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8021e6e:	2100      	movs	r1, #0
 8021e70:	f04f 0e01 	mov.w	lr, #1
 8021e74:	f8d0 c000 	ldr.w	ip, [r0]
 8021e78:	b2a4      	uxth	r4, r4
 8021e7a:	9106      	str	r1, [sp, #24]
 8021e7c:	b2b6      	uxth	r6, r6
 8021e7e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8021e82:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021e86:	e9cd e107 	strd	lr, r1, [sp, #28]
 8021e8a:	f8b9 e000 	ldrh.w	lr, [r9]
 8021e8e:	9703      	str	r7, [sp, #12]
 8021e90:	9401      	str	r4, [sp, #4]
 8021e92:	9600      	str	r6, [sp, #0]
 8021e94:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021e98:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021e9c:	9102      	str	r1, [sp, #8]
 8021e9e:	4629      	mov	r1, r5
 8021ea0:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8021ea4:	47a0      	blx	r4
 8021ea6:	b00f      	add	sp, #60	; 0x3c
 8021ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021eac:	f010 0f01 	tst.w	r0, #1
 8021eb0:	e7da      	b.n	8021e68 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8021eb2:	6803      	ldr	r3, [r0, #0]
 8021eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021eb6:	4798      	blx	r3
 8021eb8:	f8b9 1000 	ldrh.w	r1, [r9]
 8021ebc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021ec0:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8021ec4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021ec8:	434c      	muls	r4, r1
 8021eca:	2fff      	cmp	r7, #255	; 0xff
 8021ecc:	fb01 2303 	mla	r3, r1, r3, r2
 8021ed0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021ed4:	eba1 0106 	sub.w	r1, r1, r6
 8021ed8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021edc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021ee0:	4418      	add	r0, r3
 8021ee2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8021ee6:	eba3 0606 	sub.w	r6, r3, r6
 8021eea:	4404      	add	r4, r0
 8021eec:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8021ef0:	d04a      	beq.n	8021f88 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8021ef2:	43fa      	mvns	r2, r7
 8021ef4:	b2bb      	uxth	r3, r7
 8021ef6:	b2d7      	uxtb	r7, r2
 8021ef8:	42a0      	cmp	r0, r4
 8021efa:	d263      	bcs.n	8021fc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8021efc:	eb00 0e0c 	add.w	lr, r0, ip
 8021f00:	4586      	cmp	lr, r0
 8021f02:	f100 0803 	add.w	r8, r0, #3
 8021f06:	d93a      	bls.n	8021f7e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8021f08:	f835 2b02 	ldrh.w	r2, [r5], #2
 8021f0c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8021f10:	00d0      	lsls	r0, r2, #3
 8021f12:	fb19 f907 	smulbb	r9, r9, r7
 8021f16:	b2c0      	uxtb	r0, r0
 8021f18:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8021f1c:	fb00 9003 	mla	r0, r0, r3, r9
 8021f20:	b280      	uxth	r0, r0
 8021f22:	f100 0901 	add.w	r9, r0, #1
 8021f26:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8021f2a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8021f2e:	fb19 f907 	smulbb	r9, r9, r7
 8021f32:	1200      	asrs	r0, r0, #8
 8021f34:	f808 0c03 	strb.w	r0, [r8, #-3]
 8021f38:	10d0      	asrs	r0, r2, #3
 8021f3a:	1212      	asrs	r2, r2, #8
 8021f3c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021f40:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021f44:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8021f48:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021f4c:	fb00 9003 	mla	r0, r0, r3, r9
 8021f50:	b280      	uxth	r0, r0
 8021f52:	f100 0901 	add.w	r9, r0, #1
 8021f56:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8021f5a:	1200      	asrs	r0, r0, #8
 8021f5c:	f808 0c02 	strb.w	r0, [r8, #-2]
 8021f60:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8021f64:	fb10 f007 	smulbb	r0, r0, r7
 8021f68:	fb02 0203 	mla	r2, r2, r3, r0
 8021f6c:	b292      	uxth	r2, r2
 8021f6e:	1c50      	adds	r0, r2, #1
 8021f70:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021f74:	4640      	mov	r0, r8
 8021f76:	1212      	asrs	r2, r2, #8
 8021f78:	f808 2c01 	strb.w	r2, [r8, #-1]
 8021f7c:	e7c0      	b.n	8021f00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8021f7e:	4408      	add	r0, r1
 8021f80:	4435      	add	r5, r6
 8021f82:	e7b9      	b.n	8021ef8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8021f84:	4408      	add	r0, r1
 8021f86:	4435      	add	r5, r6
 8021f88:	42a0      	cmp	r0, r4
 8021f8a:	d21b      	bcs.n	8021fc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8021f8c:	eb00 070c 	add.w	r7, r0, ip
 8021f90:	42b8      	cmp	r0, r7
 8021f92:	d2f7      	bcs.n	8021f84 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8021f94:	f835 3b02 	ldrh.w	r3, [r5], #2
 8021f98:	3003      	adds	r0, #3
 8021f9a:	00da      	lsls	r2, r3, #3
 8021f9c:	b2d2      	uxtb	r2, r2
 8021f9e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021fa2:	f800 2c03 	strb.w	r2, [r0, #-3]
 8021fa6:	10da      	asrs	r2, r3, #3
 8021fa8:	121b      	asrs	r3, r3, #8
 8021faa:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021fae:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021fb2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021fb6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8021fba:	f800 2c02 	strb.w	r2, [r0, #-2]
 8021fbe:	f800 3c01 	strb.w	r3, [r0, #-1]
 8021fc2:	e7e5      	b.n	8021f90 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8021fc4:	4b02      	ldr	r3, [pc, #8]	; (8021fd0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8021fc6:	6818      	ldr	r0, [r3, #0]
 8021fc8:	6803      	ldr	r3, [r0, #0]
 8021fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021fcc:	4798      	blx	r3
 8021fce:	e76a      	b.n	8021ea6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8021fd0:	24025d08 	.word	0x24025d08
 8021fd4:	24025d02 	.word	0x24025d02

08021fd8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fdc:	b08a      	sub	sp, #40	; 0x28
 8021fde:	460d      	mov	r5, r1
 8021fe0:	4604      	mov	r4, r0
 8021fe2:	461e      	mov	r6, r3
 8021fe4:	6808      	ldr	r0, [r1, #0]
 8021fe6:	ab06      	add	r3, sp, #24
 8021fe8:	6849      	ldr	r1, [r1, #4]
 8021fea:	4f5d      	ldr	r7, [pc, #372]	; (8022160 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8021fec:	c303      	stmia	r3!, {r0, r1}
 8021fee:	6810      	ldr	r0, [r2, #0]
 8021ff0:	ab08      	add	r3, sp, #32
 8021ff2:	6851      	ldr	r1, [r2, #4]
 8021ff4:	c303      	stmia	r3!, {r0, r1}
 8021ff6:	a806      	add	r0, sp, #24
 8021ff8:	f7fa fbe2 	bl	801c7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ffc:	4629      	mov	r1, r5
 8021ffe:	a808      	add	r0, sp, #32
 8022000:	f7fa fc22 	bl	801c848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022004:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8022008:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802200c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8022010:	6838      	ldr	r0, [r7, #0]
 8022012:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022016:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802201a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802201e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022022:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8022026:	440a      	add	r2, r1
 8022028:	f8ad 2020 	strh.w	r2, [sp, #32]
 802202c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8022030:	4413      	add	r3, r2
 8022032:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8022036:	6803      	ldr	r3, [r0, #0]
 8022038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802203a:	4798      	blx	r3
 802203c:	2eff      	cmp	r6, #255	; 0xff
 802203e:	d119      	bne.n	8022074 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8022040:	f010 0f20 	tst.w	r0, #32
 8022044:	6838      	ldr	r0, [r7, #0]
 8022046:	d018      	beq.n	802207a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8022048:	b2ad      	uxth	r5, r5
 802204a:	2700      	movs	r7, #0
 802204c:	6801      	ldr	r1, [r0, #0]
 802204e:	9501      	str	r5, [sp, #4]
 8022050:	fa1f f588 	uxth.w	r5, r8
 8022054:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8022058:	9500      	str	r5, [sp, #0]
 802205a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802205e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8022062:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022066:	9602      	str	r6, [sp, #8]
 8022068:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 802206a:	4621      	mov	r1, r4
 802206c:	47a8      	blx	r5
 802206e:	b00a      	add	sp, #40	; 0x28
 8022070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022074:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022078:	e7e4      	b.n	8022044 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 802207a:	6803      	ldr	r3, [r0, #0]
 802207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802207e:	4798      	blx	r3
 8022080:	4b38      	ldr	r3, [pc, #224]	; (8022164 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8022082:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8022086:	f8b3 c000 	ldrh.w	ip, [r3]
 802208a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802208e:	fb0c f505 	mul.w	r5, ip, r5
 8022092:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8022096:	fb0c 2303 	mla	r3, ip, r3, r2
 802209a:	ebac 0c08 	sub.w	ip, ip, r8
 802209e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80220a2:	ebae 0e08 	sub.w	lr, lr, r8
 80220a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80220aa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80220ae:	4418      	add	r0, r3
 80220b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80220b4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80220b8:	4405      	add	r5, r0
 80220ba:	42a8      	cmp	r0, r5
 80220bc:	d24a      	bcs.n	8022154 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80220be:	eb00 0803 	add.w	r8, r0, r3
 80220c2:	4540      	cmp	r0, r8
 80220c4:	d243      	bcs.n	802214e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80220c6:	78e2      	ldrb	r2, [r4, #3]
 80220c8:	b15a      	cbz	r2, 80220e2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80220ca:	2aff      	cmp	r2, #255	; 0xff
 80220cc:	f894 9000 	ldrb.w	r9, [r4]
 80220d0:	d10a      	bne.n	80220e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80220d2:	2eff      	cmp	r6, #255	; 0xff
 80220d4:	d108      	bne.n	80220e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80220d6:	f880 9000 	strb.w	r9, [r0]
 80220da:	7862      	ldrb	r2, [r4, #1]
 80220dc:	7042      	strb	r2, [r0, #1]
 80220de:	78a2      	ldrb	r2, [r4, #2]
 80220e0:	7082      	strb	r2, [r0, #2]
 80220e2:	3003      	adds	r0, #3
 80220e4:	3404      	adds	r4, #4
 80220e6:	e7ec      	b.n	80220c2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80220e8:	4372      	muls	r2, r6
 80220ea:	1c51      	adds	r1, r2, #1
 80220ec:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80220f0:	1209      	asrs	r1, r1, #8
 80220f2:	fa1f fa81 	uxth.w	sl, r1
 80220f6:	43c9      	mvns	r1, r1
 80220f8:	fb19 f90a 	smulbb	r9, r9, sl
 80220fc:	b2ca      	uxtb	r2, r1
 80220fe:	7801      	ldrb	r1, [r0, #0]
 8022100:	fb01 9902 	mla	r9, r1, r2, r9
 8022104:	fa1f f989 	uxth.w	r9, r9
 8022108:	f109 0101 	add.w	r1, r9, #1
 802210c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8022110:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022114:	f880 9000 	strb.w	r9, [r0]
 8022118:	f890 9001 	ldrb.w	r9, [r0, #1]
 802211c:	7861      	ldrb	r1, [r4, #1]
 802211e:	fb19 f902 	smulbb	r9, r9, r2
 8022122:	fb01 910a 	mla	r1, r1, sl, r9
 8022126:	b289      	uxth	r1, r1
 8022128:	f101 0901 	add.w	r9, r1, #1
 802212c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8022130:	1209      	asrs	r1, r1, #8
 8022132:	7041      	strb	r1, [r0, #1]
 8022134:	7881      	ldrb	r1, [r0, #2]
 8022136:	f894 9002 	ldrb.w	r9, [r4, #2]
 802213a:	fb11 f202 	smulbb	r2, r1, r2
 802213e:	fb09 220a 	mla	r2, r9, sl, r2
 8022142:	b292      	uxth	r2, r2
 8022144:	1c51      	adds	r1, r2, #1
 8022146:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802214a:	1212      	asrs	r2, r2, #8
 802214c:	e7c8      	b.n	80220e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 802214e:	4460      	add	r0, ip
 8022150:	4474      	add	r4, lr
 8022152:	e7b2      	b.n	80220ba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8022154:	6838      	ldr	r0, [r7, #0]
 8022156:	6803      	ldr	r3, [r0, #0]
 8022158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802215a:	4798      	blx	r3
 802215c:	e787      	b.n	802206e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 802215e:	bf00      	nop
 8022160:	24025d08 	.word	0x24025d08
 8022164:	24025d02 	.word	0x24025d02

08022168 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802216c:	b085      	sub	sp, #20
 802216e:	4606      	mov	r6, r0
 8022170:	460c      	mov	r4, r1
 8022172:	4691      	mov	r9, r2
 8022174:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8022178:	4698      	mov	r8, r3
 802217a:	b31d      	cbz	r5, 80221c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802217c:	4608      	mov	r0, r1
 802217e:	f7fd fa21 	bl	801f5c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022182:	4607      	mov	r7, r0
 8022184:	4620      	mov	r0, r4
 8022186:	f7fd fa51 	bl	801f62c <_ZNK8touchgfx6Bitmap9getHeightEv>
 802218a:	f8ad 000e 	strh.w	r0, [sp, #14]
 802218e:	4620      	mov	r0, r4
 8022190:	f8ad 9008 	strh.w	r9, [sp, #8]
 8022194:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022198:	f8ad 700c 	strh.w	r7, [sp, #12]
 802219c:	f7fd fb82 	bl	801f8a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80221a0:	280b      	cmp	r0, #11
 80221a2:	d80f      	bhi.n	80221c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80221a4:	e8df f000 	tbb	[pc, r0]
 80221a8:	0e062920 	.word	0x0e062920
 80221ac:	0e0e0e0e 	.word	0x0e0e0e0e
 80221b0:	110e0e0e 	.word	0x110e0e0e
 80221b4:	4620      	mov	r0, r4
 80221b6:	f7fd faf1 	bl	801f79c <_ZNK8touchgfx6Bitmap7getDataEv>
 80221ba:	462b      	mov	r3, r5
 80221bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80221be:	a902      	add	r1, sp, #8
 80221c0:	f7ff ff0a 	bl	8021fd8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80221c4:	b005      	add	sp, #20
 80221c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80221ca:	4620      	mov	r0, r4
 80221cc:	f7fd fae6 	bl	801f79c <_ZNK8touchgfx6Bitmap7getDataEv>
 80221d0:	4606      	mov	r6, r0
 80221d2:	4620      	mov	r0, r4
 80221d4:	f7fd fb12 	bl	801f7fc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80221d8:	9500      	str	r5, [sp, #0]
 80221da:	4601      	mov	r1, r0
 80221dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80221de:	aa02      	add	r2, sp, #8
 80221e0:	4630      	mov	r0, r6
 80221e2:	f7ff fdf3 	bl	8021dcc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80221e6:	e7ed      	b.n	80221c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80221e8:	4620      	mov	r0, r4
 80221ea:	f7fd fad7 	bl	801f79c <_ZNK8touchgfx6Bitmap7getDataEv>
 80221ee:	462b      	mov	r3, r5
 80221f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80221f2:	a902      	add	r1, sp, #8
 80221f4:	f7ff fdfc 	bl	8021df0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80221f8:	e7e4      	b.n	80221c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80221fa:	6833      	ldr	r3, [r6, #0]
 80221fc:	4620      	mov	r0, r4
 80221fe:	68df      	ldr	r7, [r3, #12]
 8022200:	f7fd facc 	bl	801f79c <_ZNK8touchgfx6Bitmap7getDataEv>
 8022204:	2300      	movs	r3, #0
 8022206:	4601      	mov	r1, r0
 8022208:	aa02      	add	r2, sp, #8
 802220a:	4630      	mov	r0, r6
 802220c:	e9cd 5300 	strd	r5, r3, [sp]
 8022210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022212:	47b8      	blx	r7
 8022214:	e7d6      	b.n	80221c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08022216 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022216:	b4f0      	push	{r4, r5, r6, r7}
 8022218:	4616      	mov	r6, r2
 802221a:	461c      	mov	r4, r3
 802221c:	460d      	mov	r5, r1
 802221e:	9a04      	ldr	r2, [sp, #16]
 8022220:	2e01      	cmp	r6, #1
 8022222:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022226:	d00e      	beq.n	8022246 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8022228:	d303      	bcc.n	8022232 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 802222a:	2e02      	cmp	r6, #2
 802222c:	d006      	beq.n	802223c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 802222e:	bcf0      	pop	{r4, r5, r6, r7}
 8022230:	4770      	bx	lr
 8022232:	4621      	mov	r1, r4
 8022234:	4628      	mov	r0, r5
 8022236:	bcf0      	pop	{r4, r5, r6, r7}
 8022238:	f7ff bdda 	b.w	8021df0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 802223c:	4621      	mov	r1, r4
 802223e:	4628      	mov	r0, r5
 8022240:	bcf0      	pop	{r4, r5, r6, r7}
 8022242:	f7ff bec9 	b.w	8021fd8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022246:	6805      	ldr	r5, [r0, #0]
 8022248:	2600      	movs	r6, #0
 802224a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 802224e:	68ed      	ldr	r5, [r5, #12]
 8022250:	4613      	mov	r3, r2
 8022252:	4622      	mov	r2, r4
 8022254:	46ac      	mov	ip, r5
 8022256:	bcf0      	pop	{r4, r5, r6, r7}
 8022258:	4760      	bx	ip
	...

0802225c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 802225c:	b160      	cbz	r0, 8022278 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 802225e:	2903      	cmp	r1, #3
 8022260:	d818      	bhi.n	8022294 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8022262:	e8df f001 	tbb	[pc, r1]
 8022266:	1902      	.short	0x1902
 8022268:	1b06      	.short	0x1b06
 802226a:	4b0e      	ldr	r3, [pc, #56]	; (80222a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 802226c:	8818      	ldrh	r0, [r3, #0]
 802226e:	4240      	negs	r0, r0
 8022270:	4770      	bx	lr
 8022272:	4b0c      	ldr	r3, [pc, #48]	; (80222a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8022274:	8818      	ldrh	r0, [r3, #0]
 8022276:	4770      	bx	lr
 8022278:	2903      	cmp	r1, #3
 802227a:	d80b      	bhi.n	8022294 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 802227c:	a301      	add	r3, pc, #4	; (adr r3, 8022284 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 802227e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022282:	bf00      	nop
 8022284:	08022299 	.word	0x08022299
 8022288:	08022273 	.word	0x08022273
 802228c:	0802229d 	.word	0x0802229d
 8022290:	0802226b 	.word	0x0802226b
 8022294:	2000      	movs	r0, #0
 8022296:	4770      	bx	lr
 8022298:	2001      	movs	r0, #1
 802229a:	4770      	bx	lr
 802229c:	f04f 30ff 	mov.w	r0, #4294967295
 80222a0:	4770      	bx	lr
 80222a2:	bf00      	nop
 80222a4:	24025d02 	.word	0x24025d02

080222a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80222a8:	b160      	cbz	r0, 80222c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 80222aa:	2903      	cmp	r1, #3
 80222ac:	d818      	bhi.n	80222e0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80222ae:	e8df f001 	tbb	[pc, r1]
 80222b2:	0219      	.short	0x0219
 80222b4:	051b      	.short	0x051b
 80222b6:	4b0e      	ldr	r3, [pc, #56]	; (80222f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80222b8:	8818      	ldrh	r0, [r3, #0]
 80222ba:	4770      	bx	lr
 80222bc:	4b0c      	ldr	r3, [pc, #48]	; (80222f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80222be:	8818      	ldrh	r0, [r3, #0]
 80222c0:	4240      	negs	r0, r0
 80222c2:	4770      	bx	lr
 80222c4:	2903      	cmp	r1, #3
 80222c6:	d80b      	bhi.n	80222e0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80222c8:	a301      	add	r3, pc, #4	; (adr r3, 80222d0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 80222ca:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80222ce:	bf00      	nop
 80222d0:	080222b7 	.word	0x080222b7
 80222d4:	080222e9 	.word	0x080222e9
 80222d8:	080222bd 	.word	0x080222bd
 80222dc:	080222e5 	.word	0x080222e5
 80222e0:	2000      	movs	r0, #0
 80222e2:	4770      	bx	lr
 80222e4:	2001      	movs	r0, #1
 80222e6:	4770      	bx	lr
 80222e8:	f04f 30ff 	mov.w	r0, #4294967295
 80222ec:	4770      	bx	lr
 80222ee:	bf00      	nop
 80222f0:	24025d02 	.word	0x24025d02

080222f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80222f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222f8:	b097      	sub	sp, #92	; 0x5c
 80222fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80222fc:	a912      	add	r1, sp, #72	; 0x48
 80222fe:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8022302:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8022306:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 802230a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 802230e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8022312:	e881 000c 	stmia.w	r1, {r2, r3}
 8022316:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 802231a:	930a      	str	r3, [sp, #40]	; 0x28
 802231c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8022320:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8022324:	9311      	str	r3, [sp, #68]	; 0x44
 8022326:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 802232a:	798d      	ldrb	r5, [r1, #6]
 802232c:	930c      	str	r3, [sp, #48]	; 0x30
 802232e:	7b4b      	ldrb	r3, [r1, #13]
 8022330:	0158      	lsls	r0, r3, #5
 8022332:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8022336:	4328      	orrs	r0, r5
 8022338:	9009      	str	r0, [sp, #36]	; 0x24
 802233a:	f000 817c 	beq.w	8022636 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802233e:	011b      	lsls	r3, r3, #4
 8022340:	79c8      	ldrb	r0, [r1, #7]
 8022342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022346:	4303      	orrs	r3, r0
 8022348:	930e      	str	r3, [sp, #56]	; 0x38
 802234a:	f000 8174 	beq.w	8022636 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802234e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022352:	b29b      	uxth	r3, r3
 8022354:	2f00      	cmp	r7, #0
 8022356:	f000 8116 	beq.w	8022586 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 802235a:	1aff      	subs	r7, r7, r3
 802235c:	b2bf      	uxth	r7, r7
 802235e:	043b      	lsls	r3, r7, #16
 8022360:	d502      	bpl.n	8022368 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8022362:	1bf6      	subs	r6, r6, r7
 8022364:	2700      	movs	r7, #0
 8022366:	b236      	sxth	r6, r6
 8022368:	f9b2 1000 	ldrsh.w	r1, [r2]
 802236c:	a812      	add	r0, sp, #72	; 0x48
 802236e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8022372:	428e      	cmp	r6, r1
 8022374:	b28b      	uxth	r3, r1
 8022376:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 802237a:	bfbf      	itttt	lt
 802237c:	18ff      	addlt	r7, r7, r3
 802237e:	1bbe      	sublt	r6, r7, r6
 8022380:	b2b7      	uxthlt	r7, r6
 8022382:	460e      	movlt	r6, r1
 8022384:	8891      	ldrh	r1, [r2, #4]
 8022386:	440b      	add	r3, r1
 8022388:	4631      	mov	r1, r6
 802238a:	b21b      	sxth	r3, r3
 802238c:	9310      	str	r3, [sp, #64]	; 0x40
 802238e:	88d3      	ldrh	r3, [r2, #6]
 8022390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022392:	449a      	add	sl, r3
 8022394:	fa0f f38a 	sxth.w	r3, sl
 8022398:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 802239c:	930f      	str	r3, [sp, #60]	; 0x3c
 802239e:	4bb5      	ldr	r3, [pc, #724]	; (8022674 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80223a0:	f893 b000 	ldrb.w	fp, [r3]
 80223a4:	f10b 3cff 	add.w	ip, fp, #4294967295
 80223a8:	f1dc 0300 	rsbs	r3, ip, #0
 80223ac:	eb43 030c 	adc.w	r3, r3, ip
 80223b0:	930d      	str	r3, [sp, #52]	; 0x34
 80223b2:	464b      	mov	r3, r9
 80223b4:	f7fa f87e 	bl	801c4b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80223b8:	4631      	mov	r1, r6
 80223ba:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80223be:	464b      	mov	r3, r9
 80223c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80223c2:	a812      	add	r0, sp, #72	; 0x48
 80223c4:	f7fa f893 	bl	801c4ee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80223c8:	a916      	add	r1, sp, #88	; 0x58
 80223ca:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80223ce:	a815      	add	r0, sp, #84	; 0x54
 80223d0:	f7fa f9b4 	bl	801c73c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80223d4:	f1b9 0f00 	cmp.w	r9, #0
 80223d8:	f040 80d8 	bne.w	802258c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 80223dc:	f1bb 0f01 	cmp.w	fp, #1
 80223e0:	f040 80dc 	bne.w	802259c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80223e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80223e6:	b153      	cbz	r3, 80223fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80223e8:	2508      	movs	r5, #8
 80223ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80223ec:	fb95 f3f8 	sdiv	r3, r5, r8
 80223f0:	1e5d      	subs	r5, r3, #1
 80223f2:	4415      	add	r5, r2
 80223f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80223f8:	fb15 f503 	smulbb	r5, r5, r3
 80223fc:	b2ad      	uxth	r5, r5
 80223fe:	b907      	cbnz	r7, 8022402 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022400:	b16c      	cbz	r4, 802241e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8022402:	fb04 7305 	mla	r3, r4, r5, r7
 8022406:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022408:	ebaa 0a04 	sub.w	sl, sl, r4
 802240c:	fb08 f303 	mul.w	r3, r8, r3
 8022410:	fa1f fa8a 	uxth.w	sl, sl
 8022414:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8022418:	f003 0407 	and.w	r4, r3, #7
 802241c:	9226      	str	r2, [sp, #152]	; 0x98
 802241e:	4649      	mov	r1, r9
 8022420:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022422:	f7ff ff1b 	bl	802225c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8022426:	4683      	mov	fp, r0
 8022428:	980d      	ldr	r0, [sp, #52]	; 0x34
 802242a:	f7ff ff3d 	bl	80222a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 802242e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022432:	4681      	mov	r9, r0
 8022434:	1a9b      	subs	r3, r3, r2
 8022436:	459a      	cmp	sl, r3
 8022438:	bfa8      	it	ge
 802243a:	469a      	movge	sl, r3
 802243c:	f1ba 0f00 	cmp.w	sl, #0
 8022440:	f340 80f9 	ble.w	8022636 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022444:	1bf6      	subs	r6, r6, r7
 8022446:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022448:	1b9e      	subs	r6, r3, r6
 802244a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802244c:	429e      	cmp	r6, r3
 802244e:	bfd4      	ite	le
 8022450:	ebc7 0706 	rsble	r7, r7, r6
 8022454:	ebc7 0703 	rsbgt	r7, r7, r3
 8022458:	2f00      	cmp	r7, #0
 802245a:	f340 80ec 	ble.w	8022636 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802245e:	1bed      	subs	r5, r5, r7
 8022460:	fb08 f305 	mul.w	r3, r8, r5
 8022464:	930d      	str	r3, [sp, #52]	; 0x34
 8022466:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022468:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802246c:	930e      	str	r3, [sp, #56]	; 0x38
 802246e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022470:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022474:	930f      	str	r3, [sp, #60]	; 0x3c
 8022476:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022478:	b2db      	uxtb	r3, r3
 802247a:	9310      	str	r3, [sp, #64]	; 0x40
 802247c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802247e:	2b00      	cmp	r3, #0
 8022480:	f040 80de 	bne.w	8022640 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8022484:	4b7c      	ldr	r3, [pc, #496]	; (8022678 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8022486:	6818      	ldr	r0, [r3, #0]
 8022488:	6803      	ldr	r3, [r0, #0]
 802248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802248c:	4798      	blx	r3
 802248e:	2301      	movs	r3, #1
 8022490:	4a7a      	ldr	r2, [pc, #488]	; (802267c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8022492:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8022496:	fb07 9b1b 	mls	fp, r7, fp, r9
 802249a:	fa03 f308 	lsl.w	r3, r3, r8
 802249e:	8811      	ldrh	r1, [r2, #0]
 80224a0:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80224a4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80224a8:	3b01      	subs	r3, #1
 80224aa:	fb06 bb07 	mla	fp, r6, r7, fp
 80224ae:	b2db      	uxtb	r3, r3
 80224b0:	930a      	str	r3, [sp, #40]	; 0x28
 80224b2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80224b6:	fb01 2303 	mla	r3, r1, r3, r2
 80224ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80224be:	18c3      	adds	r3, r0, r3
 80224c0:	9309      	str	r3, [sp, #36]	; 0x24
 80224c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80224c4:	781a      	ldrb	r2, [r3, #0]
 80224c6:	4122      	asrs	r2, r4
 80224c8:	b2d2      	uxtb	r2, r2
 80224ca:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80224ce:	f0c0 80d7 	bcc.w	8022680 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 80224d2:	46be      	mov	lr, r7
 80224d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80224d6:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80224da:	f0c0 80ba 	bcc.w	8022652 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 80224de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224e0:	4013      	ands	r3, r2
 80224e2:	d041      	beq.n	8022568 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80224e4:	20ff      	movs	r0, #255	; 0xff
 80224e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80224e8:	fb90 f5f5 	sdiv	r5, r0, r5
 80224ec:	436b      	muls	r3, r5
 80224ee:	2bfe      	cmp	r3, #254	; 0xfe
 80224f0:	dd03      	ble.n	80224fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 80224f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80224f4:	4285      	cmp	r5, r0
 80224f6:	f000 80a5 	beq.w	8022644 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 80224fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80224fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80224fe:	fb15 f303 	smulbb	r3, r5, r3
 8022502:	b29b      	uxth	r3, r3
 8022504:	1c5d      	adds	r5, r3, #1
 8022506:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802250a:	780d      	ldrb	r5, [r1, #0]
 802250c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022510:	fa1f fc83 	uxth.w	ip, r3
 8022514:	43db      	mvns	r3, r3
 8022516:	fb10 f90c 	smulbb	r9, r0, ip
 802251a:	b2db      	uxtb	r3, r3
 802251c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802251e:	fb05 9503 	mla	r5, r5, r3, r9
 8022522:	b2ad      	uxth	r5, r5
 8022524:	f105 0901 	add.w	r9, r5, #1
 8022528:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 802252c:	fb10 f90c 	smulbb	r9, r0, ip
 8022530:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022532:	122d      	asrs	r5, r5, #8
 8022534:	fb10 fc0c 	smulbb	ip, r0, ip
 8022538:	700d      	strb	r5, [r1, #0]
 802253a:	784d      	ldrb	r5, [r1, #1]
 802253c:	fb05 9503 	mla	r5, r5, r3, r9
 8022540:	b2ad      	uxth	r5, r5
 8022542:	f105 0901 	add.w	r9, r5, #1
 8022546:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 802254a:	122d      	asrs	r5, r5, #8
 802254c:	704d      	strb	r5, [r1, #1]
 802254e:	788d      	ldrb	r5, [r1, #2]
 8022550:	fb05 cc03 	mla	ip, r5, r3, ip
 8022554:	fa1f fc8c 	uxth.w	ip, ip
 8022558:	f10c 0301 	add.w	r3, ip, #1
 802255c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022560:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022564:	f881 c002 	strb.w	ip, [r1, #2]
 8022568:	4444      	add	r4, r8
 802256a:	4431      	add	r1, r6
 802256c:	b2a4      	uxth	r4, r4
 802256e:	2c07      	cmp	r4, #7
 8022570:	bf89      	itett	hi
 8022572:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8022574:	fa42 f208 	asrls.w	r2, r2, r8
 8022578:	2400      	movhi	r4, #0
 802257a:	785a      	ldrbhi	r2, [r3, #1]
 802257c:	bf8a      	itet	hi
 802257e:	3301      	addhi	r3, #1
 8022580:	b2d2      	uxtbls	r2, r2
 8022582:	9326      	strhi	r3, [sp, #152]	; 0x98
 8022584:	e7a7      	b.n	80224d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8022586:	441e      	add	r6, r3
 8022588:	b236      	sxth	r6, r6
 802258a:	e6ed      	b.n	8022368 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802258c:	f1b9 0f01 	cmp.w	r9, #1
 8022590:	f47f af28 	bne.w	80223e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022594:	f1bb 0f01 	cmp.w	fp, #1
 8022598:	f47f af24 	bne.w	80223e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802259c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8022678 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80225a0:	f8db 0000 	ldr.w	r0, [fp]
 80225a4:	6803      	ldr	r3, [r0, #0]
 80225a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80225a8:	4798      	blx	r3
 80225aa:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80225ae:	465a      	mov	r2, fp
 80225b0:	d006      	beq.n	80225c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80225b2:	f1b8 0f04 	cmp.w	r8, #4
 80225b6:	d141      	bne.n	802263c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 80225b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80225ba:	3300      	adds	r3, #0
 80225bc:	bf18      	it	ne
 80225be:	2301      	movne	r3, #1
 80225c0:	0580      	lsls	r0, r0, #22
 80225c2:	d566      	bpl.n	8022692 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80225c4:	f1b8 0f08 	cmp.w	r8, #8
 80225c8:	d163      	bne.n	8022692 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80225ca:	2b00      	cmp	r3, #0
 80225cc:	bf0c      	ite	eq
 80225ce:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80225d2:	f44f 7180 	movne.w	r1, #256	; 0x100
 80225d6:	2f00      	cmp	r7, #0
 80225d8:	f47f af04 	bne.w	80223e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80225dc:	2c00      	cmp	r4, #0
 80225de:	f47f af01 	bne.w	80223e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80225e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80225e6:	18f3      	adds	r3, r6, r3
 80225e8:	4283      	cmp	r3, r0
 80225ea:	f73f aefb 	bgt.w	80223e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80225ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80225f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80225f2:	4403      	add	r3, r0
 80225f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80225f6:	4283      	cmp	r3, r0
 80225f8:	f73f aef4 	bgt.w	80223e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80225fc:	f1b8 0f08 	cmp.w	r8, #8
 8022600:	6810      	ldr	r0, [r2, #0]
 8022602:	f04f 0600 	mov.w	r6, #0
 8022606:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 802260a:	bf18      	it	ne
 802260c:	3501      	addne	r5, #1
 802260e:	6804      	ldr	r4, [r0, #0]
 8022610:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8022614:	bf18      	it	ne
 8022616:	f025 0501 	bicne.w	r5, r5, #1
 802261a:	e9cd 1605 	strd	r1, r6, [sp, #20]
 802261e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022620:	bf18      	it	ne
 8022622:	b2ad      	uxthne	r5, r5
 8022624:	9104      	str	r1, [sp, #16]
 8022626:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022628:	e9cd 5a00 	strd	r5, sl, [sp]
 802262c:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8022630:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022632:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8022634:	47a0      	blx	r4
 8022636:	b017      	add	sp, #92	; 0x5c
 8022638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802263c:	2300      	movs	r3, #0
 802263e:	e7bf      	b.n	80225c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8022640:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022642:	e724      	b.n	802248e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8022644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022646:	700b      	strb	r3, [r1, #0]
 8022648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802264a:	704b      	strb	r3, [r1, #1]
 802264c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802264e:	708b      	strb	r3, [r1, #2]
 8022650:	e78a      	b.n	8022568 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8022652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022654:	b153      	cbz	r3, 802266c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8022656:	441c      	add	r4, r3
 8022658:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802265a:	b2a4      	uxth	r4, r4
 802265c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8022660:	f004 0407 	and.w	r4, r4, #7
 8022664:	781a      	ldrb	r2, [r3, #0]
 8022666:	9326      	str	r3, [sp, #152]	; 0x98
 8022668:	4122      	asrs	r2, r4
 802266a:	b2d2      	uxtb	r2, r2
 802266c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802266e:	445b      	add	r3, fp
 8022670:	9309      	str	r3, [sp, #36]	; 0x24
 8022672:	e72a      	b.n	80224ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8022674:	24025d00 	.word	0x24025d00
 8022678:	24025d08 	.word	0x24025d08
 802267c:	24025d02 	.word	0x24025d02
 8022680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022682:	2b00      	cmp	r3, #0
 8022684:	d1d7      	bne.n	8022636 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022686:	4b06      	ldr	r3, [pc, #24]	; (80226a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8022688:	6818      	ldr	r0, [r3, #0]
 802268a:	6803      	ldr	r3, [r0, #0]
 802268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802268e:	4798      	blx	r3
 8022690:	e7d1      	b.n	8022636 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022692:	2b00      	cmp	r3, #0
 8022694:	f43f aea6 	beq.w	80223e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022698:	f44f 7180 	mov.w	r1, #256	; 0x100
 802269c:	e79b      	b.n	80225d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 802269e:	bf00      	nop
 80226a0:	24025d08 	.word	0x24025d08

080226a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80226a4:	b538      	push	{r3, r4, r5, lr}
 80226a6:	4c15      	ldr	r4, [pc, #84]	; (80226fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80226a8:	4605      	mov	r5, r0
 80226aa:	7823      	ldrb	r3, [r4, #0]
 80226ac:	f3bf 8f5b 	dmb	ish
 80226b0:	07da      	lsls	r2, r3, #31
 80226b2:	d40b      	bmi.n	80226cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80226b4:	4620      	mov	r0, r4
 80226b6:	f005 f890 	bl	80277da <__cxa_guard_acquire>
 80226ba:	b138      	cbz	r0, 80226cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80226bc:	4620      	mov	r0, r4
 80226be:	f005 f898 	bl	80277f2 <__cxa_guard_release>
 80226c2:	4a0f      	ldr	r2, [pc, #60]	; (8022700 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80226c4:	490f      	ldr	r1, [pc, #60]	; (8022704 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80226c6:	4810      	ldr	r0, [pc, #64]	; (8022708 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80226c8:	f005 f880 	bl	80277cc <__aeabi_atexit>
 80226cc:	4c0f      	ldr	r4, [pc, #60]	; (802270c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80226ce:	7823      	ldrb	r3, [r4, #0]
 80226d0:	f3bf 8f5b 	dmb	ish
 80226d4:	07db      	lsls	r3, r3, #31
 80226d6:	d40b      	bmi.n	80226f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80226d8:	4620      	mov	r0, r4
 80226da:	f005 f87e 	bl	80277da <__cxa_guard_acquire>
 80226de:	b138      	cbz	r0, 80226f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80226e0:	4620      	mov	r0, r4
 80226e2:	f005 f886 	bl	80277f2 <__cxa_guard_release>
 80226e6:	4a06      	ldr	r2, [pc, #24]	; (8022700 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80226e8:	4909      	ldr	r1, [pc, #36]	; (8022710 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80226ea:	480a      	ldr	r0, [pc, #40]	; (8022714 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80226ec:	f005 f86e 	bl	80277cc <__aeabi_atexit>
 80226f0:	4b05      	ldr	r3, [pc, #20]	; (8022708 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80226f2:	612b      	str	r3, [r5, #16]
 80226f4:	4b07      	ldr	r3, [pc, #28]	; (8022714 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80226f6:	616b      	str	r3, [r5, #20]
 80226f8:	bd38      	pop	{r3, r4, r5, pc}
 80226fa:	bf00      	nop
 80226fc:	24025dd4 	.word	0x24025dd4
 8022700:	24000000 	.word	0x24000000
 8022704:	0802127b 	.word	0x0802127b
 8022708:	240000ac 	.word	0x240000ac
 802270c:	24025dd8 	.word	0x24025dd8
 8022710:	08021279 	.word	0x08021279
 8022714:	240000b0 	.word	0x240000b0

08022718 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022718:	b538      	push	{r3, r4, r5, lr}
 802271a:	4c15      	ldr	r4, [pc, #84]	; (8022770 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 802271c:	4605      	mov	r5, r0
 802271e:	7823      	ldrb	r3, [r4, #0]
 8022720:	f3bf 8f5b 	dmb	ish
 8022724:	07da      	lsls	r2, r3, #31
 8022726:	d40b      	bmi.n	8022740 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022728:	4620      	mov	r0, r4
 802272a:	f005 f856 	bl	80277da <__cxa_guard_acquire>
 802272e:	b138      	cbz	r0, 8022740 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022730:	4620      	mov	r0, r4
 8022732:	f005 f85e 	bl	80277f2 <__cxa_guard_release>
 8022736:	4a0f      	ldr	r2, [pc, #60]	; (8022774 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022738:	490f      	ldr	r1, [pc, #60]	; (8022778 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802273a:	4810      	ldr	r0, [pc, #64]	; (802277c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802273c:	f005 f846 	bl	80277cc <__aeabi_atexit>
 8022740:	4c0f      	ldr	r4, [pc, #60]	; (8022780 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8022742:	7823      	ldrb	r3, [r4, #0]
 8022744:	f3bf 8f5b 	dmb	ish
 8022748:	07db      	lsls	r3, r3, #31
 802274a:	d40b      	bmi.n	8022764 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802274c:	4620      	mov	r0, r4
 802274e:	f005 f844 	bl	80277da <__cxa_guard_acquire>
 8022752:	b138      	cbz	r0, 8022764 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022754:	4620      	mov	r0, r4
 8022756:	f005 f84c 	bl	80277f2 <__cxa_guard_release>
 802275a:	4a06      	ldr	r2, [pc, #24]	; (8022774 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802275c:	4909      	ldr	r1, [pc, #36]	; (8022784 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802275e:	480a      	ldr	r0, [pc, #40]	; (8022788 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022760:	f005 f834 	bl	80277cc <__aeabi_atexit>
 8022764:	4b05      	ldr	r3, [pc, #20]	; (802277c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022766:	60ab      	str	r3, [r5, #8]
 8022768:	4b07      	ldr	r3, [pc, #28]	; (8022788 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802276a:	60eb      	str	r3, [r5, #12]
 802276c:	bd38      	pop	{r3, r4, r5, pc}
 802276e:	bf00      	nop
 8022770:	24025db4 	.word	0x24025db4
 8022774:	24000000 	.word	0x24000000
 8022778:	0802127f 	.word	0x0802127f
 802277c:	2400008c 	.word	0x2400008c
 8022780:	24025db8 	.word	0x24025db8
 8022784:	0802127d 	.word	0x0802127d
 8022788:	24000090 	.word	0x24000090

0802278c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 802278c:	b510      	push	{r4, lr}
 802278e:	4604      	mov	r4, r0
 8022790:	f7ff ff88 	bl	80226a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022794:	4620      	mov	r0, r4
 8022796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802279a:	f7ff bfbd 	b.w	8022718 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080227a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80227a0:	b538      	push	{r3, r4, r5, lr}
 80227a2:	4c15      	ldr	r4, [pc, #84]	; (80227f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80227a4:	4605      	mov	r5, r0
 80227a6:	7823      	ldrb	r3, [r4, #0]
 80227a8:	f3bf 8f5b 	dmb	ish
 80227ac:	07da      	lsls	r2, r3, #31
 80227ae:	d40b      	bmi.n	80227c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80227b0:	4620      	mov	r0, r4
 80227b2:	f005 f812 	bl	80277da <__cxa_guard_acquire>
 80227b6:	b138      	cbz	r0, 80227c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80227b8:	4620      	mov	r0, r4
 80227ba:	f005 f81a 	bl	80277f2 <__cxa_guard_release>
 80227be:	4a0f      	ldr	r2, [pc, #60]	; (80227fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80227c0:	490f      	ldr	r1, [pc, #60]	; (8022800 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80227c2:	4810      	ldr	r0, [pc, #64]	; (8022804 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80227c4:	f005 f802 	bl	80277cc <__aeabi_atexit>
 80227c8:	4c0f      	ldr	r4, [pc, #60]	; (8022808 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80227ca:	7823      	ldrb	r3, [r4, #0]
 80227cc:	f3bf 8f5b 	dmb	ish
 80227d0:	07db      	lsls	r3, r3, #31
 80227d2:	d40b      	bmi.n	80227ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80227d4:	4620      	mov	r0, r4
 80227d6:	f005 f800 	bl	80277da <__cxa_guard_acquire>
 80227da:	b138      	cbz	r0, 80227ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80227dc:	4620      	mov	r0, r4
 80227de:	f005 f808 	bl	80277f2 <__cxa_guard_release>
 80227e2:	4a06      	ldr	r2, [pc, #24]	; (80227fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80227e4:	4909      	ldr	r1, [pc, #36]	; (802280c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80227e6:	480a      	ldr	r0, [pc, #40]	; (8022810 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80227e8:	f004 fff0 	bl	80277cc <__aeabi_atexit>
 80227ec:	4b05      	ldr	r3, [pc, #20]	; (8022804 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80227ee:	622b      	str	r3, [r5, #32]
 80227f0:	4b07      	ldr	r3, [pc, #28]	; (8022810 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80227f2:	626b      	str	r3, [r5, #36]	; 0x24
 80227f4:	bd38      	pop	{r3, r4, r5, pc}
 80227f6:	bf00      	nop
 80227f8:	24025ddc 	.word	0x24025ddc
 80227fc:	24000000 	.word	0x24000000
 8022800:	08021273 	.word	0x08021273
 8022804:	240000b4 	.word	0x240000b4
 8022808:	24025de0 	.word	0x24025de0
 802280c:	08021271 	.word	0x08021271
 8022810:	240000b8 	.word	0x240000b8

08022814 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022814:	b538      	push	{r3, r4, r5, lr}
 8022816:	4c15      	ldr	r4, [pc, #84]	; (802286c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022818:	4605      	mov	r5, r0
 802281a:	7823      	ldrb	r3, [r4, #0]
 802281c:	f3bf 8f5b 	dmb	ish
 8022820:	07da      	lsls	r2, r3, #31
 8022822:	d40b      	bmi.n	802283c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022824:	4620      	mov	r0, r4
 8022826:	f004 ffd8 	bl	80277da <__cxa_guard_acquire>
 802282a:	b138      	cbz	r0, 802283c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802282c:	4620      	mov	r0, r4
 802282e:	f004 ffe0 	bl	80277f2 <__cxa_guard_release>
 8022832:	4a0f      	ldr	r2, [pc, #60]	; (8022870 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022834:	490f      	ldr	r1, [pc, #60]	; (8022874 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8022836:	4810      	ldr	r0, [pc, #64]	; (8022878 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022838:	f004 ffc8 	bl	80277cc <__aeabi_atexit>
 802283c:	4c0f      	ldr	r4, [pc, #60]	; (802287c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802283e:	7823      	ldrb	r3, [r4, #0]
 8022840:	f3bf 8f5b 	dmb	ish
 8022844:	07db      	lsls	r3, r3, #31
 8022846:	d40b      	bmi.n	8022860 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022848:	4620      	mov	r0, r4
 802284a:	f004 ffc6 	bl	80277da <__cxa_guard_acquire>
 802284e:	b138      	cbz	r0, 8022860 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022850:	4620      	mov	r0, r4
 8022852:	f004 ffce 	bl	80277f2 <__cxa_guard_release>
 8022856:	4a06      	ldr	r2, [pc, #24]	; (8022870 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022858:	4909      	ldr	r1, [pc, #36]	; (8022880 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802285a:	480a      	ldr	r0, [pc, #40]	; (8022884 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802285c:	f004 ffb6 	bl	80277cc <__aeabi_atexit>
 8022860:	4b05      	ldr	r3, [pc, #20]	; (8022878 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022862:	61ab      	str	r3, [r5, #24]
 8022864:	4b07      	ldr	r3, [pc, #28]	; (8022884 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022866:	61eb      	str	r3, [r5, #28]
 8022868:	bd38      	pop	{r3, r4, r5, pc}
 802286a:	bf00      	nop
 802286c:	24025dbc 	.word	0x24025dbc
 8022870:	24000000 	.word	0x24000000
 8022874:	08021277 	.word	0x08021277
 8022878:	24000094 	.word	0x24000094
 802287c:	24025dc0 	.word	0x24025dc0
 8022880:	08021275 	.word	0x08021275
 8022884:	24000098 	.word	0x24000098

08022888 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022888:	b510      	push	{r4, lr}
 802288a:	4604      	mov	r4, r0
 802288c:	f7ff ff88 	bl	80227a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022890:	4620      	mov	r0, r4
 8022892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022896:	f7ff bfbd 	b.w	8022814 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0802289c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 802289c:	b538      	push	{r3, r4, r5, lr}
 802289e:	4c15      	ldr	r4, [pc, #84]	; (80228f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80228a0:	4605      	mov	r5, r0
 80228a2:	7823      	ldrb	r3, [r4, #0]
 80228a4:	f3bf 8f5b 	dmb	ish
 80228a8:	07da      	lsls	r2, r3, #31
 80228aa:	d40b      	bmi.n	80228c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80228ac:	4620      	mov	r0, r4
 80228ae:	f004 ff94 	bl	80277da <__cxa_guard_acquire>
 80228b2:	b138      	cbz	r0, 80228c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80228b4:	4620      	mov	r0, r4
 80228b6:	f004 ff9c 	bl	80277f2 <__cxa_guard_release>
 80228ba:	4a0f      	ldr	r2, [pc, #60]	; (80228f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80228bc:	490f      	ldr	r1, [pc, #60]	; (80228fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80228be:	4810      	ldr	r0, [pc, #64]	; (8022900 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80228c0:	f004 ff84 	bl	80277cc <__aeabi_atexit>
 80228c4:	4c0f      	ldr	r4, [pc, #60]	; (8022904 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80228c6:	7823      	ldrb	r3, [r4, #0]
 80228c8:	f3bf 8f5b 	dmb	ish
 80228cc:	07db      	lsls	r3, r3, #31
 80228ce:	d40b      	bmi.n	80228e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80228d0:	4620      	mov	r0, r4
 80228d2:	f004 ff82 	bl	80277da <__cxa_guard_acquire>
 80228d6:	b138      	cbz	r0, 80228e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80228d8:	4620      	mov	r0, r4
 80228da:	f004 ff8a 	bl	80277f2 <__cxa_guard_release>
 80228de:	4a06      	ldr	r2, [pc, #24]	; (80228f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80228e0:	4909      	ldr	r1, [pc, #36]	; (8022908 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 80228e2:	480a      	ldr	r0, [pc, #40]	; (802290c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80228e4:	f004 ff72 	bl	80277cc <__aeabi_atexit>
 80228e8:	4b05      	ldr	r3, [pc, #20]	; (8022900 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80228ea:	632b      	str	r3, [r5, #48]	; 0x30
 80228ec:	4b07      	ldr	r3, [pc, #28]	; (802290c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80228ee:	636b      	str	r3, [r5, #52]	; 0x34
 80228f0:	bd38      	pop	{r3, r4, r5, pc}
 80228f2:	bf00      	nop
 80228f4:	24025dc4 	.word	0x24025dc4
 80228f8:	24000000 	.word	0x24000000
 80228fc:	0802126b 	.word	0x0802126b
 8022900:	2400009c 	.word	0x2400009c
 8022904:	24025dc8 	.word	0x24025dc8
 8022908:	08021269 	.word	0x08021269
 802290c:	240000a0 	.word	0x240000a0

08022910 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8022910:	b538      	push	{r3, r4, r5, lr}
 8022912:	4c15      	ldr	r4, [pc, #84]	; (8022968 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8022914:	4605      	mov	r5, r0
 8022916:	7823      	ldrb	r3, [r4, #0]
 8022918:	f3bf 8f5b 	dmb	ish
 802291c:	07da      	lsls	r2, r3, #31
 802291e:	d40b      	bmi.n	8022938 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022920:	4620      	mov	r0, r4
 8022922:	f004 ff5a 	bl	80277da <__cxa_guard_acquire>
 8022926:	b138      	cbz	r0, 8022938 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022928:	4620      	mov	r0, r4
 802292a:	f004 ff62 	bl	80277f2 <__cxa_guard_release>
 802292e:	4a0f      	ldr	r2, [pc, #60]	; (802296c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022930:	490f      	ldr	r1, [pc, #60]	; (8022970 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8022932:	4810      	ldr	r0, [pc, #64]	; (8022974 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8022934:	f004 ff4a 	bl	80277cc <__aeabi_atexit>
 8022938:	4c0f      	ldr	r4, [pc, #60]	; (8022978 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802293a:	7823      	ldrb	r3, [r4, #0]
 802293c:	f3bf 8f5b 	dmb	ish
 8022940:	07db      	lsls	r3, r3, #31
 8022942:	d40b      	bmi.n	802295c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8022944:	4620      	mov	r0, r4
 8022946:	f004 ff48 	bl	80277da <__cxa_guard_acquire>
 802294a:	b138      	cbz	r0, 802295c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802294c:	4620      	mov	r0, r4
 802294e:	f004 ff50 	bl	80277f2 <__cxa_guard_release>
 8022952:	4a06      	ldr	r2, [pc, #24]	; (802296c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022954:	4909      	ldr	r1, [pc, #36]	; (802297c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8022956:	480a      	ldr	r0, [pc, #40]	; (8022980 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022958:	f004 ff38 	bl	80277cc <__aeabi_atexit>
 802295c:	4b05      	ldr	r3, [pc, #20]	; (8022974 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802295e:	62ab      	str	r3, [r5, #40]	; 0x28
 8022960:	4b07      	ldr	r3, [pc, #28]	; (8022980 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022962:	62eb      	str	r3, [r5, #44]	; 0x2c
 8022964:	bd38      	pop	{r3, r4, r5, pc}
 8022966:	bf00      	nop
 8022968:	24025d9c 	.word	0x24025d9c
 802296c:	24000000 	.word	0x24000000
 8022970:	0802126f 	.word	0x0802126f
 8022974:	24000074 	.word	0x24000074
 8022978:	24025da0 	.word	0x24025da0
 802297c:	0802126d 	.word	0x0802126d
 8022980:	24000078 	.word	0x24000078

08022984 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8022984:	b510      	push	{r4, lr}
 8022986:	4604      	mov	r4, r0
 8022988:	f7ff ff88 	bl	802289c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 802298c:	4620      	mov	r0, r4
 802298e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022992:	f7ff bfbd 	b.w	8022910 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08022998 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022998:	b538      	push	{r3, r4, r5, lr}
 802299a:	4c15      	ldr	r4, [pc, #84]	; (80229f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802299c:	4605      	mov	r5, r0
 802299e:	7823      	ldrb	r3, [r4, #0]
 80229a0:	f3bf 8f5b 	dmb	ish
 80229a4:	07da      	lsls	r2, r3, #31
 80229a6:	d40b      	bmi.n	80229c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80229a8:	4620      	mov	r0, r4
 80229aa:	f004 ff16 	bl	80277da <__cxa_guard_acquire>
 80229ae:	b138      	cbz	r0, 80229c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80229b0:	4620      	mov	r0, r4
 80229b2:	f004 ff1e 	bl	80277f2 <__cxa_guard_release>
 80229b6:	4a0f      	ldr	r2, [pc, #60]	; (80229f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80229b8:	490f      	ldr	r1, [pc, #60]	; (80229f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80229ba:	4810      	ldr	r0, [pc, #64]	; (80229fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80229bc:	f004 ff06 	bl	80277cc <__aeabi_atexit>
 80229c0:	4c0f      	ldr	r4, [pc, #60]	; (8022a00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80229c2:	7823      	ldrb	r3, [r4, #0]
 80229c4:	f3bf 8f5b 	dmb	ish
 80229c8:	07db      	lsls	r3, r3, #31
 80229ca:	d40b      	bmi.n	80229e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80229cc:	4620      	mov	r0, r4
 80229ce:	f004 ff04 	bl	80277da <__cxa_guard_acquire>
 80229d2:	b138      	cbz	r0, 80229e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80229d4:	4620      	mov	r0, r4
 80229d6:	f004 ff0c 	bl	80277f2 <__cxa_guard_release>
 80229da:	4a06      	ldr	r2, [pc, #24]	; (80229f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80229dc:	4909      	ldr	r1, [pc, #36]	; (8022a04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80229de:	480a      	ldr	r0, [pc, #40]	; (8022a08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80229e0:	f004 fef4 	bl	80277cc <__aeabi_atexit>
 80229e4:	4b05      	ldr	r3, [pc, #20]	; (80229fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80229e6:	642b      	str	r3, [r5, #64]	; 0x40
 80229e8:	4b07      	ldr	r3, [pc, #28]	; (8022a08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80229ea:	646b      	str	r3, [r5, #68]	; 0x44
 80229ec:	bd38      	pop	{r3, r4, r5, pc}
 80229ee:	bf00      	nop
 80229f0:	24025dcc 	.word	0x24025dcc
 80229f4:	24000000 	.word	0x24000000
 80229f8:	08021263 	.word	0x08021263
 80229fc:	240000a4 	.word	0x240000a4
 8022a00:	24025dd0 	.word	0x24025dd0
 8022a04:	08021261 	.word	0x08021261
 8022a08:	240000a8 	.word	0x240000a8

08022a0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022a0c:	b538      	push	{r3, r4, r5, lr}
 8022a0e:	4c15      	ldr	r4, [pc, #84]	; (8022a64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8022a10:	4605      	mov	r5, r0
 8022a12:	7823      	ldrb	r3, [r4, #0]
 8022a14:	f3bf 8f5b 	dmb	ish
 8022a18:	07da      	lsls	r2, r3, #31
 8022a1a:	d40b      	bmi.n	8022a34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022a1c:	4620      	mov	r0, r4
 8022a1e:	f004 fedc 	bl	80277da <__cxa_guard_acquire>
 8022a22:	b138      	cbz	r0, 8022a34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022a24:	4620      	mov	r0, r4
 8022a26:	f004 fee4 	bl	80277f2 <__cxa_guard_release>
 8022a2a:	4a0f      	ldr	r2, [pc, #60]	; (8022a68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022a2c:	490f      	ldr	r1, [pc, #60]	; (8022a6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8022a2e:	4810      	ldr	r0, [pc, #64]	; (8022a70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022a30:	f004 fecc 	bl	80277cc <__aeabi_atexit>
 8022a34:	4c0f      	ldr	r4, [pc, #60]	; (8022a74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8022a36:	7823      	ldrb	r3, [r4, #0]
 8022a38:	f3bf 8f5b 	dmb	ish
 8022a3c:	07db      	lsls	r3, r3, #31
 8022a3e:	d40b      	bmi.n	8022a58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022a40:	4620      	mov	r0, r4
 8022a42:	f004 feca 	bl	80277da <__cxa_guard_acquire>
 8022a46:	b138      	cbz	r0, 8022a58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022a48:	4620      	mov	r0, r4
 8022a4a:	f004 fed2 	bl	80277f2 <__cxa_guard_release>
 8022a4e:	4a06      	ldr	r2, [pc, #24]	; (8022a68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022a50:	4909      	ldr	r1, [pc, #36]	; (8022a78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8022a52:	480a      	ldr	r0, [pc, #40]	; (8022a7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022a54:	f004 feba 	bl	80277cc <__aeabi_atexit>
 8022a58:	4b05      	ldr	r3, [pc, #20]	; (8022a70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022a5a:	63ab      	str	r3, [r5, #56]	; 0x38
 8022a5c:	4b07      	ldr	r3, [pc, #28]	; (8022a7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022a5e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022a60:	bd38      	pop	{r3, r4, r5, pc}
 8022a62:	bf00      	nop
 8022a64:	24025dac 	.word	0x24025dac
 8022a68:	24000000 	.word	0x24000000
 8022a6c:	08021267 	.word	0x08021267
 8022a70:	24000084 	.word	0x24000084
 8022a74:	24025db0 	.word	0x24025db0
 8022a78:	08021265 	.word	0x08021265
 8022a7c:	24000088 	.word	0x24000088

08022a80 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8022a80:	b510      	push	{r4, lr}
 8022a82:	4604      	mov	r4, r0
 8022a84:	f7ff ff88 	bl	8022998 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022a88:	4620      	mov	r0, r4
 8022a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a8e:	f7ff bfbd 	b.w	8022a0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08022a94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8022a94:	b538      	push	{r3, r4, r5, lr}
 8022a96:	4c15      	ldr	r4, [pc, #84]	; (8022aec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022a98:	4605      	mov	r5, r0
 8022a9a:	7823      	ldrb	r3, [r4, #0]
 8022a9c:	f3bf 8f5b 	dmb	ish
 8022aa0:	07da      	lsls	r2, r3, #31
 8022aa2:	d40b      	bmi.n	8022abc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022aa4:	4620      	mov	r0, r4
 8022aa6:	f004 fe98 	bl	80277da <__cxa_guard_acquire>
 8022aaa:	b138      	cbz	r0, 8022abc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022aac:	4620      	mov	r0, r4
 8022aae:	f004 fea0 	bl	80277f2 <__cxa_guard_release>
 8022ab2:	4a0f      	ldr	r2, [pc, #60]	; (8022af0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022ab4:	490f      	ldr	r1, [pc, #60]	; (8022af4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8022ab6:	4810      	ldr	r0, [pc, #64]	; (8022af8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022ab8:	f004 fe88 	bl	80277cc <__aeabi_atexit>
 8022abc:	4c0f      	ldr	r4, [pc, #60]	; (8022afc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022abe:	7823      	ldrb	r3, [r4, #0]
 8022ac0:	f3bf 8f5b 	dmb	ish
 8022ac4:	07db      	lsls	r3, r3, #31
 8022ac6:	d40b      	bmi.n	8022ae0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022ac8:	4620      	mov	r0, r4
 8022aca:	f004 fe86 	bl	80277da <__cxa_guard_acquire>
 8022ace:	b138      	cbz	r0, 8022ae0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022ad0:	4620      	mov	r0, r4
 8022ad2:	f004 fe8e 	bl	80277f2 <__cxa_guard_release>
 8022ad6:	4a06      	ldr	r2, [pc, #24]	; (8022af0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022ad8:	4909      	ldr	r1, [pc, #36]	; (8022b00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022ada:	480a      	ldr	r0, [pc, #40]	; (8022b04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022adc:	f004 fe76 	bl	80277cc <__aeabi_atexit>
 8022ae0:	4b05      	ldr	r3, [pc, #20]	; (8022af8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022ae2:	652b      	str	r3, [r5, #80]	; 0x50
 8022ae4:	4b07      	ldr	r3, [pc, #28]	; (8022b04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022ae6:	656b      	str	r3, [r5, #84]	; 0x54
 8022ae8:	bd38      	pop	{r3, r4, r5, pc}
 8022aea:	bf00      	nop
 8022aec:	24025da4 	.word	0x24025da4
 8022af0:	24000000 	.word	0x24000000
 8022af4:	0802125b 	.word	0x0802125b
 8022af8:	2400007c 	.word	0x2400007c
 8022afc:	24025da8 	.word	0x24025da8
 8022b00:	08021259 	.word	0x08021259
 8022b04:	24000080 	.word	0x24000080

08022b08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022b08:	b538      	push	{r3, r4, r5, lr}
 8022b0a:	4c15      	ldr	r4, [pc, #84]	; (8022b60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022b0c:	4605      	mov	r5, r0
 8022b0e:	7823      	ldrb	r3, [r4, #0]
 8022b10:	f3bf 8f5b 	dmb	ish
 8022b14:	07da      	lsls	r2, r3, #31
 8022b16:	d40b      	bmi.n	8022b30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022b18:	4620      	mov	r0, r4
 8022b1a:	f004 fe5e 	bl	80277da <__cxa_guard_acquire>
 8022b1e:	b138      	cbz	r0, 8022b30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022b20:	4620      	mov	r0, r4
 8022b22:	f004 fe66 	bl	80277f2 <__cxa_guard_release>
 8022b26:	4a0f      	ldr	r2, [pc, #60]	; (8022b64 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022b28:	490f      	ldr	r1, [pc, #60]	; (8022b68 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022b2a:	4810      	ldr	r0, [pc, #64]	; (8022b6c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022b2c:	f004 fe4e 	bl	80277cc <__aeabi_atexit>
 8022b30:	4c0f      	ldr	r4, [pc, #60]	; (8022b70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022b32:	7823      	ldrb	r3, [r4, #0]
 8022b34:	f3bf 8f5b 	dmb	ish
 8022b38:	07db      	lsls	r3, r3, #31
 8022b3a:	d40b      	bmi.n	8022b54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022b3c:	4620      	mov	r0, r4
 8022b3e:	f004 fe4c 	bl	80277da <__cxa_guard_acquire>
 8022b42:	b138      	cbz	r0, 8022b54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022b44:	4620      	mov	r0, r4
 8022b46:	f004 fe54 	bl	80277f2 <__cxa_guard_release>
 8022b4a:	4a06      	ldr	r2, [pc, #24]	; (8022b64 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022b4c:	4909      	ldr	r1, [pc, #36]	; (8022b74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022b4e:	480a      	ldr	r0, [pc, #40]	; (8022b78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022b50:	f004 fe3c 	bl	80277cc <__aeabi_atexit>
 8022b54:	4b05      	ldr	r3, [pc, #20]	; (8022b6c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022b56:	64ab      	str	r3, [r5, #72]	; 0x48
 8022b58:	4b07      	ldr	r3, [pc, #28]	; (8022b78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022b5a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022b5c:	bd38      	pop	{r3, r4, r5, pc}
 8022b5e:	bf00      	nop
 8022b60:	24025d94 	.word	0x24025d94
 8022b64:	24000000 	.word	0x24000000
 8022b68:	0802125f 	.word	0x0802125f
 8022b6c:	2400006c 	.word	0x2400006c
 8022b70:	24025d98 	.word	0x24025d98
 8022b74:	0802125d 	.word	0x0802125d
 8022b78:	24000070 	.word	0x24000070

08022b7c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8022b7c:	b510      	push	{r4, lr}
 8022b7e:	4604      	mov	r4, r0
 8022b80:	f7ff ff88 	bl	8022a94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022b84:	4620      	mov	r0, r4
 8022b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b8a:	f7ff bfbd 	b.w	8022b08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08022b8e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8022b8e:	b510      	push	{r4, lr}
 8022b90:	4604      	mov	r4, r0
 8022b92:	f7ff fff3 	bl	8022b7c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8022b96:	4620      	mov	r0, r4
 8022b98:	f7ff ff72 	bl	8022a80 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8022b9c:	4620      	mov	r0, r4
 8022b9e:	f7ff fe73 	bl	8022888 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8022ba2:	4620      	mov	r0, r4
 8022ba4:	f7ff fdf2 	bl	802278c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8022ba8:	4620      	mov	r0, r4
 8022baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022bae:	f7ff bee9 	b.w	8022984 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08022bb2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8022bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bb6:	b087      	sub	sp, #28
 8022bb8:	788d      	ldrb	r5, [r1, #2]
 8022bba:	f891 9000 	ldrb.w	r9, [r1]
 8022bbe:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8022bc2:	9501      	str	r5, [sp, #4]
 8022bc4:	784d      	ldrb	r5, [r1, #1]
 8022bc6:	9203      	str	r2, [sp, #12]
 8022bc8:	9502      	str	r5, [sp, #8]
 8022bca:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8022bce:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8022bd2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8022bd6:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8022bda:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8022bde:	fb06 0708 	mla	r7, r6, r8, r0
 8022be2:	2e00      	cmp	r6, #0
 8022be4:	eb02 0a07 	add.w	sl, r2, r7
 8022be8:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8022bec:	9d01      	ldr	r5, [sp, #4]
 8022bee:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8022bf2:	ea45 0509 	orr.w	r5, r5, r9
 8022bf6:	9505      	str	r5, [sp, #20]
 8022bf8:	f2c0 80b2 	blt.w	8022d60 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8022bfc:	45b3      	cmp	fp, r6
 8022bfe:	f340 80af 	ble.w	8022d60 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8022c02:	2800      	cmp	r0, #0
 8022c04:	f2c0 80aa 	blt.w	8022d5c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8022c08:	4580      	cmp	r8, r0
 8022c0a:	f340 80a7 	ble.w	8022d5c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8022c0e:	9a03      	ldr	r2, [sp, #12]
 8022c10:	5dd7      	ldrb	r7, [r2, r7]
 8022c12:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022c16:	441f      	add	r7, r3
 8022c18:	1c42      	adds	r2, r0, #1
 8022c1a:	f100 80a4 	bmi.w	8022d66 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022c1e:	4590      	cmp	r8, r2
 8022c20:	f340 80a1 	ble.w	8022d66 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022c24:	2c00      	cmp	r4, #0
 8022c26:	f000 809e 	beq.w	8022d66 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022c2a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8022c2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022c32:	441d      	add	r5, r3
 8022c34:	3601      	adds	r6, #1
 8022c36:	f100 809a 	bmi.w	8022d6e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022c3a:	45b3      	cmp	fp, r6
 8022c3c:	f340 8097 	ble.w	8022d6e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022c40:	f1bc 0f00 	cmp.w	ip, #0
 8022c44:	f000 8093 	beq.w	8022d6e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022c48:	2800      	cmp	r0, #0
 8022c4a:	f2c0 808e 	blt.w	8022d6a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8022c4e:	4580      	cmp	r8, r0
 8022c50:	f340 808b 	ble.w	8022d6a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8022c54:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8022c58:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022c5c:	441e      	add	r6, r3
 8022c5e:	3001      	adds	r0, #1
 8022c60:	f100 8088 	bmi.w	8022d74 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8022c64:	4580      	cmp	r8, r0
 8022c66:	f340 8085 	ble.w	8022d74 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8022c6a:	2c00      	cmp	r4, #0
 8022c6c:	f000 8082 	beq.w	8022d74 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8022c70:	44d0      	add	r8, sl
 8022c72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022c76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c7a:	4413      	add	r3, r2
 8022c7c:	b2a4      	uxth	r4, r4
 8022c7e:	f895 a000 	ldrb.w	sl, [r5]
 8022c82:	fa1f fc8c 	uxth.w	ip, ip
 8022c86:	fb04 fb0c 	mul.w	fp, r4, ip
 8022c8a:	0124      	lsls	r4, r4, #4
 8022c8c:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8022c90:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8022c94:	eba4 040b 	sub.w	r4, r4, fp
 8022c98:	fa1f f08c 	uxth.w	r0, ip
 8022c9c:	b2a2      	uxth	r2, r4
 8022c9e:	783c      	ldrb	r4, [r7, #0]
 8022ca0:	eba8 0800 	sub.w	r8, r8, r0
 8022ca4:	fa1f fc8e 	uxth.w	ip, lr
 8022ca8:	fb02 fa0a 	mul.w	sl, r2, sl
 8022cac:	ea6f 0e0e 	mvn.w	lr, lr
 8022cb0:	fa1f f888 	uxth.w	r8, r8
 8022cb4:	fa5f fe8e 	uxtb.w	lr, lr
 8022cb8:	fb08 aa04 	mla	sl, r8, r4, sl
 8022cbc:	7834      	ldrb	r4, [r6, #0]
 8022cbe:	fb19 f90e 	smulbb	r9, r9, lr
 8022cc2:	fb00 aa04 	mla	sl, r0, r4, sl
 8022cc6:	781c      	ldrb	r4, [r3, #0]
 8022cc8:	fb0b a404 	mla	r4, fp, r4, sl
 8022ccc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022cd0:	fb04 990c 	mla	r9, r4, ip, r9
 8022cd4:	fa1f f989 	uxth.w	r9, r9
 8022cd8:	f109 0401 	add.w	r4, r9, #1
 8022cdc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022ce0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022ce4:	f881 9000 	strb.w	r9, [r1]
 8022ce8:	f895 9001 	ldrb.w	r9, [r5, #1]
 8022cec:	787c      	ldrb	r4, [r7, #1]
 8022cee:	fb02 f909 	mul.w	r9, r2, r9
 8022cf2:	fb08 9904 	mla	r9, r8, r4, r9
 8022cf6:	7874      	ldrb	r4, [r6, #1]
 8022cf8:	fb00 9904 	mla	r9, r0, r4, r9
 8022cfc:	785c      	ldrb	r4, [r3, #1]
 8022cfe:	fb0b 9404 	mla	r4, fp, r4, r9
 8022d02:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8022d06:	9c02      	ldr	r4, [sp, #8]
 8022d08:	fb14 f90e 	smulbb	r9, r4, lr
 8022d0c:	fb0a 940c 	mla	r4, sl, ip, r9
 8022d10:	b2a4      	uxth	r4, r4
 8022d12:	f104 0901 	add.w	r9, r4, #1
 8022d16:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8022d1a:	1224      	asrs	r4, r4, #8
 8022d1c:	704c      	strb	r4, [r1, #1]
 8022d1e:	78ad      	ldrb	r5, [r5, #2]
 8022d20:	78bc      	ldrb	r4, [r7, #2]
 8022d22:	436a      	muls	r2, r5
 8022d24:	789b      	ldrb	r3, [r3, #2]
 8022d26:	fb08 2204 	mla	r2, r8, r4, r2
 8022d2a:	78b4      	ldrb	r4, [r6, #2]
 8022d2c:	fb00 2004 	mla	r0, r0, r4, r2
 8022d30:	fb0b 0b03 	mla	fp, fp, r3, r0
 8022d34:	9b01      	ldr	r3, [sp, #4]
 8022d36:	fb13 fe0e 	smulbb	lr, r3, lr
 8022d3a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8022d3e:	fb0b ec0c 	mla	ip, fp, ip, lr
 8022d42:	fa1f fc8c 	uxth.w	ip, ip
 8022d46:	f10c 0e01 	add.w	lr, ip, #1
 8022d4a:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8022d4e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022d52:	f881 c002 	strb.w	ip, [r1, #2]
 8022d56:	b007      	add	sp, #28
 8022d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d5c:	af05      	add	r7, sp, #20
 8022d5e:	e75b      	b.n	8022c18 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8022d60:	ad05      	add	r5, sp, #20
 8022d62:	462f      	mov	r7, r5
 8022d64:	e766      	b.n	8022c34 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8022d66:	ad05      	add	r5, sp, #20
 8022d68:	e764      	b.n	8022c34 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8022d6a:	ae05      	add	r6, sp, #20
 8022d6c:	e777      	b.n	8022c5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8022d6e:	ab05      	add	r3, sp, #20
 8022d70:	461e      	mov	r6, r3
 8022d72:	e783      	b.n	8022c7c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8022d74:	ab05      	add	r3, sp, #20
 8022d76:	e781      	b.n	8022c7c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08022d78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d7c:	b093      	sub	sp, #76	; 0x4c
 8022d7e:	9210      	str	r2, [sp, #64]	; 0x40
 8022d80:	9309      	str	r3, [sp, #36]	; 0x24
 8022d82:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022d84:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8022d88:	9011      	str	r0, [sp, #68]	; 0x44
 8022d8a:	930e      	str	r3, [sp, #56]	; 0x38
 8022d8c:	6850      	ldr	r0, [r2, #4]
 8022d8e:	910d      	str	r1, [sp, #52]	; 0x34
 8022d90:	6812      	ldr	r2, [r2, #0]
 8022d92:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022d96:	fb00 1303 	mla	r3, r0, r3, r1
 8022d9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d9e:	18d3      	adds	r3, r2, r3
 8022da0:	930a      	str	r3, [sp, #40]	; 0x28
 8022da2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022da4:	681b      	ldr	r3, [r3, #0]
 8022da6:	930c      	str	r3, [sp, #48]	; 0x30
 8022da8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022daa:	685c      	ldr	r4, [r3, #4]
 8022dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022dae:	3404      	adds	r4, #4
 8022db0:	43db      	mvns	r3, r3
 8022db2:	b2db      	uxtb	r3, r3
 8022db4:	930b      	str	r3, [sp, #44]	; 0x2c
 8022db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	dc03      	bgt.n	8022dc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022dbe:	2b00      	cmp	r3, #0
 8022dc0:	f340 8250 	ble.w	8023264 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8022dc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022dc6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022dca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022dce:	1e48      	subs	r0, r1, #1
 8022dd0:	1e55      	subs	r5, r2, #1
 8022dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	f340 80ee 	ble.w	8022fb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8022dda:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8022ddc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022dde:	1436      	asrs	r6, r6, #16
 8022de0:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022de4:	d406      	bmi.n	8022df4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022de6:	4286      	cmp	r6, r0
 8022de8:	da04      	bge.n	8022df4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022dea:	2b00      	cmp	r3, #0
 8022dec:	db02      	blt.n	8022df4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022dee:	42ab      	cmp	r3, r5
 8022df0:	f2c0 80e2 	blt.w	8022fb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022df4:	3601      	adds	r6, #1
 8022df6:	f100 80cf 	bmi.w	8022f98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022dfa:	42b1      	cmp	r1, r6
 8022dfc:	f2c0 80cc 	blt.w	8022f98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022e00:	3301      	adds	r3, #1
 8022e02:	f100 80c9 	bmi.w	8022f98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022e06:	429a      	cmp	r2, r3
 8022e08:	f2c0 80c6 	blt.w	8022f98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022e0c:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8022e10:	f1bb 0f00 	cmp.w	fp, #0
 8022e14:	f340 80f1 	ble.w	8022ffa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8022e18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022e1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022e1c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8022e1e:	141d      	asrs	r5, r3, #16
 8022e20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022e22:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022e26:	68c7      	ldr	r7, [r0, #12]
 8022e28:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022e2a:	1418      	asrs	r0, r3, #16
 8022e2c:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8022e30:	6892      	ldr	r2, [r2, #8]
 8022e32:	f100 8137 	bmi.w	80230a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022e36:	f102 3cff 	add.w	ip, r2, #4294967295
 8022e3a:	4560      	cmp	r0, ip
 8022e3c:	f280 8132 	bge.w	80230a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022e40:	2d00      	cmp	r5, #0
 8022e42:	f2c0 812f 	blt.w	80230a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022e46:	f107 3cff 	add.w	ip, r7, #4294967295
 8022e4a:	4565      	cmp	r5, ip
 8022e4c:	f280 812a 	bge.w	80230a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022e50:	b212      	sxth	r2, r2
 8022e52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022e54:	fb05 0002 	mla	r0, r5, r2, r0
 8022e58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022e5a:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022e5e:	4405      	add	r5, r0
 8022e60:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022e64:	eb04 0e0c 	add.w	lr, r4, ip
 8022e68:	f1b8 0f00 	cmp.w	r8, #0
 8022e6c:	f000 810c 	beq.w	8023088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8022e70:	786f      	ldrb	r7, [r5, #1]
 8022e72:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022e76:	4427      	add	r7, r4
 8022e78:	2900      	cmp	r1, #0
 8022e7a:	f000 810d 	beq.w	8023098 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8022e7e:	18a8      	adds	r0, r5, r2
 8022e80:	5caa      	ldrb	r2, [r5, r2]
 8022e82:	7840      	ldrb	r0, [r0, #1]
 8022e84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022e88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022e8c:	4422      	add	r2, r4
 8022e8e:	4420      	add	r0, r4
 8022e90:	fa1f f388 	uxth.w	r3, r8
 8022e94:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8022e98:	b289      	uxth	r1, r1
 8022e9a:	f897 c000 	ldrb.w	ip, [r7]
 8022e9e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8022ea2:	fb03 f901 	mul.w	r9, r3, r1
 8022ea6:	011b      	lsls	r3, r3, #4
 8022ea8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022eac:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8022eb0:	eba3 0309 	sub.w	r3, r3, r9
 8022eb4:	b289      	uxth	r1, r1
 8022eb6:	b29b      	uxth	r3, r3
 8022eb8:	eba8 0801 	sub.w	r8, r8, r1
 8022ebc:	fb03 fc0c 	mul.w	ip, r3, ip
 8022ec0:	fa1f f888 	uxth.w	r8, r8
 8022ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8022ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022ec8:	fb08 cc0a 	mla	ip, r8, sl, ip
 8022ecc:	f892 a000 	ldrb.w	sl, [r2]
 8022ed0:	fb01 cc0a 	mla	ip, r1, sl, ip
 8022ed4:	f890 a000 	ldrb.w	sl, [r0]
 8022ed8:	fb09 cc0a 	mla	ip, r9, sl, ip
 8022edc:	f896 a000 	ldrb.w	sl, [r6]
 8022ee0:	fb1a fa03 	smulbb	sl, sl, r3
 8022ee4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022eea:	fb0c ac05 	mla	ip, ip, r5, sl
 8022eee:	fa1f fc8c 	uxth.w	ip, ip
 8022ef2:	f10c 0a01 	add.w	sl, ip, #1
 8022ef6:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8022efa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022efe:	f886 a000 	strb.w	sl, [r6]
 8022f02:	f897 c001 	ldrb.w	ip, [r7, #1]
 8022f06:	f89e a001 	ldrb.w	sl, [lr, #1]
 8022f0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8022f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022f10:	fb08 cc0a 	mla	ip, r8, sl, ip
 8022f14:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022f18:	fb01 cc0a 	mla	ip, r1, sl, ip
 8022f1c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022f20:	fb09 cc0a 	mla	ip, r9, sl, ip
 8022f24:	f896 a001 	ldrb.w	sl, [r6, #1]
 8022f28:	fb1a fa03 	smulbb	sl, sl, r3
 8022f2c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022f32:	fb0c ac05 	mla	ip, ip, r5, sl
 8022f36:	fa1f fc8c 	uxth.w	ip, ip
 8022f3a:	f10c 0a01 	add.w	sl, ip, #1
 8022f3e:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8022f42:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022f46:	f886 c001 	strb.w	ip, [r6, #1]
 8022f4a:	78bf      	ldrb	r7, [r7, #2]
 8022f4c:	f89e c002 	ldrb.w	ip, [lr, #2]
 8022f50:	437b      	muls	r3, r7
 8022f52:	fb08 330c 	mla	r3, r8, ip, r3
 8022f56:	f892 c002 	ldrb.w	ip, [r2, #2]
 8022f5a:	7882      	ldrb	r2, [r0, #2]
 8022f5c:	fb01 310c 	mla	r1, r1, ip, r3
 8022f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022f62:	fb09 1902 	mla	r9, r9, r2, r1
 8022f66:	78b1      	ldrb	r1, [r6, #2]
 8022f68:	fb11 f103 	smulbb	r1, r1, r3
 8022f6c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022f70:	fb09 1505 	mla	r5, r9, r5, r1
 8022f74:	b2ad      	uxth	r5, r5
 8022f76:	1c6b      	adds	r3, r5, #1
 8022f78:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022f7c:	122d      	asrs	r5, r5, #8
 8022f7e:	70b5      	strb	r5, [r6, #2]
 8022f80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022f82:	3603      	adds	r6, #3
 8022f84:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022f86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f8a:	4413      	add	r3, r2
 8022f8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022f8e:	931d      	str	r3, [sp, #116]	; 0x74
 8022f90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022f92:	4413      	add	r3, r2
 8022f94:	931e      	str	r3, [sp, #120]	; 0x78
 8022f96:	e73b      	b.n	8022e10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022f98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022f9a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8022f9c:	4433      	add	r3, r6
 8022f9e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8022fa0:	931d      	str	r3, [sp, #116]	; 0x74
 8022fa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022fa4:	4433      	add	r3, r6
 8022fa6:	931e      	str	r3, [sp, #120]	; 0x78
 8022fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022faa:	3b01      	subs	r3, #1
 8022fac:	9309      	str	r3, [sp, #36]	; 0x24
 8022fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fb0:	3303      	adds	r3, #3
 8022fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8022fb4:	e70d      	b.n	8022dd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022fb6:	d028      	beq.n	802300a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8022fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fba:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022fbc:	3b01      	subs	r3, #1
 8022fbe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022fc0:	fb00 5003 	mla	r0, r0, r3, r5
 8022fc4:	1400      	asrs	r0, r0, #16
 8022fc6:	f53f af21 	bmi.w	8022e0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022fca:	3901      	subs	r1, #1
 8022fcc:	4288      	cmp	r0, r1
 8022fce:	f6bf af1d 	bge.w	8022e0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022fd2:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022fd4:	981e      	ldr	r0, [sp, #120]	; 0x78
 8022fd6:	fb01 0303 	mla	r3, r1, r3, r0
 8022fda:	141b      	asrs	r3, r3, #16
 8022fdc:	f53f af16 	bmi.w	8022e0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022fe0:	3a01      	subs	r2, #1
 8022fe2:	4293      	cmp	r3, r2
 8022fe4:	f6bf af12 	bge.w	8022e0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fea:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8022fee:	1cdf      	adds	r7, r3, #3
 8022ff0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8022ff4:	f1b9 0f00 	cmp.w	r9, #0
 8022ff8:	dc73      	bgt.n	80230e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8022ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022ffe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023002:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023006:	441a      	add	r2, r3
 8023008:	920a      	str	r2, [sp, #40]	; 0x28
 802300a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802300c:	2b00      	cmp	r3, #0
 802300e:	f340 8129 	ble.w	8023264 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8023012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023016:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023018:	ee30 0a04 	vadd.f32	s0, s0, s8
 802301c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023020:	eef0 6a62 	vmov.f32	s13, s5
 8023024:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023028:	ee31 1a05 	vadd.f32	s2, s2, s10
 802302c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023030:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8023034:	eef0 6a43 	vmov.f32	s13, s6
 8023038:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802303c:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8023040:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023044:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023048:	ee77 2a62 	vsub.f32	s5, s14, s5
 802304c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023050:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023054:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023058:	ee12 2a90 	vmov	r2, s5
 802305c:	eef0 2a47 	vmov.f32	s5, s14
 8023060:	fb92 f3f3 	sdiv	r3, r2, r3
 8023064:	ee13 2a10 	vmov	r2, s6
 8023068:	931f      	str	r3, [sp, #124]	; 0x7c
 802306a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802306c:	eeb0 3a67 	vmov.f32	s6, s15
 8023070:	fb92 f3f3 	sdiv	r3, r2, r3
 8023074:	9320      	str	r3, [sp, #128]	; 0x80
 8023076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023078:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802307a:	3b01      	subs	r3, #1
 802307c:	930d      	str	r3, [sp, #52]	; 0x34
 802307e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023080:	bf08      	it	eq
 8023082:	4613      	moveq	r3, r2
 8023084:	9309      	str	r3, [sp, #36]	; 0x24
 8023086:	e696      	b.n	8022db6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023088:	b149      	cbz	r1, 802309e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802308a:	5caa      	ldrb	r2, [r5, r2]
 802308c:	4670      	mov	r0, lr
 802308e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023092:	4422      	add	r2, r4
 8023094:	4677      	mov	r7, lr
 8023096:	e6fb      	b.n	8022e90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023098:	4670      	mov	r0, lr
 802309a:	4672      	mov	r2, lr
 802309c:	e6f8      	b.n	8022e90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802309e:	4670      	mov	r0, lr
 80230a0:	4672      	mov	r2, lr
 80230a2:	e7f7      	b.n	8023094 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80230a4:	f110 0c01 	adds.w	ip, r0, #1
 80230a8:	f53f af6a 	bmi.w	8022f80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80230ac:	4562      	cmp	r2, ip
 80230ae:	f6ff af67 	blt.w	8022f80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80230b2:	f115 0c01 	adds.w	ip, r5, #1
 80230b6:	f53f af63 	bmi.w	8022f80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80230ba:	4567      	cmp	r7, ip
 80230bc:	f6ff af60 	blt.w	8022f80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80230c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80230c2:	b23f      	sxth	r7, r7
 80230c4:	b212      	sxth	r2, r2
 80230c6:	9002      	str	r0, [sp, #8]
 80230c8:	9701      	str	r7, [sp, #4]
 80230ca:	9200      	str	r2, [sp, #0]
 80230cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80230ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80230d0:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80230d4:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80230d8:	4623      	mov	r3, r4
 80230da:	4631      	mov	r1, r6
 80230dc:	f7ff fd69 	bl	8022bb2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80230e0:	e74e      	b.n	8022f80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80230e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80230e4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80230e6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80230ea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80230ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80230ee:	1400      	asrs	r0, r0, #16
 80230f0:	142d      	asrs	r5, r5, #16
 80230f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80230f4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80230f8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80230fc:	fb02 5000 	mla	r0, r2, r0, r5
 8023100:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023102:	f815 e000 	ldrb.w	lr, [r5, r0]
 8023106:	eb05 0c00 	add.w	ip, r5, r0
 802310a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802310e:	eb04 060e 	add.w	r6, r4, lr
 8023112:	2b00      	cmp	r3, #0
 8023114:	f000 8097 	beq.w	8023246 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8023118:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802311c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023120:	4425      	add	r5, r4
 8023122:	2900      	cmp	r1, #0
 8023124:	f000 8098 	beq.w	8023258 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8023128:	eb0c 0002 	add.w	r0, ip, r2
 802312c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023130:	7840      	ldrb	r0, [r0, #1]
 8023132:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023136:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802313a:	4422      	add	r2, r4
 802313c:	4420      	add	r0, r4
 802313e:	b29b      	uxth	r3, r3
 8023140:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8023144:	b289      	uxth	r1, r1
 8023146:	f895 e000 	ldrb.w	lr, [r5]
 802314a:	3703      	adds	r7, #3
 802314c:	f109 39ff 	add.w	r9, r9, #4294967295
 8023150:	fb03 f801 	mul.w	r8, r3, r1
 8023154:	011b      	lsls	r3, r3, #4
 8023156:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 802315a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802315e:	eba3 0308 	sub.w	r3, r3, r8
 8023162:	b289      	uxth	r1, r1
 8023164:	b29b      	uxth	r3, r3
 8023166:	ebac 0c01 	sub.w	ip, ip, r1
 802316a:	fb03 fe0e 	mul.w	lr, r3, lr
 802316e:	fa1f fc8c 	uxth.w	ip, ip
 8023172:	930f      	str	r3, [sp, #60]	; 0x3c
 8023174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023176:	fb0c ee0b 	mla	lr, ip, fp, lr
 802317a:	f892 b000 	ldrb.w	fp, [r2]
 802317e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023182:	f890 b000 	ldrb.w	fp, [r0]
 8023186:	fb08 ee0b 	mla	lr, r8, fp, lr
 802318a:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 802318e:	fb1b fb03 	smulbb	fp, fp, r3
 8023192:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8023196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023198:	fb0e be0a 	mla	lr, lr, sl, fp
 802319c:	fa1f fe8e 	uxth.w	lr, lr
 80231a0:	f10e 0b01 	add.w	fp, lr, #1
 80231a4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80231a8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80231ac:	f807 ec06 	strb.w	lr, [r7, #-6]
 80231b0:	f895 e001 	ldrb.w	lr, [r5, #1]
 80231b4:	f896 b001 	ldrb.w	fp, [r6, #1]
 80231b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80231bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80231be:	fb0c ee0b 	mla	lr, ip, fp, lr
 80231c2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80231c6:	fb01 ee0b 	mla	lr, r1, fp, lr
 80231ca:	f890 b001 	ldrb.w	fp, [r0, #1]
 80231ce:	fb08 ee0b 	mla	lr, r8, fp, lr
 80231d2:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80231d6:	fb1b fb03 	smulbb	fp, fp, r3
 80231da:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80231de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80231e0:	fb0e be0a 	mla	lr, lr, sl, fp
 80231e4:	fa1f fe8e 	uxth.w	lr, lr
 80231e8:	f10e 0b01 	add.w	fp, lr, #1
 80231ec:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80231f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80231f4:	f807 ec05 	strb.w	lr, [r7, #-5]
 80231f8:	78ad      	ldrb	r5, [r5, #2]
 80231fa:	78b6      	ldrb	r6, [r6, #2]
 80231fc:	436b      	muls	r3, r5
 80231fe:	7895      	ldrb	r5, [r2, #2]
 8023200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023202:	fb0c 3306 	mla	r3, ip, r6, r3
 8023206:	fb01 3305 	mla	r3, r1, r5, r3
 802320a:	7885      	ldrb	r5, [r0, #2]
 802320c:	fb08 3805 	mla	r8, r8, r5, r3
 8023210:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8023214:	fb13 f302 	smulbb	r3, r3, r2
 8023218:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802321c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802321e:	fb08 380a 	mla	r8, r8, sl, r3
 8023222:	fa1f f888 	uxth.w	r8, r8
 8023226:	f108 0301 	add.w	r3, r8, #1
 802322a:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 802322e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023230:	4413      	add	r3, r2
 8023232:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023234:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023238:	931d      	str	r3, [sp, #116]	; 0x74
 802323a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802323c:	f807 8c04 	strb.w	r8, [r7, #-4]
 8023240:	4413      	add	r3, r2
 8023242:	931e      	str	r3, [sp, #120]	; 0x78
 8023244:	e6d6      	b.n	8022ff4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023246:	b151      	cbz	r1, 802325e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8023248:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802324c:	4630      	mov	r0, r6
 802324e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023252:	4422      	add	r2, r4
 8023254:	4635      	mov	r5, r6
 8023256:	e772      	b.n	802313e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023258:	4630      	mov	r0, r6
 802325a:	4632      	mov	r2, r6
 802325c:	e76f      	b.n	802313e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802325e:	4630      	mov	r0, r6
 8023260:	4632      	mov	r2, r6
 8023262:	e7f7      	b.n	8023254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023264:	b013      	add	sp, #76	; 0x4c
 8023266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802326a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 802326a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802326e:	784c      	ldrb	r4, [r1, #1]
 8023270:	f891 a002 	ldrb.w	sl, [r1, #2]
 8023274:	0224      	lsls	r4, r4, #8
 8023276:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 802327a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802327e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8023282:	f891 a000 	ldrb.w	sl, [r1]
 8023286:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 802328a:	ea44 040a 	orr.w	r4, r4, sl
 802328e:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8023292:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8023296:	9401      	str	r4, [sp, #4]
 8023298:	fb05 c70e 	mla	r7, r5, lr, ip
 802329c:	2d00      	cmp	r5, #0
 802329e:	eb02 0807 	add.w	r8, r2, r7
 80232a2:	db72      	blt.n	802338a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80232a4:	45a9      	cmp	r9, r5
 80232a6:	dd70      	ble.n	802338a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80232a8:	f1bc 0f00 	cmp.w	ip, #0
 80232ac:	db6b      	blt.n	8023386 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80232ae:	45e6      	cmp	lr, ip
 80232b0:	dd69      	ble.n	8023386 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80232b2:	5dd7      	ldrb	r7, [r2, r7]
 80232b4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80232b8:	441f      	add	r7, r3
 80232ba:	f11c 0201 	adds.w	r2, ip, #1
 80232be:	d467      	bmi.n	8023390 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80232c0:	4596      	cmp	lr, r2
 80232c2:	dd65      	ble.n	8023390 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80232c4:	2800      	cmp	r0, #0
 80232c6:	d063      	beq.n	8023390 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80232c8:	f898 4001 	ldrb.w	r4, [r8, #1]
 80232cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80232d0:	441c      	add	r4, r3
 80232d2:	3501      	adds	r5, #1
 80232d4:	d460      	bmi.n	8023398 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80232d6:	45a9      	cmp	r9, r5
 80232d8:	dd5e      	ble.n	8023398 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80232da:	2e00      	cmp	r6, #0
 80232dc:	d05c      	beq.n	8023398 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80232de:	f1bc 0f00 	cmp.w	ip, #0
 80232e2:	db57      	blt.n	8023394 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80232e4:	45e6      	cmp	lr, ip
 80232e6:	dd55      	ble.n	8023394 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80232e8:	f818 500e 	ldrb.w	r5, [r8, lr]
 80232ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80232f0:	441d      	add	r5, r3
 80232f2:	f11c 0201 	adds.w	r2, ip, #1
 80232f6:	d452      	bmi.n	802339e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80232f8:	4596      	cmp	lr, r2
 80232fa:	dd50      	ble.n	802339e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80232fc:	2800      	cmp	r0, #0
 80232fe:	d04e      	beq.n	802339e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023300:	44c6      	add	lr, r8
 8023302:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023306:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802330a:	4413      	add	r3, r2
 802330c:	b280      	uxth	r0, r0
 802330e:	f897 8000 	ldrb.w	r8, [r7]
 8023312:	b2b2      	uxth	r2, r6
 8023314:	fb00 f602 	mul.w	r6, r0, r2
 8023318:	0100      	lsls	r0, r0, #4
 802331a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802331e:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8023322:	1b80      	subs	r0, r0, r6
 8023324:	fa1f fc82 	uxth.w	ip, r2
 8023328:	b282      	uxth	r2, r0
 802332a:	7820      	ldrb	r0, [r4, #0]
 802332c:	ebae 0e0c 	sub.w	lr, lr, ip
 8023330:	4350      	muls	r0, r2
 8023332:	fa1f fe8e 	uxth.w	lr, lr
 8023336:	fb0e 0808 	mla	r8, lr, r8, r0
 802333a:	7828      	ldrb	r0, [r5, #0]
 802333c:	fb0c 8800 	mla	r8, ip, r0, r8
 8023340:	7818      	ldrb	r0, [r3, #0]
 8023342:	fb06 8000 	mla	r0, r6, r0, r8
 8023346:	1200      	asrs	r0, r0, #8
 8023348:	7008      	strb	r0, [r1, #0]
 802334a:	7860      	ldrb	r0, [r4, #1]
 802334c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023350:	4350      	muls	r0, r2
 8023352:	fb0e 0808 	mla	r8, lr, r8, r0
 8023356:	7868      	ldrb	r0, [r5, #1]
 8023358:	fb0c 8800 	mla	r8, ip, r0, r8
 802335c:	7858      	ldrb	r0, [r3, #1]
 802335e:	fb06 8000 	mla	r0, r6, r0, r8
 8023362:	1200      	asrs	r0, r0, #8
 8023364:	7048      	strb	r0, [r1, #1]
 8023366:	78a0      	ldrb	r0, [r4, #2]
 8023368:	78bf      	ldrb	r7, [r7, #2]
 802336a:	4350      	muls	r0, r2
 802336c:	78aa      	ldrb	r2, [r5, #2]
 802336e:	fb0e 0007 	mla	r0, lr, r7, r0
 8023372:	fb0c 0c02 	mla	ip, ip, r2, r0
 8023376:	789a      	ldrb	r2, [r3, #2]
 8023378:	fb06 c202 	mla	r2, r6, r2, ip
 802337c:	1212      	asrs	r2, r2, #8
 802337e:	708a      	strb	r2, [r1, #2]
 8023380:	b002      	add	sp, #8
 8023382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023386:	af01      	add	r7, sp, #4
 8023388:	e797      	b.n	80232ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 802338a:	ac01      	add	r4, sp, #4
 802338c:	4627      	mov	r7, r4
 802338e:	e7a0      	b.n	80232d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8023390:	ac01      	add	r4, sp, #4
 8023392:	e79e      	b.n	80232d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8023394:	ad01      	add	r5, sp, #4
 8023396:	e7ac      	b.n	80232f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8023398:	ab01      	add	r3, sp, #4
 802339a:	461d      	mov	r5, r3
 802339c:	e7b6      	b.n	802330c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 802339e:	ab01      	add	r3, sp, #4
 80233a0:	e7b4      	b.n	802330c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080233a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80233a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233a6:	b08d      	sub	sp, #52	; 0x34
 80233a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80233ac:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80233b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80233b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80233b4:	9306      	str	r3, [sp, #24]
 80233b6:	6850      	ldr	r0, [r2, #4]
 80233b8:	6812      	ldr	r2, [r2, #0]
 80233ba:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80233bc:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 80233c0:	fb00 1303 	mla	r3, r0, r3, r1
 80233c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80233c8:	18d3      	adds	r3, r2, r3
 80233ca:	9307      	str	r3, [sp, #28]
 80233cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	9308      	str	r3, [sp, #32]
 80233d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80233d4:	685d      	ldr	r5, [r3, #4]
 80233d6:	3504      	adds	r5, #4
 80233d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233da:	2b00      	cmp	r3, #0
 80233dc:	dc03      	bgt.n	80233e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80233de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	f340 81e6 	ble.w	80237b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80233e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80233e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80233ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80233f0:	1e48      	subs	r0, r1, #1
 80233f2:	1e56      	subs	r6, r2, #1
 80233f4:	9b06      	ldr	r3, [sp, #24]
 80233f6:	2b00      	cmp	r3, #0
 80233f8:	f340 80bd 	ble.w	8023576 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80233fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80233fe:	1427      	asrs	r7, r4, #16
 8023400:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023404:	d406      	bmi.n	8023414 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023406:	4287      	cmp	r7, r0
 8023408:	da04      	bge.n	8023414 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802340a:	2b00      	cmp	r3, #0
 802340c:	db02      	blt.n	8023414 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802340e:	42b3      	cmp	r3, r6
 8023410:	f2c0 80b2 	blt.w	8023578 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8023414:	3701      	adds	r7, #1
 8023416:	f100 80a1 	bmi.w	802355c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802341a:	42b9      	cmp	r1, r7
 802341c:	f2c0 809e 	blt.w	802355c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023420:	3301      	adds	r3, #1
 8023422:	f100 809b 	bmi.w	802355c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023426:	429a      	cmp	r2, r3
 8023428:	f2c0 8098 	blt.w	802355c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802342c:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8023430:	f1bb 0f00 	cmp.w	fp, #0
 8023434:	f340 80bf 	ble.w	80235b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023438:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802343a:	981e      	ldr	r0, [sp, #120]	; 0x78
 802343c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802343e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023442:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8023446:	1420      	asrs	r0, r4, #16
 8023448:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802344a:	ea4f 4723 	mov.w	r7, r3, asr #16
 802344e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8023452:	6892      	ldr	r2, [r2, #8]
 8023454:	f100 8103 	bmi.w	802365e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023458:	f102 3eff 	add.w	lr, r2, #4294967295
 802345c:	4570      	cmp	r0, lr
 802345e:	f280 80fe 	bge.w	802365e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023462:	2f00      	cmp	r7, #0
 8023464:	f2c0 80fb 	blt.w	802365e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023468:	f10c 3eff 	add.w	lr, ip, #4294967295
 802346c:	4577      	cmp	r7, lr
 802346e:	f280 80f6 	bge.w	802365e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023472:	b212      	sxth	r2, r2
 8023474:	fb07 0002 	mla	r0, r7, r2, r0
 8023478:	9f08      	ldr	r7, [sp, #32]
 802347a:	f817 8000 	ldrb.w	r8, [r7, r0]
 802347e:	eb07 0e00 	add.w	lr, r7, r0
 8023482:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023486:	eb05 0c08 	add.w	ip, r5, r8
 802348a:	2b00      	cmp	r3, #0
 802348c:	f000 80d8 	beq.w	8023640 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8023490:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8023494:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023498:	442f      	add	r7, r5
 802349a:	2900      	cmp	r1, #0
 802349c:	f000 80d9 	beq.w	8023652 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80234a0:	eb0e 0002 	add.w	r0, lr, r2
 80234a4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80234a8:	7840      	ldrb	r0, [r0, #1]
 80234aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80234ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80234b2:	442a      	add	r2, r5
 80234b4:	4428      	add	r0, r5
 80234b6:	b29b      	uxth	r3, r3
 80234b8:	f815 a008 	ldrb.w	sl, [r5, r8]
 80234bc:	b289      	uxth	r1, r1
 80234be:	f897 8000 	ldrb.w	r8, [r7]
 80234c2:	fb03 f901 	mul.w	r9, r3, r1
 80234c6:	011b      	lsls	r3, r3, #4
 80234c8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80234cc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80234d0:	eba3 0309 	sub.w	r3, r3, r9
 80234d4:	b289      	uxth	r1, r1
 80234d6:	b29b      	uxth	r3, r3
 80234d8:	ebae 0e01 	sub.w	lr, lr, r1
 80234dc:	fb03 f808 	mul.w	r8, r3, r8
 80234e0:	fa1f fe8e 	uxth.w	lr, lr
 80234e4:	fb0e 880a 	mla	r8, lr, sl, r8
 80234e8:	f892 a000 	ldrb.w	sl, [r2]
 80234ec:	fb01 880a 	mla	r8, r1, sl, r8
 80234f0:	f890 a000 	ldrb.w	sl, [r0]
 80234f4:	fb09 880a 	mla	r8, r9, sl, r8
 80234f8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80234fc:	f886 8000 	strb.w	r8, [r6]
 8023500:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023504:	f89c a001 	ldrb.w	sl, [ip, #1]
 8023508:	fb03 f808 	mul.w	r8, r3, r8
 802350c:	fb0e 880a 	mla	r8, lr, sl, r8
 8023510:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023514:	fb01 880a 	mla	r8, r1, sl, r8
 8023518:	f890 a001 	ldrb.w	sl, [r0, #1]
 802351c:	fb09 880a 	mla	r8, r9, sl, r8
 8023520:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023524:	f886 8001 	strb.w	r8, [r6, #1]
 8023528:	78bf      	ldrb	r7, [r7, #2]
 802352a:	f89c c002 	ldrb.w	ip, [ip, #2]
 802352e:	437b      	muls	r3, r7
 8023530:	7892      	ldrb	r2, [r2, #2]
 8023532:	fb0e 330c 	mla	r3, lr, ip, r3
 8023536:	fb01 3102 	mla	r1, r1, r2, r3
 802353a:	7882      	ldrb	r2, [r0, #2]
 802353c:	fb09 1902 	mla	r9, r9, r2, r1
 8023540:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023544:	f886 9002 	strb.w	r9, [r6, #2]
 8023548:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802354a:	3603      	adds	r6, #3
 802354c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802354e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023552:	441c      	add	r4, r3
 8023554:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023556:	4413      	add	r3, r2
 8023558:	9318      	str	r3, [sp, #96]	; 0x60
 802355a:	e769      	b.n	8023430 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802355c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802355e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8023560:	441c      	add	r4, r3
 8023562:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023564:	443b      	add	r3, r7
 8023566:	9318      	str	r3, [sp, #96]	; 0x60
 8023568:	9b06      	ldr	r3, [sp, #24]
 802356a:	3b01      	subs	r3, #1
 802356c:	9306      	str	r3, [sp, #24]
 802356e:	9b07      	ldr	r3, [sp, #28]
 8023570:	3303      	adds	r3, #3
 8023572:	9307      	str	r3, [sp, #28]
 8023574:	e73e      	b.n	80233f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023576:	d026      	beq.n	80235c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023578:	9b06      	ldr	r3, [sp, #24]
 802357a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802357c:	3b01      	subs	r3, #1
 802357e:	fb00 4003 	mla	r0, r0, r3, r4
 8023582:	1400      	asrs	r0, r0, #16
 8023584:	f53f af52 	bmi.w	802342c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023588:	3901      	subs	r1, #1
 802358a:	4288      	cmp	r0, r1
 802358c:	f6bf af4e 	bge.w	802342c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023590:	991a      	ldr	r1, [sp, #104]	; 0x68
 8023592:	9818      	ldr	r0, [sp, #96]	; 0x60
 8023594:	fb01 0303 	mla	r3, r1, r3, r0
 8023598:	141b      	asrs	r3, r3, #16
 802359a:	f53f af47 	bmi.w	802342c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802359e:	3a01      	subs	r2, #1
 80235a0:	4293      	cmp	r3, r2
 80235a2:	f6bf af43 	bge.w	802342c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80235a6:	9b07      	ldr	r3, [sp, #28]
 80235a8:	f8dd a018 	ldr.w	sl, [sp, #24]
 80235ac:	f103 0803 	add.w	r8, r3, #3
 80235b0:	f1ba 0f00 	cmp.w	sl, #0
 80235b4:	dc71      	bgt.n	802369a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80235b6:	9b06      	ldr	r3, [sp, #24]
 80235b8:	9a07      	ldr	r2, [sp, #28]
 80235ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80235be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235c2:	441a      	add	r2, r3
 80235c4:	9207      	str	r2, [sp, #28]
 80235c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235c8:	2b00      	cmp	r3, #0
 80235ca:	f340 80f2 	ble.w	80237b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80235ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80235d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80235d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80235d8:	eeb0 6a62 	vmov.f32	s12, s5
 80235dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80235e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80235e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80235e8:	ee16 4a10 	vmov	r4, s12
 80235ec:	eeb0 6a43 	vmov.f32	s12, s6
 80235f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80235f4:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 80235f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80235fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023600:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023604:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023608:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802360c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023610:	ee12 2a90 	vmov	r2, s5
 8023614:	eef0 2a47 	vmov.f32	s5, s14
 8023618:	fb92 f3f3 	sdiv	r3, r2, r3
 802361c:	ee13 2a10 	vmov	r2, s6
 8023620:	9319      	str	r3, [sp, #100]	; 0x64
 8023622:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023624:	eeb0 3a67 	vmov.f32	s6, s15
 8023628:	fb92 f3f3 	sdiv	r3, r2, r3
 802362c:	931a      	str	r3, [sp, #104]	; 0x68
 802362e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023632:	3b01      	subs	r3, #1
 8023634:	9309      	str	r3, [sp, #36]	; 0x24
 8023636:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023638:	bf08      	it	eq
 802363a:	4613      	moveq	r3, r2
 802363c:	9306      	str	r3, [sp, #24]
 802363e:	e6cb      	b.n	80233d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8023640:	b151      	cbz	r1, 8023658 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8023642:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023646:	4660      	mov	r0, ip
 8023648:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802364c:	442a      	add	r2, r5
 802364e:	4667      	mov	r7, ip
 8023650:	e731      	b.n	80234b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8023652:	4660      	mov	r0, ip
 8023654:	4662      	mov	r2, ip
 8023656:	e72e      	b.n	80234b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8023658:	4660      	mov	r0, ip
 802365a:	4662      	mov	r2, ip
 802365c:	e7f7      	b.n	802364e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802365e:	f110 0e01 	adds.w	lr, r0, #1
 8023662:	f53f af71 	bmi.w	8023548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023666:	4572      	cmp	r2, lr
 8023668:	f6ff af6e 	blt.w	8023548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802366c:	f117 0e01 	adds.w	lr, r7, #1
 8023670:	f53f af6a 	bmi.w	8023548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023674:	45f4      	cmp	ip, lr
 8023676:	f6ff af67 	blt.w	8023548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802367a:	b212      	sxth	r2, r2
 802367c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023680:	fa0f f38c 	sxth.w	r3, ip
 8023684:	9200      	str	r2, [sp, #0]
 8023686:	4631      	mov	r1, r6
 8023688:	9a08      	ldr	r2, [sp, #32]
 802368a:	9301      	str	r3, [sp, #4]
 802368c:	462b      	mov	r3, r5
 802368e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8023692:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023694:	f7ff fde9 	bl	802326a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8023698:	e756      	b.n	8023548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802369a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802369c:	1426      	asrs	r6, r4, #16
 802369e:	9818      	ldr	r0, [sp, #96]	; 0x60
 80236a0:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80236a4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80236a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80236aa:	1400      	asrs	r0, r0, #16
 80236ac:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80236b0:	fb02 6000 	mla	r0, r2, r0, r6
 80236b4:	9e08      	ldr	r6, [sp, #32]
 80236b6:	f816 e000 	ldrb.w	lr, [r6, r0]
 80236ba:	eb06 0c00 	add.w	ip, r6, r0
 80236be:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80236c2:	eb05 070e 	add.w	r7, r5, lr
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	d064      	beq.n	8023794 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80236ca:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80236ce:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80236d2:	442e      	add	r6, r5
 80236d4:	2900      	cmp	r1, #0
 80236d6:	d066      	beq.n	80237a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80236d8:	eb0c 0002 	add.w	r0, ip, r2
 80236dc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80236e0:	7840      	ldrb	r0, [r0, #1]
 80236e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80236e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80236ea:	442a      	add	r2, r5
 80236ec:	4428      	add	r0, r5
 80236ee:	b29b      	uxth	r3, r3
 80236f0:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80236f4:	b289      	uxth	r1, r1
 80236f6:	f896 e000 	ldrb.w	lr, [r6]
 80236fa:	f108 0803 	add.w	r8, r8, #3
 80236fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023702:	fb03 f901 	mul.w	r9, r3, r1
 8023706:	011b      	lsls	r3, r3, #4
 8023708:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802370c:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8023710:	eba3 0309 	sub.w	r3, r3, r9
 8023714:	b289      	uxth	r1, r1
 8023716:	b29b      	uxth	r3, r3
 8023718:	ebac 0c01 	sub.w	ip, ip, r1
 802371c:	fb03 fe0e 	mul.w	lr, r3, lr
 8023720:	fa1f fc8c 	uxth.w	ip, ip
 8023724:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023728:	f892 b000 	ldrb.w	fp, [r2]
 802372c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023730:	f890 b000 	ldrb.w	fp, [r0]
 8023734:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023738:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802373c:	f808 ec06 	strb.w	lr, [r8, #-6]
 8023740:	f896 e001 	ldrb.w	lr, [r6, #1]
 8023744:	f897 b001 	ldrb.w	fp, [r7, #1]
 8023748:	fb03 fe0e 	mul.w	lr, r3, lr
 802374c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023750:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023754:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023758:	f890 b001 	ldrb.w	fp, [r0, #1]
 802375c:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023760:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023764:	f808 ec05 	strb.w	lr, [r8, #-5]
 8023768:	78b6      	ldrb	r6, [r6, #2]
 802376a:	78bf      	ldrb	r7, [r7, #2]
 802376c:	4373      	muls	r3, r6
 802376e:	7896      	ldrb	r6, [r2, #2]
 8023770:	7882      	ldrb	r2, [r0, #2]
 8023772:	fb0c 3307 	mla	r3, ip, r7, r3
 8023776:	fb01 3306 	mla	r3, r1, r6, r3
 802377a:	fb09 3902 	mla	r9, r9, r2, r3
 802377e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023780:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023782:	441c      	add	r4, r3
 8023784:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023786:	ea4f 2929 	mov.w	r9, r9, asr #8
 802378a:	4413      	add	r3, r2
 802378c:	f808 9c04 	strb.w	r9, [r8, #-4]
 8023790:	9318      	str	r3, [sp, #96]	; 0x60
 8023792:	e70d      	b.n	80235b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023794:	b151      	cbz	r1, 80237ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8023796:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802379a:	4638      	mov	r0, r7
 802379c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80237a0:	442a      	add	r2, r5
 80237a2:	463e      	mov	r6, r7
 80237a4:	e7a3      	b.n	80236ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80237a6:	4638      	mov	r0, r7
 80237a8:	463a      	mov	r2, r7
 80237aa:	e7a0      	b.n	80236ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80237ac:	4638      	mov	r0, r7
 80237ae:	463a      	mov	r2, r7
 80237b0:	e7f7      	b.n	80237a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80237b2:	b00d      	add	sp, #52	; 0x34
 80237b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080237b8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80237b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237bc:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80237c0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80237c4:	2d00      	cmp	r5, #0
 80237c6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80237ca:	fb05 700c 	mla	r0, r5, ip, r7
 80237ce:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80237d2:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 80237d6:	eb02 0800 	add.w	r8, r2, r0
 80237da:	f2c0 8118 	blt.w	8023a0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80237de:	45a9      	cmp	r9, r5
 80237e0:	f340 8115 	ble.w	8023a0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80237e4:	2f00      	cmp	r7, #0
 80237e6:	f2c0 8110 	blt.w	8023a0a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80237ea:	45bc      	cmp	ip, r7
 80237ec:	f340 810d 	ble.w	8023a0a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80237f0:	5c12      	ldrb	r2, [r2, r0]
 80237f2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80237f6:	1c7a      	adds	r2, r7, #1
 80237f8:	f100 810c 	bmi.w	8023a14 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 80237fc:	4594      	cmp	ip, r2
 80237fe:	f340 8109 	ble.w	8023a14 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8023802:	2c00      	cmp	r4, #0
 8023804:	f000 8108 	beq.w	8023a18 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8023808:	f898 2001 	ldrb.w	r2, [r8, #1]
 802380c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023810:	3501      	adds	r5, #1
 8023812:	f100 8105 	bmi.w	8023a20 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8023816:	45a9      	cmp	r9, r5
 8023818:	f340 8102 	ble.w	8023a20 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802381c:	f1be 0f00 	cmp.w	lr, #0
 8023820:	f000 8101 	beq.w	8023a26 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8023824:	2f00      	cmp	r7, #0
 8023826:	f2c0 80f9 	blt.w	8023a1c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 802382a:	45bc      	cmp	ip, r7
 802382c:	f340 80f6 	ble.w	8023a1c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8023830:	f818 200c 	ldrb.w	r2, [r8, ip]
 8023834:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023838:	3701      	adds	r7, #1
 802383a:	f100 80f7 	bmi.w	8023a2c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 802383e:	45bc      	cmp	ip, r7
 8023840:	f340 80f4 	ble.w	8023a2c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8023844:	2c00      	cmp	r4, #0
 8023846:	f000 80f3 	beq.w	8023a30 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 802384a:	44c4      	add	ip, r8
 802384c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8023850:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023854:	fa1f fc84 	uxth.w	ip, r4
 8023858:	fa1f f48e 	uxth.w	r4, lr
 802385c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023860:	fb04 fe0c 	mul.w	lr, r4, ip
 8023864:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8023868:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802386c:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8023870:	ebac 070e 	sub.w	r7, ip, lr
 8023874:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8023878:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802387c:	b2a4      	uxth	r4, r4
 802387e:	b2bf      	uxth	r7, r7
 8023880:	1b1b      	subs	r3, r3, r4
 8023882:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023886:	fb07 fc0a 	mul.w	ip, r7, sl
 802388a:	b29b      	uxth	r3, r3
 802388c:	fb03 cc0b 	mla	ip, r3, fp, ip
 8023890:	9300      	str	r3, [sp, #0]
 8023892:	fb04 cc09 	mla	ip, r4, r9, ip
 8023896:	fb0e cc08 	mla	ip, lr, r8, ip
 802389a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802389e:	9301      	str	r3, [sp, #4]
 80238a0:	2b00      	cmp	r3, #0
 80238a2:	f000 80af 	beq.w	8023a04 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80238a6:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80238aa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238ae:	fb0b fc0c 	mul.w	ip, fp, ip
 80238b2:	fb0b f606 	mul.w	r6, fp, r6
 80238b6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80238ba:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80238be:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80238c2:	44dc      	add	ip, fp
 80238c4:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80238c8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80238cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238d0:	fb0a fb0b 	mul.w	fp, sl, fp
 80238d4:	fb0a fa00 	mul.w	sl, sl, r0
 80238d8:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80238dc:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80238e0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80238e4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80238e8:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80238ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80238f0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80238f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80238f8:	0a36      	lsrs	r6, r6, #8
 80238fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80238fe:	44dc      	add	ip, fp
 8023900:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023904:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023908:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802390c:	fb09 fb0b 	mul.w	fp, r9, fp
 8023910:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023914:	fb09 f905 	mul.w	r9, r9, r5
 8023918:	ea4f 201b 	mov.w	r0, fp, lsr #8
 802391c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023920:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8023924:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023928:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802392c:	fb0c fc07 	mul.w	ip, ip, r7
 8023930:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8023934:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8023938:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802393c:	4458      	add	r0, fp
 802393e:	fb08 f505 	mul.w	r5, r8, r5
 8023942:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023946:	fb08 f802 	mul.w	r8, r8, r2
 802394a:	0a00      	lsrs	r0, r0, #8
 802394c:	0a2a      	lsrs	r2, r5, #8
 802394e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8023952:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023956:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802395a:	4415      	add	r5, r2
 802395c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023960:	0a2d      	lsrs	r5, r5, #8
 8023962:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023966:	9a00      	ldr	r2, [sp, #0]
 8023968:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802396c:	fb03 cc02 	mla	ip, r3, r2, ip
 8023970:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023974:	9b01      	ldr	r3, [sp, #4]
 8023976:	fb05 c50e 	mla	r5, r5, lr, ip
 802397a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802397e:	fb00 5004 	mla	r0, r0, r4, r5
 8023982:	0a00      	lsrs	r0, r0, #8
 8023984:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8023988:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 802398c:	4378      	muls	r0, r7
 802398e:	fb02 0006 	mla	r0, r2, r6, r0
 8023992:	fb0e 0e08 	mla	lr, lr, r8, r0
 8023996:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 802399a:	fb04 e000 	mla	r0, r4, r0, lr
 802399e:	0a00      	lsrs	r0, r0, #8
 80239a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80239a4:	4328      	orrs	r0, r5
 80239a6:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80239aa:	b2ad      	uxth	r5, r5
 80239ac:	b2c4      	uxtb	r4, r0
 80239ae:	436b      	muls	r3, r5
 80239b0:	fb14 f405 	smulbb	r4, r4, r5
 80239b4:	1c5a      	adds	r2, r3, #1
 80239b6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80239ba:	780b      	ldrb	r3, [r1, #0]
 80239bc:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80239c0:	b2d2      	uxtb	r2, r2
 80239c2:	fb03 4302 	mla	r3, r3, r2, r4
 80239c6:	b29b      	uxth	r3, r3
 80239c8:	1c5c      	adds	r4, r3, #1
 80239ca:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80239ce:	784c      	ldrb	r4, [r1, #1]
 80239d0:	fb14 f402 	smulbb	r4, r4, r2
 80239d4:	121b      	asrs	r3, r3, #8
 80239d6:	700b      	strb	r3, [r1, #0]
 80239d8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80239dc:	fb03 4305 	mla	r3, r3, r5, r4
 80239e0:	b29b      	uxth	r3, r3
 80239e2:	1c5c      	adds	r4, r3, #1
 80239e4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80239e8:	0c04      	lsrs	r4, r0, #16
 80239ea:	7888      	ldrb	r0, [r1, #2]
 80239ec:	121b      	asrs	r3, r3, #8
 80239ee:	fb10 f002 	smulbb	r0, r0, r2
 80239f2:	704b      	strb	r3, [r1, #1]
 80239f4:	fb04 0005 	mla	r0, r4, r5, r0
 80239f8:	b280      	uxth	r0, r0
 80239fa:	1c43      	adds	r3, r0, #1
 80239fc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023a00:	1200      	asrs	r0, r0, #8
 8023a02:	7088      	strb	r0, [r1, #2]
 8023a04:	b003      	add	sp, #12
 8023a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a0a:	2600      	movs	r6, #0
 8023a0c:	e6f3      	b.n	80237f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8023a0e:	2000      	movs	r0, #0
 8023a10:	4606      	mov	r6, r0
 8023a12:	e6fd      	b.n	8023810 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023a14:	2000      	movs	r0, #0
 8023a16:	e6fb      	b.n	8023810 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023a18:	4620      	mov	r0, r4
 8023a1a:	e6f9      	b.n	8023810 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023a1c:	2500      	movs	r5, #0
 8023a1e:	e70b      	b.n	8023838 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8023a20:	2200      	movs	r2, #0
 8023a22:	4615      	mov	r5, r2
 8023a24:	e716      	b.n	8023854 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8023a26:	4672      	mov	r2, lr
 8023a28:	4675      	mov	r5, lr
 8023a2a:	e713      	b.n	8023854 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8023a2c:	2200      	movs	r2, #0
 8023a2e:	e711      	b.n	8023854 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8023a30:	4622      	mov	r2, r4
 8023a32:	e70f      	b.n	8023854 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08023a34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a38:	b09f      	sub	sp, #124	; 0x7c
 8023a3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8023a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8023a3e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023a40:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8023a44:	901d      	str	r0, [sp, #116]	; 0x74
 8023a46:	931c      	str	r3, [sp, #112]	; 0x70
 8023a48:	6850      	ldr	r0, [r2, #4]
 8023a4a:	9119      	str	r1, [sp, #100]	; 0x64
 8023a4c:	6812      	ldr	r2, [r2, #0]
 8023a4e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8023a50:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023a54:	fb00 1303 	mla	r3, r0, r3, r1
 8023a58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023a5c:	18d3      	adds	r3, r2, r3
 8023a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8023a60:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023a62:	681b      	ldr	r3, [r3, #0]
 8023a64:	9312      	str	r3, [sp, #72]	; 0x48
 8023a66:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023a68:	685e      	ldr	r6, [r3, #4]
 8023a6a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8023a6e:	3604      	adds	r6, #4
 8023a70:	930d      	str	r3, [sp, #52]	; 0x34
 8023a72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	dc03      	bgt.n	8023a80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023a78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	f340 8378 	ble.w	8024170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8023a80:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023a82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023a86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023a8a:	1e48      	subs	r0, r1, #1
 8023a8c:	1e57      	subs	r7, r2, #1
 8023a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a90:	2b00      	cmp	r3, #0
 8023a92:	f340 818c 	ble.w	8023dae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023a96:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023a98:	142b      	asrs	r3, r5, #16
 8023a9a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023a9e:	d406      	bmi.n	8023aae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023aa0:	4584      	cmp	ip, r0
 8023aa2:	da04      	bge.n	8023aae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023aa4:	2b00      	cmp	r3, #0
 8023aa6:	db02      	blt.n	8023aae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023aa8:	42bb      	cmp	r3, r7
 8023aaa:	f2c0 8181 	blt.w	8023db0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8023aae:	f11c 0c01 	adds.w	ip, ip, #1
 8023ab2:	f100 816f 	bmi.w	8023d94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023ab6:	4561      	cmp	r1, ip
 8023ab8:	f2c0 816c 	blt.w	8023d94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023abc:	3301      	adds	r3, #1
 8023abe:	f100 8169 	bmi.w	8023d94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023ac2:	429a      	cmp	r2, r3
 8023ac4:	f2c0 8166 	blt.w	8023d94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023aca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023acc:	931a      	str	r3, [sp, #104]	; 0x68
 8023ace:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023ad0:	2b00      	cmp	r3, #0
 8023ad2:	f340 818c 	ble.w	8023dee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8023ad6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023ad8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023adc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023ae0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023ae4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023ae6:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023aea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023aec:	141b      	asrs	r3, r3, #16
 8023aee:	f100 81d0 	bmi.w	8023e92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023af2:	f100 38ff 	add.w	r8, r0, #4294967295
 8023af6:	4543      	cmp	r3, r8
 8023af8:	f280 81cb 	bge.w	8023e92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023afc:	f1bc 0f00 	cmp.w	ip, #0
 8023b00:	f2c0 81c7 	blt.w	8023e92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023b04:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023b08:	45c4      	cmp	ip, r8
 8023b0a:	f280 81c2 	bge.w	8023e92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023b0e:	b200      	sxth	r0, r0
 8023b10:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b12:	fb0c 3300 	mla	r3, ip, r0, r3
 8023b16:	eb04 0803 	add.w	r8, r4, r3
 8023b1a:	5ce3      	ldrb	r3, [r4, r3]
 8023b1c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023b20:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023b24:	2a00      	cmp	r2, #0
 8023b26:	f000 81a9 	beq.w	8023e7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023b2a:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023b2e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023b32:	940e      	str	r4, [sp, #56]	; 0x38
 8023b34:	0e24      	lsrs	r4, r4, #24
 8023b36:	9415      	str	r4, [sp, #84]	; 0x54
 8023b38:	b179      	cbz	r1, 8023b5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023b3a:	eb08 0c00 	add.w	ip, r8, r0
 8023b3e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023b42:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023b46:	900a      	str	r0, [sp, #40]	; 0x28
 8023b48:	0e00      	lsrs	r0, r0, #24
 8023b4a:	9013      	str	r0, [sp, #76]	; 0x4c
 8023b4c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023b50:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023b54:	900f      	str	r0, [sp, #60]	; 0x3c
 8023b56:	0e00      	lsrs	r0, r0, #24
 8023b58:	9016      	str	r0, [sp, #88]	; 0x58
 8023b5a:	b292      	uxth	r2, r2
 8023b5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023b5e:	b289      	uxth	r1, r1
 8023b60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023b62:	fb02 f901 	mul.w	r9, r2, r1
 8023b66:	0112      	lsls	r2, r2, #4
 8023b68:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023b6c:	eba2 0809 	sub.w	r8, r2, r9
 8023b70:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023b74:	b289      	uxth	r1, r1
 8023b76:	fa1f f888 	uxth.w	r8, r8
 8023b7a:	1a52      	subs	r2, r2, r1
 8023b7c:	fb08 f000 	mul.w	r0, r8, r0
 8023b80:	b292      	uxth	r2, r2
 8023b82:	fb02 000e 	mla	r0, r2, lr, r0
 8023b86:	fb01 0004 	mla	r0, r1, r4, r0
 8023b8a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023b8c:	fb09 0004 	mla	r0, r9, r4, r0
 8023b90:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023b94:	2800      	cmp	r0, #0
 8023b96:	f000 80f2 	beq.w	8023d7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023b9a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023b9e:	d01b      	beq.n	8023bd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8023ba0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023ba4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023ba8:	fb0e fa0a 	mul.w	sl, lr, sl
 8023bac:	fb0e fe03 	mul.w	lr, lr, r3
 8023bb0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023bb4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023bb8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023bbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023bc0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023bc4:	4453      	add	r3, sl
 8023bc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023bca:	0a1b      	lsrs	r3, r3, #8
 8023bcc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023bd0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023bd4:	ea43 030c 	orr.w	r3, r3, ip
 8023bd8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023bda:	2cff      	cmp	r4, #255	; 0xff
 8023bdc:	d021      	beq.n	8023c22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023bde:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023be0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023be4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023be6:	fb04 fb0b 	mul.w	fp, r4, fp
 8023bea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023bec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023bf0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023bf2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023bf6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023bfa:	fb04 fa0a 	mul.w	sl, r4, sl
 8023bfe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c02:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c06:	44de      	add	lr, fp
 8023c08:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c18:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c1c:	ea4e 040a 	orr.w	r4, lr, sl
 8023c20:	940e      	str	r4, [sp, #56]	; 0x38
 8023c22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c24:	2cff      	cmp	r4, #255	; 0xff
 8023c26:	d021      	beq.n	8023c6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023c28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023c2a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023c2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c30:	fb04 fb0b 	mul.w	fp, r4, fp
 8023c34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023c36:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023c3a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c3c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c40:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c44:	fb04 fa0a 	mul.w	sl, r4, sl
 8023c48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c4c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c50:	44de      	add	lr, fp
 8023c52:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c56:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c5a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c5e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c66:	ea4e 040a 	orr.w	r4, lr, sl
 8023c6a:	940a      	str	r4, [sp, #40]	; 0x28
 8023c6c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023c6e:	2cff      	cmp	r4, #255	; 0xff
 8023c70:	d021      	beq.n	8023cb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8023c72:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023c74:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023c78:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023c7a:	fb04 fb0b 	mul.w	fp, r4, fp
 8023c7e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023c80:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023c84:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023c86:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c8a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c8e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023c92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c96:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c9a:	44de      	add	lr, fp
 8023c9c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ca0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023ca4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ca8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023cb0:	ea4e 040a 	orr.w	r4, lr, sl
 8023cb4:	940f      	str	r4, [sp, #60]	; 0x3c
 8023cb6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023cb8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023cbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023cc0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023cc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023cc6:	fb08 fc0c 	mul.w	ip, r8, ip
 8023cca:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023cce:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023cd2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023cd4:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023cd8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023cdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023cde:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023ce2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023ce6:	fb08 f80e 	mul.w	r8, r8, lr
 8023cea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cee:	fb02 8303 	mla	r3, r2, r3, r8
 8023cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023cf4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cf8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023cfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023cfe:	fb01 330a 	mla	r3, r1, sl, r3
 8023d02:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023d06:	fb09 3901 	mla	r9, r9, r1, r3
 8023d0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023d0e:	4343      	muls	r3, r0
 8023d10:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023d14:	1c58      	adds	r0, r3, #1
 8023d16:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023d1a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023d1e:	ea4c 0c09 	orr.w	ip, ip, r9
 8023d22:	783b      	ldrb	r3, [r7, #0]
 8023d24:	fa5f f28c 	uxtb.w	r2, ip
 8023d28:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023d2c:	fb12 f201 	smulbb	r2, r2, r1
 8023d30:	b2c0      	uxtb	r0, r0
 8023d32:	fb03 2300 	mla	r3, r3, r0, r2
 8023d36:	b29b      	uxth	r3, r3
 8023d38:	1c5a      	adds	r2, r3, #1
 8023d3a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023d3e:	787a      	ldrb	r2, [r7, #1]
 8023d40:	fb12 f200 	smulbb	r2, r2, r0
 8023d44:	121b      	asrs	r3, r3, #8
 8023d46:	703b      	strb	r3, [r7, #0]
 8023d48:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023d4c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023d50:	fb03 2301 	mla	r3, r3, r1, r2
 8023d54:	b29b      	uxth	r3, r3
 8023d56:	1c5a      	adds	r2, r3, #1
 8023d58:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023d5c:	121b      	asrs	r3, r3, #8
 8023d5e:	707b      	strb	r3, [r7, #1]
 8023d60:	78bb      	ldrb	r3, [r7, #2]
 8023d62:	fb13 f000 	smulbb	r0, r3, r0
 8023d66:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023d6a:	fa1f fc8c 	uxth.w	ip, ip
 8023d6e:	f10c 0301 	add.w	r3, ip, #1
 8023d72:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023d76:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023d7a:	f887 c002 	strb.w	ip, [r7, #2]
 8023d7e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023d80:	3703      	adds	r7, #3
 8023d82:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023d84:	441a      	add	r2, r3
 8023d86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d88:	441d      	add	r5, r3
 8023d8a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023d8c:	9229      	str	r2, [sp, #164]	; 0xa4
 8023d8e:	3b01      	subs	r3, #1
 8023d90:	931a      	str	r3, [sp, #104]	; 0x68
 8023d92:	e69c      	b.n	8023ace <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023d94:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023d96:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023d98:	441c      	add	r4, r3
 8023d9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d9c:	441d      	add	r5, r3
 8023d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023da0:	9429      	str	r4, [sp, #164]	; 0xa4
 8023da2:	3b01      	subs	r3, #1
 8023da4:	9309      	str	r3, [sp, #36]	; 0x24
 8023da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023da8:	3303      	adds	r3, #3
 8023daa:	930c      	str	r3, [sp, #48]	; 0x30
 8023dac:	e66f      	b.n	8023a8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023dae:	d026      	beq.n	8023dfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023db2:	982b      	ldr	r0, [sp, #172]	; 0xac
 8023db4:	3b01      	subs	r3, #1
 8023db6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023db8:	fb00 4003 	mla	r0, r0, r3, r4
 8023dbc:	1400      	asrs	r0, r0, #16
 8023dbe:	f53f ae83 	bmi.w	8023ac8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023dc2:	3901      	subs	r1, #1
 8023dc4:	4288      	cmp	r0, r1
 8023dc6:	f6bf ae7f 	bge.w	8023ac8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023dca:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8023dcc:	fb01 5303 	mla	r3, r1, r3, r5
 8023dd0:	141b      	asrs	r3, r3, #16
 8023dd2:	f53f ae79 	bmi.w	8023ac8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023dd6:	3a01      	subs	r2, #1
 8023dd8:	4293      	cmp	r3, r2
 8023dda:	f6bf ae75 	bge.w	8023ac8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023de0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023de4:	f103 0e03 	add.w	lr, r3, #3
 8023de8:	f1bb 0f00 	cmp.w	fp, #0
 8023dec:	dc71      	bgt.n	8023ed2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023df0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023df6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023dfa:	4423      	add	r3, r4
 8023dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8023dfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023e00:	2b00      	cmp	r3, #0
 8023e02:	f340 81b5 	ble.w	8024170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8023e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023e10:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023e14:	eef0 6a62 	vmov.f32	s13, s5
 8023e18:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023e1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023e20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e24:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023e28:	eef0 6a43 	vmov.f32	s13, s6
 8023e2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e30:	ee16 5a90 	vmov	r5, s13
 8023e34:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023e38:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023e3c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023e40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023e44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023e48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023e4c:	ee12 2a90 	vmov	r2, s5
 8023e50:	eef0 2a47 	vmov.f32	s5, s14
 8023e54:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e58:	ee13 2a10 	vmov	r2, s6
 8023e5c:	932b      	str	r3, [sp, #172]	; 0xac
 8023e5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e60:	eeb0 3a67 	vmov.f32	s6, s15
 8023e64:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e68:	932c      	str	r3, [sp, #176]	; 0xb0
 8023e6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023e6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023e6e:	3b01      	subs	r3, #1
 8023e70:	9319      	str	r3, [sp, #100]	; 0x64
 8023e72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e74:	bf08      	it	eq
 8023e76:	4613      	moveq	r3, r2
 8023e78:	9309      	str	r3, [sp, #36]	; 0x24
 8023e7a:	e5fa      	b.n	8023a72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023e7c:	2900      	cmp	r1, #0
 8023e7e:	f43f ae6c 	beq.w	8023b5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023e82:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023e86:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023e8a:	900a      	str	r0, [sp, #40]	; 0x28
 8023e8c:	0e00      	lsrs	r0, r0, #24
 8023e8e:	9013      	str	r0, [sp, #76]	; 0x4c
 8023e90:	e663      	b.n	8023b5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023e92:	f113 0801 	adds.w	r8, r3, #1
 8023e96:	f53f af72 	bmi.w	8023d7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023e9a:	4540      	cmp	r0, r8
 8023e9c:	f6ff af6f 	blt.w	8023d7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023ea0:	f11c 0801 	adds.w	r8, ip, #1
 8023ea4:	f53f af6b 	bmi.w	8023d7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023ea8:	45c6      	cmp	lr, r8
 8023eaa:	f6ff af68 	blt.w	8023d7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023eae:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8023eb0:	b200      	sxth	r0, r0
 8023eb2:	9302      	str	r3, [sp, #8]
 8023eb4:	fa0f f38e 	sxth.w	r3, lr
 8023eb8:	9000      	str	r0, [sp, #0]
 8023eba:	9301      	str	r3, [sp, #4]
 8023ebc:	4633      	mov	r3, r6
 8023ebe:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023ec0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023ec4:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023ec8:	4639      	mov	r1, r7
 8023eca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023ecc:	f7ff fc74 	bl	80237b8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8023ed0:	e755      	b.n	8023d7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023ed2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023ed4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023ed8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023eda:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023ede:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023ee0:	1427      	asrs	r7, r4, #16
 8023ee2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023ee4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ee8:	142b      	asrs	r3, r5, #16
 8023eea:	fb01 7303 	mla	r3, r1, r3, r7
 8023eee:	18e7      	adds	r7, r4, r3
 8023ef0:	5ce3      	ldrb	r3, [r4, r3]
 8023ef2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023ef6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023efa:	2a00      	cmp	r2, #0
 8023efc:	f000 812e 	beq.w	802415c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8023f00:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023f04:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8023f08:	9410      	str	r4, [sp, #64]	; 0x40
 8023f0a:	0e24      	lsrs	r4, r4, #24
 8023f0c:	9417      	str	r4, [sp, #92]	; 0x5c
 8023f0e:	b170      	cbz	r0, 8023f2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8023f10:	eb07 0801 	add.w	r8, r7, r1
 8023f14:	5c79      	ldrb	r1, [r7, r1]
 8023f16:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8023f1c:	0e09      	lsrs	r1, r1, #24
 8023f1e:	9114      	str	r1, [sp, #80]	; 0x50
 8023f20:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023f24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f28:	9111      	str	r1, [sp, #68]	; 0x44
 8023f2a:	0e09      	lsrs	r1, r1, #24
 8023f2c:	9118      	str	r1, [sp, #96]	; 0x60
 8023f2e:	b292      	uxth	r2, r2
 8023f30:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023f32:	b280      	uxth	r0, r0
 8023f34:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023f36:	fb02 f900 	mul.w	r9, r2, r0
 8023f3a:	0112      	lsls	r2, r2, #4
 8023f3c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023f40:	eba2 0809 	sub.w	r8, r2, r9
 8023f44:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023f48:	b280      	uxth	r0, r0
 8023f4a:	fa1f f888 	uxth.w	r8, r8
 8023f4e:	1a12      	subs	r2, r2, r0
 8023f50:	fb08 f101 	mul.w	r1, r8, r1
 8023f54:	b292      	uxth	r2, r2
 8023f56:	fb02 110c 	mla	r1, r2, ip, r1
 8023f5a:	fb00 1104 	mla	r1, r0, r4, r1
 8023f5e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023f60:	fb09 1104 	mla	r1, r9, r4, r1
 8023f64:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023f68:	2900      	cmp	r1, #0
 8023f6a:	f000 80ec 	beq.w	8024146 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8023f6e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023f72:	d019      	beq.n	8023fa8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8023f74:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023f78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f7c:	fb0c fa0a 	mul.w	sl, ip, sl
 8023f80:	fb0c fc03 	mul.w	ip, ip, r3
 8023f84:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023f88:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023f8c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023f90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f94:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023f98:	4453      	add	r3, sl
 8023f9a:	0a3f      	lsrs	r7, r7, #8
 8023f9c:	0a1b      	lsrs	r3, r3, #8
 8023f9e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023fa2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023fa6:	433b      	orrs	r3, r7
 8023fa8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023faa:	2cff      	cmp	r4, #255	; 0xff
 8023fac:	d020      	beq.n	8023ff0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8023fae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023fb0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023fb4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023fb6:	4367      	muls	r7, r4
 8023fb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023fba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023fbe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023fc2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023fc4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023fc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fcc:	fb04 fa0a 	mul.w	sl, r4, sl
 8023fd0:	44bc      	add	ip, r7
 8023fd2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023fd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023fda:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023fde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fe2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023fe6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023fea:	ea4c 040a 	orr.w	r4, ip, sl
 8023fee:	9410      	str	r4, [sp, #64]	; 0x40
 8023ff0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ff2:	2cff      	cmp	r4, #255	; 0xff
 8023ff4:	d020      	beq.n	8024038 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8023ff6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023ff8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023ffc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ffe:	4367      	muls	r7, r4
 8024000:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024002:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024006:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802400a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802400c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024010:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024014:	fb04 fa0a 	mul.w	sl, r4, sl
 8024018:	44bc      	add	ip, r7
 802401a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802401e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024022:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024026:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802402a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802402e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024032:	ea4c 040a 	orr.w	r4, ip, sl
 8024036:	940b      	str	r4, [sp, #44]	; 0x2c
 8024038:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802403a:	2cff      	cmp	r4, #255	; 0xff
 802403c:	d020      	beq.n	8024080 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 802403e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024040:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024044:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024046:	4367      	muls	r7, r4
 8024048:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802404a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802404e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024052:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024054:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024058:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802405c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024060:	44bc      	add	ip, r7
 8024062:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024066:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802406a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802406e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024072:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024076:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802407a:	ea4c 040a 	orr.w	r4, ip, sl
 802407e:	9411      	str	r4, [sp, #68]	; 0x44
 8024080:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024082:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024086:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802408a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802408e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024090:	fb08 f707 	mul.w	r7, r8, r7
 8024094:	fb02 770c 	mla	r7, r2, ip, r7
 8024098:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802409c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802409e:	fb00 770c 	mla	r7, r0, ip, r7
 80240a2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80240a6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80240a8:	fb09 770c 	mla	r7, r9, ip, r7
 80240ac:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80240b0:	fb08 f80c 	mul.w	r8, r8, ip
 80240b4:	0a3f      	lsrs	r7, r7, #8
 80240b6:	fb02 8303 	mla	r3, r2, r3, r8
 80240ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80240bc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80240c0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80240c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80240c6:	fb00 330a 	mla	r3, r0, sl, r3
 80240ca:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80240ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80240d0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80240d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80240d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240da:	434b      	muls	r3, r1
 80240dc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80240e0:	1c59      	adds	r1, r3, #1
 80240e2:	ea47 070c 	orr.w	r7, r7, ip
 80240e6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80240ea:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80240ee:	b2fa      	uxtb	r2, r7
 80240f0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80240f4:	fb12 f200 	smulbb	r2, r2, r0
 80240f8:	b2c9      	uxtb	r1, r1
 80240fa:	fb03 2301 	mla	r3, r3, r1, r2
 80240fe:	b29b      	uxth	r3, r3
 8024100:	1c5a      	adds	r2, r3, #1
 8024102:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024106:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802410a:	fb12 f201 	smulbb	r2, r2, r1
 802410e:	121b      	asrs	r3, r3, #8
 8024110:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024114:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8024118:	0c3f      	lsrs	r7, r7, #16
 802411a:	fb03 2300 	mla	r3, r3, r0, r2
 802411e:	b29b      	uxth	r3, r3
 8024120:	1c5a      	adds	r2, r3, #1
 8024122:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024126:	121b      	asrs	r3, r3, #8
 8024128:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802412c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024130:	fb13 f101 	smulbb	r1, r3, r1
 8024134:	fb07 1700 	mla	r7, r7, r0, r1
 8024138:	b2bf      	uxth	r7, r7
 802413a:	1c7b      	adds	r3, r7, #1
 802413c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024140:	123f      	asrs	r7, r7, #8
 8024142:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8024146:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024148:	f10e 0e03 	add.w	lr, lr, #3
 802414c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802414e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024152:	441a      	add	r2, r3
 8024154:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024156:	9229      	str	r2, [sp, #164]	; 0xa4
 8024158:	441d      	add	r5, r3
 802415a:	e645      	b.n	8023de8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802415c:	2800      	cmp	r0, #0
 802415e:	f43f aee6 	beq.w	8023f2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8024162:	5c79      	ldrb	r1, [r7, r1]
 8024164:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024168:	910b      	str	r1, [sp, #44]	; 0x2c
 802416a:	0e09      	lsrs	r1, r1, #24
 802416c:	9114      	str	r1, [sp, #80]	; 0x50
 802416e:	e6de      	b.n	8023f2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8024170:	b01f      	add	sp, #124	; 0x7c
 8024172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024176 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8024176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802417a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 802417e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8024182:	2d00      	cmp	r5, #0
 8024184:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8024188:	fb05 700e 	mla	r0, r5, lr, r7
 802418c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8024190:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8024194:	eb02 0800 	add.w	r8, r2, r0
 8024198:	f2c0 8105 	blt.w	80243a6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 802419c:	45a9      	cmp	r9, r5
 802419e:	f340 8102 	ble.w	80243a6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80241a2:	2f00      	cmp	r7, #0
 80241a4:	f2c0 80fd 	blt.w	80243a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80241a8:	45be      	cmp	lr, r7
 80241aa:	f340 80fa 	ble.w	80243a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80241ae:	5c12      	ldrb	r2, [r2, r0]
 80241b0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80241b4:	1c7a      	adds	r2, r7, #1
 80241b6:	f100 80f9 	bmi.w	80243ac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80241ba:	4596      	cmp	lr, r2
 80241bc:	f340 80f6 	ble.w	80243ac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80241c0:	2c00      	cmp	r4, #0
 80241c2:	f000 80f5 	beq.w	80243b0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 80241c6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80241ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80241ce:	3501      	adds	r5, #1
 80241d0:	f100 80f2 	bmi.w	80243b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80241d4:	45a9      	cmp	r9, r5
 80241d6:	f340 80ef 	ble.w	80243b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80241da:	f1bc 0f00 	cmp.w	ip, #0
 80241de:	f000 80ee 	beq.w	80243be <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 80241e2:	2f00      	cmp	r7, #0
 80241e4:	f2c0 80e6 	blt.w	80243b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80241e8:	45be      	cmp	lr, r7
 80241ea:	f340 80e3 	ble.w	80243b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80241ee:	f818 200e 	ldrb.w	r2, [r8, lr]
 80241f2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80241f6:	3701      	adds	r7, #1
 80241f8:	f100 80e4 	bmi.w	80243c4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80241fc:	45be      	cmp	lr, r7
 80241fe:	f340 80e1 	ble.w	80243c4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8024202:	2c00      	cmp	r4, #0
 8024204:	f000 80e0 	beq.w	80243c8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8024208:	44c6      	add	lr, r8
 802420a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802420e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024212:	b2a3      	uxth	r3, r4
 8024214:	fa1f fc8c 	uxth.w	ip, ip
 8024218:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802421c:	fb0c fe03 	mul.w	lr, ip, r3
 8024220:	011b      	lsls	r3, r3, #4
 8024222:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024226:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 802422a:	eba3 070e 	sub.w	r7, r3, lr
 802422e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8024232:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8024236:	fa1f f48c 	uxth.w	r4, ip
 802423a:	b2bf      	uxth	r7, r7
 802423c:	1b1b      	subs	r3, r3, r4
 802423e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024242:	fb07 fc0a 	mul.w	ip, r7, sl
 8024246:	b29b      	uxth	r3, r3
 8024248:	fb03 cc0b 	mla	ip, r3, fp, ip
 802424c:	9300      	str	r3, [sp, #0]
 802424e:	fb04 cc09 	mla	ip, r4, r9, ip
 8024252:	fb0e cc08 	mla	ip, lr, r8, ip
 8024256:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802425a:	9301      	str	r3, [sp, #4]
 802425c:	2b00      	cmp	r3, #0
 802425e:	f000 809d 	beq.w	802439c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8024262:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8024266:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802426a:	fb0b fc0c 	mul.w	ip, fp, ip
 802426e:	fb0b f606 	mul.w	r6, fp, r6
 8024272:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024276:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802427a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802427e:	44dc      	add	ip, fp
 8024280:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8024284:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024288:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802428c:	fb0a fb0b 	mul.w	fp, sl, fp
 8024290:	fb0a fa00 	mul.w	sl, sl, r0
 8024294:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8024298:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802429c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80242a0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80242a4:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80242a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80242ac:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80242b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242b4:	0a36      	lsrs	r6, r6, #8
 80242b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242ba:	44dc      	add	ip, fp
 80242bc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80242c0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80242c4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80242c8:	fb09 fb0b 	mul.w	fp, r9, fp
 80242cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242d0:	fb09 f905 	mul.w	r9, r9, r5
 80242d4:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80242d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242dc:	f509 7580 	add.w	r5, r9, #256	; 0x100
 80242e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80242e4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80242e8:	fb0c fc07 	mul.w	ip, ip, r7
 80242ec:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80242f0:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80242f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80242f8:	4458      	add	r0, fp
 80242fa:	fb08 f505 	mul.w	r5, r8, r5
 80242fe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024302:	fb08 f802 	mul.w	r8, r8, r2
 8024306:	0a00      	lsrs	r0, r0, #8
 8024308:	0a2a      	lsrs	r2, r5, #8
 802430a:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802430e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024312:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024316:	4415      	add	r5, r2
 8024318:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802431c:	0a2d      	lsrs	r5, r5, #8
 802431e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024322:	9a00      	ldr	r2, [sp, #0]
 8024324:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024328:	fb03 cc02 	mla	ip, r3, r2, ip
 802432c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024330:	9b01      	ldr	r3, [sp, #4]
 8024332:	fb05 c50e 	mla	r5, r5, lr, ip
 8024336:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802433a:	43db      	mvns	r3, r3
 802433c:	fb00 5004 	mla	r0, r0, r4, r5
 8024340:	b2db      	uxtb	r3, r3
 8024342:	0a00      	lsrs	r0, r0, #8
 8024344:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8024348:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 802434c:	4378      	muls	r0, r7
 802434e:	fb02 0006 	mla	r0, r2, r6, r0
 8024352:	780a      	ldrb	r2, [r1, #0]
 8024354:	fb0e 0e08 	mla	lr, lr, r8, r0
 8024358:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 802435c:	fb04 e000 	mla	r0, r4, r0, lr
 8024360:	fb02 f403 	mul.w	r4, r2, r3
 8024364:	0a00      	lsrs	r0, r0, #8
 8024366:	1c62      	adds	r2, r4, #1
 8024368:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802436c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024370:	4328      	orrs	r0, r5
 8024372:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024376:	700a      	strb	r2, [r1, #0]
 8024378:	784a      	ldrb	r2, [r1, #1]
 802437a:	435a      	muls	r2, r3
 802437c:	1c54      	adds	r4, r2, #1
 802437e:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8024382:	0a02      	lsrs	r2, r0, #8
 8024384:	0c00      	lsrs	r0, r0, #16
 8024386:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802438a:	704a      	strb	r2, [r1, #1]
 802438c:	788a      	ldrb	r2, [r1, #2]
 802438e:	4353      	muls	r3, r2
 8024390:	1c5a      	adds	r2, r3, #1
 8024392:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024396:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802439a:	7088      	strb	r0, [r1, #2]
 802439c:	b003      	add	sp, #12
 802439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243a2:	2600      	movs	r6, #0
 80243a4:	e706      	b.n	80241b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80243a6:	2000      	movs	r0, #0
 80243a8:	4606      	mov	r6, r0
 80243aa:	e710      	b.n	80241ce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80243ac:	2000      	movs	r0, #0
 80243ae:	e70e      	b.n	80241ce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80243b0:	4620      	mov	r0, r4
 80243b2:	e70c      	b.n	80241ce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80243b4:	2500      	movs	r5, #0
 80243b6:	e71e      	b.n	80241f6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 80243b8:	2200      	movs	r2, #0
 80243ba:	4615      	mov	r5, r2
 80243bc:	e729      	b.n	8024212 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80243be:	4662      	mov	r2, ip
 80243c0:	4665      	mov	r5, ip
 80243c2:	e726      	b.n	8024212 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80243c4:	2200      	movs	r2, #0
 80243c6:	e724      	b.n	8024212 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80243c8:	4622      	mov	r2, r4
 80243ca:	e722      	b.n	8024212 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080243cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243d0:	b09b      	sub	sp, #108	; 0x6c
 80243d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80243d6:	9218      	str	r2, [sp, #96]	; 0x60
 80243d8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80243da:	9019      	str	r0, [sp, #100]	; 0x64
 80243dc:	9116      	str	r1, [sp, #88]	; 0x58
 80243de:	6850      	ldr	r0, [r2, #4]
 80243e0:	9307      	str	r3, [sp, #28]
 80243e2:	6812      	ldr	r2, [r2, #0]
 80243e4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80243e6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80243ea:	fb00 1303 	mla	r3, r0, r3, r1
 80243ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80243f2:	18d3      	adds	r3, r2, r3
 80243f4:	930a      	str	r3, [sp, #40]	; 0x28
 80243f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243f8:	681b      	ldr	r3, [r3, #0]
 80243fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80243fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243fe:	685e      	ldr	r6, [r3, #4]
 8024400:	3604      	adds	r6, #4
 8024402:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024404:	2b00      	cmp	r3, #0
 8024406:	dc03      	bgt.n	8024410 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8024408:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802440a:	2b00      	cmp	r3, #0
 802440c:	f340 834f 	ble.w	8024aae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8024410:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024412:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024416:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802441a:	1e48      	subs	r0, r1, #1
 802441c:	1e57      	subs	r7, r2, #1
 802441e:	9b07      	ldr	r3, [sp, #28]
 8024420:	2b00      	cmp	r3, #0
 8024422:	f340 8178 	ble.w	8024716 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024426:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024428:	142b      	asrs	r3, r5, #16
 802442a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802442e:	d406      	bmi.n	802443e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024430:	4584      	cmp	ip, r0
 8024432:	da04      	bge.n	802443e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024434:	2b00      	cmp	r3, #0
 8024436:	db02      	blt.n	802443e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024438:	42bb      	cmp	r3, r7
 802443a:	f2c0 816d 	blt.w	8024718 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802443e:	f11c 0c01 	adds.w	ip, ip, #1
 8024442:	f100 815b 	bmi.w	80246fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024446:	4561      	cmp	r1, ip
 8024448:	f2c0 8158 	blt.w	80246fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802444c:	3301      	adds	r3, #1
 802444e:	f100 8155 	bmi.w	80246fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024452:	429a      	cmp	r2, r3
 8024454:	f2c0 8152 	blt.w	80246fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024458:	9b07      	ldr	r3, [sp, #28]
 802445a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802445c:	9317      	str	r3, [sp, #92]	; 0x5c
 802445e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024460:	2b00      	cmp	r3, #0
 8024462:	f340 8178 	ble.w	8024756 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024466:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024468:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802446c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024470:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024474:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024476:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802447a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802447c:	141b      	asrs	r3, r3, #16
 802447e:	f100 81ba 	bmi.w	80247f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024482:	f101 38ff 	add.w	r8, r1, #4294967295
 8024486:	4543      	cmp	r3, r8
 8024488:	f280 81b5 	bge.w	80247f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802448c:	f1bc 0f00 	cmp.w	ip, #0
 8024490:	f2c0 81b1 	blt.w	80247f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024494:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024498:	45c4      	cmp	ip, r8
 802449a:	f280 81ac 	bge.w	80247f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802449e:	b209      	sxth	r1, r1
 80244a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80244a2:	fb0c 3301 	mla	r3, ip, r1, r3
 80244a6:	eb04 0803 	add.w	r8, r4, r3
 80244aa:	5ce3      	ldrb	r3, [r4, r3]
 80244ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80244b0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80244b4:	2a00      	cmp	r2, #0
 80244b6:	f000 8193 	beq.w	80247e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80244ba:	f898 c001 	ldrb.w	ip, [r8, #1]
 80244be:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80244c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80244c4:	0e24      	lsrs	r4, r4, #24
 80244c6:	9412      	str	r4, [sp, #72]	; 0x48
 80244c8:	b178      	cbz	r0, 80244ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80244ca:	eb08 0c01 	add.w	ip, r8, r1
 80244ce:	f818 1001 	ldrb.w	r1, [r8, r1]
 80244d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80244d6:	9108      	str	r1, [sp, #32]
 80244d8:	0e09      	lsrs	r1, r1, #24
 80244da:	9110      	str	r1, [sp, #64]	; 0x40
 80244dc:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80244e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80244e4:	910c      	str	r1, [sp, #48]	; 0x30
 80244e6:	0e09      	lsrs	r1, r1, #24
 80244e8:	9113      	str	r1, [sp, #76]	; 0x4c
 80244ea:	b292      	uxth	r2, r2
 80244ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 80244ee:	b280      	uxth	r0, r0
 80244f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80244f2:	fb02 f900 	mul.w	r9, r2, r0
 80244f6:	0112      	lsls	r2, r2, #4
 80244f8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80244fc:	eba2 0809 	sub.w	r8, r2, r9
 8024500:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024504:	b280      	uxth	r0, r0
 8024506:	fa1f f888 	uxth.w	r8, r8
 802450a:	1a12      	subs	r2, r2, r0
 802450c:	fb08 f101 	mul.w	r1, r8, r1
 8024510:	b292      	uxth	r2, r2
 8024512:	fb02 110e 	mla	r1, r2, lr, r1
 8024516:	fb00 1104 	mla	r1, r0, r4, r1
 802451a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802451c:	fb09 1104 	mla	r1, r9, r4, r1
 8024520:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024524:	2900      	cmp	r1, #0
 8024526:	f000 80de 	beq.w	80246e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802452a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802452e:	d01b      	beq.n	8024568 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8024530:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024534:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024538:	fb0e fa0a 	mul.w	sl, lr, sl
 802453c:	fb0e fe03 	mul.w	lr, lr, r3
 8024540:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024544:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024548:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802454c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024550:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024554:	4453      	add	r3, sl
 8024556:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802455a:	0a1b      	lsrs	r3, r3, #8
 802455c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024560:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024564:	ea43 030c 	orr.w	r3, r3, ip
 8024568:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802456a:	2cff      	cmp	r4, #255	; 0xff
 802456c:	d021      	beq.n	80245b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802456e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024570:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024574:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024576:	fb04 fb0b 	mul.w	fp, r4, fp
 802457a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802457c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024580:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024582:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024586:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802458a:	fb04 fa0a 	mul.w	sl, r4, sl
 802458e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024592:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024596:	44de      	add	lr, fp
 8024598:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802459c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80245a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245ac:	ea4e 040a 	orr.w	r4, lr, sl
 80245b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80245b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80245b4:	2cff      	cmp	r4, #255	; 0xff
 80245b6:	d021      	beq.n	80245fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80245b8:	9c08      	ldr	r4, [sp, #32]
 80245ba:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80245be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80245c0:	fb04 fb0b 	mul.w	fp, r4, fp
 80245c4:	9c08      	ldr	r4, [sp, #32]
 80245c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80245ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80245cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80245d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80245d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80245d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80245e0:	44de      	add	lr, fp
 80245e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80245e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80245ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245f6:	ea4e 040a 	orr.w	r4, lr, sl
 80245fa:	9408      	str	r4, [sp, #32]
 80245fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80245fe:	2cff      	cmp	r4, #255	; 0xff
 8024600:	d021      	beq.n	8024646 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8024602:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024604:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024608:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802460a:	fb04 fb0b 	mul.w	fp, r4, fp
 802460e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024610:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024614:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024616:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802461a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802461e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024622:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024626:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802462a:	44de      	add	lr, fp
 802462c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024630:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024634:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024638:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802463c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024640:	ea4e 040a 	orr.w	r4, lr, sl
 8024644:	940c      	str	r4, [sp, #48]	; 0x30
 8024646:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024648:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802464c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024650:	43c9      	mvns	r1, r1
 8024652:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024656:	9c08      	ldr	r4, [sp, #32]
 8024658:	b2c9      	uxtb	r1, r1
 802465a:	fb08 fc0c 	mul.w	ip, r8, ip
 802465e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024662:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024666:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024668:	fb00 cc0e 	mla	ip, r0, lr, ip
 802466c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024670:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024672:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024676:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802467a:	fb08 f80e 	mul.w	r8, r8, lr
 802467e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024682:	fb02 8303 	mla	r3, r2, r3, r8
 8024686:	9a08      	ldr	r2, [sp, #32]
 8024688:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802468c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024692:	fb00 330a 	mla	r3, r0, sl, r3
 8024696:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802469a:	fb09 3900 	mla	r9, r9, r0, r3
 802469e:	783b      	ldrb	r3, [r7, #0]
 80246a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80246a4:	fb03 f201 	mul.w	r2, r3, r1
 80246a8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80246ac:	1c53      	adds	r3, r2, #1
 80246ae:	ea4c 0c09 	orr.w	ip, ip, r9
 80246b2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80246b6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80246ba:	703b      	strb	r3, [r7, #0]
 80246bc:	787b      	ldrb	r3, [r7, #1]
 80246be:	434b      	muls	r3, r1
 80246c0:	1c5a      	adds	r2, r3, #1
 80246c2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80246c6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80246ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80246ce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80246d2:	707b      	strb	r3, [r7, #1]
 80246d4:	78bb      	ldrb	r3, [r7, #2]
 80246d6:	4359      	muls	r1, r3
 80246d8:	1c4b      	adds	r3, r1, #1
 80246da:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80246de:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80246e2:	f887 c002 	strb.w	ip, [r7, #2]
 80246e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80246e8:	3703      	adds	r7, #3
 80246ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80246ec:	441a      	add	r2, r3
 80246ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80246f0:	441d      	add	r5, r3
 80246f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80246f4:	9225      	str	r2, [sp, #148]	; 0x94
 80246f6:	3b01      	subs	r3, #1
 80246f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80246fa:	e6b0      	b.n	802445e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80246fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80246fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024700:	441c      	add	r4, r3
 8024702:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024704:	441d      	add	r5, r3
 8024706:	9b07      	ldr	r3, [sp, #28]
 8024708:	9425      	str	r4, [sp, #148]	; 0x94
 802470a:	3b01      	subs	r3, #1
 802470c:	9307      	str	r3, [sp, #28]
 802470e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024710:	3303      	adds	r3, #3
 8024712:	930a      	str	r3, [sp, #40]	; 0x28
 8024714:	e683      	b.n	802441e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024716:	d026      	beq.n	8024766 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8024718:	9b07      	ldr	r3, [sp, #28]
 802471a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802471c:	3b01      	subs	r3, #1
 802471e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024720:	fb00 4003 	mla	r0, r0, r3, r4
 8024724:	1400      	asrs	r0, r0, #16
 8024726:	f53f ae97 	bmi.w	8024458 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802472a:	3901      	subs	r1, #1
 802472c:	4288      	cmp	r0, r1
 802472e:	f6bf ae93 	bge.w	8024458 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024732:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024734:	fb01 5303 	mla	r3, r1, r3, r5
 8024738:	141b      	asrs	r3, r3, #16
 802473a:	f53f ae8d 	bmi.w	8024458 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802473e:	3a01      	subs	r2, #1
 8024740:	4293      	cmp	r3, r2
 8024742:	f6bf ae89 	bge.w	8024458 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024748:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802474c:	f103 0e03 	add.w	lr, r3, #3
 8024750:	f1bb 0f00 	cmp.w	fp, #0
 8024754:	dc6d      	bgt.n	8024832 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8024756:	9b07      	ldr	r3, [sp, #28]
 8024758:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802475c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802475e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024762:	4423      	add	r3, r4
 8024764:	930a      	str	r3, [sp, #40]	; 0x28
 8024766:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024768:	2b00      	cmp	r3, #0
 802476a:	f340 81a0 	ble.w	8024aae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802476e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024772:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024774:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024778:	eeb0 6a62 	vmov.f32	s12, s5
 802477c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8024780:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024784:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024788:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 802478c:	eeb0 6a43 	vmov.f32	s12, s6
 8024790:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024794:	ee16 5a10 	vmov	r5, s12
 8024798:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802479c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80247a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80247a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80247a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80247ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80247b0:	ee12 2a90 	vmov	r2, s5
 80247b4:	eef0 2a47 	vmov.f32	s5, s14
 80247b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80247bc:	ee13 2a10 	vmov	r2, s6
 80247c0:	9327      	str	r3, [sp, #156]	; 0x9c
 80247c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247c4:	eeb0 3a67 	vmov.f32	s6, s15
 80247c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80247cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80247ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80247d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80247d2:	3b01      	subs	r3, #1
 80247d4:	9316      	str	r3, [sp, #88]	; 0x58
 80247d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247d8:	bf08      	it	eq
 80247da:	4613      	moveq	r3, r2
 80247dc:	9307      	str	r3, [sp, #28]
 80247de:	e610      	b.n	8024402 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80247e0:	2800      	cmp	r0, #0
 80247e2:	f43f ae82 	beq.w	80244ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80247e6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80247ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80247ee:	9108      	str	r1, [sp, #32]
 80247f0:	0e09      	lsrs	r1, r1, #24
 80247f2:	9110      	str	r1, [sp, #64]	; 0x40
 80247f4:	e679      	b.n	80244ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80247f6:	f113 0801 	adds.w	r8, r3, #1
 80247fa:	f53f af74 	bmi.w	80246e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80247fe:	4541      	cmp	r1, r8
 8024800:	f6ff af71 	blt.w	80246e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024804:	f11c 0801 	adds.w	r8, ip, #1
 8024808:	f53f af6d 	bmi.w	80246e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802480c:	45c6      	cmp	lr, r8
 802480e:	f6ff af6a 	blt.w	80246e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024812:	b209      	sxth	r1, r1
 8024814:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024818:	fa0f f38e 	sxth.w	r3, lr
 802481c:	9100      	str	r1, [sp, #0]
 802481e:	4639      	mov	r1, r7
 8024820:	9301      	str	r3, [sp, #4]
 8024822:	4633      	mov	r3, r6
 8024824:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8024828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802482a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802482c:	f7ff fca3 	bl	8024176 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8024830:	e759      	b.n	80246e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024832:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024834:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024838:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802483a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802483e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024840:	1427      	asrs	r7, r4, #16
 8024842:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024844:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024848:	142b      	asrs	r3, r5, #16
 802484a:	fb01 7303 	mla	r3, r1, r3, r7
 802484e:	18e7      	adds	r7, r4, r3
 8024850:	5ce3      	ldrb	r3, [r4, r3]
 8024852:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024856:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802485a:	2a00      	cmp	r2, #0
 802485c:	f000 811d 	beq.w	8024a9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8024860:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024864:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8024868:	940d      	str	r4, [sp, #52]	; 0x34
 802486a:	0e24      	lsrs	r4, r4, #24
 802486c:	9414      	str	r4, [sp, #80]	; 0x50
 802486e:	b170      	cbz	r0, 802488e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024870:	eb07 0801 	add.w	r8, r7, r1
 8024874:	5c79      	ldrb	r1, [r7, r1]
 8024876:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802487a:	9109      	str	r1, [sp, #36]	; 0x24
 802487c:	0e09      	lsrs	r1, r1, #24
 802487e:	9111      	str	r1, [sp, #68]	; 0x44
 8024880:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024884:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024888:	910e      	str	r1, [sp, #56]	; 0x38
 802488a:	0e09      	lsrs	r1, r1, #24
 802488c:	9115      	str	r1, [sp, #84]	; 0x54
 802488e:	b292      	uxth	r2, r2
 8024890:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024892:	b280      	uxth	r0, r0
 8024894:	fb02 f900 	mul.w	r9, r2, r0
 8024898:	0112      	lsls	r2, r2, #4
 802489a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802489e:	eba2 0809 	sub.w	r8, r2, r9
 80248a2:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80248a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80248a8:	b280      	uxth	r0, r0
 80248aa:	fa1f f888 	uxth.w	r8, r8
 80248ae:	1a09      	subs	r1, r1, r0
 80248b0:	fb08 f202 	mul.w	r2, r8, r2
 80248b4:	b289      	uxth	r1, r1
 80248b6:	fb01 220c 	mla	r2, r1, ip, r2
 80248ba:	fb00 2204 	mla	r2, r0, r4, r2
 80248be:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80248c0:	fb09 2204 	mla	r2, r9, r4, r2
 80248c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80248c8:	2a00      	cmp	r2, #0
 80248ca:	f000 80db 	beq.w	8024a84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80248ce:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80248d2:	d019      	beq.n	8024908 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80248d4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80248d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248dc:	fb0c fa0a 	mul.w	sl, ip, sl
 80248e0:	fb0c fc03 	mul.w	ip, ip, r3
 80248e4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80248e8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80248ec:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80248f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248f4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80248f8:	4453      	add	r3, sl
 80248fa:	0a3f      	lsrs	r7, r7, #8
 80248fc:	0a1b      	lsrs	r3, r3, #8
 80248fe:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024902:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024906:	433b      	orrs	r3, r7
 8024908:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802490a:	2cff      	cmp	r4, #255	; 0xff
 802490c:	d020      	beq.n	8024950 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 802490e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024910:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024914:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024916:	4367      	muls	r7, r4
 8024918:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802491a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802491e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024922:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024924:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024928:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802492c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024930:	44bc      	add	ip, r7
 8024932:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024936:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802493a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802493e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024942:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024946:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802494a:	ea4c 040a 	orr.w	r4, ip, sl
 802494e:	940d      	str	r4, [sp, #52]	; 0x34
 8024950:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024952:	2cff      	cmp	r4, #255	; 0xff
 8024954:	d020      	beq.n	8024998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8024956:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024958:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802495c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802495e:	4367      	muls	r7, r4
 8024960:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024962:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024966:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802496a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802496c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024970:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024974:	fb04 fa0a 	mul.w	sl, r4, sl
 8024978:	44bc      	add	ip, r7
 802497a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802497e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024982:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024986:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802498a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802498e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024992:	ea4c 040a 	orr.w	r4, ip, sl
 8024996:	9409      	str	r4, [sp, #36]	; 0x24
 8024998:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802499a:	2cff      	cmp	r4, #255	; 0xff
 802499c:	d020      	beq.n	80249e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 802499e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80249a0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80249a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80249a6:	4367      	muls	r7, r4
 80249a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80249aa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80249ae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80249b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80249b4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80249b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249bc:	fb04 fa0a 	mul.w	sl, r4, sl
 80249c0:	44bc      	add	ip, r7
 80249c2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80249c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249ca:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80249ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80249d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80249da:	ea4c 040a 	orr.w	r4, ip, sl
 80249de:	940e      	str	r4, [sp, #56]	; 0x38
 80249e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80249e2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80249e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249ea:	43d2      	mvns	r2, r2
 80249ec:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80249f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80249f2:	b2d2      	uxtb	r2, r2
 80249f4:	fb08 f707 	mul.w	r7, r8, r7
 80249f8:	fb01 770c 	mla	r7, r1, ip, r7
 80249fc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024a00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024a02:	fb00 770c 	mla	r7, r0, ip, r7
 8024a06:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024a0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024a0c:	fb09 770c 	mla	r7, r9, ip, r7
 8024a10:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024a14:	fb08 f80c 	mul.w	r8, r8, ip
 8024a18:	0a3f      	lsrs	r7, r7, #8
 8024a1a:	fb01 8303 	mla	r3, r1, r3, r8
 8024a1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024a20:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024a24:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024a28:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024a2a:	fb00 330a 	mla	r3, r0, sl, r3
 8024a2e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024a32:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024a36:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8024a3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a3e:	fb03 f102 	mul.w	r1, r3, r2
 8024a42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024a46:	1c4b      	adds	r3, r1, #1
 8024a48:	ea47 070c 	orr.w	r7, r7, ip
 8024a4c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024a50:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8024a54:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024a58:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8024a5c:	4353      	muls	r3, r2
 8024a5e:	1c59      	adds	r1, r3, #1
 8024a60:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024a64:	0a3b      	lsrs	r3, r7, #8
 8024a66:	0c3f      	lsrs	r7, r7, #16
 8024a68:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024a6c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8024a70:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024a74:	435a      	muls	r2, r3
 8024a76:	1c53      	adds	r3, r2, #1
 8024a78:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024a7c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024a80:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8024a84:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024a86:	f10e 0e03 	add.w	lr, lr, #3
 8024a8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024a8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024a90:	441a      	add	r2, r3
 8024a92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a94:	9225      	str	r2, [sp, #148]	; 0x94
 8024a96:	441d      	add	r5, r3
 8024a98:	e65a      	b.n	8024750 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8024a9a:	2800      	cmp	r0, #0
 8024a9c:	f43f aef7 	beq.w	802488e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024aa0:	5c79      	ldrb	r1, [r7, r1]
 8024aa2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024aa6:	9109      	str	r1, [sp, #36]	; 0x24
 8024aa8:	0e09      	lsrs	r1, r1, #24
 8024aaa:	9111      	str	r1, [sp, #68]	; 0x44
 8024aac:	e6ef      	b.n	802488e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024aae:	b01b      	add	sp, #108	; 0x6c
 8024ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024ab4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8024ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ab8:	b08d      	sub	sp, #52	; 0x34
 8024aba:	468b      	mov	fp, r1
 8024abc:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8024ac0:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8024ac4:	fb0c 5703 	mla	r7, ip, r3, r5
 8024ac8:	f1bc 0f00 	cmp.w	ip, #0
 8024acc:	910b      	str	r1, [sp, #44]	; 0x2c
 8024ace:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024ad2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8024ad6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8024ada:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8024ade:	eb02 0607 	add.w	r6, r2, r7
 8024ae2:	f89b 4000 	ldrb.w	r4, [fp]
 8024ae6:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8024aea:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8024aee:	f2c0 80c1 	blt.w	8024c74 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8024af2:	45e6      	cmp	lr, ip
 8024af4:	f340 80be 	ble.w	8024c74 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8024af8:	2d00      	cmp	r5, #0
 8024afa:	f2c0 80b7 	blt.w	8024c6c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8024afe:	42ab      	cmp	r3, r5
 8024b00:	f340 80b4 	ble.w	8024c6c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8024b04:	5dd2      	ldrb	r2, [r2, r7]
 8024b06:	9205      	str	r2, [sp, #20]
 8024b08:	7872      	ldrb	r2, [r6, #1]
 8024b0a:	9206      	str	r2, [sp, #24]
 8024b0c:	78b2      	ldrb	r2, [r6, #2]
 8024b0e:	9207      	str	r2, [sp, #28]
 8024b10:	1c6a      	adds	r2, r5, #1
 8024b12:	f100 80b6 	bmi.w	8024c82 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024b16:	4293      	cmp	r3, r2
 8024b18:	f340 80b3 	ble.w	8024c82 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024b1c:	f1b8 0f00 	cmp.w	r8, #0
 8024b20:	f000 80af 	beq.w	8024c82 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024b24:	78f2      	ldrb	r2, [r6, #3]
 8024b26:	9201      	str	r2, [sp, #4]
 8024b28:	7932      	ldrb	r2, [r6, #4]
 8024b2a:	9202      	str	r2, [sp, #8]
 8024b2c:	7972      	ldrb	r2, [r6, #5]
 8024b2e:	9203      	str	r2, [sp, #12]
 8024b30:	f11c 0c01 	adds.w	ip, ip, #1
 8024b34:	f100 80ad 	bmi.w	8024c92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8024b38:	45e6      	cmp	lr, ip
 8024b3a:	f340 80aa 	ble.w	8024c92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8024b3e:	f1ba 0f00 	cmp.w	sl, #0
 8024b42:	f000 80a6 	beq.w	8024c92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8024b46:	2d00      	cmp	r5, #0
 8024b48:	f2c0 809f 	blt.w	8024c8a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8024b4c:	42ab      	cmp	r3, r5
 8024b4e:	f340 809c 	ble.w	8024c8a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8024b52:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8024b56:	f816 9002 	ldrb.w	r9, [r6, r2]
 8024b5a:	2203      	movs	r2, #3
 8024b5c:	fb03 6c02 	mla	ip, r3, r2, r6
 8024b60:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8024b64:	f89c e002 	ldrb.w	lr, [ip, #2]
 8024b68:	9704      	str	r7, [sp, #16]
 8024b6a:	3501      	adds	r5, #1
 8024b6c:	f100 8098 	bmi.w	8024ca0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8024b70:	42ab      	cmp	r3, r5
 8024b72:	f340 8095 	ble.w	8024ca0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8024b76:	f1b8 0f00 	cmp.w	r8, #0
 8024b7a:	f000 8091 	beq.w	8024ca0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8024b7e:	f04f 0c03 	mov.w	ip, #3
 8024b82:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8024b86:	5cb5      	ldrb	r5, [r6, r2]
 8024b88:	fb03 620c 	mla	r2, r3, ip, r6
 8024b8c:	fb03 630c 	mla	r3, r3, ip, r6
 8024b90:	7912      	ldrb	r2, [r2, #4]
 8024b92:	795e      	ldrb	r6, [r3, #5]
 8024b94:	fa1f f388 	uxth.w	r3, r8
 8024b98:	fa1f fc8a 	uxth.w	ip, sl
 8024b9c:	fb03 f70c 	mul.w	r7, r3, ip
 8024ba0:	011b      	lsls	r3, r3, #4
 8024ba2:	9708      	str	r7, [sp, #32]
 8024ba4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8024ba8:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8024bac:	1bdb      	subs	r3, r3, r7
 8024bae:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8024bb2:	fa1f fc8c 	uxth.w	ip, ip
 8024bb6:	b29b      	uxth	r3, r3
 8024bb8:	9709      	str	r7, [sp, #36]	; 0x24
 8024bba:	ebaa 0a0c 	sub.w	sl, sl, ip
 8024bbe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024bc0:	930a      	str	r3, [sp, #40]	; 0x28
 8024bc2:	fa1f fa8a 	uxth.w	sl, sl
 8024bc6:	ea6f 0807 	mvn.w	r8, r7
 8024bca:	9f01      	ldr	r7, [sp, #4]
 8024bcc:	435f      	muls	r7, r3
 8024bce:	9b05      	ldr	r3, [sp, #20]
 8024bd0:	fa5f f888 	uxtb.w	r8, r8
 8024bd4:	fb0a 7703 	mla	r7, sl, r3, r7
 8024bd8:	9b08      	ldr	r3, [sp, #32]
 8024bda:	fb14 f408 	smulbb	r4, r4, r8
 8024bde:	fb0c 7709 	mla	r7, ip, r9, r7
 8024be2:	fb10 f008 	smulbb	r0, r0, r8
 8024be6:	fb11 f108 	smulbb	r1, r1, r8
 8024bea:	fb03 7705 	mla	r7, r3, r5, r7
 8024bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bf0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024bf4:	fb07 4703 	mla	r7, r7, r3, r4
 8024bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024bfa:	b2bf      	uxth	r7, r7
 8024bfc:	1c7c      	adds	r4, r7, #1
 8024bfe:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8024c02:	1224      	asrs	r4, r4, #8
 8024c04:	f88b 4000 	strb.w	r4, [fp]
 8024c08:	9c02      	ldr	r4, [sp, #8]
 8024c0a:	435c      	muls	r4, r3
 8024c0c:	9b06      	ldr	r3, [sp, #24]
 8024c0e:	fb0a 4403 	mla	r4, sl, r3, r4
 8024c12:	9b04      	ldr	r3, [sp, #16]
 8024c14:	fb0c 4403 	mla	r4, ip, r3, r4
 8024c18:	9b08      	ldr	r3, [sp, #32]
 8024c1a:	fb03 4402 	mla	r4, r3, r2, r4
 8024c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024c22:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024c26:	fb04 0403 	mla	r4, r4, r3, r0
 8024c2a:	9b03      	ldr	r3, [sp, #12]
 8024c2c:	435a      	muls	r2, r3
 8024c2e:	b2a4      	uxth	r4, r4
 8024c30:	4613      	mov	r3, r2
 8024c32:	9a07      	ldr	r2, [sp, #28]
 8024c34:	1c60      	adds	r0, r4, #1
 8024c36:	fb0a 3a02 	mla	sl, sl, r2, r3
 8024c3a:	9b08      	ldr	r3, [sp, #32]
 8024c3c:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8024c40:	fb0c ac0e 	mla	ip, ip, lr, sl
 8024c44:	1224      	asrs	r4, r4, #8
 8024c46:	fb03 c606 	mla	r6, r3, r6, ip
 8024c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c4c:	f88b 4001 	strb.w	r4, [fp, #1]
 8024c50:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024c54:	fb06 1103 	mla	r1, r6, r3, r1
 8024c58:	b289      	uxth	r1, r1
 8024c5a:	1c4e      	adds	r6, r1, #1
 8024c5c:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8024c60:	1209      	asrs	r1, r1, #8
 8024c62:	f88b 1002 	strb.w	r1, [fp, #2]
 8024c66:	b00d      	add	sp, #52	; 0x34
 8024c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024c70:	9405      	str	r4, [sp, #20]
 8024c72:	e74d      	b.n	8024b10 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8024c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024c78:	9401      	str	r4, [sp, #4]
 8024c7a:	9405      	str	r4, [sp, #20]
 8024c7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024c80:	e756      	b.n	8024b30 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8024c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024c86:	9401      	str	r4, [sp, #4]
 8024c88:	e752      	b.n	8024b30 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8024c8a:	468e      	mov	lr, r1
 8024c8c:	9004      	str	r0, [sp, #16]
 8024c8e:	46a1      	mov	r9, r4
 8024c90:	e76b      	b.n	8024b6a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8024c92:	460e      	mov	r6, r1
 8024c94:	4602      	mov	r2, r0
 8024c96:	4625      	mov	r5, r4
 8024c98:	468e      	mov	lr, r1
 8024c9a:	9004      	str	r0, [sp, #16]
 8024c9c:	46a1      	mov	r9, r4
 8024c9e:	e779      	b.n	8024b94 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8024ca0:	460e      	mov	r6, r1
 8024ca2:	4602      	mov	r2, r0
 8024ca4:	4625      	mov	r5, r4
 8024ca6:	e775      	b.n	8024b94 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08024ca8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cac:	b09f      	sub	sp, #124	; 0x7c
 8024cae:	920e      	str	r2, [sp, #56]	; 0x38
 8024cb0:	9307      	str	r3, [sp, #28]
 8024cb2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024cb4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024cb8:	901d      	str	r0, [sp, #116]	; 0x74
 8024cba:	930c      	str	r3, [sp, #48]	; 0x30
 8024cbc:	6850      	ldr	r0, [r2, #4]
 8024cbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8024cc0:	6812      	ldr	r2, [r2, #0]
 8024cc2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024cc6:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8024cca:	fb00 1303 	mla	r3, r0, r3, r1
 8024cce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024cd2:	18d3      	adds	r3, r2, r3
 8024cd4:	9308      	str	r3, [sp, #32]
 8024cd6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024cd8:	681b      	ldr	r3, [r3, #0]
 8024cda:	930a      	str	r3, [sp, #40]	; 0x28
 8024cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024cde:	43db      	mvns	r3, r3
 8024ce0:	b2db      	uxtb	r3, r3
 8024ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8024ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ce6:	2b00      	cmp	r3, #0
 8024ce8:	dc03      	bgt.n	8024cf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024cec:	2b00      	cmp	r3, #0
 8024cee:	f340 81f5 	ble.w	80250dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024cf2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024cf4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024cf8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024cfc:	1e48      	subs	r0, r1, #1
 8024cfe:	1e54      	subs	r4, r2, #1
 8024d00:	9b07      	ldr	r3, [sp, #28]
 8024d02:	2b00      	cmp	r3, #0
 8024d04:	f340 80d5 	ble.w	8024eb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8024d08:	ea5f 452a 	movs.w	r5, sl, asr #16
 8024d0c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8024d10:	d406      	bmi.n	8024d20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024d12:	4285      	cmp	r5, r0
 8024d14:	da04      	bge.n	8024d20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024d16:	2b00      	cmp	r3, #0
 8024d18:	db02      	blt.n	8024d20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024d1a:	42a3      	cmp	r3, r4
 8024d1c:	f2c0 80ca 	blt.w	8024eb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024d20:	3501      	adds	r5, #1
 8024d22:	f100 80bb 	bmi.w	8024e9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024d26:	42a9      	cmp	r1, r5
 8024d28:	f2c0 80b8 	blt.w	8024e9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024d2c:	3301      	adds	r3, #1
 8024d2e:	f100 80b5 	bmi.w	8024e9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024d32:	429a      	cmp	r2, r3
 8024d34:	f2c0 80b2 	blt.w	8024e9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024d38:	9b07      	ldr	r3, [sp, #28]
 8024d3a:	9d08      	ldr	r5, [sp, #32]
 8024d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8024d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024d40:	2b00      	cmp	r3, #0
 8024d42:	f340 80d6 	ble.w	8024ef2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8024d46:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8024d48:	ea4f 4428 	mov.w	r4, r8, asr #16
 8024d4c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024d4e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8024d52:	68c6      	ldr	r6, [r0, #12]
 8024d54:	ea5f 402a 	movs.w	r0, sl, asr #16
 8024d58:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8024d5c:	689b      	ldr	r3, [r3, #8]
 8024d5e:	f100 810f 	bmi.w	8024f80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024d62:	1e5f      	subs	r7, r3, #1
 8024d64:	42b8      	cmp	r0, r7
 8024d66:	f280 810b 	bge.w	8024f80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024d6a:	2c00      	cmp	r4, #0
 8024d6c:	f2c0 8108 	blt.w	8024f80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024d70:	1e77      	subs	r7, r6, #1
 8024d72:	42bc      	cmp	r4, r7
 8024d74:	f280 8104 	bge.w	8024f80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024d78:	b21b      	sxth	r3, r3
 8024d7a:	fb04 0003 	mla	r0, r4, r3, r0
 8024d7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024d80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024d84:	1826      	adds	r6, r4, r0
 8024d86:	5c24      	ldrb	r4, [r4, r0]
 8024d88:	78b7      	ldrb	r7, [r6, #2]
 8024d8a:	7870      	ldrb	r0, [r6, #1]
 8024d8c:	970f      	str	r7, [sp, #60]	; 0x3c
 8024d8e:	7977      	ldrb	r7, [r6, #5]
 8024d90:	f896 e003 	ldrb.w	lr, [r6, #3]
 8024d94:	f896 c004 	ldrb.w	ip, [r6, #4]
 8024d98:	9710      	str	r7, [sp, #64]	; 0x40
 8024d9a:	b1c9      	cbz	r1, 8024dd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8024d9c:	f04f 0b03 	mov.w	fp, #3
 8024da0:	f06f 0904 	mvn.w	r9, #4
 8024da4:	3605      	adds	r6, #5
 8024da6:	fb13 930b 	smlabb	r3, r3, fp, r9
 8024daa:	eb06 0b03 	add.w	fp, r6, r3
 8024dae:	5cf3      	ldrb	r3, [r6, r3]
 8024db0:	9311      	str	r3, [sp, #68]	; 0x44
 8024db2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8024db6:	9313      	str	r3, [sp, #76]	; 0x4c
 8024db8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8024dbc:	9315      	str	r3, [sp, #84]	; 0x54
 8024dbe:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8024dc2:	9312      	str	r3, [sp, #72]	; 0x48
 8024dc4:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8024dc8:	9314      	str	r3, [sp, #80]	; 0x50
 8024dca:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8024dce:	9316      	str	r3, [sp, #88]	; 0x58
 8024dd0:	b292      	uxth	r2, r2
 8024dd2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8024dd4:	b289      	uxth	r1, r1
 8024dd6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8024dda:	fb02 f601 	mul.w	r6, r2, r1
 8024dde:	0112      	lsls	r2, r2, #4
 8024de0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8024de4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8024de8:	1b92      	subs	r2, r2, r6
 8024dea:	b289      	uxth	r1, r1
 8024dec:	b292      	uxth	r2, r2
 8024dee:	eba9 0901 	sub.w	r9, r9, r1
 8024df2:	fb02 fe0e 	mul.w	lr, r2, lr
 8024df6:	fa1f f989 	uxth.w	r9, r9
 8024dfa:	fb02 fc0c 	mul.w	ip, r2, ip
 8024dfe:	fb09 e404 	mla	r4, r9, r4, lr
 8024e02:	f895 e000 	ldrb.w	lr, [r5]
 8024e06:	fb09 c000 	mla	r0, r9, r0, ip
 8024e0a:	fb01 4407 	mla	r4, r1, r7, r4
 8024e0e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8024e10:	fb06 4407 	mla	r4, r6, r7, r4
 8024e14:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024e16:	fb1e fe07 	smulbb	lr, lr, r7
 8024e1a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024e1e:	fb04 e403 	mla	r4, r4, r3, lr
 8024e22:	b2a4      	uxth	r4, r4
 8024e24:	f104 0e01 	add.w	lr, r4, #1
 8024e28:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8024e2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024e2e:	fb01 0004 	mla	r0, r1, r4, r0
 8024e32:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024e34:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024e38:	fb06 0004 	mla	r0, r6, r4, r0
 8024e3c:	786c      	ldrb	r4, [r5, #1]
 8024e3e:	f885 e000 	strb.w	lr, [r5]
 8024e42:	fb14 f407 	smulbb	r4, r4, r7
 8024e46:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024e4a:	fb00 4003 	mla	r0, r0, r3, r4
 8024e4e:	b280      	uxth	r0, r0
 8024e50:	1c44      	adds	r4, r0, #1
 8024e52:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8024e56:	1200      	asrs	r0, r0, #8
 8024e58:	7068      	strb	r0, [r5, #1]
 8024e5a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024e5c:	4342      	muls	r2, r0
 8024e5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024e60:	fb09 2200 	mla	r2, r9, r0, r2
 8024e64:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024e66:	fb01 2100 	mla	r1, r1, r0, r2
 8024e6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024e6c:	fb06 1602 	mla	r6, r6, r2, r1
 8024e70:	78a9      	ldrb	r1, [r5, #2]
 8024e72:	fb11 f107 	smulbb	r1, r1, r7
 8024e76:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024e7a:	fb06 1303 	mla	r3, r6, r3, r1
 8024e7e:	b29b      	uxth	r3, r3
 8024e80:	1c5e      	adds	r6, r3, #1
 8024e82:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8024e86:	121b      	asrs	r3, r3, #8
 8024e88:	70ab      	strb	r3, [r5, #2]
 8024e8a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024e8c:	3503      	adds	r5, #3
 8024e8e:	449a      	add	sl, r3
 8024e90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024e92:	4498      	add	r8, r3
 8024e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024e96:	3b01      	subs	r3, #1
 8024e98:	930d      	str	r3, [sp, #52]	; 0x34
 8024e9a:	e750      	b.n	8024d3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024e9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024e9e:	449a      	add	sl, r3
 8024ea0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024ea2:	4498      	add	r8, r3
 8024ea4:	9b07      	ldr	r3, [sp, #28]
 8024ea6:	3b01      	subs	r3, #1
 8024ea8:	9307      	str	r3, [sp, #28]
 8024eaa:	9b08      	ldr	r3, [sp, #32]
 8024eac:	3303      	adds	r3, #3
 8024eae:	9308      	str	r3, [sp, #32]
 8024eb0:	e726      	b.n	8024d00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024eb2:	d026      	beq.n	8024f02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8024eb4:	9b07      	ldr	r3, [sp, #28]
 8024eb6:	982b      	ldr	r0, [sp, #172]	; 0xac
 8024eb8:	3b01      	subs	r3, #1
 8024eba:	fb00 a003 	mla	r0, r0, r3, sl
 8024ebe:	1400      	asrs	r0, r0, #16
 8024ec0:	f53f af3a 	bmi.w	8024d38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024ec4:	3901      	subs	r1, #1
 8024ec6:	4288      	cmp	r0, r1
 8024ec8:	f6bf af36 	bge.w	8024d38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024ecc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8024ece:	fb01 8303 	mla	r3, r1, r3, r8
 8024ed2:	141b      	asrs	r3, r3, #16
 8024ed4:	f53f af30 	bmi.w	8024d38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024ed8:	3a01      	subs	r2, #1
 8024eda:	4293      	cmp	r3, r2
 8024edc:	f6bf af2c 	bge.w	8024d38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024ee0:	9b08      	ldr	r3, [sp, #32]
 8024ee2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8024ee6:	1cdd      	adds	r5, r3, #3
 8024ee8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8024eec:	f1bc 0f00 	cmp.w	ip, #0
 8024ef0:	dc5f      	bgt.n	8024fb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8024ef2:	9b07      	ldr	r3, [sp, #28]
 8024ef4:	9a08      	ldr	r2, [sp, #32]
 8024ef6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024efa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024efe:	441a      	add	r2, r3
 8024f00:	9208      	str	r2, [sp, #32]
 8024f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f04:	2b00      	cmp	r3, #0
 8024f06:	f340 80e9 	ble.w	80250dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024f0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024f10:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024f14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024f18:	eef0 6a62 	vmov.f32	s13, s5
 8024f1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024f20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024f24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f28:	ee16 aa90 	vmov	sl, s13
 8024f2c:	eef0 6a43 	vmov.f32	s13, s6
 8024f30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f34:	ee16 8a90 	vmov	r8, s13
 8024f38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024f3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024f40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024f44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024f48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024f4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024f50:	ee12 2a90 	vmov	r2, s5
 8024f54:	eef0 2a47 	vmov.f32	s5, s14
 8024f58:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f5c:	ee13 2a10 	vmov	r2, s6
 8024f60:	932b      	str	r3, [sp, #172]	; 0xac
 8024f62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024f64:	eeb0 3a67 	vmov.f32	s6, s15
 8024f68:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f6c:	932c      	str	r3, [sp, #176]	; 0xb0
 8024f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024f72:	3b01      	subs	r3, #1
 8024f74:	930b      	str	r3, [sp, #44]	; 0x2c
 8024f76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024f78:	bf08      	it	eq
 8024f7a:	4613      	moveq	r3, r2
 8024f7c:	9307      	str	r3, [sp, #28]
 8024f7e:	e6b1      	b.n	8024ce4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024f80:	1c47      	adds	r7, r0, #1
 8024f82:	d482      	bmi.n	8024e8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024f84:	42bb      	cmp	r3, r7
 8024f86:	db80      	blt.n	8024e8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024f88:	1c67      	adds	r7, r4, #1
 8024f8a:	f53f af7e 	bmi.w	8024e8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024f8e:	42be      	cmp	r6, r7
 8024f90:	f6ff af7b 	blt.w	8024e8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024f94:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024f96:	b236      	sxth	r6, r6
 8024f98:	9001      	str	r0, [sp, #4]
 8024f9a:	b21b      	sxth	r3, r3
 8024f9c:	9600      	str	r6, [sp, #0]
 8024f9e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024fa0:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8024fa4:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8024fa8:	4629      	mov	r1, r5
 8024faa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024fac:	f7ff fd82 	bl	8024ab4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8024fb0:	e76b      	b.n	8024e8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024fb2:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8024fb4:	ea4f 402a 	mov.w	r0, sl, asr #16
 8024fb8:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8024fbc:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8024fc0:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8024fc4:	ea4f 4128 	mov.w	r1, r8, asr #16
 8024fc8:	fb07 0101 	mla	r1, r7, r1, r0
 8024fcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024fce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024fd2:	1844      	adds	r4, r0, r1
 8024fd4:	5c40      	ldrb	r0, [r0, r1]
 8024fd6:	78a6      	ldrb	r6, [r4, #2]
 8024fd8:	7861      	ldrb	r1, [r4, #1]
 8024fda:	960f      	str	r6, [sp, #60]	; 0x3c
 8024fdc:	78e6      	ldrb	r6, [r4, #3]
 8024fde:	910d      	str	r1, [sp, #52]	; 0x34
 8024fe0:	9610      	str	r6, [sp, #64]	; 0x40
 8024fe2:	f894 9004 	ldrb.w	r9, [r4, #4]
 8024fe6:	f894 b005 	ldrb.w	fp, [r4, #5]
 8024fea:	b192      	cbz	r2, 8025012 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8024fec:	f06f 0604 	mvn.w	r6, #4
 8024ff0:	2103      	movs	r1, #3
 8024ff2:	3405      	adds	r4, #5
 8024ff4:	fb17 6701 	smlabb	r7, r7, r1, r6
 8024ff8:	19e6      	adds	r6, r4, r7
 8024ffa:	5de4      	ldrb	r4, [r4, r7]
 8024ffc:	9417      	str	r4, [sp, #92]	; 0x5c
 8024ffe:	7874      	ldrb	r4, [r6, #1]
 8025000:	9419      	str	r4, [sp, #100]	; 0x64
 8025002:	78b4      	ldrb	r4, [r6, #2]
 8025004:	941b      	str	r4, [sp, #108]	; 0x6c
 8025006:	78f4      	ldrb	r4, [r6, #3]
 8025008:	9418      	str	r4, [sp, #96]	; 0x60
 802500a:	7934      	ldrb	r4, [r6, #4]
 802500c:	941a      	str	r4, [sp, #104]	; 0x68
 802500e:	7974      	ldrb	r4, [r6, #5]
 8025010:	941c      	str	r4, [sp, #112]	; 0x70
 8025012:	b29b      	uxth	r3, r3
 8025014:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8025016:	b292      	uxth	r2, r2
 8025018:	9909      	ldr	r1, [sp, #36]	; 0x24
 802501a:	3503      	adds	r5, #3
 802501c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025020:	fb03 f402 	mul.w	r4, r3, r2
 8025024:	011b      	lsls	r3, r3, #4
 8025026:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802502a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 802502e:	1b1b      	subs	r3, r3, r4
 8025030:	b292      	uxth	r2, r2
 8025032:	b29b      	uxth	r3, r3
 8025034:	1ab6      	subs	r6, r6, r2
 8025036:	435f      	muls	r7, r3
 8025038:	b2b6      	uxth	r6, r6
 802503a:	fb03 f909 	mul.w	r9, r3, r9
 802503e:	fb03 fb0b 	mul.w	fp, r3, fp
 8025042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025044:	fb06 7000 	mla	r0, r6, r0, r7
 8025048:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 802504a:	fb06 bb03 	mla	fp, r6, r3, fp
 802504e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025050:	fb02 0007 	mla	r0, r2, r7, r0
 8025054:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8025056:	fb02 bb03 	mla	fp, r2, r3, fp
 802505a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802505c:	fb04 0007 	mla	r0, r4, r7, r0
 8025060:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8025064:	fb17 f701 	smulbb	r7, r7, r1
 8025068:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802506c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802506e:	fb00 700e 	mla	r0, r0, lr, r7
 8025072:	fb06 9101 	mla	r1, r6, r1, r9
 8025076:	b280      	uxth	r0, r0
 8025078:	1c47      	adds	r7, r0, #1
 802507a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802507e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025080:	1200      	asrs	r0, r0, #8
 8025082:	f805 0c06 	strb.w	r0, [r5, #-6]
 8025086:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025088:	fb02 1100 	mla	r1, r2, r0, r1
 802508c:	981a      	ldr	r0, [sp, #104]	; 0x68
 802508e:	fb04 1100 	mla	r1, r4, r0, r1
 8025092:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8025096:	fb04 b403 	mla	r4, r4, r3, fp
 802509a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 802509e:	fb10 f007 	smulbb	r0, r0, r7
 80250a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80250a6:	fb13 f307 	smulbb	r3, r3, r7
 80250aa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80250ae:	fb01 010e 	mla	r1, r1, lr, r0
 80250b2:	fb04 340e 	mla	r4, r4, lr, r3
 80250b6:	b289      	uxth	r1, r1
 80250b8:	b2a4      	uxth	r4, r4
 80250ba:	1c48      	adds	r0, r1, #1
 80250bc:	1c63      	adds	r3, r4, #1
 80250be:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80250c2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80250c6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80250c8:	1209      	asrs	r1, r1, #8
 80250ca:	1224      	asrs	r4, r4, #8
 80250cc:	449a      	add	sl, r3
 80250ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80250d0:	f805 1c05 	strb.w	r1, [r5, #-5]
 80250d4:	f805 4c04 	strb.w	r4, [r5, #-4]
 80250d8:	4498      	add	r8, r3
 80250da:	e707      	b.n	8024eec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80250dc:	b01f      	add	sp, #124	; 0x7c
 80250de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080250e2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80250e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250e6:	b087      	sub	sp, #28
 80250e8:	780d      	ldrb	r5, [r1, #0]
 80250ea:	784c      	ldrb	r4, [r1, #1]
 80250ec:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80250f0:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 80250f4:	9004      	str	r0, [sp, #16]
 80250f6:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80250fa:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 80250fe:	9005      	str	r0, [sp, #20]
 8025100:	fb06 bc03 	mla	ip, r6, r3, fp
 8025104:	2e00      	cmp	r6, #0
 8025106:	7888      	ldrb	r0, [r1, #2]
 8025108:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802510c:	eb02 090c 	add.w	r9, r2, ip
 8025110:	f2c0 8084 	blt.w	802521c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8025114:	42b7      	cmp	r7, r6
 8025116:	f340 8081 	ble.w	802521c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 802511a:	f1bb 0f00 	cmp.w	fp, #0
 802511e:	db79      	blt.n	8025214 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8025120:	455b      	cmp	r3, fp
 8025122:	dd77      	ble.n	8025214 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8025124:	f812 200c 	ldrb.w	r2, [r2, ip]
 8025128:	9201      	str	r2, [sp, #4]
 802512a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802512e:	9202      	str	r2, [sp, #8]
 8025130:	f899 2002 	ldrb.w	r2, [r9, #2]
 8025134:	9203      	str	r2, [sp, #12]
 8025136:	f11b 0201 	adds.w	r2, fp, #1
 802513a:	d476      	bmi.n	802522a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802513c:	4293      	cmp	r3, r2
 802513e:	dd74      	ble.n	802522a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8025140:	9a04      	ldr	r2, [sp, #16]
 8025142:	2a00      	cmp	r2, #0
 8025144:	d071      	beq.n	802522a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8025146:	f899 8003 	ldrb.w	r8, [r9, #3]
 802514a:	f899 c004 	ldrb.w	ip, [r9, #4]
 802514e:	f899 a005 	ldrb.w	sl, [r9, #5]
 8025152:	3601      	adds	r6, #1
 8025154:	d471      	bmi.n	802523a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8025156:	42b7      	cmp	r7, r6
 8025158:	dd6f      	ble.n	802523a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 802515a:	9a05      	ldr	r2, [sp, #20]
 802515c:	2a00      	cmp	r2, #0
 802515e:	d06c      	beq.n	802523a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8025160:	f1bb 0f00 	cmp.w	fp, #0
 8025164:	db65      	blt.n	8025232 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8025166:	455b      	cmp	r3, fp
 8025168:	dd63      	ble.n	8025232 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 802516a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802516e:	f819 e002 	ldrb.w	lr, [r9, r2]
 8025172:	2203      	movs	r2, #3
 8025174:	fb03 9602 	mla	r6, r3, r2, r9
 8025178:	7877      	ldrb	r7, [r6, #1]
 802517a:	78b6      	ldrb	r6, [r6, #2]
 802517c:	f11b 0b01 	adds.w	fp, fp, #1
 8025180:	d40c      	bmi.n	802519c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8025182:	455b      	cmp	r3, fp
 8025184:	dd0a      	ble.n	802519c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8025186:	9a04      	ldr	r2, [sp, #16]
 8025188:	b142      	cbz	r2, 802519c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 802518a:	2203      	movs	r2, #3
 802518c:	fb13 2002 	smlabb	r0, r3, r2, r2
 8025190:	f819 5000 	ldrb.w	r5, [r9, r0]
 8025194:	fb03 9002 	mla	r0, r3, r2, r9
 8025198:	7904      	ldrb	r4, [r0, #4]
 802519a:	7940      	ldrb	r0, [r0, #5]
 802519c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80251a0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80251a4:	fb03 fb02 	mul.w	fp, r3, r2
 80251a8:	011b      	lsls	r3, r3, #4
 80251aa:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80251ae:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 80251b2:	eba3 030b 	sub.w	r3, r3, fp
 80251b6:	b292      	uxth	r2, r2
 80251b8:	b29b      	uxth	r3, r3
 80251ba:	eba9 0902 	sub.w	r9, r9, r2
 80251be:	9304      	str	r3, [sp, #16]
 80251c0:	fa1f f989 	uxth.w	r9, r9
 80251c4:	fb03 f808 	mul.w	r8, r3, r8
 80251c8:	9b01      	ldr	r3, [sp, #4]
 80251ca:	fb09 8803 	mla	r8, r9, r3, r8
 80251ce:	9b04      	ldr	r3, [sp, #16]
 80251d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80251d4:	9b02      	ldr	r3, [sp, #8]
 80251d6:	fb02 880e 	mla	r8, r2, lr, r8
 80251da:	fb09 cc03 	mla	ip, r9, r3, ip
 80251de:	9b04      	ldr	r3, [sp, #16]
 80251e0:	fb0b 8805 	mla	r8, fp, r5, r8
 80251e4:	fb02 c707 	mla	r7, r2, r7, ip
 80251e8:	fb03 f30a 	mul.w	r3, r3, sl
 80251ec:	ea4f 2828 	mov.w	r8, r8, asr #8
 80251f0:	fb0b 7404 	mla	r4, fp, r4, r7
 80251f4:	f881 8000 	strb.w	r8, [r1]
 80251f8:	1224      	asrs	r4, r4, #8
 80251fa:	704c      	strb	r4, [r1, #1]
 80251fc:	9c03      	ldr	r4, [sp, #12]
 80251fe:	fb09 3904 	mla	r9, r9, r4, r3
 8025202:	fb02 9206 	mla	r2, r2, r6, r9
 8025206:	fb0b 2000 	mla	r0, fp, r0, r2
 802520a:	1200      	asrs	r0, r0, #8
 802520c:	7088      	strb	r0, [r1, #2]
 802520e:	b007      	add	sp, #28
 8025210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025214:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8025218:	9501      	str	r5, [sp, #4]
 802521a:	e78c      	b.n	8025136 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 802521c:	4682      	mov	sl, r0
 802521e:	46a4      	mov	ip, r4
 8025220:	46a8      	mov	r8, r5
 8025222:	9501      	str	r5, [sp, #4]
 8025224:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8025228:	e793      	b.n	8025152 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 802522a:	4682      	mov	sl, r0
 802522c:	46a4      	mov	ip, r4
 802522e:	46a8      	mov	r8, r5
 8025230:	e78f      	b.n	8025152 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8025232:	4606      	mov	r6, r0
 8025234:	4627      	mov	r7, r4
 8025236:	46ae      	mov	lr, r5
 8025238:	e7a0      	b.n	802517c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 802523a:	4606      	mov	r6, r0
 802523c:	4627      	mov	r7, r4
 802523e:	46ae      	mov	lr, r5
 8025240:	e7ac      	b.n	802519c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08025242 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025242:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025246:	b09b      	sub	sp, #108	; 0x6c
 8025248:	920b      	str	r2, [sp, #44]	; 0x2c
 802524a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802524c:	9019      	str	r0, [sp, #100]	; 0x64
 802524e:	9109      	str	r1, [sp, #36]	; 0x24
 8025250:	6850      	ldr	r0, [r2, #4]
 8025252:	9306      	str	r3, [sp, #24]
 8025254:	6812      	ldr	r2, [r2, #0]
 8025256:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802525a:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 802525e:	fb00 1303 	mla	r3, r0, r3, r1
 8025262:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025266:	18d3      	adds	r3, r2, r3
 8025268:	9307      	str	r3, [sp, #28]
 802526a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802526c:	681b      	ldr	r3, [r3, #0]
 802526e:	9308      	str	r3, [sp, #32]
 8025270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025272:	2b00      	cmp	r3, #0
 8025274:	dc03      	bgt.n	802527e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025278:	2b00      	cmp	r3, #0
 802527a:	f340 81ab 	ble.w	80255d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802527e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025280:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025284:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025288:	1e48      	subs	r0, r1, #1
 802528a:	1e55      	subs	r5, r2, #1
 802528c:	9b06      	ldr	r3, [sp, #24]
 802528e:	2b00      	cmp	r3, #0
 8025290:	f340 80b1 	ble.w	80253f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8025294:	ea5f 462b 	movs.w	r6, fp, asr #16
 8025298:	ea4f 4324 	mov.w	r3, r4, asr #16
 802529c:	d406      	bmi.n	80252ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802529e:	4286      	cmp	r6, r0
 80252a0:	da04      	bge.n	80252ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80252a2:	2b00      	cmp	r3, #0
 80252a4:	db02      	blt.n	80252ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80252a6:	42ab      	cmp	r3, r5
 80252a8:	f2c0 80a6 	blt.w	80253f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80252ac:	3601      	adds	r6, #1
 80252ae:	f100 8097 	bmi.w	80253e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80252b2:	42b1      	cmp	r1, r6
 80252b4:	f2c0 8094 	blt.w	80253e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80252b8:	3301      	adds	r3, #1
 80252ba:	f100 8091 	bmi.w	80253e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80252be:	429a      	cmp	r2, r3
 80252c0:	f2c0 808e 	blt.w	80253e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80252c4:	9b06      	ldr	r3, [sp, #24]
 80252c6:	9e07      	ldr	r6, [sp, #28]
 80252c8:	930a      	str	r3, [sp, #40]	; 0x28
 80252ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252cc:	2b00      	cmp	r3, #0
 80252ce:	f340 80b0 	ble.w	8025432 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80252d2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80252d4:	1425      	asrs	r5, r4, #16
 80252d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80252d8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80252dc:	68c7      	ldr	r7, [r0, #12]
 80252de:	ea5f 402b 	movs.w	r0, fp, asr #16
 80252e2:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80252e6:	689b      	ldr	r3, [r3, #8]
 80252e8:	f100 80ea 	bmi.w	80254c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80252ec:	f103 3cff 	add.w	ip, r3, #4294967295
 80252f0:	4560      	cmp	r0, ip
 80252f2:	f280 80e5 	bge.w	80254c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80252f6:	2d00      	cmp	r5, #0
 80252f8:	f2c0 80e2 	blt.w	80254c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80252fc:	f107 3cff 	add.w	ip, r7, #4294967295
 8025300:	4565      	cmp	r5, ip
 8025302:	f280 80dd 	bge.w	80254c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025306:	b21b      	sxth	r3, r3
 8025308:	fb05 0003 	mla	r0, r5, r3, r0
 802530c:	9d08      	ldr	r5, [sp, #32]
 802530e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025312:	182f      	adds	r7, r5, r0
 8025314:	5c2d      	ldrb	r5, [r5, r0]
 8025316:	7878      	ldrb	r0, [r7, #1]
 8025318:	f897 e002 	ldrb.w	lr, [r7, #2]
 802531c:	900c      	str	r0, [sp, #48]	; 0x30
 802531e:	f897 9003 	ldrb.w	r9, [r7, #3]
 8025322:	f897 8004 	ldrb.w	r8, [r7, #4]
 8025326:	f897 a005 	ldrb.w	sl, [r7, #5]
 802532a:	b1c9      	cbz	r1, 8025360 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802532c:	f04f 0c03 	mov.w	ip, #3
 8025330:	f06f 0004 	mvn.w	r0, #4
 8025334:	3705      	adds	r7, #5
 8025336:	fb13 030c 	smlabb	r3, r3, ip, r0
 802533a:	eb07 0c03 	add.w	ip, r7, r3
 802533e:	5cfb      	ldrb	r3, [r7, r3]
 8025340:	930d      	str	r3, [sp, #52]	; 0x34
 8025342:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8025346:	930f      	str	r3, [sp, #60]	; 0x3c
 8025348:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802534c:	9311      	str	r3, [sp, #68]	; 0x44
 802534e:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8025352:	930e      	str	r3, [sp, #56]	; 0x38
 8025354:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8025358:	9310      	str	r3, [sp, #64]	; 0x40
 802535a:	f89c 3005 	ldrb.w	r3, [ip, #5]
 802535e:	9312      	str	r3, [sp, #72]	; 0x48
 8025360:	b292      	uxth	r2, r2
 8025362:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025364:	b289      	uxth	r1, r1
 8025366:	fb02 f301 	mul.w	r3, r2, r1
 802536a:	0112      	lsls	r2, r2, #4
 802536c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025370:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025374:	1ad2      	subs	r2, r2, r3
 8025376:	b289      	uxth	r1, r1
 8025378:	b292      	uxth	r2, r2
 802537a:	1a7f      	subs	r7, r7, r1
 802537c:	fb02 f909 	mul.w	r9, r2, r9
 8025380:	b2bf      	uxth	r7, r7
 8025382:	fb02 f808 	mul.w	r8, r2, r8
 8025386:	fb02 fa0a 	mul.w	sl, r2, sl
 802538a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802538c:	fb07 9905 	mla	r9, r7, r5, r9
 8025390:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025392:	fb07 8800 	mla	r8, r7, r0, r8
 8025396:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025398:	fb07 aa0e 	mla	sl, r7, lr, sl
 802539c:	fb01 9905 	mla	r9, r1, r5, r9
 80253a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80253a2:	fb01 8800 	mla	r8, r1, r0, r8
 80253a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80253a8:	fb01 a102 	mla	r1, r1, r2, sl
 80253ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80253ae:	fb03 9905 	mla	r9, r3, r5, r9
 80253b2:	fb03 8800 	mla	r8, r3, r0, r8
 80253b6:	fb03 1302 	mla	r3, r3, r2, r1
 80253ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80253be:	ea4f 2828 	mov.w	r8, r8, asr #8
 80253c2:	121b      	asrs	r3, r3, #8
 80253c4:	f886 9000 	strb.w	r9, [r6]
 80253c8:	f886 8001 	strb.w	r8, [r6, #1]
 80253cc:	70b3      	strb	r3, [r6, #2]
 80253ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80253d0:	3603      	adds	r6, #3
 80253d2:	449b      	add	fp, r3
 80253d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80253d6:	441c      	add	r4, r3
 80253d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80253da:	3b01      	subs	r3, #1
 80253dc:	930a      	str	r3, [sp, #40]	; 0x28
 80253de:	e774      	b.n	80252ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80253e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80253e2:	449b      	add	fp, r3
 80253e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80253e6:	441c      	add	r4, r3
 80253e8:	9b06      	ldr	r3, [sp, #24]
 80253ea:	3b01      	subs	r3, #1
 80253ec:	9306      	str	r3, [sp, #24]
 80253ee:	9b07      	ldr	r3, [sp, #28]
 80253f0:	3303      	adds	r3, #3
 80253f2:	9307      	str	r3, [sp, #28]
 80253f4:	e74a      	b.n	802528c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80253f6:	d024      	beq.n	8025442 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80253f8:	9b06      	ldr	r3, [sp, #24]
 80253fa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80253fc:	3b01      	subs	r3, #1
 80253fe:	fb00 b003 	mla	r0, r0, r3, fp
 8025402:	1400      	asrs	r0, r0, #16
 8025404:	f53f af5e 	bmi.w	80252c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025408:	3901      	subs	r1, #1
 802540a:	4288      	cmp	r0, r1
 802540c:	f6bf af5a 	bge.w	80252c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025410:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025412:	fb01 4303 	mla	r3, r1, r3, r4
 8025416:	141b      	asrs	r3, r3, #16
 8025418:	f53f af54 	bmi.w	80252c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802541c:	3a01      	subs	r2, #1
 802541e:	4293      	cmp	r3, r2
 8025420:	f6bf af50 	bge.w	80252c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025424:	9b07      	ldr	r3, [sp, #28]
 8025426:	f8dd e018 	ldr.w	lr, [sp, #24]
 802542a:	1cde      	adds	r6, r3, #3
 802542c:	f1be 0f00 	cmp.w	lr, #0
 8025430:	dc5f      	bgt.n	80254f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025432:	9b06      	ldr	r3, [sp, #24]
 8025434:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025438:	9b07      	ldr	r3, [sp, #28]
 802543a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802543e:	4423      	add	r3, r4
 8025440:	9307      	str	r3, [sp, #28]
 8025442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025444:	2b00      	cmp	r3, #0
 8025446:	f340 80c5 	ble.w	80255d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802544a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802544e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025450:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025454:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025458:	eef0 6a62 	vmov.f32	s13, s5
 802545c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025460:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025464:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025468:	ee16 ba90 	vmov	fp, s13
 802546c:	eef0 6a43 	vmov.f32	s13, s6
 8025470:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025474:	ee16 4a90 	vmov	r4, s13
 8025478:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802547c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025480:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025484:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025488:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802548c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025490:	ee12 2a90 	vmov	r2, s5
 8025494:	eef0 2a47 	vmov.f32	s5, s14
 8025498:	fb92 f3f3 	sdiv	r3, r2, r3
 802549c:	ee13 2a10 	vmov	r2, s6
 80254a0:	9327      	str	r3, [sp, #156]	; 0x9c
 80254a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254a4:	eeb0 3a67 	vmov.f32	s6, s15
 80254a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80254ac:	9328      	str	r3, [sp, #160]	; 0xa0
 80254ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80254b2:	3b01      	subs	r3, #1
 80254b4:	9309      	str	r3, [sp, #36]	; 0x24
 80254b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254b8:	bf08      	it	eq
 80254ba:	4613      	moveq	r3, r2
 80254bc:	9306      	str	r3, [sp, #24]
 80254be:	e6d7      	b.n	8025270 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80254c0:	f110 0c01 	adds.w	ip, r0, #1
 80254c4:	d483      	bmi.n	80253ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80254c6:	4563      	cmp	r3, ip
 80254c8:	db81      	blt.n	80253ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80254ca:	f115 0c01 	adds.w	ip, r5, #1
 80254ce:	f53f af7e 	bmi.w	80253ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80254d2:	4567      	cmp	r7, ip
 80254d4:	f6ff af7b 	blt.w	80253ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80254d8:	b23f      	sxth	r7, r7
 80254da:	b21b      	sxth	r3, r3
 80254dc:	9700      	str	r7, [sp, #0]
 80254de:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80254e2:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80254e6:	9a08      	ldr	r2, [sp, #32]
 80254e8:	4631      	mov	r1, r6
 80254ea:	9819      	ldr	r0, [sp, #100]	; 0x64
 80254ec:	f7ff fdf9 	bl	80250e2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80254f0:	e76d      	b.n	80253ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80254f2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80254f4:	ea4f 402b 	mov.w	r0, fp, asr #16
 80254f8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80254fc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025500:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8025504:	1421      	asrs	r1, r4, #16
 8025506:	930a      	str	r3, [sp, #40]	; 0x28
 8025508:	fb0c 0101 	mla	r1, ip, r1, r0
 802550c:	9808      	ldr	r0, [sp, #32]
 802550e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025512:	1845      	adds	r5, r0, r1
 8025514:	5c40      	ldrb	r0, [r0, r1]
 8025516:	796f      	ldrb	r7, [r5, #5]
 8025518:	7869      	ldrb	r1, [r5, #1]
 802551a:	f895 8002 	ldrb.w	r8, [r5, #2]
 802551e:	f895 a003 	ldrb.w	sl, [r5, #3]
 8025522:	f895 9004 	ldrb.w	r9, [r5, #4]
 8025526:	970c      	str	r7, [sp, #48]	; 0x30
 8025528:	b1a2      	cbz	r2, 8025554 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 802552a:	2703      	movs	r7, #3
 802552c:	f06f 0304 	mvn.w	r3, #4
 8025530:	3505      	adds	r5, #5
 8025532:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8025536:	eb05 070c 	add.w	r7, r5, ip
 802553a:	f815 500c 	ldrb.w	r5, [r5, ip]
 802553e:	9513      	str	r5, [sp, #76]	; 0x4c
 8025540:	787d      	ldrb	r5, [r7, #1]
 8025542:	9515      	str	r5, [sp, #84]	; 0x54
 8025544:	78bd      	ldrb	r5, [r7, #2]
 8025546:	9517      	str	r5, [sp, #92]	; 0x5c
 8025548:	78fd      	ldrb	r5, [r7, #3]
 802554a:	9514      	str	r5, [sp, #80]	; 0x50
 802554c:	793d      	ldrb	r5, [r7, #4]
 802554e:	9516      	str	r5, [sp, #88]	; 0x58
 8025550:	797d      	ldrb	r5, [r7, #5]
 8025552:	9518      	str	r5, [sp, #96]	; 0x60
 8025554:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8025558:	b292      	uxth	r2, r2
 802555a:	3603      	adds	r6, #3
 802555c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8025560:	fb03 f502 	mul.w	r5, r3, r2
 8025564:	011b      	lsls	r3, r3, #4
 8025566:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 802556a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802556e:	1b5b      	subs	r3, r3, r5
 8025570:	b292      	uxth	r2, r2
 8025572:	b29b      	uxth	r3, r3
 8025574:	1abf      	subs	r7, r7, r2
 8025576:	fb03 f909 	mul.w	r9, r3, r9
 802557a:	b2bf      	uxth	r7, r7
 802557c:	fb03 fa0a 	mul.w	sl, r3, sl
 8025580:	fb07 9901 	mla	r9, r7, r1, r9
 8025584:	9915      	ldr	r1, [sp, #84]	; 0x54
 8025586:	fb07 aa00 	mla	sl, r7, r0, sl
 802558a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802558c:	fb02 9901 	mla	r9, r2, r1, r9
 8025590:	9916      	ldr	r1, [sp, #88]	; 0x58
 8025592:	fb02 aa00 	mla	sl, r2, r0, sl
 8025596:	9814      	ldr	r0, [sp, #80]	; 0x50
 8025598:	fb05 9901 	mla	r9, r5, r1, r9
 802559c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802559e:	fb05 aa00 	mla	sl, r5, r0, sl
 80255a2:	434b      	muls	r3, r1
 80255a4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80255a6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80255aa:	fb07 3308 	mla	r3, r7, r8, r3
 80255ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 80255b2:	f806 ac06 	strb.w	sl, [r6, #-6]
 80255b6:	fb02 3201 	mla	r2, r2, r1, r3
 80255ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80255bc:	f806 9c05 	strb.w	r9, [r6, #-5]
 80255c0:	fb05 2503 	mla	r5, r5, r3, r2
 80255c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80255c6:	122d      	asrs	r5, r5, #8
 80255c8:	449b      	add	fp, r3
 80255ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80255cc:	f806 5c04 	strb.w	r5, [r6, #-4]
 80255d0:	441c      	add	r4, r3
 80255d2:	e72b      	b.n	802542c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80255d4:	b01b      	add	sp, #108	; 0x6c
 80255d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080255da <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80255da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255de:	b087      	sub	sp, #28
 80255e0:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80255e4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80255e8:	fb05 7003 	mla	r0, r5, r3, r7
 80255ec:	2d00      	cmp	r5, #0
 80255ee:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80255f2:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 80255f6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80255fa:	f2c0 811f 	blt.w	802583c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80255fe:	45a8      	cmp	r8, r5
 8025600:	f340 811c 	ble.w	802583c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8025604:	2f00      	cmp	r7, #0
 8025606:	f2c0 8117 	blt.w	8025838 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802560a:	42bb      	cmp	r3, r7
 802560c:	f340 8114 	ble.w	8025838 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8025610:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8025614:	1c7a      	adds	r2, r7, #1
 8025616:	f100 8114 	bmi.w	8025842 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802561a:	4293      	cmp	r3, r2
 802561c:	f340 8111 	ble.w	8025842 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8025620:	2c00      	cmp	r4, #0
 8025622:	f000 8110 	beq.w	8025846 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8025626:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802562a:	3501      	adds	r5, #1
 802562c:	f100 810f 	bmi.w	802584e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8025630:	45a8      	cmp	r8, r5
 8025632:	f340 810c 	ble.w	802584e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8025636:	f1be 0f00 	cmp.w	lr, #0
 802563a:	f000 810b 	beq.w	8025854 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 802563e:	2f00      	cmp	r7, #0
 8025640:	f2c0 8103 	blt.w	802584a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8025644:	42bb      	cmp	r3, r7
 8025646:	f340 8100 	ble.w	802584a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802564a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802564e:	3701      	adds	r7, #1
 8025650:	f100 8103 	bmi.w	802585a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8025654:	42bb      	cmp	r3, r7
 8025656:	f340 8100 	ble.w	802585a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 802565a:	2c00      	cmp	r4, #0
 802565c:	f000 80ff 	beq.w	802585e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8025660:	3301      	adds	r3, #1
 8025662:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8025666:	fa1f fc84 	uxth.w	ip, r4
 802566a:	fa1f fe8e 	uxth.w	lr, lr
 802566e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025672:	fb0c f90e 	mul.w	r9, ip, lr
 8025676:	0e13      	lsrs	r3, r2, #24
 8025678:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802567c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8025680:	9302      	str	r3, [sp, #8]
 8025682:	ebac 0709 	sub.w	r7, ip, r9
 8025686:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 802568a:	fa1f f48e 	uxth.w	r4, lr
 802568e:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8025692:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025696:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 802569a:	fb0a fe0e 	mul.w	lr, sl, lr
 802569e:	1b1b      	subs	r3, r3, r4
 80256a0:	fb0a f606 	mul.w	r6, sl, r6
 80256a4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80256a8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80256ac:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80256b0:	b29b      	uxth	r3, r3
 80256b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80256b6:	b2bf      	uxth	r7, r7
 80256b8:	9301      	str	r3, [sp, #4]
 80256ba:	44e6      	add	lr, ip
 80256bc:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80256c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256c4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80256c8:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80256cc:	9303      	str	r3, [sp, #12]
 80256ce:	0a33      	lsrs	r3, r6, #8
 80256d0:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80256d4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80256d8:	9304      	str	r3, [sp, #16]
 80256da:	fb0b f606 	mul.w	r6, fp, r6
 80256de:	fb0b f000 	mul.w	r0, fp, r0
 80256e2:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80256e6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80256ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80256ee:	44b6      	add	lr, r6
 80256f0:	f500 7680 	add.w	r6, r0, #256	; 0x100
 80256f4:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80256f8:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80256fc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025700:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025704:	fb08 f606 	mul.w	r6, r8, r6
 8025708:	0a03      	lsrs	r3, r0, #8
 802570a:	fb08 f505 	mul.w	r5, r8, r5
 802570e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025712:	0a30      	lsrs	r0, r6, #8
 8025714:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025718:	9305      	str	r3, [sp, #20]
 802571a:	0e13      	lsrs	r3, r2, #24
 802571c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025720:	fb0e fe07 	mul.w	lr, lr, r7
 8025724:	4430      	add	r0, r6
 8025726:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802572a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802572e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8025732:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025736:	0a00      	lsrs	r0, r0, #8
 8025738:	435e      	muls	r6, r3
 802573a:	0a2d      	lsrs	r5, r5, #8
 802573c:	435a      	muls	r2, r3
 802573e:	9b03      	ldr	r3, [sp, #12]
 8025740:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8025744:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025748:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802574c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025750:	44b4      	add	ip, r6
 8025752:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8025756:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802575a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802575e:	9e01      	ldr	r6, [sp, #4]
 8025760:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025764:	fb03 ee06 	mla	lr, r3, r6, lr
 8025768:	9b04      	ldr	r3, [sp, #16]
 802576a:	0a12      	lsrs	r2, r2, #8
 802576c:	fb0c ee09 	mla	lr, ip, r9, lr
 8025770:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8025774:	9b05      	ldr	r3, [sp, #20]
 8025776:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802577a:	fb00 ee04 	mla	lr, r0, r4, lr
 802577e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025782:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8025786:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 802578a:	9b01      	ldr	r3, [sp, #4]
 802578c:	fb07 fe0e 	mul.w	lr, r7, lr
 8025790:	fb07 f70b 	mul.w	r7, r7, fp
 8025794:	fb03 ee06 	mla	lr, r3, r6, lr
 8025798:	fb03 730a 	mla	r3, r3, sl, r7
 802579c:	fb09 e202 	mla	r2, r9, r2, lr
 80257a0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80257a4:	fb04 2e0e 	mla	lr, r4, lr, r2
 80257a8:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80257ac:	fb04 3408 	mla	r4, r4, r8, r3
 80257b0:	9b02      	ldr	r3, [sp, #8]
 80257b2:	b292      	uxth	r2, r2
 80257b4:	fb09 4903 	mla	r9, r9, r3, r4
 80257b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80257bc:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80257c0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80257c4:	fb09 f902 	mul.w	r9, r9, r2
 80257c8:	ea40 0e0e 	orr.w	lr, r0, lr
 80257cc:	f109 0301 	add.w	r3, r9, #1
 80257d0:	fa5f f08e 	uxtb.w	r0, lr
 80257d4:	fb10 f002 	smulbb	r0, r0, r2
 80257d8:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80257dc:	780b      	ldrb	r3, [r1, #0]
 80257de:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 80257e2:	fa5f f989 	uxtb.w	r9, r9
 80257e6:	fb03 0309 	mla	r3, r3, r9, r0
 80257ea:	b29b      	uxth	r3, r3
 80257ec:	1c58      	adds	r0, r3, #1
 80257ee:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80257f2:	7848      	ldrb	r0, [r1, #1]
 80257f4:	fb10 f009 	smulbb	r0, r0, r9
 80257f8:	121b      	asrs	r3, r3, #8
 80257fa:	700b      	strb	r3, [r1, #0]
 80257fc:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8025800:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8025804:	fb03 0302 	mla	r3, r3, r2, r0
 8025808:	b29b      	uxth	r3, r3
 802580a:	1c58      	adds	r0, r3, #1
 802580c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025810:	121b      	asrs	r3, r3, #8
 8025812:	704b      	strb	r3, [r1, #1]
 8025814:	788b      	ldrb	r3, [r1, #2]
 8025816:	fb13 f909 	smulbb	r9, r3, r9
 802581a:	fb0e 9e02 	mla	lr, lr, r2, r9
 802581e:	fa1f fe8e 	uxth.w	lr, lr
 8025822:	f10e 0301 	add.w	r3, lr, #1
 8025826:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802582a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802582e:	f881 e002 	strb.w	lr, [r1, #2]
 8025832:	b007      	add	sp, #28
 8025834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025838:	2600      	movs	r6, #0
 802583a:	e6eb      	b.n	8025614 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 802583c:	2000      	movs	r0, #0
 802583e:	4606      	mov	r6, r0
 8025840:	e6f3      	b.n	802562a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8025842:	2000      	movs	r0, #0
 8025844:	e6f1      	b.n	802562a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8025846:	4620      	mov	r0, r4
 8025848:	e6ef      	b.n	802562a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802584a:	2500      	movs	r5, #0
 802584c:	e6ff      	b.n	802564e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 802584e:	2200      	movs	r2, #0
 8025850:	4615      	mov	r5, r2
 8025852:	e708      	b.n	8025666 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025854:	4672      	mov	r2, lr
 8025856:	4675      	mov	r5, lr
 8025858:	e705      	b.n	8025666 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802585a:	2200      	movs	r2, #0
 802585c:	e703      	b.n	8025666 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802585e:	4622      	mov	r2, r4
 8025860:	e701      	b.n	8025666 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08025862 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025866:	b09d      	sub	sp, #116	; 0x74
 8025868:	9219      	str	r2, [sp, #100]	; 0x64
 802586a:	9307      	str	r3, [sp, #28]
 802586c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802586e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8025872:	901b      	str	r0, [sp, #108]	; 0x6c
 8025874:	931a      	str	r3, [sp, #104]	; 0x68
 8025876:	6850      	ldr	r0, [r2, #4]
 8025878:	9117      	str	r1, [sp, #92]	; 0x5c
 802587a:	6812      	ldr	r2, [r2, #0]
 802587c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8025880:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8025884:	fb00 1303 	mla	r3, r0, r3, r1
 8025888:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802588c:	18d3      	adds	r3, r2, r3
 802588e:	930a      	str	r3, [sp, #40]	; 0x28
 8025890:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025892:	681b      	ldr	r3, [r3, #0]
 8025894:	9310      	str	r3, [sp, #64]	; 0x40
 8025896:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802589a:	930b      	str	r3, [sp, #44]	; 0x2c
 802589c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802589e:	2b00      	cmp	r3, #0
 80258a0:	dc03      	bgt.n	80258aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80258a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80258a4:	2b00      	cmp	r3, #0
 80258a6:	f340 8368 	ble.w	8025f7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80258aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80258ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80258b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80258b4:	1e48      	subs	r0, r1, #1
 80258b6:	1e57      	subs	r7, r2, #1
 80258b8:	9b07      	ldr	r3, [sp, #28]
 80258ba:	2b00      	cmp	r3, #0
 80258bc:	f340 8187 	ble.w	8025bce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80258c0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80258c4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80258c8:	d406      	bmi.n	80258d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80258ca:	4584      	cmp	ip, r0
 80258cc:	da04      	bge.n	80258d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80258ce:	2b00      	cmp	r3, #0
 80258d0:	db02      	blt.n	80258d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80258d2:	42bb      	cmp	r3, r7
 80258d4:	f2c0 817c 	blt.w	8025bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80258d8:	f11c 0c01 	adds.w	ip, ip, #1
 80258dc:	f100 816c 	bmi.w	8025bb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80258e0:	4561      	cmp	r1, ip
 80258e2:	f2c0 8169 	blt.w	8025bb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80258e6:	3301      	adds	r3, #1
 80258e8:	f100 8166 	bmi.w	8025bb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80258ec:	429a      	cmp	r2, r3
 80258ee:	f2c0 8163 	blt.w	8025bb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80258f2:	9b07      	ldr	r3, [sp, #28]
 80258f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80258f6:	9318      	str	r3, [sp, #96]	; 0x60
 80258f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80258fa:	2b00      	cmp	r3, #0
 80258fc:	f340 8186 	ble.w	8025c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025900:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025902:	142a      	asrs	r2, r5, #16
 8025904:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025908:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802590c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025910:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025914:	f100 81cb 	bmi.w	8025cae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025918:	f10e 38ff 	add.w	r8, lr, #4294967295
 802591c:	4542      	cmp	r2, r8
 802591e:	f280 81c6 	bge.w	8025cae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025922:	2800      	cmp	r0, #0
 8025924:	f2c0 81c3 	blt.w	8025cae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025928:	f103 38ff 	add.w	r8, r3, #4294967295
 802592c:	4540      	cmp	r0, r8
 802592e:	f280 81be 	bge.w	8025cae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025932:	fa0f f38e 	sxth.w	r3, lr
 8025936:	fb00 2203 	mla	r2, r0, r3, r2
 802593a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802593c:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8025940:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8025944:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025948:	2900      	cmp	r1, #0
 802594a:	f000 81a6 	beq.w	8025c9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802594e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8025952:	900c      	str	r0, [sp, #48]	; 0x30
 8025954:	0e00      	lsrs	r0, r0, #24
 8025956:	9013      	str	r0, [sp, #76]	; 0x4c
 8025958:	f1bc 0f00 	cmp.w	ip, #0
 802595c:	d00f      	beq.n	802597e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802595e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025962:	3b01      	subs	r3, #1
 8025964:	009b      	lsls	r3, r3, #2
 8025966:	3304      	adds	r3, #4
 8025968:	eb08 0003 	add.w	r0, r8, r3
 802596c:	f858 3003 	ldr.w	r3, [r8, r3]
 8025970:	9308      	str	r3, [sp, #32]
 8025972:	0e1b      	lsrs	r3, r3, #24
 8025974:	9311      	str	r3, [sp, #68]	; 0x44
 8025976:	6843      	ldr	r3, [r0, #4]
 8025978:	930d      	str	r3, [sp, #52]	; 0x34
 802597a:	0e1b      	lsrs	r3, r3, #24
 802597c:	9314      	str	r3, [sp, #80]	; 0x50
 802597e:	b289      	uxth	r1, r1
 8025980:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025982:	fa1f fc8c 	uxth.w	ip, ip
 8025986:	0108      	lsls	r0, r1, #4
 8025988:	fb01 f90c 	mul.w	r9, r1, ip
 802598c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025990:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8025994:	eba0 0809 	sub.w	r8, r0, r9
 8025998:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802599a:	fa1f f18c 	uxth.w	r1, ip
 802599e:	fa1f f888 	uxth.w	r8, r8
 80259a2:	1a5b      	subs	r3, r3, r1
 80259a4:	fb08 f000 	mul.w	r0, r8, r0
 80259a8:	b29b      	uxth	r3, r3
 80259aa:	fb03 000e 	mla	r0, r3, lr, r0
 80259ae:	fb01 0004 	mla	r0, r1, r4, r0
 80259b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80259b4:	fb09 0004 	mla	r0, r9, r4, r0
 80259b8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80259bc:	2800      	cmp	r0, #0
 80259be:	f000 80f2 	beq.w	8025ba6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80259c2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80259c6:	d01b      	beq.n	8025a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80259c8:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80259cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80259d0:	fb0e fa0a 	mul.w	sl, lr, sl
 80259d4:	fb0e fe02 	mul.w	lr, lr, r2
 80259d8:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80259dc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80259e0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80259e4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80259e8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80259ec:	4452      	add	r2, sl
 80259ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259f2:	0a12      	lsrs	r2, r2, #8
 80259f4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80259f8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80259fc:	ea42 020c 	orr.w	r2, r2, ip
 8025a00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025a02:	2cff      	cmp	r4, #255	; 0xff
 8025a04:	d021      	beq.n	8025a4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025a06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025a08:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025a0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025a0e:	fb04 fb0b 	mul.w	fp, r4, fp
 8025a12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025a14:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025a18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025a1a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025a1e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025a22:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a26:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025a2a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025a2e:	44de      	add	lr, fp
 8025a30:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025a34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025a40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a44:	ea4e 040a 	orr.w	r4, lr, sl
 8025a48:	940c      	str	r4, [sp, #48]	; 0x30
 8025a4a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025a4c:	2cff      	cmp	r4, #255	; 0xff
 8025a4e:	d021      	beq.n	8025a94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8025a50:	9c08      	ldr	r4, [sp, #32]
 8025a52:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025a56:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025a58:	fb04 fb0b 	mul.w	fp, r4, fp
 8025a5c:	9c08      	ldr	r4, [sp, #32]
 8025a5e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025a62:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025a64:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025a68:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025a6c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025a74:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025a78:	44de      	add	lr, fp
 8025a7a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025a7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025a8a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a8e:	ea4e 040a 	orr.w	r4, lr, sl
 8025a92:	9408      	str	r4, [sp, #32]
 8025a94:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025a96:	2cff      	cmp	r4, #255	; 0xff
 8025a98:	d021      	beq.n	8025ade <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8025a9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025a9c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025aa0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025aa2:	fb04 fb0b 	mul.w	fp, r4, fp
 8025aa6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025aa8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025aac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025aae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025ab2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025ab6:	fb04 fa0a 	mul.w	sl, r4, sl
 8025aba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025abe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025ac2:	44de      	add	lr, fp
 8025ac4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025ac8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025acc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ad0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ad4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ad8:	ea4e 040a 	orr.w	r4, lr, sl
 8025adc:	940d      	str	r4, [sp, #52]	; 0x34
 8025ade:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025ae0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025ae4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025ae8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025aec:	9c08      	ldr	r4, [sp, #32]
 8025aee:	fb08 fc0c 	mul.w	ip, r8, ip
 8025af2:	fb03 cc0e 	mla	ip, r3, lr, ip
 8025af6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025afa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025afc:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025b00:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025b04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025b06:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025b0a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025b0e:	fb08 f80e 	mul.w	r8, r8, lr
 8025b12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b16:	fb03 8202 	mla	r2, r3, r2, r8
 8025b1a:	9b08      	ldr	r3, [sp, #32]
 8025b1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b20:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8025b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025b26:	fb01 220a 	mla	r2, r1, sl, r2
 8025b2a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8025b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025b30:	fb09 2901 	mla	r9, r9, r1, r2
 8025b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025b36:	4343      	muls	r3, r0
 8025b38:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025b3c:	1c58      	adds	r0, r3, #1
 8025b3e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025b42:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025b46:	783b      	ldrb	r3, [r7, #0]
 8025b48:	ea4c 0c09 	orr.w	ip, ip, r9
 8025b4c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025b50:	fa5f f28c 	uxtb.w	r2, ip
 8025b54:	b2c0      	uxtb	r0, r0
 8025b56:	fb12 f201 	smulbb	r2, r2, r1
 8025b5a:	fb03 2300 	mla	r3, r3, r0, r2
 8025b5e:	b29b      	uxth	r3, r3
 8025b60:	1c5a      	adds	r2, r3, #1
 8025b62:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025b66:	787a      	ldrb	r2, [r7, #1]
 8025b68:	fb12 f200 	smulbb	r2, r2, r0
 8025b6c:	121b      	asrs	r3, r3, #8
 8025b6e:	703b      	strb	r3, [r7, #0]
 8025b70:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025b74:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025b78:	fb03 2301 	mla	r3, r3, r1, r2
 8025b7c:	b29b      	uxth	r3, r3
 8025b7e:	1c5a      	adds	r2, r3, #1
 8025b80:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025b84:	121b      	asrs	r3, r3, #8
 8025b86:	707b      	strb	r3, [r7, #1]
 8025b88:	78bb      	ldrb	r3, [r7, #2]
 8025b8a:	fb13 f000 	smulbb	r0, r3, r0
 8025b8e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025b92:	fa1f fc8c 	uxth.w	ip, ip
 8025b96:	f10c 0301 	add.w	r3, ip, #1
 8025b9a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025b9e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025ba2:	f887 c002 	strb.w	ip, [r7, #2]
 8025ba6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025ba8:	3703      	adds	r7, #3
 8025baa:	441d      	add	r5, r3
 8025bac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025bae:	441e      	add	r6, r3
 8025bb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025bb2:	3b01      	subs	r3, #1
 8025bb4:	9318      	str	r3, [sp, #96]	; 0x60
 8025bb6:	e69f      	b.n	80258f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025bb8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025bba:	441d      	add	r5, r3
 8025bbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025bbe:	441e      	add	r6, r3
 8025bc0:	9b07      	ldr	r3, [sp, #28]
 8025bc2:	3b01      	subs	r3, #1
 8025bc4:	9307      	str	r3, [sp, #28]
 8025bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025bc8:	3303      	adds	r3, #3
 8025bca:	930a      	str	r3, [sp, #40]	; 0x28
 8025bcc:	e674      	b.n	80258b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025bce:	d025      	beq.n	8025c1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8025bd0:	9b07      	ldr	r3, [sp, #28]
 8025bd2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025bd4:	3b01      	subs	r3, #1
 8025bd6:	fb00 5003 	mla	r0, r0, r3, r5
 8025bda:	1400      	asrs	r0, r0, #16
 8025bdc:	f53f ae89 	bmi.w	80258f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025be0:	3901      	subs	r1, #1
 8025be2:	4288      	cmp	r0, r1
 8025be4:	f6bf ae85 	bge.w	80258f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025be8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8025bea:	fb01 6303 	mla	r3, r1, r3, r6
 8025bee:	141b      	asrs	r3, r3, #16
 8025bf0:	f53f ae7f 	bmi.w	80258f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025bf4:	3a01      	subs	r2, #1
 8025bf6:	4293      	cmp	r3, r2
 8025bf8:	f6bf ae7b 	bge.w	80258f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025bfe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025c02:	f103 0e03 	add.w	lr, r3, #3
 8025c06:	f1bb 0f00 	cmp.w	fp, #0
 8025c0a:	dc6e      	bgt.n	8025cea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025c0c:	9b07      	ldr	r3, [sp, #28]
 8025c0e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025c18:	4423      	add	r3, r4
 8025c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8025c1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025c1e:	2b00      	cmp	r3, #0
 8025c20:	f340 81ab 	ble.w	8025f7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025c24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025c28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025c2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025c2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025c32:	eef0 6a62 	vmov.f32	s13, s5
 8025c36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025c3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025c3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c42:	ee16 5a90 	vmov	r5, s13
 8025c46:	eef0 6a43 	vmov.f32	s13, s6
 8025c4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c4e:	ee16 6a90 	vmov	r6, s13
 8025c52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025c56:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025c5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025c5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025c62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025c66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025c6a:	ee12 2a90 	vmov	r2, s5
 8025c6e:	eef0 2a47 	vmov.f32	s5, s14
 8025c72:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c76:	ee13 2a10 	vmov	r2, s6
 8025c7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8025c7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025c7e:	eeb0 3a67 	vmov.f32	s6, s15
 8025c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c86:	932a      	str	r3, [sp, #168]	; 0xa8
 8025c88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025c8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025c8c:	3b01      	subs	r3, #1
 8025c8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8025c90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025c92:	bf08      	it	eq
 8025c94:	4613      	moveq	r3, r2
 8025c96:	9307      	str	r3, [sp, #28]
 8025c98:	e600      	b.n	802589c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025c9a:	f1bc 0f00 	cmp.w	ip, #0
 8025c9e:	f43f ae6e 	beq.w	802597e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025ca2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025ca6:	9308      	str	r3, [sp, #32]
 8025ca8:	0e1b      	lsrs	r3, r3, #24
 8025caa:	9311      	str	r3, [sp, #68]	; 0x44
 8025cac:	e667      	b.n	802597e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025cae:	f112 0801 	adds.w	r8, r2, #1
 8025cb2:	f53f af78 	bmi.w	8025ba6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025cb6:	45c6      	cmp	lr, r8
 8025cb8:	f6ff af75 	blt.w	8025ba6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025cbc:	f110 0801 	adds.w	r8, r0, #1
 8025cc0:	f53f af71 	bmi.w	8025ba6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025cc4:	4543      	cmp	r3, r8
 8025cc6:	f6ff af6e 	blt.w	8025ba6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025cca:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8025ccc:	b21b      	sxth	r3, r3
 8025cce:	9201      	str	r2, [sp, #4]
 8025cd0:	9300      	str	r3, [sp, #0]
 8025cd2:	fa0f f38e 	sxth.w	r3, lr
 8025cd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025cd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025cdc:	e9cd c404 	strd	ip, r4, [sp, #16]
 8025ce0:	4639      	mov	r1, r7
 8025ce2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025ce4:	f7ff fc79 	bl	80255da <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8025ce8:	e75d      	b.n	8025ba6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025cea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025cec:	142f      	asrs	r7, r5, #16
 8025cee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025cf0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025cf4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8025cf8:	1433      	asrs	r3, r6, #16
 8025cfa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025cfe:	fb02 7303 	mla	r3, r2, r3, r7
 8025d02:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8025d06:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025d0a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025d0e:	2900      	cmp	r1, #0
 8025d10:	f000 812a 	beq.w	8025f68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8025d14:	687c      	ldr	r4, [r7, #4]
 8025d16:	940e      	str	r4, [sp, #56]	; 0x38
 8025d18:	0e24      	lsrs	r4, r4, #24
 8025d1a:	9415      	str	r4, [sp, #84]	; 0x54
 8025d1c:	b178      	cbz	r0, 8025d3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8025d1e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8025d22:	3a01      	subs	r2, #1
 8025d24:	0092      	lsls	r2, r2, #2
 8025d26:	3204      	adds	r2, #4
 8025d28:	eb07 0802 	add.w	r8, r7, r2
 8025d2c:	58ba      	ldr	r2, [r7, r2]
 8025d2e:	9209      	str	r2, [sp, #36]	; 0x24
 8025d30:	0e12      	lsrs	r2, r2, #24
 8025d32:	9212      	str	r2, [sp, #72]	; 0x48
 8025d34:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8025d38:	920f      	str	r2, [sp, #60]	; 0x3c
 8025d3a:	0e12      	lsrs	r2, r2, #24
 8025d3c:	9216      	str	r2, [sp, #88]	; 0x58
 8025d3e:	b289      	uxth	r1, r1
 8025d40:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025d42:	b280      	uxth	r0, r0
 8025d44:	fb01 f900 	mul.w	r9, r1, r0
 8025d48:	0109      	lsls	r1, r1, #4
 8025d4a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025d4e:	eba1 0809 	sub.w	r8, r1, r9
 8025d52:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8025d56:	9915      	ldr	r1, [sp, #84]	; 0x54
 8025d58:	b280      	uxth	r0, r0
 8025d5a:	fa1f f888 	uxth.w	r8, r8
 8025d5e:	1a12      	subs	r2, r2, r0
 8025d60:	fb08 f101 	mul.w	r1, r8, r1
 8025d64:	b292      	uxth	r2, r2
 8025d66:	fb02 110c 	mla	r1, r2, ip, r1
 8025d6a:	fb00 1104 	mla	r1, r0, r4, r1
 8025d6e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025d70:	fb09 1104 	mla	r1, r9, r4, r1
 8025d74:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025d78:	2900      	cmp	r1, #0
 8025d7a:	f000 80ec 	beq.w	8025f56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8025d7e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025d82:	d019      	beq.n	8025db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8025d84:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025d88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025d8c:	fb0c fa0a 	mul.w	sl, ip, sl
 8025d90:	fb0c fc03 	mul.w	ip, ip, r3
 8025d94:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025d98:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025d9c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025da0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025da4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025da8:	4453      	add	r3, sl
 8025daa:	0a3f      	lsrs	r7, r7, #8
 8025dac:	0a1b      	lsrs	r3, r3, #8
 8025dae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025db2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025db6:	433b      	orrs	r3, r7
 8025db8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025dba:	2cff      	cmp	r4, #255	; 0xff
 8025dbc:	d020      	beq.n	8025e00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8025dbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025dc0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025dc4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025dc6:	4367      	muls	r7, r4
 8025dc8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025dca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025dce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025dd2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025dd4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025dd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ddc:	fb04 fa0a 	mul.w	sl, r4, sl
 8025de0:	44bc      	add	ip, r7
 8025de2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025de6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025dea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025dee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025df2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025df6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025dfa:	ea4c 040a 	orr.w	r4, ip, sl
 8025dfe:	940e      	str	r4, [sp, #56]	; 0x38
 8025e00:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025e02:	2cff      	cmp	r4, #255	; 0xff
 8025e04:	d020      	beq.n	8025e48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8025e06:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025e08:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025e0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025e0e:	4367      	muls	r7, r4
 8025e10:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025e12:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025e16:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025e1a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025e1c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025e20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e24:	fb04 fa0a 	mul.w	sl, r4, sl
 8025e28:	44bc      	add	ip, r7
 8025e2a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025e2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e32:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025e36:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e3e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025e42:	ea4c 040a 	orr.w	r4, ip, sl
 8025e46:	9409      	str	r4, [sp, #36]	; 0x24
 8025e48:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025e4a:	2cff      	cmp	r4, #255	; 0xff
 8025e4c:	d020      	beq.n	8025e90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8025e4e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025e50:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025e54:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025e56:	4367      	muls	r7, r4
 8025e58:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025e5a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025e5e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025e62:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025e64:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025e68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e6c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025e70:	44bc      	add	ip, r7
 8025e72:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025e76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e7a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025e7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025e8a:	ea4c 040a 	orr.w	r4, ip, sl
 8025e8e:	940f      	str	r4, [sp, #60]	; 0x3c
 8025e90:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025e92:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025e96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e9a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025e9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025ea0:	fb08 f707 	mul.w	r7, r8, r7
 8025ea4:	fb02 770c 	mla	r7, r2, ip, r7
 8025ea8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025eac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025eae:	fb00 770c 	mla	r7, r0, ip, r7
 8025eb2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025eb6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025eb8:	fb09 770c 	mla	r7, r9, ip, r7
 8025ebc:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025ec0:	fb08 f80c 	mul.w	r8, r8, ip
 8025ec4:	0a3f      	lsrs	r7, r7, #8
 8025ec6:	fb02 8303 	mla	r3, r2, r3, r8
 8025eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025ecc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025ed0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025ed4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025ed6:	fb00 330a 	mla	r3, r0, sl, r3
 8025eda:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025ede:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025ee0:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025ee6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025eea:	434b      	muls	r3, r1
 8025eec:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025ef0:	1c59      	adds	r1, r3, #1
 8025ef2:	ea47 070c 	orr.w	r7, r7, ip
 8025ef6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025efa:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025efe:	b2fa      	uxtb	r2, r7
 8025f00:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025f04:	fb12 f200 	smulbb	r2, r2, r0
 8025f08:	b2c9      	uxtb	r1, r1
 8025f0a:	fb03 2301 	mla	r3, r3, r1, r2
 8025f0e:	b29b      	uxth	r3, r3
 8025f10:	1c5a      	adds	r2, r3, #1
 8025f12:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025f16:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025f1a:	fb12 f201 	smulbb	r2, r2, r1
 8025f1e:	121b      	asrs	r3, r3, #8
 8025f20:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025f24:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8025f28:	0c3f      	lsrs	r7, r7, #16
 8025f2a:	fb03 2300 	mla	r3, r3, r0, r2
 8025f2e:	b29b      	uxth	r3, r3
 8025f30:	1c5a      	adds	r2, r3, #1
 8025f32:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025f36:	121b      	asrs	r3, r3, #8
 8025f38:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025f3c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025f40:	fb13 f101 	smulbb	r1, r3, r1
 8025f44:	fb07 1700 	mla	r7, r7, r0, r1
 8025f48:	b2bf      	uxth	r7, r7
 8025f4a:	1c79      	adds	r1, r7, #1
 8025f4c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8025f50:	123f      	asrs	r7, r7, #8
 8025f52:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8025f56:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025f58:	f10e 0e03 	add.w	lr, lr, #3
 8025f5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025f60:	441d      	add	r5, r3
 8025f62:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025f64:	441e      	add	r6, r3
 8025f66:	e64e      	b.n	8025c06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8025f68:	2800      	cmp	r0, #0
 8025f6a:	f43f aee8 	beq.w	8025d3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8025f6e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8025f72:	9209      	str	r2, [sp, #36]	; 0x24
 8025f74:	0e12      	lsrs	r2, r2, #24
 8025f76:	9212      	str	r2, [sp, #72]	; 0x48
 8025f78:	e6e1      	b.n	8025d3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8025f7a:	b01d      	add	sp, #116	; 0x74
 8025f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025f80 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8025f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f84:	b087      	sub	sp, #28
 8025f86:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8025f8a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8025f8e:	fb05 7003 	mla	r0, r5, r3, r7
 8025f92:	2d00      	cmp	r5, #0
 8025f94:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8025f98:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8025f9c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8025fa0:	f2c0 810a 	blt.w	80261b8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8025fa4:	45a8      	cmp	r8, r5
 8025fa6:	f340 8107 	ble.w	80261b8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8025faa:	2f00      	cmp	r7, #0
 8025fac:	f2c0 8102 	blt.w	80261b4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8025fb0:	42bb      	cmp	r3, r7
 8025fb2:	f340 80ff 	ble.w	80261b4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8025fb6:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8025fba:	1c7a      	adds	r2, r7, #1
 8025fbc:	f100 80ff 	bmi.w	80261be <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8025fc0:	4293      	cmp	r3, r2
 8025fc2:	f340 80fc 	ble.w	80261be <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8025fc6:	2c00      	cmp	r4, #0
 8025fc8:	f000 80fb 	beq.w	80261c2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8025fcc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8025fd0:	3501      	adds	r5, #1
 8025fd2:	f100 80fa 	bmi.w	80261ca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8025fd6:	45a8      	cmp	r8, r5
 8025fd8:	f340 80f7 	ble.w	80261ca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8025fdc:	f1be 0f00 	cmp.w	lr, #0
 8025fe0:	f000 80f6 	beq.w	80261d0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8025fe4:	2f00      	cmp	r7, #0
 8025fe6:	f2c0 80ee 	blt.w	80261c6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8025fea:	42bb      	cmp	r3, r7
 8025fec:	f340 80eb 	ble.w	80261c6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8025ff0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8025ff4:	3701      	adds	r7, #1
 8025ff6:	f100 80ee 	bmi.w	80261d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8025ffa:	42bb      	cmp	r3, r7
 8025ffc:	f340 80eb 	ble.w	80261d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8026000:	2c00      	cmp	r4, #0
 8026002:	f000 80ea 	beq.w	80261da <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8026006:	3301      	adds	r3, #1
 8026008:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802600c:	fa1f fc84 	uxth.w	ip, r4
 8026010:	fa1f fe8e 	uxth.w	lr, lr
 8026014:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026018:	fb0c f90e 	mul.w	r9, ip, lr
 802601c:	0e13      	lsrs	r3, r2, #24
 802601e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8026022:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8026026:	9302      	str	r3, [sp, #8]
 8026028:	ebac 0709 	sub.w	r7, ip, r9
 802602c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8026030:	fa1f f48e 	uxth.w	r4, lr
 8026034:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8026038:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802603c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8026040:	fb0a fe0e 	mul.w	lr, sl, lr
 8026044:	1b1b      	subs	r3, r3, r4
 8026046:	fb0a f606 	mul.w	r6, sl, r6
 802604a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802604e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8026052:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026056:	b29b      	uxth	r3, r3
 8026058:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802605c:	b2bf      	uxth	r7, r7
 802605e:	9301      	str	r3, [sp, #4]
 8026060:	44e6      	add	lr, ip
 8026062:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8026066:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802606a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802606e:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8026072:	9303      	str	r3, [sp, #12]
 8026074:	0a33      	lsrs	r3, r6, #8
 8026076:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 802607a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802607e:	9304      	str	r3, [sp, #16]
 8026080:	fb0b f606 	mul.w	r6, fp, r6
 8026084:	fb0b f000 	mul.w	r0, fp, r0
 8026088:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802608c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026090:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026094:	44b6      	add	lr, r6
 8026096:	f500 7680 	add.w	r6, r0, #256	; 0x100
 802609a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802609e:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80260a2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80260a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80260aa:	fb08 f606 	mul.w	r6, r8, r6
 80260ae:	0a03      	lsrs	r3, r0, #8
 80260b0:	fb08 f505 	mul.w	r5, r8, r5
 80260b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80260b8:	0a30      	lsrs	r0, r6, #8
 80260ba:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80260be:	9305      	str	r3, [sp, #20]
 80260c0:	0e13      	lsrs	r3, r2, #24
 80260c2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80260c6:	fb0e fe07 	mul.w	lr, lr, r7
 80260ca:	4430      	add	r0, r6
 80260cc:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80260d0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80260d4:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80260d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80260dc:	0a00      	lsrs	r0, r0, #8
 80260de:	435e      	muls	r6, r3
 80260e0:	0a2d      	lsrs	r5, r5, #8
 80260e2:	435a      	muls	r2, r3
 80260e4:	9b03      	ldr	r3, [sp, #12]
 80260e6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80260ea:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80260ee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80260f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80260f6:	44b4      	add	ip, r6
 80260f8:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80260fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026100:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8026104:	9e01      	ldr	r6, [sp, #4]
 8026106:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802610a:	fb03 ee06 	mla	lr, r3, r6, lr
 802610e:	9b04      	ldr	r3, [sp, #16]
 8026110:	0a12      	lsrs	r2, r2, #8
 8026112:	fb0c ee09 	mla	lr, ip, r9, lr
 8026116:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 802611a:	9b05      	ldr	r3, [sp, #20]
 802611c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026120:	fb00 ee04 	mla	lr, r0, r4, lr
 8026124:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026128:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 802612c:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8026130:	9b01      	ldr	r3, [sp, #4]
 8026132:	fb07 fe0e 	mul.w	lr, r7, lr
 8026136:	fb07 f70b 	mul.w	r7, r7, fp
 802613a:	fb03 ee06 	mla	lr, r3, r6, lr
 802613e:	fb03 730a 	mla	r3, r3, sl, r7
 8026142:	fb09 e202 	mla	r2, r9, r2, lr
 8026146:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802614a:	fb04 2e0e 	mla	lr, r4, lr, r2
 802614e:	fb04 3408 	mla	r4, r4, r8, r3
 8026152:	9b02      	ldr	r3, [sp, #8]
 8026154:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026158:	fb09 4903 	mla	r9, r9, r3, r4
 802615c:	780b      	ldrb	r3, [r1, #0]
 802615e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026162:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8026166:	ea40 0e0e 	orr.w	lr, r0, lr
 802616a:	fa5f f989 	uxtb.w	r9, r9
 802616e:	fb03 f209 	mul.w	r2, r3, r9
 8026172:	1c53      	adds	r3, r2, #1
 8026174:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026178:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802617c:	700b      	strb	r3, [r1, #0]
 802617e:	784b      	ldrb	r3, [r1, #1]
 8026180:	fb03 f309 	mul.w	r3, r3, r9
 8026184:	1c5a      	adds	r2, r3, #1
 8026186:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802618a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802618e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026192:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026196:	704b      	strb	r3, [r1, #1]
 8026198:	788b      	ldrb	r3, [r1, #2]
 802619a:	fb03 f909 	mul.w	r9, r3, r9
 802619e:	f109 0301 	add.w	r3, r9, #1
 80261a2:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80261a6:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 80261aa:	f881 e002 	strb.w	lr, [r1, #2]
 80261ae:	b007      	add	sp, #28
 80261b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261b4:	2600      	movs	r6, #0
 80261b6:	e700      	b.n	8025fba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 80261b8:	2000      	movs	r0, #0
 80261ba:	4606      	mov	r6, r0
 80261bc:	e708      	b.n	8025fd0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80261be:	2000      	movs	r0, #0
 80261c0:	e706      	b.n	8025fd0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80261c2:	4620      	mov	r0, r4
 80261c4:	e704      	b.n	8025fd0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80261c6:	2500      	movs	r5, #0
 80261c8:	e714      	b.n	8025ff4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 80261ca:	2200      	movs	r2, #0
 80261cc:	4615      	mov	r5, r2
 80261ce:	e71d      	b.n	802600c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80261d0:	4672      	mov	r2, lr
 80261d2:	4675      	mov	r5, lr
 80261d4:	e71a      	b.n	802600c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80261d6:	2200      	movs	r2, #0
 80261d8:	e718      	b.n	802600c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80261da:	4622      	mov	r2, r4
 80261dc:	e716      	b.n	802600c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

080261de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80261de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261e2:	b099      	sub	sp, #100	; 0x64
 80261e4:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 80261e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80261ea:	9017      	str	r0, [sp, #92]	; 0x5c
 80261ec:	9306      	str	r3, [sp, #24]
 80261ee:	6850      	ldr	r0, [r2, #4]
 80261f0:	6812      	ldr	r2, [r2, #0]
 80261f2:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80261f6:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 80261fa:	fb00 1303 	mla	r3, r0, r3, r1
 80261fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026202:	18d3      	adds	r3, r2, r3
 8026204:	9309      	str	r3, [sp, #36]	; 0x24
 8026206:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026208:	681b      	ldr	r3, [r3, #0]
 802620a:	930e      	str	r3, [sp, #56]	; 0x38
 802620c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802620e:	2b00      	cmp	r3, #0
 8026210:	dc03      	bgt.n	802621a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026212:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026214:	2b00      	cmp	r3, #0
 8026216:	f340 8360 	ble.w	80268da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 802621a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802621c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026220:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026224:	1e48      	subs	r0, r1, #1
 8026226:	1e57      	subs	r7, r2, #1
 8026228:	9b06      	ldr	r3, [sp, #24]
 802622a:	2b00      	cmp	r3, #0
 802622c:	f340 817b 	ble.w	8026526 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8026230:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026234:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026238:	d406      	bmi.n	8026248 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802623a:	4584      	cmp	ip, r0
 802623c:	da04      	bge.n	8026248 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802623e:	2b00      	cmp	r3, #0
 8026240:	db02      	blt.n	8026248 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026242:	42bb      	cmp	r3, r7
 8026244:	f2c0 8170 	blt.w	8026528 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026248:	f11c 0c01 	adds.w	ip, ip, #1
 802624c:	f100 8160 	bmi.w	8026510 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026250:	4561      	cmp	r1, ip
 8026252:	f2c0 815d 	blt.w	8026510 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026256:	3301      	adds	r3, #1
 8026258:	f100 815a 	bmi.w	8026510 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802625c:	429a      	cmp	r2, r3
 802625e:	f2c0 8157 	blt.w	8026510 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026262:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026266:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026268:	f1b8 0f00 	cmp.w	r8, #0
 802626c:	f340 8179 	ble.w	8026562 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8026270:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8026272:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026276:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026278:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802627c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026280:	142a      	asrs	r2, r5, #16
 8026282:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026286:	689b      	ldr	r3, [r3, #8]
 8026288:	f100 81be 	bmi.w	8026608 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802628c:	f103 39ff 	add.w	r9, r3, #4294967295
 8026290:	454a      	cmp	r2, r9
 8026292:	f280 81b9 	bge.w	8026608 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026296:	f1bc 0f00 	cmp.w	ip, #0
 802629a:	f2c0 81b5 	blt.w	8026608 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802629e:	f10e 39ff 	add.w	r9, lr, #4294967295
 80262a2:	45cc      	cmp	ip, r9
 80262a4:	f280 81b0 	bge.w	8026608 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80262a8:	b21b      	sxth	r3, r3
 80262aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80262ac:	fb0c 2203 	mla	r2, ip, r3, r2
 80262b0:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80262b4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80262b8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80262bc:	2900      	cmp	r1, #0
 80262be:	f000 8197 	beq.w	80265f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80262c2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80262c6:	940a      	str	r4, [sp, #40]	; 0x28
 80262c8:	0e24      	lsrs	r4, r4, #24
 80262ca:	9411      	str	r4, [sp, #68]	; 0x44
 80262cc:	b180      	cbz	r0, 80262f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80262ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80262d2:	3b01      	subs	r3, #1
 80262d4:	009b      	lsls	r3, r3, #2
 80262d6:	3304      	adds	r3, #4
 80262d8:	eb09 0c03 	add.w	ip, r9, r3
 80262dc:	f859 3003 	ldr.w	r3, [r9, r3]
 80262e0:	9307      	str	r3, [sp, #28]
 80262e2:	0e1b      	lsrs	r3, r3, #24
 80262e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80262e6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80262ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80262ec:	0e1b      	lsrs	r3, r3, #24
 80262ee:	9312      	str	r3, [sp, #72]	; 0x48
 80262f0:	b289      	uxth	r1, r1
 80262f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80262f4:	b280      	uxth	r0, r0
 80262f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80262f8:	fb01 fa00 	mul.w	sl, r1, r0
 80262fc:	0109      	lsls	r1, r1, #4
 80262fe:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8026302:	eba1 090a 	sub.w	r9, r1, sl
 8026306:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802630a:	b280      	uxth	r0, r0
 802630c:	fa1f f989 	uxth.w	r9, r9
 8026310:	1a09      	subs	r1, r1, r0
 8026312:	fb09 f303 	mul.w	r3, r9, r3
 8026316:	b289      	uxth	r1, r1
 8026318:	fb01 330e 	mla	r3, r1, lr, r3
 802631c:	fb00 3304 	mla	r3, r0, r4, r3
 8026320:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026322:	fb0a 3304 	mla	r3, sl, r4, r3
 8026326:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802632a:	2b00      	cmp	r3, #0
 802632c:	f000 80e8 	beq.w	8026500 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026330:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026334:	d01b      	beq.n	802636e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8026336:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 802633a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802633e:	fb0e fb0b 	mul.w	fp, lr, fp
 8026342:	fb0e fe02 	mul.w	lr, lr, r2
 8026346:	ea4f 221b 	mov.w	r2, fp, lsr #8
 802634a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802634e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026352:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026356:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802635a:	445a      	add	r2, fp
 802635c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026360:	0a12      	lsrs	r2, r2, #8
 8026362:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026366:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802636a:	ea42 020c 	orr.w	r2, r2, ip
 802636e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026370:	2cff      	cmp	r4, #255	; 0xff
 8026372:	d021      	beq.n	80263b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8026374:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026376:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802637a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802637c:	fb04 fc0c 	mul.w	ip, r4, ip
 8026380:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026382:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026386:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802638a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802638c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026390:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026394:	fb04 fb0b 	mul.w	fp, r4, fp
 8026398:	44e6      	add	lr, ip
 802639a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802639e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263a2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80263a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263aa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80263ae:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80263b2:	ea4e 040b 	orr.w	r4, lr, fp
 80263b6:	940a      	str	r4, [sp, #40]	; 0x28
 80263b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80263ba:	2cff      	cmp	r4, #255	; 0xff
 80263bc:	d021      	beq.n	8026402 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80263be:	9c07      	ldr	r4, [sp, #28]
 80263c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80263c4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80263c6:	fb04 fc0c 	mul.w	ip, r4, ip
 80263ca:	9c07      	ldr	r4, [sp, #28]
 80263cc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80263d0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80263d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80263d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80263da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263de:	fb04 fb0b 	mul.w	fp, r4, fp
 80263e2:	44e6      	add	lr, ip
 80263e4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80263e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263ec:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80263f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263f4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80263f8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80263fc:	ea4e 040b 	orr.w	r4, lr, fp
 8026400:	9407      	str	r4, [sp, #28]
 8026402:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026404:	2cff      	cmp	r4, #255	; 0xff
 8026406:	d021      	beq.n	802644c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8026408:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802640a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802640e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026410:	fb04 fc0c 	mul.w	ip, r4, ip
 8026414:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026416:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802641a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802641e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026420:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026424:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026428:	fb04 fb0b 	mul.w	fp, r4, fp
 802642c:	44e6      	add	lr, ip
 802642e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8026432:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026436:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802643a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802643e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026442:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026446:	ea4e 040b 	orr.w	r4, lr, fp
 802644a:	940b      	str	r4, [sp, #44]	; 0x2c
 802644c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802644e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026452:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026456:	2bff      	cmp	r3, #255	; 0xff
 8026458:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802645c:	9c07      	ldr	r4, [sp, #28]
 802645e:	fb09 fc0c 	mul.w	ip, r9, ip
 8026462:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026466:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802646a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802646c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026470:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026474:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026476:	fb0a cc0e 	mla	ip, sl, lr, ip
 802647a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802647e:	fb09 f90e 	mul.w	r9, r9, lr
 8026482:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026486:	fb01 9202 	mla	r2, r1, r2, r9
 802648a:	9907      	ldr	r1, [sp, #28]
 802648c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026490:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8026494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026496:	fb00 220b 	mla	r2, r0, fp, r2
 802649a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802649e:	fb0a 2a00 	mla	sl, sl, r0, r2
 80264a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80264a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80264aa:	ea4c 0c0a 	orr.w	ip, ip, sl
 80264ae:	fa5f f08c 	uxtb.w	r0, ip
 80264b2:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80264b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80264ba:	f000 80a2 	beq.w	8026602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80264be:	43db      	mvns	r3, r3
 80264c0:	783a      	ldrb	r2, [r7, #0]
 80264c2:	f897 a002 	ldrb.w	sl, [r7, #2]
 80264c6:	b2db      	uxtb	r3, r3
 80264c8:	fb02 fe03 	mul.w	lr, r2, r3
 80264cc:	fb0a fa03 	mul.w	sl, sl, r3
 80264d0:	f10e 0201 	add.w	r2, lr, #1
 80264d4:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80264d8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80264dc:	703a      	strb	r2, [r7, #0]
 80264de:	787a      	ldrb	r2, [r7, #1]
 80264e0:	fb02 f003 	mul.w	r0, r2, r3
 80264e4:	f10a 0301 	add.w	r3, sl, #1
 80264e8:	1c42      	adds	r2, r0, #1
 80264ea:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80264ee:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80264f2:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80264f6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80264fa:	707a      	strb	r2, [r7, #1]
 80264fc:	f887 c002 	strb.w	ip, [r7, #2]
 8026500:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026502:	3703      	adds	r7, #3
 8026504:	f108 38ff 	add.w	r8, r8, #4294967295
 8026508:	441d      	add	r5, r3
 802650a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802650c:	441e      	add	r6, r3
 802650e:	e6ab      	b.n	8026268 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026510:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026512:	441d      	add	r5, r3
 8026514:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026516:	441e      	add	r6, r3
 8026518:	9b06      	ldr	r3, [sp, #24]
 802651a:	3b01      	subs	r3, #1
 802651c:	9306      	str	r3, [sp, #24]
 802651e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026520:	3303      	adds	r3, #3
 8026522:	9309      	str	r3, [sp, #36]	; 0x24
 8026524:	e680      	b.n	8026228 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026526:	d024      	beq.n	8026572 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026528:	9b06      	ldr	r3, [sp, #24]
 802652a:	9825      	ldr	r0, [sp, #148]	; 0x94
 802652c:	3b01      	subs	r3, #1
 802652e:	fb00 5003 	mla	r0, r0, r3, r5
 8026532:	1400      	asrs	r0, r0, #16
 8026534:	f53f ae95 	bmi.w	8026262 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026538:	3901      	subs	r1, #1
 802653a:	4288      	cmp	r0, r1
 802653c:	f6bf ae91 	bge.w	8026262 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026540:	9926      	ldr	r1, [sp, #152]	; 0x98
 8026542:	fb01 6303 	mla	r3, r1, r3, r6
 8026546:	141b      	asrs	r3, r3, #16
 8026548:	f53f ae8b 	bmi.w	8026262 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802654c:	3a01      	subs	r2, #1
 802654e:	4293      	cmp	r3, r2
 8026550:	f6bf ae87 	bge.w	8026262 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026556:	f8dd b018 	ldr.w	fp, [sp, #24]
 802655a:	1cdf      	adds	r7, r3, #3
 802655c:	f1bb 0f00 	cmp.w	fp, #0
 8026560:	dc6e      	bgt.n	8026640 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8026562:	9b06      	ldr	r3, [sp, #24]
 8026564:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802656a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802656e:	4423      	add	r3, r4
 8026570:	9309      	str	r3, [sp, #36]	; 0x24
 8026572:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026574:	2b00      	cmp	r3, #0
 8026576:	f340 81b0 	ble.w	80268da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 802657a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802657e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026580:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026584:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026588:	eef0 6a62 	vmov.f32	s13, s5
 802658c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026590:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026594:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026598:	ee16 5a90 	vmov	r5, s13
 802659c:	eef0 6a43 	vmov.f32	s13, s6
 80265a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265a4:	ee16 6a90 	vmov	r6, s13
 80265a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80265ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80265b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80265b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80265b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80265bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80265c0:	ee12 2a90 	vmov	r2, s5
 80265c4:	eef0 2a47 	vmov.f32	s5, s14
 80265c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80265cc:	ee13 2a10 	vmov	r2, s6
 80265d0:	9325      	str	r3, [sp, #148]	; 0x94
 80265d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80265d4:	eeb0 3a67 	vmov.f32	s6, s15
 80265d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80265dc:	9326      	str	r3, [sp, #152]	; 0x98
 80265de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80265e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80265e2:	3b01      	subs	r3, #1
 80265e4:	9315      	str	r3, [sp, #84]	; 0x54
 80265e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80265e8:	bf08      	it	eq
 80265ea:	4613      	moveq	r3, r2
 80265ec:	9306      	str	r3, [sp, #24]
 80265ee:	e60d      	b.n	802620c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80265f0:	2800      	cmp	r0, #0
 80265f2:	f43f ae7d 	beq.w	80262f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80265f6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80265fa:	9307      	str	r3, [sp, #28]
 80265fc:	0e1b      	lsrs	r3, r3, #24
 80265fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8026600:	e676      	b.n	80262f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8026602:	7038      	strb	r0, [r7, #0]
 8026604:	7079      	strb	r1, [r7, #1]
 8026606:	e779      	b.n	80264fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8026608:	f112 0901 	adds.w	r9, r2, #1
 802660c:	f53f af78 	bmi.w	8026500 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026610:	454b      	cmp	r3, r9
 8026612:	f6ff af75 	blt.w	8026500 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026616:	f11c 0901 	adds.w	r9, ip, #1
 802661a:	f53f af71 	bmi.w	8026500 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802661e:	45ce      	cmp	lr, r9
 8026620:	f6ff af6e 	blt.w	8026500 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026624:	b21b      	sxth	r3, r3
 8026626:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802662a:	fa0f f28e 	sxth.w	r2, lr
 802662e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026632:	9200      	str	r2, [sp, #0]
 8026634:	4639      	mov	r1, r7
 8026636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026638:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802663a:	f7ff fca1 	bl	8025f80 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802663e:	e75f      	b.n	8026500 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026640:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026642:	1429      	asrs	r1, r5, #16
 8026644:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026646:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802664a:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802664e:	1433      	asrs	r3, r6, #16
 8026650:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026654:	fb0c 1303 	mla	r3, ip, r3, r1
 8026658:	990e      	ldr	r1, [sp, #56]	; 0x38
 802665a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802665e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026662:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026666:	2a00      	cmp	r2, #0
 8026668:	f000 8129 	beq.w	80268be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802666c:	684c      	ldr	r4, [r1, #4]
 802666e:	940c      	str	r4, [sp, #48]	; 0x30
 8026670:	0e24      	lsrs	r4, r4, #24
 8026672:	9413      	str	r4, [sp, #76]	; 0x4c
 8026674:	b198      	cbz	r0, 802669e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8026676:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 802667a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802667e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8026682:	f10c 0c04 	add.w	ip, ip, #4
 8026686:	eb01 080c 	add.w	r8, r1, ip
 802668a:	f851 100c 	ldr.w	r1, [r1, ip]
 802668e:	9108      	str	r1, [sp, #32]
 8026690:	0e09      	lsrs	r1, r1, #24
 8026692:	9110      	str	r1, [sp, #64]	; 0x40
 8026694:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8026698:	910d      	str	r1, [sp, #52]	; 0x34
 802669a:	0e09      	lsrs	r1, r1, #24
 802669c:	9114      	str	r1, [sp, #80]	; 0x50
 802669e:	b292      	uxth	r2, r2
 80266a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80266a2:	b280      	uxth	r0, r0
 80266a4:	fb02 f900 	mul.w	r9, r2, r0
 80266a8:	0112      	lsls	r2, r2, #4
 80266aa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80266ae:	eba2 0809 	sub.w	r8, r2, r9
 80266b2:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80266b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80266b8:	b280      	uxth	r0, r0
 80266ba:	fa1f f888 	uxth.w	r8, r8
 80266be:	1a09      	subs	r1, r1, r0
 80266c0:	fb08 f202 	mul.w	r2, r8, r2
 80266c4:	b289      	uxth	r1, r1
 80266c6:	fb01 220e 	mla	r2, r1, lr, r2
 80266ca:	fb00 2204 	mla	r2, r0, r4, r2
 80266ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80266d0:	fb09 2204 	mla	r2, r9, r4, r2
 80266d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80266d8:	2a00      	cmp	r2, #0
 80266da:	f000 80e8 	beq.w	80268ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80266de:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80266e2:	d01b      	beq.n	802671c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80266e4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80266e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80266ec:	fb0e fa0a 	mul.w	sl, lr, sl
 80266f0:	fb0e fe03 	mul.w	lr, lr, r3
 80266f4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80266f8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80266fc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026700:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026704:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026708:	4453      	add	r3, sl
 802670a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802670e:	0a1b      	lsrs	r3, r3, #8
 8026710:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026714:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026718:	ea43 030c 	orr.w	r3, r3, ip
 802671c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802671e:	2cff      	cmp	r4, #255	; 0xff
 8026720:	d021      	beq.n	8026766 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8026722:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026724:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026728:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802672a:	fb04 fc0c 	mul.w	ip, r4, ip
 802672e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026730:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026734:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026738:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802673a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802673e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026742:	fb04 fa0a 	mul.w	sl, r4, sl
 8026746:	44e6      	add	lr, ip
 8026748:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802674c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026750:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026754:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026758:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802675c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026760:	ea4e 040a 	orr.w	r4, lr, sl
 8026764:	940c      	str	r4, [sp, #48]	; 0x30
 8026766:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026768:	2cff      	cmp	r4, #255	; 0xff
 802676a:	d021      	beq.n	80267b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 802676c:	9c08      	ldr	r4, [sp, #32]
 802676e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026772:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026774:	fb04 fc0c 	mul.w	ip, r4, ip
 8026778:	9c08      	ldr	r4, [sp, #32]
 802677a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802677e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026780:	fb04 fa0e 	mul.w	sl, r4, lr
 8026784:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026788:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802678c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026790:	44e6      	add	lr, ip
 8026792:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026796:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802679a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802679e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80267a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80267aa:	ea4e 040a 	orr.w	r4, lr, sl
 80267ae:	9408      	str	r4, [sp, #32]
 80267b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80267b2:	2cff      	cmp	r4, #255	; 0xff
 80267b4:	d021      	beq.n	80267fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80267b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80267b8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80267bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80267be:	fb04 fc0c 	mul.w	ip, r4, ip
 80267c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80267c4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80267c8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80267cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80267ce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80267d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80267d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80267da:	44e6      	add	lr, ip
 80267dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80267e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80267e4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80267e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80267ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80267f4:	ea4e 040a 	orr.w	r4, lr, sl
 80267f8:	940d      	str	r4, [sp, #52]	; 0x34
 80267fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80267fc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026800:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026804:	2aff      	cmp	r2, #255	; 0xff
 8026806:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802680a:	9c08      	ldr	r4, [sp, #32]
 802680c:	fb08 fc0c 	mul.w	ip, r8, ip
 8026810:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026814:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026818:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802681a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802681e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026822:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026824:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026828:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802682c:	fb08 f80e 	mul.w	r8, r8, lr
 8026830:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026834:	fb01 8303 	mla	r3, r1, r3, r8
 8026838:	9908      	ldr	r1, [sp, #32]
 802683a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802683e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8026842:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026844:	fb00 330a 	mla	r3, r0, sl, r3
 8026848:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802684c:	fb09 3e0e 	mla	lr, r9, lr, r3
 8026850:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026854:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026858:	ea4c 0c0e 	orr.w	ip, ip, lr
 802685c:	fa5f f08c 	uxtb.w	r0, ip
 8026860:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8026864:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026868:	d032      	beq.n	80268d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 802686a:	43d2      	mvns	r2, r2
 802686c:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8026870:	b2d2      	uxtb	r2, r2
 8026872:	fb0e fe02 	mul.w	lr, lr, r2
 8026876:	f10e 0301 	add.w	r3, lr, #1
 802687a:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 802687e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026882:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8026886:	4350      	muls	r0, r2
 8026888:	f807 3c03 	strb.w	r3, [r7, #-3]
 802688c:	1c43      	adds	r3, r0, #1
 802688e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026892:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026896:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 802689a:	4353      	muls	r3, r2
 802689c:	f807 1c02 	strb.w	r1, [r7, #-2]
 80268a0:	1c5a      	adds	r2, r3, #1
 80268a2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80268a6:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80268aa:	f807 cc01 	strb.w	ip, [r7, #-1]
 80268ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80268b0:	3703      	adds	r7, #3
 80268b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80268b6:	441d      	add	r5, r3
 80268b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80268ba:	441e      	add	r6, r3
 80268bc:	e64e      	b.n	802655c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80268be:	2800      	cmp	r0, #0
 80268c0:	f43f aeed 	beq.w	802669e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80268c4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80268c8:	9108      	str	r1, [sp, #32]
 80268ca:	0e09      	lsrs	r1, r1, #24
 80268cc:	9110      	str	r1, [sp, #64]	; 0x40
 80268ce:	e6e6      	b.n	802669e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80268d0:	f807 0c03 	strb.w	r0, [r7, #-3]
 80268d4:	f807 1c02 	strb.w	r1, [r7, #-2]
 80268d8:	e7e7      	b.n	80268aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 80268da:	b019      	add	sp, #100	; 0x64
 80268dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080268e0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80268e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268e4:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 80268e8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80268ec:	2c00      	cmp	r4, #0
 80268ee:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80268f2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80268f6:	fb00 4e03 	mla	lr, r0, r3, r4
 80268fa:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80268fe:	f2c0 80b8 	blt.w	8026a72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026902:	45a1      	cmp	r9, r4
 8026904:	f340 80b5 	ble.w	8026a72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026908:	2800      	cmp	r0, #0
 802690a:	f2c0 80b2 	blt.w	8026a72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802690e:	4580      	cmp	r8, r0
 8026910:	f340 80af 	ble.w	8026a72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026914:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8026918:	f01e 0f01 	tst.w	lr, #1
 802691c:	5d56      	ldrb	r6, [r2, r5]
 802691e:	bf0c      	ite	eq
 8026920:	f006 060f 	andeq.w	r6, r6, #15
 8026924:	1136      	asrne	r6, r6, #4
 8026926:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802692a:	b2f6      	uxtb	r6, r6
 802692c:	f114 0a01 	adds.w	sl, r4, #1
 8026930:	f100 80a1 	bmi.w	8026a76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026934:	45d1      	cmp	r9, sl
 8026936:	f340 809e 	ble.w	8026a76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802693a:	2800      	cmp	r0, #0
 802693c:	f2c0 809b 	blt.w	8026a76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026940:	4580      	cmp	r8, r0
 8026942:	f340 8098 	ble.w	8026a76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026946:	2f00      	cmp	r7, #0
 8026948:	f000 8097 	beq.w	8026a7a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 802694c:	f10e 0b01 	add.w	fp, lr, #1
 8026950:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8026954:	f01b 0f01 	tst.w	fp, #1
 8026958:	5d55      	ldrb	r5, [r2, r5]
 802695a:	bf0c      	ite	eq
 802695c:	f005 050f 	andeq.w	r5, r5, #15
 8026960:	112d      	asrne	r5, r5, #4
 8026962:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8026966:	b2ed      	uxtb	r5, r5
 8026968:	f1bc 0f00 	cmp.w	ip, #0
 802696c:	f000 8089 	beq.w	8026a82 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8026970:	2c00      	cmp	r4, #0
 8026972:	f100 0001 	add.w	r0, r0, #1
 8026976:	f2c0 8082 	blt.w	8026a7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802697a:	45a1      	cmp	r9, r4
 802697c:	dd7f      	ble.n	8026a7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802697e:	2800      	cmp	r0, #0
 8026980:	db7d      	blt.n	8026a7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8026982:	4580      	cmp	r8, r0
 8026984:	dd7b      	ble.n	8026a7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8026986:	eb03 0b0e 	add.w	fp, r3, lr
 802698a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802698e:	f01b 0f01 	tst.w	fp, #1
 8026992:	5d14      	ldrb	r4, [r2, r4]
 8026994:	bf0c      	ite	eq
 8026996:	f004 040f 	andeq.w	r4, r4, #15
 802699a:	1124      	asrne	r4, r4, #4
 802699c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80269a0:	b2e4      	uxtb	r4, r4
 80269a2:	f1ba 0f00 	cmp.w	sl, #0
 80269a6:	db6f      	blt.n	8026a88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80269a8:	45d1      	cmp	r9, sl
 80269aa:	dd6d      	ble.n	8026a88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80269ac:	2800      	cmp	r0, #0
 80269ae:	db6b      	blt.n	8026a88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80269b0:	4580      	cmp	r8, r0
 80269b2:	dd69      	ble.n	8026a88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80269b4:	2f00      	cmp	r7, #0
 80269b6:	d069      	beq.n	8026a8c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80269b8:	3301      	adds	r3, #1
 80269ba:	449e      	add	lr, r3
 80269bc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80269c0:	f01e 0f01 	tst.w	lr, #1
 80269c4:	5cd0      	ldrb	r0, [r2, r3]
 80269c6:	bf0c      	ite	eq
 80269c8:	f000 000f 	andeq.w	r0, r0, #15
 80269cc:	1100      	asrne	r0, r0, #4
 80269ce:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80269d2:	b2c3      	uxtb	r3, r0
 80269d4:	b2ba      	uxth	r2, r7
 80269d6:	fa1f fc8c 	uxth.w	ip, ip
 80269da:	fb02 f00c 	mul.w	r0, r2, ip
 80269de:	0112      	lsls	r2, r2, #4
 80269e0:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80269e4:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80269e8:	1a12      	subs	r2, r2, r0
 80269ea:	fa1f fc8c 	uxth.w	ip, ip
 80269ee:	b292      	uxth	r2, r2
 80269f0:	eba7 070c 	sub.w	r7, r7, ip
 80269f4:	436a      	muls	r2, r5
 80269f6:	b2bf      	uxth	r7, r7
 80269f8:	fb06 2207 	mla	r2, r6, r7, r2
 80269fc:	fb0c 2404 	mla	r4, ip, r4, r2
 8026a00:	fb00 4303 	mla	r3, r0, r3, r4
 8026a04:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026a08:	b38b      	cbz	r3, 8026a6e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8026a0a:	4a21      	ldr	r2, [pc, #132]	; (8026a90 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8026a0c:	6814      	ldr	r4, [r2, #0]
 8026a0e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8026a12:	b2e5      	uxtb	r5, r4
 8026a14:	4353      	muls	r3, r2
 8026a16:	1c5a      	adds	r2, r3, #1
 8026a18:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026a1c:	1212      	asrs	r2, r2, #8
 8026a1e:	b290      	uxth	r0, r2
 8026a20:	43d2      	mvns	r2, r2
 8026a22:	fb15 f500 	smulbb	r5, r5, r0
 8026a26:	b2d3      	uxtb	r3, r2
 8026a28:	780a      	ldrb	r2, [r1, #0]
 8026a2a:	fb02 5203 	mla	r2, r2, r3, r5
 8026a2e:	b292      	uxth	r2, r2
 8026a30:	1c55      	adds	r5, r2, #1
 8026a32:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8026a36:	784d      	ldrb	r5, [r1, #1]
 8026a38:	fb15 f503 	smulbb	r5, r5, r3
 8026a3c:	1212      	asrs	r2, r2, #8
 8026a3e:	700a      	strb	r2, [r1, #0]
 8026a40:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8026a44:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8026a48:	fb02 5200 	mla	r2, r2, r0, r5
 8026a4c:	b292      	uxth	r2, r2
 8026a4e:	1c55      	adds	r5, r2, #1
 8026a50:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8026a54:	1212      	asrs	r2, r2, #8
 8026a56:	704a      	strb	r2, [r1, #1]
 8026a58:	788a      	ldrb	r2, [r1, #2]
 8026a5a:	fb12 f303 	smulbb	r3, r2, r3
 8026a5e:	fb04 3300 	mla	r3, r4, r0, r3
 8026a62:	b29b      	uxth	r3, r3
 8026a64:	1c5a      	adds	r2, r3, #1
 8026a66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026a6a:	121b      	asrs	r3, r3, #8
 8026a6c:	708b      	strb	r3, [r1, #2]
 8026a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a72:	2600      	movs	r6, #0
 8026a74:	e75a      	b.n	802692c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8026a76:	2500      	movs	r5, #0
 8026a78:	e776      	b.n	8026968 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8026a7a:	463d      	mov	r5, r7
 8026a7c:	e774      	b.n	8026968 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8026a7e:	2400      	movs	r4, #0
 8026a80:	e78f      	b.n	80269a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8026a82:	4663      	mov	r3, ip
 8026a84:	4664      	mov	r4, ip
 8026a86:	e7a5      	b.n	80269d4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8026a88:	2300      	movs	r3, #0
 8026a8a:	e7a3      	b.n	80269d4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8026a8c:	463b      	mov	r3, r7
 8026a8e:	e7a1      	b.n	80269d4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8026a90:	24025d10 	.word	0x24025d10

08026a94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a98:	b097      	sub	sp, #92	; 0x5c
 8026a9a:	9214      	str	r2, [sp, #80]	; 0x50
 8026a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8026a9e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026aa0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8026aa4:	9015      	str	r0, [sp, #84]	; 0x54
 8026aa6:	910c      	str	r1, [sp, #48]	; 0x30
 8026aa8:	6850      	ldr	r0, [r2, #4]
 8026aaa:	930e      	str	r3, [sp, #56]	; 0x38
 8026aac:	6812      	ldr	r2, [r2, #0]
 8026aae:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8026ab2:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8026ab6:	fb00 1303 	mla	r3, r0, r3, r1
 8026aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026abe:	eb02 0a03 	add.w	sl, r2, r3
 8026ac2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026ac4:	689b      	ldr	r3, [r3, #8]
 8026ac6:	3301      	adds	r3, #1
 8026ac8:	f023 0301 	bic.w	r3, r3, #1
 8026acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8026ace:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026ad0:	681f      	ldr	r7, [r3, #0]
 8026ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026ad4:	2b00      	cmp	r3, #0
 8026ad6:	dc03      	bgt.n	8026ae0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026ad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026ada:	2b00      	cmp	r3, #0
 8026adc:	f340 8247 	ble.w	8026f6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8026ae0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026ae2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ae6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026aea:	1e48      	subs	r0, r1, #1
 8026aec:	f102 3cff 	add.w	ip, r2, #4294967295
 8026af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026af2:	2b00      	cmp	r3, #0
 8026af4:	f340 80e5 	ble.w	8026cc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026af8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8026afc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026b00:	d406      	bmi.n	8026b10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026b02:	4586      	cmp	lr, r0
 8026b04:	da04      	bge.n	8026b10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026b06:	2b00      	cmp	r3, #0
 8026b08:	db02      	blt.n	8026b10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026b0a:	4563      	cmp	r3, ip
 8026b0c:	f2c0 80da 	blt.w	8026cc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8026b10:	f11e 0e01 	adds.w	lr, lr, #1
 8026b14:	f100 80cb 	bmi.w	8026cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026b18:	4571      	cmp	r1, lr
 8026b1a:	f2c0 80c8 	blt.w	8026cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026b1e:	3301      	adds	r3, #1
 8026b20:	f100 80c5 	bmi.w	8026cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026b24:	429a      	cmp	r2, r3
 8026b26:	f2c0 80c2 	blt.w	8026cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b2c:	46d0      	mov	r8, sl
 8026b2e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8026b32:	930d      	str	r3, [sp, #52]	; 0x34
 8026b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026b36:	2b00      	cmp	r3, #0
 8026b38:	f340 80e3 	ble.w	8026d02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8026b3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026b3e:	1430      	asrs	r0, r6, #16
 8026b40:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8026b44:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026b48:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026b4c:	142b      	asrs	r3, r5, #16
 8026b4e:	f100 812e 	bmi.w	8026dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026b52:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026b56:	455b      	cmp	r3, fp
 8026b58:	f280 8129 	bge.w	8026dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026b5c:	2800      	cmp	r0, #0
 8026b5e:	f2c0 8126 	blt.w	8026dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026b62:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026b66:	4558      	cmp	r0, fp
 8026b68:	f280 8121 	bge.w	8026dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026b6c:	fb00 3309 	mla	r3, r0, r9, r3
 8026b70:	0858      	lsrs	r0, r3, #1
 8026b72:	07dc      	lsls	r4, r3, #31
 8026b74:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026b78:	bf54      	ite	pl
 8026b7a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026b7e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026b82:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026b86:	fa5f fc8c 	uxtb.w	ip, ip
 8026b8a:	2a00      	cmp	r2, #0
 8026b8c:	f000 80fe 	beq.w	8026d8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8026b90:	1c58      	adds	r0, r3, #1
 8026b92:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026b96:	07c0      	lsls	r0, r0, #31
 8026b98:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026b9c:	bf54      	ite	pl
 8026b9e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8026ba2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026ba6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026baa:	fa5f f08e 	uxtb.w	r0, lr
 8026bae:	9010      	str	r0, [sp, #64]	; 0x40
 8026bb0:	b1d9      	cbz	r1, 8026bea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8026bb2:	444b      	add	r3, r9
 8026bb4:	0858      	lsrs	r0, r3, #1
 8026bb6:	07dc      	lsls	r4, r3, #31
 8026bb8:	f103 0301 	add.w	r3, r3, #1
 8026bbc:	5c38      	ldrb	r0, [r7, r0]
 8026bbe:	bf54      	ite	pl
 8026bc0:	f000 000f 	andpl.w	r0, r0, #15
 8026bc4:	1100      	asrmi	r0, r0, #4
 8026bc6:	07dc      	lsls	r4, r3, #31
 8026bc8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026bcc:	b2c0      	uxtb	r0, r0
 8026bce:	900a      	str	r0, [sp, #40]	; 0x28
 8026bd0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8026bd4:	f817 e000 	ldrb.w	lr, [r7, r0]
 8026bd8:	bf54      	ite	pl
 8026bda:	f00e 030f 	andpl.w	r3, lr, #15
 8026bde:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8026be2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026be6:	b2db      	uxtb	r3, r3
 8026be8:	9311      	str	r3, [sp, #68]	; 0x44
 8026bea:	b292      	uxth	r2, r2
 8026bec:	b289      	uxth	r1, r1
 8026bee:	0113      	lsls	r3, r2, #4
 8026bf0:	fb02 f001 	mul.w	r0, r2, r1
 8026bf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026bf6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8026bfa:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8026bfe:	1a1b      	subs	r3, r3, r0
 8026c00:	b289      	uxth	r1, r1
 8026c02:	b29b      	uxth	r3, r3
 8026c04:	ebae 0e01 	sub.w	lr, lr, r1
 8026c08:	4353      	muls	r3, r2
 8026c0a:	fa1f fe8e 	uxth.w	lr, lr
 8026c0e:	fb0c 320e 	mla	r2, ip, lr, r3
 8026c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026c14:	fb01 2203 	mla	r2, r1, r3, r2
 8026c18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026c1a:	fb00 2203 	mla	r2, r0, r3, r2
 8026c1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026c22:	2a00      	cmp	r2, #0
 8026c24:	d039      	beq.n	8026c9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026c26:	4bc7      	ldr	r3, [pc, #796]	; (8026f44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8026c28:	6819      	ldr	r1, [r3, #0]
 8026c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026c2c:	fa5f fc81 	uxtb.w	ip, r1
 8026c30:	435a      	muls	r2, r3
 8026c32:	1c53      	adds	r3, r2, #1
 8026c34:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026c38:	1212      	asrs	r2, r2, #8
 8026c3a:	b290      	uxth	r0, r2
 8026c3c:	43d2      	mvns	r2, r2
 8026c3e:	fb1c fc00 	smulbb	ip, ip, r0
 8026c42:	b2d3      	uxtb	r3, r2
 8026c44:	f898 2000 	ldrb.w	r2, [r8]
 8026c48:	fb02 c203 	mla	r2, r2, r3, ip
 8026c4c:	b292      	uxth	r2, r2
 8026c4e:	f102 0c01 	add.w	ip, r2, #1
 8026c52:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026c56:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026c5a:	fb1c fc03 	smulbb	ip, ip, r3
 8026c5e:	1212      	asrs	r2, r2, #8
 8026c60:	f888 2000 	strb.w	r2, [r8]
 8026c64:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8026c68:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8026c6c:	fb02 c200 	mla	r2, r2, r0, ip
 8026c70:	b292      	uxth	r2, r2
 8026c72:	f102 0c01 	add.w	ip, r2, #1
 8026c76:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026c7a:	1212      	asrs	r2, r2, #8
 8026c7c:	f888 2001 	strb.w	r2, [r8, #1]
 8026c80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8026c84:	fb12 f303 	smulbb	r3, r2, r3
 8026c88:	fb01 3300 	mla	r3, r1, r0, r3
 8026c8c:	b29b      	uxth	r3, r3
 8026c8e:	1c5a      	adds	r2, r3, #1
 8026c90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026c94:	121b      	asrs	r3, r3, #8
 8026c96:	f888 3002 	strb.w	r3, [r8, #2]
 8026c9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026c9c:	f108 0803 	add.w	r8, r8, #3
 8026ca0:	441d      	add	r5, r3
 8026ca2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ca4:	441e      	add	r6, r3
 8026ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026ca8:	3b01      	subs	r3, #1
 8026caa:	930d      	str	r3, [sp, #52]	; 0x34
 8026cac:	e742      	b.n	8026b34 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026cae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026cb0:	f10a 0a03 	add.w	sl, sl, #3
 8026cb4:	441d      	add	r5, r3
 8026cb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026cb8:	441e      	add	r6, r3
 8026cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026cbc:	3b01      	subs	r3, #1
 8026cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8026cc0:	e716      	b.n	8026af0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8026cc2:	d024      	beq.n	8026d0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8026cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026cc6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8026cc8:	3b01      	subs	r3, #1
 8026cca:	fb00 5003 	mla	r0, r0, r3, r5
 8026cce:	1400      	asrs	r0, r0, #16
 8026cd0:	f53f af2b 	bmi.w	8026b2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026cd4:	3901      	subs	r1, #1
 8026cd6:	4288      	cmp	r0, r1
 8026cd8:	f6bf af27 	bge.w	8026b2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026cdc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8026cde:	fb01 6303 	mla	r3, r1, r3, r6
 8026ce2:	141b      	asrs	r3, r3, #16
 8026ce4:	f53f af21 	bmi.w	8026b2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026ce8:	3a01      	subs	r2, #1
 8026cea:	4293      	cmp	r3, r2
 8026cec:	f6bf af1d 	bge.w	8026b2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026cf0:	f10a 0e03 	add.w	lr, sl, #3
 8026cf4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8026cf8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8026cfc:	f1b8 0f00 	cmp.w	r8, #0
 8026d00:	dc76      	bgt.n	8026df0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8026d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d04:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026d08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026d0c:	44a2      	add	sl, r4
 8026d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026d10:	2b00      	cmp	r3, #0
 8026d12:	f340 812c 	ble.w	8026f6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8026d16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026d1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026d1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026d20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026d24:	eef0 6a62 	vmov.f32	s13, s5
 8026d28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026d2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026d30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d34:	ee16 5a90 	vmov	r5, s13
 8026d38:	eef0 6a43 	vmov.f32	s13, s6
 8026d3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d40:	ee16 6a90 	vmov	r6, s13
 8026d44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026d48:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026d4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026d50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026d54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026d58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026d5c:	ee12 2a90 	vmov	r2, s5
 8026d60:	eef0 2a47 	vmov.f32	s5, s14
 8026d64:	fb92 f3f3 	sdiv	r3, r2, r3
 8026d68:	ee13 2a10 	vmov	r2, s6
 8026d6c:	9323      	str	r3, [sp, #140]	; 0x8c
 8026d6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026d70:	eeb0 3a67 	vmov.f32	s6, s15
 8026d74:	fb92 f3f3 	sdiv	r3, r2, r3
 8026d78:	9324      	str	r3, [sp, #144]	; 0x90
 8026d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026d7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026d7e:	3b01      	subs	r3, #1
 8026d80:	930c      	str	r3, [sp, #48]	; 0x30
 8026d82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026d84:	bf08      	it	eq
 8026d86:	4613      	moveq	r3, r2
 8026d88:	9309      	str	r3, [sp, #36]	; 0x24
 8026d8a:	e6a2      	b.n	8026ad2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8026d8c:	2900      	cmp	r1, #0
 8026d8e:	f43f af2c 	beq.w	8026bea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8026d92:	eb09 0003 	add.w	r0, r9, r3
 8026d96:	0843      	lsrs	r3, r0, #1
 8026d98:	07c0      	lsls	r0, r0, #31
 8026d9a:	5cfb      	ldrb	r3, [r7, r3]
 8026d9c:	bf54      	ite	pl
 8026d9e:	f003 030f 	andpl.w	r3, r3, #15
 8026da2:	111b      	asrmi	r3, r3, #4
 8026da4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026da8:	b2db      	uxtb	r3, r3
 8026daa:	930a      	str	r3, [sp, #40]	; 0x28
 8026dac:	e71d      	b.n	8026bea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8026dae:	f113 0b01 	adds.w	fp, r3, #1
 8026db2:	f53f af72 	bmi.w	8026c9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026db6:	45dc      	cmp	ip, fp
 8026db8:	f6ff af6f 	blt.w	8026c9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026dbc:	f110 0b01 	adds.w	fp, r0, #1
 8026dc0:	f53f af6b 	bmi.w	8026c9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026dc4:	45de      	cmp	lr, fp
 8026dc6:	f6ff af68 	blt.w	8026c9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026dca:	9302      	str	r3, [sp, #8]
 8026dcc:	fa0f f38e 	sxth.w	r3, lr
 8026dd0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026dd2:	9301      	str	r3, [sp, #4]
 8026dd4:	fa0f f38c 	sxth.w	r3, ip
 8026dd8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026ddc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026de0:	9300      	str	r3, [sp, #0]
 8026de2:	463a      	mov	r2, r7
 8026de4:	464b      	mov	r3, r9
 8026de6:	4641      	mov	r1, r8
 8026de8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026dea:	f7ff fd79 	bl	80268e0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8026dee:	e754      	b.n	8026c9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026df0:	142a      	asrs	r2, r5, #16
 8026df2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026df6:	1433      	asrs	r3, r6, #16
 8026df8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026dfc:	fb09 2303 	mla	r3, r9, r3, r2
 8026e00:	085a      	lsrs	r2, r3, #1
 8026e02:	07dc      	lsls	r4, r3, #31
 8026e04:	5cba      	ldrb	r2, [r7, r2]
 8026e06:	bf54      	ite	pl
 8026e08:	f002 020f 	andpl.w	r2, r2, #15
 8026e0c:	1112      	asrmi	r2, r2, #4
 8026e0e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026e12:	b2d2      	uxtb	r2, r2
 8026e14:	2900      	cmp	r1, #0
 8026e16:	f000 8097 	beq.w	8026f48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026e1a:	f103 0b01 	add.w	fp, r3, #1
 8026e1e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8026e22:	f01b 0f01 	tst.w	fp, #1
 8026e26:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026e2a:	bf0c      	ite	eq
 8026e2c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8026e30:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8026e34:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026e38:	fa5f f48c 	uxtb.w	r4, ip
 8026e3c:	9412      	str	r4, [sp, #72]	; 0x48
 8026e3e:	b300      	cbz	r0, 8026e82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026e40:	444b      	add	r3, r9
 8026e42:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026e46:	07dc      	lsls	r4, r3, #31
 8026e48:	f103 0301 	add.w	r3, r3, #1
 8026e4c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026e50:	bf54      	ite	pl
 8026e52:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026e56:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026e5a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026e5e:	fa5f f48c 	uxtb.w	r4, ip
 8026e62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026e66:	940b      	str	r4, [sp, #44]	; 0x2c
 8026e68:	07dc      	lsls	r4, r3, #31
 8026e6a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026e6e:	bf54      	ite	pl
 8026e70:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026e74:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026e78:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026e7c:	fa5f f38c 	uxtb.w	r3, ip
 8026e80:	9313      	str	r3, [sp, #76]	; 0x4c
 8026e82:	b289      	uxth	r1, r1
 8026e84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026e86:	b280      	uxth	r0, r0
 8026e88:	fb01 f300 	mul.w	r3, r1, r0
 8026e8c:	0109      	lsls	r1, r1, #4
 8026e8e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8026e92:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8026e96:	1ac9      	subs	r1, r1, r3
 8026e98:	b280      	uxth	r0, r0
 8026e9a:	b289      	uxth	r1, r1
 8026e9c:	ebac 0c00 	sub.w	ip, ip, r0
 8026ea0:	4361      	muls	r1, r4
 8026ea2:	fa1f fc8c 	uxth.w	ip, ip
 8026ea6:	fb02 120c 	mla	r2, r2, ip, r1
 8026eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026eac:	fb00 2001 	mla	r0, r0, r1, r2
 8026eb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026eb2:	fb03 0302 	mla	r3, r3, r2, r0
 8026eb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026eba:	2b00      	cmp	r3, #0
 8026ebc:	d039      	beq.n	8026f32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026ebe:	4a21      	ldr	r2, [pc, #132]	; (8026f44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8026ec0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8026ec4:	6810      	ldr	r0, [r2, #0]
 8026ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026ec8:	fa5f fc80 	uxtb.w	ip, r0
 8026ecc:	4353      	muls	r3, r2
 8026ece:	1c5a      	adds	r2, r3, #1
 8026ed0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026ed4:	121b      	asrs	r3, r3, #8
 8026ed6:	b29a      	uxth	r2, r3
 8026ed8:	43db      	mvns	r3, r3
 8026eda:	fb1c fc02 	smulbb	ip, ip, r2
 8026ede:	b2db      	uxtb	r3, r3
 8026ee0:	fb01 c103 	mla	r1, r1, r3, ip
 8026ee4:	b289      	uxth	r1, r1
 8026ee6:	f101 0c01 	add.w	ip, r1, #1
 8026eea:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026eee:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8026ef2:	fb1c fc03 	smulbb	ip, ip, r3
 8026ef6:	1209      	asrs	r1, r1, #8
 8026ef8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026efc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8026f00:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8026f04:	fb01 c102 	mla	r1, r1, r2, ip
 8026f08:	b289      	uxth	r1, r1
 8026f0a:	f101 0c01 	add.w	ip, r1, #1
 8026f0e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026f12:	1209      	asrs	r1, r1, #8
 8026f14:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8026f18:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8026f1c:	fb11 f303 	smulbb	r3, r1, r3
 8026f20:	fb00 3002 	mla	r0, r0, r2, r3
 8026f24:	b280      	uxth	r0, r0
 8026f26:	1c42      	adds	r2, r0, #1
 8026f28:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026f2c:	1200      	asrs	r0, r0, #8
 8026f2e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8026f32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026f34:	f10e 0e03 	add.w	lr, lr, #3
 8026f38:	f108 38ff 	add.w	r8, r8, #4294967295
 8026f3c:	441d      	add	r5, r3
 8026f3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026f40:	441e      	add	r6, r3
 8026f42:	e6db      	b.n	8026cfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8026f44:	24025d10 	.word	0x24025d10
 8026f48:	2800      	cmp	r0, #0
 8026f4a:	d09a      	beq.n	8026e82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026f4c:	444b      	add	r3, r9
 8026f4e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026f52:	07db      	lsls	r3, r3, #31
 8026f54:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026f58:	bf54      	ite	pl
 8026f5a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026f5e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026f62:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026f66:	fa5f f38c 	uxtb.w	r3, ip
 8026f6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8026f6c:	e789      	b.n	8026e82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026f6e:	b017      	add	sp, #92	; 0x5c
 8026f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026f74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8026f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f78:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8026f7c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026f80:	2d00      	cmp	r5, #0
 8026f82:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8026f86:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8026f8a:	fb04 5e03 	mla	lr, r4, r3, r5
 8026f8e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8026f92:	f2c0 80b1 	blt.w	80270f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026f96:	45a9      	cmp	r9, r5
 8026f98:	f340 80ae 	ble.w	80270f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026f9c:	2c00      	cmp	r4, #0
 8026f9e:	f2c0 80ab 	blt.w	80270f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026fa2:	45a0      	cmp	r8, r4
 8026fa4:	f340 80a8 	ble.w	80270f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026fa8:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8026fac:	f01e 0f01 	tst.w	lr, #1
 8026fb0:	5d97      	ldrb	r7, [r2, r6]
 8026fb2:	bf0c      	ite	eq
 8026fb4:	f007 070f 	andeq.w	r7, r7, #15
 8026fb8:	113f      	asrne	r7, r7, #4
 8026fba:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8026fbe:	b2ff      	uxtb	r7, r7
 8026fc0:	f115 0a01 	adds.w	sl, r5, #1
 8026fc4:	f100 809a 	bmi.w	80270fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026fc8:	45d1      	cmp	r9, sl
 8026fca:	f340 8097 	ble.w	80270fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026fce:	2c00      	cmp	r4, #0
 8026fd0:	f2c0 8094 	blt.w	80270fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026fd4:	45a0      	cmp	r8, r4
 8026fd6:	f340 8091 	ble.w	80270fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026fda:	2800      	cmp	r0, #0
 8026fdc:	f000 8090 	beq.w	8027100 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8026fe0:	f10e 0b01 	add.w	fp, lr, #1
 8026fe4:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8026fe8:	f01b 0f01 	tst.w	fp, #1
 8026fec:	5d96      	ldrb	r6, [r2, r6]
 8026fee:	bf0c      	ite	eq
 8026ff0:	f006 060f 	andeq.w	r6, r6, #15
 8026ff4:	1136      	asrne	r6, r6, #4
 8026ff6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026ffa:	b2f6      	uxtb	r6, r6
 8026ffc:	f1bc 0f00 	cmp.w	ip, #0
 8027000:	f000 8082 	beq.w	8027108 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8027004:	2d00      	cmp	r5, #0
 8027006:	f104 0401 	add.w	r4, r4, #1
 802700a:	db7b      	blt.n	8027104 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802700c:	45a9      	cmp	r9, r5
 802700e:	dd79      	ble.n	8027104 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027010:	2c00      	cmp	r4, #0
 8027012:	db77      	blt.n	8027104 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027014:	45a0      	cmp	r8, r4
 8027016:	dd75      	ble.n	8027104 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027018:	eb03 0b0e 	add.w	fp, r3, lr
 802701c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8027020:	f01b 0f01 	tst.w	fp, #1
 8027024:	5d55      	ldrb	r5, [r2, r5]
 8027026:	bf0c      	ite	eq
 8027028:	f005 050f 	andeq.w	r5, r5, #15
 802702c:	112d      	asrne	r5, r5, #4
 802702e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027032:	b2ed      	uxtb	r5, r5
 8027034:	f1ba 0f00 	cmp.w	sl, #0
 8027038:	db69      	blt.n	802710e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802703a:	45d1      	cmp	r9, sl
 802703c:	dd67      	ble.n	802710e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802703e:	2c00      	cmp	r4, #0
 8027040:	db65      	blt.n	802710e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8027042:	45a0      	cmp	r8, r4
 8027044:	dd63      	ble.n	802710e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8027046:	2800      	cmp	r0, #0
 8027048:	d063      	beq.n	8027112 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 802704a:	3301      	adds	r3, #1
 802704c:	449e      	add	lr, r3
 802704e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027052:	f01e 0f01 	tst.w	lr, #1
 8027056:	5cd4      	ldrb	r4, [r2, r3]
 8027058:	bf0c      	ite	eq
 802705a:	f004 040f 	andeq.w	r4, r4, #15
 802705e:	1124      	asrne	r4, r4, #4
 8027060:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027064:	b2e3      	uxtb	r3, r4
 8027066:	b282      	uxth	r2, r0
 8027068:	fa1f fc8c 	uxth.w	ip, ip
 802706c:	fb02 f40c 	mul.w	r4, r2, ip
 8027070:	0112      	lsls	r2, r2, #4
 8027072:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8027076:	fa1f f08c 	uxth.w	r0, ip
 802707a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802707e:	1b12      	subs	r2, r2, r4
 8027080:	ebac 0c00 	sub.w	ip, ip, r0
 8027084:	b292      	uxth	r2, r2
 8027086:	fa1f fc8c 	uxth.w	ip, ip
 802708a:	4372      	muls	r2, r6
 802708c:	fb07 220c 	mla	r2, r7, ip, r2
 8027090:	fb00 2005 	mla	r0, r0, r5, r2
 8027094:	fb04 0303 	mla	r3, r4, r3, r0
 8027098:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802709c:	b353      	cbz	r3, 80270f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802709e:	4a1e      	ldr	r2, [pc, #120]	; (8027118 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80270a0:	7808      	ldrb	r0, [r1, #0]
 80270a2:	6814      	ldr	r4, [r2, #0]
 80270a4:	b29a      	uxth	r2, r3
 80270a6:	43db      	mvns	r3, r3
 80270a8:	b2e5      	uxtb	r5, r4
 80270aa:	b2db      	uxtb	r3, r3
 80270ac:	fb15 f502 	smulbb	r5, r5, r2
 80270b0:	fb00 5003 	mla	r0, r0, r3, r5
 80270b4:	b280      	uxth	r0, r0
 80270b6:	1c45      	adds	r5, r0, #1
 80270b8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80270bc:	784d      	ldrb	r5, [r1, #1]
 80270be:	fb15 f503 	smulbb	r5, r5, r3
 80270c2:	1200      	asrs	r0, r0, #8
 80270c4:	7008      	strb	r0, [r1, #0]
 80270c6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80270ca:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80270ce:	fb00 5002 	mla	r0, r0, r2, r5
 80270d2:	b280      	uxth	r0, r0
 80270d4:	1c45      	adds	r5, r0, #1
 80270d6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80270da:	1200      	asrs	r0, r0, #8
 80270dc:	7048      	strb	r0, [r1, #1]
 80270de:	7888      	ldrb	r0, [r1, #2]
 80270e0:	fb10 f303 	smulbb	r3, r0, r3
 80270e4:	fb04 3202 	mla	r2, r4, r2, r3
 80270e8:	b292      	uxth	r2, r2
 80270ea:	1c53      	adds	r3, r2, #1
 80270ec:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80270f0:	1212      	asrs	r2, r2, #8
 80270f2:	708a      	strb	r2, [r1, #2]
 80270f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270f8:	2700      	movs	r7, #0
 80270fa:	e761      	b.n	8026fc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80270fc:	2600      	movs	r6, #0
 80270fe:	e77d      	b.n	8026ffc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8027100:	4606      	mov	r6, r0
 8027102:	e77b      	b.n	8026ffc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8027104:	2500      	movs	r5, #0
 8027106:	e795      	b.n	8027034 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8027108:	4663      	mov	r3, ip
 802710a:	4665      	mov	r5, ip
 802710c:	e7ab      	b.n	8027066 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802710e:	2300      	movs	r3, #0
 8027110:	e7a9      	b.n	8027066 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8027112:	4603      	mov	r3, r0
 8027114:	e7a7      	b.n	8027066 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8027116:	bf00      	nop
 8027118:	24025d10 	.word	0x24025d10

0802711c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027120:	b093      	sub	sp, #76	; 0x4c
 8027122:	461c      	mov	r4, r3
 8027124:	920c      	str	r2, [sp, #48]	; 0x30
 8027126:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027128:	9011      	str	r0, [sp, #68]	; 0x44
 802712a:	9107      	str	r1, [sp, #28]
 802712c:	6850      	ldr	r0, [r2, #4]
 802712e:	6812      	ldr	r2, [r2, #0]
 8027130:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8027134:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8027138:	fb00 1303 	mla	r3, r0, r3, r1
 802713c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027140:	eb02 0b03 	add.w	fp, r2, r3
 8027144:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027146:	689b      	ldr	r3, [r3, #8]
 8027148:	3301      	adds	r3, #1
 802714a:	f023 0301 	bic.w	r3, r3, #1
 802714e:	9309      	str	r3, [sp, #36]	; 0x24
 8027150:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027152:	f8d3 8000 	ldr.w	r8, [r3]
 8027156:	9b07      	ldr	r3, [sp, #28]
 8027158:	2b00      	cmp	r3, #0
 802715a:	dc03      	bgt.n	8027164 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802715c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802715e:	2b00      	cmp	r3, #0
 8027160:	f340 822b 	ble.w	80275ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027164:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027166:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802716a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802716e:	1e48      	subs	r0, r1, #1
 8027170:	1e57      	subs	r7, r2, #1
 8027172:	2c00      	cmp	r4, #0
 8027174:	f340 80d7 	ble.w	8027326 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8027178:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802717c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027180:	d406      	bmi.n	8027190 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027182:	4584      	cmp	ip, r0
 8027184:	da04      	bge.n	8027190 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027186:	2b00      	cmp	r3, #0
 8027188:	db02      	blt.n	8027190 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802718a:	42bb      	cmp	r3, r7
 802718c:	f2c0 80cc 	blt.w	8027328 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8027190:	f11c 0c01 	adds.w	ip, ip, #1
 8027194:	f100 80bf 	bmi.w	8027316 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8027198:	4561      	cmp	r1, ip
 802719a:	f2c0 80bc 	blt.w	8027316 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802719e:	3301      	adds	r3, #1
 80271a0:	f100 80b9 	bmi.w	8027316 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80271a4:	429a      	cmp	r2, r3
 80271a6:	f2c0 80b6 	blt.w	8027316 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80271aa:	46a2      	mov	sl, r4
 80271ac:	465f      	mov	r7, fp
 80271ae:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80271b2:	f1ba 0f00 	cmp.w	sl, #0
 80271b6:	f340 80d4 	ble.w	8027362 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80271ba:	f3c5 3303 	ubfx	r3, r5, #12, #4
 80271be:	1430      	asrs	r0, r6, #16
 80271c0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80271c4:	9308      	str	r3, [sp, #32]
 80271c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80271c8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80271cc:	142b      	asrs	r3, r5, #16
 80271ce:	f100 8124 	bmi.w	802741a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80271d2:	f10c 32ff 	add.w	r2, ip, #4294967295
 80271d6:	4293      	cmp	r3, r2
 80271d8:	f280 811f 	bge.w	802741a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80271dc:	2800      	cmp	r0, #0
 80271de:	f2c0 811c 	blt.w	802741a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80271e2:	f10e 32ff 	add.w	r2, lr, #4294967295
 80271e6:	4290      	cmp	r0, r2
 80271e8:	f280 8117 	bge.w	802741a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80271ec:	fb00 3309 	mla	r3, r0, r9, r3
 80271f0:	0858      	lsrs	r0, r3, #1
 80271f2:	07da      	lsls	r2, r3, #31
 80271f4:	9a08      	ldr	r2, [sp, #32]
 80271f6:	f818 c000 	ldrb.w	ip, [r8, r0]
 80271fa:	bf54      	ite	pl
 80271fc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027200:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027204:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027208:	fa5f fc8c 	uxtb.w	ip, ip
 802720c:	2a00      	cmp	r2, #0
 802720e:	f000 80ed 	beq.w	80273ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8027212:	1c58      	adds	r0, r3, #1
 8027214:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027218:	07c0      	lsls	r0, r0, #31
 802721a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802721e:	bf54      	ite	pl
 8027220:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027224:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027228:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802722c:	fa5f fe8e 	uxtb.w	lr, lr
 8027230:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8027234:	b1c9      	cbz	r1, 802726a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027236:	444b      	add	r3, r9
 8027238:	0858      	lsrs	r0, r3, #1
 802723a:	07da      	lsls	r2, r3, #31
 802723c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8027240:	bf54      	ite	pl
 8027242:	f000 000f 	andpl.w	r0, r0, #15
 8027246:	1100      	asrmi	r0, r0, #4
 8027248:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802724c:	b2c0      	uxtb	r0, r0
 802724e:	900a      	str	r0, [sp, #40]	; 0x28
 8027250:	1c58      	adds	r0, r3, #1
 8027252:	0843      	lsrs	r3, r0, #1
 8027254:	07c2      	lsls	r2, r0, #31
 8027256:	f818 3003 	ldrb.w	r3, [r8, r3]
 802725a:	bf54      	ite	pl
 802725c:	f003 030f 	andpl.w	r3, r3, #15
 8027260:	111b      	asrmi	r3, r3, #4
 8027262:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027266:	b2db      	uxtb	r3, r3
 8027268:	930e      	str	r3, [sp, #56]	; 0x38
 802726a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802726e:	b289      	uxth	r1, r1
 8027270:	fb02 f301 	mul.w	r3, r2, r1
 8027274:	0112      	lsls	r2, r2, #4
 8027276:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802727a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802727e:	1ad2      	subs	r2, r2, r3
 8027280:	b289      	uxth	r1, r1
 8027282:	b292      	uxth	r2, r2
 8027284:	1a40      	subs	r0, r0, r1
 8027286:	fa1f fe80 	uxth.w	lr, r0
 802728a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802728c:	4342      	muls	r2, r0
 802728e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8027292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027294:	fb01 c102 	mla	r1, r1, r2, ip
 8027298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802729a:	fb03 1302 	mla	r3, r3, r2, r1
 802729e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80272a2:	b383      	cbz	r3, 8027306 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80272a4:	4ac6      	ldr	r2, [pc, #792]	; (80275c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80272a6:	2bff      	cmp	r3, #255	; 0xff
 80272a8:	6812      	ldr	r2, [r2, #0]
 80272aa:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80272ae:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80272b2:	b2d2      	uxtb	r2, r2
 80272b4:	f000 80ac 	beq.w	8027410 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80272b8:	b299      	uxth	r1, r3
 80272ba:	43db      	mvns	r3, r3
 80272bc:	f897 c000 	ldrb.w	ip, [r7]
 80272c0:	fb12 f201 	smulbb	r2, r2, r1
 80272c4:	b2db      	uxtb	r3, r3
 80272c6:	fb10 f001 	smulbb	r0, r0, r1
 80272ca:	fb0c 2203 	mla	r2, ip, r3, r2
 80272ce:	fb1e f101 	smulbb	r1, lr, r1
 80272d2:	b292      	uxth	r2, r2
 80272d4:	f102 0c01 	add.w	ip, r2, #1
 80272d8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80272dc:	1212      	asrs	r2, r2, #8
 80272de:	703a      	strb	r2, [r7, #0]
 80272e0:	787a      	ldrb	r2, [r7, #1]
 80272e2:	fb02 0003 	mla	r0, r2, r3, r0
 80272e6:	b280      	uxth	r0, r0
 80272e8:	1c42      	adds	r2, r0, #1
 80272ea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80272ee:	78ba      	ldrb	r2, [r7, #2]
 80272f0:	fb02 1303 	mla	r3, r2, r3, r1
 80272f4:	1200      	asrs	r0, r0, #8
 80272f6:	b29b      	uxth	r3, r3
 80272f8:	7078      	strb	r0, [r7, #1]
 80272fa:	f103 0e01 	add.w	lr, r3, #1
 80272fe:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8027302:	121b      	asrs	r3, r3, #8
 8027304:	70bb      	strb	r3, [r7, #2]
 8027306:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027308:	3703      	adds	r7, #3
 802730a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802730e:	441d      	add	r5, r3
 8027310:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027312:	441e      	add	r6, r3
 8027314:	e74d      	b.n	80271b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027316:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027318:	3c01      	subs	r4, #1
 802731a:	f10b 0b03 	add.w	fp, fp, #3
 802731e:	441d      	add	r5, r3
 8027320:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027322:	441e      	add	r6, r3
 8027324:	e725      	b.n	8027172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027326:	d021      	beq.n	802736c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8027328:	1e63      	subs	r3, r4, #1
 802732a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802732c:	fb00 5003 	mla	r0, r0, r3, r5
 8027330:	1400      	asrs	r0, r0, #16
 8027332:	f53f af3a 	bmi.w	80271aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027336:	3901      	subs	r1, #1
 8027338:	4288      	cmp	r0, r1
 802733a:	f6bf af36 	bge.w	80271aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802733e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027340:	fb01 6303 	mla	r3, r1, r3, r6
 8027344:	141b      	asrs	r3, r3, #16
 8027346:	f53f af30 	bmi.w	80271aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802734a:	3a01      	subs	r2, #1
 802734c:	4293      	cmp	r3, r2
 802734e:	f6bf af2c 	bge.w	80271aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027352:	f10b 0c03 	add.w	ip, fp, #3
 8027356:	46a6      	mov	lr, r4
 8027358:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802735c:	f1be 0f00 	cmp.w	lr, #0
 8027360:	dc79      	bgt.n	8027456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8027362:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8027366:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802736a:	44a3      	add	fp, r4
 802736c:	9b07      	ldr	r3, [sp, #28]
 802736e:	2b00      	cmp	r3, #0
 8027370:	f340 8123 	ble.w	80275ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027378:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802737a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802737e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027382:	eef0 6a62 	vmov.f32	s13, s5
 8027386:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802738a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802738e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027392:	ee16 5a90 	vmov	r5, s13
 8027396:	eef0 6a43 	vmov.f32	s13, s6
 802739a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802739e:	ee16 6a90 	vmov	r6, s13
 80273a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80273a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80273aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80273ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80273b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80273b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80273ba:	ee12 2a90 	vmov	r2, s5
 80273be:	eef0 2a47 	vmov.f32	s5, s14
 80273c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80273c6:	ee13 2a10 	vmov	r2, s6
 80273ca:	931f      	str	r3, [sp, #124]	; 0x7c
 80273cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80273ce:	eeb0 3a67 	vmov.f32	s6, s15
 80273d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80273d6:	9320      	str	r3, [sp, #128]	; 0x80
 80273d8:	9b07      	ldr	r3, [sp, #28]
 80273da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80273dc:	3b01      	subs	r3, #1
 80273de:	9307      	str	r3, [sp, #28]
 80273e0:	bf08      	it	eq
 80273e2:	4614      	moveq	r4, r2
 80273e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80273e6:	bf18      	it	ne
 80273e8:	461c      	movne	r4, r3
 80273ea:	e6b4      	b.n	8027156 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80273ec:	2900      	cmp	r1, #0
 80273ee:	f43f af3c 	beq.w	802726a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80273f2:	eb09 0003 	add.w	r0, r9, r3
 80273f6:	0843      	lsrs	r3, r0, #1
 80273f8:	07c0      	lsls	r0, r0, #31
 80273fa:	f818 3003 	ldrb.w	r3, [r8, r3]
 80273fe:	bf54      	ite	pl
 8027400:	f003 030f 	andpl.w	r3, r3, #15
 8027404:	111b      	asrmi	r3, r3, #4
 8027406:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802740a:	b2db      	uxtb	r3, r3
 802740c:	930a      	str	r3, [sp, #40]	; 0x28
 802740e:	e72c      	b.n	802726a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027410:	703a      	strb	r2, [r7, #0]
 8027412:	7078      	strb	r0, [r7, #1]
 8027414:	f887 e002 	strb.w	lr, [r7, #2]
 8027418:	e775      	b.n	8027306 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802741a:	1c5a      	adds	r2, r3, #1
 802741c:	f53f af73 	bmi.w	8027306 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027420:	4594      	cmp	ip, r2
 8027422:	f6ff af70 	blt.w	8027306 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027426:	1c42      	adds	r2, r0, #1
 8027428:	f53f af6d 	bmi.w	8027306 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802742c:	4596      	cmp	lr, r2
 802742e:	f6ff af6a 	blt.w	8027306 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027432:	9302      	str	r3, [sp, #8]
 8027434:	fa0f f38e 	sxth.w	r3, lr
 8027438:	9a08      	ldr	r2, [sp, #32]
 802743a:	9301      	str	r3, [sp, #4]
 802743c:	fa0f f38c 	sxth.w	r3, ip
 8027440:	9105      	str	r1, [sp, #20]
 8027442:	4639      	mov	r1, r7
 8027444:	9300      	str	r3, [sp, #0]
 8027446:	464b      	mov	r3, r9
 8027448:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802744c:	4642      	mov	r2, r8
 802744e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027450:	f7ff fd90 	bl	8026f74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8027454:	e757      	b.n	8027306 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027456:	142a      	asrs	r2, r5, #16
 8027458:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802745c:	1433      	asrs	r3, r6, #16
 802745e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8027462:	fb09 2303 	mla	r3, r9, r3, r2
 8027466:	085a      	lsrs	r2, r3, #1
 8027468:	07d9      	lsls	r1, r3, #31
 802746a:	f818 2002 	ldrb.w	r2, [r8, r2]
 802746e:	bf54      	ite	pl
 8027470:	f002 020f 	andpl.w	r2, r2, #15
 8027474:	1112      	asrmi	r2, r2, #4
 8027476:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802747a:	b2d2      	uxtb	r2, r2
 802747c:	2800      	cmp	r0, #0
 802747e:	f000 8085 	beq.w	802758c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027482:	f103 0a01 	add.w	sl, r3, #1
 8027486:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802748a:	f01a 0f01 	tst.w	sl, #1
 802748e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027492:	bf0c      	ite	eq
 8027494:	f001 010f 	andeq.w	r1, r1, #15
 8027498:	1109      	asrne	r1, r1, #4
 802749a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802749e:	b2c9      	uxtb	r1, r1
 80274a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80274a2:	b1df      	cbz	r7, 80274dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80274a4:	444b      	add	r3, r9
 80274a6:	0859      	lsrs	r1, r3, #1
 80274a8:	f013 0f01 	tst.w	r3, #1
 80274ac:	f103 0301 	add.w	r3, r3, #1
 80274b0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80274b4:	bf0c      	ite	eq
 80274b6:	f001 010f 	andeq.w	r1, r1, #15
 80274ba:	1109      	asrne	r1, r1, #4
 80274bc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80274c0:	b2c9      	uxtb	r1, r1
 80274c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80274c4:	0859      	lsrs	r1, r3, #1
 80274c6:	07db      	lsls	r3, r3, #31
 80274c8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80274cc:	bf54      	ite	pl
 80274ce:	f001 010f 	andpl.w	r1, r1, #15
 80274d2:	1109      	asrmi	r1, r1, #4
 80274d4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80274d8:	b2c9      	uxtb	r1, r1
 80274da:	9110      	str	r1, [sp, #64]	; 0x40
 80274dc:	b280      	uxth	r0, r0
 80274de:	b2bf      	uxth	r7, r7
 80274e0:	fb00 f307 	mul.w	r3, r0, r7
 80274e4:	0100      	lsls	r0, r0, #4
 80274e6:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80274ea:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80274ee:	1ac0      	subs	r0, r0, r3
 80274f0:	b2bf      	uxth	r7, r7
 80274f2:	b280      	uxth	r0, r0
 80274f4:	1bc9      	subs	r1, r1, r7
 80274f6:	fa1f fa81 	uxth.w	sl, r1
 80274fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80274fc:	4348      	muls	r0, r1
 80274fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027500:	fb02 020a 	mla	r2, r2, sl, r0
 8027504:	fb07 2701 	mla	r7, r7, r1, r2
 8027508:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802750a:	fb03 7302 	mla	r3, r3, r2, r7
 802750e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027512:	b393      	cbz	r3, 802757a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8027514:	4a2a      	ldr	r2, [pc, #168]	; (80275c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8027516:	2bff      	cmp	r3, #255	; 0xff
 8027518:	6811      	ldr	r1, [r2, #0]
 802751a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802751e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8027522:	b2c9      	uxtb	r1, r1
 8027524:	d042      	beq.n	80275ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027526:	b298      	uxth	r0, r3
 8027528:	43db      	mvns	r3, r3
 802752a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802752e:	fb11 f100 	smulbb	r1, r1, r0
 8027532:	b2db      	uxtb	r3, r3
 8027534:	fb17 f700 	smulbb	r7, r7, r0
 8027538:	fb02 1103 	mla	r1, r2, r3, r1
 802753c:	fb1a f000 	smulbb	r0, sl, r0
 8027540:	b289      	uxth	r1, r1
 8027542:	1c4a      	adds	r2, r1, #1
 8027544:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027548:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 802754c:	fb02 7703 	mla	r7, r2, r3, r7
 8027550:	1209      	asrs	r1, r1, #8
 8027552:	b2bf      	uxth	r7, r7
 8027554:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8027558:	1c7a      	adds	r2, r7, #1
 802755a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802755e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8027562:	fb02 0303 	mla	r3, r2, r3, r0
 8027566:	123f      	asrs	r7, r7, #8
 8027568:	b29b      	uxth	r3, r3
 802756a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802756e:	1c5a      	adds	r2, r3, #1
 8027570:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027574:	121b      	asrs	r3, r3, #8
 8027576:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802757a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802757c:	f10c 0c03 	add.w	ip, ip, #3
 8027580:	f10e 3eff 	add.w	lr, lr, #4294967295
 8027584:	441d      	add	r5, r3
 8027586:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027588:	441e      	add	r6, r3
 802758a:	e6e7      	b.n	802735c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802758c:	2f00      	cmp	r7, #0
 802758e:	d0a5      	beq.n	80274dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027590:	444b      	add	r3, r9
 8027592:	0859      	lsrs	r1, r3, #1
 8027594:	07db      	lsls	r3, r3, #31
 8027596:	f818 1001 	ldrb.w	r1, [r8, r1]
 802759a:	bf54      	ite	pl
 802759c:	f001 010f 	andpl.w	r1, r1, #15
 80275a0:	1109      	asrmi	r1, r1, #4
 80275a2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80275a6:	b2c9      	uxtb	r1, r1
 80275a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80275aa:	e797      	b.n	80274dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80275ac:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80275b0:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80275b4:	f80c ac01 	strb.w	sl, [ip, #-1]
 80275b8:	e7df      	b.n	802757a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80275ba:	b013      	add	sp, #76	; 0x4c
 80275bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275c0:	24025d10 	.word	0x24025d10

080275c4 <CRC_Lock>:
 80275c4:	4a20      	ldr	r2, [pc, #128]	; (8027648 <CRC_Lock+0x84>)
 80275c6:	b530      	push	{r4, r5, lr}
 80275c8:	6813      	ldr	r3, [r2, #0]
 80275ca:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80275ce:	f24c 2540 	movw	r5, #49728	; 0xc240
 80275d2:	f023 0301 	bic.w	r3, r3, #1
 80275d6:	6013      	str	r3, [r2, #0]
 80275d8:	4b1c      	ldr	r3, [pc, #112]	; (802764c <CRC_Lock+0x88>)
 80275da:	681a      	ldr	r2, [r3, #0]
 80275dc:	4022      	ands	r2, r4
 80275de:	42aa      	cmp	r2, r5
 80275e0:	d005      	beq.n	80275ee <CRC_Lock+0x2a>
 80275e2:	681b      	ldr	r3, [r3, #0]
 80275e4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80275e8:	4023      	ands	r3, r4
 80275ea:	4293      	cmp	r3, r2
 80275ec:	d124      	bne.n	8027638 <CRC_Lock+0x74>
 80275ee:	4b18      	ldr	r3, [pc, #96]	; (8027650 <CRC_Lock+0x8c>)
 80275f0:	681b      	ldr	r3, [r3, #0]
 80275f2:	bb0b      	cbnz	r3, 8027638 <CRC_Lock+0x74>
 80275f4:	4b17      	ldr	r3, [pc, #92]	; (8027654 <CRC_Lock+0x90>)
 80275f6:	681a      	ldr	r2, [r3, #0]
 80275f8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80275fc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8027600:	d00d      	beq.n	802761e <CRC_Lock+0x5a>
 8027602:	681a      	ldr	r2, [r3, #0]
 8027604:	f240 4483 	movw	r4, #1155	; 0x483
 8027608:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802760c:	42a2      	cmp	r2, r4
 802760e:	d006      	beq.n	802761e <CRC_Lock+0x5a>
 8027610:	681b      	ldr	r3, [r3, #0]
 8027612:	f240 4285 	movw	r2, #1157	; 0x485
 8027616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802761a:	4293      	cmp	r3, r2
 802761c:	d10c      	bne.n	8027638 <CRC_Lock+0x74>
 802761e:	4b0e      	ldr	r3, [pc, #56]	; (8027658 <CRC_Lock+0x94>)
 8027620:	2201      	movs	r2, #1
 8027622:	601a      	str	r2, [r3, #0]
 8027624:	681a      	ldr	r2, [r3, #0]
 8027626:	2a00      	cmp	r2, #0
 8027628:	d1fc      	bne.n	8027624 <CRC_Lock+0x60>
 802762a:	4b0c      	ldr	r3, [pc, #48]	; (802765c <CRC_Lock+0x98>)
 802762c:	6018      	str	r0, [r3, #0]
 802762e:	6818      	ldr	r0, [r3, #0]
 8027630:	1a43      	subs	r3, r0, r1
 8027632:	4258      	negs	r0, r3
 8027634:	4158      	adcs	r0, r3
 8027636:	bd30      	pop	{r4, r5, pc}
 8027638:	4b09      	ldr	r3, [pc, #36]	; (8027660 <CRC_Lock+0x9c>)
 802763a:	2201      	movs	r2, #1
 802763c:	601a      	str	r2, [r3, #0]
 802763e:	681a      	ldr	r2, [r3, #0]
 8027640:	2a00      	cmp	r2, #0
 8027642:	d1fc      	bne.n	802763e <CRC_Lock+0x7a>
 8027644:	4b07      	ldr	r3, [pc, #28]	; (8027664 <CRC_Lock+0xa0>)
 8027646:	e7f1      	b.n	802762c <CRC_Lock+0x68>
 8027648:	e0002000 	.word	0xe0002000
 802764c:	e000ed00 	.word	0xe000ed00
 8027650:	e0042000 	.word	0xe0042000
 8027654:	5c001000 	.word	0x5c001000
 8027658:	58024c08 	.word	0x58024c08
 802765c:	58024c00 	.word	0x58024c00
 8027660:	40023008 	.word	0x40023008
 8027664:	40023000 	.word	0x40023000

08027668 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8027668:	6101      	str	r1, [r0, #16]
 802766a:	4770      	bx	lr

0802766c <_ZN8touchgfx8Gestures4tickEv>:
 802766c:	7b83      	ldrb	r3, [r0, #14]
 802766e:	b14b      	cbz	r3, 8027684 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8027670:	8903      	ldrh	r3, [r0, #8]
 8027672:	3301      	adds	r3, #1
 8027674:	b29b      	uxth	r3, r3
 8027676:	2b07      	cmp	r3, #7
 8027678:	8103      	strh	r3, [r0, #8]
 802767a:	bf81      	itttt	hi
 802767c:	2300      	movhi	r3, #0
 802767e:	8143      	strhhi	r3, [r0, #10]
 8027680:	8183      	strhhi	r3, [r0, #12]
 8027682:	7383      	strbhi	r3, [r0, #14]
 8027684:	4770      	bx	lr
	...

08027688 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8027688:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802768c:	4698      	mov	r8, r3
 802768e:	8883      	ldrh	r3, [r0, #4]
 8027690:	4604      	mov	r4, r0
 8027692:	4617      	mov	r7, r2
 8027694:	f8ad 3006 	strh.w	r3, [sp, #6]
 8027698:	eba8 0303 	sub.w	r3, r8, r3
 802769c:	4a19      	ldr	r2, [pc, #100]	; (8027704 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802769e:	460e      	mov	r6, r1
 80276a0:	b21b      	sxth	r3, r3
 80276a2:	88c1      	ldrh	r1, [r0, #6]
 80276a4:	9200      	str	r2, [sp, #0]
 80276a6:	2000      	movs	r0, #0
 80276a8:	2b00      	cmp	r3, #0
 80276aa:	8aa2      	ldrh	r2, [r4, #20]
 80276ac:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80276b0:	bfb8      	it	lt
 80276b2:	425b      	neglt	r3, r3
 80276b4:	f88d 0004 	strb.w	r0, [sp, #4]
 80276b8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80276bc:	b21b      	sxth	r3, r3
 80276be:	f8ad 800a 	strh.w	r8, [sp, #10]
 80276c2:	f8ad 500c 	strh.w	r5, [sp, #12]
 80276c6:	4293      	cmp	r3, r2
 80276c8:	dc07      	bgt.n	80276da <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80276ca:	1a69      	subs	r1, r5, r1
 80276cc:	b209      	sxth	r1, r1
 80276ce:	2900      	cmp	r1, #0
 80276d0:	bfb8      	it	lt
 80276d2:	4249      	neglt	r1, r1
 80276d4:	b209      	sxth	r1, r1
 80276d6:	428a      	cmp	r2, r1
 80276d8:	da10      	bge.n	80276fc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80276da:	6920      	ldr	r0, [r4, #16]
 80276dc:	4669      	mov	r1, sp
 80276de:	eba8 0606 	sub.w	r6, r8, r6
 80276e2:	1bef      	subs	r7, r5, r7
 80276e4:	6803      	ldr	r3, [r0, #0]
 80276e6:	685b      	ldr	r3, [r3, #4]
 80276e8:	4798      	blx	r3
 80276ea:	2300      	movs	r3, #0
 80276ec:	2001      	movs	r0, #1
 80276ee:	8166      	strh	r6, [r4, #10]
 80276f0:	8123      	strh	r3, [r4, #8]
 80276f2:	81a7      	strh	r7, [r4, #12]
 80276f4:	f8a4 8004 	strh.w	r8, [r4, #4]
 80276f8:	80e5      	strh	r5, [r4, #6]
 80276fa:	73a0      	strb	r0, [r4, #14]
 80276fc:	b004      	add	sp, #16
 80276fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027702:	bf00      	nop
 8027704:	0802c76c 	.word	0x0802c76c

08027708 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8027708:	b5f0      	push	{r4, r5, r6, r7, lr}
 802770a:	461e      	mov	r6, r3
 802770c:	1e4b      	subs	r3, r1, #1
 802770e:	b085      	sub	sp, #20
 8027710:	4604      	mov	r4, r0
 8027712:	2b01      	cmp	r3, #1
 8027714:	460d      	mov	r5, r1
 8027716:	4617      	mov	r7, r2
 8027718:	d84b      	bhi.n	80277b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802771a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802771e:	1cd3      	adds	r3, r2, #3
 8027720:	b29b      	uxth	r3, r3
 8027722:	2b06      	cmp	r3, #6
 8027724:	d916      	bls.n	8027754 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8027726:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80277c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802772a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802772e:	f8cd c004 	str.w	ip, [sp, #4]
 8027732:	f04f 0c00 	mov.w	ip, #0
 8027736:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802773a:	6900      	ldr	r0, [r0, #16]
 802773c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8027740:	a901      	add	r1, sp, #4
 8027742:	f88d c008 	strb.w	ip, [sp, #8]
 8027746:	f8ad 200a 	strh.w	r2, [sp, #10]
 802774a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802774e:	6803      	ldr	r3, [r0, #0]
 8027750:	689b      	ldr	r3, [r3, #8]
 8027752:	4798      	blx	r3
 8027754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027758:	1cd3      	adds	r3, r2, #3
 802775a:	b29b      	uxth	r3, r3
 802775c:	2b06      	cmp	r3, #6
 802775e:	d916      	bls.n	802778e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8027760:	f8df c064 	ldr.w	ip, [pc, #100]	; 80277c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8027764:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8027768:	f8cd c004 	str.w	ip, [sp, #4]
 802776c:	f04f 0c01 	mov.w	ip, #1
 8027770:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8027774:	6920      	ldr	r0, [r4, #16]
 8027776:	f8ad 100c 	strh.w	r1, [sp, #12]
 802777a:	a901      	add	r1, sp, #4
 802777c:	f88d c008 	strb.w	ip, [sp, #8]
 8027780:	f8ad 200a 	strh.w	r2, [sp, #10]
 8027784:	f8ad 300e 	strh.w	r3, [sp, #14]
 8027788:	6803      	ldr	r3, [r0, #0]
 802778a:	689b      	ldr	r3, [r3, #8]
 802778c:	4798      	blx	r3
 802778e:	4b0d      	ldr	r3, [pc, #52]	; (80277c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8027790:	a901      	add	r1, sp, #4
 8027792:	6920      	ldr	r0, [r4, #16]
 8027794:	9301      	str	r3, [sp, #4]
 8027796:	2300      	movs	r3, #0
 8027798:	f88d 5008 	strb.w	r5, [sp, #8]
 802779c:	f8ad 700a 	strh.w	r7, [sp, #10]
 80277a0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80277a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80277a8:	6803      	ldr	r3, [r0, #0]
 80277aa:	681b      	ldr	r3, [r3, #0]
 80277ac:	4798      	blx	r3
 80277ae:	b005      	add	sp, #20
 80277b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80277b2:	2900      	cmp	r1, #0
 80277b4:	d1eb      	bne.n	802778e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80277b6:	80a2      	strh	r2, [r4, #4]
 80277b8:	80c6      	strh	r6, [r0, #6]
 80277ba:	60a1      	str	r1, [r4, #8]
 80277bc:	81a1      	strh	r1, [r4, #12]
 80277be:	73a1      	strb	r1, [r4, #14]
 80277c0:	e7e5      	b.n	802778e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80277c2:	bf00      	nop
 80277c4:	0802c758 	.word	0x0802c758
 80277c8:	0802c780 	.word	0x0802c780

080277cc <__aeabi_atexit>:
 80277cc:	460b      	mov	r3, r1
 80277ce:	4601      	mov	r1, r0
 80277d0:	4618      	mov	r0, r3
 80277d2:	f000 b853 	b.w	802787c <__cxa_atexit>

080277d6 <_ZdlPvj>:
 80277d6:	f000 b812 	b.w	80277fe <_ZdlPv>

080277da <__cxa_guard_acquire>:
 80277da:	6803      	ldr	r3, [r0, #0]
 80277dc:	07db      	lsls	r3, r3, #31
 80277de:	d406      	bmi.n	80277ee <__cxa_guard_acquire+0x14>
 80277e0:	7843      	ldrb	r3, [r0, #1]
 80277e2:	b103      	cbz	r3, 80277e6 <__cxa_guard_acquire+0xc>
 80277e4:	deff      	udf	#255	; 0xff
 80277e6:	2301      	movs	r3, #1
 80277e8:	7043      	strb	r3, [r0, #1]
 80277ea:	4618      	mov	r0, r3
 80277ec:	4770      	bx	lr
 80277ee:	2000      	movs	r0, #0
 80277f0:	4770      	bx	lr

080277f2 <__cxa_guard_release>:
 80277f2:	2301      	movs	r3, #1
 80277f4:	6003      	str	r3, [r0, #0]
 80277f6:	4770      	bx	lr

080277f8 <__cxa_pure_virtual>:
 80277f8:	b508      	push	{r3, lr}
 80277fa:	f000 f80f 	bl	802781c <_ZSt9terminatev>

080277fe <_ZdlPv>:
 80277fe:	f000 b893 	b.w	8027928 <free>

08027802 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8027802:	b508      	push	{r3, lr}
 8027804:	4780      	blx	r0
 8027806:	f000 f80e 	bl	8027826 <abort>
	...

0802780c <_ZSt13get_terminatev>:
 802780c:	4b02      	ldr	r3, [pc, #8]	; (8027818 <_ZSt13get_terminatev+0xc>)
 802780e:	6818      	ldr	r0, [r3, #0]
 8027810:	f3bf 8f5b 	dmb	ish
 8027814:	4770      	bx	lr
 8027816:	bf00      	nop
 8027818:	240000bc 	.word	0x240000bc

0802781c <_ZSt9terminatev>:
 802781c:	b508      	push	{r3, lr}
 802781e:	f7ff fff5 	bl	802780c <_ZSt13get_terminatev>
 8027822:	f7ff ffee 	bl	8027802 <_ZN10__cxxabiv111__terminateEPFvvE>

08027826 <abort>:
 8027826:	b508      	push	{r3, lr}
 8027828:	2006      	movs	r0, #6
 802782a:	f000 fc6b 	bl	8028104 <raise>
 802782e:	2001      	movs	r0, #1
 8027830:	f7df fcf6 	bl	8007220 <_exit>

08027834 <__assert_func>:
 8027834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027836:	4614      	mov	r4, r2
 8027838:	461a      	mov	r2, r3
 802783a:	4b09      	ldr	r3, [pc, #36]	; (8027860 <__assert_func+0x2c>)
 802783c:	681b      	ldr	r3, [r3, #0]
 802783e:	4605      	mov	r5, r0
 8027840:	68d8      	ldr	r0, [r3, #12]
 8027842:	b14c      	cbz	r4, 8027858 <__assert_func+0x24>
 8027844:	4b07      	ldr	r3, [pc, #28]	; (8027864 <__assert_func+0x30>)
 8027846:	9100      	str	r1, [sp, #0]
 8027848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802784c:	4906      	ldr	r1, [pc, #24]	; (8027868 <__assert_func+0x34>)
 802784e:	462b      	mov	r3, r5
 8027850:	f000 f828 	bl	80278a4 <fiprintf>
 8027854:	f7ff ffe7 	bl	8027826 <abort>
 8027858:	4b04      	ldr	r3, [pc, #16]	; (802786c <__assert_func+0x38>)
 802785a:	461c      	mov	r4, r3
 802785c:	e7f3      	b.n	8027846 <__assert_func+0x12>
 802785e:	bf00      	nop
 8027860:	240000c0 	.word	0x240000c0
 8027864:	0802c9a8 	.word	0x0802c9a8
 8027868:	0802c9b5 	.word	0x0802c9b5
 802786c:	0802c9e3 	.word	0x0802c9e3

08027870 <atexit>:
 8027870:	2300      	movs	r3, #0
 8027872:	4601      	mov	r1, r0
 8027874:	461a      	mov	r2, r3
 8027876:	4618      	mov	r0, r3
 8027878:	f000 bd32 	b.w	80282e0 <__register_exitproc>

0802787c <__cxa_atexit>:
 802787c:	b510      	push	{r4, lr}
 802787e:	4c05      	ldr	r4, [pc, #20]	; (8027894 <__cxa_atexit+0x18>)
 8027880:	4613      	mov	r3, r2
 8027882:	b12c      	cbz	r4, 8027890 <__cxa_atexit+0x14>
 8027884:	460a      	mov	r2, r1
 8027886:	4601      	mov	r1, r0
 8027888:	2002      	movs	r0, #2
 802788a:	f000 fd29 	bl	80282e0 <__register_exitproc>
 802788e:	bd10      	pop	{r4, pc}
 8027890:	4620      	mov	r0, r4
 8027892:	e7fc      	b.n	802788e <__cxa_atexit+0x12>
 8027894:	080282e1 	.word	0x080282e1

08027898 <__errno>:
 8027898:	4b01      	ldr	r3, [pc, #4]	; (80278a0 <__errno+0x8>)
 802789a:	6818      	ldr	r0, [r3, #0]
 802789c:	4770      	bx	lr
 802789e:	bf00      	nop
 80278a0:	240000c0 	.word	0x240000c0

080278a4 <fiprintf>:
 80278a4:	b40e      	push	{r1, r2, r3}
 80278a6:	b503      	push	{r0, r1, lr}
 80278a8:	4601      	mov	r1, r0
 80278aa:	ab03      	add	r3, sp, #12
 80278ac:	4805      	ldr	r0, [pc, #20]	; (80278c4 <fiprintf+0x20>)
 80278ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80278b2:	6800      	ldr	r0, [r0, #0]
 80278b4:	9301      	str	r3, [sp, #4]
 80278b6:	f000 f929 	bl	8027b0c <_vfiprintf_r>
 80278ba:	b002      	add	sp, #8
 80278bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80278c0:	b003      	add	sp, #12
 80278c2:	4770      	bx	lr
 80278c4:	240000c0 	.word	0x240000c0

080278c8 <__libc_init_array>:
 80278c8:	b570      	push	{r4, r5, r6, lr}
 80278ca:	4d0d      	ldr	r5, [pc, #52]	; (8027900 <__libc_init_array+0x38>)
 80278cc:	4c0d      	ldr	r4, [pc, #52]	; (8027904 <__libc_init_array+0x3c>)
 80278ce:	1b64      	subs	r4, r4, r5
 80278d0:	10a4      	asrs	r4, r4, #2
 80278d2:	2600      	movs	r6, #0
 80278d4:	42a6      	cmp	r6, r4
 80278d6:	d109      	bne.n	80278ec <__libc_init_array+0x24>
 80278d8:	4d0b      	ldr	r5, [pc, #44]	; (8027908 <__libc_init_array+0x40>)
 80278da:	4c0c      	ldr	r4, [pc, #48]	; (802790c <__libc_init_array+0x44>)
 80278dc:	f001 f836 	bl	802894c <_init>
 80278e0:	1b64      	subs	r4, r4, r5
 80278e2:	10a4      	asrs	r4, r4, #2
 80278e4:	2600      	movs	r6, #0
 80278e6:	42a6      	cmp	r6, r4
 80278e8:	d105      	bne.n	80278f6 <__libc_init_array+0x2e>
 80278ea:	bd70      	pop	{r4, r5, r6, pc}
 80278ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80278f0:	4798      	blx	r3
 80278f2:	3601      	adds	r6, #1
 80278f4:	e7ee      	b.n	80278d4 <__libc_init_array+0xc>
 80278f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80278fa:	4798      	blx	r3
 80278fc:	3601      	adds	r6, #1
 80278fe:	e7f2      	b.n	80278e6 <__libc_init_array+0x1e>
 8027900:	0802ca98 	.word	0x0802ca98
 8027904:	0802ca98 	.word	0x0802ca98
 8027908:	0802ca98 	.word	0x0802ca98
 802790c:	0802cab4 	.word	0x0802cab4

08027910 <__retarget_lock_init_recursive>:
 8027910:	4770      	bx	lr

08027912 <__retarget_lock_acquire_recursive>:
 8027912:	4770      	bx	lr

08027914 <__retarget_lock_release>:
 8027914:	4770      	bx	lr

08027916 <__retarget_lock_release_recursive>:
 8027916:	4770      	bx	lr

08027918 <malloc>:
 8027918:	4b02      	ldr	r3, [pc, #8]	; (8027924 <malloc+0xc>)
 802791a:	4601      	mov	r1, r0
 802791c:	6818      	ldr	r0, [r3, #0]
 802791e:	f000 b871 	b.w	8027a04 <_malloc_r>
 8027922:	bf00      	nop
 8027924:	240000c0 	.word	0x240000c0

08027928 <free>:
 8027928:	4b02      	ldr	r3, [pc, #8]	; (8027934 <free+0xc>)
 802792a:	4601      	mov	r1, r0
 802792c:	6818      	ldr	r0, [r3, #0]
 802792e:	f000 b819 	b.w	8027964 <_free_r>
 8027932:	bf00      	nop
 8027934:	240000c0 	.word	0x240000c0

08027938 <memcpy>:
 8027938:	440a      	add	r2, r1
 802793a:	4291      	cmp	r1, r2
 802793c:	f100 33ff 	add.w	r3, r0, #4294967295
 8027940:	d100      	bne.n	8027944 <memcpy+0xc>
 8027942:	4770      	bx	lr
 8027944:	b510      	push	{r4, lr}
 8027946:	f811 4b01 	ldrb.w	r4, [r1], #1
 802794a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802794e:	4291      	cmp	r1, r2
 8027950:	d1f9      	bne.n	8027946 <memcpy+0xe>
 8027952:	bd10      	pop	{r4, pc}

08027954 <memset>:
 8027954:	4402      	add	r2, r0
 8027956:	4603      	mov	r3, r0
 8027958:	4293      	cmp	r3, r2
 802795a:	d100      	bne.n	802795e <memset+0xa>
 802795c:	4770      	bx	lr
 802795e:	f803 1b01 	strb.w	r1, [r3], #1
 8027962:	e7f9      	b.n	8027958 <memset+0x4>

08027964 <_free_r>:
 8027964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027966:	2900      	cmp	r1, #0
 8027968:	d048      	beq.n	80279fc <_free_r+0x98>
 802796a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802796e:	9001      	str	r0, [sp, #4]
 8027970:	2b00      	cmp	r3, #0
 8027972:	f1a1 0404 	sub.w	r4, r1, #4
 8027976:	bfb8      	it	lt
 8027978:	18e4      	addlt	r4, r4, r3
 802797a:	f000 ff2f 	bl	80287dc <__malloc_lock>
 802797e:	4a20      	ldr	r2, [pc, #128]	; (8027a00 <_free_r+0x9c>)
 8027980:	9801      	ldr	r0, [sp, #4]
 8027982:	6813      	ldr	r3, [r2, #0]
 8027984:	4615      	mov	r5, r2
 8027986:	b933      	cbnz	r3, 8027996 <_free_r+0x32>
 8027988:	6063      	str	r3, [r4, #4]
 802798a:	6014      	str	r4, [r2, #0]
 802798c:	b003      	add	sp, #12
 802798e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027992:	f000 bf29 	b.w	80287e8 <__malloc_unlock>
 8027996:	42a3      	cmp	r3, r4
 8027998:	d90b      	bls.n	80279b2 <_free_r+0x4e>
 802799a:	6821      	ldr	r1, [r4, #0]
 802799c:	1862      	adds	r2, r4, r1
 802799e:	4293      	cmp	r3, r2
 80279a0:	bf04      	itt	eq
 80279a2:	681a      	ldreq	r2, [r3, #0]
 80279a4:	685b      	ldreq	r3, [r3, #4]
 80279a6:	6063      	str	r3, [r4, #4]
 80279a8:	bf04      	itt	eq
 80279aa:	1852      	addeq	r2, r2, r1
 80279ac:	6022      	streq	r2, [r4, #0]
 80279ae:	602c      	str	r4, [r5, #0]
 80279b0:	e7ec      	b.n	802798c <_free_r+0x28>
 80279b2:	461a      	mov	r2, r3
 80279b4:	685b      	ldr	r3, [r3, #4]
 80279b6:	b10b      	cbz	r3, 80279bc <_free_r+0x58>
 80279b8:	42a3      	cmp	r3, r4
 80279ba:	d9fa      	bls.n	80279b2 <_free_r+0x4e>
 80279bc:	6811      	ldr	r1, [r2, #0]
 80279be:	1855      	adds	r5, r2, r1
 80279c0:	42a5      	cmp	r5, r4
 80279c2:	d10b      	bne.n	80279dc <_free_r+0x78>
 80279c4:	6824      	ldr	r4, [r4, #0]
 80279c6:	4421      	add	r1, r4
 80279c8:	1854      	adds	r4, r2, r1
 80279ca:	42a3      	cmp	r3, r4
 80279cc:	6011      	str	r1, [r2, #0]
 80279ce:	d1dd      	bne.n	802798c <_free_r+0x28>
 80279d0:	681c      	ldr	r4, [r3, #0]
 80279d2:	685b      	ldr	r3, [r3, #4]
 80279d4:	6053      	str	r3, [r2, #4]
 80279d6:	4421      	add	r1, r4
 80279d8:	6011      	str	r1, [r2, #0]
 80279da:	e7d7      	b.n	802798c <_free_r+0x28>
 80279dc:	d902      	bls.n	80279e4 <_free_r+0x80>
 80279de:	230c      	movs	r3, #12
 80279e0:	6003      	str	r3, [r0, #0]
 80279e2:	e7d3      	b.n	802798c <_free_r+0x28>
 80279e4:	6825      	ldr	r5, [r4, #0]
 80279e6:	1961      	adds	r1, r4, r5
 80279e8:	428b      	cmp	r3, r1
 80279ea:	bf04      	itt	eq
 80279ec:	6819      	ldreq	r1, [r3, #0]
 80279ee:	685b      	ldreq	r3, [r3, #4]
 80279f0:	6063      	str	r3, [r4, #4]
 80279f2:	bf04      	itt	eq
 80279f4:	1949      	addeq	r1, r1, r5
 80279f6:	6021      	streq	r1, [r4, #0]
 80279f8:	6054      	str	r4, [r2, #4]
 80279fa:	e7c7      	b.n	802798c <_free_r+0x28>
 80279fc:	b003      	add	sp, #12
 80279fe:	bd30      	pop	{r4, r5, pc}
 8027a00:	24025de4 	.word	0x24025de4

08027a04 <_malloc_r>:
 8027a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027a06:	1ccd      	adds	r5, r1, #3
 8027a08:	f025 0503 	bic.w	r5, r5, #3
 8027a0c:	3508      	adds	r5, #8
 8027a0e:	2d0c      	cmp	r5, #12
 8027a10:	bf38      	it	cc
 8027a12:	250c      	movcc	r5, #12
 8027a14:	2d00      	cmp	r5, #0
 8027a16:	4606      	mov	r6, r0
 8027a18:	db01      	blt.n	8027a1e <_malloc_r+0x1a>
 8027a1a:	42a9      	cmp	r1, r5
 8027a1c:	d903      	bls.n	8027a26 <_malloc_r+0x22>
 8027a1e:	230c      	movs	r3, #12
 8027a20:	6033      	str	r3, [r6, #0]
 8027a22:	2000      	movs	r0, #0
 8027a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027a26:	f000 fed9 	bl	80287dc <__malloc_lock>
 8027a2a:	4921      	ldr	r1, [pc, #132]	; (8027ab0 <_malloc_r+0xac>)
 8027a2c:	680a      	ldr	r2, [r1, #0]
 8027a2e:	4614      	mov	r4, r2
 8027a30:	b99c      	cbnz	r4, 8027a5a <_malloc_r+0x56>
 8027a32:	4f20      	ldr	r7, [pc, #128]	; (8027ab4 <_malloc_r+0xb0>)
 8027a34:	683b      	ldr	r3, [r7, #0]
 8027a36:	b923      	cbnz	r3, 8027a42 <_malloc_r+0x3e>
 8027a38:	4621      	mov	r1, r4
 8027a3a:	4630      	mov	r0, r6
 8027a3c:	f000 fb2a 	bl	8028094 <_sbrk_r>
 8027a40:	6038      	str	r0, [r7, #0]
 8027a42:	4629      	mov	r1, r5
 8027a44:	4630      	mov	r0, r6
 8027a46:	f000 fb25 	bl	8028094 <_sbrk_r>
 8027a4a:	1c43      	adds	r3, r0, #1
 8027a4c:	d123      	bne.n	8027a96 <_malloc_r+0x92>
 8027a4e:	230c      	movs	r3, #12
 8027a50:	6033      	str	r3, [r6, #0]
 8027a52:	4630      	mov	r0, r6
 8027a54:	f000 fec8 	bl	80287e8 <__malloc_unlock>
 8027a58:	e7e3      	b.n	8027a22 <_malloc_r+0x1e>
 8027a5a:	6823      	ldr	r3, [r4, #0]
 8027a5c:	1b5b      	subs	r3, r3, r5
 8027a5e:	d417      	bmi.n	8027a90 <_malloc_r+0x8c>
 8027a60:	2b0b      	cmp	r3, #11
 8027a62:	d903      	bls.n	8027a6c <_malloc_r+0x68>
 8027a64:	6023      	str	r3, [r4, #0]
 8027a66:	441c      	add	r4, r3
 8027a68:	6025      	str	r5, [r4, #0]
 8027a6a:	e004      	b.n	8027a76 <_malloc_r+0x72>
 8027a6c:	6863      	ldr	r3, [r4, #4]
 8027a6e:	42a2      	cmp	r2, r4
 8027a70:	bf0c      	ite	eq
 8027a72:	600b      	streq	r3, [r1, #0]
 8027a74:	6053      	strne	r3, [r2, #4]
 8027a76:	4630      	mov	r0, r6
 8027a78:	f000 feb6 	bl	80287e8 <__malloc_unlock>
 8027a7c:	f104 000b 	add.w	r0, r4, #11
 8027a80:	1d23      	adds	r3, r4, #4
 8027a82:	f020 0007 	bic.w	r0, r0, #7
 8027a86:	1ac2      	subs	r2, r0, r3
 8027a88:	d0cc      	beq.n	8027a24 <_malloc_r+0x20>
 8027a8a:	1a1b      	subs	r3, r3, r0
 8027a8c:	50a3      	str	r3, [r4, r2]
 8027a8e:	e7c9      	b.n	8027a24 <_malloc_r+0x20>
 8027a90:	4622      	mov	r2, r4
 8027a92:	6864      	ldr	r4, [r4, #4]
 8027a94:	e7cc      	b.n	8027a30 <_malloc_r+0x2c>
 8027a96:	1cc4      	adds	r4, r0, #3
 8027a98:	f024 0403 	bic.w	r4, r4, #3
 8027a9c:	42a0      	cmp	r0, r4
 8027a9e:	d0e3      	beq.n	8027a68 <_malloc_r+0x64>
 8027aa0:	1a21      	subs	r1, r4, r0
 8027aa2:	4630      	mov	r0, r6
 8027aa4:	f000 faf6 	bl	8028094 <_sbrk_r>
 8027aa8:	3001      	adds	r0, #1
 8027aaa:	d1dd      	bne.n	8027a68 <_malloc_r+0x64>
 8027aac:	e7cf      	b.n	8027a4e <_malloc_r+0x4a>
 8027aae:	bf00      	nop
 8027ab0:	24025de4 	.word	0x24025de4
 8027ab4:	24025de8 	.word	0x24025de8

08027ab8 <__sfputc_r>:
 8027ab8:	6893      	ldr	r3, [r2, #8]
 8027aba:	3b01      	subs	r3, #1
 8027abc:	2b00      	cmp	r3, #0
 8027abe:	b410      	push	{r4}
 8027ac0:	6093      	str	r3, [r2, #8]
 8027ac2:	da08      	bge.n	8027ad6 <__sfputc_r+0x1e>
 8027ac4:	6994      	ldr	r4, [r2, #24]
 8027ac6:	42a3      	cmp	r3, r4
 8027ac8:	db01      	blt.n	8027ace <__sfputc_r+0x16>
 8027aca:	290a      	cmp	r1, #10
 8027acc:	d103      	bne.n	8027ad6 <__sfputc_r+0x1e>
 8027ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027ad2:	f000 bb45 	b.w	8028160 <__swbuf_r>
 8027ad6:	6813      	ldr	r3, [r2, #0]
 8027ad8:	1c58      	adds	r0, r3, #1
 8027ada:	6010      	str	r0, [r2, #0]
 8027adc:	7019      	strb	r1, [r3, #0]
 8027ade:	4608      	mov	r0, r1
 8027ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027ae4:	4770      	bx	lr

08027ae6 <__sfputs_r>:
 8027ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027ae8:	4606      	mov	r6, r0
 8027aea:	460f      	mov	r7, r1
 8027aec:	4614      	mov	r4, r2
 8027aee:	18d5      	adds	r5, r2, r3
 8027af0:	42ac      	cmp	r4, r5
 8027af2:	d101      	bne.n	8027af8 <__sfputs_r+0x12>
 8027af4:	2000      	movs	r0, #0
 8027af6:	e007      	b.n	8027b08 <__sfputs_r+0x22>
 8027af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027afc:	463a      	mov	r2, r7
 8027afe:	4630      	mov	r0, r6
 8027b00:	f7ff ffda 	bl	8027ab8 <__sfputc_r>
 8027b04:	1c43      	adds	r3, r0, #1
 8027b06:	d1f3      	bne.n	8027af0 <__sfputs_r+0xa>
 8027b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027b0c <_vfiprintf_r>:
 8027b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b10:	460d      	mov	r5, r1
 8027b12:	b09d      	sub	sp, #116	; 0x74
 8027b14:	4614      	mov	r4, r2
 8027b16:	4698      	mov	r8, r3
 8027b18:	4606      	mov	r6, r0
 8027b1a:	b118      	cbz	r0, 8027b24 <_vfiprintf_r+0x18>
 8027b1c:	6983      	ldr	r3, [r0, #24]
 8027b1e:	b90b      	cbnz	r3, 8027b24 <_vfiprintf_r+0x18>
 8027b20:	f000 fd5a 	bl	80285d8 <__sinit>
 8027b24:	4b89      	ldr	r3, [pc, #548]	; (8027d4c <_vfiprintf_r+0x240>)
 8027b26:	429d      	cmp	r5, r3
 8027b28:	d11b      	bne.n	8027b62 <_vfiprintf_r+0x56>
 8027b2a:	6875      	ldr	r5, [r6, #4]
 8027b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027b2e:	07d9      	lsls	r1, r3, #31
 8027b30:	d405      	bmi.n	8027b3e <_vfiprintf_r+0x32>
 8027b32:	89ab      	ldrh	r3, [r5, #12]
 8027b34:	059a      	lsls	r2, r3, #22
 8027b36:	d402      	bmi.n	8027b3e <_vfiprintf_r+0x32>
 8027b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027b3a:	f7ff feea 	bl	8027912 <__retarget_lock_acquire_recursive>
 8027b3e:	89ab      	ldrh	r3, [r5, #12]
 8027b40:	071b      	lsls	r3, r3, #28
 8027b42:	d501      	bpl.n	8027b48 <_vfiprintf_r+0x3c>
 8027b44:	692b      	ldr	r3, [r5, #16]
 8027b46:	b9eb      	cbnz	r3, 8027b84 <_vfiprintf_r+0x78>
 8027b48:	4629      	mov	r1, r5
 8027b4a:	4630      	mov	r0, r6
 8027b4c:	f000 fb5a 	bl	8028204 <__swsetup_r>
 8027b50:	b1c0      	cbz	r0, 8027b84 <_vfiprintf_r+0x78>
 8027b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027b54:	07dc      	lsls	r4, r3, #31
 8027b56:	d50e      	bpl.n	8027b76 <_vfiprintf_r+0x6a>
 8027b58:	f04f 30ff 	mov.w	r0, #4294967295
 8027b5c:	b01d      	add	sp, #116	; 0x74
 8027b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b62:	4b7b      	ldr	r3, [pc, #492]	; (8027d50 <_vfiprintf_r+0x244>)
 8027b64:	429d      	cmp	r5, r3
 8027b66:	d101      	bne.n	8027b6c <_vfiprintf_r+0x60>
 8027b68:	68b5      	ldr	r5, [r6, #8]
 8027b6a:	e7df      	b.n	8027b2c <_vfiprintf_r+0x20>
 8027b6c:	4b79      	ldr	r3, [pc, #484]	; (8027d54 <_vfiprintf_r+0x248>)
 8027b6e:	429d      	cmp	r5, r3
 8027b70:	bf08      	it	eq
 8027b72:	68f5      	ldreq	r5, [r6, #12]
 8027b74:	e7da      	b.n	8027b2c <_vfiprintf_r+0x20>
 8027b76:	89ab      	ldrh	r3, [r5, #12]
 8027b78:	0598      	lsls	r0, r3, #22
 8027b7a:	d4ed      	bmi.n	8027b58 <_vfiprintf_r+0x4c>
 8027b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027b7e:	f7ff feca 	bl	8027916 <__retarget_lock_release_recursive>
 8027b82:	e7e9      	b.n	8027b58 <_vfiprintf_r+0x4c>
 8027b84:	2300      	movs	r3, #0
 8027b86:	9309      	str	r3, [sp, #36]	; 0x24
 8027b88:	2320      	movs	r3, #32
 8027b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8027b92:	2330      	movs	r3, #48	; 0x30
 8027b94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027d58 <_vfiprintf_r+0x24c>
 8027b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027b9c:	f04f 0901 	mov.w	r9, #1
 8027ba0:	4623      	mov	r3, r4
 8027ba2:	469a      	mov	sl, r3
 8027ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027ba8:	b10a      	cbz	r2, 8027bae <_vfiprintf_r+0xa2>
 8027baa:	2a25      	cmp	r2, #37	; 0x25
 8027bac:	d1f9      	bne.n	8027ba2 <_vfiprintf_r+0x96>
 8027bae:	ebba 0b04 	subs.w	fp, sl, r4
 8027bb2:	d00b      	beq.n	8027bcc <_vfiprintf_r+0xc0>
 8027bb4:	465b      	mov	r3, fp
 8027bb6:	4622      	mov	r2, r4
 8027bb8:	4629      	mov	r1, r5
 8027bba:	4630      	mov	r0, r6
 8027bbc:	f7ff ff93 	bl	8027ae6 <__sfputs_r>
 8027bc0:	3001      	adds	r0, #1
 8027bc2:	f000 80aa 	beq.w	8027d1a <_vfiprintf_r+0x20e>
 8027bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027bc8:	445a      	add	r2, fp
 8027bca:	9209      	str	r2, [sp, #36]	; 0x24
 8027bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8027bd0:	2b00      	cmp	r3, #0
 8027bd2:	f000 80a2 	beq.w	8027d1a <_vfiprintf_r+0x20e>
 8027bd6:	2300      	movs	r3, #0
 8027bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8027bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027be0:	f10a 0a01 	add.w	sl, sl, #1
 8027be4:	9304      	str	r3, [sp, #16]
 8027be6:	9307      	str	r3, [sp, #28]
 8027be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027bec:	931a      	str	r3, [sp, #104]	; 0x68
 8027bee:	4654      	mov	r4, sl
 8027bf0:	2205      	movs	r2, #5
 8027bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027bf6:	4858      	ldr	r0, [pc, #352]	; (8027d58 <_vfiprintf_r+0x24c>)
 8027bf8:	f7d8 fb7a 	bl	80002f0 <memchr>
 8027bfc:	9a04      	ldr	r2, [sp, #16]
 8027bfe:	b9d8      	cbnz	r0, 8027c38 <_vfiprintf_r+0x12c>
 8027c00:	06d1      	lsls	r1, r2, #27
 8027c02:	bf44      	itt	mi
 8027c04:	2320      	movmi	r3, #32
 8027c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027c0a:	0713      	lsls	r3, r2, #28
 8027c0c:	bf44      	itt	mi
 8027c0e:	232b      	movmi	r3, #43	; 0x2b
 8027c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027c14:	f89a 3000 	ldrb.w	r3, [sl]
 8027c18:	2b2a      	cmp	r3, #42	; 0x2a
 8027c1a:	d015      	beq.n	8027c48 <_vfiprintf_r+0x13c>
 8027c1c:	9a07      	ldr	r2, [sp, #28]
 8027c1e:	4654      	mov	r4, sl
 8027c20:	2000      	movs	r0, #0
 8027c22:	f04f 0c0a 	mov.w	ip, #10
 8027c26:	4621      	mov	r1, r4
 8027c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027c2c:	3b30      	subs	r3, #48	; 0x30
 8027c2e:	2b09      	cmp	r3, #9
 8027c30:	d94e      	bls.n	8027cd0 <_vfiprintf_r+0x1c4>
 8027c32:	b1b0      	cbz	r0, 8027c62 <_vfiprintf_r+0x156>
 8027c34:	9207      	str	r2, [sp, #28]
 8027c36:	e014      	b.n	8027c62 <_vfiprintf_r+0x156>
 8027c38:	eba0 0308 	sub.w	r3, r0, r8
 8027c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8027c40:	4313      	orrs	r3, r2
 8027c42:	9304      	str	r3, [sp, #16]
 8027c44:	46a2      	mov	sl, r4
 8027c46:	e7d2      	b.n	8027bee <_vfiprintf_r+0xe2>
 8027c48:	9b03      	ldr	r3, [sp, #12]
 8027c4a:	1d19      	adds	r1, r3, #4
 8027c4c:	681b      	ldr	r3, [r3, #0]
 8027c4e:	9103      	str	r1, [sp, #12]
 8027c50:	2b00      	cmp	r3, #0
 8027c52:	bfbb      	ittet	lt
 8027c54:	425b      	neglt	r3, r3
 8027c56:	f042 0202 	orrlt.w	r2, r2, #2
 8027c5a:	9307      	strge	r3, [sp, #28]
 8027c5c:	9307      	strlt	r3, [sp, #28]
 8027c5e:	bfb8      	it	lt
 8027c60:	9204      	strlt	r2, [sp, #16]
 8027c62:	7823      	ldrb	r3, [r4, #0]
 8027c64:	2b2e      	cmp	r3, #46	; 0x2e
 8027c66:	d10c      	bne.n	8027c82 <_vfiprintf_r+0x176>
 8027c68:	7863      	ldrb	r3, [r4, #1]
 8027c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8027c6c:	d135      	bne.n	8027cda <_vfiprintf_r+0x1ce>
 8027c6e:	9b03      	ldr	r3, [sp, #12]
 8027c70:	1d1a      	adds	r2, r3, #4
 8027c72:	681b      	ldr	r3, [r3, #0]
 8027c74:	9203      	str	r2, [sp, #12]
 8027c76:	2b00      	cmp	r3, #0
 8027c78:	bfb8      	it	lt
 8027c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8027c7e:	3402      	adds	r4, #2
 8027c80:	9305      	str	r3, [sp, #20]
 8027c82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027d68 <_vfiprintf_r+0x25c>
 8027c86:	7821      	ldrb	r1, [r4, #0]
 8027c88:	2203      	movs	r2, #3
 8027c8a:	4650      	mov	r0, sl
 8027c8c:	f7d8 fb30 	bl	80002f0 <memchr>
 8027c90:	b140      	cbz	r0, 8027ca4 <_vfiprintf_r+0x198>
 8027c92:	2340      	movs	r3, #64	; 0x40
 8027c94:	eba0 000a 	sub.w	r0, r0, sl
 8027c98:	fa03 f000 	lsl.w	r0, r3, r0
 8027c9c:	9b04      	ldr	r3, [sp, #16]
 8027c9e:	4303      	orrs	r3, r0
 8027ca0:	3401      	adds	r4, #1
 8027ca2:	9304      	str	r3, [sp, #16]
 8027ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027ca8:	482c      	ldr	r0, [pc, #176]	; (8027d5c <_vfiprintf_r+0x250>)
 8027caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027cae:	2206      	movs	r2, #6
 8027cb0:	f7d8 fb1e 	bl	80002f0 <memchr>
 8027cb4:	2800      	cmp	r0, #0
 8027cb6:	d03f      	beq.n	8027d38 <_vfiprintf_r+0x22c>
 8027cb8:	4b29      	ldr	r3, [pc, #164]	; (8027d60 <_vfiprintf_r+0x254>)
 8027cba:	bb1b      	cbnz	r3, 8027d04 <_vfiprintf_r+0x1f8>
 8027cbc:	9b03      	ldr	r3, [sp, #12]
 8027cbe:	3307      	adds	r3, #7
 8027cc0:	f023 0307 	bic.w	r3, r3, #7
 8027cc4:	3308      	adds	r3, #8
 8027cc6:	9303      	str	r3, [sp, #12]
 8027cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027cca:	443b      	add	r3, r7
 8027ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8027cce:	e767      	b.n	8027ba0 <_vfiprintf_r+0x94>
 8027cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8027cd4:	460c      	mov	r4, r1
 8027cd6:	2001      	movs	r0, #1
 8027cd8:	e7a5      	b.n	8027c26 <_vfiprintf_r+0x11a>
 8027cda:	2300      	movs	r3, #0
 8027cdc:	3401      	adds	r4, #1
 8027cde:	9305      	str	r3, [sp, #20]
 8027ce0:	4619      	mov	r1, r3
 8027ce2:	f04f 0c0a 	mov.w	ip, #10
 8027ce6:	4620      	mov	r0, r4
 8027ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027cec:	3a30      	subs	r2, #48	; 0x30
 8027cee:	2a09      	cmp	r2, #9
 8027cf0:	d903      	bls.n	8027cfa <_vfiprintf_r+0x1ee>
 8027cf2:	2b00      	cmp	r3, #0
 8027cf4:	d0c5      	beq.n	8027c82 <_vfiprintf_r+0x176>
 8027cf6:	9105      	str	r1, [sp, #20]
 8027cf8:	e7c3      	b.n	8027c82 <_vfiprintf_r+0x176>
 8027cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8027cfe:	4604      	mov	r4, r0
 8027d00:	2301      	movs	r3, #1
 8027d02:	e7f0      	b.n	8027ce6 <_vfiprintf_r+0x1da>
 8027d04:	ab03      	add	r3, sp, #12
 8027d06:	9300      	str	r3, [sp, #0]
 8027d08:	462a      	mov	r2, r5
 8027d0a:	4b16      	ldr	r3, [pc, #88]	; (8027d64 <_vfiprintf_r+0x258>)
 8027d0c:	a904      	add	r1, sp, #16
 8027d0e:	4630      	mov	r0, r6
 8027d10:	f3af 8000 	nop.w
 8027d14:	4607      	mov	r7, r0
 8027d16:	1c78      	adds	r0, r7, #1
 8027d18:	d1d6      	bne.n	8027cc8 <_vfiprintf_r+0x1bc>
 8027d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027d1c:	07d9      	lsls	r1, r3, #31
 8027d1e:	d405      	bmi.n	8027d2c <_vfiprintf_r+0x220>
 8027d20:	89ab      	ldrh	r3, [r5, #12]
 8027d22:	059a      	lsls	r2, r3, #22
 8027d24:	d402      	bmi.n	8027d2c <_vfiprintf_r+0x220>
 8027d26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027d28:	f7ff fdf5 	bl	8027916 <__retarget_lock_release_recursive>
 8027d2c:	89ab      	ldrh	r3, [r5, #12]
 8027d2e:	065b      	lsls	r3, r3, #25
 8027d30:	f53f af12 	bmi.w	8027b58 <_vfiprintf_r+0x4c>
 8027d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027d36:	e711      	b.n	8027b5c <_vfiprintf_r+0x50>
 8027d38:	ab03      	add	r3, sp, #12
 8027d3a:	9300      	str	r3, [sp, #0]
 8027d3c:	462a      	mov	r2, r5
 8027d3e:	4b09      	ldr	r3, [pc, #36]	; (8027d64 <_vfiprintf_r+0x258>)
 8027d40:	a904      	add	r1, sp, #16
 8027d42:	4630      	mov	r0, r6
 8027d44:	f000 f880 	bl	8027e48 <_printf_i>
 8027d48:	e7e4      	b.n	8027d14 <_vfiprintf_r+0x208>
 8027d4a:	bf00      	nop
 8027d4c:	0802ca40 	.word	0x0802ca40
 8027d50:	0802ca60 	.word	0x0802ca60
 8027d54:	0802ca20 	.word	0x0802ca20
 8027d58:	0802c9e8 	.word	0x0802c9e8
 8027d5c:	0802c9f2 	.word	0x0802c9f2
 8027d60:	00000000 	.word	0x00000000
 8027d64:	08027ae7 	.word	0x08027ae7
 8027d68:	0802c9ee 	.word	0x0802c9ee

08027d6c <_printf_common>:
 8027d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027d70:	4616      	mov	r6, r2
 8027d72:	4699      	mov	r9, r3
 8027d74:	688a      	ldr	r2, [r1, #8]
 8027d76:	690b      	ldr	r3, [r1, #16]
 8027d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027d7c:	4293      	cmp	r3, r2
 8027d7e:	bfb8      	it	lt
 8027d80:	4613      	movlt	r3, r2
 8027d82:	6033      	str	r3, [r6, #0]
 8027d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027d88:	4607      	mov	r7, r0
 8027d8a:	460c      	mov	r4, r1
 8027d8c:	b10a      	cbz	r2, 8027d92 <_printf_common+0x26>
 8027d8e:	3301      	adds	r3, #1
 8027d90:	6033      	str	r3, [r6, #0]
 8027d92:	6823      	ldr	r3, [r4, #0]
 8027d94:	0699      	lsls	r1, r3, #26
 8027d96:	bf42      	ittt	mi
 8027d98:	6833      	ldrmi	r3, [r6, #0]
 8027d9a:	3302      	addmi	r3, #2
 8027d9c:	6033      	strmi	r3, [r6, #0]
 8027d9e:	6825      	ldr	r5, [r4, #0]
 8027da0:	f015 0506 	ands.w	r5, r5, #6
 8027da4:	d106      	bne.n	8027db4 <_printf_common+0x48>
 8027da6:	f104 0a19 	add.w	sl, r4, #25
 8027daa:	68e3      	ldr	r3, [r4, #12]
 8027dac:	6832      	ldr	r2, [r6, #0]
 8027dae:	1a9b      	subs	r3, r3, r2
 8027db0:	42ab      	cmp	r3, r5
 8027db2:	dc26      	bgt.n	8027e02 <_printf_common+0x96>
 8027db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027db8:	1e13      	subs	r3, r2, #0
 8027dba:	6822      	ldr	r2, [r4, #0]
 8027dbc:	bf18      	it	ne
 8027dbe:	2301      	movne	r3, #1
 8027dc0:	0692      	lsls	r2, r2, #26
 8027dc2:	d42b      	bmi.n	8027e1c <_printf_common+0xb0>
 8027dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027dc8:	4649      	mov	r1, r9
 8027dca:	4638      	mov	r0, r7
 8027dcc:	47c0      	blx	r8
 8027dce:	3001      	adds	r0, #1
 8027dd0:	d01e      	beq.n	8027e10 <_printf_common+0xa4>
 8027dd2:	6823      	ldr	r3, [r4, #0]
 8027dd4:	68e5      	ldr	r5, [r4, #12]
 8027dd6:	6832      	ldr	r2, [r6, #0]
 8027dd8:	f003 0306 	and.w	r3, r3, #6
 8027ddc:	2b04      	cmp	r3, #4
 8027dde:	bf08      	it	eq
 8027de0:	1aad      	subeq	r5, r5, r2
 8027de2:	68a3      	ldr	r3, [r4, #8]
 8027de4:	6922      	ldr	r2, [r4, #16]
 8027de6:	bf0c      	ite	eq
 8027de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027dec:	2500      	movne	r5, #0
 8027dee:	4293      	cmp	r3, r2
 8027df0:	bfc4      	itt	gt
 8027df2:	1a9b      	subgt	r3, r3, r2
 8027df4:	18ed      	addgt	r5, r5, r3
 8027df6:	2600      	movs	r6, #0
 8027df8:	341a      	adds	r4, #26
 8027dfa:	42b5      	cmp	r5, r6
 8027dfc:	d11a      	bne.n	8027e34 <_printf_common+0xc8>
 8027dfe:	2000      	movs	r0, #0
 8027e00:	e008      	b.n	8027e14 <_printf_common+0xa8>
 8027e02:	2301      	movs	r3, #1
 8027e04:	4652      	mov	r2, sl
 8027e06:	4649      	mov	r1, r9
 8027e08:	4638      	mov	r0, r7
 8027e0a:	47c0      	blx	r8
 8027e0c:	3001      	adds	r0, #1
 8027e0e:	d103      	bne.n	8027e18 <_printf_common+0xac>
 8027e10:	f04f 30ff 	mov.w	r0, #4294967295
 8027e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e18:	3501      	adds	r5, #1
 8027e1a:	e7c6      	b.n	8027daa <_printf_common+0x3e>
 8027e1c:	18e1      	adds	r1, r4, r3
 8027e1e:	1c5a      	adds	r2, r3, #1
 8027e20:	2030      	movs	r0, #48	; 0x30
 8027e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027e26:	4422      	add	r2, r4
 8027e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027e30:	3302      	adds	r3, #2
 8027e32:	e7c7      	b.n	8027dc4 <_printf_common+0x58>
 8027e34:	2301      	movs	r3, #1
 8027e36:	4622      	mov	r2, r4
 8027e38:	4649      	mov	r1, r9
 8027e3a:	4638      	mov	r0, r7
 8027e3c:	47c0      	blx	r8
 8027e3e:	3001      	adds	r0, #1
 8027e40:	d0e6      	beq.n	8027e10 <_printf_common+0xa4>
 8027e42:	3601      	adds	r6, #1
 8027e44:	e7d9      	b.n	8027dfa <_printf_common+0x8e>
	...

08027e48 <_printf_i>:
 8027e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027e4c:	460c      	mov	r4, r1
 8027e4e:	4691      	mov	r9, r2
 8027e50:	7e27      	ldrb	r7, [r4, #24]
 8027e52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027e54:	2f78      	cmp	r7, #120	; 0x78
 8027e56:	4680      	mov	r8, r0
 8027e58:	469a      	mov	sl, r3
 8027e5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027e5e:	d807      	bhi.n	8027e70 <_printf_i+0x28>
 8027e60:	2f62      	cmp	r7, #98	; 0x62
 8027e62:	d80a      	bhi.n	8027e7a <_printf_i+0x32>
 8027e64:	2f00      	cmp	r7, #0
 8027e66:	f000 80d8 	beq.w	802801a <_printf_i+0x1d2>
 8027e6a:	2f58      	cmp	r7, #88	; 0x58
 8027e6c:	f000 80a3 	beq.w	8027fb6 <_printf_i+0x16e>
 8027e70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027e78:	e03a      	b.n	8027ef0 <_printf_i+0xa8>
 8027e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027e7e:	2b15      	cmp	r3, #21
 8027e80:	d8f6      	bhi.n	8027e70 <_printf_i+0x28>
 8027e82:	a001      	add	r0, pc, #4	; (adr r0, 8027e88 <_printf_i+0x40>)
 8027e84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8027e88:	08027ee1 	.word	0x08027ee1
 8027e8c:	08027ef5 	.word	0x08027ef5
 8027e90:	08027e71 	.word	0x08027e71
 8027e94:	08027e71 	.word	0x08027e71
 8027e98:	08027e71 	.word	0x08027e71
 8027e9c:	08027e71 	.word	0x08027e71
 8027ea0:	08027ef5 	.word	0x08027ef5
 8027ea4:	08027e71 	.word	0x08027e71
 8027ea8:	08027e71 	.word	0x08027e71
 8027eac:	08027e71 	.word	0x08027e71
 8027eb0:	08027e71 	.word	0x08027e71
 8027eb4:	08028001 	.word	0x08028001
 8027eb8:	08027f25 	.word	0x08027f25
 8027ebc:	08027fe3 	.word	0x08027fe3
 8027ec0:	08027e71 	.word	0x08027e71
 8027ec4:	08027e71 	.word	0x08027e71
 8027ec8:	08028023 	.word	0x08028023
 8027ecc:	08027e71 	.word	0x08027e71
 8027ed0:	08027f25 	.word	0x08027f25
 8027ed4:	08027e71 	.word	0x08027e71
 8027ed8:	08027e71 	.word	0x08027e71
 8027edc:	08027feb 	.word	0x08027feb
 8027ee0:	680b      	ldr	r3, [r1, #0]
 8027ee2:	1d1a      	adds	r2, r3, #4
 8027ee4:	681b      	ldr	r3, [r3, #0]
 8027ee6:	600a      	str	r2, [r1, #0]
 8027ee8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027ef0:	2301      	movs	r3, #1
 8027ef2:	e0a3      	b.n	802803c <_printf_i+0x1f4>
 8027ef4:	6825      	ldr	r5, [r4, #0]
 8027ef6:	6808      	ldr	r0, [r1, #0]
 8027ef8:	062e      	lsls	r6, r5, #24
 8027efa:	f100 0304 	add.w	r3, r0, #4
 8027efe:	d50a      	bpl.n	8027f16 <_printf_i+0xce>
 8027f00:	6805      	ldr	r5, [r0, #0]
 8027f02:	600b      	str	r3, [r1, #0]
 8027f04:	2d00      	cmp	r5, #0
 8027f06:	da03      	bge.n	8027f10 <_printf_i+0xc8>
 8027f08:	232d      	movs	r3, #45	; 0x2d
 8027f0a:	426d      	negs	r5, r5
 8027f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027f10:	485e      	ldr	r0, [pc, #376]	; (802808c <_printf_i+0x244>)
 8027f12:	230a      	movs	r3, #10
 8027f14:	e019      	b.n	8027f4a <_printf_i+0x102>
 8027f16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8027f1a:	6805      	ldr	r5, [r0, #0]
 8027f1c:	600b      	str	r3, [r1, #0]
 8027f1e:	bf18      	it	ne
 8027f20:	b22d      	sxthne	r5, r5
 8027f22:	e7ef      	b.n	8027f04 <_printf_i+0xbc>
 8027f24:	680b      	ldr	r3, [r1, #0]
 8027f26:	6825      	ldr	r5, [r4, #0]
 8027f28:	1d18      	adds	r0, r3, #4
 8027f2a:	6008      	str	r0, [r1, #0]
 8027f2c:	0628      	lsls	r0, r5, #24
 8027f2e:	d501      	bpl.n	8027f34 <_printf_i+0xec>
 8027f30:	681d      	ldr	r5, [r3, #0]
 8027f32:	e002      	b.n	8027f3a <_printf_i+0xf2>
 8027f34:	0669      	lsls	r1, r5, #25
 8027f36:	d5fb      	bpl.n	8027f30 <_printf_i+0xe8>
 8027f38:	881d      	ldrh	r5, [r3, #0]
 8027f3a:	4854      	ldr	r0, [pc, #336]	; (802808c <_printf_i+0x244>)
 8027f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8027f3e:	bf0c      	ite	eq
 8027f40:	2308      	moveq	r3, #8
 8027f42:	230a      	movne	r3, #10
 8027f44:	2100      	movs	r1, #0
 8027f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027f4a:	6866      	ldr	r6, [r4, #4]
 8027f4c:	60a6      	str	r6, [r4, #8]
 8027f4e:	2e00      	cmp	r6, #0
 8027f50:	bfa2      	ittt	ge
 8027f52:	6821      	ldrge	r1, [r4, #0]
 8027f54:	f021 0104 	bicge.w	r1, r1, #4
 8027f58:	6021      	strge	r1, [r4, #0]
 8027f5a:	b90d      	cbnz	r5, 8027f60 <_printf_i+0x118>
 8027f5c:	2e00      	cmp	r6, #0
 8027f5e:	d04d      	beq.n	8027ffc <_printf_i+0x1b4>
 8027f60:	4616      	mov	r6, r2
 8027f62:	fbb5 f1f3 	udiv	r1, r5, r3
 8027f66:	fb03 5711 	mls	r7, r3, r1, r5
 8027f6a:	5dc7      	ldrb	r7, [r0, r7]
 8027f6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027f70:	462f      	mov	r7, r5
 8027f72:	42bb      	cmp	r3, r7
 8027f74:	460d      	mov	r5, r1
 8027f76:	d9f4      	bls.n	8027f62 <_printf_i+0x11a>
 8027f78:	2b08      	cmp	r3, #8
 8027f7a:	d10b      	bne.n	8027f94 <_printf_i+0x14c>
 8027f7c:	6823      	ldr	r3, [r4, #0]
 8027f7e:	07df      	lsls	r7, r3, #31
 8027f80:	d508      	bpl.n	8027f94 <_printf_i+0x14c>
 8027f82:	6923      	ldr	r3, [r4, #16]
 8027f84:	6861      	ldr	r1, [r4, #4]
 8027f86:	4299      	cmp	r1, r3
 8027f88:	bfde      	ittt	le
 8027f8a:	2330      	movle	r3, #48	; 0x30
 8027f8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027f90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8027f94:	1b92      	subs	r2, r2, r6
 8027f96:	6122      	str	r2, [r4, #16]
 8027f98:	f8cd a000 	str.w	sl, [sp]
 8027f9c:	464b      	mov	r3, r9
 8027f9e:	aa03      	add	r2, sp, #12
 8027fa0:	4621      	mov	r1, r4
 8027fa2:	4640      	mov	r0, r8
 8027fa4:	f7ff fee2 	bl	8027d6c <_printf_common>
 8027fa8:	3001      	adds	r0, #1
 8027faa:	d14c      	bne.n	8028046 <_printf_i+0x1fe>
 8027fac:	f04f 30ff 	mov.w	r0, #4294967295
 8027fb0:	b004      	add	sp, #16
 8027fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027fb6:	4835      	ldr	r0, [pc, #212]	; (802808c <_printf_i+0x244>)
 8027fb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8027fbc:	6823      	ldr	r3, [r4, #0]
 8027fbe:	680e      	ldr	r6, [r1, #0]
 8027fc0:	061f      	lsls	r7, r3, #24
 8027fc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8027fc6:	600e      	str	r6, [r1, #0]
 8027fc8:	d514      	bpl.n	8027ff4 <_printf_i+0x1ac>
 8027fca:	07d9      	lsls	r1, r3, #31
 8027fcc:	bf44      	itt	mi
 8027fce:	f043 0320 	orrmi.w	r3, r3, #32
 8027fd2:	6023      	strmi	r3, [r4, #0]
 8027fd4:	b91d      	cbnz	r5, 8027fde <_printf_i+0x196>
 8027fd6:	6823      	ldr	r3, [r4, #0]
 8027fd8:	f023 0320 	bic.w	r3, r3, #32
 8027fdc:	6023      	str	r3, [r4, #0]
 8027fde:	2310      	movs	r3, #16
 8027fe0:	e7b0      	b.n	8027f44 <_printf_i+0xfc>
 8027fe2:	6823      	ldr	r3, [r4, #0]
 8027fe4:	f043 0320 	orr.w	r3, r3, #32
 8027fe8:	6023      	str	r3, [r4, #0]
 8027fea:	2378      	movs	r3, #120	; 0x78
 8027fec:	4828      	ldr	r0, [pc, #160]	; (8028090 <_printf_i+0x248>)
 8027fee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027ff2:	e7e3      	b.n	8027fbc <_printf_i+0x174>
 8027ff4:	065e      	lsls	r6, r3, #25
 8027ff6:	bf48      	it	mi
 8027ff8:	b2ad      	uxthmi	r5, r5
 8027ffa:	e7e6      	b.n	8027fca <_printf_i+0x182>
 8027ffc:	4616      	mov	r6, r2
 8027ffe:	e7bb      	b.n	8027f78 <_printf_i+0x130>
 8028000:	680b      	ldr	r3, [r1, #0]
 8028002:	6826      	ldr	r6, [r4, #0]
 8028004:	6960      	ldr	r0, [r4, #20]
 8028006:	1d1d      	adds	r5, r3, #4
 8028008:	600d      	str	r5, [r1, #0]
 802800a:	0635      	lsls	r5, r6, #24
 802800c:	681b      	ldr	r3, [r3, #0]
 802800e:	d501      	bpl.n	8028014 <_printf_i+0x1cc>
 8028010:	6018      	str	r0, [r3, #0]
 8028012:	e002      	b.n	802801a <_printf_i+0x1d2>
 8028014:	0671      	lsls	r1, r6, #25
 8028016:	d5fb      	bpl.n	8028010 <_printf_i+0x1c8>
 8028018:	8018      	strh	r0, [r3, #0]
 802801a:	2300      	movs	r3, #0
 802801c:	6123      	str	r3, [r4, #16]
 802801e:	4616      	mov	r6, r2
 8028020:	e7ba      	b.n	8027f98 <_printf_i+0x150>
 8028022:	680b      	ldr	r3, [r1, #0]
 8028024:	1d1a      	adds	r2, r3, #4
 8028026:	600a      	str	r2, [r1, #0]
 8028028:	681e      	ldr	r6, [r3, #0]
 802802a:	6862      	ldr	r2, [r4, #4]
 802802c:	2100      	movs	r1, #0
 802802e:	4630      	mov	r0, r6
 8028030:	f7d8 f95e 	bl	80002f0 <memchr>
 8028034:	b108      	cbz	r0, 802803a <_printf_i+0x1f2>
 8028036:	1b80      	subs	r0, r0, r6
 8028038:	6060      	str	r0, [r4, #4]
 802803a:	6863      	ldr	r3, [r4, #4]
 802803c:	6123      	str	r3, [r4, #16]
 802803e:	2300      	movs	r3, #0
 8028040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028044:	e7a8      	b.n	8027f98 <_printf_i+0x150>
 8028046:	6923      	ldr	r3, [r4, #16]
 8028048:	4632      	mov	r2, r6
 802804a:	4649      	mov	r1, r9
 802804c:	4640      	mov	r0, r8
 802804e:	47d0      	blx	sl
 8028050:	3001      	adds	r0, #1
 8028052:	d0ab      	beq.n	8027fac <_printf_i+0x164>
 8028054:	6823      	ldr	r3, [r4, #0]
 8028056:	079b      	lsls	r3, r3, #30
 8028058:	d413      	bmi.n	8028082 <_printf_i+0x23a>
 802805a:	68e0      	ldr	r0, [r4, #12]
 802805c:	9b03      	ldr	r3, [sp, #12]
 802805e:	4298      	cmp	r0, r3
 8028060:	bfb8      	it	lt
 8028062:	4618      	movlt	r0, r3
 8028064:	e7a4      	b.n	8027fb0 <_printf_i+0x168>
 8028066:	2301      	movs	r3, #1
 8028068:	4632      	mov	r2, r6
 802806a:	4649      	mov	r1, r9
 802806c:	4640      	mov	r0, r8
 802806e:	47d0      	blx	sl
 8028070:	3001      	adds	r0, #1
 8028072:	d09b      	beq.n	8027fac <_printf_i+0x164>
 8028074:	3501      	adds	r5, #1
 8028076:	68e3      	ldr	r3, [r4, #12]
 8028078:	9903      	ldr	r1, [sp, #12]
 802807a:	1a5b      	subs	r3, r3, r1
 802807c:	42ab      	cmp	r3, r5
 802807e:	dcf2      	bgt.n	8028066 <_printf_i+0x21e>
 8028080:	e7eb      	b.n	802805a <_printf_i+0x212>
 8028082:	2500      	movs	r5, #0
 8028084:	f104 0619 	add.w	r6, r4, #25
 8028088:	e7f5      	b.n	8028076 <_printf_i+0x22e>
 802808a:	bf00      	nop
 802808c:	0802c9f9 	.word	0x0802c9f9
 8028090:	0802ca0a 	.word	0x0802ca0a

08028094 <_sbrk_r>:
 8028094:	b538      	push	{r3, r4, r5, lr}
 8028096:	4d06      	ldr	r5, [pc, #24]	; (80280b0 <_sbrk_r+0x1c>)
 8028098:	2300      	movs	r3, #0
 802809a:	4604      	mov	r4, r0
 802809c:	4608      	mov	r0, r1
 802809e:	602b      	str	r3, [r5, #0]
 80280a0:	f7df f936 	bl	8007310 <_sbrk>
 80280a4:	1c43      	adds	r3, r0, #1
 80280a6:	d102      	bne.n	80280ae <_sbrk_r+0x1a>
 80280a8:	682b      	ldr	r3, [r5, #0]
 80280aa:	b103      	cbz	r3, 80280ae <_sbrk_r+0x1a>
 80280ac:	6023      	str	r3, [r4, #0]
 80280ae:	bd38      	pop	{r3, r4, r5, pc}
 80280b0:	2402643c 	.word	0x2402643c

080280b4 <_raise_r>:
 80280b4:	291f      	cmp	r1, #31
 80280b6:	b538      	push	{r3, r4, r5, lr}
 80280b8:	4604      	mov	r4, r0
 80280ba:	460d      	mov	r5, r1
 80280bc:	d904      	bls.n	80280c8 <_raise_r+0x14>
 80280be:	2316      	movs	r3, #22
 80280c0:	6003      	str	r3, [r0, #0]
 80280c2:	f04f 30ff 	mov.w	r0, #4294967295
 80280c6:	bd38      	pop	{r3, r4, r5, pc}
 80280c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80280ca:	b112      	cbz	r2, 80280d2 <_raise_r+0x1e>
 80280cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80280d0:	b94b      	cbnz	r3, 80280e6 <_raise_r+0x32>
 80280d2:	4620      	mov	r0, r4
 80280d4:	f000 f830 	bl	8028138 <_getpid_r>
 80280d8:	462a      	mov	r2, r5
 80280da:	4601      	mov	r1, r0
 80280dc:	4620      	mov	r0, r4
 80280de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80280e2:	f000 b817 	b.w	8028114 <_kill_r>
 80280e6:	2b01      	cmp	r3, #1
 80280e8:	d00a      	beq.n	8028100 <_raise_r+0x4c>
 80280ea:	1c59      	adds	r1, r3, #1
 80280ec:	d103      	bne.n	80280f6 <_raise_r+0x42>
 80280ee:	2316      	movs	r3, #22
 80280f0:	6003      	str	r3, [r0, #0]
 80280f2:	2001      	movs	r0, #1
 80280f4:	e7e7      	b.n	80280c6 <_raise_r+0x12>
 80280f6:	2400      	movs	r4, #0
 80280f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80280fc:	4628      	mov	r0, r5
 80280fe:	4798      	blx	r3
 8028100:	2000      	movs	r0, #0
 8028102:	e7e0      	b.n	80280c6 <_raise_r+0x12>

08028104 <raise>:
 8028104:	4b02      	ldr	r3, [pc, #8]	; (8028110 <raise+0xc>)
 8028106:	4601      	mov	r1, r0
 8028108:	6818      	ldr	r0, [r3, #0]
 802810a:	f7ff bfd3 	b.w	80280b4 <_raise_r>
 802810e:	bf00      	nop
 8028110:	240000c0 	.word	0x240000c0

08028114 <_kill_r>:
 8028114:	b538      	push	{r3, r4, r5, lr}
 8028116:	4d07      	ldr	r5, [pc, #28]	; (8028134 <_kill_r+0x20>)
 8028118:	2300      	movs	r3, #0
 802811a:	4604      	mov	r4, r0
 802811c:	4608      	mov	r0, r1
 802811e:	4611      	mov	r1, r2
 8028120:	602b      	str	r3, [r5, #0]
 8028122:	f7df f86d 	bl	8007200 <_kill>
 8028126:	1c43      	adds	r3, r0, #1
 8028128:	d102      	bne.n	8028130 <_kill_r+0x1c>
 802812a:	682b      	ldr	r3, [r5, #0]
 802812c:	b103      	cbz	r3, 8028130 <_kill_r+0x1c>
 802812e:	6023      	str	r3, [r4, #0]
 8028130:	bd38      	pop	{r3, r4, r5, pc}
 8028132:	bf00      	nop
 8028134:	2402643c 	.word	0x2402643c

08028138 <_getpid_r>:
 8028138:	f7df b85a 	b.w	80071f0 <_getpid>

0802813c <strncmp>:
 802813c:	b510      	push	{r4, lr}
 802813e:	b16a      	cbz	r2, 802815c <strncmp+0x20>
 8028140:	3901      	subs	r1, #1
 8028142:	1884      	adds	r4, r0, r2
 8028144:	f810 3b01 	ldrb.w	r3, [r0], #1
 8028148:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802814c:	4293      	cmp	r3, r2
 802814e:	d103      	bne.n	8028158 <strncmp+0x1c>
 8028150:	42a0      	cmp	r0, r4
 8028152:	d001      	beq.n	8028158 <strncmp+0x1c>
 8028154:	2b00      	cmp	r3, #0
 8028156:	d1f5      	bne.n	8028144 <strncmp+0x8>
 8028158:	1a98      	subs	r0, r3, r2
 802815a:	bd10      	pop	{r4, pc}
 802815c:	4610      	mov	r0, r2
 802815e:	e7fc      	b.n	802815a <strncmp+0x1e>

08028160 <__swbuf_r>:
 8028160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028162:	460e      	mov	r6, r1
 8028164:	4614      	mov	r4, r2
 8028166:	4605      	mov	r5, r0
 8028168:	b118      	cbz	r0, 8028172 <__swbuf_r+0x12>
 802816a:	6983      	ldr	r3, [r0, #24]
 802816c:	b90b      	cbnz	r3, 8028172 <__swbuf_r+0x12>
 802816e:	f000 fa33 	bl	80285d8 <__sinit>
 8028172:	4b21      	ldr	r3, [pc, #132]	; (80281f8 <__swbuf_r+0x98>)
 8028174:	429c      	cmp	r4, r3
 8028176:	d12b      	bne.n	80281d0 <__swbuf_r+0x70>
 8028178:	686c      	ldr	r4, [r5, #4]
 802817a:	69a3      	ldr	r3, [r4, #24]
 802817c:	60a3      	str	r3, [r4, #8]
 802817e:	89a3      	ldrh	r3, [r4, #12]
 8028180:	071a      	lsls	r2, r3, #28
 8028182:	d52f      	bpl.n	80281e4 <__swbuf_r+0x84>
 8028184:	6923      	ldr	r3, [r4, #16]
 8028186:	b36b      	cbz	r3, 80281e4 <__swbuf_r+0x84>
 8028188:	6923      	ldr	r3, [r4, #16]
 802818a:	6820      	ldr	r0, [r4, #0]
 802818c:	1ac0      	subs	r0, r0, r3
 802818e:	6963      	ldr	r3, [r4, #20]
 8028190:	b2f6      	uxtb	r6, r6
 8028192:	4283      	cmp	r3, r0
 8028194:	4637      	mov	r7, r6
 8028196:	dc04      	bgt.n	80281a2 <__swbuf_r+0x42>
 8028198:	4621      	mov	r1, r4
 802819a:	4628      	mov	r0, r5
 802819c:	f000 f988 	bl	80284b0 <_fflush_r>
 80281a0:	bb30      	cbnz	r0, 80281f0 <__swbuf_r+0x90>
 80281a2:	68a3      	ldr	r3, [r4, #8]
 80281a4:	3b01      	subs	r3, #1
 80281a6:	60a3      	str	r3, [r4, #8]
 80281a8:	6823      	ldr	r3, [r4, #0]
 80281aa:	1c5a      	adds	r2, r3, #1
 80281ac:	6022      	str	r2, [r4, #0]
 80281ae:	701e      	strb	r6, [r3, #0]
 80281b0:	6963      	ldr	r3, [r4, #20]
 80281b2:	3001      	adds	r0, #1
 80281b4:	4283      	cmp	r3, r0
 80281b6:	d004      	beq.n	80281c2 <__swbuf_r+0x62>
 80281b8:	89a3      	ldrh	r3, [r4, #12]
 80281ba:	07db      	lsls	r3, r3, #31
 80281bc:	d506      	bpl.n	80281cc <__swbuf_r+0x6c>
 80281be:	2e0a      	cmp	r6, #10
 80281c0:	d104      	bne.n	80281cc <__swbuf_r+0x6c>
 80281c2:	4621      	mov	r1, r4
 80281c4:	4628      	mov	r0, r5
 80281c6:	f000 f973 	bl	80284b0 <_fflush_r>
 80281ca:	b988      	cbnz	r0, 80281f0 <__swbuf_r+0x90>
 80281cc:	4638      	mov	r0, r7
 80281ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80281d0:	4b0a      	ldr	r3, [pc, #40]	; (80281fc <__swbuf_r+0x9c>)
 80281d2:	429c      	cmp	r4, r3
 80281d4:	d101      	bne.n	80281da <__swbuf_r+0x7a>
 80281d6:	68ac      	ldr	r4, [r5, #8]
 80281d8:	e7cf      	b.n	802817a <__swbuf_r+0x1a>
 80281da:	4b09      	ldr	r3, [pc, #36]	; (8028200 <__swbuf_r+0xa0>)
 80281dc:	429c      	cmp	r4, r3
 80281de:	bf08      	it	eq
 80281e0:	68ec      	ldreq	r4, [r5, #12]
 80281e2:	e7ca      	b.n	802817a <__swbuf_r+0x1a>
 80281e4:	4621      	mov	r1, r4
 80281e6:	4628      	mov	r0, r5
 80281e8:	f000 f80c 	bl	8028204 <__swsetup_r>
 80281ec:	2800      	cmp	r0, #0
 80281ee:	d0cb      	beq.n	8028188 <__swbuf_r+0x28>
 80281f0:	f04f 37ff 	mov.w	r7, #4294967295
 80281f4:	e7ea      	b.n	80281cc <__swbuf_r+0x6c>
 80281f6:	bf00      	nop
 80281f8:	0802ca40 	.word	0x0802ca40
 80281fc:	0802ca60 	.word	0x0802ca60
 8028200:	0802ca20 	.word	0x0802ca20

08028204 <__swsetup_r>:
 8028204:	4b32      	ldr	r3, [pc, #200]	; (80282d0 <__swsetup_r+0xcc>)
 8028206:	b570      	push	{r4, r5, r6, lr}
 8028208:	681d      	ldr	r5, [r3, #0]
 802820a:	4606      	mov	r6, r0
 802820c:	460c      	mov	r4, r1
 802820e:	b125      	cbz	r5, 802821a <__swsetup_r+0x16>
 8028210:	69ab      	ldr	r3, [r5, #24]
 8028212:	b913      	cbnz	r3, 802821a <__swsetup_r+0x16>
 8028214:	4628      	mov	r0, r5
 8028216:	f000 f9df 	bl	80285d8 <__sinit>
 802821a:	4b2e      	ldr	r3, [pc, #184]	; (80282d4 <__swsetup_r+0xd0>)
 802821c:	429c      	cmp	r4, r3
 802821e:	d10f      	bne.n	8028240 <__swsetup_r+0x3c>
 8028220:	686c      	ldr	r4, [r5, #4]
 8028222:	89a3      	ldrh	r3, [r4, #12]
 8028224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028228:	0719      	lsls	r1, r3, #28
 802822a:	d42c      	bmi.n	8028286 <__swsetup_r+0x82>
 802822c:	06dd      	lsls	r5, r3, #27
 802822e:	d411      	bmi.n	8028254 <__swsetup_r+0x50>
 8028230:	2309      	movs	r3, #9
 8028232:	6033      	str	r3, [r6, #0]
 8028234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028238:	81a3      	strh	r3, [r4, #12]
 802823a:	f04f 30ff 	mov.w	r0, #4294967295
 802823e:	e03e      	b.n	80282be <__swsetup_r+0xba>
 8028240:	4b25      	ldr	r3, [pc, #148]	; (80282d8 <__swsetup_r+0xd4>)
 8028242:	429c      	cmp	r4, r3
 8028244:	d101      	bne.n	802824a <__swsetup_r+0x46>
 8028246:	68ac      	ldr	r4, [r5, #8]
 8028248:	e7eb      	b.n	8028222 <__swsetup_r+0x1e>
 802824a:	4b24      	ldr	r3, [pc, #144]	; (80282dc <__swsetup_r+0xd8>)
 802824c:	429c      	cmp	r4, r3
 802824e:	bf08      	it	eq
 8028250:	68ec      	ldreq	r4, [r5, #12]
 8028252:	e7e6      	b.n	8028222 <__swsetup_r+0x1e>
 8028254:	0758      	lsls	r0, r3, #29
 8028256:	d512      	bpl.n	802827e <__swsetup_r+0x7a>
 8028258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802825a:	b141      	cbz	r1, 802826e <__swsetup_r+0x6a>
 802825c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028260:	4299      	cmp	r1, r3
 8028262:	d002      	beq.n	802826a <__swsetup_r+0x66>
 8028264:	4630      	mov	r0, r6
 8028266:	f7ff fb7d 	bl	8027964 <_free_r>
 802826a:	2300      	movs	r3, #0
 802826c:	6363      	str	r3, [r4, #52]	; 0x34
 802826e:	89a3      	ldrh	r3, [r4, #12]
 8028270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028274:	81a3      	strh	r3, [r4, #12]
 8028276:	2300      	movs	r3, #0
 8028278:	6063      	str	r3, [r4, #4]
 802827a:	6923      	ldr	r3, [r4, #16]
 802827c:	6023      	str	r3, [r4, #0]
 802827e:	89a3      	ldrh	r3, [r4, #12]
 8028280:	f043 0308 	orr.w	r3, r3, #8
 8028284:	81a3      	strh	r3, [r4, #12]
 8028286:	6923      	ldr	r3, [r4, #16]
 8028288:	b94b      	cbnz	r3, 802829e <__swsetup_r+0x9a>
 802828a:	89a3      	ldrh	r3, [r4, #12]
 802828c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028294:	d003      	beq.n	802829e <__swsetup_r+0x9a>
 8028296:	4621      	mov	r1, r4
 8028298:	4630      	mov	r0, r6
 802829a:	f000 fa5f 	bl	802875c <__smakebuf_r>
 802829e:	89a0      	ldrh	r0, [r4, #12]
 80282a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80282a4:	f010 0301 	ands.w	r3, r0, #1
 80282a8:	d00a      	beq.n	80282c0 <__swsetup_r+0xbc>
 80282aa:	2300      	movs	r3, #0
 80282ac:	60a3      	str	r3, [r4, #8]
 80282ae:	6963      	ldr	r3, [r4, #20]
 80282b0:	425b      	negs	r3, r3
 80282b2:	61a3      	str	r3, [r4, #24]
 80282b4:	6923      	ldr	r3, [r4, #16]
 80282b6:	b943      	cbnz	r3, 80282ca <__swsetup_r+0xc6>
 80282b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80282bc:	d1ba      	bne.n	8028234 <__swsetup_r+0x30>
 80282be:	bd70      	pop	{r4, r5, r6, pc}
 80282c0:	0781      	lsls	r1, r0, #30
 80282c2:	bf58      	it	pl
 80282c4:	6963      	ldrpl	r3, [r4, #20]
 80282c6:	60a3      	str	r3, [r4, #8]
 80282c8:	e7f4      	b.n	80282b4 <__swsetup_r+0xb0>
 80282ca:	2000      	movs	r0, #0
 80282cc:	e7f7      	b.n	80282be <__swsetup_r+0xba>
 80282ce:	bf00      	nop
 80282d0:	240000c0 	.word	0x240000c0
 80282d4:	0802ca40 	.word	0x0802ca40
 80282d8:	0802ca60 	.word	0x0802ca60
 80282dc:	0802ca20 	.word	0x0802ca20

080282e0 <__register_exitproc>:
 80282e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80282e4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80283a0 <__register_exitproc+0xc0>
 80282e8:	4606      	mov	r6, r0
 80282ea:	f8d8 0000 	ldr.w	r0, [r8]
 80282ee:	461f      	mov	r7, r3
 80282f0:	460d      	mov	r5, r1
 80282f2:	4691      	mov	r9, r2
 80282f4:	f7ff fb0d 	bl	8027912 <__retarget_lock_acquire_recursive>
 80282f8:	4b25      	ldr	r3, [pc, #148]	; (8028390 <__register_exitproc+0xb0>)
 80282fa:	681c      	ldr	r4, [r3, #0]
 80282fc:	b934      	cbnz	r4, 802830c <__register_exitproc+0x2c>
 80282fe:	4c25      	ldr	r4, [pc, #148]	; (8028394 <__register_exitproc+0xb4>)
 8028300:	601c      	str	r4, [r3, #0]
 8028302:	4b25      	ldr	r3, [pc, #148]	; (8028398 <__register_exitproc+0xb8>)
 8028304:	b113      	cbz	r3, 802830c <__register_exitproc+0x2c>
 8028306:	681b      	ldr	r3, [r3, #0]
 8028308:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802830c:	6863      	ldr	r3, [r4, #4]
 802830e:	2b1f      	cmp	r3, #31
 8028310:	dd07      	ble.n	8028322 <__register_exitproc+0x42>
 8028312:	f8d8 0000 	ldr.w	r0, [r8]
 8028316:	f7ff fafe 	bl	8027916 <__retarget_lock_release_recursive>
 802831a:	f04f 30ff 	mov.w	r0, #4294967295
 802831e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028322:	b34e      	cbz	r6, 8028378 <__register_exitproc+0x98>
 8028324:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028328:	b988      	cbnz	r0, 802834e <__register_exitproc+0x6e>
 802832a:	4b1c      	ldr	r3, [pc, #112]	; (802839c <__register_exitproc+0xbc>)
 802832c:	b923      	cbnz	r3, 8028338 <__register_exitproc+0x58>
 802832e:	f8d8 0000 	ldr.w	r0, [r8]
 8028332:	f7ff faef 	bl	8027914 <__retarget_lock_release>
 8028336:	e7f0      	b.n	802831a <__register_exitproc+0x3a>
 8028338:	f44f 7084 	mov.w	r0, #264	; 0x108
 802833c:	f7ff faec 	bl	8027918 <malloc>
 8028340:	2800      	cmp	r0, #0
 8028342:	d0f4      	beq.n	802832e <__register_exitproc+0x4e>
 8028344:	2300      	movs	r3, #0
 8028346:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802834a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802834e:	6863      	ldr	r3, [r4, #4]
 8028350:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028354:	2201      	movs	r2, #1
 8028356:	409a      	lsls	r2, r3
 8028358:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802835c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8028360:	4313      	orrs	r3, r2
 8028362:	2e02      	cmp	r6, #2
 8028364:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028368:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802836c:	bf02      	ittt	eq
 802836e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8028372:	431a      	orreq	r2, r3
 8028374:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8028378:	6863      	ldr	r3, [r4, #4]
 802837a:	f8d8 0000 	ldr.w	r0, [r8]
 802837e:	1c5a      	adds	r2, r3, #1
 8028380:	3302      	adds	r3, #2
 8028382:	6062      	str	r2, [r4, #4]
 8028384:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028388:	f7ff fac5 	bl	8027916 <__retarget_lock_release_recursive>
 802838c:	2000      	movs	r0, #0
 802838e:	e7c6      	b.n	802831e <__register_exitproc+0x3e>
 8028390:	24025f80 	.word	0x24025f80
 8028394:	24025ef4 	.word	0x24025ef4
 8028398:	0802ca1c 	.word	0x0802ca1c
 802839c:	08027919 	.word	0x08027919
 80283a0:	24000124 	.word	0x24000124

080283a4 <__sflush_r>:
 80283a4:	898a      	ldrh	r2, [r1, #12]
 80283a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80283aa:	4605      	mov	r5, r0
 80283ac:	0710      	lsls	r0, r2, #28
 80283ae:	460c      	mov	r4, r1
 80283b0:	d458      	bmi.n	8028464 <__sflush_r+0xc0>
 80283b2:	684b      	ldr	r3, [r1, #4]
 80283b4:	2b00      	cmp	r3, #0
 80283b6:	dc05      	bgt.n	80283c4 <__sflush_r+0x20>
 80283b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80283ba:	2b00      	cmp	r3, #0
 80283bc:	dc02      	bgt.n	80283c4 <__sflush_r+0x20>
 80283be:	2000      	movs	r0, #0
 80283c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80283c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80283c6:	2e00      	cmp	r6, #0
 80283c8:	d0f9      	beq.n	80283be <__sflush_r+0x1a>
 80283ca:	2300      	movs	r3, #0
 80283cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80283d0:	682f      	ldr	r7, [r5, #0]
 80283d2:	602b      	str	r3, [r5, #0]
 80283d4:	d032      	beq.n	802843c <__sflush_r+0x98>
 80283d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80283d8:	89a3      	ldrh	r3, [r4, #12]
 80283da:	075a      	lsls	r2, r3, #29
 80283dc:	d505      	bpl.n	80283ea <__sflush_r+0x46>
 80283de:	6863      	ldr	r3, [r4, #4]
 80283e0:	1ac0      	subs	r0, r0, r3
 80283e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80283e4:	b10b      	cbz	r3, 80283ea <__sflush_r+0x46>
 80283e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80283e8:	1ac0      	subs	r0, r0, r3
 80283ea:	2300      	movs	r3, #0
 80283ec:	4602      	mov	r2, r0
 80283ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80283f0:	6a21      	ldr	r1, [r4, #32]
 80283f2:	4628      	mov	r0, r5
 80283f4:	47b0      	blx	r6
 80283f6:	1c43      	adds	r3, r0, #1
 80283f8:	89a3      	ldrh	r3, [r4, #12]
 80283fa:	d106      	bne.n	802840a <__sflush_r+0x66>
 80283fc:	6829      	ldr	r1, [r5, #0]
 80283fe:	291d      	cmp	r1, #29
 8028400:	d82c      	bhi.n	802845c <__sflush_r+0xb8>
 8028402:	4a2a      	ldr	r2, [pc, #168]	; (80284ac <__sflush_r+0x108>)
 8028404:	40ca      	lsrs	r2, r1
 8028406:	07d6      	lsls	r6, r2, #31
 8028408:	d528      	bpl.n	802845c <__sflush_r+0xb8>
 802840a:	2200      	movs	r2, #0
 802840c:	6062      	str	r2, [r4, #4]
 802840e:	04d9      	lsls	r1, r3, #19
 8028410:	6922      	ldr	r2, [r4, #16]
 8028412:	6022      	str	r2, [r4, #0]
 8028414:	d504      	bpl.n	8028420 <__sflush_r+0x7c>
 8028416:	1c42      	adds	r2, r0, #1
 8028418:	d101      	bne.n	802841e <__sflush_r+0x7a>
 802841a:	682b      	ldr	r3, [r5, #0]
 802841c:	b903      	cbnz	r3, 8028420 <__sflush_r+0x7c>
 802841e:	6560      	str	r0, [r4, #84]	; 0x54
 8028420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028422:	602f      	str	r7, [r5, #0]
 8028424:	2900      	cmp	r1, #0
 8028426:	d0ca      	beq.n	80283be <__sflush_r+0x1a>
 8028428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802842c:	4299      	cmp	r1, r3
 802842e:	d002      	beq.n	8028436 <__sflush_r+0x92>
 8028430:	4628      	mov	r0, r5
 8028432:	f7ff fa97 	bl	8027964 <_free_r>
 8028436:	2000      	movs	r0, #0
 8028438:	6360      	str	r0, [r4, #52]	; 0x34
 802843a:	e7c1      	b.n	80283c0 <__sflush_r+0x1c>
 802843c:	6a21      	ldr	r1, [r4, #32]
 802843e:	2301      	movs	r3, #1
 8028440:	4628      	mov	r0, r5
 8028442:	47b0      	blx	r6
 8028444:	1c41      	adds	r1, r0, #1
 8028446:	d1c7      	bne.n	80283d8 <__sflush_r+0x34>
 8028448:	682b      	ldr	r3, [r5, #0]
 802844a:	2b00      	cmp	r3, #0
 802844c:	d0c4      	beq.n	80283d8 <__sflush_r+0x34>
 802844e:	2b1d      	cmp	r3, #29
 8028450:	d001      	beq.n	8028456 <__sflush_r+0xb2>
 8028452:	2b16      	cmp	r3, #22
 8028454:	d101      	bne.n	802845a <__sflush_r+0xb6>
 8028456:	602f      	str	r7, [r5, #0]
 8028458:	e7b1      	b.n	80283be <__sflush_r+0x1a>
 802845a:	89a3      	ldrh	r3, [r4, #12]
 802845c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028460:	81a3      	strh	r3, [r4, #12]
 8028462:	e7ad      	b.n	80283c0 <__sflush_r+0x1c>
 8028464:	690f      	ldr	r7, [r1, #16]
 8028466:	2f00      	cmp	r7, #0
 8028468:	d0a9      	beq.n	80283be <__sflush_r+0x1a>
 802846a:	0793      	lsls	r3, r2, #30
 802846c:	680e      	ldr	r6, [r1, #0]
 802846e:	bf08      	it	eq
 8028470:	694b      	ldreq	r3, [r1, #20]
 8028472:	600f      	str	r7, [r1, #0]
 8028474:	bf18      	it	ne
 8028476:	2300      	movne	r3, #0
 8028478:	eba6 0807 	sub.w	r8, r6, r7
 802847c:	608b      	str	r3, [r1, #8]
 802847e:	f1b8 0f00 	cmp.w	r8, #0
 8028482:	dd9c      	ble.n	80283be <__sflush_r+0x1a>
 8028484:	6a21      	ldr	r1, [r4, #32]
 8028486:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028488:	4643      	mov	r3, r8
 802848a:	463a      	mov	r2, r7
 802848c:	4628      	mov	r0, r5
 802848e:	47b0      	blx	r6
 8028490:	2800      	cmp	r0, #0
 8028492:	dc06      	bgt.n	80284a2 <__sflush_r+0xfe>
 8028494:	89a3      	ldrh	r3, [r4, #12]
 8028496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802849a:	81a3      	strh	r3, [r4, #12]
 802849c:	f04f 30ff 	mov.w	r0, #4294967295
 80284a0:	e78e      	b.n	80283c0 <__sflush_r+0x1c>
 80284a2:	4407      	add	r7, r0
 80284a4:	eba8 0800 	sub.w	r8, r8, r0
 80284a8:	e7e9      	b.n	802847e <__sflush_r+0xda>
 80284aa:	bf00      	nop
 80284ac:	20400001 	.word	0x20400001

080284b0 <_fflush_r>:
 80284b0:	b538      	push	{r3, r4, r5, lr}
 80284b2:	690b      	ldr	r3, [r1, #16]
 80284b4:	4605      	mov	r5, r0
 80284b6:	460c      	mov	r4, r1
 80284b8:	b913      	cbnz	r3, 80284c0 <_fflush_r+0x10>
 80284ba:	2500      	movs	r5, #0
 80284bc:	4628      	mov	r0, r5
 80284be:	bd38      	pop	{r3, r4, r5, pc}
 80284c0:	b118      	cbz	r0, 80284ca <_fflush_r+0x1a>
 80284c2:	6983      	ldr	r3, [r0, #24]
 80284c4:	b90b      	cbnz	r3, 80284ca <_fflush_r+0x1a>
 80284c6:	f000 f887 	bl	80285d8 <__sinit>
 80284ca:	4b14      	ldr	r3, [pc, #80]	; (802851c <_fflush_r+0x6c>)
 80284cc:	429c      	cmp	r4, r3
 80284ce:	d11b      	bne.n	8028508 <_fflush_r+0x58>
 80284d0:	686c      	ldr	r4, [r5, #4]
 80284d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80284d6:	2b00      	cmp	r3, #0
 80284d8:	d0ef      	beq.n	80284ba <_fflush_r+0xa>
 80284da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80284dc:	07d0      	lsls	r0, r2, #31
 80284de:	d404      	bmi.n	80284ea <_fflush_r+0x3a>
 80284e0:	0599      	lsls	r1, r3, #22
 80284e2:	d402      	bmi.n	80284ea <_fflush_r+0x3a>
 80284e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80284e6:	f7ff fa14 	bl	8027912 <__retarget_lock_acquire_recursive>
 80284ea:	4628      	mov	r0, r5
 80284ec:	4621      	mov	r1, r4
 80284ee:	f7ff ff59 	bl	80283a4 <__sflush_r>
 80284f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80284f4:	07da      	lsls	r2, r3, #31
 80284f6:	4605      	mov	r5, r0
 80284f8:	d4e0      	bmi.n	80284bc <_fflush_r+0xc>
 80284fa:	89a3      	ldrh	r3, [r4, #12]
 80284fc:	059b      	lsls	r3, r3, #22
 80284fe:	d4dd      	bmi.n	80284bc <_fflush_r+0xc>
 8028500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028502:	f7ff fa08 	bl	8027916 <__retarget_lock_release_recursive>
 8028506:	e7d9      	b.n	80284bc <_fflush_r+0xc>
 8028508:	4b05      	ldr	r3, [pc, #20]	; (8028520 <_fflush_r+0x70>)
 802850a:	429c      	cmp	r4, r3
 802850c:	d101      	bne.n	8028512 <_fflush_r+0x62>
 802850e:	68ac      	ldr	r4, [r5, #8]
 8028510:	e7df      	b.n	80284d2 <_fflush_r+0x22>
 8028512:	4b04      	ldr	r3, [pc, #16]	; (8028524 <_fflush_r+0x74>)
 8028514:	429c      	cmp	r4, r3
 8028516:	bf08      	it	eq
 8028518:	68ec      	ldreq	r4, [r5, #12]
 802851a:	e7da      	b.n	80284d2 <_fflush_r+0x22>
 802851c:	0802ca40 	.word	0x0802ca40
 8028520:	0802ca60 	.word	0x0802ca60
 8028524:	0802ca20 	.word	0x0802ca20

08028528 <std>:
 8028528:	2300      	movs	r3, #0
 802852a:	b510      	push	{r4, lr}
 802852c:	4604      	mov	r4, r0
 802852e:	e9c0 3300 	strd	r3, r3, [r0]
 8028532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028536:	6083      	str	r3, [r0, #8]
 8028538:	8181      	strh	r1, [r0, #12]
 802853a:	6643      	str	r3, [r0, #100]	; 0x64
 802853c:	81c2      	strh	r2, [r0, #14]
 802853e:	6183      	str	r3, [r0, #24]
 8028540:	4619      	mov	r1, r3
 8028542:	2208      	movs	r2, #8
 8028544:	305c      	adds	r0, #92	; 0x5c
 8028546:	f7ff fa05 	bl	8027954 <memset>
 802854a:	4b05      	ldr	r3, [pc, #20]	; (8028560 <std+0x38>)
 802854c:	6263      	str	r3, [r4, #36]	; 0x24
 802854e:	4b05      	ldr	r3, [pc, #20]	; (8028564 <std+0x3c>)
 8028550:	62a3      	str	r3, [r4, #40]	; 0x28
 8028552:	4b05      	ldr	r3, [pc, #20]	; (8028568 <std+0x40>)
 8028554:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028556:	4b05      	ldr	r3, [pc, #20]	; (802856c <std+0x44>)
 8028558:	6224      	str	r4, [r4, #32]
 802855a:	6323      	str	r3, [r4, #48]	; 0x30
 802855c:	bd10      	pop	{r4, pc}
 802855e:	bf00      	nop
 8028560:	080287f5 	.word	0x080287f5
 8028564:	08028817 	.word	0x08028817
 8028568:	0802884f 	.word	0x0802884f
 802856c:	08028873 	.word	0x08028873

08028570 <_cleanup_r>:
 8028570:	4901      	ldr	r1, [pc, #4]	; (8028578 <_cleanup_r+0x8>)
 8028572:	f000 b8af 	b.w	80286d4 <_fwalk_reent>
 8028576:	bf00      	nop
 8028578:	080284b1 	.word	0x080284b1

0802857c <__sfmoreglue>:
 802857c:	b570      	push	{r4, r5, r6, lr}
 802857e:	1e4a      	subs	r2, r1, #1
 8028580:	2568      	movs	r5, #104	; 0x68
 8028582:	4355      	muls	r5, r2
 8028584:	460e      	mov	r6, r1
 8028586:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802858a:	f7ff fa3b 	bl	8027a04 <_malloc_r>
 802858e:	4604      	mov	r4, r0
 8028590:	b140      	cbz	r0, 80285a4 <__sfmoreglue+0x28>
 8028592:	2100      	movs	r1, #0
 8028594:	e9c0 1600 	strd	r1, r6, [r0]
 8028598:	300c      	adds	r0, #12
 802859a:	60a0      	str	r0, [r4, #8]
 802859c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80285a0:	f7ff f9d8 	bl	8027954 <memset>
 80285a4:	4620      	mov	r0, r4
 80285a6:	bd70      	pop	{r4, r5, r6, pc}

080285a8 <__sfp_lock_acquire>:
 80285a8:	4801      	ldr	r0, [pc, #4]	; (80285b0 <__sfp_lock_acquire+0x8>)
 80285aa:	f7ff b9b2 	b.w	8027912 <__retarget_lock_acquire_recursive>
 80285ae:	bf00      	nop
 80285b0:	24026434 	.word	0x24026434

080285b4 <__sfp_lock_release>:
 80285b4:	4801      	ldr	r0, [pc, #4]	; (80285bc <__sfp_lock_release+0x8>)
 80285b6:	f7ff b9ae 	b.w	8027916 <__retarget_lock_release_recursive>
 80285ba:	bf00      	nop
 80285bc:	24026434 	.word	0x24026434

080285c0 <__sinit_lock_acquire>:
 80285c0:	4801      	ldr	r0, [pc, #4]	; (80285c8 <__sinit_lock_acquire+0x8>)
 80285c2:	f7ff b9a6 	b.w	8027912 <__retarget_lock_acquire_recursive>
 80285c6:	bf00      	nop
 80285c8:	24026433 	.word	0x24026433

080285cc <__sinit_lock_release>:
 80285cc:	4801      	ldr	r0, [pc, #4]	; (80285d4 <__sinit_lock_release+0x8>)
 80285ce:	f7ff b9a2 	b.w	8027916 <__retarget_lock_release_recursive>
 80285d2:	bf00      	nop
 80285d4:	24026433 	.word	0x24026433

080285d8 <__sinit>:
 80285d8:	b510      	push	{r4, lr}
 80285da:	4604      	mov	r4, r0
 80285dc:	f7ff fff0 	bl	80285c0 <__sinit_lock_acquire>
 80285e0:	69a3      	ldr	r3, [r4, #24]
 80285e2:	b11b      	cbz	r3, 80285ec <__sinit+0x14>
 80285e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80285e8:	f7ff bff0 	b.w	80285cc <__sinit_lock_release>
 80285ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80285f0:	6523      	str	r3, [r4, #80]	; 0x50
 80285f2:	4b13      	ldr	r3, [pc, #76]	; (8028640 <__sinit+0x68>)
 80285f4:	4a13      	ldr	r2, [pc, #76]	; (8028644 <__sinit+0x6c>)
 80285f6:	681b      	ldr	r3, [r3, #0]
 80285f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80285fa:	42a3      	cmp	r3, r4
 80285fc:	bf04      	itt	eq
 80285fe:	2301      	moveq	r3, #1
 8028600:	61a3      	streq	r3, [r4, #24]
 8028602:	4620      	mov	r0, r4
 8028604:	f000 f820 	bl	8028648 <__sfp>
 8028608:	6060      	str	r0, [r4, #4]
 802860a:	4620      	mov	r0, r4
 802860c:	f000 f81c 	bl	8028648 <__sfp>
 8028610:	60a0      	str	r0, [r4, #8]
 8028612:	4620      	mov	r0, r4
 8028614:	f000 f818 	bl	8028648 <__sfp>
 8028618:	2200      	movs	r2, #0
 802861a:	60e0      	str	r0, [r4, #12]
 802861c:	2104      	movs	r1, #4
 802861e:	6860      	ldr	r0, [r4, #4]
 8028620:	f7ff ff82 	bl	8028528 <std>
 8028624:	68a0      	ldr	r0, [r4, #8]
 8028626:	2201      	movs	r2, #1
 8028628:	2109      	movs	r1, #9
 802862a:	f7ff ff7d 	bl	8028528 <std>
 802862e:	68e0      	ldr	r0, [r4, #12]
 8028630:	2202      	movs	r2, #2
 8028632:	2112      	movs	r1, #18
 8028634:	f7ff ff78 	bl	8028528 <std>
 8028638:	2301      	movs	r3, #1
 802863a:	61a3      	str	r3, [r4, #24]
 802863c:	e7d2      	b.n	80285e4 <__sinit+0xc>
 802863e:	bf00      	nop
 8028640:	0802c9e4 	.word	0x0802c9e4
 8028644:	08028571 	.word	0x08028571

08028648 <__sfp>:
 8028648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802864a:	4607      	mov	r7, r0
 802864c:	f7ff ffac 	bl	80285a8 <__sfp_lock_acquire>
 8028650:	4b1e      	ldr	r3, [pc, #120]	; (80286cc <__sfp+0x84>)
 8028652:	681e      	ldr	r6, [r3, #0]
 8028654:	69b3      	ldr	r3, [r6, #24]
 8028656:	b913      	cbnz	r3, 802865e <__sfp+0x16>
 8028658:	4630      	mov	r0, r6
 802865a:	f7ff ffbd 	bl	80285d8 <__sinit>
 802865e:	3648      	adds	r6, #72	; 0x48
 8028660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028664:	3b01      	subs	r3, #1
 8028666:	d503      	bpl.n	8028670 <__sfp+0x28>
 8028668:	6833      	ldr	r3, [r6, #0]
 802866a:	b30b      	cbz	r3, 80286b0 <__sfp+0x68>
 802866c:	6836      	ldr	r6, [r6, #0]
 802866e:	e7f7      	b.n	8028660 <__sfp+0x18>
 8028670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028674:	b9d5      	cbnz	r5, 80286ac <__sfp+0x64>
 8028676:	4b16      	ldr	r3, [pc, #88]	; (80286d0 <__sfp+0x88>)
 8028678:	60e3      	str	r3, [r4, #12]
 802867a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802867e:	6665      	str	r5, [r4, #100]	; 0x64
 8028680:	f7ff f946 	bl	8027910 <__retarget_lock_init_recursive>
 8028684:	f7ff ff96 	bl	80285b4 <__sfp_lock_release>
 8028688:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802868c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8028690:	6025      	str	r5, [r4, #0]
 8028692:	61a5      	str	r5, [r4, #24]
 8028694:	2208      	movs	r2, #8
 8028696:	4629      	mov	r1, r5
 8028698:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802869c:	f7ff f95a 	bl	8027954 <memset>
 80286a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80286a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80286a8:	4620      	mov	r0, r4
 80286aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80286ac:	3468      	adds	r4, #104	; 0x68
 80286ae:	e7d9      	b.n	8028664 <__sfp+0x1c>
 80286b0:	2104      	movs	r1, #4
 80286b2:	4638      	mov	r0, r7
 80286b4:	f7ff ff62 	bl	802857c <__sfmoreglue>
 80286b8:	4604      	mov	r4, r0
 80286ba:	6030      	str	r0, [r6, #0]
 80286bc:	2800      	cmp	r0, #0
 80286be:	d1d5      	bne.n	802866c <__sfp+0x24>
 80286c0:	f7ff ff78 	bl	80285b4 <__sfp_lock_release>
 80286c4:	230c      	movs	r3, #12
 80286c6:	603b      	str	r3, [r7, #0]
 80286c8:	e7ee      	b.n	80286a8 <__sfp+0x60>
 80286ca:	bf00      	nop
 80286cc:	0802c9e4 	.word	0x0802c9e4
 80286d0:	ffff0001 	.word	0xffff0001

080286d4 <_fwalk_reent>:
 80286d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80286d8:	4606      	mov	r6, r0
 80286da:	4688      	mov	r8, r1
 80286dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80286e0:	2700      	movs	r7, #0
 80286e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80286e6:	f1b9 0901 	subs.w	r9, r9, #1
 80286ea:	d505      	bpl.n	80286f8 <_fwalk_reent+0x24>
 80286ec:	6824      	ldr	r4, [r4, #0]
 80286ee:	2c00      	cmp	r4, #0
 80286f0:	d1f7      	bne.n	80286e2 <_fwalk_reent+0xe>
 80286f2:	4638      	mov	r0, r7
 80286f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80286f8:	89ab      	ldrh	r3, [r5, #12]
 80286fa:	2b01      	cmp	r3, #1
 80286fc:	d907      	bls.n	802870e <_fwalk_reent+0x3a>
 80286fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028702:	3301      	adds	r3, #1
 8028704:	d003      	beq.n	802870e <_fwalk_reent+0x3a>
 8028706:	4629      	mov	r1, r5
 8028708:	4630      	mov	r0, r6
 802870a:	47c0      	blx	r8
 802870c:	4307      	orrs	r7, r0
 802870e:	3568      	adds	r5, #104	; 0x68
 8028710:	e7e9      	b.n	80286e6 <_fwalk_reent+0x12>

08028712 <__swhatbuf_r>:
 8028712:	b570      	push	{r4, r5, r6, lr}
 8028714:	460e      	mov	r6, r1
 8028716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802871a:	2900      	cmp	r1, #0
 802871c:	b096      	sub	sp, #88	; 0x58
 802871e:	4614      	mov	r4, r2
 8028720:	461d      	mov	r5, r3
 8028722:	da07      	bge.n	8028734 <__swhatbuf_r+0x22>
 8028724:	2300      	movs	r3, #0
 8028726:	602b      	str	r3, [r5, #0]
 8028728:	89b3      	ldrh	r3, [r6, #12]
 802872a:	061a      	lsls	r2, r3, #24
 802872c:	d410      	bmi.n	8028750 <__swhatbuf_r+0x3e>
 802872e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028732:	e00e      	b.n	8028752 <__swhatbuf_r+0x40>
 8028734:	466a      	mov	r2, sp
 8028736:	f000 f8c3 	bl	80288c0 <_fstat_r>
 802873a:	2800      	cmp	r0, #0
 802873c:	dbf2      	blt.n	8028724 <__swhatbuf_r+0x12>
 802873e:	9a01      	ldr	r2, [sp, #4]
 8028740:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028744:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028748:	425a      	negs	r2, r3
 802874a:	415a      	adcs	r2, r3
 802874c:	602a      	str	r2, [r5, #0]
 802874e:	e7ee      	b.n	802872e <__swhatbuf_r+0x1c>
 8028750:	2340      	movs	r3, #64	; 0x40
 8028752:	2000      	movs	r0, #0
 8028754:	6023      	str	r3, [r4, #0]
 8028756:	b016      	add	sp, #88	; 0x58
 8028758:	bd70      	pop	{r4, r5, r6, pc}
	...

0802875c <__smakebuf_r>:
 802875c:	898b      	ldrh	r3, [r1, #12]
 802875e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028760:	079d      	lsls	r5, r3, #30
 8028762:	4606      	mov	r6, r0
 8028764:	460c      	mov	r4, r1
 8028766:	d507      	bpl.n	8028778 <__smakebuf_r+0x1c>
 8028768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802876c:	6023      	str	r3, [r4, #0]
 802876e:	6123      	str	r3, [r4, #16]
 8028770:	2301      	movs	r3, #1
 8028772:	6163      	str	r3, [r4, #20]
 8028774:	b002      	add	sp, #8
 8028776:	bd70      	pop	{r4, r5, r6, pc}
 8028778:	ab01      	add	r3, sp, #4
 802877a:	466a      	mov	r2, sp
 802877c:	f7ff ffc9 	bl	8028712 <__swhatbuf_r>
 8028780:	9900      	ldr	r1, [sp, #0]
 8028782:	4605      	mov	r5, r0
 8028784:	4630      	mov	r0, r6
 8028786:	f7ff f93d 	bl	8027a04 <_malloc_r>
 802878a:	b948      	cbnz	r0, 80287a0 <__smakebuf_r+0x44>
 802878c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028790:	059a      	lsls	r2, r3, #22
 8028792:	d4ef      	bmi.n	8028774 <__smakebuf_r+0x18>
 8028794:	f023 0303 	bic.w	r3, r3, #3
 8028798:	f043 0302 	orr.w	r3, r3, #2
 802879c:	81a3      	strh	r3, [r4, #12]
 802879e:	e7e3      	b.n	8028768 <__smakebuf_r+0xc>
 80287a0:	4b0d      	ldr	r3, [pc, #52]	; (80287d8 <__smakebuf_r+0x7c>)
 80287a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80287a4:	89a3      	ldrh	r3, [r4, #12]
 80287a6:	6020      	str	r0, [r4, #0]
 80287a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80287ac:	81a3      	strh	r3, [r4, #12]
 80287ae:	9b00      	ldr	r3, [sp, #0]
 80287b0:	6163      	str	r3, [r4, #20]
 80287b2:	9b01      	ldr	r3, [sp, #4]
 80287b4:	6120      	str	r0, [r4, #16]
 80287b6:	b15b      	cbz	r3, 80287d0 <__smakebuf_r+0x74>
 80287b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80287bc:	4630      	mov	r0, r6
 80287be:	f000 f891 	bl	80288e4 <_isatty_r>
 80287c2:	b128      	cbz	r0, 80287d0 <__smakebuf_r+0x74>
 80287c4:	89a3      	ldrh	r3, [r4, #12]
 80287c6:	f023 0303 	bic.w	r3, r3, #3
 80287ca:	f043 0301 	orr.w	r3, r3, #1
 80287ce:	81a3      	strh	r3, [r4, #12]
 80287d0:	89a0      	ldrh	r0, [r4, #12]
 80287d2:	4305      	orrs	r5, r0
 80287d4:	81a5      	strh	r5, [r4, #12]
 80287d6:	e7cd      	b.n	8028774 <__smakebuf_r+0x18>
 80287d8:	08028571 	.word	0x08028571

080287dc <__malloc_lock>:
 80287dc:	4801      	ldr	r0, [pc, #4]	; (80287e4 <__malloc_lock+0x8>)
 80287de:	f7ff b898 	b.w	8027912 <__retarget_lock_acquire_recursive>
 80287e2:	bf00      	nop
 80287e4:	24026430 	.word	0x24026430

080287e8 <__malloc_unlock>:
 80287e8:	4801      	ldr	r0, [pc, #4]	; (80287f0 <__malloc_unlock+0x8>)
 80287ea:	f7ff b894 	b.w	8027916 <__retarget_lock_release_recursive>
 80287ee:	bf00      	nop
 80287f0:	24026430 	.word	0x24026430

080287f4 <__sread>:
 80287f4:	b510      	push	{r4, lr}
 80287f6:	460c      	mov	r4, r1
 80287f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80287fc:	f000 f894 	bl	8028928 <_read_r>
 8028800:	2800      	cmp	r0, #0
 8028802:	bfab      	itete	ge
 8028804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8028806:	89a3      	ldrhlt	r3, [r4, #12]
 8028808:	181b      	addge	r3, r3, r0
 802880a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802880e:	bfac      	ite	ge
 8028810:	6563      	strge	r3, [r4, #84]	; 0x54
 8028812:	81a3      	strhlt	r3, [r4, #12]
 8028814:	bd10      	pop	{r4, pc}

08028816 <__swrite>:
 8028816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802881a:	461f      	mov	r7, r3
 802881c:	898b      	ldrh	r3, [r1, #12]
 802881e:	05db      	lsls	r3, r3, #23
 8028820:	4605      	mov	r5, r0
 8028822:	460c      	mov	r4, r1
 8028824:	4616      	mov	r6, r2
 8028826:	d505      	bpl.n	8028834 <__swrite+0x1e>
 8028828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802882c:	2302      	movs	r3, #2
 802882e:	2200      	movs	r2, #0
 8028830:	f000 f868 	bl	8028904 <_lseek_r>
 8028834:	89a3      	ldrh	r3, [r4, #12]
 8028836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802883a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802883e:	81a3      	strh	r3, [r4, #12]
 8028840:	4632      	mov	r2, r6
 8028842:	463b      	mov	r3, r7
 8028844:	4628      	mov	r0, r5
 8028846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802884a:	f000 b817 	b.w	802887c <_write_r>

0802884e <__sseek>:
 802884e:	b510      	push	{r4, lr}
 8028850:	460c      	mov	r4, r1
 8028852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028856:	f000 f855 	bl	8028904 <_lseek_r>
 802885a:	1c43      	adds	r3, r0, #1
 802885c:	89a3      	ldrh	r3, [r4, #12]
 802885e:	bf15      	itete	ne
 8028860:	6560      	strne	r0, [r4, #84]	; 0x54
 8028862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8028866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802886a:	81a3      	strheq	r3, [r4, #12]
 802886c:	bf18      	it	ne
 802886e:	81a3      	strhne	r3, [r4, #12]
 8028870:	bd10      	pop	{r4, pc}

08028872 <__sclose>:
 8028872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028876:	f000 b813 	b.w	80288a0 <_close_r>
	...

0802887c <_write_r>:
 802887c:	b538      	push	{r3, r4, r5, lr}
 802887e:	4d07      	ldr	r5, [pc, #28]	; (802889c <_write_r+0x20>)
 8028880:	4604      	mov	r4, r0
 8028882:	4608      	mov	r0, r1
 8028884:	4611      	mov	r1, r2
 8028886:	2200      	movs	r2, #0
 8028888:	602a      	str	r2, [r5, #0]
 802888a:	461a      	mov	r2, r3
 802888c:	f7de fcef 	bl	800726e <_write>
 8028890:	1c43      	adds	r3, r0, #1
 8028892:	d102      	bne.n	802889a <_write_r+0x1e>
 8028894:	682b      	ldr	r3, [r5, #0]
 8028896:	b103      	cbz	r3, 802889a <_write_r+0x1e>
 8028898:	6023      	str	r3, [r4, #0]
 802889a:	bd38      	pop	{r3, r4, r5, pc}
 802889c:	2402643c 	.word	0x2402643c

080288a0 <_close_r>:
 80288a0:	b538      	push	{r3, r4, r5, lr}
 80288a2:	4d06      	ldr	r5, [pc, #24]	; (80288bc <_close_r+0x1c>)
 80288a4:	2300      	movs	r3, #0
 80288a6:	4604      	mov	r4, r0
 80288a8:	4608      	mov	r0, r1
 80288aa:	602b      	str	r3, [r5, #0]
 80288ac:	f7de fcfb 	bl	80072a6 <_close>
 80288b0:	1c43      	adds	r3, r0, #1
 80288b2:	d102      	bne.n	80288ba <_close_r+0x1a>
 80288b4:	682b      	ldr	r3, [r5, #0]
 80288b6:	b103      	cbz	r3, 80288ba <_close_r+0x1a>
 80288b8:	6023      	str	r3, [r4, #0]
 80288ba:	bd38      	pop	{r3, r4, r5, pc}
 80288bc:	2402643c 	.word	0x2402643c

080288c0 <_fstat_r>:
 80288c0:	b538      	push	{r3, r4, r5, lr}
 80288c2:	4d07      	ldr	r5, [pc, #28]	; (80288e0 <_fstat_r+0x20>)
 80288c4:	2300      	movs	r3, #0
 80288c6:	4604      	mov	r4, r0
 80288c8:	4608      	mov	r0, r1
 80288ca:	4611      	mov	r1, r2
 80288cc:	602b      	str	r3, [r5, #0]
 80288ce:	f7de fcf6 	bl	80072be <_fstat>
 80288d2:	1c43      	adds	r3, r0, #1
 80288d4:	d102      	bne.n	80288dc <_fstat_r+0x1c>
 80288d6:	682b      	ldr	r3, [r5, #0]
 80288d8:	b103      	cbz	r3, 80288dc <_fstat_r+0x1c>
 80288da:	6023      	str	r3, [r4, #0]
 80288dc:	bd38      	pop	{r3, r4, r5, pc}
 80288de:	bf00      	nop
 80288e0:	2402643c 	.word	0x2402643c

080288e4 <_isatty_r>:
 80288e4:	b538      	push	{r3, r4, r5, lr}
 80288e6:	4d06      	ldr	r5, [pc, #24]	; (8028900 <_isatty_r+0x1c>)
 80288e8:	2300      	movs	r3, #0
 80288ea:	4604      	mov	r4, r0
 80288ec:	4608      	mov	r0, r1
 80288ee:	602b      	str	r3, [r5, #0]
 80288f0:	f7de fcf5 	bl	80072de <_isatty>
 80288f4:	1c43      	adds	r3, r0, #1
 80288f6:	d102      	bne.n	80288fe <_isatty_r+0x1a>
 80288f8:	682b      	ldr	r3, [r5, #0]
 80288fa:	b103      	cbz	r3, 80288fe <_isatty_r+0x1a>
 80288fc:	6023      	str	r3, [r4, #0]
 80288fe:	bd38      	pop	{r3, r4, r5, pc}
 8028900:	2402643c 	.word	0x2402643c

08028904 <_lseek_r>:
 8028904:	b538      	push	{r3, r4, r5, lr}
 8028906:	4d07      	ldr	r5, [pc, #28]	; (8028924 <_lseek_r+0x20>)
 8028908:	4604      	mov	r4, r0
 802890a:	4608      	mov	r0, r1
 802890c:	4611      	mov	r1, r2
 802890e:	2200      	movs	r2, #0
 8028910:	602a      	str	r2, [r5, #0]
 8028912:	461a      	mov	r2, r3
 8028914:	f7de fcee 	bl	80072f4 <_lseek>
 8028918:	1c43      	adds	r3, r0, #1
 802891a:	d102      	bne.n	8028922 <_lseek_r+0x1e>
 802891c:	682b      	ldr	r3, [r5, #0]
 802891e:	b103      	cbz	r3, 8028922 <_lseek_r+0x1e>
 8028920:	6023      	str	r3, [r4, #0]
 8028922:	bd38      	pop	{r3, r4, r5, pc}
 8028924:	2402643c 	.word	0x2402643c

08028928 <_read_r>:
 8028928:	b538      	push	{r3, r4, r5, lr}
 802892a:	4d07      	ldr	r5, [pc, #28]	; (8028948 <_read_r+0x20>)
 802892c:	4604      	mov	r4, r0
 802892e:	4608      	mov	r0, r1
 8028930:	4611      	mov	r1, r2
 8028932:	2200      	movs	r2, #0
 8028934:	602a      	str	r2, [r5, #0]
 8028936:	461a      	mov	r2, r3
 8028938:	f7de fc7c 	bl	8007234 <_read>
 802893c:	1c43      	adds	r3, r0, #1
 802893e:	d102      	bne.n	8028946 <_read_r+0x1e>
 8028940:	682b      	ldr	r3, [r5, #0]
 8028942:	b103      	cbz	r3, 8028946 <_read_r+0x1e>
 8028944:	6023      	str	r3, [r4, #0]
 8028946:	bd38      	pop	{r3, r4, r5, pc}
 8028948:	2402643c 	.word	0x2402643c

0802894c <_init>:
 802894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802894e:	bf00      	nop
 8028950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028952:	bc08      	pop	{r3}
 8028954:	469e      	mov	lr, r3
 8028956:	4770      	bx	lr

08028958 <_fini>:
 8028958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802895a:	bf00      	nop
 802895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802895e:	bc08      	pop	{r3}
 8028960:	469e      	mov	lr, r3
 8028962:	4770      	bx	lr
